00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 6100 E074                  		bsr.w	PlaySound_Special
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0015                  		cmpi.w	#$15,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590                            		
00003590 6100 E02A                  		bsr.w	PlaySound_Special
00003594 60C0                       		bra.s	LevelSelect
00003596                            ; ===========================================================================
00003596                            
00003596                            LevSel_Ending:				; XREF: LevelSelect
00003596 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000359C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A2 4E75                       		rts	
000035A4                            ; ===========================================================================
000035A4                            
000035A4                            LevSel_Credits:				; XREF: LevelSelect
000035A4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035AA 103C 0091                  		move.b	#$91,d0
000035AE 6100 E00C                  		bsr.w	PlaySound_Special ; play credits music
000035B2 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035B8 4E75                       		rts	
000035BA                            ; ===========================================================================
000035BA                            
000035BA                            LevSel_Level_SS:			; XREF: LevelSelect
000035BA D040                       		add.w	d0,d0
000035BC 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C0 6B00 FF94                  		bmi.w	LevelSelect
000035C4 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035C8 6600                       		bne.s	LevSel_Level	; if not, branch
000035CA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035D4 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035DA 7000                       		moveq	#0,d0
000035DC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035E4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035E8 4E75                       		rts	
000035EA                            ; ===========================================================================
000035EA                            
000035EA                            LevSel_Level:				; XREF: LevSel_Level_SS
000035EA 0240 3FFF                  		andi.w	#$3FFF,d0
000035EE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F2                            
000035F2                            PlayLevel:				; XREF: ROM:00003246j ...
000035F2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035FE 7000                       		moveq	#0,d0
00003600 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003604 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003608 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000360C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003610 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003614 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003618 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000361C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003620 103C 00E0                  		move.b	#$E0,d0
00003624 6100 DF96                  		bsr.w	PlaySound_Special ; fade out music
00003628 4E75                       		rts	
0000362A                            ; ===========================================================================
0000362A                            ; ---------------------------------------------------------------------------
0000362A                            ; Level	select - level pointers
0000362A                            ; ---------------------------------------------------------------------------
0000362A                            LSelectPointers:
0000362A                            		incbin	misc\ls_point.bin
00003654                            		even
00003654                            ; ---------------------------------------------------------------------------
00003654                            ; Level	select codes
00003654                            ; ---------------------------------------------------------------------------
00003654                            LevelSelectCode_J:
00003654                            		incbin	misc\ls_jcode.bin
0000365A                            		even
0000365A                            
0000365A                            LevelSelectCode_US:
0000365A                            		incbin	misc\ls_ucode.bin
00003660                            		even
00003660                            ; ===========================================================================
00003660                            
00003660                            ; ---------------------------------------------------------------------------
00003660                            ; Demo mode
00003660                            ; ---------------------------------------------------------------------------
00003660                            
00003660                            Demo:					; XREF: TitleScreen
00003660 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003666                            
00003666                            loc_33B6:				; XREF: loc_33E4
00003666 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000366C 6100 F582                  		bsr.w	DelayProgram
00003670 6100 0000                  		bsr.w	DeformBgLayer
00003674 6100 E4E6                  		bsr.w	PalCycle_Load
00003678 6100 E192                  		bsr.w	RunPLC_RAM
0000367C 3038 D008                  		move.w	($FFFFD008).w,d0
00003680 5440                       		addq.w	#2,d0
00003682 31C0 D008                  		move.w	d0,($FFFFD008).w
00003686 0C40 1C00                  		cmpi.w	#$1C00,d0
0000368A 6500                       		bcs.s	loc_33E4
0000368C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            loc_33E4:				; XREF: Demo
00003694 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000369A 6600 FDEE                  		bne.w	Title_ChkLevSel	; if yes, branch
0000369E 4A78 F614                  		tst.w	($FFFFF614).w
000036A2 6600 FFC2                  		bne.w	loc_33B6
000036A6 103C 00E0                  		move.b	#$E0,d0
000036AA 6100 DF10                  		bsr.w	PlaySound_Special ; fade out music
000036AE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B2 0240 0007                  		andi.w	#7,d0
000036B6 D040                       		add.w	d0,d0
000036B8 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036BC 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C0 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036C4 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036CA 6500                       		bcs.s	loc_3422	; if yes, branch
000036CC 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D2                            
000036D2                            loc_3422:
000036D2 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036D8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036DE 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E2 6600                       		bne.s	Demo_Level	; if not, branch
000036E4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036EA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036EE 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F2                            
000036F2                            Demo_Level:
000036F2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036F8 7000                       		moveq	#0,d0
000036FA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036FE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003702 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003706 4E75                       		rts	
00003708                            ; ===========================================================================
00003708                            ; ---------------------------------------------------------------------------
00003708                            ; Levels used in demos
00003708                            ; ---------------------------------------------------------------------------
00003708                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003710                            		even
00003710                            
00003710                            ; ---------------------------------------------------------------------------
00003710                            ; Subroutine to	change what you're selecting in the level select
00003710                            ; ---------------------------------------------------------------------------
00003710                            
00003710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003710                            
00003710                            
00003710                            LevSelControls:				; XREF: LevelSelect
00003710 1238 F605                  		move.b	($FFFFF605).w,d1
00003714 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003718 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000371A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000371E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003720                            
00003720                            LevSel_UpDown:
00003720 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003726 1238 F604                  		move.b	($FFFFF604).w,d1
0000372A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000372E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003730 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003734 0801 0000                  		btst	#0,d1		; is up	pressed?
00003738 6700                       		beq.s	LevSel_Down	; if not, branch
0000373A 5340                       		subq.w	#1,d0		; move up 1 selection
0000373C 6400                       		bcc.s	LevSel_Down
0000373E 7016                       		moveq	#$16,d0		; if selection moves below 0, jump to selection	$15
00003740                            
00003740                            LevSel_Down:
00003740 0801 0001                  		btst	#1,d1		; is down pressed?
00003744 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003746 5240                       		addq.w	#1,d0		; move down 1 selection
00003748 0C40 0017                  		cmpi.w	#$17,d0
0000374C 6500                       		bcs.s	LevSel_Refresh
0000374E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003750                            ; ===========================================================================
00003750                            LevSel_Refresh:
00003750 3C00                       		move.w	d0,d6
00003752 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003756 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000375A 363C C65F                  		move.w	#$C680-$21,d3
0000375E 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003762 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003766 4E75                       		rts	
00003768                            		
00003768                            LevSel_SndTest:				; XREF: LevSelControls
00003768 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
0000376E 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003770 1238 F605                  		move.b	($FFFFF605).w,d1
00003774 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003778 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000377A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000377E 0801 0002                  		btst	#2,d1		; is left pressed?
00003782 6700                       		beq.s	LevSel_Right	; if not, branch
00003784 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003786 6400                       		bcc.s	LevSel_Right
00003788 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
0000378A                            
0000378A                            LevSel_Right:
0000378A 0801 0003                  		btst	#3,d1		; is right pressed?
0000378E 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003790 5240                       		addq.w	#1,d0		; add 1	to sound test
00003792 0C40 0050                  		cmpi.w	#$50,d0
00003796 6500                       		bcs.s	LevSel_Refresh2
00003798 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
0000379A                            
0000379A                            LevSel_Refresh2:
0000379A 363C C65F                  		move.w	#$C680-$21,d3
0000379E 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037A2 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037A6                            
000037A6                            LevSel_NoMove:
000037A6 4E75                       		rts	
000037A8                            ; End of function LevSelControls
000037A8                            
000037A8                            ; ---------------------------------------------------------------------------
000037A8                            ; Subroutine to load level select text
000037A8                            ; ---------------------------------------------------------------------------
000037A8                            
000037A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037A8 =62040003                  lsscrpos = $62040003
000037A8 =00240000                  lsoff = $240000
000037A8 =663E0003                  lsstpos = $663E0003
000037A8                            LevSelTextLoad_loop:
000037A8 2D44 0004                  		move.l	d4,4(a6)
000037AC 6100 0000                  		bsr.w	LevSel_ChgLine
000037B0 0684 0080 0000             		addi.l	#$800000,d4
000037B6 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037BA 4E75                       		rts
000037BC                            LevSelTextLoad:				; XREF: TitleScreen
000037BC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037C2 4DF9 00C0 0000             		lea	($C00000).l,a6
000037C8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037CC 283C 6204 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037D2                            		
000037D2 323C 000B                  		move.w	#11,d1		; number of lines of text (first row)
000037D6 61D0                       		bsr.s	LevSelTextLoad_loop
000037D8                            		
000037D8                            		
000037D8 283C 6228 0003             		move.l	#lsscrpos+lsoff,d4
000037DE 323C 000C                  		move.w	#12,d1		; number of lines of text (second row)
000037E2 61C4                       		bsr.s	LevSelTextLoad_loop
000037E4 363C C65F                  		move.w	#$C680-$21,d3
000037E8                            		
000037E8                            LevSelHighlightCode:
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 7000                       		moveq	#0,d0
000037F0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000037F4 3200                       		move.w	d0,d1
000037F6 283C 6204 0003             		move.l	#lsscrpos,d4
000037FC                            		
000037FC 0C40 000C                  		cmpi.w	#12,d0
00003800 6D00                       		blt.s	@notsecond
00003802                            		
00003802 0440 000C                  		sub.w	#12,d0
00003806 0684 0024 0000             		addi.l	#lsoff,d4
0000380C                            	@notsecond:
0000380C EF48                       		lsl.w	#7,d0
0000380E 4840                       		swap	d0
00003810 D880                       		add.l	d0,d4
00003812 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003818 E749                       		lsl.w	#3,d1
0000381A D241                       		add.w	d1,d1
0000381C D2C1                       		adda.w	d1,a1
0000381E 2D44 0004                  		move.l	d4,4(a6)
00003822 6100 0000                  		bsr.w	LevSel_ChgLine
00003826 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000382C 6700                       		beq.s	LevSelSndTest
0000382E 4E75                       		rts
00003830                            
00003830                            LevSelSndTest:
00003830 0643 0030                  		add.w	#$30,d3
00003834 23FC 663E 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
0000383E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003842 0640 0080                  		addi.w	#$80,d0
00003846 1400                       		move.b	d0,d2
00003848 E808                       		lsr.b	#4,d0
0000384A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000384E 1002                       		move.b	d2,d0
00003850 6100 0000                  		bsr.w	LevSel_ChgSnd
00003854 4E75                       		rts	
00003856                            ; End of function LevSelTextLoad
00003856                            
00003856                            
00003856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003856                            
00003856                            
00003856                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003856 0240 000F                  		andi.w	#$F,d0
0000385A 0C00 000A                  		cmpi.b	#$A,d0
0000385E 6500                       		bcs.s	loc_3580
00003860 5E00                       		addi.b	#7,d0
00003862                            
00003862                            loc_3580:
00003862 D043                       		add.w	d3,d0
00003864 3C80                       		move.w	d0,(a6)
00003866 4E75                       		rts	
00003868                            ; End of function LevSel_ChgSnd
00003868                            
00003868                            
00003868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003868                            
00003868                            
00003868                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003868 740F                       		moveq	#$10-1,d2		; number of characters per line
0000386A                            
0000386A                            @loop:
0000386A 7000                       		moveq	#0,d0
0000386C 1019                       		move.b	(a1)+,d0
0000386E 0C00 0020                  		cmpi.b	#$20,d0
00003872 6E00                       		bgt.s	@draw
00003874 3CBC 0000                  		move.w	#0,(a6)
00003878 51CA FFF0                  		dbf	d2,@loop
0000387C 4E75                       		rts	
0000387E                            ; ===========================================================================
0000387E                            
0000387E                            @draw:				; XREF: LevSel_ChgLine
0000387E D043                       		add.w	d3,d0
00003880 3C80                       		move.w	d0,(a6)
00003882 51CA FFE6                  		dbf	d2,@loop
00003886 4E75                       		rts	
00003888                            ; End of function LevSel_ChgLine
00003888                            
00003888                            ; ===========================================================================
00003888                            ; ---------------------------------------------------------------------------
00003888                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003888                            ; ---------------------------------------------------------------------------
00003888                            LevelMenuText:	
00003888 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003898 2020 2020 2020 2020 2020+          dc.b    "               2"
000038A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038B8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
000038C8 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038E8 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
000038F8 2020 2020 2020 2020 2020+          dc.b    "               2"
00003908 2020 2020 2020 2020 2020+          dc.b    "               3"
00003918 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003928 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003938 2020 2020 2020 2020 2020+          dc.b    "               3"
00003948 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003958 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
00003968 2020 2020 2020 2020 2020+          dc.b    "               3"
00003978 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003988 2020 2020 2020 2020 2020+          dc.b    "               2"
00003998 2020 2020 2020 2020 2020+          dc.b    "               3"
000039A8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039B8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
000039C8 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
000039D8 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
000039E8 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
000039F8 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A08                                    even
00003A08                            ; ---------------------------------------------------------------------------
00003A08                            ; Music	playlist
00003A08                            ; ---------------------------------------------------------------------------
00003A08                            MusicList1:	incbin	misc\muslist1.bin
00003A10                            		even
00003A10                            MusicList2:	incbin	misc\muslist2.bin
00003A16                            		even
00003A16                            MusicList3:	incbin	misc\muslist3.bin
00003A1C                            		even
00003A1C                            MusicList4:	incbin	misc\muslist4.bin
00003A22                            		even
00003A22                            ; ===========================================================================
00003A22                            
00003A22                            ; ---------------------------------------------------------------------------
00003A22                            ; Level
00003A22                            ; ---------------------------------------------------------------------------
00003A22                            
00003A22                            Level:					; XREF: GameModeArray
00003A22 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003A28 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A2C 6B00                       		bmi.s	loc_37B6
00003A2E 103C 00E0                  		move.b	#$E0,d0
00003A32 6100 DB88                  		bsr.w	PlaySound_Special ; fade out music
00003A36                            
00003A36                            loc_37B6:
00003A36 6100 DDC6                  		bsr.w	ClearPLC
00003A3A 6100 E636                  		bsr.w	Pal_FadeFrom
00003A3E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A42 6B00                       		bmi.s	Level_ClrRam
00003A44 46FC 2700                  		move	#$2700,sr
00003A48 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003A52 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003A58 6100 DC06                  		bsr.w	NemDec
00003A5C 46FC 2300                  		move	#$2300,sr
00003A60 7000                       		moveq	#0,d0
00003A62 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A66 E948                       		lsl.w	#4,d0
00003A68 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003A6E 45F2 0000                  		lea	(a2,d0.w),a2
00003A72 7000                       		moveq	#0,d0
00003A74 1012                       		move.b	(a2),d0
00003A76 6700                       		beq.s	loc_37FC
00003A78 6100 DD26                  		bsr.w	LoadPLC		; load level patterns
00003A7C                            
00003A7C                            loc_37FC:
00003A7C 7001                       		moveq	#1,d0
00003A7E 6100 DD20                  		bsr.w	LoadPLC		; load standard	patterns
00003A82                            
00003A82                            Level_ClrRam:
00003A82 43F8 D000                  		lea	($FFFFD000).w,a1
00003A86 7000                       		moveq	#0,d0
00003A88 323C 07FF                  		move.w	#$7FF,d1
00003A8C                            
00003A8C                            Level_ClrObjRam:
00003A8C 22C0                       		move.l	d0,(a1)+
00003A8E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003A92                            
00003A92 43F8 F628                  		lea	($FFFFF628).w,a1
00003A96 7000                       		moveq	#0,d0
00003A98 323C 0015                  		move.w	#$15,d1
00003A9C                            
00003A9C                            Level_ClrVars:
00003A9C 22C0                       		move.l	d0,(a1)+
00003A9E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003AA2                            
00003AA2 43F8 F700                  		lea	($FFFFF700).w,a1
00003AA6 7000                       		moveq	#0,d0
00003AA8 323C 003F                  		move.w	#$3F,d1
00003AAC                            
00003AAC                            Level_ClrVars2:
00003AAC 22C0                       		move.l	d0,(a1)+
00003AAE 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003AB2                            
00003AB2 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003AB6 7000                       		moveq	#0,d0
00003AB8 323C 0047                  		move.w	#$47,d1
00003ABC                            
00003ABC                            Level_ClrVars3:
00003ABC 22C0                       		move.l	d0,(a1)+
00003ABE 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003AC2                            
00003AC2 46FC 2700                  		move	#$2700,sr
00003AC6 6100 DA1C                  		bsr.w	ClearScreen
00003ACA 4DF9 00C0 0004             		lea	($C00004).l,a6
00003AD0 3CBC 8B03                  		move.w	#$8B03,(a6)
00003AD4 3CBC 8230                  		move.w	#$8230,(a6)
00003AD8 3CBC 8407                  		move.w	#$8407,(a6)
00003ADC 3CBC 857C                  		move.w	#$857C,(a6)
00003AE0 3CBC 9001                  		move.w	#$9001,(a6)
00003AE4 3CBC 8004                  		move.w	#$8004,(a6)
00003AE8 3CBC 8720                  		move.w	#$8720,(a6)
00003AEC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003AF2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003AF6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003AFC 6600                       		bne.s	Level_LoadPal	; if not, branch
00003AFE 3CBC 8014                  		move.w	#$8014,(a6)
00003B02 7000                       		moveq	#0,d0
00003B04 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003B08 D040                       		add.w	d0,d0
00003B0A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003B10 3031 0000                  		move.w	(a1,d0.w),d0
00003B14 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003B18 31C0 F648                  		move.w	d0,($FFFFF648).w
00003B1C 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003B20 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003B24 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003B28 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003B2E                            
00003B2E                            Level_LoadPal:
00003B2E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003B34 46FC 2300                  		move	#$2300,sr
00003B38 7003                       		moveq	#3,d0
00003B3A 6100 E7FC                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003B3E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003B44 6600                       		bne.s	Level_GetBgm	; if not, branch
00003B46 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003B48 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003B4E 6600                       		bne.s	Level_WaterPal	; if not, branch
00003B50 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003B52                            
00003B52                            Level_WaterPal:
00003B52 6100 E7FC                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003B56 4A38 FE30                  		tst.b	($FFFFFE30).w
00003B5A 6700                       		beq.s	Level_GetBgm
00003B5C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003B62                            
00003B62                            ; NineKode begins here - How to play different songs on different acts
00003B62                             
00003B62                            Level_GetBgm:
00003B62 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B66 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003B6A 7000                       		moveq	#0,d0
00003B6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B70                             
00003B70 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003B76 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003B78 43F9 0000 3A08             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003B7E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003B80                             
00003B80                            Level_GetBgm2:
00003B80 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003B86 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003B88 43F9 0000 3A10             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003B8E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003B90                             
00003B90                            Level_GetBgm3:
00003B90 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003B96 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003B98 43F9 0000 3A16             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003B9E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003BA0                             
00003BA0                            Level_GetBgm4:
00003BA0 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003BA6 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003BA8 43F9 0000 3A1C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003BAE                             
00003BAE                            Level_PlayBgm:
00003BAE 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003BB2 6100 DA02                  		bsr.w	PlaySound	; play music
00003BB6 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003BBC                             
00003BBC                            ; NineKode ends here
00003BBC                            
00003BBC                            Level_TtlCard:
00003BBC 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003BC2 6100 F02C                  		bsr.w	DelayProgram
00003BC6 4EB9 0000 0000             		jsr	ObjectsLoad
00003BCC 4EB9 0000 0000             		jsr	BuildSprites
00003BD2 6100 DC38                  		bsr.w	RunPLC_RAM
00003BD6 3038 D108                  		move.w	($FFFFD108).w,d0
00003BDA B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003BDE 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003BE0 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003BE4 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003BE6 4EB9 0000 0000             		jsr	Hud_Base
00003BEC                            
00003BEC                            loc_3946:
00003BEC 7003                       		moveq	#3,d0
00003BEE 6100 E72C                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003BF2 6100 0000                  		bsr.w	LevelSizeLoad
00003BF6 6100 0000                  		bsr.w	DeformBgLayer
00003BFA 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003C00 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003C04 6100 0000                  		bsr.w	LoadTilesFromStart
00003C08 4EB9 0000 0000             		jsr	FloorLog_Unk
00003C0E 6100 0000                  		bsr.w	ColIndexLoad
00003C12 6100 0000                  		bsr.w	LZWaterEffects
00003C16 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003C1C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C20 6B00                       		bmi.s	Level_ChkDebug
00003C22 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003C28                            
00003C28                            Level_ChkDebug:
00003C28 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003C2C 6700                       		beq.s	Level_ChkWater	; if not, branch
00003C2E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003C34 6700                       		beq.s	Level_ChkWater	; if not, branch
00003C36 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003C3C                            
00003C3C                            Level_ChkWater:
00003C3C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003C42 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003C48 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C4E 6600                       		bne.s	Level_LoadObj	; if not, branch
00003C50 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003C56 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003C5C 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003C62 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003C68                            
00003C68                            Level_LoadObj:
00003C68 4EB9 0000 0000             		jsr	ObjPosLoad
00003C6E 4EB9 0000 0000             		jsr	ObjectsLoad
00003C74 4EB9 0000 0000             		jsr	BuildSprites
00003C7A 7000                       		moveq	#0,d0
00003C7C 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003C80 6600                       		bne.s	loc_39E8	; if yes, branch
00003C82 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003C86 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003C8A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003C8E                            
00003C8E                            loc_39E8:
00003C8E 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003C92 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003C96 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003C9A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003C9E                            		; move.b	d0,($FFFFFE2F).w
00003C9E 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003CA4 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003CA8 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003CAC 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003CB0 6100 0000                  		bsr.w	OscillateNumInit
00003CB4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003CBA 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003CC0 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003CC6 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003CCC 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003CD2 7000                       		moveq	#0,d0
00003CD4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CD8 E548                       		lsl.w	#2,d0
00003CDA 2271 0000                  		movea.l	(a1,d0.w),a1
00003CDE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003CE2 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003CE4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003CEA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003CEE 5340                       		subq.w	#1,d0
00003CF0 E548                       		lsl.w	#2,d0
00003CF2 2271 0000                  		movea.l	(a1,d0.w),a1
00003CF6                            
00003CF6                            Level_Demo:
00003CF6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003CFC 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003D00 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003D06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D0A 6A00                       		bpl.s	Level_ChkWaterPal
00003D0C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003D12 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003D18 6600                       		bne.s	Level_ChkWaterPal
00003D1A 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003D20                            
00003D20                            Level_ChkWaterPal:
00003D20 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003D26 6600                       		bne.s	Level_Delay	; if not, branch
00003D28 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003D2A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003D30 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003D32 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003D34                            
00003D34                            Level_WaterPal2:
00003D34 6100 E636                  		bsr.w	PalLoad4_Water
00003D38                            
00003D38                            Level_Delay:
00003D38 323C 0003                  		move.w	#3,d1
00003D3C                            
00003D3C                            Level_DelayLoop:
00003D3C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003D42 6100 EEAC                  		bsr.w	DelayProgram
00003D46 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003D4A                            
00003D4A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003D50 6100 E280                  		bsr.w	Pal_FadeTo2
00003D54 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D58 6B00                       		bmi.s	Level_ClrCardArt
00003D5A 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003D5E 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003D62 5838 D124                  		addq.b	#4,($FFFFD124).w
00003D66 5838 D164                  		addq.b	#4,($FFFFD164).w
00003D6A 6000                       		bra.s	Level_StartGame
00003D6C                            ; ===========================================================================
00003D6C                            
00003D6C                            Level_ClrCardArt:
00003D6C 7002                       		moveq	#2,d0
00003D6E 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003D74 7000                       		moveq	#0,d0
00003D76 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7A 0640 0015                  		addi.w	#$15,d0
00003D7E 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003D84                            
00003D84                            Level_StartGame:
00003D84 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003D8A                            
00003D8A                            ; ---------------------------------------------------------------------------
00003D8A                            ; Main level loop (when	all title card and loading sequences are finished)
00003D8A                            ; ---------------------------------------------------------------------------
00003D8A                            
00003D8A                            Level_MainLoop:
00003D8A 6100 D83C                  		bsr.w	PauseGame
00003D8E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003D94 6100 EE5A                  		bsr.w	DelayProgram
00003D98 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003D9C 6100 0000                  		bsr.w	MoveSonicInDemo
00003DA0 6100 0000                  		bsr.w	LZWaterEffects
00003DA4 4EB9 0000 0000             		jsr	ObjectsLoad
00003DAA 4A78 FE08                  		tst.w	($FFFFFE08).w
00003DAE 6600                       		bne.s	loc_3B10
00003DB0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003DB6 6400                       		bcc.s	loc_3B14
00003DB8                            
00003DB8                            loc_3B10:
00003DB8 6100 0000                  		bsr.w	DeformBgLayer
00003DBC                            
00003DBC                            loc_3B14:
00003DBC 4EB9 0000 0000             		jsr	BuildSprites
00003DC2 4EB9 0000 0000             		jsr	ObjPosLoad
00003DC8 6100 DD92                  		bsr.w	PalCycle_Load
00003DCC 6100 DA3E                  		bsr.w	RunPLC_RAM
00003DD0 6100 0000                  		bsr.w	OscillateNumDo
00003DD4 6100 0000                  		bsr.w	ChangeRingFrame
00003DD8 6100 0000                  		bsr.w	SignpostArtLoad
00003DDC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003DE2 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003DE4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003DE8 6600 FC38                  		bne.w	Level		; if yes, branch
00003DEC 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003DF2 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003DF6 4E75                       		rts	
00003DF8                            ; ===========================================================================
00003DF8                            
00003DF8                            Level_ChkDemo:				; XREF: Level_MainLoop
00003DF8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003DFC 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003DFE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003E02 6700                       		beq.s	Level_EndDemo	; if not, branch
00003E04 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E0A 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003E0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003E14 4E75                       		rts	
00003E16                            ; ===========================================================================
00003E16                            
00003E16                            Level_EndDemo:				; XREF: Level_ChkDemo
00003E16 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003E1C 6600                       		bne.s	loc_3B88	; if not, branch
00003E1E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003E24 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003E28 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003E2A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003E30                            
00003E30                            loc_3B88:
00003E30 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003E36 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003E3C 4278 F794                  		clr.w	($FFFFF794).w
00003E40                            
00003E40                            loc_3B98:
00003E40 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E46 6100 EDA8                  		bsr.w	DelayProgram
00003E4A 6100 0000                  		bsr.w	MoveSonicInDemo
00003E4E 4EB9 0000 0000             		jsr	ObjectsLoad
00003E54 4EB9 0000 0000             		jsr	BuildSprites
00003E5A 4EB9 0000 0000             		jsr	ObjPosLoad
00003E60 5378 F794                  		subq.w	#1,($FFFFF794).w
00003E64 6A00                       		bpl.s	loc_3BC8
00003E66 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003E6C 6100 E224                  		bsr.w	Pal_FadeOut
00003E70                            
00003E70                            loc_3BC8:
00003E70 4A78 F614                  		tst.w	($FFFFF614).w
00003E74 66CA                       		bne.s	loc_3B98
00003E76 4E75                       		rts	
00003E78                            ; ===========================================================================
00003E78                            ; ---------------------------------------------------------------------------
00003E78                            ; Subroutine to	do special water effects in Labyrinth Zone
00003E78                            ; ---------------------------------------------------------------------------
00003E78                            
00003E78                            LZWaterEffects:				; XREF: Level
00003E78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003E7E 6600                       		bne.s	locret_3C28	; if not, branch
00003E80 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E86 6400                       		bcc.s	LZMoveWater
00003E88 6100 0000                  		bsr.w	LZWindTunnels
00003E8C 6100 0000                  		bsr.w	LZWaterSlides
00003E90 6100 0000                  		bsr.w	LZDynamicWater
00003E94                            
00003E94                            LZMoveWater:
00003E94 4238 F64E                  		clr.b	($FFFFF64E).w
00003E98 7000                       		moveq	#0,d0
00003E9A 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003E9E E248                       		lsr.w	#1,d0
00003EA0 D078 F648                  		add.w	($FFFFF648).w,d0
00003EA4 31C0 F646                  		move.w	d0,($FFFFF646).w
00003EA8 3038 F646                  		move.w	($FFFFF646).w,d0
00003EAC 9078 F704                  		sub.w	($FFFFF704).w,d0
00003EB0 6400                       		bcc.s	loc_3C1A
00003EB2 4A40                       		tst.w	d0
00003EB4 6A00                       		bpl.s	loc_3C1A
00003EB6 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003EBC 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003EC2                            
00003EC2                            loc_3C1A:
00003EC2 0C40 00DF                  		cmpi.w	#$DF,d0
00003EC6 6500                       		bcs.s	loc_3C24
00003EC8 303C 00DF                  		move.w	#$DF,d0
00003ECC                            
00003ECC                            loc_3C24:
00003ECC 11C0 F625                  		move.b	d0,($FFFFF625).w
00003ED0                            
00003ED0                            locret_3C28:
00003ED0 4E75                       		rts	
00003ED2                            ; ===========================================================================
00003ED2                            ; ---------------------------------------------------------------------------
00003ED2                            ; Labyrinth default water heights
00003ED2                            ; ---------------------------------------------------------------------------
00003ED2                            WaterHeight:	incbin	misc\lz_heigh.bin
00003EDA                            		even
00003EDA                            ; ===========================================================================
00003EDA                            
00003EDA                            ; ---------------------------------------------------------------------------
00003EDA                            ; Labyrinth dynamic water routines
00003EDA                            ; ---------------------------------------------------------------------------
00003EDA                            
00003EDA                            LZDynamicWater:				; XREF: LZWaterEffects
00003EDA 7000                       		moveq	#0,d0
00003EDC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003EE0 D040                       		add.w	d0,d0
00003EE2 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003EE6 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003EEA 7200                       		moveq	#0,d1
00003EEC 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003EF0 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003EF4 9078 F648                  		sub.w	($FFFFF648).w,d0
00003EF8 6700                       		beq.s	locret_3C5A
00003EFA 6400                       		bcc.s	loc_3C56
00003EFC 4441                       		neg.w	d1
00003EFE                            
00003EFE                            loc_3C56:
00003EFE D378 F648                  		add.w	d1,($FFFFF648).w
00003F02                            
00003F02                            locret_3C5A:
00003F02 4E75                       		rts	
00003F04                            ; ===========================================================================
00003F04 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003F06 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003F08 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003F0A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003F0C                            ; ===========================================================================
00003F0C                            
00003F0C                            DynWater_LZ1:				; XREF: DynWater_Index
00003F0C 3038 F700                  		move.w	($FFFFF700).w,d0
00003F10 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003F14 6600                       		bne.s	loc_3CD0
00003F16 323C 00B8                  		move.w	#$B8,d1
00003F1A 0C40 0600                  		cmpi.w	#$600,d0
00003F1E 6500                       		bcs.s	loc_3CB4
00003F20 323C 0108                  		move.w	#$108,d1
00003F24 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003F2A 6500                       		bcs.s	loc_3CBA
00003F2C 0C40 0C00                  		cmpi.w	#$C00,d0
00003F30 6500                       		bcs.s	loc_3CB4
00003F32 323C 0318                  		move.w	#$318,d1
00003F36 0C40 1080                  		cmpi.w	#$1080,d0
00003F3A 6500                       		bcs.s	loc_3CB4
00003F3C 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003F42 323C 05C8                  		move.w	#$5C8,d1
00003F46 0C40 1380                  		cmpi.w	#$1380,d0
00003F4A 6500                       		bcs.s	loc_3CB4
00003F4C 323C 03A8                  		move.w	#$3A8,d1
00003F50 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003F54 6600                       		bne.s	loc_3CB4
00003F56 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003F5C                            
00003F5C                            loc_3CB4:
00003F5C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F60 4E75                       		rts	
00003F62                            ; ===========================================================================
00003F62                            
00003F62                            loc_3CBA:				; XREF: DynWater_LZ1
00003F62 0C40 0C80                  		cmpi.w	#$C80,d0
00003F66 65F4                       		bcs.s	loc_3CB4
00003F68 323C 00E8                  		move.w	#$E8,d1
00003F6C 0C40 1500                  		cmpi.w	#$1500,d0
00003F70 65EA                       		bcs.s	loc_3CB4
00003F72 323C 0108                  		move.w	#$108,d1
00003F76 60E4                       		bra.s	loc_3CB4
00003F78                            ; ===========================================================================
00003F78                            
00003F78                            loc_3CD0:				; XREF: DynWater_LZ1
00003F78 5302                       		subq.b	#1,d2
00003F7A 6600                       		bne.s	locret_3CF4
00003F7C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003F82 6400                       		bcc.s	locret_3CF4
00003F84 323C 03A8                  		move.w	#$3A8,d1
00003F88 0C40 1300                  		cmpi.w	#$1300,d0
00003F8C 6500                       		bcs.s	loc_3CF0
00003F8E 323C 0108                  		move.w	#$108,d1
00003F92 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003F98                            
00003F98                            loc_3CF0:
00003F98 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F9C                            
00003F9C                            locret_3CF4:
00003F9C 4E75                       		rts	
00003F9E                            ; ===========================================================================
00003F9E                            
00003F9E                            DynWater_LZ2:				; XREF: DynWater_Index
00003F9E 3038 F700                  		move.w	($FFFFF700).w,d0
00003FA2 323C 0328                  		move.w	#$328,d1
00003FA6 0C40 0500                  		cmpi.w	#$500,d0
00003FAA 6500                       		bcs.s	loc_3D12
00003FAC 323C 03C8                  		move.w	#$3C8,d1
00003FB0 0C40 0B00                  		cmpi.w	#$B00,d0
00003FB4 6500                       		bcs.s	loc_3D12
00003FB6 323C 0428                  		move.w	#$428,d1
00003FBA                            
00003FBA                            loc_3D12:
00003FBA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003FBE 4E75                       		rts	
00003FC0                            ; ===========================================================================
00003FC0                            
00003FC0                            DynWater_LZ3:				; XREF: DynWater_Index
00003FC0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FC4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FC8 6600                       		bne.s	loc_3D5E
00003FCA 323C 0900                  		move.w	#$900,d1
00003FCE 0C40 0600                  		cmpi.w	#$600,d0
00003FD2 6500                       		bcs.s	loc_3D54
00003FD4 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003FDA 6500                       		bcs.s	loc_3D54
00003FDC 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003FE2 6400                       		bcc.s	loc_3D54
00003FE4 323C 04C8                  		move.w	#$4C8,d1
00003FE8 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003FEE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003FF4 303C 00B7                  		move.w	#$B7,d0
00003FF8 6100 D5C2                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003FFC                            
00003FFC                            loc_3D54:
00003FFC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004000 31C1 F648                  		move.w	d1,($FFFFF648).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3D5E:				; XREF: DynWater_LZ3
00004006 5302                       		subq.b	#1,d2
00004008 6600                       		bne.s	loc_3DA8
0000400A 323C 04C8                  		move.w	#$4C8,d1
0000400E 0C40 0770                  		cmpi.w	#$770,d0
00004012 6500                       		bcs.s	loc_3DA2
00004014 323C 0308                  		move.w	#$308,d1
00004018 0C40 1400                  		cmpi.w	#$1400,d0
0000401C 6500                       		bcs.s	loc_3DA2
0000401E 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004024 6700                       		beq.s	loc_3D8E
00004026 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000402C 6400                       		bcc.s	loc_3D8E
0000402E 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004034 6400                       		bcc.s	loc_3DA2
00004036                            
00004036                            loc_3D8E:
00004036 323C 0508                  		move.w	#$508,d1
0000403A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000403E 0C40 1770                  		cmpi.w	#$1770,d0
00004042 6500                       		bcs.s	loc_3DA2
00004044 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000404A                            
0000404A                            loc_3DA2:
0000404A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000404E 4E75                       		rts	
00004050                            ; ===========================================================================
00004050                            
00004050                            loc_3DA8:
00004050 5302                       		subq.b	#1,d2
00004052 6600                       		bne.s	loc_3DD2
00004054 323C 0508                  		move.w	#$508,d1
00004058 0C40 1860                  		cmpi.w	#$1860,d0
0000405C 6500                       		bcs.s	loc_3DCC
0000405E 323C 0188                  		move.w	#$188,d1
00004062 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004066 6400                       		bcc.s	loc_3DC6
00004068 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000406C 6600                       		bne.s	loc_3DCC
0000406E                            
0000406E                            loc_3DC6:
0000406E 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004074                            
00004074                            loc_3DCC:
00004074 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004078 4E75                       		rts	
0000407A                            ; ===========================================================================
0000407A                            
0000407A                            loc_3DD2:
0000407A 5302                       		subq.b	#1,d2
0000407C 6600                       		bne.s	loc_3E0E
0000407E 323C 0188                  		move.w	#$188,d1
00004082 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004086 6500                       		bcs.s	loc_3E04
00004088 323C 0900                  		move.w	#$900,d1
0000408C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004090 6500                       		bcs.s	loc_3E04
00004092 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004098 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000409E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000040A4 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000040AA 4E75                       		rts	
000040AC                            ; ===========================================================================
000040AC                            
000040AC                            loc_3E04:
000040AC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040B0 31C1 F648                  		move.w	d1,($FFFFF648).w
000040B4 4E75                       		rts	
000040B6                            ; ===========================================================================
000040B6                            
000040B6                            loc_3E0E:
000040B6 0C40 1E00                  		cmpi.w	#$1E00,d0
000040BA 6500                       		bcs.s	locret_3E1A
000040BC 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000040C2                            
000040C2                            locret_3E1A:
000040C2 4E75                       		rts	
000040C4                            ; ===========================================================================
000040C4                            
000040C4                            DynWater_SBZ3:				; XREF: DynWater_Index
000040C4 323C 0228                  		move.w	#$228,d1
000040C8 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000040CE 6500                       		bcs.s	loc_3E2C
000040D0 323C 04C8                  		move.w	#$4C8,d1
000040D4                            
000040D4                            loc_3E2C:
000040D4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040D8 4E75                       		rts
000040DA                            
000040DA                            ; ---------------------------------------------------------------------------
000040DA                            ; Labyrinth Zone "wind tunnels"	subroutine
000040DA                            ; ---------------------------------------------------------------------------
000040DA                            
000040DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040DA                            
000040DA                            
000040DA                            LZWindTunnels:				; XREF: LZWaterEffects
000040DA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000040DE 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000040E2 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000040E8 7000                       		moveq	#0,d0
000040EA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040EE E748                       		lsl.w	#3,d0
000040F0 D4C0                       		adda.w	d0,a2
000040F2 7200                       		moveq	#0,d1
000040F4 4A38 FE11                  		tst.b	($FFFFFE11).w
000040F8 6600                       		bne.s	loc_3E56
000040FA 7201                       		moveq	#1,d1
000040FC 514A                       		subq.w	#8,a2
000040FE                            
000040FE                            loc_3E56:
000040FE 43F8 D000                  		lea	($FFFFD000).w,a1
00004102                            
00004102                            LZWind_Loop:
00004102 3029 0008                  		move.w	8(a1),d0
00004106 B052                       		cmp.w	(a2),d0
00004108 6500 0000                  		bcs.w	loc_3EF4
0000410C B06A 0004                  		cmp.w	4(a2),d0
00004110 6400 0000                  		bcc.w	loc_3EF4
00004114 3429 000C                  		move.w	$C(a1),d2
00004118 B46A 0002                  		cmp.w	2(a2),d2
0000411C 6500                       		bcs.s	loc_3EF4
0000411E B46A 0006                  		cmp.w	6(a2),d2
00004122 6400                       		bcc.s	loc_3EF4
00004124 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004128 0200 003F                  		andi.b	#$3F,d0
0000412C 6600                       		bne.s	loc_3E90
0000412E 303C 00D0                  		move.w	#$D0,d0
00004132 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004138                            
00004138                            loc_3E90:
00004138 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000413C 6600 0000                  		bne.w	locret_3F0A
00004140 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004146 6400                       		bcc.s	loc_3F06
00004148 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000414E 0440 0080                  		subi.w	#$80,d0
00004152 B052                       		cmp.w	(a2),d0
00004154 6400                       		bcc.s	LZWind_Move
00004156 7002                       		moveq	#2,d0
00004158 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000415E 6600                       		bne.s	loc_3EBA
00004160 4440                       		neg.w	d0
00004162                            
00004162                            loc_3EBA:
00004162 D169 000C                  		add.w	d0,$C(a1)
00004166                            
00004166                            LZWind_Move:
00004166 5869 0008                  		addq.w	#4,8(a1)
0000416A 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004170 337C 0000 0012             		move.w	#0,$12(a1)
00004176 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000417C 08E9 0001 0022             		bset	#1,$22(a1)
00004182 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004188 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000418A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000418E                            
0000418E                            LZWind_MoveDown:
0000418E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004194 6700                       		beq.s	locret_3EF2	; if not, branch
00004196 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000419A                            
0000419A                            locret_3EF2:
0000419A 4E75                       		rts	
0000419C                            ; ===========================================================================
0000419C                            
0000419C                            loc_3EF4:				; XREF: LZWindTunnels
0000419C 504A                       		addq.w	#8,a2
0000419E 51C9 FF62                  		dbf	d1,LZWind_Loop
000041A2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000041A6 6700                       		beq.s	locret_3F0A
000041A8 137C 0000 001C             		move.b	#0,$1C(a1)
000041AE                            
000041AE                            loc_3F06:
000041AE 4238 F7C7                  		clr.b	($FFFFF7C7).w
000041B2                            
000041B2                            locret_3F0A:
000041B2 4E75                       		rts	
000041B4                            ; End of function LZWindTunnels
000041B4                            
000041B4                            ; ===========================================================================
000041B4 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000041BC 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000041CE 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000041DC                            					; XREF: LZWindTunnels
000041DC                            		even
000041DC                            
000041DC                            ; ---------------------------------------------------------------------------
000041DC                            ; Labyrinth Zone water slide subroutine
000041DC                            ; ---------------------------------------------------------------------------
000041DC                            
000041DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041DC                            
000041DC                            
000041DC                            LZWaterSlides:				; XREF: LZWaterEffects
000041DC 43F8 D000                  		lea	($FFFFD000).w,a1
000041E0 0829 0001 0022             		btst	#1,$22(a1)
000041E6 6600                       		bne.s	loc_3F6A
000041E8 3029 000C                  		move.w	$C(a1),d0
000041EC E248                       		lsr.w	#1,d0
000041EE 0240 0380                  		andi.w	#$380,d0
000041F2 1229 0008                  		move.b	8(a1),d1
000041F6 0241 007F                  		andi.w	#$7F,d1
000041FA D041                       		add.w	d1,d0
000041FC 45F8 A400                  		lea	($FFFFA400).w,a2
00004200 1032 0000                  		move.b	(a2,d0.w),d0
00004204 45FA 0000                  		lea	byte_3FCF(pc),a2
00004208 7206                       		moveq	#6,d1
0000420A                            
0000420A                            loc_3F62:
0000420A B022                       		cmp.b	-(a2),d0
0000420C 57C9 FFFC                  		dbeq	d1,loc_3F62
00004210 6700                       		beq.s	LZSlide_Move
00004212                            
00004212                            loc_3F6A:
00004212 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004216 6700                       		beq.s	locret_3F7A
00004218 337C 0005 003E             		move.w	#5,$3E(a1)
0000421E 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004222                            
00004222                            locret_3F7A:
00004222 4E75                       		rts	
00004224                            ; ===========================================================================
00004224                            
00004224                            LZSlide_Move:				; XREF: LZWaterSlides
00004224 0C41 0003                  		cmpi.w	#3,d1
00004228 6400                       		bcc.s	loc_3F84
0000422A 4E71                       		nop	
0000422C                            
0000422C                            loc_3F84:
0000422C 08A9 0000 0022             		bclr	#0,$22(a1)
00004232 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004236 1340 0014                  		move.b	d0,$14(a1)
0000423A 6A00                       		bpl.s	loc_3F9A
0000423C 08E9 0000 0022             		bset	#0,$22(a1)
00004242                            
00004242                            loc_3F9A:
00004242 4229 0015                  		clr.b	$15(a1)
00004246 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000424C 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004252 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004256 0200 001F                  		andi.b	#$1F,d0
0000425A 6600                       		bne.s	locret_3FBE
0000425C 303C 00D0                  		move.w	#$D0,d0
00004260 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
00004266                            
00004266                            locret_3FBE:
00004266 4E75                       		rts	
00004268                            ; End of function LZWaterSlides
00004268                            
00004268                            ; ===========================================================================
00004268 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004277 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004278                            		even
00004278                            
00004278                            ; ---------------------------------------------------------------------------
00004278                            ; Subroutine to	move Sonic in demo mode
00004278                            ; ---------------------------------------------------------------------------
00004278                            
00004278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004278                            
00004278                            
00004278                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004278 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000427C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000427E 4E75                       		rts	
00004280                            ; ===========================================================================
00004280                            
00004280                            ; This is an unused subroutine for recording a demo
00004280                            
00004280                            MoveDemo_Record:
00004280 43F9 0008 0000             		lea	($80000).l,a1
00004286 3038 F790                  		move.w	($FFFFF790).w,d0
0000428A D2C0                       		adda.w	d0,a1
0000428C 1038 F604                  		move.b	($FFFFF604).w,d0
00004290 B011                       		cmp.b	(a1),d0
00004292 6600                       		bne.s	loc_3FFA
00004294 5229 0001                  		addq.b	#1,1(a1)
00004298 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000429E 6700                       		beq.s	loc_3FFA
000042A0 4E75                       		rts	
000042A2                            ; ===========================================================================
000042A2                            
000042A2                            loc_3FFA:				; XREF: MoveDemo_Record
000042A2 1340 0002                  		move.b	d0,2(a1)
000042A6 137C 0000 0003             		move.b	#0,3(a1)
000042AC 5478 F790                  		addq.w	#2,($FFFFF790).w
000042B0 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000042B6 4E75                       		rts	
000042B8                            ; ===========================================================================
000042B8                            
000042B8                            MoveDemo_On:				; XREF: MoveSonicInDemo
000042B8 4A38 F604                  		tst.b	($FFFFF604).w
000042BC 6A00                       		bpl.s	loc_4022
000042BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000042C2 6B00                       		bmi.s	loc_4022
000042C4 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000042CA                            
000042CA                            loc_4022:
000042CA 43F9 0000 0000             		lea	(Demo_Index).l,a1
000042D0 7000                       		moveq	#0,d0
000042D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000042D6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000042DC 6600                       		bne.s	loc_4038
000042DE 7006                       		moveq	#6,d0
000042E0                            
000042E0                            loc_4038:
000042E0 E548                       		lsl.w	#2,d0
000042E2 2271 0000                  		movea.l	(a1,d0.w),a1
000042E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000042EA 6A00                       		bpl.s	loc_4056
000042EC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000042F2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000042F6 5340                       		subq.w	#1,d0
000042F8 E548                       		lsl.w	#2,d0
000042FA 2271 0000                  		movea.l	(a1,d0.w),a1
000042FE                            
000042FE                            loc_4056:
000042FE 3038 F790                  		move.w	($FFFFF790).w,d0
00004302 D2C0                       		adda.w	d0,a1
00004304 1011                       		move.b	(a1),d0
00004306 41F8 F604                  		lea	($FFFFF604).w,a0
0000430A 1200                       		move.b	d0,d1
0000430C 1410                       		move.b	(a0),d2
0000430E B500                       		eor.b	d2,d0
00004310 10C1                       		move.b	d1,(a0)+
00004312 C001                       		and.b	d1,d0
00004314 10C0                       		move.b	d0,(a0)+
00004316 5338 F792                  		subq.b	#1,($FFFFF792).w
0000431A 6400                       		bcc.s	locret_407E
0000431C 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004322 5478 F790                  		addq.w	#2,($FFFFF790).w
00004326                            
00004326                            locret_407E:
00004326 4E75                       		rts	
00004328                            ; End of function MoveSonicInDemo
00004328                            
00004328                            ; ===========================================================================
00004328                            ; ---------------------------------------------------------------------------
00004328                            ; Demo sequence	pointers
00004328                            ; ---------------------------------------------------------------------------
00004328                            Demo_Index:
00004328                            	include "_inc\Demo pointers for intro.asm"
00004328                            ; ---------------------------------------------------------------------------
00004328                            ; Demo sequence	pointers
00004328                            ; ---------------------------------------------------------------------------
00004328 0000 0000                  	dc.l Demo_GHZ
0000432C 0000 0000                  	dc.l Demo_GHZ
00004330 0000 0000                  	dc.l Demo_MZ
00004334 0000 0000                  	dc.l Demo_MZ
00004338 0000 0000                  	dc.l Demo_SYZ
0000433C 0000 0000                  	dc.l Demo_SYZ
00004340 0000 0000                  	dc.l Demo_SS
00004344 0000 0000                  	dc.l Demo_SS
00004344 0000 0000                  	dc.l Demo_SS
00004348                            
00004348                            Demo_EndIndex:
00004348                            	include "_inc\Demo pointers for ending.asm"
00004348                            ; ---------------------------------------------------------------------------
00004348                            ; Demo (ending) sequence pointers
00004348                            ; ---------------------------------------------------------------------------
00004348 0000 0000                  	dc.l Demo_EndGHZ1
0000434C 0000 0000                  	dc.l Demo_EndMZ
00004350 0000 0000                  	dc.l Demo_EndSYZ
00004354 0000 0000                  	dc.l Demo_EndLZ
00004358 0000 0000                  	dc.l Demo_EndSLZ
0000435C 0000 0000                  	dc.l Demo_EndSBZ1
00004360 0000 0000                  	dc.l Demo_EndSBZ2
00004364 0000 0000                  	dc.l Demo_EndGHZ2
00004364 0000 0000                  	dc.l Demo_EndGHZ2
00004368                            
00004368 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004378 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004388 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004398                            		even
00004398                            
00004398                            ; ---------------------------------------------------------------------------
00004398                            ; Collision index loading subroutine
00004398                            ; ---------------------------------------------------------------------------
00004398                            
00004398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004398                            
00004398                            
00004398                            ColIndexLoad:				; XREF: Level
00004398 7000                       		moveq	#0,d0
0000439A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000439E E548                       		lsl.w	#2,d0
000043A0 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000043A6 4E75                       		rts	
000043A8                            ; End of function ColIndexLoad
000043A8                            
000043A8                            ; ===========================================================================
000043A8                            ; ---------------------------------------------------------------------------
000043A8                            ; Collision index pointers
000043A8                            ; ---------------------------------------------------------------------------
000043A8                            ColPointers:
000043A8                            	include "_inc\Collision index pointers.asm"
000043A8                            ; ---------------------------------------------------------------------------
000043A8                            ; Collision index pointers
000043A8                            ; ---------------------------------------------------------------------------
000043A8 0000 0000                  	dc.l Col_GHZ
000043AC 0000 0000                  	dc.l Col_LZ
000043B0 0000 0000                  	dc.l Col_MZ
000043B4 0000 0000                  	dc.l Col_SLZ
000043B8 0000 0000                  	dc.l Col_SYZ
000043BC 0000 0000                  	dc.l Col_SBZ
000043BC 0000 0000                  	dc.l Col_SBZ
000043C0                            
000043C0                            ; ---------------------------------------------------------------------------
000043C0                            ; Oscillating number subroutine
000043C0                            ; ---------------------------------------------------------------------------
000043C0                            
000043C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043C0                            
000043C0                            
000043C0                            OscillateNumInit:			; XREF: Level
000043C0 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000043C4 45F9 0000 0000             		lea	(Osc_Data).l,a2
000043CA 7220                       		moveq	#$20,d1
000043CC                            
000043CC                            Osc_Loop:
000043CC 32DA                       		move.w	(a2)+,(a1)+
000043CE 51C9 FFFC                  		dbf	d1,Osc_Loop
000043D2 4E75                       		rts	
000043D4                            ; End of function OscillateNumInit
000043D4                            
000043D4                            ; ===========================================================================
000043D4 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000043D8 0000 0080                  		dc.w 0,	$80
000043DC 0000 0080                  		dc.w 0,	$80
000043E0 0000 0080                  		dc.w 0,	$80
000043E4 0000 0080                  		dc.w 0,	$80
000043E8 0000 0080                  		dc.w 0,	$80
000043EC 0000 0080                  		dc.w 0,	$80
000043F0 0000 0080                  		dc.w 0,	$80
000043F4 0000 0080                  		dc.w 0,	$80
000043F8 0000 50F0                  		dc.w 0,	$50F0
000043FC 011E 2080                  		dc.w $11E, $2080
00004400 00B4 3080                  		dc.w $B4, $3080
00004404 010E 5080                  		dc.w $10E, $5080
00004408 01C2 7080                  		dc.w $1C2, $7080
0000440C 0276 0080                  		dc.w $276, $80
00004410 0000 0080                  		dc.w 0,	$80
00004414 0000                       		dc.w 0
00004416                            		even
00004416                            
00004416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004416                            
00004416                            
00004416                            OscillateNumDo:				; XREF: Level
00004416 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000441C 6400                       		bcc.s	locret_41C4
0000441E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004422 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004428 3619                       		move.w	(a1)+,d3
0000442A 720F                       		moveq	#$F,d1
0000442C                            
0000442C                            loc_4184:
0000442C 341A                       		move.w	(a2)+,d2
0000442E 381A                       		move.w	(a2)+,d4
00004430 0303                       		btst	d1,d3
00004432 6600                       		bne.s	loc_41A4
00004434 3029 0002                  		move.w	2(a1),d0
00004438 D042                       		add.w	d2,d0
0000443A 3340 0002                  		move.w	d0,2(a1)
0000443E D151                       		add.w	d0,0(a1)
00004440 B811                       		cmp.b	0(a1),d4
00004442 6200                       		bhi.s	loc_41BA
00004444 03C3                       		bset	d1,d3
00004446 6000                       		bra.s	loc_41BA
00004448                            ; ===========================================================================
00004448                            
00004448                            loc_41A4:				; XREF: OscillateNumDo
00004448 3029 0002                  		move.w	2(a1),d0
0000444C 9042                       		sub.w	d2,d0
0000444E 3340 0002                  		move.w	d0,2(a1)
00004452 D151                       		add.w	d0,0(a1)
00004454 B811                       		cmp.b	0(a1),d4
00004456 6300                       		bls.s	loc_41BA
00004458 0383                       		bclr	d1,d3
0000445A                            
0000445A                            loc_41BA:
0000445A 5849                       		addq.w	#4,a1
0000445C 51C9 FFCE                  		dbf	d1,loc_4184
00004460 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004464                            
00004464                            locret_41C4:
00004464 4E75                       		rts	
00004466                            ; End of function OscillateNumDo
00004466                            
00004466                            ; ===========================================================================
00004466 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000446A 0002 0018                  		dc.w 2,	$18
0000446E 0002 0020                  		dc.w 2,	$20
00004472 0002 0030                  		dc.w 2,	$30
00004476 0004 0020                  		dc.w 4,	$20
0000447A 0008 0008                  		dc.w 8,	8
0000447E 0008 0040                  		dc.w 8,	$40
00004482 0004 0040                  		dc.w 4,	$40
00004486 0002 0050                  		dc.w 2,	$50
0000448A 0002 0050                  		dc.w 2,	$50
0000448E 0002 0020                  		dc.w 2,	$20
00004492 0003 0030                  		dc.w 3,	$30
00004496 0005 0050                  		dc.w 5,	$50
0000449A 0007 0070                  		dc.w 7,	$70
0000449E 0002 0010                  		dc.w 2,	$10
000044A2 0002 0010                  		dc.w 2,	$10
000044A6                            		even
000044A6                            
000044A6                            ; ---------------------------------------------------------------------------
000044A6                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000044A6                            ; ---------------------------------------------------------------------------
000044A6                            
000044A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044A6                            
000044A6                            
000044A6                            ChangeRingFrame:			; XREF: Level
000044A6 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000044AA 6A00                       		bpl.s	loc_421C
000044AC 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000044B2 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000044B6 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000044BC                            
000044BC                            loc_421C:
000044BC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000044C0 6A00                       		bpl.s	loc_4232
000044C2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000044C8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000044CC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000044D2                            
000044D2                            loc_4232:
000044D2 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000044D6 6A00                       		bpl.s	loc_4250
000044D8 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000044DE 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000044E2 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000044E8 6500                       		bcs.s	loc_4250
000044EA 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000044F0                            
000044F0                            loc_4250:
000044F0 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000044F4 6700                       		beq.s	locret_4272
000044F6 7000                       		moveq	#0,d0
000044F8 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000044FC D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004500 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004504 EF58                       		rol.w	#7,d0
00004506 0240 0003                  		andi.w	#3,d0
0000450A 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000450E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004512                            
00004512                            locret_4272:
00004512 4E75                       		rts	
00004514                            ; End of function ChangeRingFrame
00004514                            
00004514                            ; ---------------------------------------------------------------------------
00004514                            ; End-of-act signpost pattern loading subroutine
00004514                            ; ---------------------------------------------------------------------------
00004514                            
00004514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004514                            
00004514                            
00004514                            SignpostArtLoad:			; XREF: Level
00004514 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004518 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000451C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004522 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004524 3038 F700                  		move.w	($FFFFF700).w,d0
00004528 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000452C 0441 0100                  		subi.w	#$100,d1
00004530 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004532 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004534 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004538 6700                       		beq.s	Signpost_Exit
0000453A B278 F728                  		cmp.w	($FFFFF728).w,d1
0000453E 6700                       		beq.s	Signpost_Exit
00004540 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004544 7012                       		moveq	#$12,d0
00004546 6000 D28A                  		bra.w	LoadPLC2	; load signpost	patterns
0000454A                            ; ===========================================================================
0000454A                            
0000454A                            Signpost_Exit:
0000454A 4E75                       		rts	
0000454C                            ; End of function SignpostArtLoad
0000454C                            
0000454C                            ; ===========================================================================
0000454C                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000045CC                            Demo_MZ:	incbin	demodata\i_mz.bin
000046FC                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000477C                            Demo_SS:	incbin	demodata\i_ss.bin
0000487C                            ; ===========================================================================
0000487C                            
0000487C                            ; ---------------------------------------------------------------------------
0000487C                            ; Special Stage
0000487C                            ; ---------------------------------------------------------------------------
0000487C                            
0000487C                            SpecialStage:				; XREF: GameModeArray
0000487C 303C 00CA                  		move.w	#$CA,d0
00004880 6100 CD3A                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004884 6100 D916                  		bsr.w	Pal_MakeFlash
00004888 46FC 2700                  		move	#$2700,sr
0000488C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004892 3CBC 8B03                  		move.w	#$8B03,(a6)
00004896 3CBC 8004                  		move.w	#$8004,(a6)
0000489A 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000048A0 3CBC 9011                  		move.w	#$9011,(a6)
000048A4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000048A8 0200 00BF                  		andi.b	#$BF,d0
000048AC 33C0 00C0 0004             		move.w	d0,($C00004).l
000048B2 6100 CC30                  		bsr.w	ClearScreen
000048B6 46FC 2300                  		move	#$2300,sr
000048BA 4BF9 00C0 0004             		lea	($C00004).l,a5
000048C0 3ABC 8F01                  		move.w	#$8F01,(a5)
000048C4 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000048CA 3ABC 9780                  		move.w	#$9780,(a5)
000048CE 2ABC 5000 0081             		move.l	#$50000081,(a5)
000048D4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000048DC                            
000048DC                            loc_463C:
000048DC 3215                       		move.w	(a5),d1
000048DE 0801 0001                  		btst	#1,d1
000048E2 66F8                       		bne.s	loc_463C
000048E4 3ABC 8F02                  		move.w	#$8F02,(a5)
000048E8 6100 0000                  		bsr.w	SS_BGLoad
000048EC 7014                       		moveq	#$14,d0
000048EE 6100 D01C                  		bsr.w	RunPLC_ROM	; load special stage patterns
000048F2 43F8 D000                  		lea	($FFFFD000).w,a1
000048F6 7000                       		moveq	#0,d0
000048F8 323C 07FF                  		move.w	#$7FF,d1
000048FC                            
000048FC                            SS_ClrObjRam:
000048FC 22C0                       		move.l	d0,(a1)+
000048FE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004902                            
00004902 43F8 F700                  		lea	($FFFFF700).w,a1
00004906 7000                       		moveq	#0,d0
00004908 323C 003F                  		move.w	#$3F,d1
0000490C                            
0000490C                            SS_ClrRam:
0000490C 22C0                       		move.l	d0,(a1)+
0000490E 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004912                            
00004912 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004916 7000                       		moveq	#0,d0
00004918 323C 0027                  		move.w	#$27,d1
0000491C                            
0000491C                            SS_ClrRam2:
0000491C 22C0                       		move.l	d0,(a1)+
0000491E 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004922                            
00004922 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004926 7000                       		moveq	#0,d0
00004928 323C 007F                  		move.w	#$7F,d1
0000492C                            
0000492C                            SS_ClrNemRam:
0000492C 22C0                       		move.l	d0,(a1)+
0000492E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004932                            
00004932 4238 F64E                  		clr.b	($FFFFF64E).w
00004936 4278 FE02                  		clr.w	($FFFFFE02).w
0000493A 700A                       		moveq	#$A,d0
0000493C 6100 D9DE                  		bsr.w	PalLoad1	; load special stage pallet
00004940 4EB9 0000 0000             		jsr	SS_Load
00004946 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000494E 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004956 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000495C 6100 0000                  		bsr.w	PalCycle_SS
00004960 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004964 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000496A 303C 0089                  		move.w	#$89,d0
0000496E 6100 CC46                  		bsr.w	PlaySound	; play special stage BG	music
00004972 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004978 43F9 0000 4328             		lea	(Demo_Index).l,a1
0000497E 7006                       		moveq	#6,d0
00004980 E548                       		lsl.w	#2,d0
00004982 2271 0000                  		movea.l	(a1,d0.w),a1
00004986 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000498C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004990 4278 FE20                  		clr.w	($FFFFFE20).w
00004994 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004998 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000499E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000049A4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000049A8 6700                       		beq.s	SS_NoDebug	; if not, branch
000049AA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000049B0 6700                       		beq.s	SS_NoDebug	; if not, branch
000049B2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000049B8                            
000049B8                            SS_NoDebug:
000049B8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000049BC 0000 0040                  		ori.b	#$40,d0
000049C0 33C0 00C0 0004             		move.w	d0,($C00004).l
000049C6 6100 D728                  		bsr.w	Pal_MakeWhite
000049CA                            
000049CA                            ; ---------------------------------------------------------------------------
000049CA                            ; Main Special Stage loop
000049CA                            ; ---------------------------------------------------------------------------
000049CA                            
000049CA                            SS_MainLoop:
000049CA 6100 CBFC                  		bsr.w	PauseGame
000049CE 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000049D4 6100 E21A                  		bsr.w	DelayProgram
000049D8 6100 F89E                  		bsr.w	MoveSonicInDemo
000049DC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000049E2 4EB9 0000 0000             		jsr	ObjectsLoad
000049E8 4EB9 0000 0000             		jsr	BuildSprites
000049EE 4EB9 0000 0000             		jsr	SS_ShowLayout
000049F4 6100 0000                  		bsr.w	SS_BGAnimate
000049F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000049FC 6700                       		beq.s	SS_ChkEnd	; if not, branch
000049FE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004A02 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004A06                            
00004A06                            SS_ChkEnd:
00004A06 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004A0C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004A10                            
00004A10 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A14 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004A18 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004A1E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004A24 6500                       		bcs.s	SS_End		; if not, branch
00004A26 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004A2A                            
00004A2A                            SS_End:
00004A2A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004A30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004A36 4278 F794                  		clr.w	($FFFFF794).w
00004A3A                            
00004A3A                            SS_EndLoop:
00004A3A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004A40 6100 E1AE                  		bsr.w	DelayProgram
00004A44 6100 F832                  		bsr.w	MoveSonicInDemo
00004A48 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A4E 4EB9 0000 0000             		jsr	ObjectsLoad
00004A54 4EB9 0000 0000             		jsr	BuildSprites
00004A5A 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A60 6100 0000                  		bsr.w	SS_BGAnimate
00004A64 5378 F794                  		subq.w	#1,($FFFFF794).w
00004A68 6A00                       		bpl.s	loc_47D4
00004A6A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004A70 6100 D74A                  		bsr.w	Pal_ToWhite
00004A74                            
00004A74                            loc_47D4:
00004A74 4A78 F614                  		tst.w	($FFFFF614).w
00004A78 66C0                       		bne.s	SS_EndLoop
00004A7A                            
00004A7A 46FC 2700                  		move	#$2700,sr
00004A7E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A84 3CBC 8230                  		move.w	#$8230,(a6)
00004A88 3CBC 8407                  		move.w	#$8407,(a6)
00004A8C 3CBC 9001                  		move.w	#$9001,(a6)
00004A90 6100 CA52                  		bsr.w	ClearScreen
00004A94 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004A9E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004AA4 6100 CBBA                  		bsr.w	NemDec
00004AA8 4EB9 0000 0000             		jsr	Hud_Base
00004AAE 46FC 2300                  		move	#$2300,sr
00004AB2 7011                       		moveq	#$11,d0
00004AB4 6100 D882                  		bsr.w	PalLoad2	; load results screen pallet
00004AB8 7000                       		moveq	#0,d0
00004ABA 6100 CD16                  		bsr.w	LoadPLC2
00004ABE 701B                       		moveq	#$1B,d0
00004AC0 6100 CCDE                  		bsr.w	LoadPLC		; load results screen patterns
00004AC4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004ACA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004AD0 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004AD4 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004AD8 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004ADC 303C 008E                  		move.w	#$8E,d0
00004AE0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004AE6 43F8 D000                  		lea	($FFFFD000).w,a1
00004AEA 7000                       		moveq	#0,d0
00004AEC 323C 07FF                  		move.w	#$7FF,d1
00004AF0                            
00004AF0                            SS_EndClrObjRam:
00004AF0 22C0                       		move.l	d0,(a1)+
00004AF2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004AF6                            
00004AF6 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004AFC                            
00004AFC                            SS_NormalExit:
00004AFC 6100 CACA                  		bsr.w	PauseGame
00004B00 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004B06 6100 E0E8                  		bsr.w	DelayProgram
00004B0A 4EB9 0000 0000             		jsr	ObjectsLoad
00004B10 4EB9 0000 0000             		jsr	BuildSprites
00004B16 6100 CCF4                  		bsr.w	RunPLC_RAM
00004B1A 4A78 FE02                  		tst.w	($FFFFFE02).w
00004B1E 67DC                       		beq.s	SS_NormalExit
00004B20 4AB8 F680                  		tst.l	($FFFFF680).w
00004B24 66D6                       		bne.s	SS_NormalExit
00004B26 303C 00CA                  		move.w	#$CA,d0
00004B2A 6100 CA90                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004B2E 6100 D66C                  		bsr.w	Pal_MakeFlash
00004B32 4E75                       		rts	
00004B34                            ; ===========================================================================
00004B34                            
00004B34                            SS_ToSegaScreen:
00004B34 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004B3A 4E75                       		rts
00004B3C                            
00004B3C                            ; ---------------------------------------------------------------------------
00004B3C                            ; Special stage	background loading subroutine
00004B3C                            ; ---------------------------------------------------------------------------
00004B3C                            
00004B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B3C                            
00004B3C                            
00004B3C                            SS_BGLoad:				; XREF: SpecialStage
00004B3C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004B42 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004B48 303C 4051                  		move.w	#$4051,d0
00004B4C 6100 CDF0                  		bsr.w	EniDec
00004B50 263C 5000 0001             		move.l	#$50000001,d3
00004B56 45F9 00FF 0080             		lea	($FF0080).l,a2
00004B5C 7E06                       		moveq	#6,d7
00004B5E                            
00004B5E                            loc_48BE:
00004B5E 2003                       		move.l	d3,d0
00004B60 7C03                       		moveq	#3,d6
00004B62 7800                       		moveq	#0,d4
00004B64 0C47 0003                  		cmpi.w	#3,d7
00004B68 6400                       		bcc.s	loc_48CC
00004B6A 7801                       		moveq	#1,d4
00004B6C                            
00004B6C                            loc_48CC:
00004B6C 7A07                       		moveq	#7,d5
00004B6E                            
00004B6E                            loc_48CE:
00004B6E 224A                       		movea.l	a2,a1
00004B70 0A04 0001                  		eori.b	#1,d4
00004B74 6600                       		bne.s	loc_48E2
00004B76 0C47 0006                  		cmpi.w	#6,d7
00004B7A 6600                       		bne.s	loc_48F2
00004B7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004B82                            
00004B82                            loc_48E2:
00004B82 48E7 F800                  		movem.l	d0-d4,-(sp)
00004B86 7207                       		moveq	#7,d1
00004B88 7407                       		moveq	#7,d2
00004B8A 6100 CAB4                  		bsr.w	ShowVDPGraphics
00004B8E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004B92                            
00004B92                            loc_48F2:
00004B92 0680 0010 0000             		addi.l	#$100000,d0
00004B98 51CD FFD4                  		dbf	d5,loc_48CE
00004B9C 0680 0380 0000             		addi.l	#$3800000,d0
00004BA2 0A04 0001                  		eori.b	#1,d4
00004BA6 51CE FFC4                  		dbf	d6,loc_48CC
00004BAA 0683 1000 0000             		addi.l	#$10000000,d3
00004BB0 6A00                       		bpl.s	loc_491C
00004BB2 4843                       		swap	d3
00004BB4 0683 0000 C000             		addi.l	#$C000,d3
00004BBA 4843                       		swap	d3
00004BBC                            
00004BBC                            loc_491C:
00004BBC D4FC 0080                  		adda.w	#$80,a2
00004BC0 51CF FF9C                  		dbf	d7,loc_48BE
00004BC4 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BCA 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004BD0 303C 4000                  		move.w	#$4000,d0
00004BD4 6100 CD68                  		bsr.w	EniDec
00004BD8 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BDE 203C 4000 0003             		move.l	#$40000003,d0
00004BE4 723F                       		moveq	#$3F,d1
00004BE6 741F                       		moveq	#$1F,d2
00004BE8 6100 CA56                  		bsr.w	ShowVDPGraphics
00004BEC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BF2 203C 5000 0003             		move.l	#$50000003,d0
00004BF8 723F                       		moveq	#$3F,d1
00004BFA 743F                       		moveq	#$3F,d2
00004BFC 6100 CA42                  		bsr.w	ShowVDPGraphics
00004C00 4E75                       		rts	
00004C02                            ; End of function SS_BGLoad
00004C02                            
00004C02                            ; ---------------------------------------------------------------------------
00004C02                            ; Pallet cycling routine - special stage
00004C02                            ; ---------------------------------------------------------------------------
00004C02                            
00004C02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C02                            
00004C02                            
00004C02                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004C02 4A78 F63A                  		tst.w	($FFFFF63A).w
00004C06 6600                       		bne.s	locret_49E6
00004C08 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004C0C 6A00                       		bpl.s	locret_49E6
00004C0E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C14 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004C18 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004C1C 0240 001F                  		andi.w	#$1F,d0
00004C20 E548                       		lsl.w	#2,d0
00004C22 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004C28 D0C0                       		adda.w	d0,a0
00004C2A 1018                       		move.b	(a0)+,d0
00004C2C 6A00                       		bpl.s	loc_4992
00004C2E 303C 01FF                  		move.w	#$1FF,d0
00004C32                            
00004C32                            loc_4992:
00004C32 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004C36 7000                       		moveq	#0,d0
00004C38 1018                       		move.b	(a0)+,d0
00004C3A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004C3E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004C44 43F1 0000                  		lea	(a1,d0.w),a1
00004C48 303C 8200                  		move.w	#-$7E00,d0
00004C4C 1019                       		move.b	(a1)+,d0
00004C4E 3C80                       		move.w	d0,(a6)
00004C50 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004C54 303C 8400                  		move.w	#-$7C00,d0
00004C58 1018                       		move.b	(a0)+,d0
00004C5A 3C80                       		move.w	d0,(a6)
00004C5C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004C66 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004C6E 7000                       		moveq	#0,d0
00004C70 1018                       		move.b	(a0)+,d0
00004C72 6B00                       		bmi.s	loc_49E8
00004C74 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004C7A D2C0                       		adda.w	d0,a1
00004C7C 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004C80 24D9                       		move.l	(a1)+,(a2)+
00004C82 24D9                       		move.l	(a1)+,(a2)+
00004C84 24D9                       		move.l	(a1)+,(a2)+
00004C86                            
00004C86                            locret_49E6:
00004C86 4E75                       		rts	
00004C88                            ; ===========================================================================
00004C88                            
00004C88                            loc_49E8:				; XREF: PalCycle_SS
00004C88 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004C8C 0C40 008A                  		cmpi.w	#$8A,d0
00004C90 6500                       		bcs.s	loc_49F4
00004C92 5241                       		addq.w	#1,d1
00004C94                            
00004C94                            loc_49F4:
00004C94 C2FC 002A                  		mulu.w	#$2A,d1
00004C98 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004C9E D2C1                       		adda.w	d1,a1
00004CA0 0240 007F                  		andi.w	#$7F,d0
00004CA4 0880 0000                  		bclr	#0,d0
00004CA8 6700                       		beq.s	loc_4A18
00004CAA 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004CAE 24D1                       		move.l	(a1),(a2)+
00004CB0 24E9 0004                  		move.l	4(a1),(a2)+
00004CB4 24E9 0008                  		move.l	8(a1),(a2)+
00004CB8                            
00004CB8                            loc_4A18:
00004CB8 D2FC 000C                  		adda.w	#$C,a1
00004CBC 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004CC0 0C40 000A                  		cmpi.w	#$A,d0
00004CC4 6500                       		bcs.s	loc_4A2E
00004CC6 0440 000A                  		subi.w	#$A,d0
00004CCA 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004CCE                            
00004CCE                            loc_4A2E:
00004CCE 3200                       		move.w	d0,d1
00004CD0 D040                       		add.w	d0,d0
00004CD2 D041                       		add.w	d1,d0
00004CD4 D2C0                       		adda.w	d0,a1
00004CD6 24D9                       		move.l	(a1)+,(a2)+
00004CD8 34D9                       		move.w	(a1)+,(a2)+
00004CDA 4E75                       		rts	
00004CDC                            ; End of function PalCycle_SS
00004CDC                            
00004CDC                            ; ===========================================================================
00004CDC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004CEC                            					; XREF: PalCycle_SS
00004CEC 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004CFC 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004D0C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004D1C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004D2C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004D3C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004D4C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004D5C                            		even
00004D5C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004D6A                            					; XREF: PalCycle_SS
00004D6A                            		even
00004D6A                            
00004D6A                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004DB2                            		even
00004DB2                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004E84                            		even
00004E84                            
00004E84                            ; ---------------------------------------------------------------------------
00004E84                            ; Subroutine to	make the special stage background animated
00004E84                            ; ---------------------------------------------------------------------------
00004E84                            
00004E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E84                            
00004E84                            
00004E84                            SS_BGAnimate:				; XREF: SpecialStage
00004E84 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004E88 6600                       		bne.s	loc_4BF6
00004E8A 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004E90 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004E96                            
00004E96                            loc_4BF6:
00004E96 0C40 0008                  		cmpi.w	#8,d0
00004E9A 6400                       		bcc.s	loc_4C4E
00004E9C 0C40 0006                  		cmpi.w	#6,d0
00004EA0 6600                       		bne.s	loc_4C10
00004EA2 5278 F718                  		addq.w	#1,($FFFFF718).w
00004EA6 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004EAA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004EB0                            
00004EB0                            loc_4C10:
00004EB0 7000                       		moveq	#0,d0
00004EB2 3038 F708                  		move.w	($FFFFF708).w,d0
00004EB6 4440                       		neg.w	d0
00004EB8 4840                       		swap	d0
00004EBA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004EC0 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004EC4 7609                       		moveq	#9,d3
00004EC6                            
00004EC6                            loc_4C26:
00004EC6 302B 0002                  		move.w	2(a3),d0
00004ECA 6100 DD56                  		bsr.w	CalcSine
00004ECE 7400                       		moveq	#0,d2
00004ED0 1419                       		move.b	(a1)+,d2
00004ED2 C1C2                       		muls.w	d2,d0
00004ED4 E080                       		asr.l	#8,d0
00004ED6 36C0                       		move.w	d0,(a3)+
00004ED8 1419                       		move.b	(a1)+,d2
00004EDA 4882                       		ext.w	d2
00004EDC D55B                       		add.w	d2,(a3)+
00004EDE 51CB FFE6                  		dbf	d3,loc_4C26
00004EE2 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004EE6 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004EEC 6000                       		bra.s	loc_4C7E
00004EEE                            ; ===========================================================================
00004EEE                            
00004EEE                            loc_4C4E:				; XREF: SS_BGAnimate
00004EEE 0C40 000C                  		cmpi.w	#$C,d0
00004EF2 6600                       		bne.s	loc_4C74
00004EF4 5378 F718                  		subq.w	#1,($FFFFF718).w
00004EF8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004EFC 243C 0001 8000             		move.l	#$18000,d2
00004F02 7206                       		moveq	#6,d1
00004F04                            
00004F04                            loc_4C64:
00004F04 2013                       		move.l	(a3),d0
00004F06 9082                       		sub.l	d2,d0
00004F08 26C0                       		move.l	d0,(a3)+
00004F0A 0482 0000 2000             		subi.l	#$2000,d2
00004F10 51C9 FFF2                  		dbf	d1,loc_4C64
00004F14                            
00004F14                            loc_4C74:
00004F14 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004F18 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004F1E                            
00004F1E                            loc_4C7E:
00004F1E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004F22 3038 F718                  		move.w	($FFFFF718).w,d0
00004F26 4440                       		neg.w	d0
00004F28 4840                       		swap	d0
00004F2A 7600                       		moveq	#0,d3
00004F2C 161A                       		move.b	(a2)+,d3
00004F2E 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004F32 4442                       		neg.w	d2
00004F34 0242 00FF                  		andi.w	#$FF,d2
00004F38 E54A                       		lsl.w	#2,d2
00004F3A                            
00004F3A                            loc_4C9A:
00004F3A 301B                       		move.w	(a3)+,d0
00004F3C 544B                       		addq.w	#2,a3
00004F3E 7200                       		moveq	#0,d1
00004F40 121A                       		move.b	(a2)+,d1
00004F42 5341                       		subq.w	#1,d1
00004F44                            
00004F44                            loc_4CA4:
00004F44 2380 2000                  		move.l	d0,(a1,d2.w)
00004F48 5842                       		addq.w	#4,d2
00004F4A 0242 03FC                  		andi.w	#$3FC,d2
00004F4E 51C9 FFF4                  		dbf	d1,loc_4CA4
00004F52 51CB FFE6                  		dbf	d3,loc_4C9A
00004F56 4E75                       		rts	
00004F58                            ; End of function SS_BGAnimate
00004F58                            
00004F58                            ; ===========================================================================
00004F58 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004F64                            		even
00004F64 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004F6C                            		even
00004F6C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004F80                            		even
00004F80                            					; XREF: SS_BGAnimate
00004F80                            ; ===========================================================================
00004F80                            
00004F80                            ; ---------------------------------------------------------------------------
00004F80                            ; Continue screen
00004F80                            ; ---------------------------------------------------------------------------
00004F80                            
00004F80                            ContinueScreen:				; XREF: GameModeArray
00004F80 6100 D0F0                  		bsr.w	Pal_FadeFrom
00004F84 46FC 2700                  		move	#$2700,sr
00004F88 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F8C 0200 00BF                  		andi.b	#$BF,d0
00004F90 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F96 4DF9 00C0 0004             		lea	($C00004).l,a6
00004F9C 3CBC 8004                  		move.w	#$8004,(a6)
00004FA0 3CBC 8700                  		move.w	#$8700,(a6)
00004FA4 6100 C53E                  		bsr.w	ClearScreen
00004FA8 43F8 D000                  		lea	($FFFFD000).w,a1
00004FAC 7000                       		moveq	#0,d0
00004FAE 323C 07FF                  		move.w	#$7FF,d1
00004FB2                            
00004FB2                            Cont_ClrObjRam:
00004FB2 22C0                       		move.l	d0,(a1)+
00004FB4 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004FB8                            
00004FB8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004FC2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004FC8 6100 C696                  		bsr.w	NemDec
00004FCC 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004FD6 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004FDC 6100 C682                  		bsr.w	NemDec
00004FE0 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004FEA 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004FF0 6100 C66E                  		bsr.w	NemDec
00004FF4 720A                       		moveq	#10,d1
00004FF6 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004FFC 7012                       		moveq	#$12,d0
00004FFE 6100 D31C                  		bsr.w	PalLoad1	; load continue	screen pallet
00005002 103C 0090                  		move.b	#$90,d0
00005006 6100 C5AE                  		bsr.w	PlaySound	; play continue	music
0000500A 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005010 42B8 F700                  		clr.l	($FFFFF700).w
00005014 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000501C 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005022 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005028 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000502E 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005034 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000503A 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005040 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005046 4EB9 0000 0000             		jsr	ObjectsLoad
0000504C 4EB9 0000 0000             		jsr	BuildSprites
00005052 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005056 0000 0040                  		ori.b	#$40,d0
0000505A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005060 6100 CF6A                  		bsr.w	Pal_FadeTo
00005064                            
00005064                            ; ---------------------------------------------------------------------------
00005064                            ; Continue screen main loop
00005064                            ; ---------------------------------------------------------------------------
00005064                            
00005064                            Cont_MainLoop:
00005064 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000506A 6100 DB84                  		bsr.w	DelayProgram
0000506E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005074 6400                       		bcc.s	loc_4DF2
00005076 46FC 2700                  		move	#$2700,sr
0000507A 3238 F614                  		move.w	($FFFFF614).w,d1
0000507E 82FC 003C                  		divu.w	#$3C,d1
00005082 0281 0000 000F             		andi.l	#$F,d1
00005088 4EB9 0000 0000             		jsr	ContScrCounter
0000508E 46FC 2300                  		move	#$2300,sr
00005092                            
00005092                            loc_4DF2:
00005092 4EB9 0000 0000             		jsr	ObjectsLoad
00005098 4EB9 0000 0000             		jsr	BuildSprites
0000509E 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000050A4 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000050A6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000050AC 64B6                       		bcc.s	Cont_MainLoop
000050AE 4A78 F614                  		tst.w	($FFFFF614).w
000050B2 6600 FFB0                  		bne.w	Cont_MainLoop
000050B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000050BC 4E75                       		rts	
000050BE                            ; ===========================================================================
000050BE                            
000050BE                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000050BE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000050C4 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000050CA 7000                       		moveq	#0,d0
000050CC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000050D0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000050D4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000050D8 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000050DC 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000050E0 4E75                       		rts	
000050E2                            ; ===========================================================================
000050E2                            
000050E2                            ; ---------------------------------------------------------------------------
000050E2                            ; Object 80 - Continue screen elements
000050E2                            ; ---------------------------------------------------------------------------
000050E2                            
000050E2                            Obj80:					; XREF: Obj_Index
000050E2 7000                       		moveq	#0,d0
000050E4 1028 0024                  		move.b	$24(a0),d0
000050E8 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000050EC 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000050F0                            ; ===========================================================================
000050F0 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000050F2 0000                       		dc.w Obj80_Display-Obj80_Index
000050F4 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000050F6 0000                       		dc.w Obj80_ChkType-Obj80_Index
000050F8                            ; ===========================================================================
000050F8                            
000050F8                            Obj80_Main:				; XREF: Obj80_Index
000050F8 5428 0024                  		addq.b	#2,$24(a0)
000050FC 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005104 317C 8500 0002             		move.w	#$8500,2(a0)
0000510A 117C 0000 0001             		move.b	#0,1(a0)
00005110 117C 003C 0019             		move.b	#$3C,$19(a0)
00005116 317C 0120 0008             		move.w	#$120,8(a0)
0000511C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005122 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005128                            
00005128                            Obj80_Display:				; XREF: Obj80_Index
00005128 4EF9 0000 0000             		jmp	DisplaySprite
0000512E                            ; ===========================================================================
0000512E                            Obj80_MiniSonicPos:
0000512E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005140 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000514C                            ; ===========================================================================
0000514C                            
0000514C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000514C 2248                       		movea.l	a0,a1
0000514E 45F9 0000 512E             		lea	(Obj80_MiniSonicPos).l,a2
00005154 7200                       		moveq	#0,d1
00005156 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000515A 5501                       		subq.b	#2,d1
0000515C 6400                       		bcc.s	loc_4EC4
0000515E 4EF9 0000 0000             		jmp	DeleteObject
00005164                            ; ===========================================================================
00005164                            
00005164                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005164 7601                       		moveq	#1,d3
00005166 0C01 000E                  		cmpi.b	#$E,d1
0000516A 6500                       		bcs.s	loc_4ED0
0000516C 7600                       		moveq	#0,d3
0000516E 720E                       		moveq	#$E,d1
00005170                            
00005170                            loc_4ED0:
00005170 1401                       		move.b	d1,d2
00005172 0202 0001                  		andi.b	#1,d2
00005176                            
00005176                            Obj80_MiniSonLoop:
00005176 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000517A 335A 0008                  		move.w	(a2)+,8(a1)
0000517E 4A02                       		tst.b	d2
00005180 6700                       		beq.s	loc_4EEA
00005182 0469 000A 0008             		subi.w	#$A,8(a1)
00005188                            
00005188                            loc_4EEA:
00005188 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000518E 137C 0006 001A             		move.b	#6,$1A(a1)
00005194 137C 0006 0024             		move.b	#6,$24(a1)
0000519A 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000051A2 337C 8551 0002             		move.w	#$8551,2(a1)
000051A8 137C 0000 0001             		move.b	#0,1(a1)
000051AE 43E9 0040                  		lea	$40(a1),a1
000051B2 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000051B6 43E9 FFC0                  		lea	-$40(a1),a1
000051BA 1343 0028                  		move.b	d3,$28(a1)
000051BE                            
000051BE                            Obj80_ChkType:				; XREF: Obj80_Index
000051BE 4A28 0028                  		tst.b	$28(a0)
000051C2 6700                       		beq.s	loc_4F40
000051C4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000051CA 6500                       		bcs.s	loc_4F40
000051CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000051D0 0200 0001                  		andi.b	#1,d0
000051D4 6600                       		bne.s	loc_4F40
000051D6 4A78 D010                  		tst.w	($FFFFD010).w
000051DA 6600                       		bne.s	Obj80_Delete
000051DC 4E75                       		rts	
000051DE                            ; ===========================================================================
000051DE                            
000051DE                            loc_4F40:				; XREF: Obj80_ChkType
000051DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000051E2 0200 000F                  		andi.b	#$F,d0
000051E6 6600                       		bne.s	Obj80_Display2
000051E8 0868 0000 001A             		bchg	#0,$1A(a0)
000051EE                            
000051EE                            Obj80_Display2:
000051EE 4EF9 0000 0000             		jmp	DisplaySprite
000051F4                            ; ===========================================================================
000051F4                            
000051F4                            Obj80_Delete:				; XREF: Obj80_ChkType
000051F4 4EF9 0000 0000             		jmp	DeleteObject
000051FA                            ; ===========================================================================
000051FA                            
000051FA                            ; ---------------------------------------------------------------------------
000051FA                            ; Object 81 - Sonic on the continue screen
000051FA                            ; ---------------------------------------------------------------------------
000051FA                            
000051FA                            Obj81:					; XREF: Obj_Index
000051FA 7000                       		moveq	#0,d0
000051FC 1028 0024                  		move.b	$24(a0),d0
00005200 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005204 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005208 4EF9 0000 0000             		jmp	DisplaySprite
0000520E                            ; ===========================================================================
0000520E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005210 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005212 0000                       		dc.w Obj81_Animate-Obj81_Index
00005214 0000                       		dc.w Obj81_Run-Obj81_Index
00005216                            ; ===========================================================================
00005216                            
00005216                            Obj81_Main:				; XREF: Obj81_Index
00005216 5428 0024                  		addq.b	#2,$24(a0)
0000521A 317C 00A0 0008             		move.w	#$A0,8(a0)
00005220 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005226 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000522E 317C 0780 0002             		move.w	#$780,2(a0)
00005234 117C 0004 0001             		move.b	#4,1(a0)
0000523A 117C 0002 0018             		move.b	#2,$18(a0)
00005240 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005246 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000524C                            
0000524C                            Obj81_ChkLand:				; XREF: Obj81_Index
0000524C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005252 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005254 5428 0024                  		addq.b	#2,$24(a0)
00005258 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000525C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005264 317C 8500 0002             		move.w	#$8500,2(a0)
0000526A 117C 0000 001C             		move.b	#0,$1C(a0)
00005270 6000                       		bra.s	Obj81_Animate
00005272                            ; ===========================================================================
00005272                            
00005272                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005272 4EB9 0000 0000             		jsr	SpeedToPos
00005278 4EB9 0000 0000             		jsr	Sonic_Animate
0000527E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005284                            ; ===========================================================================
00005284                            
00005284                            Obj81_Animate:				; XREF: Obj81_Index
00005284 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005288 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000528A 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005290 4EF9 0000 0000             		jmp	AnimateSprite
00005296                            ; ===========================================================================
00005296                            
00005296                            Obj81_GetUp:				; XREF: Obj81_Animate
00005296 5428 0024                  		addq.b	#2,$24(a0)
0000529A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052A2 317C 0780 0002             		move.w	#$780,2(a0)
000052A8 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000052AE 4268 0014                  		clr.w	$14(a0)
000052B2 5168 000C                  		subq.w	#8,$C(a0)
000052B6 103C 00E0                  		move.b	#$E0,d0
000052BA 6100 C300                  		bsr.w	PlaySound_Special ; fade out music
000052BE                            
000052BE                            Obj81_Run:				; XREF: Obj81_Index
000052BE 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000052C4 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000052C6 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000052CC 6000                       		bra.s	Obj81_ShowRun
000052CE                            ; ===========================================================================
000052CE                            
000052CE                            Obj81_AddSpeed:				; XREF: Obj81_Run
000052CE 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000052D4                            
000052D4                            Obj81_ShowRun:				; XREF: Obj81_Run
000052D4 4EB9 0000 0000             		jsr	SpeedToPos
000052DA 4EB9 0000 0000             		jsr	Sonic_Animate
000052E0 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000052E6                            ; ===========================================================================
000052E6                            Ani_obj81:
000052E6                            	include "_anim\obj81.asm"
000052E6                            ; ---------------------------------------------------------------------------
000052E6                            ; Animation script - Sonic on the continue screen
000052E6                            ; ---------------------------------------------------------------------------
000052E6 0000                       		dc.w byte_504A-Ani_obj81
000052E8 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000052F4 00                         		even
000052F4 00                         		even
000052F4                            
000052F4                            ; ---------------------------------------------------------------------------
000052F4                            ; Sprite mappings - Continue screen
000052F4                            ; ---------------------------------------------------------------------------
000052F4                            Map_obj80:
000052F4                            	include "_maps\obj80.asm"
000052F4                            ; ---------------------------------------------------------------------------
000052F4                            ; Sprite mappings - Continue screen
000052F4                            ; ---------------------------------------------------------------------------
000052F4 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000052F8 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000052FC 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005300 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005304 0B                         byte_5066:	dc.b $B
00005305 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000530A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000530F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005314 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005319 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000531E F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005323 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005328 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000532D 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005332 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005337 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000533C 03                         byte_509E:	dc.b 3
0000533D 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005342 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005347 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000534C 03                         byte_50AE:	dc.b 3
0000534D 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005352 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005357 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000535C 03                         byte_50BE:	dc.b 3
0000535D 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005362 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005367 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000536C 02                         byte_50CE:	dc.b 2
0000536D 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005372 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005377 01                         byte_50D9:	dc.b 1
00005378 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000537D 01                         byte_50DF:	dc.b 1
0000537E 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005384 00                         		even
00005384 00                         		even
00005384                            
00005384                            ; ===========================================================================
00005384                            ; ---------------------------------------------------------------------------
00005384                            ; Ending sequence in Green Hill	Zone
00005384                            ; ---------------------------------------------------------------------------
00005384                            
00005384                            EndingSequence:				; XREF: GameModeArray
00005384 103C 00E4                  		move.b	#$E4,d0
00005388 6100 C232                  		bsr.w	PlaySound_Special ; stop music
0000538C 6100 CCE4                  		bsr.w	Pal_FadeFrom
00005390 43F8 D000                  		lea	($FFFFD000).w,a1
00005394 7000                       		moveq	#0,d0
00005396 323C 07FF                  		move.w	#$7FF,d1
0000539A                            
0000539A                            End_ClrObjRam:
0000539A 22C0                       		move.l	d0,(a1)+
0000539C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000053A0                            
000053A0 43F8 F628                  		lea	($FFFFF628).w,a1
000053A4 7000                       		moveq	#0,d0
000053A6 323C 0015                  		move.w	#$15,d1
000053AA                            
000053AA                            End_ClrRam:
000053AA 22C0                       		move.l	d0,(a1)+
000053AC 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000053B0                            
000053B0 43F8 F700                  		lea	($FFFFF700).w,a1
000053B4 7000                       		moveq	#0,d0
000053B6 323C 003F                  		move.w	#$3F,d1
000053BA                            
000053BA                            End_ClrRam2:
000053BA 22C0                       		move.l	d0,(a1)+
000053BC 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000053C0                            
000053C0 43F8 FE60                  		lea	($FFFFFE60).w,a1
000053C4 7000                       		moveq	#0,d0
000053C6 323C 0047                  		move.w	#$47,d1
000053CA                            
000053CA                            End_ClrRam3:
000053CA 22C0                       		move.l	d0,(a1)+
000053CC 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000053D0                            
000053D0 46FC 2700                  		move	#$2700,sr
000053D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053D8 0200 00BF                  		andi.b	#$BF,d0
000053DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000053E2 6100 C100                  		bsr.w	ClearScreen
000053E6 4DF9 00C0 0004             		lea	($C00004).l,a6
000053EC 3CBC 8B03                  		move.w	#$8B03,(a6)
000053F0 3CBC 8230                  		move.w	#$8230,(a6)
000053F4 3CBC 8407                  		move.w	#$8407,(a6)
000053F8 3CBC 857C                  		move.w	#$857C,(a6)
000053FC 3CBC 9001                  		move.w	#$9001,(a6)
00005400 3CBC 8004                  		move.w	#$8004,(a6)
00005404 3CBC 8720                  		move.w	#$8720,(a6)
00005408 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000540E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005412 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005418 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000541E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005424 6700                       		beq.s	End_LoadData	; if yes, branch
00005426 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000542C                            
0000542C                            End_LoadData:
0000542C 701C                       		moveq	#$1C,d0
0000542E 6100 C4DC                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005432 4EB9 0000 0000             		jsr	Hud_Base
00005438 6100 0000                  		bsr.w	LevelSizeLoad
0000543C 6100 0000                  		bsr.w	DeformBgLayer
00005440 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005446 6100 0000                  		bsr.w	MainLoadBlockLoad
0000544A 6100 0000                  		bsr.w	LoadTilesFromStart
0000544E 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005456 46FC 2300                  		move	#$2300,sr
0000545A 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005460 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005464 6100 C656                  		bsr.w	KosDec
00005468 7003                       		moveq	#3,d0
0000546A 6100 CEB0                  		bsr.w	PalLoad1	; load Sonic's pallet
0000546E 303C 008B                  		move.w	#$8B,d0
00005472 6100 C142                  		bsr.w	PlaySound	; play ending sequence music
00005476 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000547C 6700                       		beq.s	End_LoadSonic	; if not, branch
0000547E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005484                            
00005484                            End_LoadSonic:
00005484 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000548A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005490 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005496 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000549C 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000054A2 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000054A8 4EB9 0000 0000             		jsr	ObjPosLoad
000054AE 4EB9 0000 0000             		jsr	ObjectsLoad
000054B4 4EB9 0000 0000             		jsr	BuildSprites
000054BA 7000                       		moveq	#0,d0
000054BC 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000054C0 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000054C4 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000054C8 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000054CC 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000054D0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000054D4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000054D8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000054DC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000054E0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000054E4 6100 EEDA                  		bsr.w	OscillateNumInit
000054E8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000054EE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000054F4 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000054FA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005500 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005506 6100 D6E8                  		bsr.w	DelayProgram
0000550A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000550E 0000 0040                  		ori.b	#$40,d0
00005512 33C0 00C0 0004             		move.w	d0,($C00004).l
00005518 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000551E 6100 CAAC                  		bsr.w	Pal_FadeTo
00005522                            
00005522                            ; ---------------------------------------------------------------------------
00005522                            ; Main ending sequence loop
00005522                            ; ---------------------------------------------------------------------------
00005522                            
00005522                            End_MainLoop:
00005522 6100 C0A4                  		bsr.w	PauseGame
00005526 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000552C 6100 D6C2                  		bsr.w	DelayProgram
00005530 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005534 6100 0000                  		bsr.w	End_MoveSonic
00005538 4EB9 0000 0000             		jsr	ObjectsLoad
0000553E 6100 0000                  		bsr.w	DeformBgLayer
00005542 4EB9 0000 0000             		jsr	BuildSprites
00005548 4EB9 0000 0000             		jsr	ObjPosLoad
0000554E 6100 C60C                  		bsr.w	PalCycle_Load
00005552 6100 EEC2                  		bsr.w	OscillateNumDo
00005556 6100 EF4E                  		bsr.w	ChangeRingFrame
0000555A 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005560 6700                       		beq.s	loc_52DA	; if yes, branch
00005562 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005568 103C 0091                  		move.b	#$91,d0
0000556C 6100 C04E                  		bsr.w	PlaySound_Special ; play credits music
00005570 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005576 4E75                       		rts	
00005578                            ; ===========================================================================
00005578                            
00005578                            loc_52DA:
00005578 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000557C 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005580                            
00005580 4278 FE02                  		clr.w	($FFFFFE02).w
00005584 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000558A 4278 F794                  		clr.w	($FFFFF794).w
0000558E                            
0000558E                            End_AllEmlds:				; XREF: loc_5334
0000558E 6100 C038                  		bsr.w	PauseGame
00005592 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005598 6100 D656                  		bsr.w	DelayProgram
0000559C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055A0 6100 0000                  		bsr.w	End_MoveSonic
000055A4 4EB9 0000 0000             		jsr	ObjectsLoad
000055AA 6100 0000                  		bsr.w	DeformBgLayer
000055AE 4EB9 0000 0000             		jsr	BuildSprites
000055B4 4EB9 0000 0000             		jsr	ObjPosLoad
000055BA 6100 EE5A                  		bsr.w	OscillateNumDo
000055BE 6100 EEE6                  		bsr.w	ChangeRingFrame
000055C2 5378 F794                  		subq.w	#1,($FFFFF794).w
000055C6 6A00                       		bpl.s	loc_5334
000055C8 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000055CE 6100 CBEC                  		bsr.w	Pal_ToWhite
000055D2                            
000055D2                            loc_5334:
000055D2 4A78 FE02                  		tst.w	($FFFFFE02).w
000055D6 6700 FFB6                  		beq.w	End_AllEmlds
000055DA 4278 FE02                  		clr.w	($FFFFFE02).w
000055DE 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000055E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000055EA 4DF9 00C0 0000             		lea	($C00000).l,a6
000055F0 47F8 F700                  		lea	($FFFFF700).w,a3
000055F4 49F8 A400                  		lea	($FFFFA400).w,a4
000055F8 343C 4000                  		move.w	#$4000,d2
000055FC 6100 0000                  		bsr.w	LoadTilesFromStart2
00005600 7013                       		moveq	#$13,d0
00005602 6100 CD18                  		bsr.w	PalLoad1	; load ending pallet
00005606 6100 CAE8                  		bsr.w	Pal_MakeWhite
0000560A 6000 FF16                  		bra.w	End_MainLoop
0000560E                            
0000560E                            ; ---------------------------------------------------------------------------
0000560E                            ; Subroutine controlling Sonic on the ending sequence
0000560E                            ; ---------------------------------------------------------------------------
0000560E                            
0000560E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000560E                            
0000560E                            
0000560E                            End_MoveSonic:				; XREF: End_MainLoop
0000560E 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005612 6600                       		bne.s	End_MoveSonic2
00005614 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000561A 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000561C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005620 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005626 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000562C 4E75                       		rts	
0000562E                            ; ===========================================================================
0000562E                            
0000562E                            End_MoveSonic2:				; XREF: End_MoveSonic
0000562E 5500                       		subq.b	#2,d0
00005630 6600                       		bne.s	End_MoveSonic3
00005632 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005638 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000563A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000563E 7000                       		moveq	#0,d0
00005640 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005644 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005648 31C0 D014                  		move.w	d0,($FFFFD014).w
0000564C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005652 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005658 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000565E 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005664 4E75                       		rts	
00005666                            ; ===========================================================================
00005666                            
00005666                            End_MoveSonic3:				; XREF: End_MoveSonic
00005666 5500                       		subq.b	#2,d0
00005668 6600                       		bne.s	End_MoveSonExit
0000566A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000566E 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005674 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000567A 4278 D024                  		clr.w	($FFFFD024).w
0000567E                            
0000567E                            End_MoveSonExit:
0000567E 4E75                       		rts	
00005680                            ; End of function End_MoveSonic
00005680                            
00005680                            ; ===========================================================================
00005680                            ; ---------------------------------------------------------------------------
00005680                            ; Object 87 - Sonic on ending sequence
00005680                            ; ---------------------------------------------------------------------------
00005680                            
00005680                            Obj87:					; XREF: Obj_Index
00005680 7000                       		moveq	#0,d0
00005682 1028 0025                  		move.b	$25(a0),d0
00005686 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000568A 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000568E 4EF9 0000 0000             		jmp	DisplaySprite
00005694                            ; ===========================================================================
00005694 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005698 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000569C 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000056A0 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000056A4 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000056A8                            ; ===========================================================================
000056A8                            
000056A8                            Obj87_Main:				; XREF: Obj87_Index
000056A8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000056AE 6700                       		beq.s	Obj87_Main2	; if yes, branch
000056B0 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000056B6 317C 00D8 0030             		move.w	#$D8,$30(a0)
000056BC 4E75                       		rts	
000056BE                            ; ===========================================================================
000056BE                            
000056BE                            Obj87_Main2:				; XREF: Obj87_Main
000056BE 5428 0025                  		addq.b	#2,$25(a0)
000056C2 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000056CA 317C 03E1 0002             		move.w	#$3E1,2(a0)
000056D0 117C 0004 0001             		move.b	#4,1(a0)
000056D6 4228 0022                  		clr.b	$22(a0)
000056DA 117C 0002 0018             		move.b	#2,$18(a0)
000056E0 117C 0000 001A             		move.b	#0,$1A(a0)
000056E6 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000056EC                            
000056EC                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000056EC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000056F0 6600                       		bne.s	Obj87_Wait
000056F2 5428 0025                  		addq.b	#2,$25(a0)
000056F6 317C 0001 001C             		move.w	#1,$1C(a0)
000056FC 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005702                            
00005702                            Obj87_Wait:
00005702 4E75                       		rts	
00005704                            ; ===========================================================================
00005704                            
00005704                            Obj87_LookUp:				; XREF: Obj87_Index
00005704 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000570C 6600                       		bne.s	locret_5480
0000570E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005714 317C 005A 0030             		move.w	#$5A,$30(a0)
0000571A 5428 0025                  		addq.b	#2,$25(a0)
0000571E                            
0000571E                            locret_5480:
0000571E 4E75                       		rts	
00005720                            ; ===========================================================================
00005720                            
00005720                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005720 5368 0030                  		subq.w	#1,$30(a0)
00005724 6600                       		bne.s	Obj87_Wait2
00005726 43F8 D400                  		lea	($FFFFD400).w,a1
0000572A 323C 00FF                  		move.w	#$FF,d1
0000572E                            
0000572E                            Obj87_ClrLoop:
0000572E 4299                       		clr.l	(a1)+
00005730 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005734 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000573A 5428 0025                  		addq.b	#2,$25(a0)
0000573E 117C 0001 001C             		move.b	#1,$1C(a0)
00005744 317C 003C 0030             		move.w	#$3C,$30(a0)
0000574A                            
0000574A                            Obj87_Wait2:
0000574A 4E75                       		rts	
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000574C 5368 0030                  		subq.w	#1,$30(a0)
00005750 6600                       		bne.s	Obj87_Wait3
00005752 5428 0025                  		addq.b	#2,$25(a0)
00005756 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000575C 117C 0002 001C             		move.b	#2,$1C(a0)
00005762 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005768                            
00005768                            Obj87_Wait3:
00005768 4E75                       		rts	
0000576A                            ; ===========================================================================
0000576A                            
0000576A                            Obj87_Animate:				; XREF: Obj87_Index
0000576A 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005770 4EF9 0000 0000             		jmp	AnimateSprite
00005776                            ; ===========================================================================
00005776                            
00005776                            Obj87_Leap:				; XREF: Obj87_Index
00005776 5368 0030                  		subq.w	#1,$30(a0)
0000577A 6600                       		bne.s	Obj87_Wait4
0000577C 5428 0025                  		addq.b	#2,$25(a0)
00005780 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005788 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000578E 117C 0004 0001             		move.b	#4,1(a0)
00005794 4228 0022                  		clr.b	$22(a0)
00005798 117C 0002 0018             		move.b	#2,$18(a0)
0000579E 117C 0005 001A             		move.b	#5,$1A(a0)
000057A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000057AA 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000057B0 60B8                       		bra.s	Obj87_Animate
000057B2                            ; ===========================================================================
000057B2                            
000057B2                            Obj87_Wait4:				; XREF: Obj87_Leap
000057B2 4E75                       		rts	
000057B4                            ; ===========================================================================
000057B4                            Ani_obj87:
000057B4                            	include "_anim\obj87.asm"
000057B4                            ; ---------------------------------------------------------------------------
000057B4                            ; Animation script - Sonic on the ending sequence
000057B4                            ; ---------------------------------------------------------------------------
000057B4 0000                       		dc.w byte_551C-Ani_obj87
000057B6 0000                       		dc.w byte_552A-Ani_obj87
000057B8 0000                       		dc.w byte_5534-Ani_obj87
000057BA 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000057C8 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000057D2 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000057DA                            		even
000057DA                            		even
000057DA                            
000057DA                            ; ===========================================================================
000057DA                            ; ---------------------------------------------------------------------------
000057DA                            ; Object 88 - chaos emeralds on	the ending sequence
000057DA                            ; ---------------------------------------------------------------------------
000057DA                            
000057DA                            Obj88:					; XREF: Obj_Index
000057DA 7000                       		moveq	#0,d0
000057DC 1028 0024                  		move.b	$24(a0),d0
000057E0 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000057E4 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000057E8 4EF9 0000 0000             		jmp	DisplaySprite
000057EE                            ; ===========================================================================
000057EE 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000057F0 0000                       		dc.w Obj88_Move-Obj88_Index
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            Obj88_Main:				; XREF: Obj88_Index
000057F2 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000057F8 6700                       		beq.s	Obj88_Main2
000057FA 588F                       		addq.l	#4,sp
000057FC 4E75                       		rts	
000057FE                            ; ===========================================================================
000057FE                            
000057FE                            Obj88_Main2:				; XREF: Obj88_Main
000057FE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005804 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000580A 2248                       		movea.l	a0,a1
0000580C 7600                       		moveq	#0,d3
0000580E 7401                       		moveq	#1,d2
00005810 7205                       		moveq	#5,d1
00005812                            
00005812                            Obj88_MainLoop:
00005812 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005816 5429 0024                  		addq.b	#2,$24(a1)
0000581A 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005822 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005828 137C 0004 0001             		move.b	#4,1(a1)
0000582E 137C 0001 0018             		move.b	#1,$18(a1)
00005834 3368 0008 0038             		move.w	8(a0),$38(a1)
0000583A 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005840 1342 001C                  		move.b	d2,$1C(a1)
00005844 1342 001A                  		move.b	d2,$1A(a1)
00005848 5202                       		addq.b	#1,d2
0000584A 1343 0026                  		move.b	d3,$26(a1)
0000584E 0603 002A                  		addi.b	#$2A,d3
00005852 43E9 0040                  		lea	$40(a1),a1
00005856 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000585A                            
0000585A                            Obj88_Move:				; XREF: Obj88_Index
0000585A 3028 003E                  		move.w	$3E(a0),d0
0000585E D168 0026                  		add.w	d0,$26(a0)
00005862 1028 0026                  		move.b	$26(a0),d0
00005866 4EB9 0000 2C22             		jsr	(CalcSine).l
0000586C 7800                       		moveq	#0,d4
0000586E 1828 003C                  		move.b	$3C(a0),d4
00005872 C3C4                       		muls.w	d4,d1
00005874 E081                       		asr.l	#8,d1
00005876 C1C4                       		muls.w	d4,d0
00005878 E080                       		asr.l	#8,d0
0000587A D268 0038                  		add.w	$38(a0),d1
0000587E D068 003A                  		add.w	$3A(a0),d0
00005882 3141 0008                  		move.w	d1,8(a0)
00005886 3140 000C                  		move.w	d0,$C(a0)
0000588A 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005890 6700                       		beq.s	loc_55FA
00005892 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005898                            
00005898                            loc_55FA:
00005898 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000589E 6700                       		beq.s	loc_5608
000058A0 0668 0020 003E             		addi.w	#$20,$3E(a0)
000058A6                            
000058A6                            loc_5608:
000058A6 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000058AC 6700                       		beq.s	locret_5614
000058AE 5368 003A                  		subq.w	#1,$3A(a0)
000058B2                            
000058B2                            locret_5614:
000058B2 4E75                       		rts	
000058B4                            ; ===========================================================================
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            
000058B4                            Obj89:					; XREF: Obj_Index
000058B4 7000                       		moveq	#0,d0
000058B6 1028 0024                  		move.b	$24(a0),d0
000058BA 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000058BE 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000058C2                            ; ===========================================================================
000058C2 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000058C4 0000                       		dc.w Obj89_Move-Obj89_Index
000058C6 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000058C8                            ; ===========================================================================
000058C8                            
000058C8                            Obj89_Main:				; XREF: Obj89_Index
000058C8 5428 0024                  		addq.b	#2,$24(a0)
000058CC 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000058D2 317C 00D8 000A             		move.w	#$D8,$A(a0)
000058D8 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
000058E0 317C 05C5 0002             		move.w	#$5C5,2(a0)
000058E6 117C 0000 0001             		move.b	#0,1(a0)
000058EC 117C 0000 0018             		move.b	#0,$18(a0)
000058F2                            
000058F2                            Obj89_Move:				; XREF: Obj89_Index
000058F2 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000058F8 6700                       		beq.s	Obj89_Delay	; if yes, branch
000058FA 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005900 4EB9 0000 0000             		jsr	DisplaySprite
00005906                            ; ===========================================================================
00005906                            
00005906                            Obj89_Delay:				; XREF: Obj89_Move
00005906 5428 0024                  		addq.b	#2,$24(a0)
0000590A 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005910                            
00005910                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005910 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005914 6A00                       		bpl.s	Obj89_Display
00005916 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000591C                            
0000591C                            Obj89_Display:
0000591C 4EB9 0000 0000             		jsr	DisplaySprite
00005922                            ; ===========================================================================
00005922                            ; ---------------------------------------------------------------------------
00005922                            ; Sprite mappings - Sonic on the ending	sequence
00005922                            ; ---------------------------------------------------------------------------
00005922                            Map_obj87:
00005922                            	include "_maps\obj87.asm"
00005922                            ; ---------------------------------------------------------------------------
00005922                            ; Sprite mappings - Sonic on the ending	sequence
00005922                            ; ---------------------------------------------------------------------------
00005922 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005926 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000592A 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000592E 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005932 02                         byte_5690:	dc.b 2
00005933 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005938 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000593D 03                         byte_569B:	dc.b 3
0000593E FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005943 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005948 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000594D 02                         byte_56AB:	dc.b 2
0000594E EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005953 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005958 02                         byte_56B6:	dc.b 2
00005959 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000595E FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005963 02                         byte_56C1:	dc.b 2
00005964 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005969 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000596E 03                         byte_56CC:	dc.b 3
0000596F EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005974 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005979 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000597E 07                         byte_56DC:	dc.b 7
0000597F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005984 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005989 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000598E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005993 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005998 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000599D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000059A2 18                         byte_5700:	dc.b $18
000059A3 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000059A8 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000059AD 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000059B2 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000059B7 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000059BC 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000059C1 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000059C6 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000059CB B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000059D0 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000059D5 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000059DA C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000059DF C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000059E4 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000059E9 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000059EE D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000059F3 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000059F8 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000059FD E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005A02 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005A07 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005A0C E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005A11 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005A16 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005A1C 00                         		even
00005A1C 00                         		even
00005A1C                            
00005A1C                            ; ---------------------------------------------------------------------------
00005A1C                            ; Sprite mappings - chaos emeralds on the ending sequence
00005A1C                            ; ---------------------------------------------------------------------------
00005A1C                            Map_obj88:
00005A1C                            	include "_maps\obj88.asm"
00005A1C                            ; ---------------------------------------------------------------------------
00005A1C                            ; Sprite mappings - chaos emeralds on the ending sequence
00005A1C                            ; ---------------------------------------------------------------------------
00005A1C 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005A20 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005A24 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005A28 0000                       		dc.w byte_57AC-Map_obj88
00005A2A 01                         byte_5788:	dc.b 1
00005A2B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005A30 01                         byte_578E:	dc.b 1
00005A31 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005A36 01                         byte_5794:	dc.b 1
00005A37 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005A3C 01                         byte_579A:	dc.b 1
00005A3D F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005A42 01                         byte_57A0:	dc.b 1
00005A43 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005A48 01                         byte_57A6:	dc.b 1
00005A49 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005A4E 01                         byte_57AC:	dc.b 1
00005A4F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005A54                            		even
00005A54                            		even
00005A54                            
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            Map_obj89:
00005A54                            	include "_maps\obj89.asm"
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005A54                            ; ---------------------------------------------------------------------------
00005A54 0000                       		dc.w byte_57B4-Map_obj89
00005A56 03                         byte_57B4:	dc.b 3
00005A57 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005A5C F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005A61 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005A66                            		even
00005A66                            		even
00005A66                            
00005A66                            ; ===========================================================================
00005A66                            ; ---------------------------------------------------------------------------
00005A66                            ; Credits ending sequence
00005A66                            ; ---------------------------------------------------------------------------
00005A66                            
00005A66                            Credits:				; XREF: GameModeArray
00005A66 6100 BD96                  		bsr.w	ClearPLC
00005A6A 6100 C606                  		bsr.w	Pal_FadeFrom
00005A6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005A74 3CBC 8004                  		move.w	#$8004,(a6)
00005A78 3CBC 8230                  		move.w	#$8230,(a6)
00005A7C 3CBC 8407                  		move.w	#$8407,(a6)
00005A80 3CBC 9001                  		move.w	#$9001,(a6)
00005A84 3CBC 9200                  		move.w	#$9200,(a6)
00005A88 3CBC 8B03                  		move.w	#$8B03,(a6)
00005A8C 3CBC 8720                  		move.w	#$8720,(a6)
00005A90 4238 F64E                  		clr.b	($FFFFF64E).w
00005A94 6100 BA4E                  		bsr.w	ClearScreen
00005A98 43F8 D000                  		lea	($FFFFD000).w,a1
00005A9C 7000                       		moveq	#0,d0
00005A9E 323C 07FF                  		move.w	#$7FF,d1
00005AA2                            
00005AA2                            Cred_ClrObjRam:
00005AA2 22C0                       		move.l	d0,(a1)+
00005AA4 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005AA8                            
00005AA8 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005AB2 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005AB8 6100 BBA6                  		bsr.w	NemDec
00005ABC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005AC0 7000                       		moveq	#0,d0
00005AC2 323C 001F                  		move.w	#$1F,d1
00005AC6                            
00005AC6                            Cred_ClrPallet:
00005AC6 22C0                       		move.l	d0,(a1)+
00005AC8 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005ACC                            
00005ACC 7003                       		moveq	#3,d0
00005ACE 6100 C84C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005AD2 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005AD8 4EB9 0000 0000             		jsr	ObjectsLoad
00005ADE 4EB9 0000 0000             		jsr	BuildSprites
00005AE4 6100 0000                  		bsr.w	EndingDemoLoad
00005AE8 7000                       		moveq	#0,d0
00005AEA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005AEE E948                       		lsl.w	#4,d0
00005AF0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005AF6 45F2 0000                  		lea	(a2,d0.w),a2
00005AFA 7000                       		moveq	#0,d0
00005AFC 1012                       		move.b	(a2),d0
00005AFE 6700                       		beq.s	loc_5862
00005B00 6100 BC9E                  		bsr.w	LoadPLC		; load level patterns
00005B04                            
00005B04                            loc_5862:
00005B04 7001                       		moveq	#1,d0
00005B06 6100 BC98                  		bsr.w	LoadPLC		; load standard	level patterns
00005B0A 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005B10 6100 C4BA                  		bsr.w	Pal_FadeTo
00005B14                            
00005B14                            Cred_WaitLoop:
00005B14 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005B1A 6100 D0D4                  		bsr.w	DelayProgram
00005B1E 6100 BCEC                  		bsr.w	RunPLC_RAM
00005B22 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005B26 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005B28 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005B2C 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005B2E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005B34 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005B38 4E75                       		rts	
00005B3A                            
00005B3A                            ; ---------------------------------------------------------------------------
00005B3A                            ; Ending sequence demo loading subroutine
00005B3A                            ; ---------------------------------------------------------------------------
00005B3A                            
00005B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B3A                            
00005B3A                            
00005B3A                            EndingDemoLoad:				; XREF: Credits
00005B3A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005B3E 0240 000F                  		andi.w	#$F,d0
00005B42 D040                       		add.w	d0,d0
00005B44 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005B48 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005B4C 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005B50 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005B56 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005B58 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005B5E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005B64 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005B6A 7000                       		moveq	#0,d0
00005B6C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B70 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B74 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B78 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005B7C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005B82 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005B84 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005B8A 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005B8E 303C 0008                  		move.w	#8,d0
00005B92                            
00005B92                            EndDemo_LampLoad:
00005B92 24D9                       		move.l	(a1)+,(a2)+
00005B94 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005B98                            
00005B98                            EndDemo_Exit:
00005B98 4E75                       		rts	
00005B9A                            ; End of function EndingDemoLoad
00005B9A                            
00005B9A                            ; ===========================================================================
00005B9A                            ; ---------------------------------------------------------------------------
00005B9A                            ; Levels used in the end sequence demos
00005B9A                            ; ---------------------------------------------------------------------------
00005B9A                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005BAA                            
00005BAA                            ; ---------------------------------------------------------------------------
00005BAA                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005BAA                            ; ---------------------------------------------------------------------------
00005BAA                            EndDemo_LampVar:
00005BAA 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005BAC 0A00 062C 000D             		dc.w $A00, $62C, $D
00005BB2 0000 0000                  		dc.l 0
00005BB6 0000                       		dc.b 0,	0
00005BB8 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005BCC 0101                       		dc.b 1,	1
00005BCE                            ; ===========================================================================
00005BCE                            ; ---------------------------------------------------------------------------
00005BCE                            ; "TRY AGAIN" and "END"	screens
00005BCE                            ; ---------------------------------------------------------------------------
00005BCE                            
00005BCE                            TryAgainEnd:				; XREF: Credits
00005BCE 6100 BC2E                  		bsr.w	ClearPLC
00005BD2 6100 C49E                  		bsr.w	Pal_FadeFrom
00005BD6 4DF9 00C0 0004             		lea	($C00004).l,a6
00005BDC 3CBC 8004                  		move.w	#$8004,(a6)
00005BE0 3CBC 8230                  		move.w	#$8230,(a6)
00005BE4 3CBC 8407                  		move.w	#$8407,(a6)
00005BE8 3CBC 9001                  		move.w	#$9001,(a6)
00005BEC 3CBC 9200                  		move.w	#$9200,(a6)
00005BF0 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BF4 3CBC 8720                  		move.w	#$8720,(a6)
00005BF8 4238 F64E                  		clr.b	($FFFFF64E).w
00005BFC 6100 B8E6                  		bsr.w	ClearScreen
00005C00 43F8 D000                  		lea	($FFFFD000).w,a1
00005C04 7000                       		moveq	#0,d0
00005C06 323C 07FF                  		move.w	#$7FF,d1
00005C0A                            
00005C0A                            TryAg_ClrObjRam:
00005C0A 22C0                       		move.l	d0,(a1)+
00005C0C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005C10                            
00005C10 701D                       		moveq	#$1D,d0
00005C12 6100 BCF8                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005C16 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C1A 7000                       		moveq	#0,d0
00005C1C 323C 001F                  		move.w	#$1F,d1
00005C20                            
00005C20                            TryAg_ClrPallet:
00005C20 22C0                       		move.l	d0,(a1)+
00005C22 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005C26                            
00005C26 7013                       		moveq	#$13,d0
00005C28 6100 C6F2                  		bsr.w	PalLoad1	; load ending pallet
00005C2C 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005C30 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005C36 4EB9 0000 0000             		jsr	ObjectsLoad
00005C3C 4EB9 0000 0000             		jsr	BuildSprites
00005C42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005C48 6100 C382                  		bsr.w	Pal_FadeTo
00005C4C                            
00005C4C                            ; ---------------------------------------------------------------------------
00005C4C                            ; "TRY AGAIN" and "END"	screen main loop
00005C4C                            ; ---------------------------------------------------------------------------
00005C4C                            TryAg_MainLoop:
00005C4C 6100 B97A                  		bsr.w	PauseGame
00005C50 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005C56 6100 CF98                  		bsr.w	DelayProgram
00005C5A 4EB9 0000 0000             		jsr	ObjectsLoad
00005C60 4EB9 0000 0000             		jsr	BuildSprites
00005C66 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005C6C 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005C6E 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005C72 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005C74 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005C7A 67D0                       		beq.s	TryAg_MainLoop
00005C7C                            
00005C7C                            TryAg_Exit:
00005C7C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005C82 4E75                       		rts	
00005C84                            
00005C84                            ; ===========================================================================
00005C84                            ; ---------------------------------------------------------------------------
00005C84                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005C84                            ; ---------------------------------------------------------------------------
00005C84                            
00005C84                            Obj8B:					; XREF: Obj_Index
00005C84 7000                       		moveq	#0,d0
00005C86 1028 0024                  		move.b	$24(a0),d0
00005C8A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005C8E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005C92 4EF9 0000 0000             		jmp	DisplaySprite
00005C98                            ; ===========================================================================
00005C98 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005C9A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005C9C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005C9E 0000                       		dc.w loc_5A8E-Obj8B_Index
00005CA0                            ; ===========================================================================
00005CA0                            
00005CA0                            Obj8B_Main:				; XREF: Obj8B_Index
00005CA0 5428 0024                  		addq.b	#2,$24(a0)
00005CA4 317C 0120 0008             		move.w	#$120,8(a0)
00005CAA 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005CB0 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005CB8 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005CBE 117C 0000 0001             		move.b	#0,1(a0)
00005CC4 117C 0002 0018             		move.b	#2,$18(a0)
00005CCA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005CD0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005CD6 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005CD8 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005CDE 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005CE4 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005CEA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005CF0                            
00005CF0                            Obj8B_Animate:				; XREF: Obj8B_Index
00005CF0 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005CF6 4EF9 0000 0000             		jmp	AnimateSprite
00005CFC                            ; ===========================================================================
00005CFC                            
00005CFC                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005CFC 5428 0024                  		addq.b	#2,$24(a0)
00005D00 7002                       		moveq	#2,d0
00005D02 0828 0000 001C             		btst	#0,$1C(a0)
00005D08 6700                       		beq.s	loc_5A6A
00005D0A 4440                       		neg.w	d0
00005D0C                            
00005D0C                            loc_5A6A:
00005D0C 43F8 D800                  		lea	($FFFFD800).w,a1
00005D10 7205                       		moveq	#5,d1
00005D12                            
00005D12                            loc_5A70:
00005D12 1340 003E                  		move.b	d0,$3E(a1)
00005D16 3400                       		move.w	d0,d2
00005D18 E742                       		asl.w	#3,d2
00005D1A D529 0026                  		add.b	d2,$26(a1)
00005D1E 43E9 0040                  		lea	$40(a1),a1
00005D22 51C9 FFEE                  		dbf	d1,loc_5A70
00005D26 5228 001A                  		addq.b	#1,$1A(a0)
00005D2A 317C 0070 0030             		move.w	#112,$30(a0)
00005D30                            
00005D30                            loc_5A8E:				; XREF: Obj8B_Index
00005D30 5368 0030                  		subq.w	#1,$30(a0)
00005D34 6A00                       		bpl.s	locret_5AA0
00005D36 0868 0000 001C             		bchg	#0,$1C(a0)
00005D3C 117C 0002 0024             		move.b	#2,$24(a0)
00005D42                            
00005D42                            locret_5AA0:
00005D42 4E75                       		rts	
00005D44                            ; ===========================================================================
00005D44                            Ani_obj8B:
00005D44                            	include "_anim\obj8B.asm"
00005D44                            ; ---------------------------------------------------------------------------
00005D44                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005D44                            ; ---------------------------------------------------------------------------
00005D44 0000                       		dc.w byte_5AA8-Ani_obj8B
00005D46 0000                       		dc.w byte_5AAC-Ani_obj8B
00005D48 0000                       		dc.w byte_5AB0-Ani_obj8B
00005D4A 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005D4E 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005D52 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005D64                            		even
00005D64                            		even
00005D64                            
00005D64                            ; ===========================================================================
00005D64                            ; ---------------------------------------------------------------------------
00005D64                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005D64                            ; ---------------------------------------------------------------------------
00005D64                            
00005D64                            Obj8C:					; XREF: Obj_Index
00005D64 7000                       		moveq	#0,d0
00005D66 1028 0024                  		move.b	$24(a0),d0
00005D6A 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005D6E 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005D72 4EF9 0000 0000             		jmp	DisplaySprite
00005D78                            ; ===========================================================================
00005D78 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005D7A 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005D7C                            ; ===========================================================================
00005D7C                            
00005D7C                            Obj8C_Main:				; XREF: Obj8C_Index
00005D7C 2248                       		movea.l	a0,a1
00005D7E 7400                       		moveq	#0,d2
00005D80 7600                       		moveq	#0,d3
00005D82 7205                       		moveq	#5,d1
00005D84 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005D88                            
00005D88                            Obj8C_MakeEms:				; XREF: loc_5B42
00005D88 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005D8C 5429 0024                  		addq.b	#2,$24(a1)
00005D90 237C 0000 5A1C 0004        		move.l	#Map_obj88,4(a1)
00005D98 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005D9E 137C 0000 0001             		move.b	#0,1(a1)
00005DA4 137C 0001 0018             		move.b	#1,$18(a1)
00005DAA 337C 0104 0008             		move.w	#$104,8(a1)
00005DB0 337C 0120 0038             		move.w	#$120,$38(a1)
00005DB6 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005DBC 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005DC2 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005DC8 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005DCC                            
00005DCC                            Obj8C_ChkEms:
00005DCC 7000                       		moveq	#0,d0
00005DCE 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005DD2 5340                       		subq.w	#1,d0
00005DD4 6500                       		bcs.s	loc_5B42
00005DD6                            
00005DD6                            Obj8C_ChkEmLoop:
00005DD6 B433 0000                  		cmp.b	(a3,d0.w),d2
00005DDA 6600                       		bne.s	loc_5B3E
00005DDC 5202                       		addq.b	#1,d2
00005DDE 60EC                       		bra.s	Obj8C_ChkEms
00005DE0                            ; ===========================================================================
00005DE0                            
00005DE0                            loc_5B3E:
00005DE0 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005DE4                            
00005DE4                            loc_5B42:
00005DE4 1342 001A                  		move.b	d2,$1A(a1)
00005DE8 5229 001A                  		addq.b	#1,$1A(a1)
00005DEC 5202                       		addq.b	#1,d2
00005DEE 137C 0080 0026             		move.b	#$80,$26(a1)
00005DF4 1343 001E                  		move.b	d3,$1E(a1)
00005DF8 1343 001F                  		move.b	d3,$1F(a1)
00005DFC 0643 000A                  		addi.w	#$A,d3
00005E00 43E9 0040                  		lea	$40(a1),a1
00005E04 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005E08                            
00005E08                            Obj8C_Move:				; XREF: Obj8C_Index
00005E08 4A68 003E                  		tst.w	$3E(a0)
00005E0C 6700                       		beq.s	locret_5BBA
00005E0E 4A28 001E                  		tst.b	$1E(a0)
00005E12 6700                       		beq.s	loc_5B78
00005E14 5328 001E                  		subq.b	#1,$1E(a0)
00005E18 6600                       		bne.s	loc_5B80
00005E1A                            
00005E1A                            loc_5B78:
00005E1A 3028 003E                  		move.w	$3E(a0),d0
00005E1E D168 0026                  		add.w	d0,$26(a0)
00005E22                            
00005E22                            loc_5B80:
00005E22 1028 0026                  		move.b	$26(a0),d0
00005E26 6700                       		beq.s	loc_5B8C
00005E28 0C00 0080                  		cmpi.b	#$80,d0
00005E2C 6600                       		bne.s	loc_5B96
00005E2E                            
00005E2E                            loc_5B8C:
00005E2E 4268 003E                  		clr.w	$3E(a0)
00005E32 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005E38                            
00005E38                            loc_5B96:
00005E38 4EB9 0000 2C22             		jsr	(CalcSine).l
00005E3E 7800                       		moveq	#0,d4
00005E40 1828 003C                  		move.b	$3C(a0),d4
00005E44 C3C4                       		muls.w	d4,d1
00005E46 E081                       		asr.l	#8,d1
00005E48 C1C4                       		muls.w	d4,d0
00005E4A E080                       		asr.l	#8,d0
00005E4C D268 0038                  		add.w	$38(a0),d1
00005E50 D068 003A                  		add.w	$3A(a0),d0
00005E54 3141 0008                  		move.w	d1,8(a0)
00005E58 3140 000A                  		move.w	d0,$A(a0)
00005E5C                            
00005E5C                            locret_5BBA:
00005E5C 4E75                       		rts	
00005E5E                            ; ===========================================================================
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            Map_obj8B:
00005E5E                            	include "_maps\obj8B.asm"
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005E62 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005E66 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005E6A 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005E6E 08                         byte_5BCC:	dc.b 8
00005E6F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005E74 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005E79 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005E7E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005E83 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E88 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E8D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E92 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E97 08                         byte_5BF5:	dc.b 8
00005E98 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005E9D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005EA2 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005EA7 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005EAC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005EB1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005EB6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005EBB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005EC0 08                         byte_5C1E:	dc.b 8
00005EC1 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005EC6 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005ECB E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005ED0 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005ED5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005EDA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005EDF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005EE4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005EE9 08                         byte_5C47:	dc.b 8
00005EEA E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005EEF F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005EF4 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005EF9 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005EFE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F03 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F08 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F0D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F12 0C                         byte_5C70:	dc.b $C
00005F13 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005F18 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005F1D 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005F22 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005F27 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005F2C F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005F31 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005F36 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005F3B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005F40 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005F45 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F4A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F4F 0A                         byte_5CAD:	dc.b $A
00005F50 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005F55 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005F5A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005F5F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005F64 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005F69 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005F6E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F73 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F78 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005F7D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005F82 0A                         byte_5CE0:	dc.b $A
00005F83 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005F88 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005F8D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005F92 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005F97 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005F9C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005FA1 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005FA6 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005FAB 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005FB0 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005FB5 0C                         byte_5D13:	dc.b $C
00005FB6 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005FBB FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005FC0 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005FC5 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005FCA F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005FCF FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005FD4 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005FD9 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005FDE 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005FE3 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005FE8 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FED 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF2                            		even
00005FF2                            		even
00005FF2                            
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            ; Ending sequence demos
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006020                            		even
00006020                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006060                            		even
00006060                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006090                            		even
00006090                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000060C0                            		even
000060C0                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000060E0                            		even
000060E0                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006100                            		even
00006100                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006130                            		even
00006130                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006160                            		even
00006160                            
00006160                            ; ---------------------------------------------------------------------------
00006160                            ; Subroutine to	load level boundaries and start	locations
00006160                            ; ---------------------------------------------------------------------------
00006160                            
00006160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006160                            
00006160                            
00006160                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006160 7000                       		moveq	#0,d0
00006162 11C0 F740                  		move.b	d0,($FFFFF740).w
00006166 11C0 F741                  		move.b	d0,($FFFFF741).w
0000616A 11C0 F746                  		move.b	d0,($FFFFF746).w
0000616E 11C0 F748                  		move.b	d0,($FFFFF748).w
00006172 11C0 F742                  		move.b	d0,($FFFFF742).w
00006176 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000617A ED08                       		lsl.b	#6,d0
0000617C E848                       		lsr.w	#4,d0
0000617E 3200                       		move.w	d0,d1
00006180 D040                       		add.w	d0,d0
00006182 D041                       		add.w	d1,d0
00006184 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006188 3018                       		move.w	(a0)+,d0
0000618A 31C0 F730                  		move.w	d0,($FFFFF730).w
0000618E 2018                       		move.l	(a0)+,d0
00006190 21C0 F728                  		move.l	d0,($FFFFF728).w
00006194 21C0 F720                  		move.l	d0,($FFFFF720).w
00006198 2018                       		move.l	(a0)+,d0
0000619A 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000619E 21C0 F724                  		move.l	d0,($FFFFF724).w
000061A2 3038 F728                  		move.w	($FFFFF728).w,d0
000061A6 0640 0240                  		addi.w	#$240,d0
000061AA 31C0 F732                  		move.w	d0,($FFFFF732).w
000061AE 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000061B4 3018                       		move.w	(a0)+,d0
000061B6 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000061BA 6000 0000                  		bra.w	LevSz_ChkLamp
000061BE                            ; ===========================================================================
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            ; Level size array and ending start location array
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000630E                            		even
0000630E                            
0000630E                            EndingStLocArray:
0000630E                            		incbin	misc\sloc_end.bin
0000632E                            		even
0000632E                            
0000632E                            ; ===========================================================================
0000632E                            
0000632E                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000632E 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006332 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006334 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000633A 3238 D008                  		move.w	($FFFFD008).w,d1
0000633E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006342 6000                       		bra.s	loc_60D0
00006344                            ; ===========================================================================
00006344                            
00006344                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006344 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006348 ED08                       		lsl.b	#6,d0
0000634A E848                       		lsr.w	#4,d0
0000634C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006350 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006354 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006356 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000635A 5340                       		subq.w	#1,d0
0000635C E548                       		lsl.w	#2,d0
0000635E 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006362                            
00006362                            LevSz_SonicPos:
00006362 7200                       		moveq	#0,d1
00006364 3219                       		move.w	(a1)+,d1
00006366 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000636A 7000                       		moveq	#0,d0
0000636C 3011                       		move.w	(a1),d0
0000636E 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006372                            
00006372                            loc_60D0:				; XREF: LevSz_ChkLamp
00006372 0441 00A0                  		subi.w	#$A0,d1
00006376 6400                       		bcc.s	loc_60D8
00006378 7200                       		moveq	#0,d1
0000637A                            
0000637A                            loc_60D8:
0000637A 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000637E B242                       		cmp.w	d2,d1
00006380 6500                       		bcs.s	loc_60E2
00006382 3202                       		move.w	d2,d1
00006384                            
00006384                            loc_60E2:
00006384 31C1 F700                  		move.w	d1,($FFFFF700).w
00006388 0440 0060                  		subi.w	#$60,d0
0000638C 6400                       		bcc.s	loc_60EE
0000638E 7000                       		moveq	#0,d0
00006390                            
00006390                            loc_60EE:
00006390 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006394 6D00                       		blt.s	loc_60F8
00006396 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000639A                            
0000639A                            loc_60F8:
0000639A 31C0 F704                  		move.w	d0,($FFFFF704).w
0000639E 6100 0000                  		bsr.w	BgScrollSpeed
000063A2 7000                       		moveq	#0,d0
000063A4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063A8 E508                       		lsl.b	#2,d0
000063AA 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000063B0 6000 0000                  		bra.w	LevSz_Unk
000063B4                            ; ===========================================================================
000063B4                            ; ---------------------------------------------------------------------------
000063B4                            ; Sonic	start location array
000063B4                            ; ---------------------------------------------------------------------------
000063B4                            StartLocArray:	incbin	misc\sloc_lev.bin
00006424                            		even
00006424                            
00006424                            ; ---------------------------------------------------------------------------
00006424                            ; Which	256x256	tiles contain loops or roll-tunnels
00006424                            ; ---------------------------------------------------------------------------
00006424                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006424                            ; loop,	loop, tunnel, tunnel
00006424                            ; ---------------------------------------------------------------------------
00006424                            LoopTileNums:	incbin	misc\loopnums.bin
00006440                            		even
00006440                            
00006440                            ; ===========================================================================
00006440                            
00006440                            LevSz_Unk:				; XREF: LevelSizeLoad
00006440 7000                       		moveq	#0,d0
00006442 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006446 E748                       		lsl.w	#3,d0
00006448 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000644C 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006450 24D9                       		move.l	(a1)+,(a2)+
00006452 24D9                       		move.l	(a1)+,(a2)+
00006454 4E75                       		rts	
00006456                            ; End of function LevelSizeLoad
00006456                            
00006456                            ; ===========================================================================
00006456 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000645E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006466 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000646E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006476 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000647E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006486 0070 0100 0100 0100        		dc.l $700100, $1000100
0000648E                            
0000648E                            ; ---------------------------------------------------------------------------
0000648E                            ; Subroutine to	set scroll speed of some backgrounds
0000648E                            ; ---------------------------------------------------------------------------
0000648E                            
0000648E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000648E                            
0000648E                            
0000648E                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000648E 4A38 FE30                  		tst.b	($FFFFFE30).w
00006492 6600                       		bne.s	loc_6206
00006494 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006498 31C0 F714                  		move.w	d0,($FFFFF714).w
0000649C 31C1 F708                  		move.w	d1,($FFFFF708).w
000064A0 31C1 F710                  		move.w	d1,($FFFFF710).w
000064A4 31C1 F718                  		move.w	d1,($FFFFF718).w
000064A8                            
000064A8                            loc_6206:
000064A8 7400                       		moveq	#0,d2
000064AA 1438 FE10                  		move.b	($FFFFFE10).w,d2
000064AE D442                       		add.w	d2,d2
000064B0 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000064B4 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000064B8                            ; End of function BgScrollSpeed
000064B8                            
000064B8                            ; ===========================================================================
000064B8 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000064BC 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000064C0 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000064C4 0000                       		dc.w BgScroll_End-BgScroll_Index
000064C6                            ; ===========================================================================
000064C6                            
000064C6                            BgScroll_GHZ:				; XREF: BgScroll_Index
000064C6 6000 0000                  		bra.w	Deform_GHZ
000064CA                            ; ===========================================================================
000064CA                            
000064CA                            BgScroll_LZ:				; XREF: BgScroll_Index
000064CA E280                       		asr.l	#1,d0
000064CC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064D0 4E75                       		rts	
000064D2                            ; ===========================================================================
000064D2                            
000064D2                            BgScroll_MZ:				; XREF: BgScroll_Index
000064D2 4E75                       		rts	
000064D4                            ; ===========================================================================
000064D4                            
000064D4                            BgScroll_SLZ:				; XREF: BgScroll_Index
000064D4 E280                       		asr.l	#1,d0
000064D6 0640 00C0                  		addi.w	#$C0,d0
000064DA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064DE 4E75                       		rts	
000064E0                            ; ===========================================================================
000064E0                            
000064E0                            BgScroll_SYZ:				; XREF: BgScroll_Index
000064E0 E980                       		asl.l	#4,d0
000064E2 2400                       		move.l	d0,d2
000064E4 E380                       		asl.l	#1,d0
000064E6 D082                       		add.l	d2,d0
000064E8 E080                       		asr.l	#8,d0
000064EA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064EE 31C0 F714                  		move.w	d0,($FFFFF714).w
000064F2 4E75                       		rts	
000064F4                            ; ===========================================================================
000064F4                            
000064F4                            BgScroll_SBZ:				; XREF: BgScroll_Index
000064F4 E980                       		asl.l	#4,d0
000064F6 E380                       		asl.l	#1,d0
000064F8 E080                       		asr.l	#8,d0
000064FA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064FE 4E75                       		rts	
00006500                            ; ===========================================================================
00006500                            
00006500                            BgScroll_End:				; XREF: BgScroll_Index
00006500 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006506 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000650C 4E75                       		rts	
0000650E                            ; ===========================================================================
0000650E 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006514 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000651A 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006520 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006526 4E75                       		rts
00006528                            
00006528                            ; ---------------------------------------------------------------------------
00006528                            ; Background layer deformation subroutines
00006528                            ; ---------------------------------------------------------------------------
00006528                            
00006528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006528                            
00006528                            
00006528                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006528 4A38 F744                  		tst.b	($FFFFF744).w
0000652C 6700                       		beq.s	loc_628E
0000652E 4E75                       		rts	
00006530                            ; ===========================================================================
00006530                            
00006530                            loc_628E:
00006530 4278 F754                  		clr.w	($FFFFF754).w
00006534 4278 F756                  		clr.w	($FFFFF756).w
00006538 4278 F758                  		clr.w	($FFFFF758).w
0000653C 4278 F75A                  		clr.w	($FFFFF75A).w
00006540 6100 0000                  		bsr.w	ScrollHoriz
00006544 6100 0000                  		bsr.w	ScrollVertical
00006548 6100 0000                  		bsr.w	DynScrResizeLoad
0000654C 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006552 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006558 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000655E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006564 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000656A 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006570 7000                       		moveq	#0,d0
00006572 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006576 D040                       		add.w	d0,d0
00006578 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000657C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006580                            ; End of function DeformBgLayer
00006580                            
00006580                            ; ===========================================================================
00006580                            ; ---------------------------------------------------------------------------
00006580                            ; Offset index for background layer deformation	code
00006580                            ; ---------------------------------------------------------------------------
00006580 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006584 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006588 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000658C 0000                       		dc.w Deform_GHZ-Deform_Index
0000658E                            ; ---------------------------------------------------------------------------
0000658E                            ; Green	Hill Zone background layer deformation code
0000658E                            ; ---------------------------------------------------------------------------
0000658E                            
0000658E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000658E                            
0000658E                            
0000658E                            Deform_GHZ:				; XREF: Deform_Index
0000658E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006592 48C4                       		ext.l	d4
00006594 EB84                       		asl.l	#5,d4
00006596 2204                       		move.l	d4,d1
00006598 E384                       		asl.l	#1,d4
0000659A D881                       		add.l	d1,d4
0000659C 7A00                       		moveq	#0,d5
0000659E 6100 0000                  		bsr.w	ScrollBlock1
000065A2 6100 0000                  		bsr.w	ScrollBlock4
000065A6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000065AA 3038 F704                  		move.w	($FFFFF704).w,d0
000065AE 0240 07FF                  		andi.w	#$7FF,d0
000065B2 EA48                       		lsr.w	#5,d0
000065B4 4440                       		neg.w	d0
000065B6 0640 0026                  		addi.w	#$26,d0
000065BA 31C0 F714                  		move.w	d0,($FFFFF714).w
000065BE 3800                       		move.w	d0,d4
000065C0 6100 0000                  		bsr.w	ScrollBlock3
000065C4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065CA 323C 006F                  		move.w	#$6F,d1
000065CE 9244                       		sub.w	d4,d1
000065D0 3038 F700                  		move.w	($FFFFF700).w,d0
000065D4 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000065DA 6600                       		bne.s	loc_633C
000065DC 7000                       		moveq	#0,d0
000065DE                            
000065DE                            loc_633C:
000065DE 4440                       		neg.w	d0
000065E0 4840                       		swap	d0
000065E2 3038 F708                  		move.w	($FFFFF708).w,d0
000065E6 4440                       		neg.w	d0
000065E8                            
000065E8                            loc_6346:
000065E8 22C0                       		move.l	d0,(a1)+
000065EA 51C9 FFFC                  		dbf	d1,loc_6346
000065EE 323C 0027                  		move.w	#$27,d1
000065F2 3038 F710                  		move.w	($FFFFF710).w,d0
000065F6 4440                       		neg.w	d0
000065F8                            
000065F8                            loc_6356:
000065F8 22C0                       		move.l	d0,(a1)+
000065FA 51C9 FFFC                  		dbf	d1,loc_6356
000065FE 3038 F710                  		move.w	($FFFFF710).w,d0
00006602 0640 0000                  		addi.w	#0,d0
00006606 3438 F700                  		move.w	($FFFFF700).w,d2
0000660A 0642 FE00                  		addi.w	#-$200,d2
0000660E 9440                       		sub.w	d0,d2
00006610 48C2                       		ext.l	d2
00006612 E182                       		asl.l	#8,d2
00006614 85FC 0068                  		divs.w	#$68,d2
00006618 48C2                       		ext.l	d2
0000661A E182                       		asl.l	#8,d2
0000661C 7600                       		moveq	#0,d3
0000661E 3600                       		move.w	d0,d3
00006620 323C 0047                  		move.w	#$47,d1
00006624 D244                       		add.w	d4,d1
00006626                            
00006626                            loc_6384:
00006626 3003                       		move.w	d3,d0
00006628 4440                       		neg.w	d0
0000662A 22C0                       		move.l	d0,(a1)+
0000662C 4843                       		swap	d3
0000662E D682                       		add.l	d2,d3
00006630 4843                       		swap	d3
00006632 51C9 FFF2                  		dbf	d1,loc_6384
00006636 4E75                       		rts	
00006638                            ; End of function Deform_GHZ
00006638                            
00006638                            ; ---------------------------------------------------------------------------
00006638                            ; Labyrinth Zone background layer deformation code
00006638                            ; ---------------------------------------------------------------------------
00006638                            
00006638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006638                            
00006638                            
00006638                            Deform_LZ:				; XREF: Deform_Index
00006638 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000663C 48C4                       		ext.l	d4
0000663E EF84                       		asl.l	#7,d4
00006640 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006644 48C5                       		ext.l	d5
00006646 EF85                       		asl.l	#7,d5
00006648 6100 0000                  		bsr.w	ScrollBlock1
0000664C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006652 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006656 323C 00DF                  		move.w	#$DF,d1
0000665A 3038 F700                  		move.w	($FFFFF700).w,d0
0000665E 4440                       		neg.w	d0
00006660 4840                       		swap	d0
00006662 3038 F708                  		move.w	($FFFFF708).w,d0
00006666 4440                       		neg.w	d0
00006668                            
00006668                            loc_63C6:
00006668 22C0                       		move.l	d0,(a1)+
0000666A 51C9 FFFC                  		dbf	d1,loc_63C6
0000666E 3038 F646                  		move.w	($FFFFF646).w,d0
00006672 9078 F704                  		sub.w	($FFFFF704).w,d0
00006676 4E75                       		rts	
00006678                            ; End of function Deform_LZ
00006678                            
00006678                            ; ---------------------------------------------------------------------------
00006678                            ; Marble Zone background layer deformation code
00006678                            ; ---------------------------------------------------------------------------
00006678                            
00006678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006678                            
00006678                            
00006678                            Deform_MZ:				; XREF: Deform_Index
00006678 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000667C 48C4                       		ext.l	d4
0000667E ED84                       		asl.l	#6,d4
00006680 2204                       		move.l	d4,d1
00006682 E384                       		asl.l	#1,d4
00006684 D881                       		add.l	d1,d4
00006686 7A00                       		moveq	#0,d5
00006688 6100 0000                  		bsr.w	ScrollBlock1
0000668C 303C 0200                  		move.w	#$200,d0
00006690 3238 F704                  		move.w	($FFFFF704).w,d1
00006694 0441 01C8                  		subi.w	#$1C8,d1
00006698 6500                       		bcs.s	loc_6402
0000669A 3401                       		move.w	d1,d2
0000669C D241                       		add.w	d1,d1
0000669E D242                       		add.w	d2,d1
000066A0 E441                       		asr.w	#2,d1
000066A2 D041                       		add.w	d1,d0
000066A4                            
000066A4                            loc_6402:
000066A4 31C0 F714                  		move.w	d0,($FFFFF714).w
000066A8 6100 0000                  		bsr.w	ScrollBlock3
000066AC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066B2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066B6 323C 00DF                  		move.w	#$DF,d1
000066BA 3038 F700                  		move.w	($FFFFF700).w,d0
000066BE 4440                       		neg.w	d0
000066C0 4840                       		swap	d0
000066C2 3038 F708                  		move.w	($FFFFF708).w,d0
000066C6 4440                       		neg.w	d0
000066C8                            
000066C8                            loc_6426:
000066C8 22C0                       		move.l	d0,(a1)+
000066CA 51C9 FFFC                  		dbf	d1,loc_6426
000066CE 4E75                       		rts	
000066D0                            ; End of function Deform_MZ
000066D0                            
000066D0                            ; ---------------------------------------------------------------------------
000066D0                            ; Star Light Zone background layer deformation code
000066D0                            ; ---------------------------------------------------------------------------
000066D0                            
000066D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066D0                            
000066D0                            
000066D0                            Deform_SLZ:				; XREF: Deform_Index
000066D0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066D4 48C4                       		ext.l	d4
000066D6 EB84                       		asl.l	#5,d4
000066D8 2204                       		move.l	d4,d1
000066DA E384                       		asl.l	#1,d4
000066DC D881                       		add.l	d1,d4
000066DE 7A00                       		moveq	#0,d5
000066E0 6100 0000                  		bsr.w	ScrollBlock1
000066E4 6100 0000                  		bsr.w	ScrollBlock3
000066E8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066EC                            	;	move.w	($FFFFF704).w,d0
000066EC                            	;	andi.w	#$7FF,d0
000066EC EA48                       		lsr.w	#5,d0
000066EE 4440                       		neg.w	d0
000066F0 0640 0026                  		addi.w	#$26,d0
000066F4 31C0 F714                  		move.w	d0,($FFFFF714).w
000066F8 3800                       		move.w	d0,d4
000066FA                            	;	bsr.w	ScrollBlock3
000066FA 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006700 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006704                            
00006704 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006708 4440                       		neg.w	d0			; negate (positive to negative)
0000670A 4840                       		swap	d0			; send to the left side of d0
0000670C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006710 45F8 A800                  		lea	($FFFFA800).w,a2
00006714 069A 0000 5000             		addi.l	#$5000,(a2)+
0000671A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006720 3038 A800                  		move.w	($FFFFA800).w,d0
00006724 4440                       		neg.w	d0			; negate (positive to negative)
00006726 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006728 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000672C                            slz_DeformLoop_1:
0000672C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000672E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006732                            
00006732 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006736 4440                       		neg.w	d0			; negate (positive to negative)
00006738 4840                       		swap	d0			; send to the left side of d0
0000673A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000673E 45F8 A800                  		lea	($FFFFA800).w,a2
00006742 069A 0000 5000             		addi.l	#$5000,(a2)+
00006748 069A 0000 C000             		addi.l	#$C000,(a2)+
0000674E 3038 A800                  		move.w	($FFFFA800).w,d0
00006752 4440                       		neg.w	d0			; negate (positive to negative)
00006754 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006756 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000675A                            slz_DeformLoop_2:
0000675A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000675C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006760                            
00006760 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006764 4440                       		neg.w	d0			; negate (positive to negative)
00006766 4840                       		swap	d0			; send to the left side of d0
00006768 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000676C 45F8 A800                  		lea	($FFFFA800).w,a2
00006770 069A 0000 5000             		addi.l	#$5000,(a2)+
00006776 069A 0000 C000             		addi.l	#$C000,(a2)+
0000677C 3038 A800                  		move.w	($FFFFA800).w,d0
00006780 4440                       		neg.w	d0			; negate (positive to negative)
00006782 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006784 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006788                            slz_DeformLoop_3:
00006788 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000678A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000678E                            
0000678E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006792 4440                       		neg.w	d0			; negate (positive to negative)
00006794 4840                       		swap	d0			; send to the left side of d0
00006796 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000679A 45F8 A800                  		lea	($FFFFA800).w,a2
0000679E 069A 0000 5000             		addi.l	#$5000,(a2)+
000067A4 069A 0000 C000             		addi.l	#$C000,(a2)+
000067AA 3038 A800                  		move.w	($FFFFA800).w,d0
000067AE 4440                       		neg.w	d0			; negate (positive to negative)
000067B0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000067B2 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067B6                            slz_DeformLoop_4:
000067B6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067B8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000067BC                            
000067BC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067C0 4440                       		neg.w	d0			; negate (positive to negative)
000067C2 4840                       		swap	d0			; send to the left side of d0
000067C4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067C8 45F8 A800                  		lea	($FFFFA800).w,a2
000067CC 069A 0000 5000             		addi.l	#$5000,(a2)+
000067D2 069A 0000 C000             		addi.l	#$C000,(a2)+
000067D8 3038 A800                  		move.w	($FFFFA800).w,d0
000067DC 4440                       		neg.w	d0			; negate (positive to negative)
000067DE E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000067E0 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067E4                            slz_DeformLoop_5:
000067E4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067E6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000067EA                            
000067EA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067EE 4440                       		neg.w	d0			; negate (positive to negative)
000067F0 4840                       		swap	d0			; send to the left side of d0
000067F2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000067FA 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_6:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 4440                       		neg.w	d0			; negate (positive to negative)
00006812 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006814 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006818                            slz_DeformLoop_7:
00006818 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000681A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
0000681E                            
0000681E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006822 4440                       		neg.w	d0			; negate (positive to negative)
00006824 4840                       		swap	d0			; send to the left side of d0
00006826 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000682A 4440                       		neg.w	d0			; negate (positive to negative)
0000682C EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
0000682E 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006832                            slz_DeformLoop_8:
00006832 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006834 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006838                            
00006838 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000683C 4440                       		neg.w	d0			; negate (positive to negative)
0000683E 4840                       		swap	d0			; send to the left side of d0
00006840 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006844 4440                       		neg.w	d0			; negate (positive to negative)
00006846 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006848 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000684C                            slz_DeformLoop_9:
0000684C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000684E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006852                            
00006852 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006856 4440                       		neg.w	d0			; negate (positive to negative)
00006858 4840                       		swap	d0			; send to the left side of d0
0000685A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000685E 4440                       		neg.w	d0			; negate (positive to negative)
00006860 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006862 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006866                            slz_DeformLoop_10:
00006866 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006868 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
0000686C                            
0000686C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006870 4440                       		neg.w	d0			; negate (positive to negative)
00006872 4840                       		swap	d0			; send to the left side of d0
00006874 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006878 4440                       		neg.w	d0			; negate (positive to negative)
0000687A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000687C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006880                            slz_DeformLoop_11:
00006880 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006882 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006886                            
00006886 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000688A 4440                       		neg.w	d0			; negate (positive to negative)
0000688C 4840                       		swap	d0			; send to the left side of d0
0000688E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006896 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000689A                            slz_DeformLoop_12:
0000689A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000689C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000068A0                            
000068A0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068A4 4440                       		neg.w	d0			; negate (positive to negative)
000068A6 4840                       		swap	d0			; send to the left side of d0
000068A8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000068B0 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068B4                            slz_DeformLoop_13:
000068B4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068B6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000068BA 4E75                       		rts	
000068BC                            ; End of function Deform_SLZ
000068BC 4E75                       		rts	
000068BE                            ; End of function Deform_SLZ_2
000068BE                            
000068BE                            ; ---------------------------------------------------------------------------
000068BE                            ; Spring Yard Zone background layer deformation	code
000068BE                            ; ---------------------------------------------------------------------------
000068BE                            
000068BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068BE                            
000068BE                            
000068BE                            Deform_SYZ:				; XREF: Deform_Index
000068BE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068C2 48C4                       		ext.l	d4
000068C4 ED84                       		asl.l	#6,d4
000068C6 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068CA 48C5                       		ext.l	d5
000068CC E985                       		asl.l	#4,d5
000068CE 2205                       		move.l	d5,d1
000068D0 E385                       		asl.l	#1,d5
000068D2 DA81                       		add.l	d1,d5
000068D4 6100 0000                  		bsr.w	ScrollBlock1
000068D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068DE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068E2 323C 00DF                  		move.w	#$DF,d1
000068E6 3038 F700                  		move.w	($FFFFF700).w,d0
000068EA 4440                       		neg.w	d0
000068EC 4840                       		swap	d0
000068EE 3038 F708                  		move.w	($FFFFF708).w,d0
000068F2 4440                       		neg.w	d0
000068F4                            
000068F4                            loc_653C:
000068F4 22C0                       		move.l	d0,(a1)+
000068F6 51C9 FFFC                  		dbf	d1,loc_653C
000068FA 4E75                       		rts	
000068FC                            ; End of function Deform_SYZ
000068FC                            
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            ; Scrap	Brain Zone background layer deformation	code
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            
000068FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068FC                            
000068FC                            
000068FC                            Deform_SBZ:				; XREF: Deform_Index
000068FC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006900 48C4                       		ext.l	d4
00006902 ED84                       		asl.l	#6,d4
00006904 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006908 48C5                       		ext.l	d5
0000690A E985                       		asl.l	#4,d5
0000690C E385                       		asl.l	#1,d5
0000690E 6100 0000                  		bsr.w	ScrollBlock1
00006912 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006918 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000691C 323C 00DF                  		move.w	#$DF,d1
00006920 3038 F700                  		move.w	($FFFFF700).w,d0
00006924 4440                       		neg.w	d0
00006926 4840                       		swap	d0
00006928 3038 F708                  		move.w	($FFFFF708).w,d0
0000692C 4440                       		neg.w	d0
0000692E                            
0000692E                            loc_6576:
0000692E 22C0                       		move.l	d0,(a1)+
00006930 51C9 FFFC                  		dbf	d1,loc_6576
00006934 4E75                       		rts	
00006936                            ; End of function Deform_SBZ
00006936                            
00006936                            ; ---------------------------------------------------------------------------
00006936                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006936                            ; ---------------------------------------------------------------------------
00006936                            
00006936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006936                            
00006936                            
00006936                            ScrollHoriz:				; XREF: DeformBgLayer
00006936 3838 F700                  		move.w	($FFFFF700).w,d4
0000693A 6100                       		bsr.s	ScrollHoriz2
0000693C 3038 F700                  		move.w	($FFFFF700).w,d0
00006940 0240 0010                  		andi.w	#$10,d0
00006944 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006948 B300                       		eor.b	d1,d0
0000694A 6600                       		bne.s	locret_65B0
0000694C 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006952 3038 F700                  		move.w	($FFFFF700).w,d0
00006956 9044                       		sub.w	d4,d0
00006958 6A00                       		bpl.s	loc_65AA
0000695A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006960 4E75                       		rts	
00006962                            ; ===========================================================================
00006962                            
00006962                            loc_65AA:
00006962 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006968                            
00006968                            locret_65B0:
00006968 4E75                       		rts	
0000696A                            ; End of function ScrollHoriz
0000696A                            
0000696A                            
0000696A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000696A                            
0000696A                            
0000696A                            ScrollHoriz2:				; XREF: ScrollHoriz
0000696A 3038 D008                  		move.w	($FFFFD008).w,d0
0000696E 9078 F700                  		sub.w	($FFFFF700).w,d0
00006972 0440 0090                  		subi.w	#$90,d0
00006976 6500                       		bcs.s	loc_65F6
00006978 0440 0010                  		subi.w	#$10,d0
0000697C 6400                       		bcc.s	loc_65CC
0000697E 4278 F73A                  		clr.w	($FFFFF73A).w
00006982 4E75                       		rts	
00006984                            ; ===========================================================================
00006984                            
00006984                            loc_65CC:
00006984 0C40 0010                  		cmpi.w	#$10,d0
00006988 6500                       		bcs.s	loc_65D6
0000698A 303C 0010                  		move.w	#$10,d0
0000698E                            
0000698E                            loc_65D6:
0000698E D078 F700                  		add.w	($FFFFF700).w,d0
00006992 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006996 6D00                       		blt.s	loc_65E4
00006998 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000699C                            
0000699C                            loc_65E4:
0000699C 3200                       		move.w	d0,d1
0000699E 9278 F700                  		sub.w	($FFFFF700).w,d1
000069A2 E141                       		asl.w	#8,d1
000069A4 31C0 F700                  		move.w	d0,($FFFFF700).w
000069A8 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000069AC 4E75                       		rts	
000069AE                            ; ===========================================================================
000069AE                            
000069AE                            loc_65F6:				; XREF: ScrollHoriz2
000069AE D078 F700                  		add.w	($FFFFF700).w,d0
000069B2 B078 F728                  		cmp.w	($FFFFF728).w,d0
000069B6 6EE4                       		bgt.s	loc_65E4
000069B8 3038 F728                  		move.w	($FFFFF728).w,d0
000069BC 60DE                       		bra.s	loc_65E4
000069BE                            ; End of function ScrollHoriz2
000069BE                            
000069BE                            ; ===========================================================================
000069BE 4A40                       		tst.w	d0
000069C0 6A00                       		bpl.s	loc_6610
000069C2 303C FFFE                  		move.w	#-2,d0
000069C6 60E6                       		bra.s	loc_65F6
000069C8                            ; ===========================================================================
000069C8                            
000069C8                            loc_6610:
000069C8 303C 0002                  		move.w	#2,d0
000069CC 60B6                       		bra.s	loc_65CC
000069CE                            
000069CE                            ; ---------------------------------------------------------------------------
000069CE                            ; Subroutine to	scroll the level vertically as Sonic moves
000069CE                            ; ---------------------------------------------------------------------------
000069CE                            
000069CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069CE                            
000069CE                            
000069CE                            ScrollVertical:				; XREF: DeformBgLayer
000069CE 7200                       		moveq	#0,d1
000069D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000069D4 9078 F704                  		sub.w	($FFFFF704).w,d0
000069D8 0838 0002 D022             		btst	#2,($FFFFD022).w
000069DE 6700                       		beq.s	loc_662A
000069E0 5B40                       		subq.w	#5,d0
000069E2                            
000069E2                            loc_662A:
000069E2 0838 0001 D022             		btst	#1,($FFFFD022).w
000069E8 6700                       		beq.s	loc_664A
000069EA 0640 0020                  		addi.w	#$20,d0
000069EE 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000069F2 6500                       		bcs.s	loc_6696
000069F4 0440 0040                  		subi.w	#$40,d0
000069F8 6400                       		bcc.s	loc_6696
000069FA 4A38 F75C                  		tst.b	($FFFFF75C).w
000069FE 6600                       		bne.s	loc_66A8
00006A00 6000                       		bra.s	loc_6656
00006A02                            ; ===========================================================================
00006A02                            
00006A02                            loc_664A:
00006A02 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A06 6600                       		bne.s	loc_665C
00006A08 4A38 F75C                  		tst.b	($FFFFF75C).w
00006A0C 6600                       		bne.s	loc_66A8
00006A0E                            
00006A0E                            loc_6656:
00006A0E 4278 F73C                  		clr.w	($FFFFF73C).w
00006A12 4E75                       		rts	
00006A14                            ; ===========================================================================
00006A14                            
00006A14                            loc_665C:
00006A14 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006A1A 6600                       		bne.s	loc_6684
00006A1C 3238 D014                  		move.w	($FFFFD014).w,d1
00006A20 6A00                       		bpl.s	loc_666C
00006A22 4441                       		neg.w	d1
00006A24                            
00006A24                            loc_666C:
00006A24 0C41 0800                  		cmpi.w	#$800,d1
00006A28 6400                       		bcc.s	loc_6696
00006A2A 323C 0600                  		move.w	#$600,d1
00006A2E 0C40 0006                  		cmpi.w	#6,d0
00006A32 6E00                       		bgt.s	loc_66F6
00006A34 0C40 FFFA                  		cmpi.w	#-6,d0
00006A38 6D00                       		blt.s	loc_66C0
00006A3A 6000                       		bra.s	loc_66AE
00006A3C                            ; ===========================================================================
00006A3C                            
00006A3C                            loc_6684:
00006A3C 323C 0200                  		move.w	#$200,d1
00006A40 0C40 0002                  		cmpi.w	#2,d0
00006A44 6E00                       		bgt.s	loc_66F6
00006A46 0C40 FFFE                  		cmpi.w	#-2,d0
00006A4A 6D00                       		blt.s	loc_66C0
00006A4C 6000                       		bra.s	loc_66AE
00006A4E                            ; ===========================================================================
00006A4E                            
00006A4E                            loc_6696:
00006A4E 323C 1000                  		move.w	#$1000,d1
00006A52 0C40 0010                  		cmpi.w	#$10,d0
00006A56 6E00                       		bgt.s	loc_66F6
00006A58 0C40 FFF0                  		cmpi.w	#-$10,d0
00006A5C 6D00                       		blt.s	loc_66C0
00006A5E 6000                       		bra.s	loc_66AE
00006A60                            ; ===========================================================================
00006A60                            
00006A60                            loc_66A8:
00006A60 7000                       		moveq	#0,d0
00006A62 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006A66                            
00006A66                            loc_66AE:
00006A66 7200                       		moveq	#0,d1
00006A68 3200                       		move.w	d0,d1
00006A6A D278 F704                  		add.w	($FFFFF704).w,d1
00006A6E 4A40                       		tst.w	d0
00006A70 6A00 0000                  		bpl.w	loc_6700
00006A74 6000 0000                  		bra.w	loc_66CC
00006A78                            ; ===========================================================================
00006A78                            
00006A78                            loc_66C0:
00006A78 4441                       		neg.w	d1
00006A7A 48C1                       		ext.l	d1
00006A7C E181                       		asl.l	#8,d1
00006A7E D2B8 F704                  		add.l	($FFFFF704).w,d1
00006A82 4841                       		swap	d1
00006A84                            
00006A84                            loc_66CC:
00006A84 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006A88 6E00                       		bgt.s	loc_6724
00006A8A 0C41 FF00                  		cmpi.w	#-$100,d1
00006A8E 6E00                       		bgt.s	loc_66F0
00006A90 0241 07FF                  		andi.w	#$7FF,d1
00006A94 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006A9A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006AA0 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006AA6 6000                       		bra.s	loc_6724
00006AA8                            ; ===========================================================================
00006AA8                            
00006AA8                            loc_66F0:
00006AA8 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006AAC 6000                       		bra.s	loc_6724
00006AAE                            ; ===========================================================================
00006AAE                            
00006AAE                            loc_66F6:
00006AAE 48C1                       		ext.l	d1
00006AB0 E181                       		asl.l	#8,d1
00006AB2 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006AB6 4841                       		swap	d1
00006AB8                            
00006AB8                            loc_6700:
00006AB8 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006ABC 6D00                       		blt.s	loc_6724
00006ABE 0441 0800                  		subi.w	#$800,d1
00006AC2 6500                       		bcs.s	loc_6720
00006AC4 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006ACA 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006AD0 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006AD6 6000                       		bra.s	loc_6724
00006AD8                            ; ===========================================================================
00006AD8                            
00006AD8                            loc_6720:
00006AD8 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006ADC                            
00006ADC                            loc_6724:
00006ADC 3838 F704                  		move.w	($FFFFF704).w,d4
00006AE0 4841                       		swap	d1
00006AE2 2601                       		move.l	d1,d3
00006AE4 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006AE8 E09B                       		ror.l	#8,d3
00006AEA 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006AEE 21C1 F704                  		move.l	d1,($FFFFF704).w
00006AF2 3038 F704                  		move.w	($FFFFF704).w,d0
00006AF6 0240 0010                  		andi.w	#$10,d0
00006AFA 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006AFE B300                       		eor.b	d1,d0
00006B00 6600                       		bne.s	locret_6766
00006B02 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006B08 3038 F704                  		move.w	($FFFFF704).w,d0
00006B0C 9044                       		sub.w	d4,d0
00006B0E 6A00                       		bpl.s	loc_6760
00006B10 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006B16 4E75                       		rts	
00006B18                            ; ===========================================================================
00006B18                            
00006B18                            loc_6760:
00006B18 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006B1E                            
00006B1E                            locret_6766:
00006B1E 4E75                       		rts	
00006B20                            ; End of function ScrollVertical
00006B20                            
00006B20                            
00006B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B20                            
00006B20                            
00006B20                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006B20 2438 F708                  		move.l	($FFFFF708).w,d2
00006B24 2002                       		move.l	d2,d0
00006B26 D084                       		add.l	d4,d0
00006B28 21C0 F708                  		move.l	d0,($FFFFF708).w
00006B2C 2200                       		move.l	d0,d1
00006B2E 4841                       		swap	d1
00006B30 0241 0010                  		andi.w	#$10,d1
00006B34 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006B38 B701                       		eor.b	d3,d1
00006B3A 6600                       		bne.s	loc_679C
00006B3C 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006B42 9082                       		sub.l	d2,d0
00006B44 6A00                       		bpl.s	loc_6796
00006B46 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006B4C 6000                       		bra.s	loc_679C
00006B4E                            ; ===========================================================================
00006B4E                            
00006B4E                            loc_6796:
00006B4E 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006B54                            
00006B54                            loc_679C:
00006B54 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006B58 2003                       		move.l	d3,d0
00006B5A D085                       		add.l	d5,d0
00006B5C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006B60 2200                       		move.l	d0,d1
00006B62 4841                       		swap	d1
00006B64 0241 0010                  		andi.w	#$10,d1
00006B68 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006B6C B501                       		eor.b	d2,d1
00006B6E 6600                       		bne.s	locret_67D0
00006B70 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006B76 9083                       		sub.l	d3,d0
00006B78 6A00                       		bpl.s	loc_67CA
00006B7A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006B80 4E75                       		rts	
00006B82                            ; ===========================================================================
00006B82                            
00006B82                            loc_67CA:
00006B82 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006B88                            
00006B88                            locret_67D0:
00006B88 4E75                       		rts	
00006B8A                            ; End of function ScrollBlock1
00006B8A                            
00006B8A                            
00006B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B8A                            
00006B8A                            
00006B8A                            ScrollBlock2:				; XREF: Deform_SLZ
00006B8A 2438 F708                  		move.l	($FFFFF708).w,d2
00006B8E 2002                       		move.l	d2,d0
00006B90 D084                       		add.l	d4,d0
00006B92 21C0 F708                  		move.l	d0,($FFFFF708).w
00006B96 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006B9A 2003                       		move.l	d3,d0
00006B9C D085                       		add.l	d5,d0
00006B9E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006BA2 2200                       		move.l	d0,d1
00006BA4 4841                       		swap	d1
00006BA6 0241 0010                  		andi.w	#$10,d1
00006BAA 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006BAE B501                       		eor.b	d2,d1
00006BB0 6600                       		bne.s	locret_6812
00006BB2 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006BB8 9083                       		sub.l	d3,d0
00006BBA 6A00                       		bpl.s	loc_680C
00006BBC 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006BC2 4E75                       		rts	
00006BC4                            ; ===========================================================================
00006BC4                            
00006BC4                            loc_680C:
00006BC4 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006BCA                            
00006BCA                            locret_6812:
00006BCA 4E75                       		rts	
00006BCC                            ; End of function ScrollBlock2
00006BCC                            
00006BCC                            
00006BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BCC                            
00006BCC                            
00006BCC                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006BCC 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006BD0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006BD4 3200                       		move.w	d0,d1
00006BD6 0241 0010                  		andi.w	#$10,d1
00006BDA 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006BDE B501                       		eor.b	d2,d1
00006BE0 6600                       		bne.s	locret_6842
00006BE2 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006BE8 9043                       		sub.w	d3,d0
00006BEA 6A00                       		bpl.s	loc_683C
00006BEC 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006BF2 4E75                       		rts	
00006BF4                            ; ===========================================================================
00006BF4                            
00006BF4                            loc_683C:
00006BF4 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006BFA                            
00006BFA                            locret_6842:
00006BFA 4E75                       		rts	
00006BFC                            ; End of function ScrollBlock3
00006BFC                            
00006BFC                            
00006BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BFC                            
00006BFC                            
00006BFC                            ScrollBlock4:				; XREF: Deform_GHZ
00006BFC 3438 F710                  		move.w	($FFFFF710).w,d2
00006C00 3638 F714                  		move.w	($FFFFF714).w,d3
00006C04 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006C08 48C0                       		ext.l	d0
00006C0A EF80                       		asl.l	#7,d0
00006C0C D1B8 F710                  		add.l	d0,($FFFFF710).w
00006C10 3038 F710                  		move.w	($FFFFF710).w,d0
00006C14 0240 0010                  		andi.w	#$10,d0
00006C18 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006C1C B300                       		eor.b	d1,d0
00006C1E 6600                       		bne.s	locret_6884
00006C20 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006C26 3038 F710                  		move.w	($FFFFF710).w,d0
00006C2A 9042                       		sub.w	d2,d0
00006C2C 6A00                       		bpl.s	loc_687E
00006C2E 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006C34 6000                       		bra.s	locret_6884
00006C36                            ; ===========================================================================
00006C36                            
00006C36                            loc_687E:
00006C36 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006C3C                            
00006C3C                            locret_6884:
00006C3C 4E75                       		rts	
00006C3E                            ; End of function ScrollBlock4
00006C3E                            
00006C3E                            
00006C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C3E                            
00006C3E                            
00006C3E                            sub_6886:				; XREF: loc_C44
00006C3E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006C44 4DF9 00C0 0000             		lea	($C00000).l,a6
00006C4A 45F8 F756                  		lea	($FFFFF756).w,a2
00006C4E 47F8 F708                  		lea	($FFFFF708).w,a3
00006C52 49F8 A440                  		lea	($FFFFA440).w,a4
00006C56 343C 6000                  		move.w	#$6000,d2
00006C5A 6100 0000                  		bsr.w	sub_6954
00006C5E 45F8 F758                  		lea	($FFFFF758).w,a2
00006C62 47F8 F710                  		lea	($FFFFF710).w,a3
00006C66 6000 0000                  		bra.w	sub_69F4
00006C6A                            ; End of function sub_6886
00006C6A                            
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            ; Subroutine to	display	correct	tiles as you move
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            
00006C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C6A                            
00006C6A                            
00006C6A                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006C6A 4BF9 00C0 0004             		lea	($C00004).l,a5
00006C70 4DF9 00C0 0000             		lea	($C00000).l,a6
00006C76 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006C7A 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006C7E 49F8 A440                  		lea	($FFFFA440).w,a4
00006C82 343C 6000                  		move.w	#$6000,d2
00006C86 6100 0000                  		bsr.w	sub_6954
00006C8A 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006C8E 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006C92 6100 0000                  		bsr.w	sub_69F4
00006C96 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006C9A 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006C9E 49F8 A400                  		lea	($FFFFA400).w,a4
00006CA2 343C 4000                  		move.w	#$4000,d2
00006CA6 4A12                       		tst.b	(a2)
00006CA8 6700                       		beq.s	locret_6952
00006CAA 0892 0000                  		bclr	#0,(a2)
00006CAE 6700                       		beq.s	loc_6908
00006CB0 78F0                       		moveq	#-$10,d4
00006CB2 7AF0                       		moveq	#-$10,d5
00006CB4 6100 0000                  		bsr.w	sub_6C20
00006CB8 78F0                       		moveq	#-$10,d4
00006CBA 7AF0                       		moveq	#-$10,d5
00006CBC 6100 0000                  		bsr.w	sub_6AD8
00006CC0                            
00006CC0                            loc_6908:
00006CC0 0892 0001                  		bclr	#1,(a2)
00006CC4 6700                       		beq.s	loc_6922
00006CC6 383C 00E0                  		move.w	#$E0,d4
00006CCA 7AF0                       		moveq	#-$10,d5
00006CCC 6100 0000                  		bsr.w	sub_6C20
00006CD0 383C 00E0                  		move.w	#$E0,d4
00006CD4 7AF0                       		moveq	#-$10,d5
00006CD6 6100 0000                  		bsr.w	sub_6AD8
00006CDA                            
00006CDA                            loc_6922:
00006CDA 0892 0002                  		bclr	#2,(a2)
00006CDE 6700                       		beq.s	loc_6938
00006CE0 78F0                       		moveq	#-$10,d4
00006CE2 7AF0                       		moveq	#-$10,d5
00006CE4 6100 0000                  		bsr.w	sub_6C20
00006CE8 78F0                       		moveq	#-$10,d4
00006CEA 7AF0                       		moveq	#-$10,d5
00006CEC 6100 0000                  		bsr.w	sub_6B04
00006CF0                            
00006CF0                            loc_6938:
00006CF0 0892 0003                  		bclr	#3,(a2)
00006CF4 6700                       		beq.s	locret_6952
00006CF6 78F0                       		moveq	#-$10,d4
00006CF8 3A3C 0140                  		move.w	#$140,d5
00006CFC 6100 0000                  		bsr.w	sub_6C20
00006D00 78F0                       		moveq	#-$10,d4
00006D02 3A3C 0140                  		move.w	#$140,d5
00006D06 6100 0000                  		bsr.w	sub_6B04
00006D0A                            
00006D0A                            locret_6952:
00006D0A 4E75                       		rts	
00006D0C                            ; End of function LoadTilesAsYouMove
00006D0C                            
00006D0C                            
00006D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0C                            
00006D0C                            
00006D0C                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006D0C 4A12                       		tst.b	(a2)
00006D0E 6700 0000                  		beq.w	locret_69F2
00006D12 0892 0000                  		bclr	#0,(a2)
00006D16 6700                       		beq.s	loc_6972
00006D18 78F0                       		moveq	#-$10,d4
00006D1A 7AF0                       		moveq	#-$10,d5
00006D1C 6100 0000                  		bsr.w	sub_6C20
00006D20 78F0                       		moveq	#-$10,d4
00006D22 7AF0                       		moveq	#-$10,d5
00006D24 7C1F                       		moveq	#$1F,d6
00006D26 6100 0000                  		bsr.w	sub_6ADA
00006D2A                            
00006D2A                            loc_6972:
00006D2A 0892 0001                  		bclr	#1,(a2)
00006D2E 6700                       		beq.s	loc_698E
00006D30 383C 00E0                  		move.w	#$E0,d4
00006D34 7AF0                       		moveq	#-$10,d5
00006D36 6100 0000                  		bsr.w	sub_6C20
00006D3A 383C 00E0                  		move.w	#$E0,d4
00006D3E 7AF0                       		moveq	#-$10,d5
00006D40 7C1F                       		moveq	#$1F,d6
00006D42 6100 0000                  		bsr.w	sub_6ADA
00006D46                            
00006D46                            loc_698E:
00006D46 0892 0002                  		bclr	#2,(a2)
00006D4A 6700                       		beq.s	loc_69BE
00006D4C 78F0                       		moveq	#-$10,d4
00006D4E 7AF0                       		moveq	#-$10,d5
00006D50 6100 0000                  		bsr.w	sub_6C20
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006D5C 322B 0004                  		move.w	4(a3),d1
00006D60 0241 FFF0                  		andi.w	#-$10,d1
00006D64 9C41                       		sub.w	d1,d6
00006D66 6D00                       		blt.s	loc_69BE
00006D68 E84E                       		lsr.w	#4,d6
00006D6A 0C46 000F                  		cmpi.w	#$F,d6
00006D6E 6500                       		bcs.s	loc_69BA
00006D70 7C0F                       		moveq	#$F,d6
00006D72                            
00006D72                            loc_69BA:
00006D72 6100 0000                  		bsr.w	sub_6B06
00006D76                            
00006D76                            loc_69BE:
00006D76 0892 0003                  		bclr	#3,(a2)
00006D7A 6700                       		beq.s	locret_69F2
00006D7C 78F0                       		moveq	#-$10,d4
00006D7E 3A3C 0140                  		move.w	#$140,d5
00006D82 6100 0000                  		bsr.w	sub_6C20
00006D86 78F0                       		moveq	#-$10,d4
00006D88 3A3C 0140                  		move.w	#$140,d5
00006D8C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006D90 322B 0004                  		move.w	4(a3),d1
00006D94 0241 FFF0                  		andi.w	#-$10,d1
00006D98 9C41                       		sub.w	d1,d6
00006D9A 6D00                       		blt.s	locret_69F2
00006D9C E84E                       		lsr.w	#4,d6
00006D9E 0C46 000F                  		cmpi.w	#$F,d6
00006DA2 6500                       		bcs.s	loc_69EE
00006DA4 7C0F                       		moveq	#$F,d6
00006DA6                            
00006DA6                            loc_69EE:
00006DA6 6100 0000                  		bsr.w	sub_6B06
00006DAA                            
00006DAA                            locret_69F2:
00006DAA 4E75                       		rts	
00006DAC                            ; End of function sub_6954
00006DAC                            
00006DAC                            
00006DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DAC                            
00006DAC                            
00006DAC                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006DAC 4A12                       		tst.b	(a2)
00006DAE 6700 0000                  		beq.w	locret_6A80
00006DB2 0892 0002                  		bclr	#2,(a2)
00006DB6 6700                       		beq.s	loc_6A3E
00006DB8 0C53 0010                  		cmpi.w	#$10,(a3)
00006DBC 6500                       		bcs.s	loc_6A3E
00006DBE 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006DC2 322B 0004                  		move.w	4(a3),d1
00006DC6 0241 FFF0                  		andi.w	#-$10,d1
00006DCA 9841                       		sub.w	d1,d4
00006DCC 3F04                       		move.w	d4,-(sp)
00006DCE 7AF0                       		moveq	#-$10,d5
00006DD0 6100 0000                  		bsr.w	sub_6C20
00006DD4 381F                       		move.w	(sp)+,d4
00006DD6 7AF0                       		moveq	#-$10,d5
00006DD8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006DDC 322B 0004                  		move.w	4(a3),d1
00006DE0 0241 FFF0                  		andi.w	#-$10,d1
00006DE4 9C41                       		sub.w	d1,d6
00006DE6 6D00                       		blt.s	loc_6A3E
00006DE8 E84E                       		lsr.w	#4,d6
00006DEA 0446 000E                  		subi.w	#$E,d6
00006DEE 6400                       		bcc.s	loc_6A3E
00006DF0 4446                       		neg.w	d6
00006DF2 6100 0000                  		bsr.w	sub_6B06
00006DF6                            
00006DF6                            loc_6A3E:
00006DF6 0892 0003                  		bclr	#3,(a2)
00006DFA 6700                       		beq.s	locret_6A80
00006DFC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9841                       		sub.w	d1,d4
00006E0A 3F04                       		move.w	d4,-(sp)
00006E0C 3A3C 0140                  		move.w	#$140,d5
00006E10 6100 0000                  		bsr.w	sub_6C20
00006E14 381F                       		move.w	(sp)+,d4
00006E16 3A3C 0140                  		move.w	#$140,d5
00006E1A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E1E 322B 0004                  		move.w	4(a3),d1
00006E22 0241 FFF0                  		andi.w	#-$10,d1
00006E26 9C41                       		sub.w	d1,d6
00006E28 6D00                       		blt.s	locret_6A80
00006E2A E84E                       		lsr.w	#4,d6
00006E2C 0446 000E                  		subi.w	#$E,d6
00006E30 6400                       		bcc.s	locret_6A80
00006E32 4446                       		neg.w	d6
00006E34 6100 0000                  		bsr.w	sub_6B06
00006E38                            
00006E38                            locret_6A80:
00006E38 4E75                       		rts	
00006E3A                            ; End of function sub_69F4
00006E3A                            
00006E3A                            ; ===========================================================================
00006E3A 4A12                       		tst.b	(a2)
00006E3C 6700                       		beq.s	locret_6AD6
00006E3E 0892 0002                  		bclr	#2,(a2)
00006E42 6700                       		beq.s	loc_6AAC
00006E44 383C 00D0                  		move.w	#$D0,d4
00006E48 322B 0004                  		move.w	4(a3),d1
00006E4C 0241 FFF0                  		andi.w	#-$10,d1
00006E50 9841                       		sub.w	d1,d4
00006E52 3F04                       		move.w	d4,-(sp)
00006E54 7AF0                       		moveq	#-$10,d5
00006E56 6100 0000                  		bsr.w	sub_6C3C
00006E5A 381F                       		move.w	(sp)+,d4
00006E5C 7AF0                       		moveq	#-$10,d5
00006E5E 7C02                       		moveq	#2,d6
00006E60 6100 0000                  		bsr.w	sub_6B06
00006E64                            
00006E64                            loc_6AAC:
00006E64 0892 0003                  		bclr	#3,(a2)
00006E68 6700                       		beq.s	locret_6AD6
00006E6A 383C 00D0                  		move.w	#$D0,d4
00006E6E 322B 0004                  		move.w	4(a3),d1
00006E72 0241 FFF0                  		andi.w	#-$10,d1
00006E76 9841                       		sub.w	d1,d4
00006E78 3F04                       		move.w	d4,-(sp)
00006E7A 3A3C 0140                  		move.w	#$140,d5
00006E7E 6100 0000                  		bsr.w	sub_6C3C
00006E82 381F                       		move.w	(sp)+,d4
00006E84 3A3C 0140                  		move.w	#$140,d5
00006E88 7C02                       		moveq	#2,d6
00006E8A 6100 0000                  		bsr.w	sub_6B06
00006E8E                            
00006E8E                            locret_6AD6:
00006E8E 4E75                       		rts	
00006E90                            
00006E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E90                            
00006E90                            
00006E90                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006E90 7C15                       		moveq	#$15,d6
00006E92                            ; End of function sub_6AD8
00006E92                            
00006E92                            
00006E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E92                            
00006E92                            
00006E92                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006E92 2E3C 0080 0000             		move.l	#$800000,d7
00006E98 2200                       		move.l	d0,d1
00006E9A                            
00006E9A                            loc_6AE2:
00006E9A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006E9E 6100 0000                  		bsr.w	sub_6BD6
00006EA2 2001                       		move.l	d1,d0
00006EA4 6100 0000                  		bsr.w	sub_6B32
00006EA8 5801                       		addq.b	#4,d1
00006EAA 0201 007F                  		andi.b	#$7F,d1
00006EAE 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006EB2 0645 0010                  		addi.w	#$10,d5
00006EB6 51CE FFE2                  		dbf	d6,loc_6AE2
00006EBA 4E75                       		rts	
00006EBC                            ; End of function sub_6ADA
00006EBC                            
00006EBC                            
00006EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EBC                            
00006EBC                            
00006EBC                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006EBC 7C0F                       		moveq	#$F,d6
00006EBE                            ; End of function sub_6B04
00006EBE                            
00006EBE                            
00006EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EBE                            
00006EBE                            
00006EBE                            sub_6B06:				; XREF: sub_6954
00006EBE 2E3C 0080 0000             		move.l	#$800000,d7
00006EC4 2200                       		move.l	d0,d1
00006EC6                            
00006EC6                            loc_6B0E:
00006EC6 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006ECA 6100 0000                  		bsr.w	sub_6BD6
00006ECE 2001                       		move.l	d1,d0
00006ED0 6100 0000                  		bsr.w	sub_6B32
00006ED4 0641 0100                  		addi.w	#$100,d1
00006ED8 0241 0FFF                  		andi.w	#$FFF,d1
00006EDC 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006EE0 0644 0010                  		addi.w	#$10,d4
00006EE4 51CE FFE0                  		dbf	d6,loc_6B0E
00006EE8 4E75                       		rts	
00006EEA                            ; End of function sub_6B06
00006EEA                            
00006EEA                            
00006EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EEA                            
00006EEA                            
00006EEA                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006EEA 8042                       		or.w	d2,d0
00006EEC 4840                       		swap	d0
00006EEE 0810 0004                  		btst	#4,(a0)
00006EF2 6600                       		bne.s	loc_6B6E
00006EF4 0810 0003                  		btst	#3,(a0)
00006EF8 6600                       		bne.s	loc_6B4E
00006EFA 2A80                       		move.l	d0,(a5)
00006EFC 2C99                       		move.l	(a1)+,(a6)
00006EFE D087                       		add.l	d7,d0
00006F00 2A80                       		move.l	d0,(a5)
00006F02 2C99                       		move.l	(a1)+,(a6)
00006F04 4E75                       		rts	
00006F06                            ; ===========================================================================
00006F06                            
00006F06                            loc_6B4E:
00006F06 2A80                       		move.l	d0,(a5)
00006F08 2819                       		move.l	(a1)+,d4
00006F0A 0A84 0800 0800             		eori.l	#$8000800,d4
00006F10 4844                       		swap	d4
00006F12 2C84                       		move.l	d4,(a6)
00006F14 D087                       		add.l	d7,d0
00006F16 2A80                       		move.l	d0,(a5)
00006F18 2819                       		move.l	(a1)+,d4
00006F1A 0A84 0800 0800             		eori.l	#$8000800,d4
00006F20 4844                       		swap	d4
00006F22 2C84                       		move.l	d4,(a6)
00006F24 4E75                       		rts	
00006F26                            ; ===========================================================================
00006F26                            
00006F26                            loc_6B6E:
00006F26 0810 0003                  		btst	#3,(a0)
00006F2A 6600                       		bne.s	loc_6B90
00006F2C 2A80                       		move.l	d0,(a5)
00006F2E 2A19                       		move.l	(a1)+,d5
00006F30 2819                       		move.l	(a1)+,d4
00006F32 0A84 1000 1000             		eori.l	#$10001000,d4
00006F38 2C84                       		move.l	d4,(a6)
00006F3A D087                       		add.l	d7,d0
00006F3C 2A80                       		move.l	d0,(a5)
00006F3E 0A85 1000 1000             		eori.l	#$10001000,d5
00006F44 2C85                       		move.l	d5,(a6)
00006F46 4E75                       		rts	
00006F48                            ; ===========================================================================
00006F48                            
00006F48                            loc_6B90:
00006F48 2A80                       		move.l	d0,(a5)
00006F4A 2A19                       		move.l	(a1)+,d5
00006F4C 2819                       		move.l	(a1)+,d4
00006F4E 0A84 1800 1800             		eori.l	#$18001800,d4
00006F54 4844                       		swap	d4
00006F56 2C84                       		move.l	d4,(a6)
00006F58 D087                       		add.l	d7,d0
00006F5A 2A80                       		move.l	d0,(a5)
00006F5C 0A85 1800 1800             		eori.l	#$18001800,d5
00006F62 4845                       		swap	d5
00006F64 2C85                       		move.l	d5,(a6)
00006F66 4E75                       		rts	
00006F68                            ; End of function sub_6B32
00006F68                            
00006F68                            ; ===========================================================================
00006F68 4E75                       		rts	
00006F6A                            ; ===========================================================================
00006F6A 2A80                       		move.l	d0,(a5)
00006F6C 3A3C 2000                  		move.w	#$2000,d5
00006F70 3819                       		move.w	(a1)+,d4
00006F72 D845                       		add.w	d5,d4
00006F74 3C84                       		move.w	d4,(a6)
00006F76 3819                       		move.w	(a1)+,d4
00006F78 D845                       		add.w	d5,d4
00006F7A 3C84                       		move.w	d4,(a6)
00006F7C D087                       		add.l	d7,d0
00006F7E 2A80                       		move.l	d0,(a5)
00006F80 3819                       		move.w	(a1)+,d4
00006F82 D845                       		add.w	d5,d4
00006F84 3C84                       		move.w	d4,(a6)
00006F86 3819                       		move.w	(a1)+,d4
00006F88 D845                       		add.w	d5,d4
00006F8A 3C84                       		move.w	d4,(a6)
00006F8C 4E75                       		rts	
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006F8E 43F8 B000                  		lea	($FFFFB000).w,a1
00006F92 D86B 0004                  		add.w	4(a3),d4
00006F96 DA53                       		add.w	(a3),d5
00006F98 3604                       		move.w	d4,d3
00006F9A E24B                       		lsr.w	#1,d3
00006F9C 0243 0380                  		andi.w	#$380,d3
00006FA0 E64D                       		lsr.w	#3,d5
00006FA2 3005                       		move.w	d5,d0
00006FA4 EA48                       		lsr.w	#5,d0
00006FA6 0240 007F                  		andi.w	#$7F,d0
00006FAA D043                       		add.w	d3,d0
00006FAC 76FF                       		moveq	#-1,d3
00006FAE 1634 0000                  		move.b	(a4,d0.w),d3
00006FB2 6700                       		beq.s	locret_6C1E
00006FB4 5303                       		subq.b	#1,d3
00006FB6 0243 007F                  		andi.w	#$7F,d3
00006FBA EE5B                       		ror.w	#7,d3
00006FBC D844                       		add.w	d4,d4
00006FBE 0244 01E0                  		andi.w	#$1E0,d4
00006FC2 0245 001E                  		andi.w	#$1E,d5
00006FC6 D644                       		add.w	d4,d3
00006FC8 D645                       		add.w	d5,d3
00006FCA 2043                       		movea.l	d3,a0
00006FCC 3610                       		move.w	(a0),d3
00006FCE 0243 03FF                  		andi.w	#$3FF,d3
00006FD2 E74B                       		lsl.w	#3,d3
00006FD4 D2C3                       		adda.w	d3,a1
00006FD6                            
00006FD6                            locret_6C1E:
00006FD6 4E75                       		rts	
00006FD8                            ; End of function sub_6BD6
00006FD8                            
00006FD8                            
00006FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FD8                            
00006FD8                            
00006FD8                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006FD8 D86B 0004                  		add.w	4(a3),d4
00006FDC DA53                       		add.w	(a3),d5
00006FDE 0244 00F0                  		andi.w	#$F0,d4
00006FE2 0245 01F0                  		andi.w	#$1F0,d5
00006FE6 E94C                       		lsl.w	#4,d4
00006FE8 E44D                       		lsr.w	#2,d5
00006FEA D845                       		add.w	d5,d4
00006FEC 7003                       		moveq	#3,d0
00006FEE 4840                       		swap	d0
00006FF0 3004                       		move.w	d4,d0
00006FF2 4E75                       		rts	
00006FF4                            ; End of function sub_6C20
00006FF4                            
00006FF4                            
00006FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FF4                            ; not used
00006FF4                            
00006FF4                            
00006FF4                            sub_6C3C:
00006FF4 D86B 0004                  		add.w	4(a3),d4
00006FF8 DA53                       		add.w	(a3),d5
00006FFA 0244 00F0                  		andi.w	#$F0,d4
00006FFE 0245 01F0                  		andi.w	#$1F0,d5
00007002 E94C                       		lsl.w	#4,d4
00007004 E44D                       		lsr.w	#2,d5
00007006 D845                       		add.w	d5,d4
00007008 7002                       		moveq	#2,d0
0000700A 4840                       		swap	d0
0000700C 3004                       		move.w	d4,d0
0000700E 4E75                       		rts	
00007010                            ; End of function sub_6C3C
00007010                            
00007010                            ; ---------------------------------------------------------------------------
00007010                            ; Subroutine to	load tiles as soon as the level	appears
00007010                            ; ---------------------------------------------------------------------------
00007010                            
00007010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007010                            
00007010                            
00007010                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007010 4BF9 00C0 0004             		lea	($C00004).l,a5
00007016 4DF9 00C0 0000             		lea	($C00000).l,a6
0000701C 47F8 F700                  		lea	($FFFFF700).w,a3
00007020 49F8 A400                  		lea	($FFFFA400).w,a4
00007024 343C 4000                  		move.w	#$4000,d2
00007028 6100                       		bsr.s	LoadTilesFromStart2
0000702A 47F8 F708                  		lea	($FFFFF708).w,a3
0000702E 49F8 A440                  		lea	($FFFFA440).w,a4
00007032 343C 6000                  		move.w	#$6000,d2
00007036                            ; End of function LoadTilesFromStart
00007036                            
00007036                            
00007036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007036                            
00007036                            
00007036                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007036 78F0                       		moveq	#-$10,d4
00007038 7C0F                       		moveq	#$F,d6
0000703A                            
0000703A                            loc_6C82:
0000703A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000703E 7A00                       		moveq	#0,d5
00007040 3204                       		move.w	d4,d1
00007042 6100 FF94                  		bsr.w	sub_6C20
00007046 3801                       		move.w	d1,d4
00007048 7A00                       		moveq	#0,d5
0000704A 7C1F                       		moveq	#$1F,d6
0000704C 6100 FE44                  		bsr.w	sub_6ADA
00007050 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007054 0644 0010                  		addi.w	#$10,d4
00007058 51CE FFE0                  		dbf	d6,loc_6C82
0000705C 4E75                       		rts	
0000705E                            ; End of function LoadTilesFromStart2
0000705E                            
0000705E                            ; ---------------------------------------------------------------------------
0000705E                            ; Main Load Block loading subroutine
0000705E                            ; ---------------------------------------------------------------------------
0000705E                            
0000705E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705E                            
0000705E                            
0000705E                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000705E 7000                       		moveq	#0,d0
00007060 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007064 E948                       		lsl.w	#4,d0
00007066 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000706C 45F2 0000                  		lea	(a2,d0.w),a2
00007070 2F0A                       		move.l	a2,-(sp)
00007072 588A                       		addq.l	#4,a2
00007074 205A                       		movea.l	(a2)+,a0
00007076 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000707A 303C 0000                  		move.w	#0,d0
0000707E 6100 A8BE                  		bsr.w	EniDec
00007082 205A                       		movea.l	(a2)+,a0
00007084 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000708A 6100 AA30                  		bsr.w	KosDec
0000708E 6100 0000                  		bsr.w	LevelLayoutLoad
00007092 301A                       		move.w	(a2)+,d0
00007094 3012                       		move.w	(a2),d0
00007096 0240 00FF                  		andi.w	#$FF,d0
0000709A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000070A0 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000070A2 700C                       		moveq	#$C,d0		; use SB3 pallet
000070A4                            
000070A4                            MLB_ChkSBZPal:
000070A4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000070AA 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000070AC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000070B2 6600                       		bne.s	MLB_NormalPal	; if not, branch
000070B4                            
000070B4                            MLB_UsePal0E:
000070B4 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000070B6                            
000070B6                            MLB_NormalPal:
000070B6 6100 B264                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000070BA 245F                       		movea.l	(sp)+,a2
000070BC 584A                       		addq.w	#4,a2
000070BE 7000                       		moveq	#0,d0
000070C0 1012                       		move.b	(a2),d0
000070C2 6700                       		beq.s	locret_6D10
000070C4 6100 A6DA                  		bsr.w	LoadPLC		; load pattern load cues
000070C8                            
000070C8                            locret_6D10:
000070C8 4E75                       		rts	
000070CA                            ; End of function MainLoadBlockLoad
000070CA                            
000070CA                            ; ---------------------------------------------------------------------------
000070CA                            ; Level	layout loading subroutine
000070CA                            ; ---------------------------------------------------------------------------
000070CA                            
000070CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070CA                            
000070CA                            
000070CA                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000070CA 47F8 A400                  		lea	($FFFFA400).w,a3
000070CE 323C 01FF                  		move.w	#$1FF,d1
000070D2 7000                       		moveq	#0,d0
000070D4                            
000070D4                            LevLoad_ClrRam:
000070D4 26C0                       		move.l	d0,(a3)+
000070D6 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000070DA                            
000070DA 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000070DE 7200                       		moveq	#0,d1
000070E0 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000070E4 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000070E8 7202                       		moveq	#2,d1
000070EA                            ; End of function LevelLayoutLoad
000070EA                            
000070EA                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000070EA                            
000070EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070EA                            
000070EA                            
000070EA                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000070EA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000070EE ED08                       		lsl.b	#6,d0
000070F0 EA48                       		lsr.w	#5,d0
000070F2 3400                       		move.w	d0,d2
000070F4 D040                       		add.w	d0,d0
000070F6 D042                       		add.w	d2,d0
000070F8 D041                       		add.w	d1,d0
000070FA 43F9 0000 0000             		lea	(Level_Index).l,a1
00007100 3031 0000                  		move.w	(a1,d0.w),d0
00007104 43F1 0000                  		lea	(a1,d0.w),a1
00007108 7200                       		moveq	#0,d1
0000710A 3401                       		move.w	d1,d2
0000710C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000710E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007110                            
00007110                            LevLoad_NumRows:
00007110 3001                       		move.w	d1,d0
00007112 204B                       		movea.l	a3,a0
00007114                            
00007114                            LevLoad_Row:
00007114 10D9                       		move.b	(a1)+,(a0)+
00007116 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000711A 47EB 0080                  		lea	$80(a3),a3	; do next row
0000711E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007122 4E75                       		rts	
00007124                            ; End of function LevelLayoutLoad2
00007124                            
00007124                            ; ---------------------------------------------------------------------------
00007124                            ; Dynamic screen resize	loading	subroutine
00007124                            ; ---------------------------------------------------------------------------
00007124                            
00007124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007124                            
00007124                            
00007124                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007124 7000                       		moveq	#0,d0
00007126 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000712A D040                       		add.w	d0,d0
0000712C 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007130 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007134 7202                       		moveq	#2,d1
00007136 3038 F726                  		move.w	($FFFFF726).w,d0
0000713A 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000713E 6700                       		beq.s	locret_6DAA
00007140 6400                       		bcc.s	loc_6DAC
00007142 4441                       		neg.w	d1
00007144 3038 F704                  		move.w	($FFFFF704).w,d0
00007148 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000714C 6300                       		bls.s	loc_6DA0
0000714E 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007152 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007158                            
00007158                            loc_6DA0:
00007158 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000715C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007162                            
00007162                            locret_6DAA:
00007162 4E75                       		rts	
00007164                            ; ===========================================================================
00007164                            
00007164                            loc_6DAC:				; XREF: DynScrResizeLoad
00007164 3038 F704                  		move.w	($FFFFF704).w,d0
00007168 5040                       		addq.w	#8,d0
0000716A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000716E 6500                       		bcs.s	loc_6DC4
00007170 0838 0001 D022             		btst	#1,($FFFFD022).w
00007176 6700                       		beq.s	loc_6DC4
00007178 D241                       		add.w	d1,d1
0000717A D241                       		add.w	d1,d1
0000717C                            
0000717C                            loc_6DC4:
0000717C D378 F72E                  		add.w	d1,($FFFFF72E).w
00007180 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007186 4E75                       		rts	
00007188                            ; End of function DynScrResizeLoad
00007188                            
00007188                            ; ===========================================================================
00007188                            ; ---------------------------------------------------------------------------
00007188                            ; Offset index for dynamic screen resizing
00007188                            ; ---------------------------------------------------------------------------
00007188 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000718C 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007190 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007194 0000                       		dc.w Resize_Ending-Resize_Index
00007196                            ; ===========================================================================
00007196                            ; ---------------------------------------------------------------------------
00007196                            ; Green	Hill Zone dynamic screen resizing
00007196                            ; ---------------------------------------------------------------------------
00007196                            
00007196                            Resize_GHZ:				; XREF: Resize_Index
00007196 7000                       		moveq	#0,d0
00007198 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000719C D040                       		add.w	d0,d0
0000719E 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000071A2 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000071A6                            ; ===========================================================================
000071A6 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000071A8 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000071AA 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000071AC                            ; ===========================================================================
000071AC                            
000071AC                            Resize_GHZ1:
000071AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000071B2 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000071B8 6500                       		bcs.s	locret_6E08	; if not, branch
000071BA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000071C0                            
000071C0                            locret_6E08:
000071C0 4E75                       		rts	
000071C2                            ; ===========================================================================
000071C2                            
000071C2                            Resize_GHZ2:
000071C2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000071C8 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000071CE 6500                       		bcs.s	locret_6E3A
000071D0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000071D6 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000071DC 6500                       		bcs.s	locret_6E3A
000071DE 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000071E4 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000071EA 6500                       		bcs.s	locret_6E3A
000071EC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000071F2                            
000071F2                            locret_6E3A:
000071F2 4E75                       		rts	
000071F4                            ; ===========================================================================
000071F4                            
000071F4                            Resize_GHZ3:
000071F4 7000                       		moveq	#0,d0
000071F6 1038 F742                  		move.b	($FFFFF742).w,d0
000071FA 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000071FE 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007202                            ; ===========================================================================
00007202 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007204 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007206 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007208                            ; ===========================================================================
00007208                            
00007208                            Resize_GHZ3main:
00007208 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000720E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007214 6500                       		bcs.s	locret_6E96
00007216 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000721C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007222 6500                       		bcs.s	locret_6E96
00007224 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000722A 6500                       		bcs.s	loc_6E98
0000722C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007232 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007238 6400                       		bcc.s	loc_6E8E
0000723A 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007240 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007246                            
00007246                            loc_6E8E:
00007246 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000724C 6400                       		bcc.s	loc_6E98
0000724E                            
0000724E                            locret_6E96:
0000724E 4E75                       		rts	
00007250                            ; ===========================================================================
00007250                            
00007250                            loc_6E98:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007256 5438 F742                  		addq.b	#2,($FFFFF742).w
0000725A 4E75                       		rts	
0000725C                            ; ===========================================================================
0000725C                            
0000725C                            Resize_GHZ3boss:
0000725C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007262 6400                       		bcc.s	loc_6EB0
00007264 5538 F742                  		subq.b	#2,($FFFFF742).w
00007268                            
00007268                            loc_6EB0:
00007268 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000726E 6500                       		bcs.s	locret_6EE8
00007270 6100 0000                  		bsr.w	SingleObjLoad
00007274 6600                       		bne.s	loc_6ED0
00007276 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000727A 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007280 337C 0280 000C             		move.w	#$280,$C(a1)
00007286                            
00007286                            loc_6ED0:
00007286 303C 008C                  		move.w	#$8C,d0
0000728A 6100 A32A                  		bsr.w	PlaySound	; play boss music
0000728E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007294 5438 F742                  		addq.b	#2,($FFFFF742).w
00007298 7011                       		moveq	#$11,d0
0000729A 6000 A504                  		bra.w	LoadPLC		; load boss patterns
0000729E                            ; ===========================================================================
0000729E                            
0000729E                            locret_6EE8:
0000729E 4E75                       		rts	
000072A0                            ; ===========================================================================
000072A0                            
000072A0                            Resize_GHZ3end:
000072A0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000072A6 4E75                       		rts	
000072A8                            ; ===========================================================================
000072A8                            ; ---------------------------------------------------------------------------
000072A8                            ; Labyrinth Zone dynamic screen	resizing
000072A8                            ; ---------------------------------------------------------------------------
000072A8                            
000072A8                            Resize_LZ:				; XREF: Resize_Index
000072A8 7000                       		moveq	#0,d0
000072AA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072AE D040                       		add.w	d0,d0
000072B0 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000072B4 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000072B8                            ; ===========================================================================
000072B8 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000072BA 0000                       		dc.w Resize_LZ12-Resize_LZx
000072BC 0000                       		dc.w Resize_LZ3-Resize_LZx
000072BE 0000                       		dc.w Resize_SBZ3-Resize_LZx
000072C0                            ; ===========================================================================
000072C0                            
000072C0                            Resize_LZ12:
000072C0 4E75                       		rts	
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_LZ3:
000072C2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000072C6 6700                       		beq.s	loc_6F28	; if not, branch
000072C8 43F8 A506                  		lea	($FFFFA506).w,a1
000072CC 0C11 0007                  		cmpi.b	#7,(a1)
000072D0 6700                       		beq.s	loc_6F28
000072D2 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000072D6 303C 00B7                  		move.w	#$B7,d0
000072DA 6100 A2E0                  		bsr.w	PlaySound_Special ; play rumbling sound
000072DE                            
000072DE                            loc_6F28:
000072DE 4A38 F742                  		tst.b	($FFFFF742).w
000072E2 6600                       		bne.s	locret_6F64
000072E4 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000072EA 6500                       		bcs.s	locret_6F62
000072EC 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000072F2 6400                       		bcc.s	locret_6F62
000072F4 6100 0000                  		bsr.w	SingleObjLoad
000072F8 6600                       		bne.s	loc_6F4A
000072FA 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000072FE                            
000072FE                            loc_6F4A:
000072FE 303C 008C                  		move.w	#$8C,d0
00007302 6100 A2B2                  		bsr.w	PlaySound	; play boss music
00007306 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000730C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007310 7011                       		moveq	#$11,d0
00007312 6000 A48C                  		bra.w	LoadPLC		; load boss patterns
00007316                            ; ===========================================================================
00007316                            
00007316                            locret_6F62:
00007316 4E75                       		rts	
00007318                            ; ===========================================================================
00007318                            
00007318                            locret_6F64:
00007318 4E75                       		rts	
0000731A                            ; ===========================================================================
0000731A                            
0000731A                            Resize_SBZ3:
0000731A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007320 6500                       		bcs.s	locret_6F8C
00007322 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007328 6400                       		bcc.s	locret_6F8C	; if not, branch
0000732A 4238 FE30                  		clr.b	($FFFFFE30).w
0000732E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007334 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000733A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007340                            
00007340                            locret_6F8C:
00007340 4E75                       		rts	
00007342                            ; ===========================================================================
00007342                            ; ---------------------------------------------------------------------------
00007342                            ; Marble Zone dynamic screen resizing
00007342                            ; ---------------------------------------------------------------------------
00007342                            
00007342                            Resize_MZ:				; XREF: Resize_Index
00007342 7000                       		moveq	#0,d0
00007344 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007348 D040                       		add.w	d0,d0
0000734A 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000734E 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007352                            ; ===========================================================================
00007352 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007354 0000                       		dc.w Resize_MZ2-Resize_MZx
00007356 0000                       		dc.w Resize_MZ3-Resize_MZx
00007358                            ; ===========================================================================
00007358                            
00007358                            Resize_MZ1:
00007358 7000                       		moveq	#0,d0
0000735A 1038 F742                  		move.b	($FFFFF742).w,d0
0000735E 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007362 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007366                            ; ===========================================================================
00007366 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007368 0000                       		dc.w loc_6FEA-off_6FB2
0000736A 0000                       		dc.w loc_702E-off_6FB2
0000736C 0000                       		dc.w loc_7050-off_6FB2
0000736E                            ; ===========================================================================
0000736E                            
0000736E                            loc_6FBA:
0000736E 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007374 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000737A 6500                       		bcs.s	locret_6FE8
0000737C 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007382 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007388 6500                       		bcs.s	locret_6FE8
0000738A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007390 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007396 6500                       		bcs.s	locret_6FE8
00007398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000739C                            
0000739C                            locret_6FE8:
0000739C 4E75                       		rts	
0000739E                            ; ===========================================================================
0000739E                            
0000739E                            loc_6FEA:
0000739E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000073A4 6400                       		bcc.s	loc_6FF8
000073A6 5538 F742                  		subq.b	#2,($FFFFF742).w
000073AA 4E75                       		rts	
000073AC                            ; ===========================================================================
000073AC                            
000073AC                            loc_6FF8:
000073AC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000073B2 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000073B8 6400                       		bcc.s	locret_702C
000073BA 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000073C0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000073C6 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000073CC 6400                       		bcc.s	locret_702C
000073CE 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000073D4 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000073DA 6500                       		bcs.s	locret_702C
000073DC 5438 F742                  		addq.b	#2,($FFFFF742).w
000073E0                            
000073E0                            locret_702C:
000073E0 4E75                       		rts	
000073E2                            ; ===========================================================================
000073E2                            
000073E2                            loc_702E:
000073E2 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000073E8 6400                       		bcc.s	loc_703C
000073EA 5538 F742                  		subq.b	#2,($FFFFF742).w
000073EE 4E75                       		rts	
000073F0                            ; ===========================================================================
000073F0                            
000073F0                            loc_703C:
000073F0 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000073F6 6500                       		bcs.s	locret_704E
000073F8 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000073FE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007402                            
00007402                            locret_704E:
00007402 4E75                       		rts	
00007404                            ; ===========================================================================
00007404                            
00007404                            loc_7050:
00007404 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000740A 6500                       		bcs.s	locret_7072
0000740C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007412 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007418 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_7072
00007420 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007426                            
00007426                            locret_7072:
00007426 4E75                       		rts	
00007428                            ; ===========================================================================
00007428                            
00007428                            Resize_MZ2:
00007428 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000742E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007434 6500                       		bcs.s	locret_7088
00007436 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000743C                            
0000743C                            locret_7088:
0000743C 4E75                       		rts	
0000743E                            ; ===========================================================================
0000743E                            
0000743E                            Resize_MZ3:
0000743E 7000                       		moveq	#0,d0
00007440 1038 F742                  		move.b	($FFFFF742).w,d0
00007444 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007448 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000744C                            ; ===========================================================================
0000744C 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000744E 0000                       		dc.w Resize_MZ3end-off_7098
00007450                            ; ===========================================================================
00007450                            
00007450                            Resize_MZ3boss:
00007450 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007456 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000745C 6500                       		bcs.s	locret_70E8
0000745E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007464 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000746A 6500                       		bcs.s	locret_70E8
0000746C 6100 0000                  		bsr.w	SingleObjLoad
00007470 6600                       		bne.s	loc_70D0
00007472 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007476 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000747C 337C 022C 000C             		move.w	#$22C,$C(a1)
00007482                            
00007482                            loc_70D0:
00007482 303C 008C                  		move.w	#$8C,d0
00007486 6100 A12E                  		bsr.w	PlaySound	; play boss music
0000748A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007490 5438 F742                  		addq.b	#2,($FFFFF742).w
00007494 7011                       		moveq	#$11,d0
00007496 6000 A308                  		bra.w	LoadPLC		; load boss patterns
0000749A                            ; ===========================================================================
0000749A                            
0000749A                            locret_70E8:
0000749A 4E75                       		rts	
0000749C                            ; ===========================================================================
0000749C                            
0000749C                            Resize_MZ3end:
0000749C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000074A2 4E75                       		rts	
000074A4                            ; ===========================================================================
000074A4                            ; ---------------------------------------------------------------------------
000074A4                            ; Star Light Zone dynamic screen resizing
000074A4                            ; ---------------------------------------------------------------------------
000074A4                            
000074A4                            Resize_SLZ:				; XREF: Resize_Index
000074A4 7000                       		moveq	#0,d0
000074A6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000074AA D040                       		add.w	d0,d0
000074AC 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000074B0 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000074B4                            ; ===========================================================================
000074B4 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000074B6 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000074B8 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000074BA                            ; ===========================================================================
000074BA                            
000074BA                            Resize_SLZ12:
000074BA 4E75                       		rts	
000074BC                            ; ===========================================================================
000074BC                            
000074BC                            Resize_SLZ3:
000074BC 7000                       		moveq	#0,d0
000074BE 1038 F742                  		move.b	($FFFFF742).w,d0
000074C2 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000074C6 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000074CA                            ; ===========================================================================
000074CA 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000074CC 0000                       		dc.w Resize_SLZ3boss-off_7118
000074CE 0000                       		dc.w Resize_SLZ3end-off_7118
000074D0                            ; ===========================================================================
000074D0                            
000074D0                            Resize_SLZ3main:
000074D0 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000074D6 6500                       		bcs.s	locret_7130
000074D8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000074E2                            
000074E2                            locret_7130:
000074E2 4E75                       		rts	
000074E4                            ; ===========================================================================
000074E4                            
000074E4                            Resize_SLZ3boss:
000074E4 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000074EA 6500                       		bcs.s	locret_715C
000074EC 6100 0000                  		bsr.w	SingleObjLoad
000074F0 6600                       		bne.s	loc_7144
000074F2 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000074F6                            
000074F6                            loc_7144:
000074F6 303C 008C                  		move.w	#$8C,d0
000074FA 6100 A0BA                  		bsr.w	PlaySound	; play boss music
000074FE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007504 5438 F742                  		addq.b	#2,($FFFFF742).w
00007508 7011                       		moveq	#$11,d0
0000750A 6000 A294                  		bra.w	LoadPLC		; load boss patterns
0000750E                            ; ===========================================================================
0000750E                            
0000750E                            locret_715C:
0000750E 4E75                       		rts	
00007510                            ; ===========================================================================
00007510                            
00007510                            Resize_SLZ3end:
00007510 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007516 4E75                       		rts
00007518 4E75                       		rts
0000751A                            ; ===========================================================================
0000751A                            ; ---------------------------------------------------------------------------
0000751A                            ; Spring Yard Zone dynamic screen resizing
0000751A                            ; ---------------------------------------------------------------------------
0000751A                            
0000751A                            Resize_SYZ:				; XREF: Resize_Index
0000751A 7000                       		moveq	#0,d0
0000751C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007520 D040                       		add.w	d0,d0
00007522 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007526 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000752A                            ; ===========================================================================
0000752A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000752C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000752E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007530                            ; ===========================================================================
00007530                            
00007530                            Resize_SYZ1:
00007530 4E75                       		rts	
00007532                            ; ===========================================================================
00007532                            
00007532                            Resize_SYZ2:
00007532 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007538 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000753E 6500                       		bcs.s	locret_71A2
00007540 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007546 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000754C 6500                       		bcs.s	locret_71A2
0000754E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007554                            
00007554                            locret_71A2:
00007554 4E75                       		rts	
00007556                            ; ===========================================================================
00007556                            
00007556                            Resize_SYZ3:
00007556 7000                       		moveq	#0,d0
00007558 1038 F742                  		move.b	($FFFFF742).w,d0
0000755C 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007560 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007564                            ; ===========================================================================
00007564 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007566 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007568 0000                       		dc.w Resize_SYZ3end-off_71B2
0000756A                            ; ===========================================================================
0000756A                            
0000756A                            Resize_SYZ3main:
0000756A 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007570 6500                       		bcs.s	locret_71CE
00007572 6100 0000                  		bsr.w	SingleObjLoad
00007576 6600                       		bne.s	locret_71CE
00007578 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000757C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007580                            
00007580                            locret_71CE:
00007580 4E75                       		rts	
00007582                            ; ===========================================================================
00007582                            
00007582                            Resize_SYZ3boss:
00007582 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007588 6500                       		bcs.s	locret_7200
0000758A 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_71EC
00007596 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000759A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000759E                            
0000759E                            loc_71EC:
0000759E 303C 008C                  		move.w	#$8C,d0
000075A2 6100 A012                  		bsr.w	PlaySound	; play boss music
000075A6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_7200:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SYZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts	
000075BC                            ; ===========================================================================
000075BC                            ; ---------------------------------------------------------------------------
000075BC                            ; Scrap	Brain Zone dynamic screen resizing
000075BC                            ; ---------------------------------------------------------------------------
000075BC                            
000075BC                            Resize_SBZ:				; XREF: Resize_Index
000075BC 7000                       		moveq	#0,d0
000075BE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C2 D040                       		add.w	d0,d0
000075C4 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000075C8 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000075CC                            ; ===========================================================================
000075CC 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000075CE 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000075D0 0000                       		dc.w Resize_FZ-Resize_SBZx
000075D2                            ; ===========================================================================
000075D2                            
000075D2                            Resize_SBZ1:
000075D2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000075D8 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000075DE 6500                       		bcs.s	locret_7242
000075E0 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000075E6 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000075EC 6500                       		bcs.s	locret_7242
000075EE 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000075F4                            
000075F4                            locret_7242:
000075F4 4E75                       		rts	
000075F6                            ; ===========================================================================
000075F6                            
000075F6                            Resize_SBZ2:
000075F6 7000                       		moveq	#0,d0
000075F8 1038 F742                  		move.b	($FFFFF742).w,d0
000075FC 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007600 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007604                            ; ===========================================================================
00007604 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007606 0000                       		dc.w Resize_SBZ2boss-off_7252
00007608 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000760A 0000                       		dc.w Resize_SBZ2end-off_7252
0000760C                            ; ===========================================================================
0000760C                            
0000760C                            Resize_SBZ2main:
0000760C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007612 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007618 6500                       		bcs.s	locret_727A
0000761A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007620 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007626 6500                       		bcs.s	locret_727A
00007628 5438 F742                  		addq.b	#2,($FFFFF742).w
0000762C                            
0000762C                            locret_727A:
0000762C 4E75                       		rts	
0000762E                            ; ===========================================================================
0000762E                            
0000762E                            Resize_SBZ2boss:
0000762E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007634 6500                       		bcs.s	locret_7298
00007636 6100 0000                  		bsr.w	SingleObjLoad
0000763A 6600                       		bne.s	locret_7298
0000763C 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007640 5438 F742                  		addq.b	#2,($FFFFF742).w
00007644 701E                       		moveq	#$1E,d0
00007646 6000 A158                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000764A                            ; ===========================================================================
0000764A                            
0000764A                            locret_7298:
0000764A 4E75                       		rts	
0000764C                            ; ===========================================================================
0000764C                            
0000764C                            Resize_SBZ2boss2:
0000764C 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007652 6500                       		bcs.s	loc_72B6
00007654 6100 0000                  		bsr.w	SingleObjLoad
00007658 6600                       		bne.s	loc_72B0
0000765A 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000765E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007662                            
00007662                            loc_72B0:
00007662 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007668                            
00007668                            loc_72B6:
00007668 6000                       		bra.s	loc_72C2
0000766A                            ; ===========================================================================
0000766A                            
0000766A                            Resize_SBZ2end:
0000766A 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007670 6500                       		bcs.s	loc_72C2
00007672 4E75                       		rts	
00007674                            ; ===========================================================================
00007674                            
00007674                            loc_72C2:
00007674 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000767A 4E75                       		rts	
0000767C                            ; ===========================================================================
0000767C                            
0000767C                            Resize_FZ:
0000767C 7000                       		moveq	#0,d0
0000767E 1038 F742                  		move.b	($FFFFF742).w,d0
00007682 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007686 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000768A                            ; ===========================================================================
0000768A 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000768E 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007692 0000                       		dc.w Resize_FZend2-off_72D8
00007694                            ; ===========================================================================
00007694                            
00007694                            Resize_FZmain:
00007694 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000769A 6500                       		bcs.s	loc_72F4
0000769C 5438 F742                  		addq.b	#2,($FFFFF742).w
000076A0 701F                       		moveq	#$1F,d0
000076A2 6100 A0FC                  		bsr.w	LoadPLC		; load FZ boss patterns
000076A6                            
000076A6                            loc_72F4:
000076A6 60CC                       		bra.s	loc_72C2
000076A8                            ; ===========================================================================
000076A8                            
000076A8                            Resize_FZboss:
000076A8 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000076AE 6500                       		bcs.s	loc_7312
000076B0 6100 0000                  		bsr.w	SingleObjLoad
000076B4 6600                       		bne.s	loc_7312
000076B6 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000076BA 5438 F742                  		addq.b	#2,($FFFFF742).w
000076BE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076C4                            
000076C4                            loc_7312:
000076C4 60AE                       		bra.s	loc_72C2
000076C6                            ; ===========================================================================
000076C6                            
000076C6                            Resize_FZend:
000076C6 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000076CC 6500                       		bcs.s	loc_7320
000076CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D2                            
000076D2                            loc_7320:
000076D2 60A0                       		bra.s	loc_72C2
000076D4                            ; ===========================================================================
000076D4                            
000076D4                            locret_7322:
000076D4 4E75                       		rts	
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_FZend2:
000076D6 609C                       		bra.s	loc_72C2
000076D8                            ; ===========================================================================
000076D8                            ; ---------------------------------------------------------------------------
000076D8                            ; Ending sequence dynamic screen resizing (empty)
000076D8                            ; ---------------------------------------------------------------------------
000076D8                            
000076D8                            Resize_Ending:				; XREF: Resize_Index
000076D8 4E75                       		rts	
000076DA                            ; ===========================================================================
000076DA                            ; ---------------------------------------------------------------------------
000076DA                            ; Object 11 - GHZ bridge
000076DA                            ; ---------------------------------------------------------------------------
000076DA                            
000076DA                            Obj11:					; XREF: Obj_Index
000076DA 7000                       		moveq	#0,d0
000076DC 1028 0024                  		move.b	$24(a0),d0
000076E0 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000076E4 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000076E8                            ; ===========================================================================
000076E8 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000076EC 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000076F0 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000076F4                            ; ===========================================================================
000076F4                            
000076F4                            Obj11_Main:				; XREF: Obj11_Index
000076F4 5428 0024                  		addq.b	#2,$24(a0)
000076F8 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007700 317C 438E 0002             		move.w	#$438E,2(a0)
00007706 117C 0004 0001             		move.b	#4,1(a0)
0000770C 117C 0003 0018             		move.b	#3,$18(a0)
00007712 117C 0080 0019             		move.b	#$80,$19(a0)
00007718 3428 000C                  		move.w	$C(a0),d2
0000771C 3628 0008                  		move.w	8(a0),d3
00007720 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007722 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007726 7200                       		moveq	#0,d1
00007728 1212                       		move.b	(a2),d1		; copy a2 to d1
0000772A 14FC 0000                  		move.b	#0,(a2)+
0000772E 3001                       		move.w	d1,d0
00007730 E248                       		lsr.w	#1,d0
00007732 E948                       		lsl.w	#4,d0
00007734 9640                       		sub.w	d0,d3
00007736 5501                       		subq.b	#2,d1
00007738 6500                       		bcs.s	Obj11_Action
0000773A                            
0000773A                            Obj11_MakeBdg:
0000773A 6100 0000                  		bsr.w	SingleObjLoad
0000773E 6600                       		bne.s	Obj11_Action
00007740 5228 0028                  		addq.b	#1,$28(a0)
00007744 B668 0008                  		cmp.w	8(a0),d3
00007748 6600                       		bne.s	loc_73B8
0000774A 0643 0010                  		addi.w	#$10,d3
0000774E 3142 000C                  		move.w	d2,$C(a0)
00007752 3142 003C                  		move.w	d2,$3C(a0)
00007756 3A08                       		move.w	a0,d5
00007758 0445 D000                  		subi.w	#-$3000,d5
0000775C EC4D                       		lsr.w	#6,d5
0000775E 0245 007F                  		andi.w	#$7F,d5
00007762 14C5                       		move.b	d5,(a2)+
00007764 5228 0028                  		addq.b	#1,$28(a0)
00007768                            
00007768                            loc_73B8:				; XREF: ROM:00007398j
00007768 3A09                       		move.w	a1,d5
0000776A 0445 D000                  		subi.w	#-$3000,d5
0000776E EC4D                       		lsr.w	#6,d5
00007770 0245 007F                  		andi.w	#$7F,d5
00007774 14C5                       		move.b	d5,(a2)+
00007776 137C 000A 0024             		move.b	#$A,$24(a1)
0000777C 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000777E 3342 000C                  		move.w	d2,$C(a1)
00007782 3342 003C                  		move.w	d2,$3C(a1)
00007786 3343 0008                  		move.w	d3,8(a1)
0000778A 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007792 337C 438E 0002             		move.w	#$438E,2(a1)
00007798 137C 0004 0001             		move.b	#4,1(a1)
0000779E 137C 0003 0018             		move.b	#3,$18(a1)
000077A4 137C 0008 0019             		move.b	#8,$19(a1)
000077AA 0643 0010                  		addi.w	#$10,d3
000077AE 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000077B2                            
000077B2                            Obj11_Action:				; XREF: Obj11_Index
000077B2 6100                       		bsr.s	Obj11_Solid
000077B4 4A28 003E                  		tst.b	$3E(a0)
000077B8 6700                       		beq.s	Obj11_Display
000077BA 5928 003E                  		subq.b	#4,$3E(a0)
000077BE 6100 0000                  		bsr.w	Obj11_Bend
000077C2                            
000077C2                            Obj11_Display:
000077C2 6100 0000                  		bsr.w	DisplaySprite
000077C6 6000 0000                  		bra.w	Obj11_ChkDel
000077CA                            
000077CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CA                            
000077CA                            
000077CA                            Obj11_Solid:				; XREF: Obj11_Action
000077CA 7200                       		moveq	#0,d1
000077CC 1228 0028                  		move.b	$28(a0),d1
000077D0 E749                       		lsl.w	#3,d1
000077D2 3401                       		move.w	d1,d2
000077D4 5041                       		addq.w	#8,d1
000077D6 D442                       		add.w	d2,d2
000077D8 43F8 D000                  		lea	($FFFFD000).w,a1
000077DC 4A69 0012                  		tst.w	$12(a1)
000077E0 6B00 0000                  		bmi.w	locret_751E
000077E4 3029 0008                  		move.w	8(a1),d0
000077E8 9068 0008                  		sub.w	8(a0),d0
000077EC D041                       		add.w	d1,d0
000077EE 6B00 0000                  		bmi.w	locret_751E
000077F2 B042                       		cmp.w	d2,d0
000077F4 6400 0000                  		bcc.w	locret_751E
000077F8 6000                       		bra.s	Platform2
000077FA                            ; End of function Obj11_Solid
000077FA                            
000077FA                            ; ---------------------------------------------------------------------------
000077FA                            ; Platform subroutine
000077FA                            ; ---------------------------------------------------------------------------
000077FA                            
000077FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077FA                            
000077FA                            
000077FA                            PlatformObject:
000077FA 43F8 D000                  		lea	($FFFFD000).w,a1
000077FE 4A69 0012                  		tst.w	$12(a1)
00007802 6B00 0000                  		bmi.w	locret_751E
00007806 3029 0008                  		move.w	8(a1),d0
0000780A 9068 0008                  		sub.w	8(a0),d0
0000780E D041                       		add.w	d1,d0
00007810 6B00 0000                  		bmi.w	locret_751E
00007814 D241                       		add.w	d1,d1
00007816 B041                       		cmp.w	d1,d0
00007818 6400 0000                  		bcc.w	locret_751E
0000781C                            
0000781C                            Platform2:
0000781C 3028 000C                  		move.w	$C(a0),d0
00007820 5140                       		subq.w	#8,d0
00007822                            
00007822                            Platform3:
00007822 3429 000C                  		move.w	$C(a1),d2
00007826 1229 0016                  		move.b	$16(a1),d1
0000782A 4881                       		ext.w	d1
0000782C D242                       		add.w	d2,d1
0000782E 5841                       		addq.w	#4,d1
00007830 9041                       		sub.w	d1,d0
00007832 6200 0000                  		bhi.w	locret_751E
00007836 0C40 FFF0                  		cmpi.w	#-$10,d0
0000783A 6500 0000                  		bcs.w	locret_751E
0000783E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007842 6B00 0000                  		bmi.w	locret_751E
00007846 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000784C 6400 0000                  		bcc.w	locret_751E
00007850 D440                       		add.w	d0,d2
00007852 5642                       		addq.w	#3,d2
00007854 3342 000C                  		move.w	d2,$C(a1)
00007858 5428 0024                  		addq.b	#2,$24(a0)
0000785C                            
0000785C                            loc_74AE:
0000785C 0829 0003 0022             		btst	#3,$22(a1)
00007862 6700                       		beq.s	loc_74DC
00007864 7000                       		moveq	#0,d0
00007866 1029 003D                  		move.b	$3D(a1),d0
0000786A ED48                       		lsl.w	#6,d0
0000786C 0680 00FF D000             		addi.l	#$FFD000,d0
00007872 2440                       		movea.l	d0,a2
00007874 08AA 0003 0022             		bclr	#3,$22(a2)
0000787A 422A 0025                  		clr.b	$25(a2)
0000787E 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007884 6600                       		bne.s	loc_74DC
00007886 552A 0024                  		subq.b	#2,$24(a2)
0000788A                            
0000788A                            loc_74DC:
0000788A 3008                       		move.w	a0,d0
0000788C 0440 D000                  		subi.w	#-$3000,d0
00007890 EC48                       		lsr.w	#6,d0
00007892 0240 007F                  		andi.w	#$7F,d0
00007896 1340 003D                  		move.b	d0,$3D(a1)
0000789A 137C 0000 0026             		move.b	#0,$26(a1)
000078A0 337C 0000 0012             		move.w	#0,$12(a1)
000078A6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000078AC 0829 0001 0022             		btst	#1,$22(a1)
000078B2 6700                       		beq.s	loc_7512
000078B4 2F08                       		move.l	a0,-(sp)
000078B6 2049                       		movea.l	a1,a0
000078B8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000078BE 205F                       		movea.l	(sp)+,a0
000078C0                            
000078C0                            loc_7512:
000078C0 08E9 0003 0022             		bset	#3,$22(a1)
000078C6 08E8 0003 0022             		bset	#3,$22(a0)
000078CC                            
000078CC                            locret_751E:
000078CC 4E75                       		rts	
000078CE                            ; End of function PlatformObject
000078CE                            
000078CE                            ; ---------------------------------------------------------------------------
000078CE                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000078CE                            ; ---------------------------------------------------------------------------
000078CE                            
000078CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078CE                            
000078CE                            
000078CE                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000078CE 43F8 D000                  		lea	($FFFFD000).w,a1
000078D2 4A69 0012                  		tst.w	$12(a1)
000078D6 6B00 FFF4                  		bmi.w	locret_751E
000078DA 3029 0008                  		move.w	8(a1),d0
000078DE 9068 0008                  		sub.w	8(a0),d0
000078E2 D041                       		add.w	d1,d0
000078E4 6BE6                       		bmi.s	locret_751E
000078E6 D241                       		add.w	d1,d1
000078E8 B041                       		cmp.w	d1,d0
000078EA 64E0                       		bcc.s	locret_751E
000078EC 0828 0000 0001             		btst	#0,1(a0)
000078F2 6700                       		beq.s	loc_754A
000078F4 4640                       		not.w	d0
000078F6 D041                       		add.w	d1,d0
000078F8                            
000078F8                            loc_754A:
000078F8 E248                       		lsr.w	#1,d0
000078FA 7600                       		moveq	#0,d3
000078FC 1632 0000                  		move.b	(a2,d0.w),d3
00007900 3028 000C                  		move.w	$C(a0),d0
00007904 9043                       		sub.w	d3,d0
00007906 6000 FF1A                  		bra.w	Platform3
0000790A                            ; End of function SlopeObject
0000790A                            
0000790A                            
0000790A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000790A                            
0000790A                            
0000790A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000790A 43F8 D000                  		lea	($FFFFD000).w,a1
0000790E 4A69 0012                  		tst.w	$12(a1)
00007912 6B00 FFB8                  		bmi.w	locret_751E
00007916 3029 0008                  		move.w	8(a1),d0
0000791A 9068 0008                  		sub.w	8(a0),d0
0000791E D041                       		add.w	d1,d0
00007920 6B00 FFAA                  		bmi.w	locret_751E
00007924 D241                       		add.w	d1,d1
00007926 B041                       		cmp.w	d1,d0
00007928 6400 FFA2                  		bcc.w	locret_751E
0000792C 3028 000C                  		move.w	$C(a0),d0
00007930 9043                       		sub.w	d3,d0
00007932 6000 FEEE                  		bra.w	Platform3
00007936                            ; End of function Obj15_Solid
00007936                            
00007936                            ; ===========================================================================
00007936                            
00007936                            Obj11_Action2:				; XREF: Obj11_Index
00007936 6100                       		bsr.s	Obj11_WalkOff
00007938 6100 0000                  		bsr.w	DisplaySprite
0000793C 6000 0000                  		bra.w	Obj11_ChkDel
00007940                            
00007940                            ; ---------------------------------------------------------------------------
00007940                            ; Subroutine allowing Sonic to walk off a bridge
00007940                            ; ---------------------------------------------------------------------------
00007940                            
00007940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007940                            
00007940                            
00007940                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007940 7200                       		moveq	#0,d1
00007942 1228 0028                  		move.b	$28(a0),d1
00007946 E749                       		lsl.w	#3,d1
00007948 3401                       		move.w	d1,d2
0000794A 5041                       		addq.w	#8,d1
0000794C 6100                       		bsr.s	ExitPlatform2
0000794E 6400                       		bcc.s	locret_75BE
00007950 E848                       		lsr.w	#4,d0
00007952 1140 003F                  		move.b	d0,$3F(a0)
00007956 1028 003E                  		move.b	$3E(a0),d0
0000795A 0C00 0040                  		cmpi.b	#$40,d0
0000795E 6700                       		beq.s	loc_75B6
00007960 5828 003E                  		addq.b	#4,$3E(a0)
00007964                            
00007964                            loc_75B6:
00007964 6100 0000                  		bsr.w	Obj11_Bend
00007968 6100 0000                  		bsr.w	Obj11_MoveSonic
0000796C                            
0000796C                            locret_75BE:
0000796C 4E75                       		rts	
0000796E                            ; End of function Obj11_WalkOff
0000796E                            
0000796E                            ; ---------------------------------------------------------------------------
0000796E                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000796E                            ; ---------------------------------------------------------------------------
0000796E                            
0000796E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000796E                            
0000796E                            
0000796E                            ExitPlatform:
0000796E 3401                       		move.w	d1,d2
00007970                            
00007970                            ExitPlatform2:
00007970 D442                       		add.w	d2,d2
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 0829 0001 0022             		btst	#1,$22(a1)
0000797C 6600                       		bne.s	loc_75E0
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6B00                       		bmi.s	loc_75E0
0000798A B042                       		cmp.w	d2,d0
0000798C 6500                       		bcs.s	locret_75F2
0000798E                            
0000798E                            loc_75E0:
0000798E 08A9 0003 0022             		bclr	#3,$22(a1)
00007994 117C 0002 0024             		move.b	#2,$24(a0)
0000799A 08A8 0003 0022             		bclr	#3,$22(a0)
000079A0                            
000079A0                            locret_75F2:
000079A0 4E75                       		rts	
000079A2                            ; End of function ExitPlatform
000079A2                            
000079A2                            
000079A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A2                            
000079A2                            
000079A2                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000079A2 7000                       		moveq	#0,d0
000079A4 1028 003F                  		move.b	$3F(a0),d0
000079A8 1030 0029                  		move.b	$29(a0,d0.w),d0
000079AC ED48                       		lsl.w	#6,d0
000079AE 0680 00FF D000             		addi.l	#$FFD000,d0
000079B4 2440                       		movea.l	d0,a2
000079B6 43F8 D000                  		lea	($FFFFD000).w,a1
000079BA 302A 000C                  		move.w	$C(a2),d0
000079BE 5140                       		subq.w	#8,d0
000079C0 7200                       		moveq	#0,d1
000079C2 1229 0016                  		move.b	$16(a1),d1
000079C6 9041                       		sub.w	d1,d0
000079C8 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000079CC 4E75                       		rts	
000079CE                            ; End of function Obj11_MoveSonic
000079CE                            
000079CE                            
000079CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079CE                            
000079CE                            
000079CE                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000079CE 1028 003E                  		move.b	$3E(a0),d0
000079D2 6100 B24E                  		bsr.w	CalcSine
000079D6 3800                       		move.w	d0,d4
000079D8 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000079DE 7000                       		moveq	#0,d0
000079E0 1028 0028                  		move.b	$28(a0),d0
000079E4 E948                       		lsl.w	#4,d0
000079E6 7600                       		moveq	#0,d3
000079E8 1628 003F                  		move.b	$3F(a0),d3
000079EC 3403                       		move.w	d3,d2
000079EE D640                       		add.w	d0,d3
000079F0 7A00                       		moveq	#0,d5
000079F2 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000079F8 1A35 3000                  		move.b	(a5,d3.w),d5
000079FC 0243 000F                  		andi.w	#$F,d3
00007A00 E94B                       		lsl.w	#4,d3
00007A02 47F4 3000                  		lea	(a4,d3.w),a3
00007A06 45E8 0029                  		lea	$29(a0),a2
00007A0A                            
00007A0A                            loc_765C:
00007A0A 7000                       		moveq	#0,d0
00007A0C 101A                       		move.b	(a2)+,d0
00007A0E ED48                       		lsl.w	#6,d0
00007A10 0680 00FF D000             		addi.l	#$FFD000,d0
00007A16 2240                       		movea.l	d0,a1
00007A18 7000                       		moveq	#0,d0
00007A1A 101B                       		move.b	(a3)+,d0
00007A1C 5240                       		addq.w	#1,d0
00007A1E C0C5                       		mulu.w	d5,d0
00007A20 C0C4                       		mulu.w	d4,d0
00007A22 4840                       		swap	d0
00007A24 D069 003C                  		add.w	$3C(a1),d0
00007A28 3340 000C                  		move.w	d0,$C(a1)
00007A2C 51CA FFDC                  		dbf	d2,loc_765C
00007A30 7000                       		moveq	#0,d0
00007A32 1028 0028                  		move.b	$28(a0),d0
00007A36 7600                       		moveq	#0,d3
00007A38 1628 003F                  		move.b	$3F(a0),d3
00007A3C 5203                       		addq.b	#1,d3
00007A3E 9600                       		sub.b	d0,d3
00007A40 4403                       		neg.b	d3
00007A42 6B00                       		bmi.s	locret_76CA
00007A44 3403                       		move.w	d3,d2
00007A46 E94B                       		lsl.w	#4,d3
00007A48 47F4 3000                  		lea	(a4,d3.w),a3
00007A4C D6C2                       		adda.w	d2,a3
00007A4E 5342                       		subq.w	#1,d2
00007A50 6500                       		bcs.s	locret_76CA
00007A52                            
00007A52                            loc_76A4:
00007A52 7000                       		moveq	#0,d0
00007A54 101A                       		move.b	(a2)+,d0
00007A56 ED48                       		lsl.w	#6,d0
00007A58 0680 00FF D000             		addi.l	#$FFD000,d0
00007A5E 2240                       		movea.l	d0,a1
00007A60 7000                       		moveq	#0,d0
00007A62 1023                       		move.b	-(a3),d0
00007A64 5240                       		addq.w	#1,d0
00007A66 C0C5                       		mulu.w	d5,d0
00007A68 C0C4                       		mulu.w	d4,d0
00007A6A 4840                       		swap	d0
00007A6C D069 003C                  		add.w	$3C(a1),d0
00007A70 3340 000C                  		move.w	d0,$C(a1)
00007A74 51CA FFDC                  		dbf	d2,loc_76A4
00007A78                            
00007A78                            locret_76CA:
00007A78 4E75                       		rts	
00007A7A                            ; End of function Obj11_Bend
00007A7A                            
00007A7A                            ; ===========================================================================
00007A7A                            ; ---------------------------------------------------------------------------
00007A7A                            ; GHZ bridge-bending data
00007A7A                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007A7A                            ; ---------------------------------------------------------------------------
00007A7A                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007B8A                            		even
00007B8A                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007C8A                            		even
00007C8A                            
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007C8A 3028 0008                  		move.w	8(a0),d0
00007C8E 0240 FF80                  		andi.w	#$FF80,d0
00007C92 3238 F700                  		move.w	($FFFFF700).w,d1
00007C96 0441 0080                  		subi.w	#$80,d1
00007C9A 0241 FF80                  		andi.w	#$FF80,d1
00007C9E 9041                       		sub.w	d1,d0
00007CA0 0C40 0280                  		cmpi.w	#$280,d0
00007CA4 6200 0000                  		bhi.w	Obj11_DelAll
00007CA8 4E75                       		rts	
00007CAA                            ; ===========================================================================
00007CAA                            
00007CAA                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007CAA 7400                       		moveq	#0,d2
00007CAC 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007CB0 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007CB2 5302                       		subq.b	#1,d2		; subtract 1
00007CB4 6500                       		bcs.s	Obj11_Delete
00007CB6                            
00007CB6                            Obj11_DelLoop:
00007CB6 7000                       		moveq	#0,d0
00007CB8 101A                       		move.b	(a2)+,d0
00007CBA ED48                       		lsl.w	#6,d0
00007CBC 0680 00FF D000             		addi.l	#$FFD000,d0
00007CC2 2240                       		movea.l	d0,a1
00007CC4 B048                       		cmp.w	a0,d0
00007CC6 6700                       		beq.s	loc_791E
00007CC8 6100 0000                  		bsr.w	DeleteObject2
00007CCC                            
00007CCC                            loc_791E:
00007CCC 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007CD0                            
00007CD0                            Obj11_Delete:
00007CD0 6100 0000                  		bsr.w	DeleteObject
00007CD4 4E75                       		rts	
00007CD6                            ; ===========================================================================
00007CD6                            
00007CD6                            Obj11_Delete2:				; XREF: Obj11_Index
00007CD6 6100 0000                  		bsr.w	DeleteObject
00007CDA 4E75                       		rts	
00007CDC                            ; ===========================================================================
00007CDC                            
00007CDC                            Obj11_Display2:				; XREF: Obj11_Index
00007CDC 6100 0000                  		bsr.w	DisplaySprite
00007CE0 4E75                       		rts	
00007CE2                            ; ===========================================================================
00007CE2                            ; ---------------------------------------------------------------------------
00007CE2                            ; Sprite mappings - GHZ	bridge
00007CE2                            ; ---------------------------------------------------------------------------
00007CE2                            Map_obj11:
00007CE2                            	include "_maps\obj11.asm"
00007CE2                            ; ---------------------------------------------------------------------------
00007CE2                            ; Sprite mappings - GHZ	bridge
00007CE2                            ; ---------------------------------------------------------------------------
00007CE2 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007CE6 0000                       		dc.w byte_794B-Map_obj11
00007CE8 01                         byte_793A:	dc.b 1
00007CE9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007CEE 02                         byte_7940:	dc.b 2
00007CEF F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007CF4 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007CF9 01                         byte_794B:	dc.b 1
00007CFA FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007D00 00                         		even
00007D00 00                         		even
00007D00                            
00007D00                            ; ===========================================================================
00007D00                            ; ---------------------------------------------------------------------------
00007D00                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007D00                            ;	    - spiked ball on a chain (SBZ)
00007D00                            ; ---------------------------------------------------------------------------
00007D00                            
00007D00                            Obj15:					; XREF: Obj_Index
00007D00 7000                       		moveq	#0,d0
00007D02 1028 0024                  		move.b	$24(a0),d0
00007D06 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007D0A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007D0E                            ; ===========================================================================
00007D0E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007D12 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007D16 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007D1A 0000                       		dc.w Obj15_Action-Obj15_Index
00007D1C                            ; ===========================================================================
00007D1C                            
00007D1C                            Obj15_Main:				; XREF: Obj15_Index
00007D1C 5428 0024                  		addq.b	#2,$24(a0)
00007D20 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007D28 317C 4380 0002             		move.w	#$4380,2(a0)
00007D2E 117C 0004 0001             		move.b	#4,1(a0)
00007D34 117C 0003 0018             		move.b	#3,$18(a0)
00007D3A 117C 0018 0019             		move.b	#$18,$19(a0)
00007D40 117C 0008 0016             		move.b	#8,$16(a0)
00007D46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007D4C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007D52 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007D58 6600                       		bne.s	Obj15_NotSLZ
00007D5A 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007D62 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007D68 117C 0020 0019             		move.b	#$20,$19(a0)
00007D6E 117C 0010 0016             		move.b	#$10,$16(a0)
00007D74 117C 0099 0020             		move.b	#$99,$20(a0)
00007D7A                            
00007D7A                            Obj15_NotSLZ:
00007D7A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007D80 6600                       		bne.s	Obj15_SetLength
00007D82 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007D8A 317C 0391 0002             		move.w	#$391,2(a0)
00007D90 117C 0018 0019             		move.b	#$18,$19(a0)
00007D96 117C 0018 0016             		move.b	#$18,$16(a0)
00007D9C 117C 0086 0020             		move.b	#$86,$20(a0)
00007DA2 117C 000C 0024             		move.b	#$C,$24(a0)
00007DA8                            
00007DA8                            Obj15_SetLength:
00007DA8 1810                       		move.b	0(a0),d4
00007DAA 7200                       		moveq	#0,d1
00007DAC 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007DB0 1212                       		move.b	(a2),d1		; move a2 to d1
00007DB2 3F01                       		move.w	d1,-(sp)
00007DB4 0241 000F                  		andi.w	#$F,d1
00007DB8 14FC 0000                  		move.b	#0,(a2)+
00007DBC 3601                       		move.w	d1,d3
00007DBE E94B                       		lsl.w	#4,d3
00007DC0 5003                       		addq.b	#8,d3
00007DC2 1143 003C                  		move.b	d3,$3C(a0)
00007DC6 5103                       		subq.b	#8,d3
00007DC8 4A28 001A                  		tst.b	$1A(a0)
00007DCC 6700                       		beq.s	Obj15_MakeChain
00007DCE 5003                       		addq.b	#8,d3
00007DD0 5341                       		subq.w	#1,d1
00007DD2                            
00007DD2                            Obj15_MakeChain:
00007DD2 6100 0000                  		bsr.w	SingleObjLoad
00007DD6 6600                       		bne.s	loc_7A92
00007DD8 5228 0028                  		addq.b	#1,$28(a0)
00007DDC 3A09                       		move.w	a1,d5
00007DDE 0445 D000                  		subi.w	#-$3000,d5
00007DE2 EC4D                       		lsr.w	#6,d5
00007DE4 0245 007F                  		andi.w	#$7F,d5
00007DE8 14C5                       		move.b	d5,(a2)+
00007DEA 137C 000A 0024             		move.b	#$A,$24(a1)
00007DF0 1284                       		move.b	d4,0(a1)	; load swinging	object
00007DF2 2368 0004 0004             		move.l	4(a0),4(a1)
00007DF8 3368 0002 0002             		move.w	2(a0),2(a1)
00007DFE 08A9 0006 0002             		bclr	#6,2(a1)
00007E04 137C 0004 0001             		move.b	#4,1(a1)
00007E0A 137C 0004 0018             		move.b	#4,$18(a1)
00007E10 137C 0008 0019             		move.b	#8,$19(a1)
00007E16 137C 0001 001A             		move.b	#1,$1A(a1)
00007E1C 1343 003C                  		move.b	d3,$3C(a1)
00007E20 0403 0010                  		subi.b	#$10,d3
00007E24 6400                       		bcc.s	loc_7A8E
00007E26 137C 0002 001A             		move.b	#2,$1A(a1)
00007E2C 137C 0003 0018             		move.b	#3,$18(a1)
00007E32 08E9 0006 0002             		bset	#6,2(a1)
00007E38                            
00007E38                            loc_7A8E:
00007E38 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007E3C                            
00007E3C                            loc_7A92:
00007E3C 3A08                       		move.w	a0,d5
00007E3E 0445 D000                  		subi.w	#-$3000,d5
00007E42 EC4D                       		lsr.w	#6,d5
00007E44 0245 007F                  		andi.w	#$7F,d5
00007E48 14C5                       		move.b	d5,(a2)+
00007E4A 317C 4080 0026             		move.w	#$4080,$26(a0)
00007E50 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007E56 321F                       		move.w	(sp)+,d1
00007E58 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007E5C 6700                       		beq.s	loc_7AD4	; if not, branch
00007E5E 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007E66 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007E6C 117C 0001 001A             		move.b	#1,$1A(a0)
00007E72 117C 0002 0018             		move.b	#2,$18(a0)
00007E78 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007E7E                            
00007E7E                            loc_7AD4:
00007E7E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007E84 6700                       		beq.s	Obj15_Action	; if yes, branch
00007E86                            
00007E86                            Obj15_SetSolid:				; XREF: Obj15_Index
00007E86 7200                       		moveq	#0,d1
00007E88 1228 0019                  		move.b	$19(a0),d1
00007E8C 7600                       		moveq	#0,d3
00007E8E 1628 0016                  		move.b	$16(a0),d3
00007E92 6100 FA76                  		bsr.w	Obj15_Solid
00007E96                            
00007E96                            Obj15_Action:				; XREF: Obj15_Index
00007E96 6100 0000                  		bsr.w	Obj15_Move
00007E9A 6100 0000                  		bsr.w	DisplaySprite
00007E9E 6000 0000                  		bra.w	Obj15_ChkDel
00007EA2                            ; ===========================================================================
00007EA2                            
00007EA2                            Obj15_Action2:				; XREF: Obj15_Index
00007EA2 7200                       		moveq	#0,d1
00007EA4 1228 0019                  		move.b	$19(a0),d1
00007EA8 6100 FAC4                  		bsr.w	ExitPlatform
00007EAC 3F28 0008                  		move.w	8(a0),-(sp)
00007EB0 6100 0000                  		bsr.w	Obj15_Move
00007EB4 341F                       		move.w	(sp)+,d2
00007EB6 7600                       		moveq	#0,d3
00007EB8 1628 0016                  		move.b	$16(a0),d3
00007EBC 5203                       		addq.b	#1,d3
00007EBE 6100 0000                  		bsr.w	MvSonicOnPtfm
00007EC2 6100 0000                  		bsr.w	DisplaySprite
00007EC6 6000 0000                  		bra.w	Obj15_ChkDel
00007ECA                            
00007ECA 4E75                       		rts
00007ECC                            
00007ECC                            ; ---------------------------------------------------------------------------
00007ECC                            ; Subroutine to	change Sonic's position with a platform
00007ECC                            ; ---------------------------------------------------------------------------
00007ECC                            
00007ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ECC                            
00007ECC                            
00007ECC                            MvSonicOnPtfm:
00007ECC 43F8 D000                  		lea	($FFFFD000).w,a1
00007ED0 3028 000C                  		move.w	$C(a0),d0
00007ED4 9043                       		sub.w	d3,d0
00007ED6 6000                       		bra.s	MvSonic2
00007ED8                            ; End of function MvSonicOnPtfm
00007ED8                            
00007ED8                            ; ---------------------------------------------------------------------------
00007ED8                            ; Subroutine to	change Sonic's position with a platform
00007ED8                            ; ---------------------------------------------------------------------------
00007ED8                            
00007ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED8                            
00007ED8                            
00007ED8                            MvSonicOnPtfm2:
00007ED8 43F8 D000                  		lea	($FFFFD000).w,a1
00007EDC 3028 000C                  		move.w	$C(a0),d0
00007EE0 0440 0009                  		subi.w	#9,d0
00007EE4                            
00007EE4                            MvSonic2:
00007EE4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007EE8 6B00                       		bmi.s	locret_7B62
00007EEA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007EF0 6400                       		bcc.s	locret_7B62
00007EF2 4A78 FE08                  		tst.w	($FFFFFE08).w
00007EF6 6600                       		bne.s	locret_7B62
00007EF8 7200                       		moveq	#0,d1
00007EFA 1229 0016                  		move.b	$16(a1),d1
00007EFE 9041                       		sub.w	d1,d0
00007F00 3340 000C                  		move.w	d0,$C(a1)
00007F04 9468 0008                  		sub.w	8(a0),d2
00007F08 9569 0008                  		sub.w	d2,8(a1)
00007F0C                            
00007F0C                            locret_7B62:
00007F0C 4E75                       		rts	
00007F0E                            ; End of function MvSonicOnPtfm2
00007F0E                            
00007F0E                            
00007F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F0E                            
00007F0E                            
00007F0E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007F0E 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007F12 323C 0080                  		move.w	#$80,d1
00007F16 0828 0000 0022             		btst	#0,$22(a0)
00007F1C 6700                       		beq.s	loc_7B78
00007F1E 4440                       		neg.w	d0
00007F20 D041                       		add.w	d1,d0
00007F22                            
00007F22                            loc_7B78:
00007F22 6000                       		bra.s	Obj15_Move2
00007F24                            ; End of function Obj15_Move
00007F24                            
00007F24                            
00007F24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F24                            
00007F24                            
00007F24                            Obj48_Move:				; XREF: Obj48_Display2
00007F24 4A28 003D                  		tst.b	$3D(a0)
00007F28 6600                       		bne.s	loc_7B9C
00007F2A 3028 003E                  		move.w	$3E(a0),d0
00007F2E 5040                       		addq.w	#8,d0
00007F30 3140 003E                  		move.w	d0,$3E(a0)
00007F34 D168 0026                  		add.w	d0,$26(a0)
00007F38 0C40 0200                  		cmpi.w	#$200,d0
00007F3C 6600                       		bne.s	loc_7BB6
00007F3E 117C 0001 003D             		move.b	#1,$3D(a0)
00007F44 6000                       		bra.s	loc_7BB6
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            loc_7B9C:
00007F46 3028 003E                  		move.w	$3E(a0),d0
00007F4A 5140                       		subq.w	#8,d0
00007F4C 3140 003E                  		move.w	d0,$3E(a0)
00007F50 D168 0026                  		add.w	d0,$26(a0)
00007F54 0C40 FE00                  		cmpi.w	#-$200,d0
00007F58 6600                       		bne.s	loc_7BB6
00007F5A 117C 0000 003D             		move.b	#0,$3D(a0)
00007F60                            
00007F60                            loc_7BB6:
00007F60 1028 0026                  		move.b	$26(a0),d0
00007F64                            ; End of function Obj48_Move
00007F64                            
00007F64                            
00007F64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F64                            
00007F64                            
00007F64                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007F64 6100 ACBC                  		bsr.w	CalcSine
00007F68 3428 0038                  		move.w	$38(a0),d2
00007F6C 3628 003A                  		move.w	$3A(a0),d3
00007F70 45E8 0028                  		lea	$28(a0),a2
00007F74 7C00                       		moveq	#0,d6
00007F76 1C1A                       		move.b	(a2)+,d6
00007F78                            
00007F78                            loc_7BCE:
00007F78 7800                       		moveq	#0,d4
00007F7A 181A                       		move.b	(a2)+,d4
00007F7C ED4C                       		lsl.w	#6,d4
00007F7E 0684 00FF D000             		addi.l	#$FFD000,d4
00007F84 2244                       		movea.l	d4,a1
00007F86 7800                       		moveq	#0,d4
00007F88 1829 003C                  		move.b	$3C(a1),d4
00007F8C 2A04                       		move.l	d4,d5
00007F8E C9C0                       		muls.w	d0,d4
00007F90 E084                       		asr.l	#8,d4
00007F92 CBC1                       		muls.w	d1,d5
00007F94 E085                       		asr.l	#8,d5
00007F96 D842                       		add.w	d2,d4
00007F98 DA43                       		add.w	d3,d5
00007F9A 3344 000C                  		move.w	d4,$C(a1)
00007F9E 3345 0008                  		move.w	d5,8(a1)
00007FA2 51CE FFD4                  		dbf	d6,loc_7BCE
00007FA6 4E75                       		rts	
00007FA8                            ; End of function Obj15_Move2
00007FA8                            
00007FA8                            ; ===========================================================================
00007FA8                            
00007FA8                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007FA8 3028 003A                  		move.w	$3A(a0),d0
00007FAC 0240 FF80                  		andi.w	#$FF80,d0
00007FB0 3238 F700                  		move.w	($FFFFF700).w,d1
00007FB4 0441 0080                  		subi.w	#$80,d1
00007FB8 0241 FF80                  		andi.w	#$FF80,d1
00007FBC 9041                       		sub.w	d1,d0
00007FBE 0C40 0280                  		cmpi.w	#$280,d0
00007FC2 6200 0000                  		bhi.w	Obj15_DelAll
00007FC6 4E75                       		rts	
00007FC8                            ; ===========================================================================
00007FC8                            
00007FC8                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007FC8 7400                       		moveq	#0,d2
00007FCA 45E8 0028                  		lea	$28(a0),a2
00007FCE 141A                       		move.b	(a2)+,d2
00007FD0                            
00007FD0                            Obj15_DelLoop:
00007FD0 7000                       		moveq	#0,d0
00007FD2 101A                       		move.b	(a2)+,d0
00007FD4 ED48                       		lsl.w	#6,d0
00007FD6 0680 00FF D000             		addi.l	#$FFD000,d0
00007FDC 2240                       		movea.l	d0,a1
00007FDE 6100 0000                  		bsr.w	DeleteObject2
00007FE2 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007FE6 4E75                       		rts	
00007FE8                            ; ===========================================================================
00007FE8                            
00007FE8                            Obj15_Delete:				; XREF: Obj15_Index
00007FE8 6100 0000                  		bsr.w	DeleteObject
00007FEC 4E75                       		rts	
00007FEE                            ; ===========================================================================
00007FEE                            
00007FEE                            Obj15_Display:				; XREF: Obj15_Index
00007FEE 6000 0000                  		bra.w	DisplaySprite
00007FF2                            ; ===========================================================================
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            Map_obj15:
00007FF2                            	include "_maps\obj15ghz.asm"
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2 0000                       		dc.w byte_7C4E-Map_obj15
00007FF4 0000                       		dc.w byte_7C59-Map_obj15
00007FF6 0000                       		dc.w byte_7C5F-Map_obj15
00007FF8 02                         byte_7C4E:	dc.b 2
00007FF9 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007FFE F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008003 01                         byte_7C59:	dc.b 1
00008004 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008009 01                         byte_7C5F:	dc.b 1
0000800A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008010 00                         		even
00008010 00                         		even
00008010                            
00008010                            ; ---------------------------------------------------------------------------
00008010                            ; Sprite mappings - SLZ	swinging platforms
00008010                            ; ---------------------------------------------------------------------------
00008010                            Map_obj15a:
00008010                            	include "_maps\obj15slz.asm"
00008010                            ; ---------------------------------------------------------------------------
00008010                            ; Sprite mappings - SLZ	swinging platforms
00008010                            ; ---------------------------------------------------------------------------
00008010 0000                       		dc.w byte_7C6C-Map_obj15a
00008012 0000                       		dc.w byte_7C95-Map_obj15a
00008014 0000                       		dc.w byte_7C9B-Map_obj15a
00008016 08                         byte_7C6C:	dc.b 8
00008017 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000801C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008021 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008026 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000802B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008030 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008035 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000803A 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000803F 01                         byte_7C95:	dc.b 1
00008040 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008045 01                         byte_7C9B:	dc.b 1
00008046 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000804C 00                         		even
0000804C 00                         		even
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            ; ---------------------------------------------------------------------------
0000804C                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000804C                            ; ---------------------------------------------------------------------------
0000804C                            
0000804C                            Obj17:					; XREF: Obj_Index
0000804C 7000                       		moveq	#0,d0
0000804E 1028 0024                  		move.b	$24(a0),d0
00008052 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008056 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000805A                            ; ===========================================================================
0000805A 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000805C 0000                       		dc.w Obj17_Action-Obj17_Index
0000805E 0000                       		dc.w Obj17_Action-Obj17_Index
00008060 0000                       		dc.w Obj17_Delete-Obj17_Index
00008062 0000                       		dc.w Obj17_Display-Obj17_Index
00008064                            ; ===========================================================================
00008064                            
00008064                            Obj17_Main:				; XREF: Obj17_Index
00008064 5428 0024                  		addq.b	#2,$24(a0)
00008068 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008070 317C 4398 0002             		move.w	#$4398,2(a0)
00008076 117C 0007 0022             		move.b	#7,$22(a0)
0000807C 117C 0004 0001             		move.b	#4,1(a0)
00008082 117C 0003 0018             		move.b	#3,$18(a0)
00008088 117C 0008 0019             		move.b	#8,$19(a0)
0000808E 3428 000C                  		move.w	$C(a0),d2
00008092 3628 0008                  		move.w	8(a0),d3
00008096 1810                       		move.b	0(a0),d4
00008098 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000809C 7200                       		moveq	#0,d1
0000809E 1212                       		move.b	(a2),d1		; move a2 to d1
000080A0 14FC 0000                  		move.b	#0,(a2)+
000080A4 3001                       		move.w	d1,d0
000080A6 E248                       		lsr.w	#1,d0
000080A8 E948                       		lsl.w	#4,d0
000080AA 9640                       		sub.w	d0,d3
000080AC 5501                       		subq.b	#2,d1
000080AE 6500                       		bcs.s	Obj17_Action
000080B0 7C00                       		moveq	#0,d6
000080B2                            
000080B2                            Obj17_MakeHelix:
000080B2 6100 0000                  		bsr.w	SingleObjLoad
000080B6 6600                       		bne.s	Obj17_Action
000080B8 5228 0028                  		addq.b	#1,$28(a0)
000080BC 3A09                       		move.w	a1,d5
000080BE 0445 D000                  		subi.w	#$D000,d5
000080C2 EC4D                       		lsr.w	#6,d5
000080C4 0245 007F                  		andi.w	#$7F,d5
000080C8 14C5                       		move.b	d5,(a2)+
000080CA 137C 0008 0024             		move.b	#8,$24(a1)
000080D0 1284                       		move.b	d4,0(a1)
000080D2 3342 000C                  		move.w	d2,$C(a1)
000080D6 3343 0008                  		move.w	d3,8(a1)
000080DA 2368 0004 0004             		move.l	4(a0),4(a1)
000080E0 337C 4398 0002             		move.w	#$4398,2(a1)
000080E6 137C 0004 0001             		move.b	#4,1(a1)
000080EC 137C 0003 0018             		move.b	#3,$18(a1)
000080F2 137C 0008 0019             		move.b	#8,$19(a1)
000080F8 1346 003E                  		move.b	d6,$3E(a1)
000080FC 5206                       		addq.b	#1,d6
000080FE 0206 0007                  		andi.b	#7,d6
00008102 0643 0010                  		addi.w	#$10,d3
00008106 B668 0008                  		cmp.w	8(a0),d3
0000810A 6600                       		bne.s	loc_7D78
0000810C 1146 003E                  		move.b	d6,$3E(a0)
00008110 5206                       		addq.b	#1,d6
00008112 0206 0007                  		andi.b	#7,d6
00008116 0643 0010                  		addi.w	#$10,d3
0000811A 5228 0028                  		addq.b	#1,$28(a0)
0000811E                            
0000811E                            loc_7D78:
0000811E 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008122                            
00008122                            Obj17_Action:				; XREF: Obj17_Index
00008122 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008126 6100 0000                  		bsr.w	DisplaySprite
0000812A 6000 0000                  		bra.w	Obj17_ChkDel
0000812E                            
0000812E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000812E                            
0000812E                            
0000812E                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000812E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008132 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008138 D028 003E                  		add.b	$3E(a0),d0
0000813C 0200 0007                  		andi.b	#7,d0
00008140 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008144 6600                       		bne.s	locret_7DA6
00008146 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000814C                            
0000814C                            locret_7DA6:
0000814C 4E75                       		rts	
0000814E                            ; End of function Obj17_RotateSpikes
0000814E                            
0000814E                            ; ===========================================================================
0000814E                            
0000814E                            Obj17_ChkDel:				; XREF: Obj17_Action
0000814E 3028 0008                  		move.w	8(a0),d0
00008152 0240 FF80                  		andi.w	#$FF80,d0
00008156 3238 F700                  		move.w	($FFFFF700).w,d1
0000815A 0441 0080                  		subi.w	#$80,d1
0000815E 0241 FF80                  		andi.w	#$FF80,d1
00008162 9041                       		sub.w	d1,d0
00008164 0C40 0280                  		cmpi.w	#$280,d0
00008168 6200 0000                  		bhi.w	Obj17_DelAll
0000816C 4E75                       		rts	
0000816E                            ; ===========================================================================
0000816E                            
0000816E                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000816E 7400                       		moveq	#0,d2
00008170 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008174 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008176 5502                       		subq.b	#2,d2
00008178 6500                       		bcs.s	Obj17_Delete
0000817A                            
0000817A                            Obj17_DelLoop:
0000817A 7000                       		moveq	#0,d0
0000817C 101A                       		move.b	(a2)+,d0
0000817E ED48                       		lsl.w	#6,d0
00008180 0680 00FF D000             		addi.l	#$FFD000,d0
00008186 2240                       		movea.l	d0,a1
00008188 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000818C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008190                            
00008190                            Obj17_Delete:				; XREF: Obj17_Index
00008190 6100 0000                  		bsr.w	DeleteObject
00008194 4E75                       		rts	
00008196                            ; ===========================================================================
00008196                            
00008196                            Obj17_Display:				; XREF: Obj17_Index
00008196 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000819A 6000 0000                  		bra.w	DisplaySprite
0000819E                            ; ===========================================================================
0000819E                            ; ---------------------------------------------------------------------------
0000819E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000819E                            ; ---------------------------------------------------------------------------
0000819E                            Map_obj17:
0000819E                            	include "_maps\obj17.asm"
0000819E                            ; ---------------------------------------------------------------------------
0000819E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000819E                            ; ---------------------------------------------------------------------------
0000819E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000081A2 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000081A6 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000081AA 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000081AE 01                         byte_7E08:	dc.b 1
000081AF F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000081B4 01                         byte_7E0E:	dc.b 1
000081B5 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000081BA 01                         byte_7E14:	dc.b 1
000081BB F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000081C0 01                         byte_7E1A:	dc.b 1
000081C1 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000081C6 01                         byte_7E20:	dc.b 1
000081C7 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000081CC 01                         byte_7E26:	dc.b 1
000081CD 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000081D2 01                         byte_7E2C:	dc.b 1
000081D3 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000081D8                            		even
000081D8                            		even
000081D8                            
000081D8                            ; ===========================================================================
000081D8                            ; ---------------------------------------------------------------------------
000081D8                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000081D8                            ; ---------------------------------------------------------------------------
000081D8                            
000081D8                            Obj18:					; XREF: Obj_Index
000081D8 7000                       		moveq	#0,d0
000081DA 1028 0024                  		move.b	$24(a0),d0
000081DE 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000081E2 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000081E6                            ; ===========================================================================
000081E6 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000081E8 0000                       		dc.w Obj18_Solid-Obj18_Index
000081EA 0000                       		dc.w Obj18_Action2-Obj18_Index
000081EC 0000                       		dc.w Obj18_Delete-Obj18_Index
000081EE 0000                       		dc.w Obj18_Action-Obj18_Index
000081F0                            ; ===========================================================================
000081F0                            
000081F0                            Obj18_Main:				; XREF: Obj18_Index
000081F0 5428 0024                  		addq.b	#2,$24(a0)
000081F4 317C 4000 0002             		move.w	#$4000,2(a0)
000081FA 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008202 117C 0020 0019             		move.b	#$20,$19(a0)
00008208 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000820E 6600                       		bne.s	Obj18_NotSYZ
00008210 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008218 117C 0020 0019             		move.b	#$20,$19(a0)
0000821E                            
0000821E                            Obj18_NotSYZ:
0000821E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008224 6600                       		bne.s	Obj18_NotSLZ
00008226 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000822E 117C 0020 0019             		move.b	#$20,$19(a0)
00008234 317C 4000 0002             		move.w	#$4000,2(a0)
0000823A 117C 0003 0028             		move.b	#3,$28(a0)
00008240                            
00008240                            Obj18_NotSLZ:
00008240 117C 0004 0001             		move.b	#4,1(a0)
00008246 117C 0004 0018             		move.b	#4,$18(a0)
0000824C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008252 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008258 3168 0008 0032             		move.w	8(a0),$32(a0)
0000825E 317C 0080 0026             		move.w	#$80,$26(a0)
00008264 7200                       		moveq	#0,d1
00008266 1028 0028                  		move.b	$28(a0),d0
0000826A 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000826E 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008270 5201                       		addq.b	#1,d1		; use frame #1
00008272 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008278                            
00008278                            Obj18_SetFrame:
00008278 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000827C                            
0000827C                            Obj18_Solid:				; XREF: Obj18_Index
0000827C 4A28 0038                  		tst.b	$38(a0)
00008280 6700                       		beq.s	loc_7EE0
00008282 5928 0038                  		subq.b	#4,$38(a0)
00008286                            
00008286                            loc_7EE0:
00008286 7200                       		moveq	#0,d1
00008288 1228 0019                  		move.b	$19(a0),d1
0000828C 6100 F56C                  		bsr.w	PlatformObject
00008290                            
00008290                            Obj18_Action:				; XREF: Obj18_Index
00008290 6100 0000                  		bsr.w	Obj18_Move
00008294 6100 0000                  		bsr.w	Obj18_Nudge
00008298 6100 0000                  		bsr.w	DisplaySprite
0000829C 6000 0000                  		bra.w	Obj18_ChkDel
000082A0                            ; ===========================================================================
000082A0                            
000082A0                            Obj18_Action2:				; XREF: Obj18_Index
000082A0 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000082A6 6700                       		beq.s	loc_7F06
000082A8 5828 0038                  		addq.b	#4,$38(a0)
000082AC                            
000082AC                            loc_7F06:
000082AC 7200                       		moveq	#0,d1
000082AE 1228 0019                  		move.b	$19(a0),d1
000082B2 6100 F6BA                  		bsr.w	ExitPlatform
000082B6 3F28 0008                  		move.w	8(a0),-(sp)
000082BA 6100 0000                  		bsr.w	Obj18_Move
000082BE 6100 0000                  		bsr.w	Obj18_Nudge
000082C2 341F                       		move.w	(sp)+,d2
000082C4 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000082C8 6100 0000                  		bsr.w	DisplaySprite
000082CC 6000 0000                  		bra.w	Obj18_ChkDel
000082D0                            
000082D0 4E75                       		rts
000082D2                            
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            ; Subroutine to	move platform slightly when you	stand on it
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            
000082D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082D2                            
000082D2                            
000082D2                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000082D2 1028 0038                  		move.b	$38(a0),d0
000082D6 6100 A94A                  		bsr.w	CalcSine
000082DA 323C 0400                  		move.w	#$400,d1
000082DE C1C1                       		muls.w	d1,d0
000082E0 4840                       		swap	d0
000082E2 D068 002C                  		add.w	$2C(a0),d0
000082E6 3140 000C                  		move.w	d0,$C(a0)
000082EA 4E75                       		rts	
000082EC                            ; End of function Obj18_Nudge
000082EC                            
000082EC                            ; ---------------------------------------------------------------------------
000082EC                            ; Subroutine to	move platforms
000082EC                            ; ---------------------------------------------------------------------------
000082EC                            
000082EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EC                            
000082EC                            
000082EC                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000082EC 7000                       		moveq	#0,d0
000082EE 1028 0028                  		move.b	$28(a0),d0
000082F2 0240 000F                  		andi.w	#$F,d0
000082F6 D040                       		add.w	d0,d0
000082F8 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000082FC 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008300                            ; End of function Obj18_Move
00008300                            
00008300                            ; ===========================================================================
00008300 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008304 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008308 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000830C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008310 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008314 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008318 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000831A                            ; ===========================================================================
0000831A                            
0000831A                            Obj18_Type00:
0000831A 4E75                       		rts			; platform 00 doesn't move
0000831C                            ; ===========================================================================
0000831C                            
0000831C                            Obj18_Type05:
0000831C 3028 0032                  		move.w	$32(a0),d0
00008320 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008324 4401                       		neg.b	d1		; reverse platform-motion
00008326 0601 0040                  		addi.b	#$40,d1
0000832A 6000                       		bra.s	Obj18_01_Move
0000832C                            ; ===========================================================================
0000832C                            
0000832C                            Obj18_Type01:
0000832C 3028 0032                  		move.w	$32(a0),d0
00008330 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008334 0401 0040                  		subi.b	#$40,d1
00008338                            
00008338                            Obj18_01_Move:
00008338 4881                       		ext.w	d1
0000833A D041                       		add.w	d1,d0
0000833C 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008340 6000 0000                  		bra.w	Obj18_ChgMotion
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Type0C:
00008344 3028 0034                  		move.w	$34(a0),d0
00008348 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000834C 4401                       		neg.b	d1		; reverse platform-motion
0000834E 0601 0030                  		addi.b	#$30,d1
00008352 6000                       		bra.s	Obj18_02_Move
00008354                            ; ===========================================================================
00008354                            
00008354                            Obj18_Type0B:
00008354 3028 0034                  		move.w	$34(a0),d0
00008358 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000835C 0401 0030                  		subi.b	#$30,d1
00008360 6000                       		bra.s	Obj18_02_Move
00008362                            ; ===========================================================================
00008362                            
00008362                            Obj18_Type06:
00008362 3028 0034                  		move.w	$34(a0),d0
00008366 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000836A 4401                       		neg.b	d1		; reverse platform-motion
0000836C 0601 0040                  		addi.b	#$40,d1
00008370 6000                       		bra.s	Obj18_02_Move
00008372                            ; ===========================================================================
00008372                            
00008372                            Obj18_Type02:
00008372 3028 0034                  		move.w	$34(a0),d0
00008376 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000837A 0401 0040                  		subi.b	#$40,d1
0000837E                            
0000837E                            Obj18_02_Move:
0000837E 4881                       		ext.w	d1
00008380 D041                       		add.w	d1,d0
00008382 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008386 6000 0000                  		bra.w	Obj18_ChgMotion
0000838A                            ; ===========================================================================
0000838A                            
0000838A                            Obj18_Type03:
0000838A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000838E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008390 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008396 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008398 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000839E                            
0000839E                            Obj18_03_NoMove:
0000839E 4E75                       		rts	
000083A0                            ; ===========================================================================
000083A0                            
000083A0                            Obj18_03_Wait:
000083A0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000083A4 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000083A6 317C 0020 003A             		move.w	#32,$3A(a0)
000083AC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000083B0 4E75                       		rts	
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Obj18_Type04:
000083B2 4A68 003A                  		tst.w	$3A(a0)
000083B6 6700                       		beq.s	loc_8048
000083B8 5368 003A                  		subq.w	#1,$3A(a0)
000083BC 6600                       		bne.s	loc_8048
000083BE 0828 0003 0022             		btst	#3,$22(a0)
000083C4 6700                       		beq.s	loc_8042
000083C6 08E9 0001 0022             		bset	#1,$22(a1)
000083CC 08A9 0003 0022             		bclr	#3,$22(a1)
000083D2 137C 0002 0024             		move.b	#2,$24(a1)
000083D8 08A8 0003 0022             		bclr	#3,$22(a0)
000083DE 4228 0025                  		clr.b	$25(a0)
000083E2 3368 0012 0012             		move.w	$12(a0),$12(a1)
000083E8                            
000083E8                            loc_8042:
000083E8 117C 0008 0024             		move.b	#8,$24(a0)
000083EE                            
000083EE                            loc_8048:
000083EE 2628 002C                  		move.l	$2C(a0),d3
000083F2 3028 0012                  		move.w	$12(a0),d0
000083F6 48C0                       		ext.l	d0
000083F8 E180                       		asl.l	#8,d0
000083FA D680                       		add.l	d0,d3
000083FC 2143 002C                  		move.l	d3,$2C(a0)
00008400 0668 0038 0012             		addi.w	#$38,$12(a0)
00008406 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000840A 0640 00E0                  		addi.w	#$E0,d0
0000840E B068 002C                  		cmp.w	$2C(a0),d0
00008412 6400                       		bcc.s	locret_8074
00008414 117C 0006 0024             		move.b	#6,$24(a0)
0000841A                            
0000841A                            locret_8074:
0000841A 4E75                       		rts	
0000841C                            ; ===========================================================================
0000841C                            
0000841C                            Obj18_Type07:
0000841C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008420 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008422 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008426 7000                       		moveq	#0,d0
00008428 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000842C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000842E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008432 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008434 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000843A                            
0000843A                            Obj18_07_NoMove:
0000843A 4E75                       		rts	
0000843C                            ; ===========================================================================
0000843C                            
0000843C                            Obj18_07_Wait:
0000843C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008440 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008442 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008446 4E75                       		rts	
00008448                            ; ===========================================================================
00008448                            
00008448                            Obj18_Type08:
00008448 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000844C 3028 0034                  		move.w	$34(a0),d0
00008450 0440 0200                  		subi.w	#$200,d0
00008454 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008458 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000845A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000845E                            
0000845E                            Obj18_08_NoStop:
0000845E 4E75                       		rts	
00008460                            ; ===========================================================================
00008460                            
00008460                            Obj18_Type0A:
00008460 3028 0034                  		move.w	$34(a0),d0
00008464 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008468 0401 0040                  		subi.b	#$40,d1
0000846C 4881                       		ext.w	d1
0000846E E241                       		asr.w	#1,d1
00008470 D041                       		add.w	d1,d0
00008472 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008476                            
00008476                            Obj18_ChgMotion:
00008476 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000847C 4E75                       		rts	
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000847E 3028 0032                  		move.w	$32(a0),d0
00008482 0240 FF80                  		andi.w	#$FF80,d0
00008486 3238 F700                  		move.w	($FFFFF700).w,d1
0000848A 0441 0080                  		subi.w	#$80,d1
0000848E 0241 FF80                  		andi.w	#$FF80,d1
00008492 9041                       		sub.w	d1,d0
00008494 0C40 0280                  		cmpi.w	#$280,d0
00008498 6200                       		bhi.s	Obj18_Delete
0000849A 4E75                       		rts	
0000849C                            ; ===========================================================================
0000849C                            
0000849C                            Obj18_Delete:				; XREF: Obj18_Index
0000849C 6000 0000                  		bra.w	DeleteObject
000084A0                            ; ===========================================================================
000084A0                            ; ---------------------------------------------------------------------------
000084A0                            ; Sprite mappings - unused
000084A0                            ; ---------------------------------------------------------------------------
000084A0                            Map_obj18x:
000084A0                            	include "_maps\obj18x.asm"
000084A0                            ; ---------------------------------------------------------------------------
000084A0                            ; Sprite mappings - unused
000084A0                            ; ---------------------------------------------------------------------------
000084A0 0000                       		dc.w byte_80FE-Map_obj18x
000084A2 0000                       		dc.w byte_8109-Map_obj18x
000084A4 02                         byte_80FE:	dc.b 2
000084A5 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000084AA F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000084AF 0A                         byte_8109:	dc.b $A
000084B0 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000084B5 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000084BA 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000084BF 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000084C4 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000084C9 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000084CE 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000084D3 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000084D8 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000084DD 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000084E2                            		even
000084E2                            		even
000084E2                            
000084E2                            ; ---------------------------------------------------------------------------
000084E2                            ; Sprite mappings - GHZ	platforms
000084E2                            ; ---------------------------------------------------------------------------
000084E2                            Map_obj18:
000084E2                            	include "_maps\obj18ghz.asm"
000084E2                            ; ---------------------------------------------------------------------------
000084E2                            ; Sprite mappings - GHZ	platforms
000084E2                            ; ---------------------------------------------------------------------------
000084E2 0000                       		dc.w byte_8140-Map_obj18
000084E4 0000                       		dc.w byte_8155-Map_obj18
000084E6 04                         byte_8140:	dc.b 4
000084E7 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000084EC F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000084F1 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000084F6 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000084FB 0A                         byte_8155:	dc.b $A
000084FC F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008501 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008506 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000850B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008510 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008515 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000851A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000851F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008524 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008529 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000852E                            		even
0000852E                            		even
0000852E                            
0000852E                            ; ---------------------------------------------------------------------------
0000852E                            ; Sprite mappings - SYZ	platforms
0000852E                            ; ---------------------------------------------------------------------------
0000852E                            Map_obj18a:
0000852E                            	include "_maps\obj18syz.asm"
0000852E                            ; ---------------------------------------------------------------------------
0000852E                            ; Sprite mappings - SYZ	platforms
0000852E                            ; ---------------------------------------------------------------------------
0000852E 0000                       		dc.w byte_818A-Map_obj18a
00008530 03                         byte_818A:	dc.b 3
00008531 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008536 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000853B F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008540                            		even
00008540                            		even
00008540                            
00008540                            ; ---------------------------------------------------------------------------
00008540                            ; Sprite mappings - SLZ	platforms
00008540                            ; ---------------------------------------------------------------------------
00008540                            Map_obj18b:
00008540                            	include "_maps\obj18slz.asm"
00008540                            ; ---------------------------------------------------------------------------
00008540                            ; Sprite mappings - SLZ	platforms
00008540                            ; ---------------------------------------------------------------------------
00008540 0000                       		dc.w byte_819C-Map_obj18b
00008542 02                         byte_819C:	dc.b 2
00008543 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008548 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000854E 00                         		even
0000854E 00                         		even
0000854E                            
0000854E                            ; ===========================================================================
0000854E                            ; ---------------------------------------------------------------------------
0000854E                            ; Object 19 - blank
0000854E                            ; ---------------------------------------------------------------------------
0000854E                            
0000854E                            Obj19:					; XREF: Obj_Index
0000854E 4E75                       		rts	
00008550                            ; ===========================================================================
00008550                            ; ---------------------------------------------------------------------------
00008550                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008550                            ; ---------------------------------------------------------------------------
00008550                            Map_obj48:
00008550                            	include "_maps\obj48.asm"
00008550                            ; ---------------------------------------------------------------------------
00008550                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008550                            ; ---------------------------------------------------------------------------
00008550 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008554 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008558 06                         byte_81B2:	dc.b 6
00008559 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000855E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008563 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008568 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000856D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008572 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008577 04                         byte_81D1:	dc.b 4
00008578 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000857D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008582 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008587 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000858C 04                         byte_81E6:	dc.b 4
0000858D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008592 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008597 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000859C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000085A1 04                         byte_81FB:	dc.b 4
000085A2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000085A7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000085AC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000085B1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000085B6                            		even
000085B6                            		even
000085B6                            
000085B6                            ; ===========================================================================
000085B6                            ; ---------------------------------------------------------------------------
000085B6                            ; Object 1A - GHZ collapsing ledge
000085B6                            ; ---------------------------------------------------------------------------
000085B6                            
000085B6                            Obj1A:					; XREF: Obj_Index
000085B6 7000                       		moveq	#0,d0
000085B8 1028 0024                  		move.b	$24(a0),d0
000085BC 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000085C0 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000085C4                            ; ===========================================================================
000085C4 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000085C8 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000085CC 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000085D0                            ; ===========================================================================
000085D0                            
000085D0                            Obj1A_Main:				; XREF: Obj1A_Index
000085D0 5428 0024                  		addq.b	#2,$24(a0)
000085D4 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000085DC 317C 4000 0002             		move.w	#$4000,2(a0)
000085E2 0028 0004 0001             		ori.b	#4,1(a0)
000085E8 117C 0004 0018             		move.b	#4,$18(a0)
000085EE 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000085F4 117C 0064 0019             		move.b	#$64,$19(a0)
000085FA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008600 117C 0038 0016             		move.b	#$38,$16(a0)
00008606 08E8 0004 0001             		bset	#4,1(a0)
0000860C                            
0000860C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000860C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008610 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008612 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008616 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000861A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000861E                            
0000861E                            Obj1A_Slope:
0000861E 323C 0030                  		move.w	#$30,d1
00008622 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008628 6100 F2A4                  		bsr.w	SlopeObject
0000862C 6000 0000                  		bra.w	MarkObjGone
00008630                            ; ===========================================================================
00008630                            
00008630                            Obj1A_Touch:				; XREF: Obj1A_Index
00008630 4A28 0038                  		tst.b	$38(a0)
00008634 6700 0000                  		beq.w	loc_847A
00008638 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000863E 5328 0038                  		subq.b	#1,$38(a0)
00008642                            
00008642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008642                            
00008642                            
00008642                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008642 323C 0030                  		move.w	#$30,d1
00008646 6100 F326                  		bsr.w	ExitPlatform
0000864A 323C 0030                  		move.w	#$30,d1
0000864E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008654 3428 0008                  		move.w	8(a0),d2
00008658 6100 0000                  		bsr.w	SlopeObject2
0000865C 6000 0000                  		bra.w	MarkObjGone
00008660                            ; End of function Obj1A_WalkOff
00008660                            
00008660                            ; ===========================================================================
00008660                            
00008660                            Obj1A_Display:				; XREF: Obj1A_Index
00008660 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008664 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008666 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000866A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000866E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008672 6000 0000                  		bra.w	DisplaySprite
00008676                            ; ===========================================================================
00008676                            
00008676                            loc_82D0:				; XREF: Obj1A_Display
00008676 5328 0038                  		subq.b	#1,$38(a0)
0000867A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000867E 43F8 D000                  		lea	($FFFFD000).w,a1
00008682 0829 0003 0022             		btst	#3,$22(a1)
00008688 6700                       		beq.s	loc_82FC
0000868A 4A28 0038                  		tst.b	$38(a0)
0000868E 6600                       		bne.s	locret_8308
00008690 08A9 0003 0022             		bclr	#3,$22(a1)
00008696 08A9 0005 0022             		bclr	#5,$22(a1)
0000869C 137C 0001 001D             		move.b	#1,$1D(a1)
000086A2                            
000086A2                            loc_82FC:
000086A2 117C 0000 003A             		move.b	#0,$3A(a0)
000086A8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000086AE                            
000086AE                            locret_8308:
000086AE 4E75                       		rts	
000086B0                            ; ===========================================================================
000086B0                            
000086B0                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000086B0 6100 0000                  		bsr.w	ObjectFall
000086B4 6100 0000                  		bsr.w	DisplaySprite
000086B8 4A28 0001                  		tst.b	1(a0)
000086BC 6A00                       		bpl.s	Obj1A_Delete
000086BE 4E75                       		rts	
000086C0                            ; ===========================================================================
000086C0                            
000086C0                            Obj1A_Delete:				; XREF: Obj1A_Index
000086C0 6100 0000                  		bsr.w	DeleteObject
000086C4 4E75                       		rts	
000086C6                            ; ===========================================================================
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            
000086C6                            Obj53:					; XREF: Obj_Index
000086C6 7000                       		moveq	#0,d0
000086C8 1028 0024                  		move.b	$24(a0),d0
000086CC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000086D0 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000086D4                            ; ===========================================================================
000086D4 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000086D8 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000086DC 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000086E0                            ; ===========================================================================
000086E0                            
000086E0                            Obj53_Main:				; XREF: Obj53_Index
000086E0 5428 0024                  		addq.b	#2,$24(a0)
000086E4 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000086EC 317C 42B8 0002             		move.w	#$42B8,2(a0)
000086F2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000086F8 6600                       		bne.s	Obj53_NotSLZ
000086FA 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008700 5428 001A                  		addq.b	#2,$1A(a0)
00008704                            
00008704                            Obj53_NotSLZ:
00008704 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000870A 6600                       		bne.s	Obj53_NotSBZ
0000870C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008712                            
00008712                            Obj53_NotSBZ:
00008712 0028 0004 0001             		ori.b	#4,1(a0)
00008718 117C 0004 0018             		move.b	#4,$18(a0)
0000871E 117C 0007 0038             		move.b	#7,$38(a0)
00008724 117C 0044 0019             		move.b	#$44,$19(a0)
0000872A                            
0000872A                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000872A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000872E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008730 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008734 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008738 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000873C                            
0000873C                            Obj53_Solid:
0000873C 323C 0020                  		move.w	#$20,d1
00008740 6100 F0B8                  		bsr.w	PlatformObject
00008744 4A28 0028                  		tst.b	$28(a0)
00008748 6A00                       		bpl.s	Obj53_MarkAsGone
0000874A 0829 0003 0022             		btst	#3,$22(a1)
00008750 6700                       		beq.s	Obj53_MarkAsGone
00008752 08A8 0000 0001             		bclr	#0,1(a0)
00008758 3029 0008                  		move.w	8(a1),d0
0000875C 9068 0008                  		sub.w	8(a0),d0
00008760 6400                       		bcc.s	Obj53_MarkAsGone
00008762 08E8 0000 0001             		bset	#0,1(a0)
00008768                            
00008768                            Obj53_MarkAsGone:
00008768 6000 0000                  		bra.w	MarkObjGone
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            Obj53_Touch:				; XREF: Obj53_Index
0000876C 4A28 0038                  		tst.b	$38(a0)
00008770 6700 0000                  		beq.w	loc_8458
00008774 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000877A 5328 0038                  		subq.b	#1,$38(a0)
0000877E                            
0000877E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877E                            
0000877E                            
0000877E                            Obj53_WalkOff:				; XREF: Obj53_Index
0000877E 323C 0020                  		move.w	#$20,d1
00008782 6100 F1EA                  		bsr.w	ExitPlatform
00008786 3428 0008                  		move.w	8(a0),d2
0000878A 6100 F74C                  		bsr.w	MvSonicOnPtfm2
0000878E 6000 0000                  		bra.w	MarkObjGone
00008792                            ; End of function Obj53_WalkOff
00008792                            
00008792                            ; ===========================================================================
00008792                            
00008792                            Obj53_Display:				; XREF: Obj53_Index
00008792 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008796 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008798 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000879C 6600 0000                  		bne.w	loc_8402	; if yes, branch
000087A0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087A4 6000 0000                  		bra.w	DisplaySprite
000087A8                            ; ===========================================================================
000087A8                            
000087A8                            loc_8402:
000087A8 5328 0038                  		subq.b	#1,$38(a0)
000087AC 6100 FFD0                  		bsr.w	Obj53_WalkOff
000087B0 43F8 D000                  		lea	($FFFFD000).w,a1
000087B4 0829 0003 0022             		btst	#3,$22(a1)
000087BA 6700                       		beq.s	loc_842E
000087BC 4A28 0038                  		tst.b	$38(a0)
000087C0 6600                       		bne.s	locret_843A
000087C2 08A9 0003 0022             		bclr	#3,$22(a1)
000087C8 08A9 0005 0022             		bclr	#5,$22(a1)
000087CE 137C 0001 001D             		move.b	#1,$1D(a1)
000087D4                            
000087D4                            loc_842E:
000087D4 117C 0000 003A             		move.b	#0,$3A(a0)
000087DA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000087E0                            
000087E0                            locret_843A:
000087E0 4E75                       		rts	
000087E2                            ; ===========================================================================
000087E2                            
000087E2                            Obj53_TimeZero:				; XREF: Obj53_Display
000087E2 6100 0000                  		bsr.w	ObjectFall
000087E6 6100 0000                  		bsr.w	DisplaySprite
000087EA 4A28 0001                  		tst.b	1(a0)
000087EE 6A00                       		bpl.s	Obj53_Delete
000087F0 4E75                       		rts	
000087F2                            ; ===========================================================================
000087F2                            
000087F2                            Obj53_Delete:				; XREF: Obj53_Index
000087F2 6100 0000                  		bsr.w	DeleteObject
000087F6 4E75                       		rts	
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000087F8 117C 0000 003A             		move.b	#0,$3A(a0)
000087FE                            
000087FE                            loc_8458:				; XREF: Obj53_Touch
000087FE 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008804 0828 0000 0028             		btst	#0,$28(a0)
0000880A 6700                       		beq.s	loc_846C
0000880C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008812                            
00008812                            loc_846C:
00008812 7207                       		moveq	#7,d1
00008814 5228 001A                  		addq.b	#1,$1A(a0)
00008818 6000                       		bra.s	loc_8486
0000881A                            ; ===========================================================================
0000881A                            
0000881A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000881A 117C 0000 003A             		move.b	#0,$3A(a0)
00008820                            
00008820                            loc_847A:				; XREF: Obj1A_Touch
00008820 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008826 7218                       		moveq	#$18,d1
00008828 5428 001A                  		addq.b	#2,$1A(a0)
0000882C                            
0000882C                            loc_8486:				; XREF: Obj53_Collapse
0000882C 7000                       		moveq	#0,d0
0000882E 1028 001A                  		move.b	$1A(a0),d0
00008832 D040                       		add.w	d0,d0
00008834 2668 0004                  		movea.l	4(a0),a3
00008838 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000883C 524B                       		addq.w	#1,a3
0000883E 08E8 0005 0001             		bset	#5,1(a0)
00008844 1810                       		move.b	0(a0),d4
00008846 1A28 0001                  		move.b	1(a0),d5
0000884A 2248                       		movea.l	a0,a1
0000884C 6000                       		bra.s	loc_84B2
0000884E                            ; ===========================================================================
0000884E                            
0000884E                            loc_84AA:
0000884E 6100 0000                  		bsr.w	SingleObjLoad
00008852 6600                       		bne.s	loc_84F2
00008854 5A4B                       		addq.w	#5,a3
00008856                            
00008856                            loc_84B2:
00008856 137C 0006 0024             		move.b	#6,$24(a1)
0000885C 1284                       		move.b	d4,0(a1)
0000885E 234B 0004                  		move.l	a3,4(a1)
00008862 1345 0001                  		move.b	d5,1(a1)
00008866 3368 0008 0008             		move.w	8(a0),8(a1)
0000886C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008872 3368 0002 0002             		move.w	2(a0),2(a1)
00008878 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000887E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008884 135C 0038                  		move.b	(a4)+,$38(a1)
00008888 B3C8                       		cmpa.l	a0,a1
0000888A 6400                       		bcc.s	loc_84EE
0000888C 6100 0000                  		bsr.w	DisplaySprite2
00008890                            
00008890                            loc_84EE:
00008890 51C9 FFBC                  		dbf	d1,loc_84AA
00008894                            
00008894                            loc_84F2:
00008894 6100 0000                  		bsr.w	DisplaySprite
00008898 303C 00B9                  		move.w	#$B9,d0
0000889C 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000088A2                            ; ===========================================================================
000088A2                            ; ---------------------------------------------------------------------------
000088A2                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000088A2                            ; ---------------------------------------------------------------------------
000088A2 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000088B2 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000088BC 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000088C4 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000088CC                            
000088CC                            ; ---------------------------------------------------------------------------
000088CC                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000088CC                            ; ---------------------------------------------------------------------------
000088CC                            
000088CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088CC                            
000088CC                            
000088CC                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000088CC 43F8 D000                  		lea	($FFFFD000).w,a1
000088D0 0829 0003 0022             		btst	#3,$22(a1)
000088D6 6700                       		beq.s	locret_856E
000088D8 3029 0008                  		move.w	8(a1),d0
000088DC 9068 0008                  		sub.w	8(a0),d0
000088E0 D041                       		add.w	d1,d0
000088E2 E248                       		lsr.w	#1,d0
000088E4 0828 0000 0001             		btst	#0,1(a0)
000088EA 6700                       		beq.s	loc_854E
000088EC 4640                       		not.w	d0
000088EE D041                       		add.w	d1,d0
000088F0                            
000088F0                            loc_854E:
000088F0 7200                       		moveq	#0,d1
000088F2 1232 0000                  		move.b	(a2,d0.w),d1
000088F6 3028 000C                  		move.w	$C(a0),d0
000088FA 9041                       		sub.w	d1,d0
000088FC 7200                       		moveq	#0,d1
000088FE 1229 0016                  		move.b	$16(a1),d1
00008902 9041                       		sub.w	d1,d0
00008904 3340 000C                  		move.w	d0,$C(a1)
00008908 9468 0008                  		sub.w	8(a0),d2
0000890C 9569 0008                  		sub.w	d2,8(a1)
00008910                            
00008910                            locret_856E:
00008910 4E75                       		rts	
00008912                            ; End of function SlopeObject2
00008912                            
00008912                            ; ===========================================================================
00008912                            ; ---------------------------------------------------------------------------
00008912                            ; Collision data for GHZ collapsing ledge
00008912                            ; ---------------------------------------------------------------------------
00008912                            Obj1A_SlopeData:
00008912                            		incbin	misc\ghzledge.bin
00008942                            		even
00008942                            
00008942                            ; ---------------------------------------------------------------------------
00008942                            ; Sprite mappings - GHZ	collapsing ledge
00008942                            ; ---------------------------------------------------------------------------
00008942                            Map_obj1A:
00008942                            	include "_maps\obj1A.asm"
00008942                            ; ---------------------------------------------------------------------------
00008942                            ; Sprite mappings - GHZ	collapsing ledge
00008942                            ; ---------------------------------------------------------------------------
00008942 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008946 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000894A 10                         byte_85A8:	dc.b $10
0000894B C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008950 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008955 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000895A E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000895F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008964 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008969 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000896E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008973 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008978 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000897D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008982 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008987 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000898C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008991 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008996 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000899B 10                         byte_85F9:	dc.b $10
0000899C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000089A1 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089A6 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089AB E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000089B0 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000089B5 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000089BA F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000089BF F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000089C4 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000089C9 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000089CE 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000089D3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000089D8 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000089DD 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000089E2 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000089E7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000089EC 19                         byte_864A:	dc.b $19
000089ED C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000089F2 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000089F7 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000089FC D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008A01 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008A06 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008A0B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008A10 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008A15 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A1A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A1F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008A24 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008A29 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008A2E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008A33 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A38 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A3D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008A42 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008A47 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A4C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008A51 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008A56 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A5B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008A60 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008A65 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A6A 19                         byte_86C8:	dc.b $19
00008A6B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008A70 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A75 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008A7A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008A7F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008A84 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008A89 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008A8E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008A93 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A98 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A9D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AA2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008AA7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AAC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AB1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AB6 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008ABB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AC0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AC5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008ACA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008ACF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AD4 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008AD9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008ADE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008AE3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008AE8                            		even
00008AE8                            		even
00008AE8                            
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8                            Map_obj53:
00008AE8                            	include "_maps\obj53.asm"
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008AEC 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008AF0 04                         byte_874E:	dc.b 4
00008AF1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008AF6 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008AFB F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008B00 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008B05 08                         byte_8763:	dc.b 8
00008B06 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008B0B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008B10 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008B15 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008B1A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008B1F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008B24 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008B29 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008B2E 04                         byte_878C:	dc.b 4
00008B2F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008B34 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008B39 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008B3E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008B43 08                         byte_87A1:	dc.b 8
00008B44 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008B49 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008B4E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008B53 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008B58 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008B5D 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008B62 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008B67 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008B6C                            		even
00008B6C                            		even
00008B6C                            
00008B6C                            ; ===========================================================================
00008B6C                            ; ---------------------------------------------------------------------------
00008B6C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008B6C                            ; ---------------------------------------------------------------------------
00008B6C                            
00008B6C                            Obj1C:					; XREF: Obj_Index
00008B6C 7000                       		moveq	#0,d0
00008B6E 1028 0024                  		move.b	$24(a0),d0
00008B72 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008B76 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008B7A                            ; ===========================================================================
00008B7A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008B7C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008B7E                            ; ===========================================================================
00008B7E                            
00008B7E                            Obj1C_Main:				; XREF: Obj1C_Index
00008B7E 5428 0024                  		addq.b	#2,$24(a0)
00008B82 7000                       		moveq	#0,d0
00008B84 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008B88 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008B8C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008B90 2159 0004                  		move.l	(a1)+,4(a0)
00008B94 3159 0002                  		move.w	(a1)+,2(a0)
00008B98 0028 0004 0001             		ori.b	#4,1(a0)
00008B9E 1159 001A                  		move.b	(a1)+,$1A(a0)
00008BA2 1159 0019                  		move.b	(a1)+,$19(a0)
00008BA6 1159 0018                  		move.b	(a1)+,$18(a0)
00008BAA 1159 0020                  		move.b	(a1)+,$20(a0)
00008BAE                            
00008BAE                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008BAE 3028 0008                  		move.w	8(a0),d0
00008BB2 0240 FF80                  		andi.w	#$FF80,d0
00008BB6 3238 F700                  		move.w	($FFFFF700).w,d1
00008BBA 0441 0080                  		subi.w	#$80,d1
00008BBE 0241 FF80                  		andi.w	#$FF80,d1
00008BC2 9041                       		sub.w	d1,d0
00008BC4 0C40 0280                  		cmpi.w	#$280,d0
00008BC8 6200 0000                  		bhi.w	DeleteObject
00008BCC 6000 0000                  		bra.w	DisplaySprite
00008BD0                            ; ===========================================================================
00008BD0                            ; ---------------------------------------------------------------------------
00008BD0                            ; Variables for	object $1C are stored in an array
00008BD0                            ; ---------------------------------------------------------------------------
00008BD0 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008BD4 44D8                       		dc.w $44D8		; VRAM setting
00008BD6 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008BDA 0000 0000                  		dc.l Map_obj1C
00008BDE 44D8                       		dc.w $44D8
00008BE0 0008 0200                  		dc.b 0,	8, 2, 0
00008BE4 0000 0000                  		dc.l Map_obj1C
00008BE8 44D8                       		dc.w $44D8
00008BEA 0008 0200                  		dc.b 0,	8, 2, 0
00008BEE 0000 7CE2                  		dc.l Map_obj11
00008BF2 438E                       		dc.w $438E
00008BF4 0110 0100                  		dc.b 1,	$10, 1,	0
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            ; Sprite mappings - SLZ	lava thrower
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            Map_obj1C:
00008BF8                            	include "_maps\obj1C.asm"
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            ; Sprite mappings - SLZ	lava thrower
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8 0000                       		dc.w byte_8858-Map_obj1C
00008BFA 01                         byte_8858:	dc.b 1
00008BFB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008C00                            		even
00008C00                            		even
00008C00                            
00008C00                            ; ===========================================================================
00008C00                            ; ---------------------------------------------------------------------------
00008C00                            ; Object 1D - switch that activates when Sonic touches it
00008C00                            ; (this	is not used anywhere in	the game)
00008C00                            ; ---------------------------------------------------------------------------
00008C00                            
00008C00                            Obj1D:					; XREF: Obj_Index
00008C00 7000                       		moveq	#0,d0
00008C02 1028 0024                  		move.b	$24(a0),d0
00008C06 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008C0A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008C0E                            ; ===========================================================================
00008C0E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008C10 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008C12 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008C14                            ; ===========================================================================
00008C14                            
00008C14                            Obj1D_Main:				; XREF: Obj1D_Index
00008C14 5428 0024                  		addq.b	#2,$24(a0)
00008C18 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008C20 317C 4000 0002             		move.w	#$4000,2(a0)
00008C26 117C 0004 0001             		move.b	#4,1(a0)
00008C2C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008C32 117C 0010 0019             		move.b	#$10,$19(a0)
00008C38 117C 0005 0018             		move.b	#5,$18(a0)
00008C3E                            
00008C3E                            Obj1D_Action:				; XREF: Obj1D_Index
00008C3E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008C44 323C 0010                  		move.w	#$10,d1
00008C48 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008C4C 6700                       		beq.s	Obj1D_ChkDel
00008C4E 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008C52 7001                       		moveq	#1,d0
00008C54 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008C58                            
00008C58                            Obj1D_ChkDel:
00008C58 6100 0000                  		bsr.w	DisplaySprite
00008C5C 3028 0008                  		move.w	8(a0),d0
00008C60 0240 FF80                  		andi.w	#$FF80,d0
00008C64 3238 F700                  		move.w	($FFFFF700).w,d1
00008C68 0441 0080                  		subi.w	#$80,d1
00008C6C 0241 FF80                  		andi.w	#$FF80,d1
00008C70 9041                       		sub.w	d1,d0
00008C72 0C40 0280                  		cmpi.w	#$280,d0
00008C76 6200 0000                  		bhi.w	Obj1D_Delete
00008C7A 4E75                       		rts	
00008C7C                            ; ===========================================================================
00008C7C                            
00008C7C                            Obj1D_Delete:				; XREF: Obj1D_Index
00008C7C 6100 0000                  		bsr.w	DeleteObject
00008C80 4E75                       		rts	
00008C82                            ; ---------------------------------------------------------------------------
00008C82                            ; Subroutine to	check if Sonic touches the object
00008C82                            ; ---------------------------------------------------------------------------
00008C82                            
00008C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C82                            
00008C82                            
00008C82                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008C82 43F8 D000                  		lea	($FFFFD000).w,a1
00008C86 3029 0008                  		move.w	8(a1),d0
00008C8A 9068 0008                  		sub.w	8(a0),d0
00008C8E D041                       		add.w	d1,d0
00008C90 6B00                       		bmi.s	loc_8918
00008C92 D241                       		add.w	d1,d1
00008C94 B041                       		cmp.w	d1,d0
00008C96 6400                       		bcc.s	loc_8918
00008C98 3429 000C                  		move.w	$C(a1),d2
00008C9C 1229 0016                  		move.b	$16(a1),d1
00008CA0 4881                       		ext.w	d1
00008CA2 D242                       		add.w	d2,d1
00008CA4 3028 000C                  		move.w	$C(a0),d0
00008CA8 0440 0010                  		subi.w	#$10,d0
00008CAC 9041                       		sub.w	d1,d0
00008CAE 6200                       		bhi.s	loc_8918
00008CB0 0C40 FFF0                  		cmpi.w	#-$10,d0
00008CB4 6500                       		bcs.s	loc_8918
00008CB6 70FF                       		moveq	#-1,d0
00008CB8 4E75                       		rts	
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            loc_8918:
00008CBA 7000                       		moveq	#0,d0
00008CBC 4E75                       		rts	
00008CBE                            ; End of function Obj1D_ChkTouch
00008CBE                            
00008CBE                            ; ===========================================================================
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            ; Sprite mappings - object 1D
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            Map_obj1D:
00008CBE                            	include "_maps\obj1D.asm"
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            ; Sprite mappings - object 1D
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE 0000                       		dc.w byte_891E-Map_obj1D
00008CC0 04                         byte_891E:	dc.b 4
00008CC1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008CC6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008CCB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008CD0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008CD6 00                         		even
00008CD6 00                         		even
00008CD6                            
00008CD6                            ; ===========================================================================
00008CD6                            ; ---------------------------------------------------------------------------
00008CD6                            ; Object 2A - doors (SBZ)
00008CD6                            ; ---------------------------------------------------------------------------
00008CD6                            
00008CD6                            Obj2A:					; XREF: Obj_Index
00008CD6 7000                       		moveq	#0,d0
00008CD8 1028 0024                  		move.b	$24(a0),d0
00008CDC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008CE0 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008CE4                            ; ===========================================================================
00008CE4 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008CE6 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008CE8                            ; ===========================================================================
00008CE8                            
00008CE8                            Obj2A_Main:				; XREF: Obj2A_Index
00008CE8 5428 0024                  		addq.b	#2,$24(a0)
00008CEC 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008CF4 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008CFA 0028 0004 0001             		ori.b	#4,1(a0)
00008D00 117C 0008 0019             		move.b	#8,$19(a0)
00008D06 117C 0004 0018             		move.b	#4,$18(a0)
00008D0C                            
00008D0C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008D0C 323C 0040                  		move.w	#$40,d1
00008D10 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008D14 3038 D008                  		move.w	($FFFFD008).w,d0
00008D18 D041                       		add.w	d1,d0
00008D1A B068 0008                  		cmp.w	8(a0),d0
00008D1E 6500                       		bcs.s	Obj2A_Animate
00008D20 9041                       		sub.w	d1,d0
00008D22 9041                       		sub.w	d1,d0
00008D24 B068 0008                  		cmp.w	8(a0),d0
00008D28 6400                       		bcc.s	Obj2A_Animate
00008D2A D041                       		add.w	d1,d0
00008D2C B068 0008                  		cmp.w	8(a0),d0
00008D30 6400                       		bcc.s	loc_899A
00008D32 0828 0000 0022             		btst	#0,$22(a0)
00008D38 6600                       		bne.s	Obj2A_Animate
00008D3A 6000                       		bra.s	Obj2A_Open
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            loc_899A:				; XREF: Obj2A_OpenShut
00008D3C 0828 0000 0022             		btst	#0,$22(a0)
00008D42 6700                       		beq.s	Obj2A_Animate
00008D44                            
00008D44                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008D44 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008D4A                            
00008D4A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008D4A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008D50 6100 0000                  		bsr.w	AnimateSprite
00008D54 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008D58 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008D5A 323C 0011                  		move.w	#$11,d1
00008D5E 343C 0020                  		move.w	#$20,d2
00008D62 3602                       		move.w	d2,d3
00008D64 5243                       		addq.w	#1,d3
00008D66 3828 0008                  		move.w	8(a0),d4
00008D6A 6100 0000                  		bsr.w	SolidObject
00008D6E                            
00008D6E                            Obj2A_MarkAsUsed:
00008D6E 6000 0000                  		bra.w	MarkObjGone
00008D72                            ; ===========================================================================
00008D72                            Ani_obj2A:
00008D72                            	include "_anim\obj2A.asm"
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            ; Animation script - doors (SBZ)
00008D72                            ; ---------------------------------------------------------------------------
00008D72 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008D74 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008D76 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008D82 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008D8E                            		even
00008D8E                            		even
00008D8E                            
00008D8E                            ; ---------------------------------------------------------------------------
00008D8E                            ; Sprite mappings - doors (SBZ)
00008D8E                            ; ---------------------------------------------------------------------------
00008D8E                            Map_obj2A:
00008D8E                            	include "_maps\obj2A.asm"
00008D8E                            ; ---------------------------------------------------------------------------
00008D8E                            ; Sprite mappings - doors (SBZ)
00008D8E                            ; ---------------------------------------------------------------------------
00008D8E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008D92 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008D96 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008D9A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008D9E 0000                       		dc.w byte_8A56-Map_obj2A
00008DA0 02                         byte_89FE:	dc.b 2
00008DA1 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008DA6 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008DAB 02                         byte_8A09:	dc.b 2
00008DAC DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008DB1 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008DB6 02                         byte_8A14:	dc.b 2
00008DB7 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008DBC 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008DC1 02                         byte_8A1F:	dc.b 2
00008DC2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008DC7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008DCC 02                         byte_8A2A:	dc.b 2
00008DCD D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008DD2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008DD7 02                         byte_8A35:	dc.b 2
00008DD8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008DDD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008DE2 02                         byte_8A40:	dc.b 2
00008DE3 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008DE8 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008DED 02                         byte_8A4B:	dc.b 2
00008DEE C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008DF3 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008DF8 02                         byte_8A56:	dc.b 2
00008DF9 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008DFE 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008E04 00                         		even
00008E04 00                         		even
00008E04                            
00008E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E04                            
00008E04                            
00008E04                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008E04 6100 0000                  		bsr.w	Obj44_SolidWall2
00008E08 6700                       		beq.s	loc_8AA8
00008E0A 6B00 0000                  		bmi.w	loc_8AC4
00008E0E 4A40                       		tst.w	d0
00008E10 6700 0000                  		beq.w	loc_8A92
00008E14 6B00                       		bmi.s	loc_8A7C
00008E16 4A69 0010                  		tst.w	$10(a1)
00008E1A 6B00                       		bmi.s	loc_8A92
00008E1C 6000                       		bra.s	loc_8A82
00008E1E                            ; ===========================================================================
00008E1E                            
00008E1E                            loc_8A7C:
00008E1E 4A69 0010                  		tst.w	$10(a1)
00008E22 6A00                       		bpl.s	loc_8A92
00008E24                            
00008E24                            loc_8A82:
00008E24 9169 0008                  		sub.w	d0,8(a1)
00008E28 337C 0000 0014             		move.w	#0,$14(a1)
00008E2E 337C 0000 0010             		move.w	#0,$10(a1)
00008E34                            
00008E34                            loc_8A92:
00008E34 0829 0001 0022             		btst	#1,$22(a1)
00008E3A 6600                       		bne.s	loc_8AB6
00008E3C 08E9 0005 0022             		bset	#5,$22(a1)
00008E42 08E8 0005 0022             		bset	#5,$22(a0)
00008E48 4E75                       		rts	
00008E4A                            ; ===========================================================================
00008E4A                            
00008E4A                            loc_8AA8:
00008E4A 0828 0005 0022             		btst	#5,$22(a0)
00008E50 6700                       		beq.s	locret_8AC2
00008E52 337C 0001 001C             		move.w	#1,$1C(a1)
00008E58                            
00008E58                            loc_8AB6:
00008E58 08A8 0005 0022             		bclr	#5,$22(a0)
00008E5E 08A9 0005 0022             		bclr	#5,$22(a1)
00008E64                            
00008E64                            locret_8AC2:
00008E64 4E75                       		rts	
00008E66                            ; ===========================================================================
00008E66                            
00008E66                            loc_8AC4:
00008E66 4A69 0012                  		tst.w	$12(a1)
00008E6A 6A00                       		bpl.s	locret_8AD8
00008E6C 4A43                       		tst.w	d3
00008E6E 6A00                       		bpl.s	locret_8AD8
00008E70 9769 000C                  		sub.w	d3,$C(a1)
00008E74 337C 0000 0012             		move.w	#0,$12(a1)
00008E7A                            
00008E7A                            locret_8AD8:
00008E7A 4E75                       		rts	
00008E7C                            ; End of function Obj44_SolidWall
00008E7C                            
00008E7C                            
00008E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E7C                            
00008E7C                            
00008E7C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008E7C 43F8 D000                  		lea	($FFFFD000).w,a1
00008E80 3029 0008                  		move.w	8(a1),d0
00008E84 9068 0008                  		sub.w	8(a0),d0
00008E88 D041                       		add.w	d1,d0
00008E8A 6B00                       		bmi.s	loc_8B48
00008E8C 3601                       		move.w	d1,d3
00008E8E D643                       		add.w	d3,d3
00008E90 B043                       		cmp.w	d3,d0
00008E92 6200                       		bhi.s	loc_8B48
00008E94 1629 0016                  		move.b	$16(a1),d3
00008E98 4883                       		ext.w	d3
00008E9A D443                       		add.w	d3,d2
00008E9C 3629 000C                  		move.w	$C(a1),d3
00008EA0 9668 000C                  		sub.w	$C(a0),d3
00008EA4 D642                       		add.w	d2,d3
00008EA6 6B00                       		bmi.s	loc_8B48
00008EA8 3802                       		move.w	d2,d4
00008EAA D844                       		add.w	d4,d4
00008EAC B644                       		cmp.w	d4,d3
00008EAE 6400                       		bcc.s	loc_8B48
00008EB0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008EB4 6B00                       		bmi.s	loc_8B48
00008EB6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008EBC 6400                       		bcc.s	loc_8B48
00008EBE 4A78 FE08                  		tst.w	($FFFFFE08).w
00008EC2 6600                       		bne.s	loc_8B48
00008EC4 3A00                       		move.w	d0,d5
00008EC6 B240                       		cmp.w	d0,d1
00008EC8 6400                       		bcc.s	loc_8B30
00008ECA D241                       		add.w	d1,d1
00008ECC 9041                       		sub.w	d1,d0
00008ECE 3A00                       		move.w	d0,d5
00008ED0 4445                       		neg.w	d5
00008ED2                            
00008ED2                            loc_8B30:
00008ED2 3203                       		move.w	d3,d1
00008ED4 B443                       		cmp.w	d3,d2
00008ED6 6400                       		bcc.s	loc_8B3C
00008ED8 9644                       		sub.w	d4,d3
00008EDA 3203                       		move.w	d3,d1
00008EDC 4441                       		neg.w	d1
00008EDE                            
00008EDE                            loc_8B3C:
00008EDE BA41                       		cmp.w	d1,d5
00008EE0 6200                       		bhi.s	loc_8B44
00008EE2 7801                       		moveq	#1,d4
00008EE4 4E75                       		rts	
00008EE6                            ; ===========================================================================
00008EE6                            
00008EE6                            loc_8B44:
00008EE6 78FF                       		moveq	#-1,d4
00008EE8 4E75                       		rts	
00008EEA                            ; ===========================================================================
00008EEA                            
00008EEA                            loc_8B48:
00008EEA 7800                       		moveq	#0,d4
00008EEC 4E75                       		rts	
00008EEE                            ; End of function Obj44_SolidWall2
00008EEE                            
00008EEE                            ; ===========================================================================
00008EEE                            ; ---------------------------------------------------------------------------
00008EEE                            ; Object 1E - Ball Hog enemy (SBZ)
00008EEE                            ; ---------------------------------------------------------------------------
00008EEE                            
00008EEE                            Obj1E:					; XREF: Obj_Index
00008EEE 7000                       		moveq	#0,d0
00008EF0 1028 0024                  		move.b	$24(a0),d0
00008EF4 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008EF8 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008EFC                            ; ===========================================================================
00008EFC 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008EFE 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008F00                            ; ===========================================================================
00008F00                            
00008F00                            Obj1E_Main:				; XREF: Obj1E_Index
00008F00 117C 0013 0016             		move.b	#$13,$16(a0)
00008F06 117C 0008 0017             		move.b	#8,$17(a0)
00008F0C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008F14 317C 2302 0002             		move.w	#$2302,2(a0)
00008F1A 117C 0004 0001             		move.b	#4,1(a0)
00008F20 117C 0004 0018             		move.b	#4,$18(a0)
00008F26 117C 0005 0020             		move.b	#5,$20(a0)
00008F2C 117C 000C 0019             		move.b	#$C,$19(a0)
00008F32 6100 0000                  		bsr.w	ObjectFall
00008F36 4EB9 0000 0000             		jsr	ObjHitFloor
00008F3C 4A41                       		tst.w	d1
00008F3E 6A00                       		bpl.s	locret_8BAC
00008F40 D368 000C                  		add.w	d1,$C(a0)
00008F44 317C 0000 0012             		move.w	#0,$12(a0)
00008F4A 5428 0024                  		addq.b	#2,$24(a0)
00008F4E                            
00008F4E                            locret_8BAC:
00008F4E 4E75                       		rts	
00008F50                            ; ===========================================================================
00008F50                            
00008F50                            Obj1E_Action:				; XREF: Obj1E_Index
00008F50 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008F56 6100 0000                  		bsr.w	AnimateSprite
00008F5A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008F60 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008F62 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008F66 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008F68 6000                       		bra.s	Obj1E_MarkAsGone
00008F6A                            ; ===========================================================================
00008F6A                            
00008F6A                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008F6A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008F6E                            
00008F6E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008F6E 6000 0000                  		bra.w	MarkObjGone
00008F72                            ; ===========================================================================
00008F72                            
00008F72                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008F72 117C 0001 0032             		move.b	#1,$32(a0)
00008F78 6100 0000                  		bsr.w	SingleObjLoad
00008F7C 6600                       		bne.s	loc_8C1A
00008F7E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008F82 3368 0008 0008             		move.w	8(a0),8(a1)
00008F88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F8E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008F94 337C 0000 0012             		move.w	#0,$12(a1)
00008F9A 70FC                       		moveq	#-4,d0
00008F9C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008FA2 6700                       		beq.s	loc_8C0A	; if not, branch
00008FA4 4440                       		neg.w	d0
00008FA6 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008FAA                            
00008FAA                            loc_8C0A:
00008FAA D169 0008                  		add.w	d0,8(a1)
00008FAE 0669 000C 000C             		addi.w	#$C,$C(a1)
00008FB4 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008FBA                            
00008FBA                            loc_8C1A:
00008FBA 60B2                       		bra.s	Obj1E_MarkAsGone
00008FBC                            ; ===========================================================================
00008FBC                            ; ---------------------------------------------------------------------------
00008FBC                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008FBC                            ; ---------------------------------------------------------------------------
00008FBC                            
00008FBC                            Obj20:					; XREF: Obj_Index
00008FBC 7000                       		moveq	#0,d0
00008FBE 1028 0024                  		move.b	$24(a0),d0
00008FC2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008FC6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008FCA                            ; ===========================================================================
00008FCA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008FCC 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008FCE                            ; ===========================================================================
00008FCE                            
00008FCE                            Obj20_Main:				; XREF: Obj20_Index
00008FCE 5428 0024                  		addq.b	#2,$24(a0)
00008FD2 117C 0007 0016             		move.b	#7,$16(a0)
00008FD8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FE0 317C 2302 0002             		move.w	#$2302,2(a0)
00008FE6 117C 0004 0001             		move.b	#4,1(a0)
00008FEC 117C 0003 0018             		move.b	#3,$18(a0)
00008FF2 117C 0087 0020             		move.b	#$87,$20(a0)
00008FF8 117C 0008 0019             		move.b	#8,$19(a0)
00008FFE 7000                       		moveq	#0,d0
00009000 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009004 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009008 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000900C 117C 0004 001A             		move.b	#4,$1A(a0)
00009012                            
00009012                            Obj20_Bounce:				; XREF: Obj20_Index
00009012 4EB9 0000 0000             		jsr	ObjectFall
00009018 4A68 0012                  		tst.w	$12(a0)
0000901C 6B00                       		bmi.s	Obj20_ChkExplode
0000901E 4EB9 0000 0000             		jsr	ObjHitFloor
00009024 4A41                       		tst.w	d1
00009026 6A00                       		bpl.s	Obj20_ChkExplode
00009028 D368 000C                  		add.w	d1,$C(a0)
0000902C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009032 4A03                       		tst.b	d3
00009034 6700                       		beq.s	Obj20_ChkExplode
00009036 6B00                       		bmi.s	loc_8CA4
00009038 4A68 0010                  		tst.w	$10(a0)
0000903C 6A00                       		bpl.s	Obj20_ChkExplode
0000903E 4468 0010                  		neg.w	$10(a0)
00009042 6000                       		bra.s	Obj20_ChkExplode
00009044                            ; ===========================================================================
00009044                            
00009044                            loc_8CA4:				; XREF: Obj20_Bounce
00009044 4A68 0010                  		tst.w	$10(a0)
00009048 6B00                       		bmi.s	Obj20_ChkExplode
0000904A 4468 0010                  		neg.w	$10(a0)
0000904E                            
0000904E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000904E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009052 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009054 10BC 0024                  		move.b	#$24,0(a0)
00009058 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000905C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009062 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009066                            ; ===========================================================================
00009066                            
00009066                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009066 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000906A 6A00                       		bpl.s	Obj20_Display
0000906C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009072 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009078                            
00009078                            Obj20_Display:
00009078 6100 0000                  		bsr.w	DisplaySprite
0000907C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009080 0640 00E0                  		addi.w	#$E0,d0
00009084 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009088 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000908C 4E75                       		rts	
0000908E                            ; ===========================================================================
0000908E                            ; ---------------------------------------------------------------------------
0000908E                            ; Object 24 - explosion	from a destroyed monitor
0000908E                            ; ---------------------------------------------------------------------------
0000908E                            
0000908E                            Obj24:					; XREF: Obj_Index
0000908E 7000                       		moveq	#0,d0
00009090 1028 0024                  		move.b	$24(a0),d0
00009094 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009098 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000909C                            ; ===========================================================================
0000909C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000909E 0000                       		dc.w Obj24_Animate-Obj24_Index
000090A0                            ; ===========================================================================
000090A0                            
000090A0                            Obj24_Main:				; XREF: Obj24_Index
000090A0 5428 0024                  		addq.b	#2,$24(a0)
000090A4 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000090AC 317C 041C 0002             		move.w	#$41C,2(a0)
000090B2 117C 0004 0001             		move.b	#4,1(a0)
000090B8 117C 0001 0018             		move.b	#1,$18(a0)
000090BE 117C 0000 0020             		move.b	#0,$20(a0)
000090C4 117C 000C 0019             		move.b	#$C,$19(a0)
000090CA 117C 0009 001E             		move.b	#9,$1E(a0)
000090D0 117C 0000 001A             		move.b	#0,$1A(a0)
000090D6 303C 00A5                  		move.w	#$A5,d0
000090DA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
000090E0                            
000090E0                            Obj24_Animate:				; XREF: Obj24_Index
000090E0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000090E4 6A00                       		bpl.s	Obj24_Display
000090E6 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000090EC 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000090F0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000090F6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000090FA                            
000090FA                            Obj24_Display:
000090FA 6000 0000                  		bra.w	DisplaySprite
000090FE                            ; ===========================================================================
000090FE                            ; ---------------------------------------------------------------------------
000090FE                            ; Object 27 - explosion	from a destroyed enemy
000090FE                            ; ---------------------------------------------------------------------------
000090FE                            
000090FE                            Obj27:					; XREF: Obj_Index
000090FE 7000                       		moveq	#0,d0
00009100 1028 0024                  		move.b	$24(a0),d0
00009104 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009108 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000910C                            ; ===========================================================================
0000910C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000910E 0000                       		dc.w Obj27_Main-Obj27_Index
00009110 0000                       		dc.w Obj27_Animate-Obj27_Index
00009112                            ; ===========================================================================
00009112                            
00009112                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009112 5428 0024                  		addq.b	#2,$24(a0)
00009116 6100 0000                  		bsr.w	SingleObjLoad
0000911A 6600                       		bne.s	Obj27_Main
0000911C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009120 3368 0008 0008             		move.w	8(a0),8(a1)
00009126 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000912C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009132                            
00009132                            Obj27_Main:				; XREF: Obj27_Index
00009132 5428 0024                  		addq.b	#2,$24(a0)
00009136 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000913E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009144 117C 0004 0001             		move.b	#4,1(a0)
0000914A 117C 0001 0018             		move.b	#1,$18(a0)
00009150 117C 0000 0020             		move.b	#0,$20(a0)
00009156 117C 000C 0019             		move.b	#$C,$19(a0)
0000915C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000915C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009162 117C 0000 001A             		move.b	#0,$1A(a0)
00009168 303C 00C1                  		move.w	#$C1,d0
0000916C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009172                            
00009172 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009178 1028 0028                  		move.b	$28(a0),d0
0000917C 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009182 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009188                            
00009188                            Obj27_Animate:				; XREF: Obj27_Index
00009188 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000918C 6A00                       		bpl.s	Obj27_Display
0000918E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000918E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009194 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009198 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000919E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000091A2                            
000091A2                            Obj27_Display:
000091A2 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000091A8 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000091AE 6000 0000                  		bra.w	DisplaySprite
000091B2                            ; ===========================================================================
000091B2                            ; ---------------------------------------------------------------------------
000091B2                            Obj27_ExplosionXYSpd:
000091B2                            		; dc.w	-$350, -$300	; Left
000091B2                            		; dc.w	-$200, -$450	; Near middle (left)
000091B2                            		; dc.w	0, -$500	; Middle
000091B2                            		; dc.w	$200, -$450	; Near middle (right)
000091B2                            		; dc.w	$350, -$300	; Right
000091B2                            
000091B2 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000091B6 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000091BA 0000 FA00                  		dc.w	0, -$600	; Middle
000091BE 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000091C2 0150 FC00                  		dc.w	$150, -$400	; Right
000091C6                            
000091C6 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000091E0                            ; ---------------------------------------------------------------------------
000091E0                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000091E0                            ; ---------------------------------------------------------------------------
000091E0                            
000091E0                            Obj3F:					; XREF: Obj_Index
000091E0 7000                       		moveq	#0,d0
000091E2 1028 0024                  		move.b	$24(a0),d0
000091E6 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000091EA 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000091EE                            ; ===========================================================================
000091EE 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000091F0 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000091F2                            ; ===========================================================================
000091F2                            
000091F2                            Obj3F_Main:				; XREF: Obj3F_Index
000091F2 5428 0024                  		addq.b	#2,$24(a0)
000091F6 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000091FE 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009204 117C 0004 0001             		move.b	#4,1(a0)
0000920A 117C 0001 0018             		move.b	#1,$18(a0)
00009210 117C 0000 0020             		move.b	#0,$20(a0)
00009216 117C 000C 0019             		move.b	#$C,$19(a0)
0000921C 117C 0007 001E             		move.b	#7,$1E(a0)
00009222 117C 0000 001A             		move.b	#0,$1A(a0)
00009228 303C 00C4                  		move.w	#$C4,d0
0000922C 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009232                            ; ===========================================================================
00009232                            Ani_obj1E:
00009232                            	include "_anim\obj1E.asm"
00009232                            ; ---------------------------------------------------------------------------
00009232                            ; Animation script - doors (SBZ)
00009232                            ; ---------------------------------------------------------------------------
00009232 0000                       		dc.w byte_8E4A-Ani_obj1E
00009234 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000924C 00                         		even
0000924C 00                         		even
0000924C                            
0000924C                            ; ---------------------------------------------------------------------------
0000924C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000924C                            ; ---------------------------------------------------------------------------
0000924C                            Map_obj1E:
0000924C                            	include "_maps\obj1E.asm"
0000924C                            ; ---------------------------------------------------------------------------
0000924C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000924C                            ; ---------------------------------------------------------------------------
0000924C 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009250 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009254 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009258 02                         byte_8E6E:	dc.b 2
00009259 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000925E FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009263 02                         byte_8E79:	dc.b 2
00009264 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009269 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000926E 02                         byte_8E84:	dc.b 2
0000926F F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009274 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009279 02                         byte_8E8F:	dc.b 2
0000927A E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000927F F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009284 01                         byte_8E9A:	dc.b 1
00009285 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000928A 01                         byte_8EA0:	dc.b 1
0000928B F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009290                            		even
00009290                            		even
00009290                            
00009290                            ; ---------------------------------------------------------------------------
00009290                            ; Sprite mappings - explosion
00009290                            ; ---------------------------------------------------------------------------
00009290                            Map_obj24:
00009290                            	include "_maps\obj24.asm"
00009290                            ; ---------------------------------------------------------------------------
00009290                            ; Sprite mappings - explosion
00009290                            ; ---------------------------------------------------------------------------
00009290 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009294 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009298 01                         byte_8EAE:	dc.b 1
00009299 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000929E 01                         byte_8EB4:	dc.b 1
0000929F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000092A4 01                         byte_8EBA:	dc.b 1
000092A5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000092AA 01                         byte_8EC0:	dc.b 1
000092AB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000092B0                            		even
000092B0                            		even
000092B0                            
000092B0                            ; ---------------------------------------------------------------------------
000092B0                            ; Sprite mappings - explosion
000092B0                            ; ---------------------------------------------------------------------------
000092B0 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000092B4 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000092B8 0000                       		dc.w byte_8EF7-Map_obj27
000092BA 01                         byte_8ED0:	dc.b 1
000092BB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000092C0 01                         byte_8ED6:	dc.b 1
000092C1 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000092C6 01                         byte_8EDC:	dc.b 1
000092C7 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000092CC 04                         byte_8EE2:	dc.b 4
000092CD EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000092D2 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000092D7 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000092DC FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000092E1 04                         byte_8EF7:	dc.b 4
000092E2 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000092E7 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000092EC 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000092F1 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000092F6                            		even
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Sprite mappings - explosion from when	a boss is destroyed
000092F6                            ; ---------------------------------------------------------------------------
000092F6 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000092F8 0000                       		dc.w byte_8F16-Map_obj3F
000092FA 0000                       		dc.w byte_8F1C-Map_obj3F
000092FC FFD6                       		dc.w byte_8EE2-Map_obj3F
000092FE FFEB                       		dc.w byte_8EF7-Map_obj3F
00009300 01                         byte_8F16:	dc.b 1
00009301 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009306 01                         byte_8F1C:	dc.b 1
00009307 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000930C                            		even
0000930C                            ; ===========================================================================
0000930C                            ; ---------------------------------------------------------------------------
0000930C                            ; Object 28 - animals
0000930C                            ; ---------------------------------------------------------------------------
0000930C                            
0000930C                            Obj28:					; XREF: Obj_Index
0000930C 7000                       		moveq	#0,d0
0000930E 1028 0024                  		move.b	$24(a0),d0
00009312 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009316 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000931A                            ; ===========================================================================
0000931A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000931E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009322 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009326 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000932A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000932E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009332 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009336 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000933A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000933E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009342 0000                       		dc.w loc_92D6-Obj28_Index
00009344                            
00009344 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009350                            
00009350 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009354 0000 0000                  		dc.l Map_obj28
00009358 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000935C 0000 0000                  		dc.l Map_obj28a		; mappings address
00009360 FE80 FD00                  		dc.w $FE80, $FD00
00009364 0000 0000                  		dc.l Map_obj28
00009368 FEC0 FE80                  		dc.w $FEC0, $FE80
0000936C 0000 0000                  		dc.l Map_obj28a
00009370 FE40 FD00                  		dc.w $FE40, $FD00
00009374 0000 0000                  		dc.l Map_obj28b
00009378 FD00 FC00                  		dc.w $FD00, $FC00
0000937C 0000 0000                  		dc.l Map_obj28a
00009380 FD80 FC80                  		dc.w $FD80, $FC80
00009384 0000 0000                  		dc.l Map_obj28b
00009388                            
00009388 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009398 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000093A8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000093B4                            
000093B4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000093C8 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000093DC 0000 0000                  		dc.l Map_obj28b
000093E0                            
000093E0 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000093F2 0565 05B3                  		dc.w $565, $5B3
000093F6                            ; ===========================================================================
000093F6                            
000093F6                            Obj28_Ending:				; XREF: Obj28_Index
000093F6 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000093FA 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000093FE 7000                       		moveq	#0,d0
00009400 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009404 D040                       		add.w	d0,d0		; multiply d0 by 2
00009406 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000940A 0440 0014                  		subi.w	#$14,d0
0000940E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009414 D040                       		add.w	d0,d0
00009416 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000941C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009420 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009426 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000942C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009432 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009438 117C 000C 0016             		move.b	#$C,$16(a0)
0000943E 117C 0004 0001             		move.b	#4,1(a0)
00009444 08E8 0000 0001             		bset	#0,1(a0)
0000944A 117C 0006 0018             		move.b	#6,$18(a0)
00009450 117C 0008 0019             		move.b	#8,$19(a0)
00009456 117C 0007 001E             		move.b	#7,$1E(a0)
0000945C 6000 0000                  		bra.w	DisplaySprite
00009460                            ; ===========================================================================
00009460                            
00009460                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009460 5428 0024                  		addq.b	#2,$24(a0)
00009464 6100 9796                  		bsr.w	RandomNumber
00009468 0240 0001                  		andi.w	#1,d0
0000946C 7200                       		moveq	#0,d1
0000946E 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009472 D241                       		add.w	d1,d1
00009474 D240                       		add.w	d0,d1
00009476 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000947A 1031 1000                  		move.b	(a1,d1.w),d0
0000947E 1140 0030                  		move.b	d0,$30(a0)
00009482 E748                       		lsl.w	#3,d0
00009484 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009488 D2C0                       		adda.w	d0,a1
0000948A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000948E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009492 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009496 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000949C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000094A2 6700                       		beq.s	loc_90C0	; if yes, branch
000094A4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000094AA                            
000094AA                            loc_90C0:
000094AA 117C 000C 0016             		move.b	#$C,$16(a0)
000094B0 117C 0004 0001             		move.b	#4,1(a0)
000094B6 08E8 0000 0001             		bset	#0,1(a0)
000094BC 117C 0006 0018             		move.b	#6,$18(a0)
000094C2 117C 0008 0019             		move.b	#8,$19(a0)
000094C8 117C 0007 001E             		move.b	#7,$1E(a0)
000094CE 117C 0002 001A             		move.b	#2,$1A(a0)
000094D4 317C FC00 0012             		move.w	#-$400,$12(a0)
000094DA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000094DE 6600                       		bne.s	loc_911C
000094E0 6100 0000                  		bsr.w	SingleObjLoad
000094E4 6600                       		bne.s	Obj28_Display
000094E6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000094EA 3368 0008 0008             		move.w	8(a0),8(a1)
000094F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000094F6 3028 003E                  		move.w	$3E(a0),d0
000094FA E248                       		lsr.w	#1,d0
000094FC 1340 001A                  		move.b	d0,$1A(a1)
00009500                            
00009500                            Obj28_Display:
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            loc_911C:
00009504 117C 0012 0024             		move.b	#$12,$24(a0)
0000950A 4268 0010                  		clr.w	$10(a0)
0000950E 6000 0000                  		bra.w	DisplaySprite
00009512                            ; ===========================================================================
00009512                            
00009512                            loc_912A:				; XREF: Obj28_Index
00009512 4A28 0001                  		tst.b	1(a0)
00009516 6A00 0000                  		bpl.w	DeleteObject
0000951A 6100 0000                  		bsr.w	ObjectFall
0000951E 4A68 0012                  		tst.w	$12(a0)
00009522 6B00                       		bmi.s	loc_9180
00009524 4EB9 0000 0000             		jsr	ObjHitFloor
0000952A 4A41                       		tst.w	d1
0000952C 6A00                       		bpl.s	loc_9180
0000952E D368 000C                  		add.w	d1,$C(a0)
00009532 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009538 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000953E 117C 0001 001A             		move.b	#1,$1A(a0)
00009544 1028 0030                  		move.b	$30(a0),d0
00009548 D000                       		add.b	d0,d0
0000954A 5800                       		addq.b	#4,d0
0000954C 1140 0024                  		move.b	d0,$24(a0)
00009550 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009554 6700                       		beq.s	loc_9180
00009556 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000955C 6700                       		beq.s	loc_9180
0000955E 4468 0010                  		neg.w	$10(a0)
00009562 0868 0000 0001             		bchg	#0,1(a0)
00009568                            
00009568                            loc_9180:
00009568 6000 0000                  		bra.w	DisplaySprite
0000956C                            ; ===========================================================================
0000956C                            
0000956C                            loc_9184:				; XREF: Obj28_Index
0000956C 6100 0000                  		bsr.w	ObjectFall
00009570 117C 0001 001A             		move.b	#1,$1A(a0)
00009576 4A68 0012                  		tst.w	$12(a0)
0000957A 6B00                       		bmi.s	loc_91AE
0000957C 117C 0000 001A             		move.b	#0,$1A(a0)
00009582 4EB9 0000 0000             		jsr	ObjHitFloor
00009588 4A41                       		tst.w	d1
0000958A 6A00                       		bpl.s	loc_91AE
0000958C D368 000C                  		add.w	d1,$C(a0)
00009590 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009596                            
00009596                            loc_91AE:
00009596 4A28 0028                  		tst.b	$28(a0)
0000959A 6600                       		bne.s	loc_9224
0000959C 4A28 0001                  		tst.b	1(a0)
000095A0 6A00 0000                  		bpl.w	DeleteObject
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_91C0:				; XREF: Obj28_Index
000095A8 6100 0000                  		bsr.w	SpeedToPos
000095AC 0668 0018 0012             		addi.w	#$18,$12(a0)
000095B2 4A68 0012                  		tst.w	$12(a0)
000095B6 6B00                       		bmi.s	loc_91FC
000095B8 4EB9 0000 0000             		jsr	ObjHitFloor
000095BE 4A41                       		tst.w	d1
000095C0 6A00                       		bpl.s	loc_91FC
000095C2 D368 000C                  		add.w	d1,$C(a0)
000095C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095CC 4A28 0028                  		tst.b	$28(a0)
000095D0 6700                       		beq.s	loc_91FC
000095D2 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000095D8 6700                       		beq.s	loc_91FC
000095DA 4468 0010                  		neg.w	$10(a0)
000095DE 0868 0000 0001             		bchg	#0,1(a0)
000095E4                            
000095E4                            loc_91FC:
000095E4 5328 001E                  		subq.b	#1,$1E(a0)
000095E8 6A00                       		bpl.s	loc_9212
000095EA 117C 0001 001E             		move.b	#1,$1E(a0)
000095F0 5228 001A                  		addq.b	#1,$1A(a0)
000095F4 0228 0001 001A             		andi.b	#1,$1A(a0)
000095FA                            
000095FA                            loc_9212:
000095FA 4A28 0028                  		tst.b	$28(a0)
000095FE 6600                       		bne.s	loc_9224
00009600 4A28 0001                  		tst.b	1(a0)
00009604 6A00 0000                  		bpl.w	DeleteObject
00009608 6000 0000                  		bra.w	DisplaySprite
0000960C                            ; ===========================================================================
0000960C                            
0000960C                            loc_9224:				; XREF: Obj28_Index
0000960C 3028 0008                  		move.w	8(a0),d0
00009610 9078 D008                  		sub.w	($FFFFD008).w,d0
00009614 6500                       		bcs.s	loc_923C
00009616 0440 0180                  		subi.w	#$180,d0
0000961A 6A00                       		bpl.s	loc_923C
0000961C 4A28 0001                  		tst.b	1(a0)
00009620 6A00 0000                  		bpl.w	DeleteObject
00009624                            
00009624                            loc_923C:
00009624 6000 0000                  		bra.w	DisplaySprite
00009628                            ; ===========================================================================
00009628                            
00009628                            loc_9240:				; XREF: Obj28_Index
00009628 4A28 0001                  		tst.b	1(a0)
0000962C 6A00 0000                  		bpl.w	DeleteObject
00009630 5368 0036                  		subq.w	#1,$36(a0)
00009634 6600 0000                  		bne.w	loc_925C
00009638 117C 0002 0024             		move.b	#2,$24(a0)
0000963E 117C 0003 0018             		move.b	#3,$18(a0)
00009644                            
00009644                            loc_925C:
00009644 6000 0000                  		bra.w	DisplaySprite
00009648                            ; ===========================================================================
00009648                            
00009648                            loc_9260:				; XREF: Obj28_Index
00009648 6100 0000                  		bsr.w	sub_9404
0000964C 6400                       		bcc.s	loc_927C
0000964E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009654 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000965A 117C 000E 0024             		move.b	#$E,$24(a0)
00009660 6000 FF46                  		bra.w	loc_91C0
00009664                            ; ===========================================================================
00009664                            
00009664                            loc_927C:
00009664 6000 FFA6                  		bra.w	loc_9224
00009668                            ; ===========================================================================
00009668                            
00009668                            loc_9280:				; XREF: Obj28_Index
00009668 6100 0000                  		bsr.w	sub_9404
0000966C 6A00                       		bpl.s	loc_92B6
0000966E 4268 0010                  		clr.w	$10(a0)
00009672 4268 0032                  		clr.w	$32(a0)
00009676 6100 0000                  		bsr.w	SpeedToPos
0000967A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009680 6100 0000                  		bsr.w	loc_93C4
00009684 6100 0000                  		bsr.w	loc_93EC
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_92B6
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_92B6:
0000969E 6000 FF6C                  		bra.w	loc_9224
000096A2                            ; ===========================================================================
000096A2                            
000096A2                            loc_92BA:				; XREF: Obj28_Index
000096A2 6100 0000                  		bsr.w	sub_9404
000096A6 6A00                       		bpl.s	loc_9310
000096A8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096AE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096B4 117C 0004 0024             		move.b	#4,$24(a0)
000096BA 6000 FEB0                  		bra.w	loc_9184
000096BE                            ; ===========================================================================
000096BE                            
000096BE                            loc_92D6:				; XREF: Obj28_Index
000096BE 6100 0000                  		bsr.w	ObjectFall
000096C2 117C 0001 001A             		move.b	#1,$1A(a0)
000096C8 4A68 0012                  		tst.w	$12(a0)
000096CC 6B00                       		bmi.s	loc_9310
000096CE 117C 0000 001A             		move.b	#0,$1A(a0)
000096D4 4EB9 0000 0000             		jsr	ObjHitFloor
000096DA 4A41                       		tst.w	d1
000096DC 6A00                       		bpl.s	loc_9310
000096DE 4628 0029                  		not.b	$29(a0)
000096E2 6600                       		bne.s	loc_9306
000096E4 4468 0010                  		neg.w	$10(a0)
000096E8 0868 0000 0001             		bchg	#0,1(a0)
000096EE                            
000096EE                            loc_9306:
000096EE D368 000C                  		add.w	d1,$C(a0)
000096F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096F8                            
000096F8                            loc_9310:
000096F8 6000 FF12                  		bra.w	loc_9224
000096FC                            ; ===========================================================================
000096FC                            
000096FC                            loc_9314:				; XREF: Obj28_Index
000096FC 6100 0000                  		bsr.w	sub_9404
00009700 6A00                       		bpl.s	loc_932E
00009702 4268 0010                  		clr.w	$10(a0)
00009706 4268 0032                  		clr.w	$32(a0)
0000970A 6100 0000                  		bsr.w	ObjectFall
0000970E 6100 0000                  		bsr.w	loc_93C4
00009712 6100 0000                  		bsr.w	loc_93EC
00009716                            
00009716                            loc_932E:
00009716 6000 FEF4                  		bra.w	loc_9224
0000971A                            ; ===========================================================================
0000971A                            
0000971A                            loc_9332:				; XREF: Obj28_Index
0000971A 6100 0000                  		bsr.w	sub_9404
0000971E 6A00                       		bpl.s	loc_936C
00009720 6100 0000                  		bsr.w	ObjectFall
00009724 117C 0001 001A             		move.b	#1,$1A(a0)
0000972A 4A68 0012                  		tst.w	$12(a0)
0000972E 6B00                       		bmi.s	loc_936C
00009730 117C 0000 001A             		move.b	#0,$1A(a0)
00009736 4EB9 0000 0000             		jsr	ObjHitFloor
0000973C 4A41                       		tst.w	d1
0000973E 6A00                       		bpl.s	loc_936C
00009740 4468 0010                  		neg.w	$10(a0)
00009744 0868 0000 0001             		bchg	#0,1(a0)
0000974A D368 000C                  		add.w	d1,$C(a0)
0000974E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009754                            
00009754                            loc_936C:
00009754 6000 FEB6                  		bra.w	loc_9224
00009758                            ; ===========================================================================
00009758                            
00009758                            loc_9370:				; XREF: Obj28_Index
00009758 6100 0000                  		bsr.w	sub_9404
0000975C 6A00                       		bpl.s	loc_93C0
0000975E 6100 0000                  		bsr.w	SpeedToPos
00009762 0668 0018 0012             		addi.w	#$18,$12(a0)
00009768 4A68 0012                  		tst.w	$12(a0)
0000976C 6B00                       		bmi.s	loc_93AA
0000976E 4EB9 0000 0000             		jsr	ObjHitFloor
00009774 4A41                       		tst.w	d1
00009776 6A00                       		bpl.s	loc_93AA
00009778 4628 0029                  		not.b	$29(a0)
0000977C 6600                       		bne.s	loc_93A0
0000977E 4468 0010                  		neg.w	$10(a0)
00009782 0868 0000 0001             		bchg	#0,1(a0)
00009788                            
00009788                            loc_93A0:
00009788 D368 000C                  		add.w	d1,$C(a0)
0000978C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009792                            
00009792                            loc_93AA:
00009792 5328 001E                  		subq.b	#1,$1E(a0)
00009796 6A00                       		bpl.s	loc_93C0
00009798 117C 0001 001E             		move.b	#1,$1E(a0)
0000979E 5228 001A                  		addq.b	#1,$1A(a0)
000097A2 0228 0001 001A             		andi.b	#1,$1A(a0)
000097A8                            
000097A8                            loc_93C0:
000097A8 6000 FE62                  		bra.w	loc_9224
000097AC                            ; ===========================================================================
000097AC                            
000097AC                            loc_93C4:
000097AC 117C 0001 001A             		move.b	#1,$1A(a0)
000097B2 4A68 0012                  		tst.w	$12(a0)
000097B6 6B00                       		bmi.s	locret_93EA
000097B8 117C 0000 001A             		move.b	#0,$1A(a0)
000097BE 4EB9 0000 0000             		jsr	ObjHitFloor
000097C4 4A41                       		tst.w	d1
000097C6 6A00                       		bpl.s	locret_93EA
000097C8 D368 000C                  		add.w	d1,$C(a0)
000097CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097D2                            
000097D2                            locret_93EA:
000097D2 4E75                       		rts	
000097D4                            ; ===========================================================================
000097D4                            
000097D4                            loc_93EC:
000097D4 08E8 0000 0001             		bset	#0,1(a0)
000097DA 3028 0008                  		move.w	8(a0),d0
000097DE 9078 D008                  		sub.w	($FFFFD008).w,d0
000097E2 6400                       		bcc.s	locret_9402
000097E4 08A8 0000 0001             		bclr	#0,1(a0)
000097EA                            
000097EA                            locret_9402:
000097EA 4E75                       		rts	
000097EC                            
000097EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097EC                            
000097EC                            
000097EC                            sub_9404:
000097EC 3038 D008                  		move.w	($FFFFD008).w,d0
000097F0 9068 0008                  		sub.w	8(a0),d0
000097F4 0440 00B8                  		subi.w	#$B8,d0
000097F8 4E75                       		rts	
000097FA                            ; End of function sub_9404
000097FA                            
000097FA                            ; ===========================================================================
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            ; Object 29 - points that appear when you destroy something
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            
000097FA                            Obj29:					; XREF: Obj_Index
000097FA 7000                       		moveq	#0,d0
000097FC 1028 0024                  		move.b	$24(a0),d0
00009800 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009804 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009808 6000 0000                  		bra.w	DisplaySprite
0000980C                            ; ===========================================================================
0000980C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000980E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009810                            ; ===========================================================================
00009810                            
00009810                            Obj29_Main:				; XREF: Obj29_Index
00009810 5428 0024                  		addq.b	#2,$24(a0)
00009814 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000981C 317C 2797 0002             		move.w	#$2797,2(a0)
00009822 117C 0004 0001             		move.b	#4,1(a0)
00009828 117C 0001 0018             		move.b	#1,$18(a0)
0000982E 117C 0008 0019             		move.b	#8,$19(a0)
00009834 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000983A                            
0000983A                            Obj29_Slower:				; XREF: Obj29_Index
0000983A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000983E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009842 6100 0000                  		bsr.w	SpeedToPos
00009846 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000984C 4E75                       		rts	
0000984E                            ; ===========================================================================
0000984E                            ; ---------------------------------------------------------------------------
0000984E                            ; Sprite mappings - animals
0000984E                            ; ---------------------------------------------------------------------------
0000984E                            Map_obj28:
0000984E                            	include "_maps\obj28.asm"
0000984E                            ; ---------------------------------------------------------------------------
0000984E                            ; Sprite mappings - animals
0000984E                            ; ---------------------------------------------------------------------------
0000984E 0000                       		dc.w byte_9472-Map_obj28
00009850 0000                       		dc.w byte_9478-Map_obj28
00009852 0000                       		dc.w byte_946C-Map_obj28
00009854 01                         byte_946C:	dc.b 1
00009855 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000985A 01                         byte_9472:	dc.b 1
0000985B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009860 01                         byte_9478:	dc.b 1
00009861 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009866                            		even
00009866                            		even
00009866                            
00009866                            Map_obj28a:
00009866                            	include "_maps\obj28a.asm"
00009866                            ; ---------------------------------------------------------------------------
00009866                            ; Sprite mappings - animals
00009866                            ; ---------------------------------------------------------------------------
00009866 0000                       		dc.w byte_948A-Map_obj28a
00009868 0000                       		dc.w byte_9490-Map_obj28a
0000986A 0000                       		dc.w byte_9484-Map_obj28a
0000986C 01                         byte_9484:	dc.b 1
0000986D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009872 01                         byte_948A:	dc.b 1
00009873 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009878 01                         byte_9490:	dc.b 1
00009879 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000987E                            		even
0000987E                            		even
0000987E                            
0000987E                            Map_obj28b:
0000987E                            	include "_maps\obj28b.asm"
0000987E                            ; ---------------------------------------------------------------------------
0000987E                            ; Sprite mappings - animals
0000987E                            ; ---------------------------------------------------------------------------
0000987E 0000                       		dc.w byte_94A2-Map_obj28b
00009880 0000                       		dc.w byte_94A8-Map_obj28b
00009882 0000                       		dc.w byte_949C-Map_obj28b
00009884 01                         byte_949C:	dc.b 1
00009885 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000988A 01                         byte_94A2:	dc.b 1
0000988B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009890 01                         byte_94A8:	dc.b 1
00009891 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009896                            		even
00009896                            		even
00009896                            
00009896                            ; ---------------------------------------------------------------------------
00009896                            ; Sprite mappings - points that	appear when you	destroy	something
00009896                            ; ---------------------------------------------------------------------------
00009896                            Map_obj29:
00009896                            	include "_maps\obj29.asm"
00009896                            ; ---------------------------------------------------------------------------
00009896                            ; Sprite mappings - points that	appear when you	destroy	something
00009896                            ; ---------------------------------------------------------------------------
00009896 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000989A 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000989E 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000098A2 0000                       		dc.w byte_94E5-Map_obj29
000098A4 01                         byte_94BC:	dc.b 1
000098A5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000098AA 01                         byte_94C2:	dc.b 1
000098AB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000098B0 01                         byte_94C8:	dc.b 1
000098B1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000098B6 01                         byte_94CE:	dc.b 1
000098B7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000098BC 01                         byte_94D4:	dc.b 1
000098BD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000098C2 02                         byte_94DA:	dc.b 2
000098C3 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000098C8 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000098CD 02                         byte_94E5:	dc.b 2
000098CE FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000098D3 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000098D8                            		even
000098D8                            		even
000098D8                            
000098D8                            ; ===========================================================================
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            
000098D8                            Obj1F:					; XREF: Obj_Index
000098D8 7000                       		moveq	#0,d0
000098DA 1028 0024                  		move.b	$24(a0),d0
000098DE 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000098E2 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000098E6                            ; ===========================================================================
000098E6 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000098E8 0000                       		dc.w Obj1F_Action-Obj1F_Index
000098EA 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000098EC 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000098EE 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000098F0                            ; ===========================================================================
000098F0                            
000098F0                            Obj1F_Main:				; XREF: Obj1F_Index
000098F0 117C 0010 0016             		move.b	#$10,$16(a0)
000098F6 117C 0008 0017             		move.b	#8,$17(a0)
000098FC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009904 317C 0400 0002             		move.w	#$400,2(a0)
0000990A 117C 0004 0001             		move.b	#4,1(a0)
00009910 117C 0003 0018             		move.b	#3,$18(a0)
00009916 117C 0006 0020             		move.b	#6,$20(a0)
0000991C 117C 0015 0019             		move.b	#$15,$19(a0)
00009922 6100 0000                  		bsr.w	ObjectFall
00009926 4EB9 0000 0000             		jsr	ObjHitFloor
0000992C 4A41                       		tst.w	d1
0000992E 6A00                       		bpl.s	locret_955A
00009930 D368 000C                  		add.w	d1,$C(a0)
00009934 1143 0026                  		move.b	d3,$26(a0)
00009938 317C 0000 0012             		move.w	#0,$12(a0)
0000993E 5428 0024                  		addq.b	#2,$24(a0)
00009942                            
00009942                            locret_955A:
00009942 4E75                       		rts	
00009944                            ; ===========================================================================
00009944                            
00009944                            Obj1F_Action:				; XREF: Obj1F_Index
00009944 7000                       		moveq	#0,d0
00009946 1028 0025                  		move.b	$25(a0),d0
0000994A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000994E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009952 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009958 6100 0000                  		bsr.w	AnimateSprite
0000995C 6000 0000                  		bra.w	MarkObjGone
00009960                            ; ===========================================================================
00009960 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009962 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009964                            ; ===========================================================================
00009964                            
00009964                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009964 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009968 6A00                       		bpl.s	locret_95B6
0000996A 4A28 0001                  		tst.b	1(a0)
0000996E 6A00                       		bpl.s	Obj1F_Move
00009970 0868 0001 0032             		bchg	#1,$32(a0)
00009976 6600                       		bne.s	Obj1F_MakeFire
00009978                            
00009978                            Obj1F_Move:
00009978 5428 0025                  		addq.b	#2,$25(a0)
0000997C 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009982 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009988 6100 0000                  		bsr.w	Obj1F_SetAni
0000998C 5600                       		addq.b	#3,d0
0000998E 1140 001C                  		move.b	d0,$1C(a0)
00009992 0868 0000 0022             		bchg	#0,$22(a0)
00009998 6600                       		bne.s	locret_95B6
0000999A 4468 0010                  		neg.w	$10(a0)		; change direction
0000999E                            
0000999E                            locret_95B6:
0000999E 4E75                       		rts	
000099A0                            ; ===========================================================================
000099A0                            
000099A0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000099A0 317C 003B 0030             		move.w	#$3B,$30(a0)
000099A6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000099AC 6100 0000                  		bsr.w	SingleObjLoad
000099B0 6600                       		bne.s	Obj1F_MakeFire2
000099B2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000099B6 137C 0006 0024             		move.b	#6,$24(a1)
000099BC 3368 0008 0008             		move.w	8(a0),8(a1)
000099C2 0469 0010 0008             		subi.w	#$10,8(a1)
000099C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099CE 337C FF00 0010             		move.w	#-$100,$10(a1)
000099D4                            
000099D4                            Obj1F_MakeFire2:
000099D4 6100 0000                  		bsr.w	SingleObjLoad
000099D8 6600                       		bne.s	locret_9618
000099DA 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000099DE 137C 0006 0024             		move.b	#6,$24(a1)
000099E4 3368 0008 0008             		move.w	8(a0),8(a1)
000099EA 0669 0010 0008             		addi.w	#$10,8(a1)
000099F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099F6 337C 0100 0010             		move.w	#$100,$10(a1)
000099FC                            
000099FC                            locret_9618:
000099FC 4E75                       		rts	
000099FE                            ; ===========================================================================
000099FE                            
000099FE                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
000099FE 5368 0030                  		subq.w	#1,$30(a0)
00009A02 6B00                       		bmi.s	loc_966E
00009A04 6100 0000                  		bsr.w	SpeedToPos
00009A08 0868 0000 0032             		bchg	#0,$32(a0)
00009A0E 6600                       		bne.s	loc_9654
00009A10 3628 0008                  		move.w	8(a0),d3
00009A14 0643 0010                  		addi.w	#$10,d3
00009A18 0828 0000 0022             		btst	#0,$22(a0)
00009A1E 6700                       		beq.s	loc_9640
00009A20 0443 0020                  		subi.w	#$20,d3
00009A24                            
00009A24                            loc_9640:
00009A24 4EB9 0000 0000             		jsr	ObjHitFloor2
00009A2A 0C41 FFF8                  		cmpi.w	#-8,d1
00009A2E 6D00                       		blt.s	loc_966E
00009A30 0C41 000C                  		cmpi.w	#$C,d1
00009A34 6C00                       		bge.s	loc_966E
00009A36 4E75                       		rts	
00009A38                            ; ===========================================================================
00009A38                            
00009A38                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009A38 4EB9 0000 0000             		jsr	ObjHitFloor
00009A3E D368 000C                  		add.w	d1,$C(a0)
00009A42 1143 0026                  		move.b	d3,$26(a0)
00009A46 6100 0000                  		bsr.w	Obj1F_SetAni
00009A4A 5600                       		addq.b	#3,d0
00009A4C 1140 001C                  		move.b	d0,$1C(a0)
00009A50 4E75                       		rts	
00009A52                            ; ===========================================================================
00009A52                            
00009A52                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009A52 5528 0025                  		subq.b	#2,$25(a0)
00009A56 317C 003B 0030             		move.w	#59,$30(a0)
00009A5C 317C 0000 0010             		move.w	#0,$10(a0)
00009A62 6100 0000                  		bsr.w	Obj1F_SetAni
00009A66 1140 001C                  		move.b	d0,$1C(a0)
00009A6A 4E75                       		rts	
00009A6C                            ; ---------------------------------------------------------------------------
00009A6C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009A6C                            ; ---------------------------------------------------------------------------
00009A6C                            
00009A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6C                            
00009A6C                            
00009A6C                            Obj1F_SetAni:				; XREF: loc_966E
00009A6C 7000                       		moveq	#0,d0
00009A6E 1628 0026                  		move.b	$26(a0),d3
00009A72 6B00                       		bmi.s	loc_96A4
00009A74 0C03 0006                  		cmpi.b	#6,d3
00009A78 6500                       		bcs.s	locret_96A2
00009A7A 7001                       		moveq	#1,d0
00009A7C 0828 0000 0022             		btst	#0,$22(a0)
00009A82 6600                       		bne.s	locret_96A2
00009A84 7002                       		moveq	#2,d0
00009A86                            
00009A86                            locret_96A2:
00009A86 4E75                       		rts	
00009A88                            ; ===========================================================================
00009A88                            
00009A88                            loc_96A4:				; XREF: Obj1F_SetAni
00009A88 0C03 00FA                  		cmpi.b	#-6,d3
00009A8C 6200                       		bhi.s	locret_96B6
00009A8E 7002                       		moveq	#2,d0
00009A90 0828 0000 0022             		btst	#0,$22(a0)
00009A96 6600                       		bne.s	locret_96B6
00009A98 7001                       		moveq	#1,d0
00009A9A                            
00009A9A                            locret_96B6:
00009A9A 4E75                       		rts	
00009A9C                            ; End of function Obj1F_SetAni
00009A9C                            
00009A9C                            ; ===========================================================================
00009A9C                            
00009A9C                            Obj1F_Delete:				; XREF: Obj1F_Index
00009A9C 6100 0000                  		bsr.w	DeleteObject
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            ; ---------------------------------------------------------------------------
00009AA2                            ; Sub-object - missile that the	Crabmeat throws
00009AA2                            ; ---------------------------------------------------------------------------
00009AA2                            
00009AA2                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009AA2 5428 0024                  		addq.b	#2,$24(a0)
00009AA6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009AAE 317C 0400 0002             		move.w	#$400,2(a0)
00009AB4 117C 0004 0001             		move.b	#4,1(a0)
00009ABA 117C 0003 0018             		move.b	#3,$18(a0)
00009AC0 117C 0087 0020             		move.b	#$87,$20(a0)
00009AC6 117C 0008 0019             		move.b	#8,$19(a0)
00009ACC 317C FC00 0012             		move.w	#-$400,$12(a0)
00009AD2 117C 0007 001C             		move.b	#7,$1C(a0)
00009AD8                            
00009AD8                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009AD8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009ADE 6100 0000                  		bsr.w	AnimateSprite
00009AE2 6100 0000                  		bsr.w	ObjectFall
00009AE6 6100 0000                  		bsr.w	DisplaySprite
00009AEA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009AEE 0640 00E0                  		addi.w	#$E0,d0
00009AF2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009AF6 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009AF8 4E75                       		rts	
00009AFA                            ; ===========================================================================
00009AFA                            
00009AFA                            Obj1F_Delete2:
00009AFA 6000 0000                  		bra.w	DeleteObject
00009AFE                            ; ===========================================================================
00009AFE                            Ani_obj1F:
00009AFE                            	include "_anim\obj1F.asm"
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE                            ; Animation script - Crabmeat enemy
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009B04 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009B0A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009B0E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009B12 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009B16 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009B1A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009B20 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009B26 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009B2C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009B30 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009B34                            		even
00009B34                            		even
00009B34                            
00009B34                            ; ---------------------------------------------------------------------------
00009B34                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009B34                            ; ---------------------------------------------------------------------------
00009B34                            Map_obj1F:
00009B34                            	include "_maps\obj1F.asm"
00009B34                            ; ---------------------------------------------------------------------------
00009B34                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009B34                            ; ---------------------------------------------------------------------------
00009B34 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009B38 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009B3C 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009B40 0000                       		dc.w byte_97D7-Map_obj1F
00009B42 04                         byte_975E:	dc.b 4
00009B43 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009B48 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009B4D 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009B52 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009B57 04                         byte_9773:	dc.b 4
00009B58 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009B5D F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009B62 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009B67 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009B6C 04                         byte_9788:	dc.b 4
00009B6D EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009B72 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009B77 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009B7C FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009B81 04                         byte_979D:	dc.b 4
00009B82 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009B87 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009B8C FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009B91 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009B96 06                         byte_97B2:	dc.b 6
00009B97 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009B9C F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009BA1 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009BA6 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009BAB 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009BB0 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009BB5 01                         byte_97D1:	dc.b 1
00009BB6 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009BBB 01                         byte_97D7:	dc.b 1
00009BBC F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009BC2 00                         		even
00009BC2 00                         		even
00009BC2                            
00009BC2                            ; ===========================================================================
00009BC2                            ; ---------------------------------------------------------------------------
00009BC2                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009BC2                            ; ---------------------------------------------------------------------------
00009BC2                            
00009BC2                            Obj22:					; XREF: Obj_Index
00009BC2 7000                       		moveq	#0,d0
00009BC4 1028 0024                  		move.b	$24(a0),d0
00009BC8 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009BCC 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009BD0                            ; ===========================================================================
00009BD0 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009BD2 0000                       		dc.w Obj22_Action-Obj22_Index
00009BD4 0000                       		dc.w Obj22_Delete-Obj22_Index
00009BD6                            ; ===========================================================================
00009BD6                            
00009BD6                            Obj22_Main:				; XREF: Obj22_Index
00009BD6 5428 0024                  		addq.b	#2,$24(a0)
00009BDA 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009BE2 317C 0444 0002             		move.w	#$444,2(a0)
00009BE8 117C 0004 0001             		move.b	#4,1(a0)
00009BEE 117C 0003 0018             		move.b	#3,$18(a0)
00009BF4 117C 0008 0020             		move.b	#8,$20(a0)
00009BFA 117C 0018 0019             		move.b	#$18,$19(a0)
00009C00                            
00009C00                            Obj22_Action:				; XREF: Obj22_Index
00009C00 7000                       		moveq	#0,d0
00009C02 1028 0025                  		move.b	$25(a0),d0
00009C06 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C0A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C0E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C14 6100 0000                  		bsr.w	AnimateSprite
00009C18 6000 0000                  		bra.w	MarkObjGone
00009C1C                            ; ===========================================================================
00009C1C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009C1E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            Obj22_Move:				; XREF: Obj22_Index2
00009C20 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009C24 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009C26 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009C2C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009C2E 5428 0025                  		addq.b	#2,$25(a0)
00009C32 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009C38 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009C3E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009C44 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009C4A 6600                       		bne.s	locret_986C	; if not, branch
00009C4C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009C50                            
00009C50                            locret_986C:
00009C50 4E75                       		rts	
00009C52                            ; ===========================================================================
00009C52                            
00009C52                            Obj22_Fire:				; XREF: Obj22_Move
00009C52 6100 0000                  		bsr.w	SingleObjLoad
00009C56 6600                       		bne.s	locret_98D0
00009C58 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009C5C 3368 0008 0008             		move.w	8(a0),8(a1)
00009C62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C68 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009C6E 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009C74 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009C7A 303C 0018                  		move.w	#$18,d0
00009C7E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009C84 6600                       		bne.s	loc_98AA	; if not, branch
00009C86 4440                       		neg.w	d0
00009C88 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009C8C                            
00009C8C                            loc_98AA:
00009C8C D169 0008                  		add.w	d0,8(a1)
00009C90 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009C96 337C 000E 0032             		move.w	#$E,$32(a1)
00009C9C 2348 003C                  		move.l	a0,$3C(a1)
00009CA0 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009CA6 317C 003B 0032             		move.w	#$3B,$32(a0)
00009CAC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009CB2                            
00009CB2                            locret_98D0:
00009CB2 4E75                       		rts	
00009CB4                            ; ===========================================================================
00009CB4                            
00009CB4                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009CB4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CB8 6B00                       		bmi.s	Obj22_ChgDir
00009CBA 6100 0000                  		bsr.w	SpeedToPos
00009CBE 4A28 0034                  		tst.b	$34(a0)
00009CC2 6600                       		bne.s	locret_992A
00009CC4 3038 D008                  		move.w	($FFFFD008).w,d0
00009CC8 9068 0008                  		sub.w	8(a0),d0
00009CCC 6A00                       		bpl.s	Obj22_SetNrSonic
00009CCE 4440                       		neg.w	d0
00009CD0                            
00009CD0                            Obj22_SetNrSonic:
00009CD0 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009CD4 6400                       		bcc.s	locret_992A	; if not, branch
00009CD6 4A28 0001                  		tst.b	1(a0)
00009CDA 6A00                       		bpl.s	locret_992A
00009CDC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009CE2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009CE8 6000                       		bra.s	Obj22_Stop
00009CEA                            ; ===========================================================================
00009CEA                            
00009CEA                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009CEA 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009CF0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009CF6 317C 003B 0032             		move.w	#59,$32(a0)
00009CFC                            
00009CFC                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009CFC 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D00 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D06 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D0C                            
00009D0C                            locret_992A:
00009D0C 4E75                       		rts	
00009D0E                            ; ===========================================================================
00009D0E                            
00009D0E                            Obj22_Delete:				; XREF: Obj22_Index
00009D0E 6100 0000                  		bsr.w	DeleteObject
00009D12 4E75                       		rts	
00009D14                            ; ===========================================================================
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            ; Object 23 - missile that Buzz	Bomber throws
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            
00009D14                            Obj23:					; XREF: Obj_Index
00009D14 7000                       		moveq	#0,d0
00009D16 1028 0024                  		move.b	$24(a0),d0
00009D1A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009D1E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009D22                            ; ===========================================================================
00009D22 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009D24 0000                       		dc.w Obj23_Animate-Obj23_Index
00009D26 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009D28 0000                       		dc.w Obj23_Delete-Obj23_Index
00009D2A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009D2C                            ; ===========================================================================
00009D2C                            
00009D2C                            Obj23_Main:				; XREF: Obj23_Index
00009D2C 5368 0032                  		subq.w	#1,$32(a0)
00009D30 6A00                       		bpl.s	Obj23_ChkCancel
00009D32 5428 0024                  		addq.b	#2,$24(a0)
00009D36 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009D3E 317C 2444 0002             		move.w	#$2444,2(a0)
00009D44 117C 0004 0001             		move.b	#4,1(a0)
00009D4A 117C 0003 0018             		move.b	#3,$18(a0)
00009D50 117C 0008 0019             		move.b	#8,$19(a0)
00009D56 0228 0003 0022             		andi.b	#3,$22(a0)
00009D5C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009D60 6700                       		beq.s	Obj23_Animate	; if not, branch
00009D62 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009D68 117C 0087 0020             		move.b	#$87,$20(a0)
00009D6E 117C 0001 001C             		move.b	#1,$1C(a0)
00009D74 6000                       		bra.s	Obj23_Animate2
00009D76                            ; ===========================================================================
00009D76                            
00009D76                            Obj23_Animate:				; XREF: Obj23_Index
00009D76 6100                       		bsr.s	Obj23_ChkCancel
00009D78 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009D7E 6100 0000                  		bsr.w	AnimateSprite
00009D82 6000 0000                  		bra.w	DisplaySprite
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009D86                            ; destroyed, and if it has, then cancel	the missile
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            
00009D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D86                            
00009D86                            
00009D86                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009D86 2268 003C                  		movea.l	$3C(a0),a1
00009D8A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009D8E 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009D90 4E75                       		rts	
00009D92                            ; End of function Obj23_ChkCancel
00009D92                            
00009D92                            ; ===========================================================================
00009D92                            
00009D92                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009D92 0828 0007 0022             		btst	#7,$22(a0)
00009D98 6600                       		bne.s	Obj23_Explode
00009D9A 117C 0087 0020             		move.b	#$87,$20(a0)
00009DA0 117C 0001 001C             		move.b	#1,$1C(a0)
00009DA6 6100 0000                  		bsr.w	SpeedToPos
00009DAA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DB0 6100 0000                  		bsr.w	AnimateSprite
00009DB4 6100 0000                  		bsr.w	DisplaySprite
00009DB8 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009DBC 0640 00E0                  		addi.w	#$E0,d0
00009DC0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009DC4 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009DC6 4E75                       		rts	
00009DC8                            ; ===========================================================================
00009DC8                            
00009DC8                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009DC8 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009DCC 117C 0000 0024             		move.b	#0,$24(a0)
00009DD2 6000 F2BA                  		bra.w	Obj24
00009DD6                            ; ===========================================================================
00009DD6                            
00009DD6                            Obj23_Delete:				; XREF: Obj23_Index
00009DD6 6100 0000                  		bsr.w	DeleteObject
00009DDA 4E75                       		rts	
00009DDC                            ; ===========================================================================
00009DDC                            
00009DDC                            Obj23_FromNewt:				; XREF: Obj23_Index
00009DDC 4A28 0001                  		tst.b	1(a0)
00009DE0 6AF4                       		bpl.s	Obj23_Delete
00009DE2 6100 0000                  		bsr.w	SpeedToPos
00009DE6                            
00009DE6                            Obj23_Animate2:				; XREF: Obj23_Main
00009DE6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DEC 6100 0000                  		bsr.w	AnimateSprite
00009DF0 6100 0000                  		bsr.w	DisplaySprite
00009DF4 4E75                       		rts	
00009DF6                            ; ===========================================================================
00009DF6                            Ani_obj22:
00009DF6                            	include "_anim\obj22.asm"
00009DF6                            ; ---------------------------------------------------------------------------
00009DF6                            ; Animation script - Buzz Bomber enemy
00009DF6                            ; ---------------------------------------------------------------------------
00009DF6 0000                       		dc.w byte_9A1E-Ani_obj22
00009DF8 0000                       		dc.w byte_9A22-Ani_obj22
00009DFA 0000                       		dc.w byte_9A26-Ani_obj22
00009DFC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E00 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E04 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E08                            		even
00009E08                            		even
00009E08                            
00009E08                            Ani_obj23:
00009E08                            	include "_anim\obj23.asm"
00009E08                            ; ---------------------------------------------------------------------------
00009E08                            ; Animation script - missile that Buzz Bomber throws
00009E08                            ; ---------------------------------------------------------------------------
00009E08 0000                       		dc.w byte_9A2E-Ani_obj23
00009E0A 0000                       		dc.w byte_9A32-Ani_obj23
00009E0C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E10 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E14                            		even
00009E14                            		even
00009E14                            
00009E14                            ; ---------------------------------------------------------------------------
00009E14                            ; Sprite mappings - Buzz Bomber	enemy
00009E14                            ; ---------------------------------------------------------------------------
00009E14                            Map_obj22:
00009E14                            	include "_maps\obj22.asm"
00009E14                            Map_e97a:
00009E14 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E16 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009E18 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009E1A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009E1C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009E1E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009E20 06                         Map_e97a_C: 	dc.b $6
00009E21 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009E26 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009E2B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009E30 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009E35 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009E3A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009E3F 06                         Map_e97a_2B: 	dc.b $6
00009E40 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009E45 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009E4A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009E4F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009E54 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009E59 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009E5E 07                         Map_e97a_4A: 	dc.b $7
00009E5F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009E64 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009E69 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009E6E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009E73 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009E78 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009E7D F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009E82 07                         Map_e97a_6E: 	dc.b $7
00009E83 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009E88 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009E8D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009E92 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009E97 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009E9C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009EA1 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EA6 06                         Map_e97a_92: 	dc.b $6
00009EA7 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009EAC 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009EB1 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009EB6 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009EBB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EC0 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EC5 04                         Map_e97a_B1: 	dc.b $4
00009EC6 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009ECB 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009ED0 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009ED5 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009EDA                            	even
00009EDA                            	even
00009EDA                            
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            ; Sprite mappings - missile that Buzz Bomber throws
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            Map_obj23:
00009EDA                            	include "_maps\obj23.asm"
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            ; Sprite mappings - missile that Buzz Bomber throws
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009EDE 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009EE2 01                         byte_9B0E:	dc.b 1
00009EE3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009EE8 01                         byte_9B14:	dc.b 1
00009EE9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009EEE 01                         byte_9B1A:	dc.b 1
00009EEF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009EF4 01                         byte_9B20:	dc.b 1
00009EF5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009EFA                            		even
00009EFA                            		even
00009EFA                            
00009EFA                            ; ===========================================================================
00009EFA                            ; ---------------------------------------------------------------------------
00009EFA                            ; Object 25 - rings
00009EFA                            ; ---------------------------------------------------------------------------
00009EFA                            
00009EFA                            Obj25:					; XREF: Obj_Index
00009EFA 7000                       		moveq	#0,d0
00009EFC 1028 0024                  		move.b	$24(a0),d0
00009F00 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F04 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F08                            ; ===========================================================================
00009F08 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F0A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F0C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F0E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F10 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F12                            ; ---------------------------------------------------------------------------
00009F12                            ; Distances between rings (format: horizontal, vertical)
00009F12                            ; ---------------------------------------------------------------------------
00009F12 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F14 1800                       		dc.b $18, 0		; horizontal normal
00009F16 2000                       		dc.b $20, 0		; horizontal wide
00009F18 0010                       		dc.b 0,	$10		; vertical tight
00009F1A 0018                       		dc.b 0,	$18		; vertical normal
00009F1C 0020                       		dc.b 0,	$20		; vertical wide
00009F1E 1010                       		dc.b $10, $10		; diagonal
00009F20 1818                       		dc.b $18, $18
00009F22 2020                       		dc.b $20, $20
00009F24 F010                       		dc.b $F0, $10
00009F26 E818                       		dc.b $E8, $18
00009F28 E020                       		dc.b $E0, $20
00009F2A 1008                       		dc.b $10, 8
00009F2C 1810                       		dc.b $18, $10
00009F2E F008                       		dc.b $F0, 8
00009F30 E810                       		dc.b $E8, $10
00009F32                            ; ===========================================================================
00009F32                            
00009F32                            Obj25_Main:				; XREF: Obj25_Index
00009F32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009F36 7000                       		moveq	#0,d0
00009F38 1028 0023                  		move.b	$23(a0),d0
00009F3C 45F2 0002                  		lea	2(a2,d0.w),a2
00009F40 1812                       		move.b	(a2),d4
00009F42 1228 0028                  		move.b	$28(a0),d1
00009F46 1001                       		move.b	d1,d0
00009F48 0241 0007                  		andi.w	#7,d1
00009F4C 0C41 0007                  		cmpi.w	#7,d1
00009F50 6600                       		bne.s	loc_9B80
00009F52 7206                       		moveq	#6,d1
00009F54                            
00009F54                            loc_9B80:
00009F54 4841                       		swap	d1
00009F56 323C 0000                  		move.w	#0,d1
00009F5A E808                       		lsr.b	#4,d0
00009F5C D040                       		add.w	d0,d0
00009F5E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009F62 4885                       		ext.w	d5
00009F64 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009F68 4886                       		ext.w	d6
00009F6A 2248                       		movea.l	a0,a1
00009F6C 3428 0008                  		move.w	8(a0),d2
00009F70 3628 000C                  		move.w	$C(a0),d3
00009F74 E20C                       		lsr.b	#1,d4
00009F76 6500                       		bcs.s	loc_9C02
00009F78 0892 0007                  		bclr	#7,(a2)
00009F7C 6000                       		bra.s	loc_9BBA
00009F7E                            ; ===========================================================================
00009F7E                            
00009F7E                            Obj25_MakeRings:
00009F7E 4841                       		swap	d1
00009F80 E20C                       		lsr.b	#1,d4
00009F82 6500                       		bcs.s	loc_9C02
00009F84 0892 0007                  		bclr	#7,(a2)
00009F88 6100 0000                  		bsr.w	SingleObjLoad
00009F8C 6600                       		bne.s	loc_9C0E
00009F8E                            
00009F8E                            loc_9BBA:				; XREF: Obj25_Main
00009F8E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009F92 5429 0024                  		addq.b	#2,$24(a1)
00009F96 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009F9A 3368 0008 0032             		move.w	8(a0),$32(a1)
00009FA0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009FA4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009FAC 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009FB2 137C 0004 0001             		move.b	#4,1(a1)
00009FB8 137C 0002 0018             		move.b	#2,$18(a1)
00009FBE 137C 0047 0020             		move.b	#$47,$20(a1)
00009FC4 137C 0008 0019             		move.b	#8,$19(a1)
00009FCA 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009FD0 1341 0034                  		move.b	d1,$34(a1)
00009FD4                            
00009FD4                            loc_9C02:
00009FD4 5241                       		addq.w	#1,d1
00009FD6 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009FD8 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009FDA 4841                       		swap	d1
00009FDC 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009FE0                            
00009FE0                            loc_9C0E:
00009FE0 0812 0000                  		btst	#0,(a2)
00009FE4 6600 0000                  		bne.w	DeleteObject
00009FE8                            
00009FE8                            Obj25_Animate:				; XREF: Obj25_Index
00009FE8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009FEE 6100 0000                  		bsr.w	DisplaySprite
00009FF2 3028 0032                  		move.w	$32(a0),d0
00009FF6 0240 FF80                  		andi.w	#$FF80,d0
00009FFA 3238 F700                  		move.w	($FFFFF700).w,d1
00009FFE 0441 0080                  		subi.w	#$80,d1
0000A002 0241 FF80                  		andi.w	#$FF80,d1
0000A006 9041                       		sub.w	d1,d0
0000A008 0C40 0280                  		cmpi.w	#$280,d0
0000A00C 6200                       		bhi.s	Obj25_Delete
0000A00E 4E75                       		rts	
0000A010                            ; ===========================================================================
0000A010                            
0000A010                            Obj25_Collect:				; XREF: Obj25_Index
0000A010 5428 0024                  		addq.b	#2,$24(a0)
0000A014 117C 0000 0020             		move.b	#0,$20(a0)
0000A01A 117C 0001 0018             		move.b	#1,$18(a0)
0000A020 6100 0000                  		bsr.w	CollectRing
0000A024 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A028 7000                       		moveq	#0,d0
0000A02A 1028 0023                  		move.b	$23(a0),d0
0000A02E 1228 0034                  		move.b	$34(a0),d1
0000A032 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A036                            
0000A036                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A036 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A03C 6100 0000                  		bsr.w	AnimateSprite
0000A040 6000 0000                  		bra.w	DisplaySprite
0000A044                            ; ===========================================================================
0000A044                            
0000A044                            Obj25_Delete:				; XREF: Obj25_Index
0000A044 6000 0000                  		bra.w	DeleteObject
0000A048                            
0000A048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A048                            
0000A048                            
0000A048                            CollectRing:				; XREF: Obj25_Collect
0000A048 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A04C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A052 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A056 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A05C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A05E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A064 6700                       		beq.s	loc_9CA4
0000A066 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A06C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A06E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A074 6600                       		bne.s	Obj25_PlaySnd
0000A076                            
0000A076                            loc_9CA4:
0000A076 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A07A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A07E 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A082                            
0000A082                            Obj25_PlaySnd:
0000A082 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A088                            ; End of function CollectRing
0000A088                            
0000A088                            ; ===========================================================================
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            
0000A088                            Obj37:					; XREF: Obj_Index
0000A088 7000                       		moveq	#0,d0
0000A08A 1028 0024                  		move.b	$24(a0),d0
0000A08E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A092 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A096                            ; ===========================================================================
0000A096 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A098 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A09A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A09C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A09E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A0A0                            ; ===========================================================================
0000A0A0                            
0000A0A0                            Obj37_CountRings:			; XREF: Obj37_Index
0000A0A0 2248                       		movea.l	a0,a1
0000A0A2 7A00                       		moveq	#0,d5
0000A0A4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A0A8 7020                       		moveq	#32,d0
0000A0AA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A0AC 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A0AE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A0B0                            
0000A0B0                            loc_9CDE:
0000A0B0 5345                       		subq.w	#1,d5
0000A0B2 383C 0288                  		move.w	#$288,d4
0000A0B6 6000                       		bra.s	Obj37_MakeRings
0000A0B8                            ; ===========================================================================
0000A0B8                            
0000A0B8                            Obj37_Loop:
0000A0B8 6100 0000                  		bsr.w	SingleObjLoad
0000A0BC 6600 0000                  		bne.w	Obj37_ResetCounter
0000A0C0                            
0000A0C0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A0C0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A0C4 5429 0024                  		addq.b	#2,$24(a1)
0000A0C8 137C 0008 0016             		move.b	#8,$16(a1)
0000A0CE 137C 0008 0017             		move.b	#8,$17(a1)
0000A0D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0E0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A0E8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A0EE 137C 0004 0001             		move.b	#4,1(a1)
0000A0F4 137C 0003 0018             		move.b	#3,$18(a1)
0000A0FA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A100 137C 0008 0019             		move.b	#8,$19(a1)
0000A106 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A10C 4A44                       		tst.w	d4
0000A10E 6B00                       		bmi.s	loc_9D62
0000A110 3004                       		move.w	d4,d0
0000A112 6100 8B0E                  		bsr.w	CalcSine
0000A116 3404                       		move.w	d4,d2
0000A118 E04A                       		lsr.w	#8,d2
0000A11A E560                       		asl.w	d2,d0
0000A11C E561                       		asl.w	d2,d1
0000A11E 3400                       		move.w	d0,d2
0000A120 3601                       		move.w	d1,d3
0000A122 0604 0010                  		addi.b	#$10,d4
0000A126 6400                       		bcc.s	loc_9D62
0000A128 0444 0080                  		subi.w	#$80,d4
0000A12C 6400                       		bcc.s	loc_9D62
0000A12E 383C 0288                  		move.w	#$288,d4
0000A132                            
0000A132                            loc_9D62:
0000A132 3342 0010                  		move.w	d2,$10(a1)
0000A136 3343 0012                  		move.w	d3,$12(a1)
0000A13A 4442                       		neg.w	d2
0000A13C 4444                       		neg.w	d4
0000A13E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A142                            
0000A142                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A142 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A148 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A14E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A154 303C 00C6                  		move.w	#$C6,d0
0000A158 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A15E                            
0000A15E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A15E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A164 6100 0000                  		bsr.w	SpeedToPos
0000A168 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A16E 6B00                       		bmi.s	Obj37_ChkDel
0000A170 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A174 D007                       		add.b	d7,d0
0000A176 0200 0003                  		andi.b	#3,d0
0000A17A 6600                       		bne.s	Obj37_ChkDel
0000A17C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A182 4A41                       		tst.w	d1
0000A184 6A00                       		bpl.s	Obj37_ChkDel
0000A186 D368 000C                  		add.w	d1,$C(a0)
0000A18A 3028 0012                  		move.w	$12(a0),d0
0000A18E E440                       		asr.w	#2,d0
0000A190 9168 0012                  		sub.w	d0,$12(a0)
0000A194 4468 0012                  		neg.w	$12(a0)
0000A198                            
0000A198                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A198 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A19C 6700                       		beq.s	Obj37_Delete
0000A19E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A1A2 0640 00E0                  		addi.w	#$E0,d0
0000A1A6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A1AA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A1AC 6000 0000                  		bra.w	DisplaySprite
0000A1B0                            ; ===========================================================================
0000A1B0                            
0000A1B0                            Obj37_Collect:				; XREF: Obj37_Index
0000A1B0 5428 0024                  		addq.b	#2,$24(a0)
0000A1B4 117C 0000 0020             		move.b	#0,$20(a0)
0000A1BA 117C 0001 0018             		move.b	#1,$18(a0)
0000A1C0 6100 FE86                  		bsr.w	CollectRing
0000A1C4                            
0000A1C4                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A1C4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A1CA 6100 0000                  		bsr.w	AnimateSprite
0000A1CE 6000 0000                  		bra.w	DisplaySprite
0000A1D2                            ; ===========================================================================
0000A1D2                            
0000A1D2                            Obj37_Delete:				; XREF: Obj37_Index
0000A1D2 6000 0000                  		bra.w	DeleteObject
0000A1D6                            ; ===========================================================================
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            ; Object 4B - giant ring for entry to special stage
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            
0000A1D6                            Obj4B:					; XREF: Obj_Index
0000A1D6 7000                       		moveq	#0,d0
0000A1D8 1028 0024                  		move.b	$24(a0),d0
0000A1DC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A1E0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A1E4                            ; ===========================================================================
0000A1E4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A1E6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A1E8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A1EA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A1EC                            ; ===========================================================================
0000A1EC                            
0000A1EC                            Obj4B_Main:				; XREF: Obj4B_Index
0000A1EC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A1F4 317C 2400 0002             		move.w	#$2400,2(a0)
0000A1FA 0028 0004 0001             		ori.b	#4,1(a0)
0000A200 117C 0040 0019             		move.b	#$40,$19(a0)
0000A206 4A28 0001                  		tst.b	1(a0)
0000A20A 6A00                       		bpl.s	Obj4B_Animate
0000A20C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A212 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A216 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A21C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A21E 4E75                       		rts	
0000A220                            ; ===========================================================================
0000A220                            
0000A220                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A220 5428 0024                  		addq.b	#2,$24(a0)
0000A224 117C 0002 0018             		move.b	#2,$18(a0)
0000A22A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A230 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A236                            
0000A236                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A236 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A23C 3028 0008                  		move.w	8(a0),d0
0000A240 0240 FF80                  		andi.w	#$FF80,d0
0000A244 3238 F700                  		move.w	($FFFFF700).w,d1
0000A248 0441 0080                  		subi.w	#$80,d1
0000A24C 0241 FF80                  		andi.w	#$FF80,d1
0000A250 9041                       		sub.w	d1,d0
0000A252 0C40 0280                  		cmpi.w	#$280,d0
0000A256 6200 0000                  		bhi.w	DeleteObject
0000A25A 6000 0000                  		bra.w	DisplaySprite
0000A25E                            ; ===========================================================================
0000A25E                            
0000A25E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A25E 5528 0024                  		subq.b	#2,$24(a0)
0000A262 117C 0000 0020             		move.b	#0,$20(a0)
0000A268 6100 0000                  		bsr.w	SingleObjLoad
0000A26C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A270 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A274 3368 0008 0008             		move.w	8(a0),8(a1)
0000A27A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A280 2348 003C                  		move.l	a0,$3C(a1)
0000A284 3038 D008                  		move.w	($FFFFD008).w,d0
0000A288 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A28C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A28E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A294                            
0000A294                            Obj4B_PlaySnd:
0000A294 303C 00C3                  		move.w	#$C3,d0
0000A298 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A29E 6096                       		bra.s	Obj4B_Animate
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A2A0 6000 0000                  		bra.w	DeleteObject
0000A2A4                            ; ===========================================================================
0000A2A4                            ; ---------------------------------------------------------------------------
0000A2A4                            ; Object 7C - flash effect when	you collect the	giant ring
0000A2A4                            ; ---------------------------------------------------------------------------
0000A2A4                            
0000A2A4                            Obj7C:					; XREF: Obj_Index
0000A2A4 7000                       		moveq	#0,d0
0000A2A6 1028 0024                  		move.b	$24(a0),d0
0000A2AA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A2AE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A2B2                            ; ===========================================================================
0000A2B2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A2B4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A2B6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A2B8                            ; ===========================================================================
0000A2B8                            
0000A2B8                            Obj7C_Main:				; XREF: Obj7C_Index
0000A2B8 5428 0024                  		addq.b	#2,$24(a0)
0000A2BC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A2C4 317C 2462 0002             		move.w	#$2462,2(a0)
0000A2CA 0028 0004 0001             		ori.b	#4,1(a0)
0000A2D0 117C 0000 0018             		move.b	#0,$18(a0)
0000A2D6 117C 0020 0019             		move.b	#$20,$19(a0)
0000A2DC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A2E2                            
0000A2E2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A2E2 6100                       		bsr.s	Obj7C_Collect
0000A2E4 3028 0008                  		move.w	8(a0),d0
0000A2E8 0240 FF80                  		andi.w	#$FF80,d0
0000A2EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2F0 0441 0080                  		subi.w	#$80,d1
0000A2F4 0241 FF80                  		andi.w	#$FF80,d1
0000A2F8 9041                       		sub.w	d1,d0
0000A2FA 0C40 0280                  		cmpi.w	#$280,d0
0000A2FE 6200 0000                  		bhi.w	DeleteObject
0000A302 6000 0000                  		bra.w	DisplaySprite
0000A306                            
0000A306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A306                            
0000A306                            
0000A306                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A306 5328 001E                  		subq.b	#1,$1E(a0)
0000A30A 6A00                       		bpl.s	locret_9F76
0000A30C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A312 5228 001A                  		addq.b	#1,$1A(a0)
0000A316 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A31C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A31E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A324 6600                       		bne.s	locret_9F76	; if not, branch
0000A326 2268 003C                  		movea.l	$3C(a0),a1
0000A32A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A330 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A336 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A33C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A340 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A344                            
0000A344                            locret_9F76:
0000A344 4E75                       		rts	
0000A346                            ; ===========================================================================
0000A346                            
0000A346                            Obj7C_End:				; XREF: Obj7C_Collect
0000A346 5428 0024                  		addq.b	#2,$24(a0)
0000A34A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A350 588F                       		addq.l	#4,sp
0000A352 4E75                       		rts	
0000A354                            ; End of function Obj7C_Collect
0000A354                            
0000A354                            ; ===========================================================================
0000A354                            
0000A354                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A354 6000 0000                  		bra.w	DeleteObject
0000A358                            ; ===========================================================================
0000A358                            Ani_obj25:
0000A358                            	include "_anim\obj25.asm"
0000A358                            ; ---------------------------------------------------------------------------
0000A358                            ; Animation script - ring
0000A358                            ; ---------------------------------------------------------------------------
0000A358 0000                       		dc.w byte_9F8C-Ani_obj25
0000A35A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A360                            		even
0000A360                            		even
0000A360                            
0000A360                            ; ---------------------------------------------------------------------------
0000A360                            ; Sprite mappings - rings
0000A360                            ; ---------------------------------------------------------------------------
0000A360                            Map_obj25:
0000A360                            	include "_maps\obj25.asm"
0000A360                            ; ---------------------------------------------------------------------------
0000A360                            ; Sprite mappings - rings
0000A360                            ; ---------------------------------------------------------------------------
0000A360 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A364 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A368 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A36C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A370 01                         byte_9FA2:	dc.b 1
0000A371 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A376 01                         byte_9FA8:	dc.b 1
0000A377 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A37C 01                         byte_9FAE:	dc.b 1
0000A37D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A382 01                         byte_9FB4:	dc.b 1
0000A383 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A388 01                         byte_9FBA:	dc.b 1
0000A389 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A38E 01                         byte_9FC0:	dc.b 1
0000A38F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A394 01                         byte_9FC6:	dc.b 1
0000A395 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A39A 01                         byte_9FCC:	dc.b 1
0000A39B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A3A0                            		even
0000A3A0                            		even
0000A3A0                            
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            ; Sprite mappings - giant ring
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            Map_obj4B:
0000A3A0                            	include "_maps\obj4B.asm"
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            ; Sprite mappings - giant ring
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A3A4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A3A8 0A                         byte_9FDA:	dc.b $A
0000A3A9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A3AE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A3B3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A3B8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A3BD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A3C2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A3C7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A3CC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A3D1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A3D6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A3DB 08                         byte_A00D:	dc.b 8
0000A3DC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A3E1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A3E6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A3EB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A3F0 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A3F5 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A3FA 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A3FF 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A404 04                         byte_A036:	dc.b 4
0000A405 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A40A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A40F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A414 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A419 08                         byte_A04B:	dc.b 8
0000A41A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A41F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A424 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A429 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A42E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A433 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A438 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A43D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A442                            		even
0000A442                            		even
0000A442                            
0000A442                            ; ---------------------------------------------------------------------------
0000A442                            ; Sprite mappings - flash effect when you collect the giant ring
0000A442                            ; ---------------------------------------------------------------------------
0000A442                            Map_obj7C:
0000A442                            	include "_maps\obj7C.asm"
0000A442                            ; ---------------------------------------------------------------------------
0000A442                            ; Sprite mappings - flash effect when you collect the giant ring
0000A442                            ; ---------------------------------------------------------------------------
0000A442 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A446 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A44A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A44E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A452 02                         byte_A084:	dc.b 2
0000A453 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A458 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A45D 04                         byte_A08F:	dc.b 4
0000A45E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A463 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A468 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A46D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A472 04                         byte_A0A4:	dc.b 4
0000A473 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A478 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A47D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A482 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A487 04                         byte_A0B9:	dc.b 4
0000A488 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A48D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A492 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A497 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A49C 04                         byte_A0CE:	dc.b 4
0000A49D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A4A2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A4A7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A4AC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A4B1 04                         byte_A0E3:	dc.b 4
0000A4B2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A4B7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A4BC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A4C1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A4C6 02                         byte_A0F8:	dc.b 2
0000A4C7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A4CC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A4D1 04                         byte_A103:	dc.b 4
0000A4D2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A4D7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A4DC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A4E1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A4E6                            		even
0000A4E6                            		even
0000A4E6                            
0000A4E6                            ; ===========================================================================
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Object 26 - monitors
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            
0000A4E6                            Obj26:					; XREF: Obj_Index
0000A4E6 7000                       		moveq	#0,d0
0000A4E8 1028 0024                  		move.b	$24(a0),d0
0000A4EC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A4F0 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A4F4                            ; ===========================================================================
0000A4F4 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A4F6 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A4F8 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A4FA 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A4FC 0000                       		dc.w Obj26_Display-Obj26_Index
0000A4FE                            ; ===========================================================================
0000A4FE                            
0000A4FE                            Obj26_Main:				; XREF: Obj26_Index
0000A4FE 5428 0024                  		addq.b	#2,$24(a0)
0000A502 117C 000E 0016             		move.b	#$E,$16(a0)
0000A508 117C 000E 0017             		move.b	#$E,$17(a0)
0000A50E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A516 317C 0680 0002             		move.w	#$680,2(a0)
0000A51C 117C 0004 0001             		move.b	#4,1(a0)
0000A522 117C 0003 0018             		move.b	#3,$18(a0)
0000A528 117C 000F 0019             		move.b	#$F,$19(a0)
0000A52E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A532 7000                       		moveq	#0,d0
0000A534 1028 0023                  		move.b	$23(a0),d0
0000A538 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A53E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A544 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A546 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A54C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A552 4E75                       		rts	
0000A554                            ; ===========================================================================
0000A554                            
0000A554                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A554 117C 0046 0020             		move.b	#$46,$20(a0)
0000A55A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A560                            
0000A560                            Obj26_Solid:				; XREF: Obj26_Index
0000A560 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A564 6700                       		beq.s	loc_A1EC	; if not, branch
0000A566 5500                       		subq.b	#2,d0
0000A568 6600                       		bne.s	Obj26_Fall
0000A56A 7200                       		moveq	#0,d1
0000A56C 1228 0019                  		move.b	$19(a0),d1
0000A570 0641 000B                  		addi.w	#$B,d1
0000A574 6100 D3F8                  		bsr.w	ExitPlatform
0000A578 0829 0003 0022             		btst	#3,$22(a1)
0000A57E 6600 0000                  		bne.w	loc_A1BC
0000A582 4228 0025                  		clr.b	$25(a0)
0000A586 6000 0000                  		bra.w	Obj26_Animate
0000A58A                            ; ===========================================================================
0000A58A                            
0000A58A                            loc_A1BC:				; XREF: Obj26_Solid
0000A58A 363C 0010                  		move.w	#$10,d3
0000A58E 3428 0008                  		move.w	8(a0),d2
0000A592 6100 D938                  		bsr.w	MvSonicOnPtfm
0000A596 6000 0000                  		bra.w	Obj26_Animate
0000A59A                            ; ===========================================================================
0000A59A                            
0000A59A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A59A 6100 0000                  		bsr.w	ObjectFall
0000A59E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A5A4 4A41                       		tst.w	d1
0000A5A6 6A00 0000                  		bpl.w	Obj26_Animate
0000A5AA D368 000C                  		add.w	d1,$C(a0)
0000A5AE 4268 0012                  		clr.w	$12(a0)
0000A5B2 4228 0025                  		clr.b	$25(a0)
0000A5B6 6000 0000                  		bra.w	Obj26_Animate
0000A5BA                            ; ===========================================================================
0000A5BA                            
0000A5BA                            loc_A1EC:				; XREF: Obj26_Solid
0000A5BA 323C 001A                  		move.w	#$1A,d1
0000A5BE 343C 000F                  		move.w	#$F,d2
0000A5C2 6100 0000                  		bsr.w	Obj26_SolidSides
0000A5C6 6700 0000                  		beq.w	loc_A25C
0000A5CA 4A69 0012                  		tst.w	$12(a1)
0000A5CE 6B00                       		bmi.s	loc_A20A
0000A5D0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A5D6 6700                       		beq.s	loc_A25C	; if yes, branch
0000A5D8                            
0000A5D8                            loc_A20A:
0000A5D8 4A41                       		tst.w	d1
0000A5DA 6A00                       		bpl.s	loc_A220
0000A5DC 9769 000C                  		sub.w	d3,$C(a1)
0000A5E0 6100 D27A                  		bsr.w	loc_74AE
0000A5E4 117C 0002 0025             		move.b	#2,$25(a0)
0000A5EA 6000 0000                  		bra.w	Obj26_Animate
0000A5EE                            ; ===========================================================================
0000A5EE                            
0000A5EE                            loc_A220:
0000A5EE 4A40                       		tst.w	d0
0000A5F0 6700 0000                  		beq.w	loc_A246
0000A5F4 6B00                       		bmi.s	loc_A230
0000A5F6 4A69 0010                  		tst.w	$10(a1)
0000A5FA 6B00                       		bmi.s	loc_A246
0000A5FC 6000                       		bra.s	loc_A236
0000A5FE                            ; ===========================================================================
0000A5FE                            
0000A5FE                            loc_A230:
0000A5FE 4A69 0010                  		tst.w	$10(a1)
0000A602 6A00                       		bpl.s	loc_A246
0000A604                            
0000A604                            loc_A236:
0000A604 9169 0008                  		sub.w	d0,8(a1)
0000A608 337C 0000 0014             		move.w	#0,$14(a1)
0000A60E 337C 0000 0010             		move.w	#0,$10(a1)
0000A614                            
0000A614                            loc_A246:
0000A614 0829 0001 0022             		btst	#1,$22(a1)
0000A61A 6600                       		bne.s	loc_A26A
0000A61C 08E9 0005 0022             		bset	#5,$22(a1)
0000A622 08E8 0005 0022             		bset	#5,$22(a0)
0000A628 6000                       		bra.s	Obj26_Animate
0000A62A                            ; ===========================================================================
0000A62A                            
0000A62A                            loc_A25C:
0000A62A 0828 0005 0022             		btst	#5,$22(a0)
0000A630 6700                       		beq.s	Obj26_Animate
0000A632 337C 0001 001C             		move.w	#1,$1C(a1)
0000A638                            
0000A638                            loc_A26A:
0000A638 08A8 0005 0022             		bclr	#5,$22(a0)
0000A63E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A644                            
0000A644                            Obj26_Animate:				; XREF: Obj26_Index
0000A644 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A64A 6100 0000                  		bsr.w	AnimateSprite
0000A64E                            
0000A64E                            Obj26_Display:				; XREF: Obj26_Index
0000A64E 6100 0000                  		bsr.w	DisplaySprite
0000A652 3028 0008                  		move.w	8(a0),d0
0000A656 0240 FF80                  		andi.w	#$FF80,d0
0000A65A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A65E 0441 0080                  		subi.w	#$80,d1
0000A662 0241 FF80                  		andi.w	#$FF80,d1
0000A666 9041                       		sub.w	d1,d0
0000A668 0C40 0280                  		cmpi.w	#$280,d0
0000A66C 6200 0000                  		bhi.w	DeleteObject
0000A670 4E75                       		rts	
0000A672                            ; ===========================================================================
0000A672                            
0000A672                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A672 5428 0024                  		addq.b	#2,$24(a0)
0000A676 117C 0000 0020             		move.b	#0,$20(a0)
0000A67C 6100 0000                  		bsr.w	SingleObjLoad
0000A680 6600                       		bne.s	Obj26_Explode
0000A682 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A686 3368 0008 0008             		move.w	8(a0),8(a1)
0000A68C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A692 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A698 7400                       		moveq	#0,d2	; GMZ
0000A69A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A69C                            
0000A69C                            Obj26_Explode:
0000A69C 6100 0000                  		bsr.w	SingleObjLoad
0000A6A0                            		; bne.s	Obj26_SetBroken
0000A6A0 6600                       		bne.s	Obj26_NextExplosion	; GMZ
0000A6A2 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A6A6 5429 0024                  		addq.b	#2,$24(a1)
0000A6AA 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A6AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A6B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A6BA                            
0000A6BA                            Obj26_NextExplosion:
0000A6BA 5802                       		addq.b	#4,d2
0000A6BC 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A6C0                            
0000A6C0                            Obj26_SetBroken:
0000A6C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6C4 7000                       		moveq	#0,d0
0000A6C6 1028 0023                  		move.b	$23(a0),d0
0000A6CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A6D0 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A6D6 6000 0000                  		bra.w	DisplaySprite
0000A6DA                            ; ===========================================================================
0000A6DA                            ; ---------------------------------------------------------------------------
0000A6DA                            ; Object 2E - contents of monitors
0000A6DA                            ; ---------------------------------------------------------------------------
0000A6DA                            
0000A6DA                            Obj2E:					; XREF: Obj_Index
0000A6DA 7000                       		moveq	#0,d0
0000A6DC 1028 0024                  		move.b	$24(a0),d0
0000A6E0 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A6E4 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A6E8 6000 0000                  		bra.w	DisplaySprite
0000A6EC                            ; ===========================================================================
0000A6EC 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A6EE 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A6F0 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Obj2E_Main:				; XREF: Obj2E_Index
0000A6F2 5428 0024                  		addq.b	#2,$24(a0)
0000A6F6 317C 0680 0002             		move.w	#$680,2(a0)
0000A6FC 117C 0024 0001             		move.b	#$24,1(a0)
0000A702 117C 0003 0018             		move.b	#3,$18(a0)
0000A708 117C 0008 0019             		move.b	#8,$19(a0)
0000A70E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A714 7000                       		moveq	#0,d0
0000A716 1028 001C                  		move.b	$1C(a0),d0
0000A71A 5400                       		addq.b	#2,d0
0000A71C 1140 001A                  		move.b	d0,$1A(a0)
0000A720 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A726 D000                       		add.b	d0,d0
0000A728 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A72C 5249                       		addq.w	#1,a1
0000A72E 2149 0004                  		move.l	a1,4(a0)
0000A732                            
0000A732                            Obj2E_Move:				; XREF: Obj2E_Index
0000A732 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A736 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A73A 6100 0000                  		bsr.w	SpeedToPos
0000A73E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A744 4E75                       		rts	
0000A746                            ; ===========================================================================
0000A746                            
0000A746                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A746 5428 0024                  		addq.b	#2,$24(a0)
0000A74A 317C 001D 001E             		move.w	#29,$1E(a0)
0000A750 1028 001C                  		move.b	$1C(a0),d0
0000A754 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A758 6600                       		bne.s	Obj2E_ChkSonic
0000A75A 4E75                       		rts			; Eggman monitor does nothing
0000A75C                            ; ===========================================================================
0000A75C                            
0000A75C                            Obj2E_ChkSonic:
0000A75C 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A760 6600                       		bne.s	Obj2E_ChkShoes
0000A762                            
0000A762                            ExtraLife:
0000A762 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A766 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A76A 303C 0088                  		move.w	#$88,d0
0000A76E 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A774                            ; ===========================================================================
0000A774                            
0000A774                            Obj2E_ChkShoes:
0000A774 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A778 6600                       		bne.s	Obj2E_ChkShield
0000A77A 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A780 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A786 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A78C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A792 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A798 303C 00E2                  		move.w	#$E2,d0
0000A79C 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A7A2                            ; ===========================================================================
0000A7A2                            
0000A7A2                            Obj2E_ChkShield:
0000A7A2 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A7A6 6600                       		bne.s	Obj2E_ChkInvinc
0000A7A8 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A7AE 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A7B4 303C 00AF                  		move.w	#$AF,d0
0000A7B8 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A7BE                            ; ===========================================================================
0000A7BE                            
0000A7BE                            Obj2E_ChkInvinc:
0000A7BE 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A7C2 6600                       		bne.s	Obj2E_ChkRings
0000A7C4 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A7CA 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A7D0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A7D6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A7DC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A7E2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A7E8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A7EE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A7F4 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A7FA 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A800 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A804 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A806 303C 0087                  		move.w	#$87,d0
0000A80A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A810                            ; ===========================================================================
0000A810                            
0000A810                            Obj2E_NoMusic:
0000A810 4E75                       		rts	
0000A812                            ; ===========================================================================
0000A812                            
0000A812                            Obj2E_ChkRings:
0000A812 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A816 6600                       		bne.s	Obj2E_ChkS
0000A818 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A81E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A824 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A82A 6500                       		bcs.s	Obj2E_RingSound
0000A82C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A832 6700 FF2E                  		beq.w	ExtraLife
0000A836 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A83C 6500                       		bcs.s	Obj2E_RingSound
0000A83E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A844 6700 FF1C                  		beq.w	ExtraLife
0000A848                            
0000A848                            Obj2E_RingSound:
0000A848 303C 00B5                  		move.w	#$B5,d0
0000A84C 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A852                            ; ===========================================================================
0000A852                            
0000A852                            Obj2E_ChkS:
0000A852 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A856 6600                       		bne.s	Obj2E_ChkEnd
0000A858                            		; nop	
0000A858 7201                       		moveq	#1,d1
0000A85A B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A85E                            
0000A85E                            Obj2E_ChkEnd:
0000A85E 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A860                            ; ===========================================================================
0000A860                            
0000A860                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A860 5368 001E                  		subq.w	#1,$1E(a0)
0000A864 6B00 0000                  		bmi.w	DeleteObject
0000A868 4E75                       		rts	
0000A86A                            ; ---------------------------------------------------------------------------
0000A86A                            ; Subroutine to	make the sides of a monitor solid
0000A86A                            ; ---------------------------------------------------------------------------
0000A86A                            
0000A86A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A86A                            
0000A86A                            
0000A86A                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A86A 43F8 D000                  		lea	($FFFFD000).w,a1
0000A86E 3029 0008                  		move.w	8(a1),d0
0000A872 9068 0008                  		sub.w	8(a0),d0
0000A876 D041                       		add.w	d1,d0
0000A878 6B00                       		bmi.s	loc_A4E6
0000A87A 3601                       		move.w	d1,d3
0000A87C D643                       		add.w	d3,d3
0000A87E B043                       		cmp.w	d3,d0
0000A880 6200                       		bhi.s	loc_A4E6
0000A882 1629 0016                  		move.b	$16(a1),d3
0000A886 4883                       		ext.w	d3
0000A888 D443                       		add.w	d3,d2
0000A88A 3629 000C                  		move.w	$C(a1),d3
0000A88E 9668 000C                  		sub.w	$C(a0),d3
0000A892 D642                       		add.w	d2,d3
0000A894 6B00                       		bmi.s	loc_A4E6
0000A896 D442                       		add.w	d2,d2
0000A898 B642                       		cmp.w	d2,d3
0000A89A 6400                       		bcc.s	loc_A4E6
0000A89C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A8A0 6B00                       		bmi.s	loc_A4E6
0000A8A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A8A8 6400                       		bcc.s	loc_A4E6
0000A8AA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A8AE 6600                       		bne.s	loc_A4E6
0000A8B0 B240                       		cmp.w	d0,d1
0000A8B2 6400                       		bcc.s	loc_A4DC
0000A8B4 D241                       		add.w	d1,d1
0000A8B6 9041                       		sub.w	d1,d0
0000A8B8                            
0000A8B8                            loc_A4DC:
0000A8B8 0C43 0010                  		cmpi.w	#$10,d3
0000A8BC 6500                       		bcs.s	loc_A4EA
0000A8BE                            
0000A8BE                            loc_A4E2:
0000A8BE 7201                       		moveq	#1,d1
0000A8C0 4E75                       		rts	
0000A8C2                            ; ===========================================================================
0000A8C2                            
0000A8C2                            loc_A4E6:
0000A8C2 7200                       		moveq	#0,d1
0000A8C4 4E75                       		rts	
0000A8C6                            ; ===========================================================================
0000A8C6                            
0000A8C6                            loc_A4EA:
0000A8C6 7200                       		moveq	#0,d1
0000A8C8 1228 0019                  		move.b	$19(a0),d1
0000A8CC 5841                       		addq.w	#4,d1
0000A8CE 3401                       		move.w	d1,d2
0000A8D0 D442                       		add.w	d2,d2
0000A8D2 D269 0008                  		add.w	8(a1),d1
0000A8D6 9268 0008                  		sub.w	8(a0),d1
0000A8DA 6BE2                       		bmi.s	loc_A4E2
0000A8DC B242                       		cmp.w	d2,d1
0000A8DE 64DE                       		bcc.s	loc_A4E2
0000A8E0 72FF                       		moveq	#-1,d1
0000A8E2 4E75                       		rts	
0000A8E4                            ; End of function Obj26_SolidSides
0000A8E4                            
0000A8E4                            ; ===========================================================================
0000A8E4                            Ani_obj26:
0000A8E4                            	include "_anim\obj26.asm"
0000A8E4                            ; ---------------------------------------------------------------------------
0000A8E4                            ; Animation script - monitors
0000A8E4                            ; ---------------------------------------------------------------------------
0000A8E4 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A8EA 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A8F0 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A8F6 0000                       		dc.w byte_A582-Ani_obj26
0000A8F8 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A8FE 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A90A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A916 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A922 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A92E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A93A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A946 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A952 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A95E 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A966                            		even
0000A966                            		even
0000A966                            
0000A966                            ; ---------------------------------------------------------------------------
0000A966                            ; Sprite mappings - monitors
0000A966                            ; ---------------------------------------------------------------------------
0000A966                            Map_obj26:
0000A966                            	include "_maps\obj26.asm"
0000A966                            ; ---------------------------------------------------------------------------
0000A966                            ; Sprite mappings - monitors
0000A966                            ; ---------------------------------------------------------------------------
0000A966 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A96A 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A96E 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A972 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A976 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A97A 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A97E 01                         byte_A5A2:	dc.b 1			; static monitor
0000A97F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A984 02                         byte_A5A8:	dc.b 2			; static monitor
0000A985 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A98A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A98F 02                         byte_A5B3:	dc.b 2			; static monitor
0000A990 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A995 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A99A 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A99B F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A9A0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9A5 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A9A6 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A9AB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9B0 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A9B1 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A9B6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9BB 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A9BC F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A9C1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9C6 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A9C7 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A9CC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9D1 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A9D2 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A9D7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9DC 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A9DD F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A9E2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9E7 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A9E8 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A9ED EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A9F2 01                         byte_A616:	dc.b 1			; broken monitor
0000A9F3 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A9F8                            		even
0000A9F8                            		even
0000A9F8                            
0000A9F8                            ; ===========================================================================
0000A9F8                            ; ---------------------------------------------------------------------------
0000A9F8                            ; Object 0E - Sonic on the title screen
0000A9F8                            ; ---------------------------------------------------------------------------
0000A9F8                            
0000A9F8                            Obj0E:					; XREF: Obj_Index
0000A9F8 7000                       		moveq	#0,d0
0000A9FA 1028 0024                  		move.b	$24(a0),d0
0000A9FE 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AA02 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AA06                            ; ===========================================================================
0000AA06 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AA08 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AA0A 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AA0C 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AA0E                            ; ===========================================================================
0000AA0E                            
0000AA0E                            Obj0E_Main:				; XREF: Obj0E_Index
0000AA0E 5428 0024                  		addq.b	#2,$24(a0)
0000AA12 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AA18 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AA1E 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AA26 317C 2300 0002             		move.w	#$2300,2(a0)
0000AA2C 117C 0001 0018             		move.b	#1,$18(a0)
0000AA32 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AA38 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AA3E 6100 0000                  		bsr.w	AnimateSprite
0000AA42                            
0000AA42                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AA42 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AA46 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AA48 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AA4C 6000 0000                  		bra.w	DisplaySprite
0000AA50                            ; ===========================================================================
0000AA50                            
0000AA50                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AA50 4E75                       		rts	
0000AA52                            ; ===========================================================================
0000AA52                            
0000AA52                            Obj0E_Move:				; XREF: Obj0E_Index
0000AA52 5168 000A                  		subq.w	#8,$A(a0)
0000AA56 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AA5C 6600                       		bne.s	Obj0E_Display
0000AA5E 5428 0024                  		addq.b	#2,$24(a0)
0000AA62                            
0000AA62                            Obj0E_Display:
0000AA62 6000 0000                  		bra.w	DisplaySprite
0000AA66                            ; ===========================================================================
0000AA66 4E75                       		rts	
0000AA68                            ; ===========================================================================
0000AA68                            
0000AA68                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AA68 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AA6E 6100 0000                  		bsr.w	AnimateSprite
0000AA72 6000 0000                  		bra.w	DisplaySprite
0000AA76                            ; ===========================================================================
0000AA76 4E75                       		rts	
0000AA78                            ; ===========================================================================
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78                            
0000AA78                            Obj0F:					; XREF: Obj_Index
0000AA78 7000                       		moveq	#0,d0
0000AA7A 1028 0024                  		move.b	$24(a0),d0
0000AA7E 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AA82 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AA86 6000 0000                  		bra.w	DisplaySprite
0000AA8A                            ; ===========================================================================
0000AA8A 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AA8C 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AA8E 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AA90                            ; ===========================================================================
0000AA90                            
0000AA90                            Obj0F_Main:				; XREF: Obj0F_Index
0000AA90 5428 0024                  		addq.b	#2,$24(a0)
0000AA94 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AA9A 317C 0130 000A             		move.w	#$130,$A(a0)
0000AAA0 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AAA8 317C 0200 0002             		move.w	#$200,2(a0)
0000AAAE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AAB4 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AAB6 5428 0024                  		addq.b	#2,$24(a0)
0000AABA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AAC0 6600                       		bne.s	locret_A6F8	; if not, branch
0000AAC2 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AAC8 317C 0170 0008             		move.w	#$170,8(a0)
0000AACE 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AAD4                            
0000AAD4                            locret_A6F8:				; XREF: Obj0F_Index
0000AAD4 4E75                       		rts	
0000AAD6                            ; ===========================================================================
0000AAD6                            
0000AAD6                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AAD6 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AADC 6000 0000                  		bra.w	AnimateSprite
0000AAE0                            ; ===========================================================================
0000AAE0                            Ani_obj0E:
0000AAE0                            	include "_anim\obj0E.asm"
0000AAE0                            ; ---------------------------------------------------------------------------
0000AAE0                            ; Animation script - Sonic on the title screen
0000AAE0                            ; ---------------------------------------------------------------------------
0000AAE0 0000                       		dc.w byte_A706-Ani_obj0E
0000AAE2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AAEE                            		even
0000AAEE                            		even
0000AAEE                            
0000AAEE                            Ani_obj0F:
0000AAEE                            	include "_anim\obj0F.asm"
0000AAEE                            ; ---------------------------------------------------------------------------
0000AAEE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AAEE                            ; ---------------------------------------------------------------------------
0000AAEE 0000                       		dc.w byte_A714-Ani_obj0F
0000AAF0 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AAF4                            		even
0000AAF4                            		even
0000AAF4                            
0000AAF4                            ; ---------------------------------------------------------------------------
0000AAF4                            ; Subroutine to	animate	a sprite using an animation script
0000AAF4                            ; ---------------------------------------------------------------------------
0000AAF4                            
0000AAF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AAF4                            
0000AAF4                            
0000AAF4                            AnimateSprite:
0000AAF4 7000                       		moveq	#0,d0
0000AAF6 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AAFA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AAFE 6700                       		beq.s	Anim_Run	; if not, branch
0000AB00 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AB04 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AB0A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AB10                            
0000AB10                            Anim_Run:
0000AB10 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AB14 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AB16 D040                       		add.w	d0,d0
0000AB18 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AB1C 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AB20 7200                       		moveq	#0,d1
0000AB22 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AB26 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AB2A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AB2C                            
0000AB2C                            Anim_Next:
0000AB2C 1200                       		move.b	d0,d1
0000AB2E 0200 001F                  		andi.b	#$1F,d0
0000AB32 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AB36 1028 0022                  		move.b	$22(a0),d0
0000AB3A E719                       		rol.b	#3,d1
0000AB3C B101                       		eor.b	d0,d1
0000AB3E 0201 0003                  		andi.b	#3,d1
0000AB42 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AB48 8328 0001                  		or.b	d1,1(a0)
0000AB4C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AB50                            
0000AB50                            Anim_Wait:
0000AB50 4E75                       		rts	
0000AB52                            ; ===========================================================================
0000AB52                            
0000AB52                            Anim_End_FF:
0000AB52 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AB54 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AB56 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AB5C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AB60 60CA                       		bra.s	Anim_Next
0000AB62                            ; ===========================================================================
0000AB62                            
0000AB62                            Anim_End_FE:
0000AB62 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AB64 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AB66 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AB6A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AB6E 9200                       		sub.b	d0,d1
0000AB70 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AB74 60B6                       		bra.s	Anim_Next
0000AB76                            ; ===========================================================================
0000AB76                            
0000AB76                            Anim_End_FD:
0000AB76 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AB78 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AB7A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AB80                            
0000AB80                            Anim_End_FC:
0000AB80 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AB82 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AB84 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AB88                            
0000AB88                            Anim_End_FB:
0000AB88 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AB8A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AB8C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AB92 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AB96                            
0000AB96                            Anim_End_FA:
0000AB96 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AB98 6600                       		bne.s	Anim_End	; if not, branch
0000AB9A 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AB9E                            
0000AB9E                            Anim_End:
0000AB9E 4E75                       		rts	
0000ABA0                            ; End of function AnimateSprite
0000ABA0                            
0000ABA0                            ; ===========================================================================
0000ABA0                            ; ---------------------------------------------------------------------------
0000ABA0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ABA0                            ; ---------------------------------------------------------------------------
0000ABA0                            Map_obj0F:
0000ABA0                            	include "_maps\obj0F.asm"
0000ABA0                            ; ---------------------------------------------------------------------------
0000ABA0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ABA0                            ; ---------------------------------------------------------------------------
0000ABA0 0000                       		dc.w byte_A7CD-Map_obj0F
0000ABA2 0000                       		dc.w byte_A7CC-Map_obj0F
0000ABA4 0000                       		dc.w byte_A7EB-Map_obj0F
0000ABA6 0000                       		dc.w byte_A882-Map_obj0F
0000ABA8 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ABA9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ABAE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000ABB3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000ABB8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000ABBD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000ABC2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000ABC7 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000ABC8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABCD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABD2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABD7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABDC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABE1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABE6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABEB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABF0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABF5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ABFA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ABFF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC04 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC09 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC0E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC13 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC18 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC1D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC22 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC27 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AC2C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC31 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC36 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC3B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC40 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC45 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC4A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC4F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC54 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC59 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AC5E 01                         byte_A882:	dc.b 1			; "TM"
0000AC5F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AC64                            		even
0000AC64                            		even
0000AC64                            
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            ; Sprite mappings - Sonic on the title screen
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            Map_obj0E:
0000AC64                            	include "_maps\obj0E.asm"
0000AC64                            ; ================================================================================
0000AC64                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 15:54:10 GMT-0500 (Central Daylight Time)
0000AC64                            ; ================================================================================
0000AC64                            
0000AC64                            DATANHL9WDDYR1:
0000AC64 0000 0000                  	dc.w DATANHL9WDDYR1_0-DATANHL9WDDYR1, DATANHL9WDDYR1_1-DATANHL9WDDYR1
0000AC68 0000 0000                  	dc.w DATANHL9WDDYR1_2-DATANHL9WDDYR1, DATANHL9WDDYR1_3-DATANHL9WDDYR1
0000AC6C 0000 0000                  	dc.w DATANHL9WDDYR1_4-DATANHL9WDDYR1, DATANHL9WDDYR1_5-DATANHL9WDDYR1
0000AC70 0000 0000                  	dc.w DATANHL9WDDYR1_6-DATANHL9WDDYR1, DATANHL9WDDYR1_7-DATANHL9WDDYR1
0000AC74 0A                         DATANHL9WDDYR1_0: dc.b $A
0000AC75 0808 0000 08               	dc.b $8, $8, $0, $0, $8
0000AC7A 100F 0003 08               	dc.b $10, $F, $0, $3, $8
0000AC7F 100F 0013 28               	dc.b $10, $F, $0, $13, $28
0000AC84 300E 0023 08               	dc.b $30, $E, $0, $23, $8
0000AC89 300E 002F 28               	dc.b $30, $E, $0, $2F, $28
0000AC8E 480D 003B 00               	dc.b $48, $D, $0, $3B, $0
0000AC93 4809 0043 20               	dc.b $48, $9, $0, $43, $20
0000AC98 4800 0049 38               	dc.b $48, $0, $0, $49, $38
0000AC9D 580C 004A 08               	dc.b $58, $C, $0, $4A, $8
0000ACA2 5800 004E 28               	dc.b $58, $0, $0, $4E, $28
0000ACA7 0F                         DATANHL9WDDYR1_1: dc.b $F
0000ACA8 480E 01BD 20               	dc.b $48, $E, $1, $BD, $20
0000ACAD 3805 01C9 38               	dc.b $38, $5, $1, $C9, $38
0000ACB2 4000 01CD 30               	dc.b $40, $0, $1, $CD, $30
0000ACB7 4800 01CE 40               	dc.b $48, $0, $1, $CE, $40
0000ACBC 6000 01CF 20               	dc.b $60, $0, $1, $CF, $20
0000ACC1 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000ACC6 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000ACCB 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000ACD0 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000ACD5 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000ACDA 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000ACDF 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000ACE4 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000ACE9 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000ACEE 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000ACF3 11                         DATANHL9WDDYR1_2: dc.b $11
0000ACF4 380E 01BD 28               	dc.b $38, $E, $1, $BD, $28
0000ACF9 2805 01C9 40               	dc.b $28, $5, $1, $C9, $40
0000ACFE 3000 01CD 38               	dc.b $30, $0, $1, $CD, $38
0000AD03 3800 01CE 48               	dc.b $38, $0, $1, $CE, $48
0000AD08 5000 01CF 28               	dc.b $50, $0, $1, $CF, $28
0000AD0D 200F 01A9 08               	dc.b $20, $F, $1, $A9, $8
0000AD12 2003 01B9 28               	dc.b $20, $3, $1, $B9, $28
0000AD17 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000AD1C 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000AD21 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AD26 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AD2B 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AD30 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AD35 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AD3A 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AD3F 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AD44 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AD49 0D                         DATANHL9WDDYR1_3: dc.b $D
0000AD4A 100F 00A3 08               	dc.b $10, $F, $0, $A3, $8
0000AD4F 0808 00B3 28               	dc.b $8, $8, $0, $B3, $28
0000AD54 100F 00B6 28               	dc.b $10, $F, $0, $B6, $28
0000AD59 1800 00C6 48               	dc.b $18, $0, $0, $C6, $48
0000AD5E 2006 00C7 48               	dc.b $20, $6, $0, $C7, $48
0000AD63 3800 00CD 48               	dc.b $38, $0, $0, $CD, $48
0000AD68 300D 00CE 08               	dc.b $30, $D, $0, $CE, $8
0000AD6D 300E 00D6 28               	dc.b $30, $E, $0, $D6, $28
0000AD72 400B 00E2 10               	dc.b $40, $B, $0, $E2, $10
0000AD77 4808 00EE 28               	dc.b $48, $8, $0, $EE, $28
0000AD7C 5001 00F1 08               	dc.b $50, $1, $0, $F1, $8
0000AD81 5004 00F3 28               	dc.b $50, $4, $0, $F3, $28
0000AD86 5800 00F5 28               	dc.b $58, $0, $0, $F5, $28
0000AD8B 0B                         DATANHL9WDDYR1_4: dc.b $B
0000AD8C 080F 00F6 10               	dc.b $8, $F, $0, $F6, $10
0000AD91 080B 0106 30               	dc.b $8, $B, $1, $6, $30
0000AD96 1006 0112 48               	dc.b $10, $6, $1, $12, $48
0000AD9B 280E 0118 18               	dc.b $28, $E, $1, $18, $18
0000ADA0 280E 0124 38               	dc.b $28, $E, $1, $24, $38
0000ADA5 2801 0130 10               	dc.b $28, $1, $1, $30, $10
0000ADAA 400E 0132 10               	dc.b $40, $E, $1, $32, $10
0000ADAF 4006 013E 30               	dc.b $40, $6, $1, $3E, $30
0000ADB4 4004 0144 40               	dc.b $40, $4, $1, $44, $40
0000ADB9 4800 0146 40               	dc.b $48, $0, $1, $46, $40
0000ADBE 5808 0147 18               	dc.b $58, $8, $1, $47, $18
0000ADC3 13                         DATANHL9WDDYR1_5: dc.b $13
0000ADC4 280E 01E4 38               	dc.b $28, $E, $1, $E4, $38
0000ADC9 1805 01F0 48               	dc.b $18, $5, $1, $F0, $48
0000ADCE 4008 01F4 38               	dc.b $40, $8, $1, $F4, $38
0000ADD3 4804 01F7 38               	dc.b $48, $4, $1, $F7, $38
0000ADD8 100F 014A 10               	dc.b $10, $F, $1, $4A, $10
0000ADDD 0804 015A 20               	dc.b $8, $4, $1, $5A, $20
0000ADE2 000B 015C 30               	dc.b $0, $B, $1, $5C, $30
0000ADE7 0800 0168 48               	dc.b $8, $0, $1, $68, $48
0000ADEC 1800 0169 48               	dc.b $18, $0, $1, $69, $48
0000ADF1 1805 016A 00               	dc.b $18, $5, $1, $6A, $0
0000ADF6 2802 016E 08               	dc.b $28, $2, $1, $6E, $8
0000ADFB 300F 0171 10               	dc.b $30, $F, $1, $71, $10
0000AE00 200D 0181 30               	dc.b $20, $D, $1, $81, $30
0000AE05 2001 0189 50               	dc.b $20, $1, $1, $89, $50
0000AE0A 3008 018B 30               	dc.b $30, $8, $1, $8B, $30
0000AE0F 380E 018E 30               	dc.b $38, $E, $1, $8E, $30
0000AE14 500D 019A 08               	dc.b $50, $D, $1, $9A, $8
0000AE19 500C 01A2 28               	dc.b $50, $C, $1, $A2, $28
0000AE1E 5808 01A6 28               	dc.b $58, $8, $1, $A6, $28
0000AE23 0F                         DATANHL9WDDYR1_6: dc.b $F
0000AE24 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AE29 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AE2E 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AE33 EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AE38 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AE3D 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AE42 EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AE47 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AE4C 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AE51 EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AE56 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000AE5B 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000AE60 EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000AE65 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000AE6A 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000AE6F 0F                         DATANHL9WDDYR1_7: dc.b $F
0000AE70 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AE75 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AE7A 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AE7F EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AE84 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AE89 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AE8E EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AE93 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AE98 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AE9D EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AEA2 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000AEA7 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000AEAC EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000AEB1 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000AEB6 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000AEBC 00                         	even
0000AEBC 00                         	even
0000AEBC                            
0000AEBC                            ; ===========================================================================
0000AEBC                            ; ---------------------------------------------------------------------------
0000AEBC                            ; Object 2B - Chopper enemy (GHZ)
0000AEBC                            ; ---------------------------------------------------------------------------
0000AEBC                            
0000AEBC                            Obj2B:					; XREF: Obj_Index
0000AEBC 7000                       		moveq	#0,d0
0000AEBE 1028 0024                  		move.b	$24(a0),d0
0000AEC2 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AEC6 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AECA 6000 0000                  		bra.w	MarkObjGone
0000AECE                            ; ===========================================================================
0000AECE 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AED0 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AED2                            ; ===========================================================================
0000AED2                            
0000AED2                            Obj2B_Main:				; XREF: Obj2B_Index
0000AED2 5428 0024                  		addq.b	#2,$24(a0)
0000AED6 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AEDE 317C 047B 0002             		move.w	#$47B,2(a0)
0000AEE4 117C 0004 0001             		move.b	#4,1(a0)
0000AEEA 117C 0004 0018             		move.b	#4,$18(a0)
0000AEF0 117C 0009 0020             		move.b	#9,$20(a0)
0000AEF6 117C 0010 0019             		move.b	#$10,$19(a0)
0000AEFC 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AF02 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AF08                            
0000AF08                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AF08 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AF0E 6100 FBE4                  		bsr.w	AnimateSprite
0000AF12 6100 0000                  		bsr.w	SpeedToPos
0000AF16 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AF1C 3028 0030                  		move.w	$30(a0),d0
0000AF20 B068 000C                  		cmp.w	$C(a0),d0
0000AF24 6400                       		bcc.s	Obj2B_ChgAni
0000AF26 3140 000C                  		move.w	d0,$C(a0)
0000AF2A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AF30                            
0000AF30                            Obj2B_ChgAni:
0000AF30 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AF36 0440 00C0                  		subi.w	#$C0,d0
0000AF3A B068 000C                  		cmp.w	$C(a0),d0
0000AF3E 6400                       		bcc.s	locret_ABB6
0000AF40 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AF46 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AF4A 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AF4C 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AF52                            
0000AF52                            locret_ABB6:
0000AF52 4E75                       		rts	
0000AF54                            ; ===========================================================================
0000AF54                            Ani_obj2B:
0000AF54                            	include "_anim\obj2B.asm"
0000AF54                            ; ---------------------------------------------------------------------------
0000AF54                            ; Animation script - Chopper enemy
0000AF54                            ; ---------------------------------------------------------------------------
0000AF54 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AF56 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AF58 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AF5A 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AF5E 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AF62 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AF66 00                         		even
0000AF66 00                         		even
0000AF66                            
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            ; Sprite mappings - Chopper enemy (GHZ)
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            Map_obj2B:
0000AF66                            	include "_maps\obj2B.asm"
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            ; Sprite mappings - Chopper enemy (GHZ)
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66 0000                       		dc.w byte_ABCE-Map_obj2B
0000AF68 0000                       		dc.w byte_ABD4-Map_obj2B
0000AF6A 01                         byte_ABCE:	dc.b 1
0000AF6B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000AF70 01                         byte_ABD4:	dc.b 1
0000AF71 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000AF76                            		even
0000AF76                            		even
0000AF76                            
0000AF76                            ; ===========================================================================
0000AF76                            ; ---------------------------------------------------------------------------
0000AF76                            ; Object 2C - Jaws enemy (LZ)
0000AF76                            ; ---------------------------------------------------------------------------
0000AF76                            
0000AF76                            Obj2C:					; XREF: Obj_Index
0000AF76 7000                       		moveq	#0,d0
0000AF78 1028 0024                  		move.b	$24(a0),d0
0000AF7C 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000AF80 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000AF84                            ; ===========================================================================
0000AF84 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000AF86 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000AF88                            ; ===========================================================================
0000AF88                            
0000AF88                            Obj2C_Main:				; XREF: Obj2C_Index
0000AF88 5428 0024                  		addq.b	#2,$24(a0)
0000AF8C 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000AF94 317C 2486 0002             		move.w	#$2486,2(a0)
0000AF9A 0028 0004 0001             		ori.b	#4,1(a0)
0000AFA0 117C 000A 0020             		move.b	#$A,$20(a0)
0000AFA6 117C 0004 0018             		move.b	#4,$18(a0)
0000AFAC 117C 0010 0019             		move.b	#$10,$19(a0)
0000AFB2 7000                       		moveq	#0,d0
0000AFB4 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000AFB8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000AFBA 5340                       		subq.w	#1,d0
0000AFBC 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000AFC0 3140 0032                  		move.w	d0,$32(a0)
0000AFC4 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000AFCA 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AFD0 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AFD2 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AFD6                            
0000AFD6                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AFD6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AFDA 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AFDC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AFE2 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AFE6 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AFEC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AFF2                            
0000AFF2                            Obj2C_Animate:
0000AFF2 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AFF8 6100 FAFA                  		bsr.w	AnimateSprite
0000AFFC 6100 0000                  		bsr.w	SpeedToPos
0000B000 6000 0000                  		bra.w	MarkObjGone
0000B004                            ; ===========================================================================
0000B004                            Ani_obj2C:
0000B004                            	include "_anim\obj2C.asm"
0000B004                            ; ---------------------------------------------------------------------------
0000B004                            ; Animation script - Jaws enemy
0000B004                            ; ---------------------------------------------------------------------------
0000B004 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B006 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B00C                            		even
0000B00C                            		even
0000B00C                            
0000B00C                            ; ---------------------------------------------------------------------------
0000B00C                            ; Sprite mappings - Jaws enemy (LZ)
0000B00C                            ; ---------------------------------------------------------------------------
0000B00C                            Map_obj2C:
0000B00C                            	include "_maps\obj2C.asm"
0000B00C                            ; ---------------------------------------------------------------------------
0000B00C                            ; Sprite mappings - Jaws enemy (LZ)
0000B00C                            ; ---------------------------------------------------------------------------
0000B00C 0000                       		dc.w byte_AC78-Map_obj2C
0000B00E 0000                       		dc.w byte_AC83-Map_obj2C
0000B010 0000                       		dc.w byte_AC8E-Map_obj2C
0000B012 0000                       		dc.w byte_AC99-Map_obj2C
0000B014 02                         byte_AC78:	dc.b 2
0000B015 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B01A F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B01F 02                         byte_AC83:	dc.b 2
0000B020 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B025 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B02A 02                         byte_AC8E:	dc.b 2
0000B02B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B030 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B035 02                         byte_AC99:	dc.b 2
0000B036 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B03B F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B040                            		even
0000B040                            		even
0000B040                            
0000B040                            ; ===========================================================================
0000B040                            ; ---------------------------------------------------------------------------
0000B040                            ; Object 2D - Burrobot enemy (LZ)
0000B040                            ; ---------------------------------------------------------------------------
0000B040                            
0000B040                            Obj2D:					; XREF: Obj_Index
0000B040 7000                       		moveq	#0,d0
0000B042 1028 0024                  		move.b	$24(a0),d0
0000B046 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B04A 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B04E                            ; ===========================================================================
0000B04E 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B050 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B052                            ; ===========================================================================
0000B052                            
0000B052                            Obj2D_Main:				; XREF: Obj2D_Index
0000B052 5428 0024                  		addq.b	#2,$24(a0)
0000B056 117C 0013 0016             		move.b	#$13,$16(a0)
0000B05C 117C 0008 0017             		move.b	#8,$17(a0)
0000B062 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B06A 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B070 0028 0004 0001             		ori.b	#4,1(a0)
0000B076 117C 0004 0018             		move.b	#4,$18(a0)
0000B07C 117C 0005 0020             		move.b	#5,$20(a0)
0000B082 117C 000C 0019             		move.b	#$C,$19(a0)
0000B088 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B08C 117C 0002 001C             		move.b	#2,$1C(a0)
0000B092                            
0000B092                            Obj2D_Action:				; XREF: Obj2D_Index
0000B092 7000                       		moveq	#0,d0
0000B094 1028 0025                  		move.b	$25(a0),d0
0000B098 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B09C 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B0A0 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B0A6 6100 FA4C                  		bsr.w	AnimateSprite
0000B0AA 6000 0000                  		bra.w	MarkObjGone
0000B0AE                            ; ===========================================================================
0000B0AE 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B0B0 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B0B2 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B0B4 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B0B6                            ; ===========================================================================
0000B0B6                            
0000B0B6                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B0B6 5368 0030                  		subq.w	#1,$30(a0)
0000B0BA 6A00                       		bpl.s	locret_AD42
0000B0BC 5428 0025                  		addq.b	#2,$25(a0)
0000B0C0 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B0C6 317C 0080 0010             		move.w	#$80,$10(a0)
0000B0CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000B0D2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B0D8 6700                       		beq.s	locret_AD42
0000B0DA 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B0DE                            
0000B0DE                            locret_AD42:
0000B0DE 4E75                       		rts	
0000B0E0                            ; ===========================================================================
0000B0E0                            
0000B0E0                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B0E0 5368 0030                  		subq.w	#1,$30(a0)
0000B0E4 6B00                       		bmi.s	loc_AD84
0000B0E6 6100 0000                  		bsr.w	SpeedToPos
0000B0EA 0868 0000 0032             		bchg	#0,$32(a0)
0000B0F0 6600                       		bne.s	loc_AD78
0000B0F2 3628 0008                  		move.w	8(a0),d3
0000B0F6 0643 000C                  		addi.w	#$C,d3
0000B0FA 0828 0000 0022             		btst	#0,$22(a0)
0000B100 6600                       		bne.s	loc_AD6A
0000B102 0443 0018                  		subi.w	#$18,d3
0000B106                            
0000B106                            loc_AD6A:
0000B106 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B10C 0C41 000C                  		cmpi.w	#$C,d1
0000B110 6C00                       		bge.s	loc_AD84
0000B112 4E75                       		rts	
0000B114                            ; ===========================================================================
0000B114                            
0000B114                            loc_AD78:				; XREF: Obj2D_Move
0000B114 4EB9 0000 0000             		jsr	ObjHitFloor
0000B11A D368 000C                  		add.w	d1,$C(a0)
0000B11E 4E75                       		rts	
0000B120                            ; ===========================================================================
0000B120                            
0000B120                            loc_AD84:				; XREF: Obj2D_Move
0000B120 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B126 6700                       		beq.s	loc_ADA4
0000B128 5528 0025                  		subq.b	#2,$25(a0)
0000B12C 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B132 317C 0000 0010             		move.w	#0,$10(a0)
0000B138 117C 0000 001C             		move.b	#0,$1C(a0)
0000B13E 4E75                       		rts	
0000B140                            ; ===========================================================================
0000B140                            
0000B140                            loc_ADA4:
0000B140 5428 0025                  		addq.b	#2,$25(a0)
0000B144 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B14A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B150 4E75                       		rts	
0000B152                            ; ===========================================================================
0000B152                            
0000B152                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B152 6100 0000                  		bsr.w	SpeedToPos
0000B156 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B15C 6B00                       		bmi.s	locret_ADF0
0000B15E 117C 0003 001C             		move.b	#3,$1C(a0)
0000B164 4EB9 0000 0000             		jsr	ObjHitFloor
0000B16A 4A41                       		tst.w	d1
0000B16C 6A00                       		bpl.s	locret_ADF0
0000B16E D368 000C                  		add.w	d1,$C(a0)
0000B172 317C 0000 0012             		move.w	#0,$12(a0)
0000B178 117C 0001 001C             		move.b	#1,$1C(a0)
0000B17E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B184 5528 0025                  		subq.b	#2,$25(a0)
0000B188 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B18C                            
0000B18C                            locret_ADF0:
0000B18C 4E75                       		rts	
0000B18E                            ; ===========================================================================
0000B18E                            
0000B18E                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B18E 343C 0060                  		move.w	#$60,d2
0000B192 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B196 6400                       		bcc.s	locret_AE20
0000B198 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B19C 9068 000C                  		sub.w	$C(a0),d0
0000B1A0 6400                       		bcc.s	locret_AE20
0000B1A2 0C40 FF80                  		cmpi.w	#-$80,d0
0000B1A6 6500                       		bcs.s	locret_AE20
0000B1A8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B1AC 6600                       		bne.s	locret_AE20
0000B1AE 5528 0025                  		subq.b	#2,$25(a0)
0000B1B2 3141 0010                  		move.w	d1,$10(a0)
0000B1B6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B1BC                            
0000B1BC                            locret_AE20:
0000B1BC 4E75                       		rts	
0000B1BE                            
0000B1BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1BE                            
0000B1BE                            
0000B1BE                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B1BE 323C 0080                  		move.w	#$80,d1
0000B1C2 08E8 0000 0022             		bset	#0,$22(a0)
0000B1C8 3038 D008                  		move.w	($FFFFD008).w,d0
0000B1CC 9068 0008                  		sub.w	8(a0),d0
0000B1D0 6400                       		bcc.s	loc_AE40
0000B1D2 4440                       		neg.w	d0
0000B1D4 4441                       		neg.w	d1
0000B1D6 08A8 0000 0022             		bclr	#0,$22(a0)
0000B1DC                            
0000B1DC                            loc_AE40:
0000B1DC B042                       		cmp.w	d2,d0
0000B1DE 4E75                       		rts	
0000B1E0                            ; End of function Obj2D_ChkSonic2
0000B1E0                            
0000B1E0                            ; ===========================================================================
0000B1E0                            Ani_obj2D:
0000B1E0                            	include "_anim\obj2D.asm"
0000B1E0                            ; ---------------------------------------------------------------------------
0000B1E0                            ; Animation script - Burrobot enemy
0000B1E0                            ; ---------------------------------------------------------------------------
0000B1E0 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B1E2 0000                       		dc.w byte_AE50-Ani_obj2D
0000B1E4 0000                       		dc.w byte_AE54-Ani_obj2D
0000B1E6 0000                       		dc.w byte_AE58-Ani_obj2D
0000B1E8 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B1EC 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B1F0 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B1F4 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B1F8 00                         		even
0000B1F8 00                         		even
0000B1F8                            
0000B1F8                            ; ---------------------------------------------------------------------------
0000B1F8                            ; Sprite mappings - Burrobot enemy (LZ)
0000B1F8                            ; ---------------------------------------------------------------------------
0000B1F8                            Map_obj2D:
0000B1F8                            	include "_maps\obj2D.asm"
0000B1F8                            ; ---------------------------------------------------------------------------
0000B1F8                            ; Sprite mappings - Burrobot enemy (LZ)
0000B1F8                            ; ---------------------------------------------------------------------------
0000B1F8 0000                       		dc.w byte_AE6A-Map_obj2D
0000B1FA 0000                       		dc.w byte_AE75-Map_obj2D
0000B1FC 0000                       		dc.w byte_AE80-Map_obj2D
0000B1FE 0000                       		dc.w byte_AE8B-Map_obj2D
0000B200 0000                       		dc.w byte_AE96-Map_obj2D
0000B202 0000                       		dc.w byte_AEA1-Map_obj2D
0000B204 0000                       		dc.w byte_AEAC-Map_obj2D
0000B206 02                         byte_AE6A:	dc.b 2
0000B207 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B20C 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B211 02                         byte_AE75:	dc.b 2
0000B212 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B217 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B21C 02                         byte_AE80:	dc.b 2
0000B21D E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B222 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B227 02                         byte_AE8B:	dc.b 2
0000B228 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B22D 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B232 02                         byte_AE96:	dc.b 2
0000B233 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B238 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B23D 02                         byte_AEA1:	dc.b 2
0000B23E F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B243 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B248 02                         byte_AEAC:	dc.b 2
0000B249 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B24E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B254 00                         		even
0000B254 00                         		even
0000B254                            
0000B254                            ; ===========================================================================
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            ; Object 2F - large moving platforms (MZ)
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            
0000B254                            Obj2F:					; XREF: Obj_Index
0000B254 7000                       		moveq	#0,d0
0000B256 1028 0024                  		move.b	$24(a0),d0
0000B25A 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B25E 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B262                            ; ===========================================================================
0000B262 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B264 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B266                            
0000B266 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B268 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B26A 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B26C 0140                       		dc.b 1,	$40
0000B26E 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B270 0220                       		dc.b 2,	$20
0000B272                            ; ===========================================================================
0000B272                            
0000B272                            Obj2F_Main:				; XREF: Obj2F_Index
0000B272 5428 0024                  		addq.b	#2,$24(a0)
0000B276 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B27E 317C C000 0002             		move.w	#$C000,2(a0)
0000B284 117C 0004 0001             		move.b	#4,1(a0)
0000B28A 117C 0005 0018             		move.b	#5,$18(a0)
0000B290 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B296 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B29C 7000                       		moveq	#0,d0
0000B29E 1028 0028                  		move.b	$28(a0),d0
0000B2A2 E448                       		lsr.w	#2,d0
0000B2A4 0240 001C                  		andi.w	#$1C,d0
0000B2A8 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B2AC 3019                       		move.w	(a1)+,d0
0000B2AE 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B2B2 214A 0030                  		move.l	a2,$30(a0)
0000B2B6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B2BA 1151 0019                  		move.b	(a1),$19(a0)
0000B2BE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B2C4 117C 0040 0016             		move.b	#$40,$16(a0)
0000B2CA 08E8 0004 0001             		bset	#4,1(a0)
0000B2D0                            
0000B2D0                            Obj2F_Action:				; XREF: Obj2F_Index
0000B2D0 6100 0000                  		bsr.w	Obj2F_Types
0000B2D4 4A28 0025                  		tst.b	$25(a0)
0000B2D8 6700                       		beq.s	Obj2F_Solid
0000B2DA 7200                       		moveq	#0,d1
0000B2DC 1228 0019                  		move.b	$19(a0),d1
0000B2E0 0641 000B                  		addi.w	#$B,d1
0000B2E4 6100 C688                  		bsr.w	ExitPlatform
0000B2E8 0829 0003 0022             		btst	#3,$22(a1)
0000B2EE 6600 0000                  		bne.w	Obj2F_Slope
0000B2F2 4228 0025                  		clr.b	$25(a0)
0000B2F6 6000                       		bra.s	Obj2F_Display
0000B2F8                            ; ===========================================================================
0000B2F8                            
0000B2F8                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B2F8 7200                       		moveq	#0,d1
0000B2FA 1228 0019                  		move.b	$19(a0),d1
0000B2FE 0641 000B                  		addi.w	#$B,d1
0000B302 2468 0030                  		movea.l	$30(a0),a2
0000B306 3428 0008                  		move.w	8(a0),d2
0000B30A 6100 D5C0                  		bsr.w	SlopeObject2
0000B30E 6000                       		bra.s	Obj2F_Display
0000B310                            ; ===========================================================================
0000B310                            
0000B310                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B310 7200                       		moveq	#0,d1
0000B312 1228 0019                  		move.b	$19(a0),d1
0000B316 0641 000B                  		addi.w	#$B,d1
0000B31A 343C 0020                  		move.w	#$20,d2
0000B31E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B324 6600                       		bne.s	loc_AF8E
0000B326 343C 0030                  		move.w	#$30,d2
0000B32A                            
0000B32A                            loc_AF8E:
0000B32A 2468 0030                  		movea.l	$30(a0),a2
0000B32E 6100 0000                  		bsr.w	SolidObject2F
0000B332                            
0000B332                            Obj2F_Display:				; XREF: Obj2F_Action
0000B332 6100 0000                  		bsr.w	DisplaySprite
0000B336 6000 0000                  		bra.w	Obj2F_ChkDel
0000B33A                            
0000B33A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B33A                            
0000B33A                            
0000B33A                            Obj2F_Types:				; XREF: Obj2F_Action
0000B33A 7000                       		moveq	#0,d0
0000B33C 1028 0028                  		move.b	$28(a0),d0
0000B340 0240 0007                  		andi.w	#7,d0
0000B344 D040                       		add.w	d0,d0
0000B346 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B34A 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B34E                            ; End of function Obj2F_Types
0000B34E                            
0000B34E                            ; ===========================================================================
0000B34E 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B350 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B352 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B354 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B356 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B358 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B35A                            ; ===========================================================================
0000B35A                            
0000B35A                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B35A 4E75                       		rts			; type 00 platform doesn't move
0000B35C                            ; ===========================================================================
0000B35C                            
0000B35C                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B35C 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B360 323C 0020                  		move.w	#$20,d1
0000B364 6000                       		bra.s	Obj2F_Move
0000B366                            ; ===========================================================================
0000B366                            
0000B366                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B366 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B36A 323C 0030                  		move.w	#$30,d1
0000B36E 6000                       		bra.s	Obj2F_Move
0000B370                            ; ===========================================================================
0000B370                            
0000B370                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B370 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B374 323C 0040                  		move.w	#$40,d1
0000B378 6000                       		bra.s	Obj2F_Move
0000B37A                            ; ===========================================================================
0000B37A                            
0000B37A                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B37A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B37E 323C 0060                  		move.w	#$60,d1
0000B382                            
0000B382                            Obj2F_Move:
0000B382 0828 0003 0028             		btst	#3,$28(a0)
0000B388 6700                       		beq.s	loc_AFF2
0000B38A 4440                       		neg.w	d0
0000B38C D041                       		add.w	d1,d0
0000B38E                            
0000B38E                            loc_AFF2:
0000B38E 3228 002C                  		move.w	$2C(a0),d1
0000B392 9240                       		sub.w	d0,d1
0000B394 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B398 4E75                       		rts	
0000B39A                            ; ===========================================================================
0000B39A                            
0000B39A                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B39A 1028 0034                  		move.b	$34(a0),d0
0000B39E 4A28 0025                  		tst.b	$25(a0)
0000B3A2 6600                       		bne.s	loc_B010
0000B3A4 5500                       		subq.b	#2,d0
0000B3A6 6400                       		bcc.s	loc_B01C
0000B3A8 7000                       		moveq	#0,d0
0000B3AA 6000                       		bra.s	loc_B01C
0000B3AC                            ; ===========================================================================
0000B3AC                            
0000B3AC                            loc_B010:
0000B3AC 5800                       		addq.b	#4,d0
0000B3AE 0C00 0040                  		cmpi.b	#$40,d0
0000B3B2 6500                       		bcs.s	loc_B01C
0000B3B4 103C 0040                  		move.b	#$40,d0
0000B3B8                            
0000B3B8                            loc_B01C:
0000B3B8 1140 0034                  		move.b	d0,$34(a0)
0000B3BC 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B3C2 E848                       		lsr.w	#4,d0
0000B3C4 3200                       		move.w	d0,d1
0000B3C6 D068 002C                  		add.w	$2C(a0),d0
0000B3CA 3140 000C                  		move.w	d0,$C(a0)
0000B3CE 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B3D4 6600                       		bne.s	loc_B07A
0000B3D6 4A28 0035                  		tst.b	$35(a0)
0000B3DA 6600                       		bne.s	loc_B07A
0000B3DC 117C 0001 0035             		move.b	#1,$35(a0)
0000B3E2 6100 0000                  		bsr.w	SingleObjLoad2
0000B3E6 6600                       		bne.s	loc_B07A
0000B3E8 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B3EC 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3F2 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B3F8 5069 002C                  		addq.w	#8,$2C(a1)
0000B3FC 5769 002C                  		subq.w	#3,$2C(a1)
0000B400 0469 0040 0008             		subi.w	#$40,8(a1)
0000B406 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B40C 2348 0038                  		move.l	a0,$38(a1)
0000B410 2448                       		movea.l	a0,a2
0000B412 6100                       		bsr.s	sub_B09C
0000B414                            
0000B414                            loc_B07A:
0000B414 7400                       		moveq	#0,d2
0000B416 45E8 0036                  		lea	$36(a0),a2
0000B41A 141A                       		move.b	(a2)+,d2
0000B41C 5302                       		subq.b	#1,d2
0000B41E 6500                       		bcs.s	locret_B09A
0000B420                            
0000B420                            loc_B086:
0000B420 7000                       		moveq	#0,d0
0000B422 101A                       		move.b	(a2)+,d0
0000B424 ED48                       		lsl.w	#6,d0
0000B426 0640 D000                  		addi.w	#-$3000,d0
0000B42A 3240                       		movea.w	d0,a1
0000B42C 3341 003C                  		move.w	d1,$3C(a1)
0000B430 51CA FFEE                  		dbf	d2,loc_B086
0000B434                            
0000B434                            locret_B09A:
0000B434 4E75                       		rts	
0000B436                            
0000B436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B436                            
0000B436                            
0000B436                            sub_B09C:
0000B436 45EA 0036                  		lea	$36(a2),a2
0000B43A 7000                       		moveq	#0,d0
0000B43C 1012                       		move.b	(a2),d0
0000B43E 5212                       		addq.b	#1,(a2)
0000B440 45F2 0001                  		lea	1(a2,d0.w),a2
0000B444 3009                       		move.w	a1,d0
0000B446 0440 D000                  		subi.w	#-$3000,d0
0000B44A EC48                       		lsr.w	#6,d0
0000B44C 0240 007F                  		andi.w	#$7F,d0
0000B450 1480                       		move.b	d0,(a2)
0000B452 4E75                       		rts	
0000B454                            ; End of function sub_B09C
0000B454                            
0000B454                            ; ===========================================================================
0000B454                            
0000B454                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B454 4A28 0035                  		tst.b	$35(a0)
0000B458 6700                       		beq.s	loc_B0C6
0000B45A 4A28 0001                  		tst.b	1(a0)
0000B45E 6A00                       		bpl.s	Obj2F_DelFlames
0000B460                            
0000B460                            loc_B0C6:
0000B460 3028 002A                  		move.w	$2A(a0),d0
0000B464 0240 FF80                  		andi.w	#$FF80,d0
0000B468 3238 F700                  		move.w	($FFFFF700).w,d1
0000B46C 0441 0080                  		subi.w	#$80,d1
0000B470 0241 FF80                  		andi.w	#$FF80,d1
0000B474 9041                       		sub.w	d1,d0
0000B476 0C40 0280                  		cmpi.w	#$280,d0
0000B47A 6200 0000                  		bhi.w	DeleteObject
0000B47E 4E75                       		rts	
0000B480                            ; ===========================================================================
0000B480                            
0000B480                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B480 7400                       		moveq	#0,d2
0000B482                            
0000B482                            loc_B0E8:
0000B482 45E8 0036                  		lea	$36(a0),a2
0000B486 1412                       		move.b	(a2),d2
0000B488 421A                       		clr.b	(a2)+
0000B48A 5302                       		subq.b	#1,d2
0000B48C 6500                       		bcs.s	locret_B116
0000B48E                            
0000B48E                            loc_B0F4:
0000B48E 7000                       		moveq	#0,d0
0000B490 1012                       		move.b	(a2),d0
0000B492 421A                       		clr.b	(a2)+
0000B494 ED48                       		lsl.w	#6,d0
0000B496 0640 D000                  		addi.w	#-$3000,d0
0000B49A 3240                       		movea.w	d0,a1
0000B49C 6100 0000                  		bsr.w	DeleteObject2
0000B4A0 51CA FFEC                  		dbf	d2,loc_B0F4
0000B4A4 117C 0000 0035             		move.b	#0,$35(a0)
0000B4AA 117C 0000 0034             		move.b	#0,$34(a0)
0000B4B0                            
0000B4B0                            locret_B116:
0000B4B0 4E75                       		rts	
0000B4B2                            ; ===========================================================================
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            ; Collision data for large moving platforms (MZ)
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B4FE                            		even
0000B4FE                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B52A                            		even
0000B52A                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B576                            		even
0000B576                            ; ===========================================================================
0000B576                            ; ---------------------------------------------------------------------------
0000B576                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B576                            ; (appears when	you walk on sinking platforms)
0000B576                            ; ---------------------------------------------------------------------------
0000B576                            
0000B576                            Obj35:					; XREF: Obj_Index
0000B576 7000                       		moveq	#0,d0
0000B578 1028 0024                  		move.b	$24(a0),d0
0000B57C 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B580 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B584                            ; ===========================================================================
0000B584 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B586 0000                       		dc.w loc_B238-Obj35_Index
0000B588 0000                       		dc.w Obj35_Move-Obj35_Index
0000B58A                            ; ===========================================================================
0000B58A                            
0000B58A                            Obj35_Main:				; XREF: Obj35_Index
0000B58A 5428 0024                  		addq.b	#2,$24(a0)
0000B58E 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B596 317C 0345 0002             		move.w	#$345,2(a0)
0000B59C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B5A2 117C 0004 0001             		move.b	#4,1(a0)
0000B5A8 117C 0001 0018             		move.b	#1,$18(a0)
0000B5AE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B5B4 117C 0008 0019             		move.b	#8,$19(a0)
0000B5BA 303C 00C8                  		move.w	#$C8,d0
0000B5BE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B5C4 4A28 0028                  		tst.b	$28(a0)
0000B5C8 6700                       		beq.s	loc_B238
0000B5CA 5428 0024                  		addq.b	#2,$24(a0)
0000B5CE 6000 0000                  		bra.w	Obj35_Move
0000B5D2                            ; ===========================================================================
0000B5D2                            
0000B5D2                            loc_B238:				; XREF: Obj35_Index
0000B5D2 2268 0030                  		movea.l	$30(a0),a1
0000B5D6 3228 0008                  		move.w	8(a0),d1
0000B5DA 9268 002A                  		sub.w	$2A(a0),d1
0000B5DE 0641 000C                  		addi.w	#$C,d1
0000B5E2 3001                       		move.w	d1,d0
0000B5E4 E248                       		lsr.w	#1,d0
0000B5E6 1031 0000                  		move.b	(a1,d0.w),d0
0000B5EA 4440                       		neg.w	d0
0000B5EC D068 002C                  		add.w	$2C(a0),d0
0000B5F0 3400                       		move.w	d0,d2
0000B5F2 D068 003C                  		add.w	$3C(a0),d0
0000B5F6 3140 000C                  		move.w	d0,$C(a0)
0000B5FA 0C41 0084                  		cmpi.w	#$84,d1
0000B5FE 6400                       		bcc.s	loc_B2B0
0000B600 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B608 0C41 0080                  		cmpi.w	#$80,d1
0000B60C 6400                       		bcc.s	loc_B2B0
0000B60E 2028 0008                  		move.l	8(a0),d0
0000B612 0680 0008 0000             		addi.l	#$80000,d0
0000B618 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B61E 6600                       		bne.s	loc_B2B0
0000B620 6100 0000                  		bsr.w	SingleObjLoad2
0000B624 6600                       		bne.s	loc_B2B0
0000B626 12BC 0035                  		move.b	#$35,0(a1)
0000B62A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B630 3342 002C                  		move.w	d2,$2C(a1)
0000B634 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B63A 137C 0001 0028             		move.b	#1,$28(a1)
0000B640 2468 0038                  		movea.l	$38(a0),a2
0000B644 6100 FDF0                  		bsr.w	sub_B09C
0000B648                            
0000B648                            loc_B2B0:
0000B648 6000                       		bra.s	Obj35_Animate
0000B64A                            ; ===========================================================================
0000B64A                            
0000B64A                            Obj35_Move:				; XREF: Obj35_Index
0000B64A 3028 002C                  		move.w	$2C(a0),d0
0000B64E D068 003C                  		add.w	$3C(a0),d0
0000B652 3140 000C                  		move.w	d0,$C(a0)
0000B656                            
0000B656                            Obj35_Animate:				; XREF: loc_B238
0000B656 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B65C 6100 F496                  		bsr.w	AnimateSprite
0000B660 6000 0000                  		bra.w	DisplaySprite
0000B664                            ; ===========================================================================
0000B664                            Ani_obj35:
0000B664                            	include "_anim\obj35.asm"
0000B664                            ; ---------------------------------------------------------------------------
0000B664                            ; Animation script - fireball that sits on the	floor (MZ)
0000B664                            ; ---------------------------------------------------------------------------
0000B664 0000                       		dc.w byte_B2CE-Ani_obj35
0000B666 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B66C                            		even
0000B66C                            		even
0000B66C                            
0000B66C                            ; ---------------------------------------------------------------------------
0000B66C                            ; Sprite mappings - large moving platforms (MZ)
0000B66C                            ; ---------------------------------------------------------------------------
0000B66C                            Map_obj2F:
0000B66C                            	include "_maps\obj2F.asm"
0000B66C                            ; ---------------------------------------------------------------------------
0000B66C                            ; Sprite mappings - large moving platforms (MZ)
0000B66C                            ; ---------------------------------------------------------------------------
0000B66C 0000                       		dc.w byte_B2DA-Map_obj2F
0000B66E 0000                       		dc.w byte_B31C-Map_obj2F
0000B670 0000                       		dc.w byte_B34F-Map_obj2F
0000B672 0D                         byte_B2DA:	dc.b $D
0000B673 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B678 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B67D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B682 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B687 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B68C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B691 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B696 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B69B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B6A0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B6A5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B6AA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B6AF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B6B4 0A                         byte_B31C:	dc.b $A
0000B6B5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B6BA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B6BF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B6C4 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B6C9 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B6CE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B6D3 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B6D8 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B6DD C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B6E2 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B6E7 06                         byte_B34F:	dc.b 6
0000B6E8 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B6ED F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B6F2 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B6F7 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B6FC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B701 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B706                            		even
0000B706                            		even
0000B706                            
0000B706                            ; ---------------------------------------------------------------------------
0000B706                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B706                            ; ---------------------------------------------------------------------------
0000B706                            Map_obj14:
0000B706                            	include "_maps\obj14.asm"
0000B706                            ; ---------------------------------------------------------------------------
0000B706                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B706                            ; ---------------------------------------------------------------------------
0000B706 0000                       		dc.w byte_B37A-Map_obj14
0000B708 0000                       		dc.w byte_B380-Map_obj14
0000B70A 0000                       		dc.w byte_B386-Map_obj14
0000B70C 0000                       		dc.w byte_B38C-Map_obj14
0000B70E 0000                       		dc.w byte_B392-Map_obj14
0000B710 0000                       		dc.w byte_B398-Map_obj14
0000B712 01                         byte_B37A:	dc.b 1
0000B713 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B718 01                         byte_B380:	dc.b 1
0000B719 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B71E 01                         byte_B386:	dc.b 1
0000B71F F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B724 01                         byte_B38C:	dc.b 1
0000B725 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B72A 01                         byte_B392:	dc.b 1
0000B72B F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B730 01                         byte_B398:	dc.b 1
0000B731 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B736                            		even
0000B736                            		even
0000B736                            
0000B736                            ; ===========================================================================
0000B736                            ; ---------------------------------------------------------------------------
0000B736                            ; Object 30 - large green glassy blocks	(MZ)
0000B736                            ; ---------------------------------------------------------------------------
0000B736                            
0000B736                            Obj30:					; XREF: Obj_Index
0000B736 7000                       		moveq	#0,d0
0000B738 1028 0024                  		move.b	$24(a0),d0
0000B73C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B740 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B744 3028 0008                  		move.w	8(a0),d0
0000B748 0240 FF80                  		andi.w	#$FF80,d0
0000B74C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B750 0441 0080                  		subi.w	#$80,d1
0000B754 0241 FF80                  		andi.w	#$FF80,d1
0000B758 9041                       		sub.w	d1,d0
0000B75A 0C40 0280                  		cmpi.w	#$280,d0
0000B75E 6200 0000                  		bhi.w	Obj30_Delete
0000B762 6000 0000                  		bra.w	DisplaySprite
0000B766                            ; ===========================================================================
0000B766                            
0000B766                            Obj30_Delete:
0000B766 6000 0000                  		bra.w	DeleteObject
0000B76A                            ; ===========================================================================
0000B76A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B76C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B76E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B770 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B772 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B774                            
0000B774 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B777 0400 01                    		dc.b 4,	0, 1
0000B77A 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B77D 0800 01                    		dc.b 8,	0, 1
0000B780                            ; ===========================================================================
0000B780                            
0000B780                            Obj30_Main:				; XREF: Obj30_Index
0000B780 45F9 0000 B774             		lea	(Obj30_Vars1).l,a2
0000B786 7201                       		moveq	#1,d1
0000B788 117C 0048 0016             		move.b	#$48,$16(a0)
0000B78E 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B794 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B796 45F9 0000 B77A             		lea	(Obj30_Vars2).l,a2
0000B79C 7201                       		moveq	#1,d1
0000B79E 117C 0038 0016             		move.b	#$38,$16(a0)
0000B7A4                            
0000B7A4                            loc_B40C:
0000B7A4 2248                       		movea.l	a0,a1
0000B7A6 6000                       		bra.s	Obj30_Load	; load main object
0000B7A8                            ; ===========================================================================
0000B7A8                            
0000B7A8                            Obj30_Loop:
0000B7A8 6100 0000                  		bsr.w	SingleObjLoad2
0000B7AC 6600                       		bne.s	loc_B480
0000B7AE                            
0000B7AE                            Obj30_Load:				; XREF: Obj30_Main
0000B7AE 135A 0024                  		move.b	(a2)+,$24(a1)
0000B7B2 12BC 0030                  		move.b	#$30,0(a1)
0000B7B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7BC 101A                       		move.b	(a2)+,d0
0000B7BE 4880                       		ext.w	d0
0000B7C0 D068 000C                  		add.w	$C(a0),d0
0000B7C4 3340 000C                  		move.w	d0,$C(a1)
0000B7C8 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B7D0 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B7D6 137C 0004 0001             		move.b	#4,1(a1)
0000B7DC 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B7E2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B7E8 137C 0020 0019             		move.b	#$20,$19(a1)
0000B7EE 137C 0004 0018             		move.b	#4,$18(a1)
0000B7F4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B7F8 2348 003C                  		move.l	a0,$3C(a1)
0000B7FC 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B800                            
0000B800 137C 0010 0019             		move.b	#$10,$19(a1)
0000B806 137C 0003 0018             		move.b	#3,$18(a1)
0000B80C 5029 0028                  		addq.b	#8,$28(a1)
0000B810 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B816                            
0000B816                            loc_B480:
0000B816 317C 0090 0032             		move.w	#$90,$32(a0)
0000B81C 08E8 0004 0001             		bset	#4,1(a0)
0000B822                            
0000B822                            Obj30_Block012:				; XREF: Obj30_Index
0000B822 6100 0000                  		bsr.w	Obj30_Types
0000B826 323C 002B                  		move.w	#$2B,d1
0000B82A 343C 0048                  		move.w	#$48,d2
0000B82E 363C 0049                  		move.w	#$49,d3
0000B832 3828 0008                  		move.w	8(a0),d4
0000B836 6000 0000                  		bra.w	SolidObject
0000B83A                            ; ===========================================================================
0000B83A                            
0000B83A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B83A 2268 003C                  		movea.l	$3C(a0),a1
0000B83E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B844 6000 0000                  		bra.w	Obj30_Types
0000B848                            ; ===========================================================================
0000B848                            
0000B848                            Obj30_Block34:				; XREF: Obj30_Index
0000B848 6100 0000                  		bsr.w	Obj30_Types
0000B84C 323C 002B                  		move.w	#$2B,d1
0000B850 343C 0038                  		move.w	#$38,d2
0000B854 363C 0039                  		move.w	#$39,d3
0000B858 3828 0008                  		move.w	8(a0),d4
0000B85C 6000 0000                  		bra.w	SolidObject
0000B860                            ; ===========================================================================
0000B860                            
0000B860                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B860 2268 003C                  		movea.l	$3C(a0),a1
0000B864 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B86A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B870 6000 0002                  		bra.w	*+4
0000B874                            
0000B874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B874                            
0000B874                            
0000B874                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B874 7000                       		moveq	#0,d0
0000B876 1028 0028                  		move.b	$28(a0),d0
0000B87A 0240 0007                  		andi.w	#7,d0
0000B87E D040                       		add.w	d0,d0
0000B880 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B884 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B888                            ; End of function Obj30_Types
0000B888                            
0000B888                            ; ===========================================================================
0000B888 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B88A 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B88C 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B88E 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B890 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B892                            ; ===========================================================================
0000B892                            
0000B892                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B892 4E75                       		rts	
0000B894                            ; ===========================================================================
0000B894                            
0000B894                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B894 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B898 323C 0040                  		move.w	#$40,d1
0000B89C 6000                       		bra.s	loc_B514
0000B89E                            ; ===========================================================================
0000B89E                            
0000B89E                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B89E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B8A2 323C 0040                  		move.w	#$40,d1
0000B8A6 4440                       		neg.w	d0
0000B8A8 D041                       		add.w	d1,d0
0000B8AA                            
0000B8AA                            loc_B514:				; XREF: Obj30_Type01
0000B8AA 0828 0003 0028             		btst	#3,$28(a0)
0000B8B0 6700                       		beq.s	loc_B526
0000B8B2 4440                       		neg.w	d0
0000B8B4 D041                       		add.w	d1,d0
0000B8B6 E208                       		lsr.b	#1,d0
0000B8B8 0640 0020                  		addi.w	#$20,d0
0000B8BC                            
0000B8BC                            loc_B526:
0000B8BC 6000 0000                  		bra.w	loc_B5EE
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B8C0 0828 0003 0028             		btst	#3,$28(a0)
0000B8C6 6700                       		beq.s	loc_B53E
0000B8C8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B8CC 0440 0010                  		subi.w	#$10,d0
0000B8D0 6000 0000                  		bra.w	loc_B5EE
0000B8D4                            ; ===========================================================================
0000B8D4                            
0000B8D4                            loc_B53E:
0000B8D4 0828 0003 0022             		btst	#3,$22(a0)
0000B8DA 6600                       		bne.s	loc_B54E
0000B8DC 08A8 0000 0034             		bclr	#0,$34(a0)
0000B8E2 6000                       		bra.s	loc_B582
0000B8E4                            ; ===========================================================================
0000B8E4                            
0000B8E4                            loc_B54E:
0000B8E4 4A28 0034                  		tst.b	$34(a0)
0000B8E8 6600                       		bne.s	loc_B582
0000B8EA 117C 0001 0034             		move.b	#1,$34(a0)
0000B8F0 08E8 0000 0035             		bset	#0,$35(a0)
0000B8F6 6700                       		beq.s	loc_B582
0000B8F8 08E8 0007 0034             		bset	#7,$34(a0)
0000B8FE 317C 0010 0036             		move.w	#$10,$36(a0)
0000B904 117C 000A 0038             		move.b	#$A,$38(a0)
0000B90A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B910 6600                       		bne.s	loc_B582
0000B912 317C 0040 0036             		move.w	#$40,$36(a0)
0000B918                            
0000B918                            loc_B582:
0000B918 4A28 0034                  		tst.b	$34(a0)
0000B91C 6A00                       		bpl.s	loc_B5AA
0000B91E 4A28 0038                  		tst.b	$38(a0)
0000B922 6700                       		beq.s	loc_B594
0000B924 5328 0038                  		subq.b	#1,$38(a0)
0000B928 6600                       		bne.s	loc_B5AA
0000B92A                            
0000B92A                            loc_B594:
0000B92A 4A68 0032                  		tst.w	$32(a0)
0000B92E 6700                       		beq.s	loc_B5A4
0000B930 5368 0032                  		subq.w	#1,$32(a0)
0000B934 5368 0036                  		subq.w	#1,$36(a0)
0000B938 6600                       		bne.s	loc_B5AA
0000B93A                            
0000B93A                            loc_B5A4:
0000B93A 08A8 0007 0034             		bclr	#7,$34(a0)
0000B940                            
0000B940                            loc_B5AA:
0000B940 3028 0032                  		move.w	$32(a0),d0
0000B944 6000                       		bra.s	loc_B5EE
0000B946                            ; ===========================================================================
0000B946                            
0000B946                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B946 0828 0003 0028             		btst	#3,$28(a0)
0000B94C 6700                       		beq.s	Obj30_ChkSwitch
0000B94E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B952 0440 0010                  		subi.w	#$10,d0
0000B956 6000                       		bra.s	loc_B5EE
0000B958                            ; ===========================================================================
0000B958                            
0000B958                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B958 4A28 0034                  		tst.b	$34(a0)
0000B95C 6600                       		bne.s	loc_B5E0
0000B95E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B962 7000                       		moveq	#0,d0
0000B964 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B968 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B96A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B96E 6700                       		beq.s	loc_B5EA	; if not, branch
0000B970 117C 0001 0034             		move.b	#1,$34(a0)
0000B976                            
0000B976                            loc_B5E0:
0000B976 4A68 0032                  		tst.w	$32(a0)
0000B97A 6700                       		beq.s	loc_B5EA
0000B97C 5568 0032                  		subq.w	#2,$32(a0)
0000B980                            
0000B980                            loc_B5EA:
0000B980 3028 0032                  		move.w	$32(a0),d0
0000B984                            
0000B984                            loc_B5EE:
0000B984 3228 0030                  		move.w	$30(a0),d1
0000B988 9240                       		sub.w	d0,d1
0000B98A 3141 000C                  		move.w	d1,$C(a0)
0000B98E 4E75                       		rts	
0000B990                            ; ===========================================================================
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            Map_obj30:
0000B990                            	include "_maps\obj30.asm"
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B990                            ; ---------------------------------------------------------------------------
0000B990 0000                       		dc.w byte_B600-Map_obj30
0000B992 0000                       		dc.w byte_B63D-Map_obj30
0000B994 0000                       		dc.w byte_B648-Map_obj30
0000B996 0C                         byte_B600:	dc.b $C
0000B997 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B99C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B9A1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B9A6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B9AB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B9B0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B9B5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B9BA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B9BF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B9C4 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B9C9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B9CE 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B9D3 02                         byte_B63D:	dc.b 2
0000B9D4 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B9D9 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B9DE 0A                         byte_B648:	dc.b $A
0000B9DF C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B9E4 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B9E9 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B9EE D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B9F3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B9F8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B9FD 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BA02 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BA07 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BA0C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BA12 00                         		even
0000BA12 00                         		even
0000BA12                            
0000BA12                            ; ===========================================================================
0000BA12                            ; ---------------------------------------------------------------------------
0000BA12                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BA12                            ; ---------------------------------------------------------------------------
0000BA12                            
0000BA12                            Obj31:					; XREF: Obj_Index
0000BA12 7000                       		moveq	#0,d0
0000BA14 1028 0024                  		move.b	$24(a0),d0
0000BA18 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BA1C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BA20                            ; ===========================================================================
0000BA20 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BA22 0000                       		dc.w loc_B798-Obj31_Index
0000BA24 0000                       		dc.w loc_B7FE-Obj31_Index
0000BA26 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BA28 0000                       		dc.w loc_B7E2-Obj31_Index
0000BA2A                            
0000BA2A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BA2C 0100                       		dc.b 1,	0
0000BA2E                            
0000BA2E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BA31 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BA34 08CC 03                    		dc.b 8,	$CC, 3
0000BA37 06F0 02                    		dc.b 6,	$F0, 2
0000BA3A                            
0000BA3A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BA3E 5000 7800                  		dc.w $5000, $7800
0000BA42 3800 5800                  		dc.w $3800, $5800
0000BA46 B800                       		dc.w $B800
0000BA48                            ; ===========================================================================
0000BA48                            
0000BA48                            Obj31_Main:				; XREF: Obj31_Index
0000BA48 7000                       		moveq	#0,d0
0000BA4A 1028 0028                  		move.b	$28(a0),d0
0000BA4E 6A00                       		bpl.s	loc_B6CE
0000BA50 0240 007F                  		andi.w	#$7F,d0
0000BA54 D040                       		add.w	d0,d0
0000BA56 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BA5A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BA5E 101A                       		move.b	(a2)+,d0
0000BA60 1140 0028                  		move.b	d0,$28(a0)
0000BA64                            
0000BA64                            loc_B6CE:
0000BA64 0200 000F                  		andi.b	#$F,d0
0000BA68 D040                       		add.w	d0,d0
0000BA6A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BA6E 4A40                       		tst.w	d0
0000BA70 6600                       		bne.s	loc_B6E0
0000BA72 3142 0032                  		move.w	d2,$32(a0)
0000BA76                            
0000BA76                            loc_B6E0:
0000BA76 45F9 0000 BA2E             		lea	(Obj31_Var).l,a2
0000BA7C 2248                       		movea.l	a0,a1
0000BA7E 7203                       		moveq	#3,d1
0000BA80 6000                       		bra.s	Obj31_MakeStomper
0000BA82                            ; ===========================================================================
0000BA82                            
0000BA82                            Obj31_Loop:
0000BA82 6100 0000                  		bsr.w	SingleObjLoad2
0000BA86 6600 0000                  		bne.w	Obj31_SetSize
0000BA8A                            
0000BA8A                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BA8A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BA8E 12BC 0031                  		move.b	#$31,0(a1)
0000BA92 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA98 101A                       		move.b	(a2)+,d0
0000BA9A 4880                       		ext.w	d0
0000BA9C D068 000C                  		add.w	$C(a0),d0
0000BAA0 3340 000C                  		move.w	d0,$C(a1)
0000BAA4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BAAC 337C 0300 0002             		move.w	#$300,2(a1)
0000BAB2 137C 0004 0001             		move.b	#4,1(a1)
0000BAB8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BABE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAC4 137C 0010 0019             		move.b	#$10,$19(a1)
0000BACA 3342 0034                  		move.w	d2,$34(a1)
0000BACE 137C 0004 0018             		move.b	#4,$18(a1)
0000BAD4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BAD8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BADE 6600                       		bne.s	loc_B76A
0000BAE0 5341                       		subq.w	#1,d1
0000BAE2 1028 0028                  		move.b	$28(a0),d0
0000BAE6 0240 00F0                  		andi.w	#$F0,d0
0000BAEA 0C40 0020                  		cmpi.w	#$20,d0
0000BAEE 679A                       		beq.s	Obj31_MakeStomper
0000BAF0 137C 0038 0019             		move.b	#$38,$19(a1)
0000BAF6 137C 0090 0020             		move.b	#$90,$20(a1)
0000BAFC 5241                       		addq.w	#1,d1
0000BAFE                            
0000BAFE                            loc_B76A:
0000BAFE 2348 003C                  		move.l	a0,$3C(a1)
0000BB02 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BB06                            
0000BB06 137C 0003 0018             		move.b	#3,$18(a1)
0000BB0C                            
0000BB0C                            Obj31_SetSize:
0000BB0C 7000                       		moveq	#0,d0
0000BB0E 1028 0028                  		move.b	$28(a0),d0
0000BB12 E648                       		lsr.w	#3,d0
0000BB14 0200 000E                  		andi.b	#$E,d0
0000BB18 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BB1C 115A 0019                  		move.b	(a2)+,$19(a0)
0000BB20 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BB24 6000                       		bra.s	loc_B798
0000BB26                            ; ===========================================================================
0000BB26 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BB28 3009                       		dc.b $30, 9
0000BB2A 100A                       		dc.b $10, $A
0000BB2C                            ; ===========================================================================
0000BB2C                            
0000BB2C                            loc_B798:				; XREF: Obj31_Index
0000BB2C 6100 0000                  		bsr.w	Obj31_Types
0000BB30 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BB36 7200                       		moveq	#0,d1
0000BB38 1228 0019                  		move.b	$19(a0),d1
0000BB3C 0641 000B                  		addi.w	#$B,d1
0000BB40 343C 000C                  		move.w	#$C,d2
0000BB44 363C 000D                  		move.w	#$D,d3
0000BB48 3828 0008                  		move.w	8(a0),d4
0000BB4C 6100 0000                  		bsr.w	SolidObject
0000BB50 0828 0003 0022             		btst	#3,$22(a0)
0000BB56 6700                       		beq.s	Obj31_Display
0000BB58 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BB5E 6400                       		bcc.s	Obj31_Display
0000BB60 2448                       		movea.l	a0,a2
0000BB62 41F8 D000                  		lea	($FFFFD000).w,a0
0000BB66 4EB9 0000 0000             		jsr	KillSonic
0000BB6C 204A                       		movea.l	a2,a0
0000BB6E                            
0000BB6E                            Obj31_Display:
0000BB6E 6100 0000                  		bsr.w	DisplaySprite
0000BB72 6000 0000                  		bra.w	Obj31_ChkDel
0000BB76                            ; ===========================================================================
0000BB76                            
0000BB76                            loc_B7E2:				; XREF: Obj31_Index
0000BB76 117C 0080 0016             		move.b	#$80,$16(a0)
0000BB7C 08E8 0004 0001             		bset	#4,1(a0)
0000BB82 2268 003C                  		movea.l	$3C(a0),a1
0000BB86 1029 0032                  		move.b	$32(a1),d0
0000BB8A EA08                       		lsr.b	#5,d0
0000BB8C 5600                       		addq.b	#3,d0
0000BB8E 1140 001A                  		move.b	d0,$1A(a0)
0000BB92                            
0000BB92                            loc_B7FE:				; XREF: Obj31_Index
0000BB92 2268 003C                  		movea.l	$3C(a0),a1
0000BB96 7000                       		moveq	#0,d0
0000BB98 1029 0032                  		move.b	$32(a1),d0
0000BB9C D068 0030                  		add.w	$30(a0),d0
0000BBA0 3140 000C                  		move.w	d0,$C(a0)
0000BBA4                            
0000BBA4                            Obj31_Display2:				; XREF: Obj31_Index
0000BBA4 6100 0000                  		bsr.w	DisplaySprite
0000BBA8                            
0000BBA8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BBA8 3028 0008                  		move.w	8(a0),d0
0000BBAC 0240 FF80                  		andi.w	#$FF80,d0
0000BBB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBB4 0441 0080                  		subi.w	#$80,d1
0000BBB8 0241 FF80                  		andi.w	#$FF80,d1
0000BBBC 9041                       		sub.w	d1,d0
0000BBBE 0C40 0280                  		cmpi.w	#$280,d0
0000BBC2 6200 0000                  		bhi.w	DeleteObject
0000BBC6 4E75                       		rts	
0000BBC8                            ; ===========================================================================
0000BBC8                            
0000BBC8                            Obj31_Types:				; XREF: loc_B798
0000BBC8 1028 0028                  		move.b	$28(a0),d0
0000BBCC 0240 000F                  		andi.w	#$F,d0
0000BBD0 D040                       		add.w	d0,d0
0000BBD2 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BBD6 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BBDA                            ; ===========================================================================
0000BBDA 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BBDC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BBDE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BBE0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BBE2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BBE4 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BBE6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BBE8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BBEC 7000                       		moveq	#0,d0
0000BBEE 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BBF2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BBF6 6700                       		beq.s	loc_B8A8	; if not, branch
0000BBF8 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BBFC 6A00                       		bpl.s	loc_B872
0000BBFE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BC04 6700                       		beq.s	loc_B8A0
0000BC06                            
0000BC06                            loc_B872:
0000BC06 4A68 0032                  		tst.w	$32(a0)
0000BC0A 6700                       		beq.s	loc_B8A0
0000BC0C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BC10 0200 000F                  		andi.b	#$F,d0
0000BC14 6600                       		bne.s	loc_B892
0000BC16 4A28 0001                  		tst.b	1(a0)
0000BC1A 6A00                       		bpl.s	loc_B892
0000BC1C 303C 00C7                  		move.w	#$C7,d0
0000BC20 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BC26                            
0000BC26                            loc_B892:
0000BC26 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BC2C 6400                       		bcc.s	Obj31_Restart
0000BC2E 317C 0000 0032             		move.w	#0,$32(a0)
0000BC34                            
0000BC34                            loc_B8A0:
0000BC34 317C 0000 0012             		move.w	#0,$12(a0)
0000BC3A 6000                       		bra.s	Obj31_Restart
0000BC3C                            ; ===========================================================================
0000BC3C                            
0000BC3C                            loc_B8A8:				; XREF: Obj31_Type00
0000BC3C 3228 0034                  		move.w	$34(a0),d1
0000BC40 B268 0032                  		cmp.w	$32(a0),d1
0000BC44 6700                       		beq.s	Obj31_Restart
0000BC46 3028 0012                  		move.w	$12(a0),d0
0000BC4A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BC50 D168 0032                  		add.w	d0,$32(a0)
0000BC54 B268 0032                  		cmp.w	$32(a0),d1
0000BC58 6200                       		bhi.s	Obj31_Restart
0000BC5A 3141 0032                  		move.w	d1,$32(a0)
0000BC5E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BC64 4A28 0001                  		tst.b	1(a0)
0000BC68 6A00                       		bpl.s	Obj31_Restart
0000BC6A 303C 00BD                  		move.w	#$BD,d0
0000BC6E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BC74                            
0000BC74                            Obj31_Restart:
0000BC74 7000                       		moveq	#0,d0
0000BC76 1028 0032                  		move.b	$32(a0),d0
0000BC7A D068 0030                  		add.w	$30(a0),d0
0000BC7E 3140 000C                  		move.w	d0,$C(a0)
0000BC82 4E75                       		rts	
0000BC84                            ; ===========================================================================
0000BC84                            
0000BC84                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BC84 4A68 0036                  		tst.w	$36(a0)
0000BC88 6700                       		beq.s	loc_B938
0000BC8A 4A68 0038                  		tst.w	$38(a0)
0000BC8E 6700                       		beq.s	loc_B902
0000BC90 5368 0038                  		subq.w	#1,$38(a0)
0000BC94 6000                       		bra.s	loc_B97C
0000BC96                            ; ===========================================================================
0000BC96                            
0000BC96                            loc_B902:
0000BC96 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BC9A 0200 000F                  		andi.b	#$F,d0
0000BC9E 6600                       		bne.s	loc_B91C
0000BCA0 4A28 0001                  		tst.b	1(a0)
0000BCA4 6A00                       		bpl.s	loc_B91C
0000BCA6 303C 00C7                  		move.w	#$C7,d0
0000BCAA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BCB0                            
0000BCB0                            loc_B91C:
0000BCB0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BCB6 6400                       		bcc.s	loc_B97C
0000BCB8 317C 0000 0032             		move.w	#0,$32(a0)
0000BCBE 317C 0000 0012             		move.w	#0,$12(a0)
0000BCC4 317C 0000 0036             		move.w	#0,$36(a0)
0000BCCA 6000                       		bra.s	loc_B97C
0000BCCC                            ; ===========================================================================
0000BCCC                            
0000BCCC                            loc_B938:				; XREF: Obj31_Type01
0000BCCC 3228 0034                  		move.w	$34(a0),d1
0000BCD0 B268 0032                  		cmp.w	$32(a0),d1
0000BCD4 6700                       		beq.s	loc_B97C
0000BCD6 3028 0012                  		move.w	$12(a0),d0
0000BCDA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BCE0 D168 0032                  		add.w	d0,$32(a0)
0000BCE4 B268 0032                  		cmp.w	$32(a0),d1
0000BCE8 6200                       		bhi.s	loc_B97C
0000BCEA 3141 0032                  		move.w	d1,$32(a0)
0000BCEE 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BCF4 317C 0001 0036             		move.w	#1,$36(a0)
0000BCFA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BD00 4A28 0001                  		tst.b	1(a0)
0000BD04 6A00                       		bpl.s	loc_B97C
0000BD06 303C 00BD                  		move.w	#$BD,d0
0000BD0A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BD10                            
0000BD10                            loc_B97C:
0000BD10 6000 FF62                  		bra.w	Obj31_Restart
0000BD14                            ; ===========================================================================
0000BD14                            
0000BD14                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BD14 3038 D008                  		move.w	($FFFFD008).w,d0
0000BD18 9068 0008                  		sub.w	8(a0),d0
0000BD1C 6400                       		bcc.s	loc_B98C
0000BD1E 4440                       		neg.w	d0
0000BD20                            
0000BD20                            loc_B98C:
0000BD20 0C40 0090                  		cmpi.w	#$90,d0
0000BD24 6400                       		bcc.s	loc_B996
0000BD26 5228 0028                  		addq.b	#1,$28(a0)
0000BD2A                            
0000BD2A                            loc_B996:
0000BD2A 6000 FF48                  		bra.w	Obj31_Restart
0000BD2E                            ; ===========================================================================
0000BD2E                            ; ---------------------------------------------------------------------------
0000BD2E                            ; Object 45 - spiked metal block from beta version (MZ)
0000BD2E                            ; ---------------------------------------------------------------------------
0000BD2E                            
0000BD2E                            Obj45:					; XREF: Obj_Index
0000BD2E 7000                       		moveq	#0,d0
0000BD30 1028 0024                  		move.b	$24(a0),d0
0000BD34 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BD38 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BD3C                            ; ===========================================================================
0000BD3C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BD3E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BD40 0000                       		dc.w loc_BA8E-Obj45_Index
0000BD42 0000                       		dc.w Obj45_Display-Obj45_Index
0000BD44 0000                       		dc.w loc_BA7A-Obj45_Index
0000BD46                            
0000BD46 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BD49 04E4 01                    		dc.b	4, $E4,	  1
0000BD4C 0834 03                    		dc.b	8, $34,	  3
0000BD4F 0628 02                    		dc.b	6, $28,	  2
0000BD52                            
0000BD52 3800                       word_B9BE:	dc.w $3800
0000BD54 A000                       		dc.w -$6000
0000BD56 5000                       		dc.w $5000
0000BD58                            ; ===========================================================================
0000BD58                            
0000BD58                            Obj45_Main:				; XREF: Obj45_Index
0000BD58 7000                       		moveq	#0,d0
0000BD5A 1028 0028                  		move.b	$28(a0),d0
0000BD5E D040                       		add.w	d0,d0
0000BD60 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BD64 45F9 0000 BD46             		lea	(Obj45_Var).l,a2
0000BD6A 2248                       		movea.l	a0,a1
0000BD6C 7203                       		moveq	#3,d1
0000BD6E 6000                       		bra.s	Obj45_Load
0000BD70                            ; ===========================================================================
0000BD70                            
0000BD70                            Obj45_Loop:
0000BD70 6100 0000                  		bsr.w	SingleObjLoad2
0000BD74 6600                       		bne.s	loc_BA52
0000BD76                            
0000BD76                            Obj45_Load:				; XREF: Obj45_Main
0000BD76 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD7A 12BC 0045                  		move.b	#$45,0(a1)
0000BD7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BD84 101A                       		move.b	(a2)+,d0
0000BD86 4880                       		ext.w	d0
0000BD88 D068 0008                  		add.w	8(a0),d0
0000BD8C 3340 0008                  		move.w	d0,8(a1)
0000BD90 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BD98 337C 0300 0002             		move.w	#$300,2(a1)
0000BD9E 137C 0004 0001             		move.b	#4,1(a1)
0000BDA4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BDAA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BDB0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BDB6 137C 0020 0019             		move.b	#$20,$19(a1)
0000BDBC 3342 0034                  		move.w	d2,$34(a1)
0000BDC0 137C 0004 0018             		move.b	#4,$18(a1)
0000BDC6 0C12 0001                  		cmpi.b	#1,(a2)
0000BDCA 6600                       		bne.s	loc_BA40
0000BDCC 137C 0091 0020             		move.b	#$91,$20(a1)
0000BDD2                            
0000BDD2                            loc_BA40:
0000BDD2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BDD6 2348 003C                  		move.l	a0,$3C(a1)
0000BDDA 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BDDE                            
0000BDDE 137C 0003 0018             		move.b	#3,$18(a1)
0000BDE4                            
0000BDE4                            loc_BA52:
0000BDE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDEA                            
0000BDEA                            Obj45_Solid:				; XREF: Obj45_Index
0000BDEA 3F28 0008                  		move.w	8(a0),-(sp)
0000BDEE 6100 0000                  		bsr.w	Obj45_Move
0000BDF2 323C 0017                  		move.w	#$17,d1
0000BDF6 343C 0020                  		move.w	#$20,d2
0000BDFA 363C 0020                  		move.w	#$20,d3
0000BDFE 381F                       		move.w	(sp)+,d4
0000BE00 6100 0000                  		bsr.w	SolidObject
0000BE04 6100 0000                  		bsr.w	DisplaySprite
0000BE08 6000 0000                  		bra.w	Obj45_ChkDel
0000BE0C                            ; ===========================================================================
0000BE0C                            
0000BE0C                            loc_BA7A:				; XREF: Obj45_Index
0000BE0C 2268 003C                  		movea.l	$3C(a0),a1
0000BE10 1029 0032                  		move.b	$32(a1),d0
0000BE14 0600 0010                  		addi.b	#$10,d0
0000BE18 EA08                       		lsr.b	#5,d0
0000BE1A 5600                       		addq.b	#3,d0
0000BE1C 1140 001A                  		move.b	d0,$1A(a0)
0000BE20                            
0000BE20                            loc_BA8E:				; XREF: Obj45_Index
0000BE20 2268 003C                  		movea.l	$3C(a0),a1
0000BE24 7000                       		moveq	#0,d0
0000BE26 1029 0032                  		move.b	$32(a1),d0
0000BE2A 4440                       		neg.w	d0
0000BE2C D068 0030                  		add.w	$30(a0),d0
0000BE30 3140 0008                  		move.w	d0,8(a0)
0000BE34                            
0000BE34                            Obj45_Display:				; XREF: Obj45_Index
0000BE34 6100 0000                  		bsr.w	DisplaySprite
0000BE38                            
0000BE38                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BE38 3028 003A                  		move.w	$3A(a0),d0
0000BE3C 0240 FF80                  		andi.w	#$FF80,d0
0000BE40 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE44 0441 0080                  		subi.w	#$80,d1
0000BE48 0241 FF80                  		andi.w	#$FF80,d1
0000BE4C 9041                       		sub.w	d1,d0
0000BE4E 0C40 0280                  		cmpi.w	#$280,d0
0000BE52 6200 0000                  		bhi.w	DeleteObject
0000BE56 4E75                       		rts	
0000BE58                            
0000BE58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE58                            
0000BE58                            
0000BE58                            Obj45_Move:				; XREF: Obj45_Solid
0000BE58 7000                       		moveq	#0,d0
0000BE5A 1028 0028                  		move.b	$28(a0),d0
0000BE5E D040                       		add.w	d0,d0
0000BE60 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BE64 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BE68                            ; End of function Obj45_Move
0000BE68                            
0000BE68                            ; ===========================================================================
0000BE68 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BE6A 0000                       		dc.w loc_BADA-off_BAD6
0000BE6C                            ; ===========================================================================
0000BE6C                            
0000BE6C                            loc_BADA:				; XREF: off_BAD6
0000BE6C 4A68 0036                  		tst.w	$36(a0)
0000BE70 6700                       		beq.s	loc_BB08
0000BE72 4A68 0038                  		tst.w	$38(a0)
0000BE76 6700                       		beq.s	loc_BAEC
0000BE78 5368 0038                  		subq.w	#1,$38(a0)
0000BE7C 6000                       		bra.s	loc_BB3C
0000BE7E                            ; ===========================================================================
0000BE7E                            
0000BE7E                            loc_BAEC:
0000BE7E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE84 6400                       		bcc.s	loc_BB3C
0000BE86 317C 0000 0032             		move.w	#0,$32(a0)
0000BE8C 317C 0000 0010             		move.w	#0,$10(a0)
0000BE92 317C 0000 0036             		move.w	#0,$36(a0)
0000BE98 6000                       		bra.s	loc_BB3C
0000BE9A                            ; ===========================================================================
0000BE9A                            
0000BE9A                            loc_BB08:				; XREF: loc_BADA
0000BE9A 3228 0034                  		move.w	$34(a0),d1
0000BE9E B268 0032                  		cmp.w	$32(a0),d1
0000BEA2 6700                       		beq.s	loc_BB3C
0000BEA4 3028 0010                  		move.w	$10(a0),d0
0000BEA8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BEAE D168 0032                  		add.w	d0,$32(a0)
0000BEB2 B268 0032                  		cmp.w	$32(a0),d1
0000BEB6 6200                       		bhi.s	loc_BB3C
0000BEB8 3141 0032                  		move.w	d1,$32(a0)
0000BEBC 317C 0000 0010             		move.w	#0,$10(a0)
0000BEC2 317C 0001 0036             		move.w	#1,$36(a0)
0000BEC8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BECE                            
0000BECE                            loc_BB3C:
0000BECE 7000                       		moveq	#0,d0
0000BED0 1028 0032                  		move.b	$32(a0),d0
0000BED4 4440                       		neg.w	d0
0000BED6 D068 0030                  		add.w	$30(a0),d0
0000BEDA 3140 0008                  		move.w	d0,8(a0)
0000BEDE 4E75                       		rts	
0000BEE0                            ; ===========================================================================
0000BEE0                            ; ---------------------------------------------------------------------------
0000BEE0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BEE0                            ; ---------------------------------------------------------------------------
0000BEE0                            Map_obj31:
0000BEE0                            	include "_maps\obj31.asm"
0000BEE0                            ; ---------------------------------------------------------------------------
0000BEE0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BEE0                            ; ---------------------------------------------------------------------------
0000BEE0 0000                       		dc.w byte_BB64-Map_obj31
0000BEE2 0000                       		dc.w byte_BB7E-Map_obj31
0000BEE4 0000                       		dc.w byte_BB98-Map_obj31
0000BEE6 0000                       		dc.w byte_BB9E-Map_obj31
0000BEE8 0000                       		dc.w byte_BBA9-Map_obj31
0000BEEA 0000                       		dc.w byte_BBBE-Map_obj31
0000BEEC 0000                       		dc.w byte_BBDD-Map_obj31
0000BEEE 0000                       		dc.w byte_BC06-Map_obj31
0000BEF0 0000                       		dc.w byte_BC06-Map_obj31
0000BEF2 0000                       		dc.w byte_BC39-Map_obj31
0000BEF4 0000                       		dc.w byte_BC53-Map_obj31
0000BEF6 05                         byte_BB64:	dc.b 5
0000BEF7 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BEFC F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BF01 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BF06 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BF0B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BF10 05                         byte_BB7E:	dc.b 5
0000BF11 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BF16 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BF1B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BF20 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BF25 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BF2A 01                         byte_BB98:	dc.b 1
0000BF2B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BF30 02                         byte_BB9E:	dc.b 2
0000BF31 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BF36 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BF3B 04                         byte_BBA9:	dc.b 4
0000BF3C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BF41 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BF46 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BF4B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BF50 06                         byte_BBBE:	dc.b 6
0000BF51 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BF56 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BF5B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BF60 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BF65 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BF6A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BF6F 08                         byte_BBDD:	dc.b 8
0000BF70 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BF75 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BF7A C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BF7F D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BF84 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BF89 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BF8E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BF93 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BF98 0A                         byte_BC06:	dc.b $A
0000BF99 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BF9E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BFA3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BFA8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BFAD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BFB2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BFB7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BFBC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BFC1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BFC6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BFCB 05                         byte_BC39:	dc.b 5
0000BFCC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BFD1 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BFD6 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BFDB F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BFE0 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BFE5 01                         byte_BC53:	dc.b 1
0000BFE6 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BFEC 00                         		even
0000BFEC 00                         		even
0000BFEC                            
0000BFEC                            ; ---------------------------------------------------------------------------
0000BFEC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BFEC                            ; ---------------------------------------------------------------------------
0000BFEC                            Map_obj45:
0000BFEC                            	include "_maps\obj45.asm"
0000BFEC                            ; ---------------------------------------------------------------------------
0000BFEC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BFEC                            ; ---------------------------------------------------------------------------
0000BFEC 0000                       		dc.w byte_BC6C-Map_obj45
0000BFEE 0000                       		dc.w byte_BC7C-Map_obj45
0000BFF0 0000                       		dc.w byte_BC8C-Map_obj45
0000BFF2 0000                       		dc.w byte_BC92-Map_obj45
0000BFF4 0000                       		dc.w byte_BC9D-Map_obj45
0000BFF6 0000                       		dc.w byte_BCB2-Map_obj45
0000BFF8 0000                       		dc.w byte_BCD1-Map_obj45
0000BFFA 0000                       		dc.w byte_BCFA-Map_obj45
0000BFFC 0000                       		dc.w byte_BCFA-Map_obj45
0000BFFE 03                         byte_BC6C:	dc.b 3
0000BFFF E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C004 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C009 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C00E 03                         byte_BC7C:	dc.b 3
0000C00F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C014 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C019 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C01E 01                         byte_BC8C:	dc.b 1
0000C01F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C024 02                         byte_BC92:	dc.b 2
0000C025 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C02A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C02F 04                         byte_BC9D:	dc.b 4
0000C030 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C035 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C03A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C03F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C044 06                         byte_BCB2:	dc.b 6
0000C045 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C04A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C04F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C054 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C059 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C05E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C063 08                         byte_BCD1:	dc.b 8
0000C064 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C069 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C06E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C073 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C078 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C07D F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C082 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C087 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C08C 08                         byte_BCFA:	dc.b 8
0000C08D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C092 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C097 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C09C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C0A1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C0A6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C0AB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C0B0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C0B5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C0BA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C0C0 00                         		even
0000C0C0 00                         		even
0000C0C0                            
0000C0C0                            ; ===========================================================================
0000C0C0                            ; ---------------------------------------------------------------------------
0000C0C0                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C0C0                            ; ---------------------------------------------------------------------------
0000C0C0                            
0000C0C0                            Obj32:					; XREF: Obj_Index
0000C0C0 7000                       		moveq	#0,d0
0000C0C2 1028 0024                  		move.b	$24(a0),d0
0000C0C6 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C0CA 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C0CE                            ; ===========================================================================
0000C0CE 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C0D0 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C0D2                            ; ===========================================================================
0000C0D2                            
0000C0D2                            Obj32_Main:				; XREF: Obj32_Index
0000C0D2 5428 0024                  		addq.b	#2,$24(a0)
0000C0D6 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C0DE 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C0E4 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C0EA 6700                       		beq.s	loc_BD60
0000C0EC 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C0F2                            
0000C0F2                            loc_BD60:
0000C0F2 117C 0004 0001             		move.b	#4,1(a0)
0000C0F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000C0FE 117C 0004 0018             		move.b	#4,$18(a0)
0000C104 5668 000C                  		addq.w	#3,$C(a0)
0000C108                            
0000C108                            Obj32_Pressed:				; XREF: Obj32_Index
0000C108 4A28 0001                  		tst.b	1(a0)
0000C10C 6A00                       		bpl.s	Obj32_Display
0000C10E 323C 001B                  		move.w	#$1B,d1
0000C112 343C 0005                  		move.w	#5,d2
0000C116 363C 0005                  		move.w	#5,d3
0000C11A 3828 0008                  		move.w	8(a0),d4
0000C11E 6100 0000                  		bsr.w	SolidObject
0000C122 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C128 1028 0028                  		move.b	$28(a0),d0
0000C12C 0240 000F                  		andi.w	#$F,d0
0000C130 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C134 47F3 0000                  		lea	(a3,d0.w),a3
0000C138 7600                       		moveq	#0,d3
0000C13A 0828 0006 0028             		btst	#6,$28(a0)
0000C140 6700                       		beq.s	loc_BDB2
0000C142 7607                       		moveq	#7,d3
0000C144                            
0000C144                            loc_BDB2:
0000C144 4A28 0028                  		tst.b	$28(a0)
0000C148 6A00                       		bpl.s	loc_BDBE
0000C14A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C14E 6600                       		bne.s	loc_BDC8
0000C150                            
0000C150                            loc_BDBE:
0000C150 4A28 0025                  		tst.b	$25(a0)
0000C154 6600                       		bne.s	loc_BDC8
0000C156 0793                       		bclr	d3,(a3)
0000C158 6000                       		bra.s	loc_BDDE
0000C15A                            ; ===========================================================================
0000C15A                            
0000C15A                            loc_BDC8:
0000C15A 4A13                       		tst.b	(a3)
0000C15C 6600                       		bne.s	loc_BDD6
0000C15E 303C 00CD                  		move.w	#$CD,d0
0000C162 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C168                            
0000C168                            loc_BDD6:
0000C168 07D3                       		bset	d3,(a3)
0000C16A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C170                            
0000C170                            loc_BDDE:
0000C170 0828 0005 0028             		btst	#5,$28(a0)
0000C176 6700                       		beq.s	Obj32_Display
0000C178 5328 001E                  		subq.b	#1,$1E(a0)
0000C17C 6A00                       		bpl.s	Obj32_Display
0000C17E 117C 0007 001E             		move.b	#7,$1E(a0)
0000C184 0868 0001 001A             		bchg	#1,$1A(a0)
0000C18A                            
0000C18A                            Obj32_Display:
0000C18A 6100 0000                  		bsr.w	DisplaySprite
0000C18E 3028 0008                  		move.w	8(a0),d0
0000C192 0240 FF80                  		andi.w	#$FF80,d0
0000C196 3238 F700                  		move.w	($FFFFF700).w,d1
0000C19A 0441 0080                  		subi.w	#$80,d1
0000C19E 0241 FF80                  		andi.w	#$FF80,d1
0000C1A2 9041                       		sub.w	d1,d0
0000C1A4 0C40 0280                  		cmpi.w	#$280,d0
0000C1A8 6200 0000                  		bhi.w	Obj32_Delete
0000C1AC 4E75                       		rts	
0000C1AE                            ; ===========================================================================
0000C1AE                            
0000C1AE                            Obj32_Delete:
0000C1AE 6100 0000                  		bsr.w	DeleteObject
0000C1B2 4E75                       		rts	
0000C1B4                            
0000C1B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C1B4                            
0000C1B4                            
0000C1B4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C1B4 3F03                       		move.w	d3,-(sp)
0000C1B6 3428 0008                  		move.w	8(a0),d2
0000C1BA 3628 000C                  		move.w	$C(a0),d3
0000C1BE 0442 0010                  		subi.w	#$10,d2
0000C1C2 5143                       		subq.w	#8,d3
0000C1C4 383C 0020                  		move.w	#$20,d4
0000C1C8 3A3C 0010                  		move.w	#$10,d5
0000C1CC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C1D0 3C3C 005F                  		move.w	#$5F,d6
0000C1D4                            
0000C1D4                            Obj32_MZLoop:
0000C1D4 4A29 0001                  		tst.b	1(a1)
0000C1D8 6A00                       		bpl.s	loc_BE4E
0000C1DA 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C1DE 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C1E0                            
0000C1E0                            loc_BE4E:
0000C1E0 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C1E4 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C1E8                            
0000C1E8 361F                       		move.w	(sp)+,d3
0000C1EA 7000                       		moveq	#0,d0
0000C1EC                            
0000C1EC                            locret_BE5A:
0000C1EC 4E75                       		rts	
0000C1EE                            ; ===========================================================================
0000C1EE 1010                       Obj32_MZData:	dc.b $10, $10
0000C1F0                            ; ===========================================================================
0000C1F0                            
0000C1F0                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C1F0 7001                       		moveq	#1,d0
0000C1F2 0240 003F                  		andi.w	#$3F,d0
0000C1F6 D040                       		add.w	d0,d0
0000C1F8 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C1FC 121A                       		move.b	(a2)+,d1
0000C1FE 4881                       		ext.w	d1
0000C200 3029 0008                  		move.w	8(a1),d0
0000C204 9041                       		sub.w	d1,d0
0000C206 9042                       		sub.w	d2,d0
0000C208 6400                       		bcc.s	loc_BE80
0000C20A D241                       		add.w	d1,d1
0000C20C D041                       		add.w	d1,d0
0000C20E 6500                       		bcs.s	loc_BE84
0000C210 60CE                       		bra.s	loc_BE4E
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            loc_BE80:
0000C212 B044                       		cmp.w	d4,d0
0000C214 62CA                       		bhi.s	loc_BE4E
0000C216                            
0000C216                            loc_BE84:
0000C216 121A                       		move.b	(a2)+,d1
0000C218 4881                       		ext.w	d1
0000C21A 3029 000C                  		move.w	$C(a1),d0
0000C21E 9041                       		sub.w	d1,d0
0000C220 9043                       		sub.w	d3,d0
0000C222 6400                       		bcc.s	loc_BE9A
0000C224 D241                       		add.w	d1,d1
0000C226 D041                       		add.w	d1,d0
0000C228 6500                       		bcs.s	loc_BE9E
0000C22A 60B4                       		bra.s	loc_BE4E
0000C22C                            ; ===========================================================================
0000C22C                            
0000C22C                            loc_BE9A:
0000C22C B045                       		cmp.w	d5,d0
0000C22E 62B0                       		bhi.s	loc_BE4E
0000C230                            
0000C230                            loc_BE9E:
0000C230 361F                       		move.w	(sp)+,d3
0000C232 7001                       		moveq	#1,d0
0000C234 4E75                       		rts	
0000C236                            ; End of function Obj32_MZBlock
0000C236                            
0000C236                            ; ===========================================================================
0000C236                            ; ---------------------------------------------------------------------------
0000C236                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C236                            ; ---------------------------------------------------------------------------
0000C236                            Map_obj32:
0000C236                            	include "_maps\obj32.asm"
0000C236                            ; ---------------------------------------------------------------------------
0000C236                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C236                            ; ---------------------------------------------------------------------------
0000C236 0000                       		dc.w byte_BEAC-Map_obj32
0000C238 0000                       		dc.w byte_BEB7-Map_obj32
0000C23A 0000                       		dc.w byte_BEC2-Map_obj32
0000C23C 0000                       		dc.w byte_BEB7-Map_obj32
0000C23E 02                         byte_BEAC:	dc.b 2
0000C23F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C244 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C249 02                         byte_BEB7:	dc.b 2
0000C24A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C24F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C254 02                         byte_BEC2:	dc.b 2
0000C255 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C25A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C25F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C264                            		even
0000C264                            		even
0000C264                            
0000C264                            ; ===========================================================================
0000C264                            ; ---------------------------------------------------------------------------
0000C264                            ; Object 33 - pushable blocks (MZ, LZ)
0000C264                            ; ---------------------------------------------------------------------------
0000C264                            
0000C264                            Obj33:					; XREF: Obj_Index
0000C264 7000                       		moveq	#0,d0
0000C266 1028 0024                  		move.b	$24(a0),d0
0000C26A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C26E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C272                            ; ===========================================================================
0000C272 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C274 0000                       		dc.w loc_BF6E-Obj33_Index
0000C276 0000                       		dc.w loc_C02C-Obj33_Index
0000C278                            
0000C278 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C27A 4001                       		dc.b $40, 1
0000C27C                            ; ===========================================================================
0000C27C                            
0000C27C                            Obj33_Main:				; XREF: Obj33_Index
0000C27C 5428 0024                  		addq.b	#2,$24(a0)
0000C280 117C 000F 0016             		move.b	#$F,$16(a0)
0000C286 117C 000F 0017             		move.b	#$F,$17(a0)
0000C28C 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C294 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C29A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C2A0 6600                       		bne.s	loc_BF16
0000C2A2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C2A8                            
0000C2A8                            loc_BF16:
0000C2A8 117C 0004 0001             		move.b	#4,1(a0)
0000C2AE 117C 0003 0018             		move.b	#3,$18(a0)
0000C2B4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C2BA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C2C0 7000                       		moveq	#0,d0
0000C2C2 1028 0028                  		move.b	$28(a0),d0
0000C2C6 D040                       		add.w	d0,d0
0000C2C8 0240 000E                  		andi.w	#$E,d0
0000C2CC 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C2D0 115A 0019                  		move.b	(a2)+,$19(a0)
0000C2D4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C2D8 4A28 0028                  		tst.b	$28(a0)
0000C2DC 6700                       		beq.s	Obj33_ChkGone
0000C2DE 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C2E4                            
0000C2E4                            Obj33_ChkGone:
0000C2E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C2E8 7000                       		moveq	#0,d0
0000C2EA 1028 0023                  		move.b	$23(a0),d0
0000C2EE 6700                       		beq.s	loc_BF6E
0000C2F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C2F6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C2FC 6600 0000                  		bne.w	DeleteObject
0000C300                            
0000C300                            loc_BF6E:				; XREF: Obj33_Index
0000C300 4A28 0032                  		tst.b	$32(a0)
0000C304 6600 0000                  		bne.w	loc_C046
0000C308 7200                       		moveq	#0,d1
0000C30A 1228 0019                  		move.b	$19(a0),d1
0000C30E 0641 000B                  		addi.w	#$B,d1
0000C312 343C 0010                  		move.w	#$10,d2
0000C316 363C 0011                  		move.w	#$11,d3
0000C31A 3828 0008                  		move.w	8(a0),d4
0000C31E 6100 0000                  		bsr.w	loc_C186
0000C322 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C328 6600                       		bne.s	loc_BFC6	; if not, branch
0000C32A 08A8 0007 0028             		bclr	#7,$28(a0)
0000C330 3028 0008                  		move.w	8(a0),d0
0000C334 0C40 0A20                  		cmpi.w	#$A20,d0
0000C338 6500                       		bcs.s	loc_BFC6
0000C33A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C33E 6400                       		bcc.s	loc_BFC6
0000C340 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C344 0440 001C                  		subi.w	#$1C,d0
0000C348 3140 000C                  		move.w	d0,$C(a0)
0000C34C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C352 08E8 0007 0028             		bset	#7,$28(a0)
0000C358                            
0000C358                            loc_BFC6:
0000C358 3028 0008                  		move.w	8(a0),d0
0000C35C 0240 FF80                  		andi.w	#$FF80,d0
0000C360 3238 F700                  		move.w	($FFFFF700).w,d1
0000C364 0441 0080                  		subi.w	#$80,d1
0000C368 0241 FF80                  		andi.w	#$FF80,d1
0000C36C 9041                       		sub.w	d1,d0
0000C36E 0C40 0280                  		cmpi.w	#$280,d0
0000C372 6200                       		bhi.s	loc_BFE6
0000C374 6000 0000                  		bra.w	DisplaySprite
0000C378                            ; ===========================================================================
0000C378                            
0000C378                            loc_BFE6:
0000C378 3028 0034                  		move.w	$34(a0),d0
0000C37C 0240 FF80                  		andi.w	#$FF80,d0
0000C380 3238 F700                  		move.w	($FFFFF700).w,d1
0000C384 0441 0080                  		subi.w	#$80,d1
0000C388 0241 FF80                  		andi.w	#$FF80,d1
0000C38C 9041                       		sub.w	d1,d0
0000C38E 0C40 0280                  		cmpi.w	#$280,d0
0000C392 6200                       		bhi.s	loc_C016
0000C394 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C39A 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C3A0 117C 0004 0024             		move.b	#4,$24(a0)
0000C3A6 6000                       		bra.s	loc_C02C
0000C3A8                            ; ===========================================================================
0000C3A8                            
0000C3A8                            loc_C016:
0000C3A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C3AC 7000                       		moveq	#0,d0
0000C3AE 1028 0023                  		move.b	$23(a0),d0
0000C3B2 6700                       		beq.s	loc_C028
0000C3B4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C3BA                            
0000C3BA                            loc_C028:
0000C3BA 6000 0000                  		bra.w	DeleteObject
0000C3BE                            ; ===========================================================================
0000C3BE                            
0000C3BE                            loc_C02C:				; XREF: Obj33_Index
0000C3BE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C3C2 6700                       		beq.s	locret_C044
0000C3C4 117C 0002 0024             		move.b	#2,$24(a0)
0000C3CA 4228 0032                  		clr.b	$32(a0)
0000C3CE 4268 0010                  		clr.w	$10(a0)
0000C3D2 4268 0012                  		clr.w	$12(a0)
0000C3D6                            
0000C3D6                            locret_C044:
0000C3D6 4E75                       		rts	
0000C3D8                            ; ===========================================================================
0000C3D8                            
0000C3D8                            loc_C046:				; XREF: loc_BF6E
0000C3D8 3F28 0008                  		move.w	8(a0),-(sp)
0000C3DC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C3E2 6400                       		bcc.s	loc_C056
0000C3E4 6100 0000                  		bsr.w	SpeedToPos
0000C3E8                            
0000C3E8                            loc_C056:
0000C3E8 0828 0001 0022             		btst	#1,$22(a0)
0000C3EE 6700                       		beq.s	loc_C0A0
0000C3F0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C3F6 4EB9 0000 0000             		jsr	ObjHitFloor
0000C3FC 4A41                       		tst.w	d1
0000C3FE 6A00 0000                  		bpl.w	loc_C09E
0000C402 D368 000C                  		add.w	d1,$C(a0)
0000C406 4268 0012                  		clr.w	$12(a0)
0000C40A 08A8 0001 0022             		bclr	#1,$22(a0)
0000C410 3011                       		move.w	(a1),d0
0000C412 0240 03FF                  		andi.w	#$3FF,d0
0000C416 0C40 016A                  		cmpi.w	#$16A,d0
0000C41A 6500                       		bcs.s	loc_C09E
0000C41C 3028 0030                  		move.w	$30(a0),d0
0000C420 E640                       		asr.w	#3,d0
0000C422 3140 0010                  		move.w	d0,$10(a0)
0000C426 117C 0001 0032             		move.b	#1,$32(a0)
0000C42C 4268 000E                  		clr.w	$E(a0)
0000C430                            
0000C430                            loc_C09E:
0000C430 6000                       		bra.s	loc_C0E6
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            loc_C0A0:
0000C432 4A68 0010                  		tst.w	$10(a0)
0000C436 6700 0000                  		beq.w	loc_C0D6
0000C43A 6B00                       		bmi.s	loc_C0BC
0000C43C 7600                       		moveq	#0,d3
0000C43E 1628 0019                  		move.b	$19(a0),d3
0000C442 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C448 4A41                       		tst.w	d1		; has block touched a wall?
0000C44A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C44C 6000                       		bra.s	loc_C0E6
0000C44E                            ; ===========================================================================
0000C44E                            
0000C44E                            loc_C0BC:
0000C44E 7600                       		moveq	#0,d3
0000C450 1628 0019                  		move.b	$19(a0),d3
0000C454 4643                       		not.w	d3
0000C456 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C45C 4A41                       		tst.w	d1		; has block touched a wall?
0000C45E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C460 6000                       		bra.s	loc_C0E6
0000C462                            ; ===========================================================================
0000C462                            
0000C462                            Obj33_StopPush:
0000C462 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C466 6000                       		bra.s	loc_C0E6
0000C468                            ; ===========================================================================
0000C468                            
0000C468                            loc_C0D6:
0000C468 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C470 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C476 6400                       		bcc.s	loc_C104
0000C478                            
0000C478                            loc_C0E6:
0000C478 7200                       		moveq	#0,d1
0000C47A 1228 0019                  		move.b	$19(a0),d1
0000C47E 0641 000B                  		addi.w	#$B,d1
0000C482 343C 0010                  		move.w	#$10,d2
0000C486 363C 0011                  		move.w	#$11,d3
0000C48A 381F                       		move.w	(sp)+,d4
0000C48C 6100 0000                  		bsr.w	loc_C186
0000C490 6100                       		bsr.s	Obj33_ChkLava
0000C492 6000 FEC4                  		bra.w	loc_BFC6
0000C496                            ; ===========================================================================
0000C496                            
0000C496                            loc_C104:
0000C496 381F                       		move.w	(sp)+,d4
0000C498 43F8 D000                  		lea	($FFFFD000).w,a1
0000C49C 08A9 0003 0022             		bclr	#3,$22(a1)
0000C4A2 08A8 0003 0022             		bclr	#3,$22(a0)
0000C4A8 6000 FECE                  		bra.w	loc_BFE6
0000C4AC                            ; ===========================================================================
0000C4AC                            
0000C4AC                            Obj33_ChkLava:
0000C4AC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C4B2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C4B4 343C FFE0                  		move.w	#-$20,d2
0000C4B8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C4BE 6700                       		beq.s	Obj33_LoadLava
0000C4C0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C4C6 6700                       		beq.s	Obj33_LoadLava
0000C4C8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C4CE 6700                       		beq.s	Obj33_LoadLava
0000C4D0 4E75                       		rts	
0000C4D2                            ; ===========================================================================
0000C4D2                            
0000C4D2                            Obj33_ChkLava2:
0000C4D2 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C4D8 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C4DA 343C 0020                  		move.w	#$20,d2
0000C4DE 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C4E4 6700                       		beq.s	Obj33_LoadLava
0000C4E6 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C4EC 6700                       		beq.s	Obj33_LoadLava
0000C4EE                            
0000C4EE                            Obj33_NoLava:
0000C4EE 4E75                       		rts	
0000C4F0                            ; ===========================================================================
0000C4F0                            
0000C4F0                            Obj33_LoadLava:
0000C4F0 6100 0000                  		bsr.w	SingleObjLoad
0000C4F4 6600                       		bne.s	locret_C184
0000C4F6 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C4FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000C500 D569 0008                  		add.w	d2,8(a1)
0000C504 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C50A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C510 2348 003C                  		move.l	a0,$3C(a1)
0000C514                            
0000C514                            locret_C184:
0000C514 4E75                       		rts	
0000C516                            ; ===========================================================================
0000C516                            
0000C516                            loc_C186:				; XREF: loc_BF6E
0000C516 1028 0025                  		move.b	$25(a0),d0
0000C51A 6700 0000                  		beq.w	loc_C218
0000C51E 5500                       		subq.b	#2,d0
0000C520 6600                       		bne.s	loc_C1AA
0000C522 6100 B44A                  		bsr.w	ExitPlatform
0000C526 0829 0003 0022             		btst	#3,$22(a1)
0000C52C 6600                       		bne.s	loc_C1A4
0000C52E 4228 0025                  		clr.b	$25(a0)
0000C532 4E75                       		rts	
0000C534                            ; ===========================================================================
0000C534                            
0000C534                            loc_C1A4:
0000C534 3404                       		move.w	d4,d2
0000C536 6000 B994                  		bra.w	MvSonicOnPtfm
0000C53A                            ; ===========================================================================
0000C53A                            
0000C53A                            loc_C1AA:
0000C53A 5500                       		subq.b	#2,d0
0000C53C 6600                       		bne.s	loc_C1F2
0000C53E 6100 0000                  		bsr.w	SpeedToPos
0000C542 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C548 4EB9 0000 0000             		jsr	ObjHitFloor
0000C54E 4A41                       		tst.w	d1
0000C550 6A00 0000                  		bpl.w	locret_C1F0
0000C554 D368 000C                  		add.w	d1,$C(a0)
0000C558 4268 0012                  		clr.w	$12(a0)
0000C55C 4228 0025                  		clr.b	$25(a0)
0000C560 3011                       		move.w	(a1),d0
0000C562 0240 03FF                  		andi.w	#$3FF,d0
0000C566 0C40 016A                  		cmpi.w	#$16A,d0
0000C56A 6500                       		bcs.s	locret_C1F0
0000C56C 3028 0030                  		move.w	$30(a0),d0
0000C570 E640                       		asr.w	#3,d0
0000C572 3140 0010                  		move.w	d0,$10(a0)
0000C576 117C 0001 0032             		move.b	#1,$32(a0)
0000C57C 4268 000E                  		clr.w	$E(a0)
0000C580                            
0000C580                            locret_C1F0:
0000C580 4E75                       		rts	
0000C582                            ; ===========================================================================
0000C582                            
0000C582                            loc_C1F2:
0000C582 6100 0000                  		bsr.w	SpeedToPos
0000C586 3028 0008                  		move.w	8(a0),d0
0000C58A 0240 000C                  		andi.w	#$C,d0
0000C58E 6600 0000                  		bne.w	locret_C2E4
0000C592 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C598 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C59E 4268 0010                  		clr.w	$10(a0)
0000C5A2 5528 0025                  		subq.b	#2,$25(a0)
0000C5A6 4E75                       		rts	
0000C5A8                            ; ===========================================================================
0000C5A8                            
0000C5A8                            loc_C218:
0000C5A8 6100 0000                  		bsr.w	loc_FAC8
0000C5AC 4A44                       		tst.w	d4
0000C5AE 6700 0000                  		beq.w	locret_C2E4
0000C5B2 6B00 0000                  		bmi.w	locret_C2E4
0000C5B6 4A28 0032                  		tst.b	$32(a0)
0000C5BA 6700                       		beq.s	loc_C230
0000C5BC 6000 0000                  		bra.w	locret_C2E4
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            loc_C230:
0000C5C0 4A40                       		tst.w	d0
0000C5C2 6700 0000                  		beq.w	locret_C2E4
0000C5C6 6B00                       		bmi.s	loc_C268
0000C5C8 0829 0000 0022             		btst	#0,$22(a1)
0000C5CE 6600 0000                  		bne.w	locret_C2E4
0000C5D2 3F00                       		move.w	d0,-(sp)
0000C5D4 7600                       		moveq	#0,d3
0000C5D6 1628 0019                  		move.b	$19(a0),d3
0000C5DA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C5E0 301F                       		move.w	(sp)+,d0
0000C5E2 4A41                       		tst.w	d1
0000C5E4 6B00 0000                  		bmi.w	locret_C2E4
0000C5E8 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C5F0 7001                       		moveq	#1,d0
0000C5F2 323C 0040                  		move.w	#$40,d1
0000C5F6 6000                       		bra.s	loc_C294
0000C5F8                            ; ===========================================================================
0000C5F8                            
0000C5F8                            loc_C268:
0000C5F8 0829 0000 0022             		btst	#0,$22(a1)
0000C5FE 6700                       		beq.s	locret_C2E4
0000C600 3F00                       		move.w	d0,-(sp)
0000C602 7600                       		moveq	#0,d3
0000C604 1628 0019                  		move.b	$19(a0),d3
0000C608 4643                       		not.w	d3
0000C60A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C610 301F                       		move.w	(sp)+,d0
0000C612 4A41                       		tst.w	d1
0000C614 6B00                       		bmi.s	locret_C2E4
0000C616 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C61E 70FF                       		moveq	#-1,d0
0000C620 323C FFC0                  		move.w	#-$40,d1
0000C624                            
0000C624                            loc_C294:
0000C624 43F8 D000                  		lea	($FFFFD000).w,a1
0000C628 D169 0008                  		add.w	d0,8(a1)
0000C62C 3341 0014                  		move.w	d1,$14(a1)
0000C630 337C 0000 0010             		move.w	#0,$10(a1)
0000C636 3F00                       		move.w	d0,-(sp)
0000C638 303C 00A7                  		move.w	#$A7,d0
0000C63C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C642 301F                       		move.w	(sp)+,d0
0000C644 4A28 0028                  		tst.b	$28(a0)
0000C648 6B00                       		bmi.s	locret_C2E4
0000C64A 3F00                       		move.w	d0,-(sp)
0000C64C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C652 301F                       		move.w	(sp)+,d0
0000C654 0C41 0004                  		cmpi.w	#4,d1
0000C658 6F00                       		ble.s	loc_C2E0
0000C65A 317C 0400 0010             		move.w	#$400,$10(a0)
0000C660 4A40                       		tst.w	d0
0000C662 6A00                       		bpl.s	loc_C2D8
0000C664 4468 0010                  		neg.w	$10(a0)
0000C668                            
0000C668                            loc_C2D8:
0000C668 117C 0006 0025             		move.b	#6,$25(a0)
0000C66E 6000                       		bra.s	locret_C2E4
0000C670                            ; ===========================================================================
0000C670                            
0000C670                            loc_C2E0:
0000C670 D368 000C                  		add.w	d1,$C(a0)
0000C674                            
0000C674                            locret_C2E4:
0000C674 4E75                       		rts	
0000C676                            ; ===========================================================================
0000C676                            ; ---------------------------------------------------------------------------
0000C676                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C676                            ; ---------------------------------------------------------------------------
0000C676                            Map_obj33:
0000C676                            	include "_maps\obj33.asm"
0000C676                            ; ---------------------------------------------------------------------------
0000C676                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C676                            ; ---------------------------------------------------------------------------
0000C676 0000                       		dc.w byte_C2EA-Map_obj33
0000C678 0000                       		dc.w byte_C2F0-Map_obj33
0000C67A 01                         byte_C2EA:	dc.b 1
0000C67B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C680 04                         byte_C2F0:	dc.b 4
0000C681 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C686 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C68B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C690 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C696 00                         		even
0000C696 00                         		even
0000C696                            
0000C696                            ; ===========================================================================
0000C696                            ; ---------------------------------------------------------------------------
0000C696                            ; Object 34 - zone title cards
0000C696                            ; ---------------------------------------------------------------------------
0000C696                            
0000C696                            Obj34:					; XREF: Obj_Index
0000C696 7000                       		moveq	#0,d0
0000C698 1028 0024                  		move.b	$24(a0),d0
0000C69C 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C6A0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C6A4                            ; ===========================================================================
0000C6A4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C6A6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C6A8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C6AA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C6AC 2248                       		movea.l	a0,a1
0000C6AE 7000                       		moveq	#0,d0
0000C6B0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C6B4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C6BA 6600                       		bne.s	Obj34_CheckFZ
0000C6BC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C6BE                            
0000C6BE                            Obj34_CheckFZ:
0000C6BE 3400                       		move.w	d0,d2
0000C6C0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C6C6 6600                       		bne.s	Obj34_LoadConfig
0000C6C8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C6CA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C6CC                            
0000C6CC                            Obj34_LoadConfig:
0000C6CC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C6D2 E948                       		lsl.w	#4,d0
0000C6D4 D6C0                       		adda.w	d0,a3
0000C6D6 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C6DC 7203                       		moveq	#3,d1
0000C6DE                            
0000C6DE                            Obj34_Loop:
0000C6DE 12BC 0034                  		move.b	#$34,0(a1)
0000C6E2 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C6E6 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C6EA 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C6EE 335A 000A                  		move.w	(a2)+,$A(a1)
0000C6F2 135A 0024                  		move.b	(a2)+,$24(a1)
0000C6F6 101A                       		move.b	(a2)+,d0
0000C6F8 6600                       		bne.s	Obj34_ActNumber
0000C6FA 1002                       		move.b	d2,d0
0000C6FC                            
0000C6FC                            Obj34_ActNumber:
0000C6FC 0C00 0007                  		cmpi.b	#7,d0
0000C700 6600                       		bne.s	Obj34_MakeSprite
0000C702 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C706 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C70C 6600                       		bne.s	Obj34_MakeSprite
0000C70E 5300                       		subq.b	#1,d0
0000C710                            
0000C710                            Obj34_MakeSprite:
0000C710 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C714 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C71C 337C 8580 0002             		move.w	#$8580,2(a1)
0000C722 137C 0078 0019             		move.b	#$78,$19(a1)
0000C728 137C 0000 0001             		move.b	#0,1(a1)
0000C72E 137C 0000 0018             		move.b	#0,$18(a1)
0000C734 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C73A 43E9 0040                  		lea	$40(a1),a1	; next object
0000C73E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C742                            
0000C742                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C742 7210                       		moveq	#$10,d1		; set horizontal speed
0000C744 3028 0030                  		move.w	$30(a0),d0
0000C748 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C74C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C74E 6C00                       		bge.s	Obj34_Move
0000C750 4441                       		neg.w	d1
0000C752                            
0000C752                            Obj34_Move:
0000C752 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C756                            
0000C756                            loc_C3C8:
0000C756 3028 0008                  		move.w	8(a0),d0
0000C75A 6B00                       		bmi.s	locret_C3D8
0000C75C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C760 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C762 6000 0000                  		bra.w	DisplaySprite
0000C766                            ; ===========================================================================
0000C766                            
0000C766                            locret_C3D8:
0000C766 4E75                       		rts	
0000C768                            ; ===========================================================================
0000C768                            
0000C768                            Obj34_Wait:				; XREF: Obj34_Index
0000C768 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C76C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C76E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C772 6000 0000                  		bra.w	DisplaySprite
0000C776                            ; ===========================================================================
0000C776                            
0000C776                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C776 4A28 0001                  		tst.b	1(a0)
0000C77A 6A00                       		bpl.s	Obj34_ChangeArt
0000C77C 7220                       		moveq	#$20,d1
0000C77E 3028 0032                  		move.w	$32(a0),d0
0000C782 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C786 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C788 6C00                       		bge.s	Obj34_Move2
0000C78A 4441                       		neg.w	d1
0000C78C                            
0000C78C                            Obj34_Move2:
0000C78C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C790 3028 0008                  		move.w	8(a0),d0
0000C794 6B00                       		bmi.s	locret_C412
0000C796 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C79A 6400                       		bcc.s	locret_C412	; if yes, branch
0000C79C 6000 0000                  		bra.w	DisplaySprite
0000C7A0                            ; ===========================================================================
0000C7A0                            
0000C7A0                            locret_C412:
0000C7A0 4E75                       		rts	
0000C7A2                            ; ===========================================================================
0000C7A2                            
0000C7A2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C7A2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C7A8 6600                       		bne.s	Obj34_Delete
0000C7AA 7002                       		moveq	#2,d0
0000C7AC 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C7B2 7000                       		moveq	#0,d0
0000C7B4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C7B8 0640 0015                  		addi.w	#$15,d0
0000C7BC 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C7C2                            
0000C7C2                            Obj34_Delete:
0000C7C2 6000 0000                  		bra.w	DeleteObject
0000C7C6                            ; ===========================================================================
0000C7C6 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C7C8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C7CA 00E4                       		dc.w $E4
0000C7CC 0206                       		dc.b 2,	6
0000C7CE 00EA                       		dc.w $EA
0000C7D0 0207                       		dc.b 2,	7
0000C7D2 00E0                       		dc.w $E0
0000C7D4 020A                       		dc.b 2,	$A
0000C7D6                            ; ---------------------------------------------------------------------------
0000C7D6                            ; Title	card configuration data
0000C7D6                            ; Format:
0000C7D6                            ; 4 bytes per item (YYYY XXXX)
0000C7D6                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C7D6                            ; ---------------------------------------------------------------------------
0000C7D6 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C7E6 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C7F6 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C806 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C816 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C826 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C836 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C846                            ; ===========================================================================
0000C846                            ; ---------------------------------------------------------------------------
0000C846                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C846                            ; ---------------------------------------------------------------------------
0000C846                            
0000C846                            Obj39:					; XREF: Obj_Index
0000C846 7000                       		moveq	#0,d0
0000C848 1028 0024                  		move.b	$24(a0),d0
0000C84C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C850 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C854                            ; ===========================================================================
0000C854 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C856 0000                       		dc.w loc_C50C-Obj39_Index
0000C858 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C85A                            ; ===========================================================================
0000C85A                            
0000C85A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C85A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C85E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C860 4E75                       		rts	
0000C862                            ; ===========================================================================
0000C862                            
0000C862                            Obj39_Main:
0000C862 5428 0024                  		addq.b	#2,$24(a0)
0000C866 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C86C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C872 6700                       		beq.s	loc_C4EC	; if not, branch
0000C874 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C87A                            
0000C87A                            loc_C4EC:
0000C87A 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C880 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C888 317C 855E 0002             		move.w	#$855E,2(a0)
0000C88E 117C 0000 0001             		move.b	#0,1(a0)
0000C894 117C 0000 0018             		move.b	#0,$18(a0)
0000C89A                            
0000C89A                            loc_C50C:				; XREF: Obj39_Index
0000C89A 7210                       		moveq	#$10,d1		; set horizontal speed
0000C89C 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C8A2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C8A4 6500                       		bcs.s	Obj39_Move
0000C8A6 4441                       		neg.w	d1
0000C8A8                            
0000C8A8                            Obj39_Move:
0000C8A8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8AC 6000 0000                  		bra.w	DisplaySprite
0000C8B0                            ; ===========================================================================
0000C8B0                            
0000C8B0                            Obj39_SetWait:				; XREF: Obj39_Main
0000C8B0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C8B6 5428 0024                  		addq.b	#2,$24(a0)
0000C8BA 4E75                       		rts	
0000C8BC                            ; ===========================================================================
0000C8BC                            
0000C8BC                            Obj39_Wait:				; XREF: Obj39_Index
0000C8BC 1038 F605                  		move.b	($FFFFF605).w,d0
0000C8C0 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C8C4 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C8C6 0828 0000 001A             		btst	#0,$1A(a0)
0000C8CC 6600                       		bne.s	Obj39_Display
0000C8CE 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C8D2 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C8D4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C8D8 6000 0000                  		bra.w	DisplaySprite
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C8DC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C8E0 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C8E2 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C8E8 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C8EC 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C8EE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C8F4 6000                       		bra.s	Obj39_Display
0000C8F6                            ; ===========================================================================
0000C8F6                            
0000C8F6                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C8F6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C8FC                            
0000C8FC                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C8FC 6000 0000                  		bra.w	DisplaySprite
0000C900                            ; ===========================================================================
0000C900                            ; ---------------------------------------------------------------------------
0000C900                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C900                            ; ---------------------------------------------------------------------------
0000C900                            
0000C900                            Obj3A:					; XREF: Obj_Index
0000C900 7000                       		moveq	#0,d0
0000C902 1028 0024                  		move.b	$24(a0),d0
0000C906 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C90A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C90E                            ; ===========================================================================
0000C90E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C910 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C912 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C914 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C916 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C918 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C91A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C91C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C91E 0000                       		dc.w loc_C766-Obj3A_Index
0000C920                            ; ===========================================================================
0000C920                            
0000C920                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C920 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C924 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C926 4E75                       		rts	
0000C928                            ; ===========================================================================
0000C928                            
0000C928                            Obj3A_Main:
0000C928 2248                       		movea.l	a0,a1
0000C92A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C930 7206                       		moveq	#6,d1
0000C932                            
0000C932                            Obj3A_Loop:
0000C932 12BC 003A                  		move.b	#$3A,0(a1)
0000C936 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C93A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C93E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C942 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C946 135A 0024                  		move.b	(a2)+,$24(a1)
0000C94A 101A                       		move.b	(a2)+,d0
0000C94C 0C00 0006                  		cmpi.b	#6,d0
0000C950 6600                       		bne.s	loc_C5CA
0000C952 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C956                            
0000C956                            loc_C5CA:
0000C956 1340 001A                  		move.b	d0,$1A(a1)
0000C95A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C962 337C 8580 0002             		move.w	#$8580,2(a1)
0000C968 137C 0000 0001             		move.b	#0,1(a1)
0000C96E 43E9 0040                  		lea	$40(a1),a1
0000C972 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C976                            
0000C976                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C976 7210                       		moveq	#$10,d1		; set horizontal speed
0000C978 3028 0030                  		move.w	$30(a0),d0
0000C97C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C980 6700                       		beq.s	loc_C61A	; if yes, branch
0000C982 6C00                       		bge.s	Obj3A_Move
0000C984 4441                       		neg.w	d1
0000C986                            
0000C986                            Obj3A_Move:
0000C986 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C98A                            
0000C98A                            loc_C5FE:				; XREF: loc_C61A
0000C98A 3028 0008                  		move.w	8(a0),d0
0000C98E 6B00                       		bmi.s	locret_C60E
0000C990 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C994 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C996 6000 0000                  		bra.w	DisplaySprite
0000C99A                            ; ===========================================================================
0000C99A                            
0000C99A                            locret_C60E:
0000C99A 4E75                       		rts	
0000C99C                            ; ===========================================================================
0000C99C                            
0000C99C                            loc_C610:				; XREF: loc_C61A
0000C99C 117C 000E 0024             		move.b	#$E,$24(a0)
0000C9A2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C9A6                            ; ===========================================================================
0000C9A6                            
0000C9A6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C9A6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C9AC 67EE                       		beq.s	loc_C610
0000C9AE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C9B4 66D4                       		bne.s	loc_C5FE
0000C9B6 5428 0024                  		addq.b	#2,$24(a0)
0000C9BA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C9C0                            
0000C9C0                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C9C0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C9C4 6600                       		bne.s	Obj3A_Display
0000C9C6 5428 0024                  		addq.b	#2,$24(a0)
0000C9CA                            
0000C9CA                            Obj3A_Display:
0000C9CA 6000 0000                  		bra.w	DisplaySprite
0000C9CE                            ; ===========================================================================
0000C9CE                            
0000C9CE                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C9CE 6100 0000                  		bsr.w	DisplaySprite
0000C9D2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C9D8 7000                       		moveq	#0,d0
0000C9DA 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C9DE 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C9E0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C9E4 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C9EA                            
0000C9EA                            Obj3A_RingBonus:
0000C9EA 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C9EE 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C9F0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C9F4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C9FA                            
0000C9FA                            Obj3A_ChkBonus:
0000C9FA 4A40                       		tst.w	d0		; is there any bonus?
0000C9FC 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C9FE 303C 00C5                  		move.w	#$C5,d0
0000CA02 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CA08 5428 0024                  		addq.b	#2,$24(a0)
0000CA0C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CA12 6600                       		bne.s	Obj3A_SetDelay
0000CA14 5828 0024                  		addq.b	#4,$24(a0)
0000CA18                            
0000CA18                            Obj3A_SetDelay:
0000CA18 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CA1E                            
0000CA1E                            locret_C692:
0000CA1E 4E75                       		rts	
0000CA20                            ; ===========================================================================
0000CA20                            
0000CA20                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CA20 4EB9 0000 0000             		jsr	AddPoints
0000CA26 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CA2A 0200 0003                  		andi.b	#3,d0
0000CA2E 66EE                       		bne.s	locret_C692
0000CA30 303C 00CD                  		move.w	#$CD,d0
0000CA34 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CA3A                            ; ===========================================================================
0000CA3A                            
0000CA3A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CA3A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA3E 0240 0007                  		andi.w	#7,d0
0000CA42 E748                       		lsl.w	#3,d0
0000CA44 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CA48 0241 0003                  		andi.w	#3,d1
0000CA4C D241                       		add.w	d1,d1
0000CA4E D041                       		add.w	d1,d0
0000CA50 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CA54 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CA58 4A40                       		tst.w	d0
0000CA5A 6600                       		bne.s	Obj3A_ChkSS
0000CA5C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CA62 6000                       		bra.s	Obj3A_Display2
0000CA64                            ; ===========================================================================
0000CA64                            
0000CA64                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CA64 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CA68 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CA6C 6700                       		beq.s	loc_C6EA	; if not, branch
0000CA6E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CA74 6000                       		bra.s	Obj3A_Display2
0000CA76                            ; ===========================================================================
0000CA76                            
0000CA76                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CA76 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA7C                            
0000CA7C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CA7C 6000 0000                  		bra.w	DisplaySprite
0000CA80                            ; ===========================================================================
0000CA80                            ; ---------------------------------------------------------------------------
0000CA80                            ; Level	order array
0000CA80                            ; ---------------------------------------------------------------------------
0000CA80                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CAB0                            		even
0000CAB0                            ; ===========================================================================
0000CAB0                            
0000CAB0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CAB0 7220                       		moveq	#$20,d1		; set horizontal speed
0000CAB2 3028 0032                  		move.w	$32(a0),d0
0000CAB6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CABA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CABC 6C00                       		bge.s	Obj3A_Move2
0000CABE 4441                       		neg.w	d1
0000CAC0                            
0000CAC0                            Obj3A_Move2:
0000CAC0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAC4 3028 0008                  		move.w	8(a0),d0
0000CAC8 6B00                       		bmi.s	locret_C748
0000CACA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CACE 6400                       		bcc.s	locret_C748	; if yes, branch
0000CAD0 6000 0000                  		bra.w	DisplaySprite
0000CAD4                            ; ===========================================================================
0000CAD4                            
0000CAD4                            locret_C748:
0000CAD4 4E75                       		rts	
0000CAD6                            ; ===========================================================================
0000CAD6                            
0000CAD6                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CAD6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CADC 6600 0000                  		bne.w	DeleteObject
0000CAE0 5428 0024                  		addq.b	#2,$24(a0)
0000CAE4 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CAE8 303C 008D                  		move.w	#$8D,d0
0000CAEC 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CAF2                            ; ===========================================================================
0000CAF2                            
0000CAF2                            loc_C766:				; XREF: Obj3A_Index
0000CAF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CAF6 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CAFC 6700 0000                  		beq.w	DeleteObject
0000CB00 4E75                       		rts	
0000CB02                            ; ===========================================================================
0000CB02 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CB08 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CB0A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CB10 0201                       		dc.b 2,	1
0000CB12 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CB18 0206                       		dc.b 2,	6
0000CB1A 0520 0120 00EC             		dc.w $520, $120, $EC
0000CB20 0202                       		dc.b 2,	2
0000CB22 0540 0120 00FC             		dc.w $540, $120, $FC
0000CB28 0203                       		dc.b 2,	3
0000CB2A 0560 0120 010C             		dc.w $560, $120, $10C
0000CB30 0204                       		dc.b 2,	4
0000CB32 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CB38 0205                       		dc.b 2,	5
0000CB3A                            ; ===========================================================================
0000CB3A                            ; ---------------------------------------------------------------------------
0000CB3A                            ; Object 7E - special stage results screen
0000CB3A                            ; ---------------------------------------------------------------------------
0000CB3A                            
0000CB3A                            Obj7E:					; XREF: Obj_Index
0000CB3A 7000                       		moveq	#0,d0
0000CB3C 1028 0024                  		move.b	$24(a0),d0
0000CB40 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CB44 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CB48                            ; ===========================================================================
0000CB48 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CB4A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CB4C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CB4E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CB50 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CB52 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CB54 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CB56 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CB58 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CB5A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CB5C 0000                       		dc.w loc_C91A-Obj7E_Index
0000CB5E                            ; ===========================================================================
0000CB5E                            
0000CB5E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CB5E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CB62 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CB64 4E75                       		rts	
0000CB66                            ; ===========================================================================
0000CB66                            
0000CB66                            Obj7E_Main:
0000CB66 2248                       		movea.l	a0,a1
0000CB68 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CB6E 7203                       		moveq	#3,d1
0000CB70 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CB76 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CB78 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CB7A                            
0000CB7A                            Obj7E_Loop:
0000CB7A 12BC 007E                  		move.b	#$7E,0(a1)
0000CB7E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CB82 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CB86 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CB8A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB8E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CB92 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CB9A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CBA0 137C 0000 0001             		move.b	#0,1(a1)
0000CBA6 43E9 0040                  		lea	$40(a1),a1
0000CBAA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CBAE                            
0000CBAE 7007                       		moveq	#7,d0
0000CBB0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CBB4 6700                       		beq.s	loc_C842
0000CBB6 7000                       		moveq	#0,d0
0000CBB8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CBBC 6600                       		bne.s	loc_C842	; if not, branch
0000CBBE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CBC0 317C 0018 0008             		move.w	#$18,8(a0)
0000CBC6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CBCC                            
0000CBCC                            loc_C842:
0000CBCC 1140 001A                  		move.b	d0,$1A(a0)
0000CBD0                            
0000CBD0                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CBD0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CBD2 3028 0030                  		move.w	$30(a0),d0
0000CBD6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CBDA 6700                       		beq.s	loc_C86C	; if yes, branch
0000CBDC 6C00                       		bge.s	Obj7E_Move
0000CBDE 4441                       		neg.w	d1
0000CBE0                            
0000CBE0                            Obj7E_Move:
0000CBE0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBE4                            
0000CBE4                            loc_C85A:				; XREF: loc_C86C
0000CBE4 3028 0008                  		move.w	8(a0),d0
0000CBE8 6B00                       		bmi.s	locret_C86A
0000CBEA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CBEE 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CBF0 6000 0000                  		bra.w	DisplaySprite
0000CBF4                            ; ===========================================================================
0000CBF4                            
0000CBF4                            locret_C86A:
0000CBF4 4E75                       		rts	
0000CBF6                            ; ===========================================================================
0000CBF6                            
0000CBF6                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CBF6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CBFC 66E6                       		bne.s	loc_C85A
0000CBFE 5428 0024                  		addq.b	#2,$24(a0)
0000CC02 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CC08 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CC0E                            
0000CC0E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CC0E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC12 6600                       		bne.s	Obj7E_Display
0000CC14 5428 0024                  		addq.b	#2,$24(a0)
0000CC18                            
0000CC18                            Obj7E_Display:
0000CC18 6000 0000                  		bra.w	DisplaySprite
0000CC1C                            ; ===========================================================================
0000CC1C                            
0000CC1C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CC1C 6100 0000                  		bsr.w	DisplaySprite
0000CC20 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CC26 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CC2A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CC2C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CC32 700A                       		moveq	#10,d0		; add 10 to score
0000CC34 4EB9 0000 0000             		jsr	AddPoints
0000CC3A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CC3E 0200 0003                  		andi.b	#3,d0
0000CC42 6600                       		bne.s	locret_C8EA
0000CC44 303C 00CD                  		move.w	#$CD,d0
0000CC48 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CC4E                            ; ===========================================================================
0000CC4E                            
0000CC4E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CC4E 303C 00C5                  		move.w	#$C5,d0
0000CC52 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CC58 5428 0024                  		addq.b	#2,$24(a0)
0000CC5C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CC62 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CC68 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CC6A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CC70 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CC74                            
0000CC74                            locret_C8EA:
0000CC74 4E75                       		rts	
0000CC76                            ; ===========================================================================
0000CC76                            
0000CC76                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CC76 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC7C 6000 0000                  		bra.w	DisplaySprite
0000CC80                            ; ===========================================================================
0000CC80                            
0000CC80                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CC80 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CC86 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CC8C 303C 00BF                  		move.w	#$BF,d0
0000CC90 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CC96 5428 0024                  		addq.b	#2,$24(a0)
0000CC9A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CCA0 6000 0000                  		bra.w	DisplaySprite
0000CCA4                            ; ===========================================================================
0000CCA4                            
0000CCA4                            loc_C91A:				; XREF: Obj7E_Index
0000CCA4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CCA8 0200 000F                  		andi.b	#$F,d0
0000CCAC 6600                       		bne.s	Obj7E_Display2
0000CCAE 0868 0000 001A             		bchg	#0,$1A(a0)
0000CCB4                            
0000CCB4                            Obj7E_Display2:
0000CCB4 6000 0000                  		bra.w	DisplaySprite
0000CCB8                            ; ===========================================================================
0000CCB8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CCBE 0200                       		dc.b 2,	0		; rountine number, frame number
0000CCC0 0320 0120 0118             		dc.w $320, $120, $118
0000CCC6 0201                       		dc.b 2,	1
0000CCC8 0360 0120 0128             		dc.w $360, $120, $128
0000CCCE 0202                       		dc.b 2,	2
0000CCD0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CCD6 0203                       		dc.b 2,	3
0000CCD8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CCDE 0206                       		dc.b 2,	6
0000CCE0                            ; ===========================================================================
0000CCE0                            ; ---------------------------------------------------------------------------
0000CCE0                            ; Object 7F - chaos emeralds from the special stage results screen
0000CCE0                            ; ---------------------------------------------------------------------------
0000CCE0                            
0000CCE0                            Obj7F:					; XREF: Obj_Index
0000CCE0 7000                       		moveq	#0,d0
0000CCE2 1028 0024                  		move.b	$24(a0),d0
0000CCE6 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CCEA 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CCEE                            ; ===========================================================================
0000CCEE 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CCF0 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CCF2                            
0000CCF2                            ; ---------------------------------------------------------------------------
0000CCF2                            ; X-axis positions for chaos emeralds
0000CCF2                            ; ---------------------------------------------------------------------------
0000CCF2 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CCFE                            ; ===========================================================================
0000CCFE                            
0000CCFE                            Obj7F_Main:				; XREF: Obj7F_Index
0000CCFE 2248                       		movea.l	a0,a1
0000CD00 45F9 0000 CCF2             		lea	(Obj7F_PosData).l,a2
0000CD06 7400                       		moveq	#0,d2
0000CD08 7200                       		moveq	#0,d1
0000CD0A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CD0E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CD10 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CD14                            
0000CD14                            Obj7F_Loop:
0000CD14 12BC 007F                  		move.b	#$7F,0(a1)
0000CD18 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CD1C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CD22 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CD26 1633 2000                  		move.b	(a3,d2.w),d3
0000CD2A 1343 001A                  		move.b	d3,$1A(a1)
0000CD2E 1343 001C                  		move.b	d3,$1C(a1)
0000CD32 5202                       		addq.b	#1,d2
0000CD34 5429 0024                  		addq.b	#2,$24(a1)
0000CD38 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CD40 337C 8541 0002             		move.w	#$8541,2(a1)
0000CD46 137C 0000 0001             		move.b	#0,1(a1)
0000CD4C 43E9 0040                  		lea	$40(a1),a1	; next object
0000CD50 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CD54                            
0000CD54                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CD54 1028 001A                  		move.b	$1A(a0),d0
0000CD58 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CD5E 0C00 0006                  		cmpi.b	#6,d0
0000CD62 6600                       		bne.s	Obj7F_Display
0000CD64 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CD6A                            
0000CD6A                            Obj7F_Display:
0000CD6A 6000 0000                  		bra.w	DisplaySprite
0000CD6E                            ; ===========================================================================
0000CD6E                            ; ---------------------------------------------------------------------------
0000CD6E                            ; Sprite mappings - zone title cards
0000CD6E                            ; ---------------------------------------------------------------------------
0000CD6E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CD70 0000                       		dc.w byte_CA2C-Map_obj34
0000CD72 0000                       		dc.w byte_CA5A-Map_obj34
0000CD74 0000                       		dc.w byte_CA7A-Map_obj34
0000CD76 0000                       		dc.w byte_CAA8-Map_obj34
0000CD78 0000                       		dc.w byte_CADC-Map_obj34
0000CD7A 0000                       		dc.w byte_CB10-Map_obj34
0000CD7C 0000                       		dc.w byte_CB26-Map_obj34
0000CD7E 0000                       		dc.w byte_CB31-Map_obj34
0000CD80 0000                       		dc.w byte_CB3C-Map_obj34
0000CD82 0000                       		dc.w byte_CB47-Map_obj34
0000CD84 0000                       		dc.w byte_CB8A-Map_obj34
0000CD86 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CD87 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CD8C F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CD91 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CD96 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CD9B F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CDA0 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CDA5 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CDAA F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CDAF F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CDB4 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CDB9 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CDBE F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CDC3 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CDC4 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CDC9 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CDCE F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CDD3 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CDD8 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CDDD F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CDE2 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CDE7 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CDEC F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CDF1 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CDF6 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CDFB F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CE00 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CE05 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CE0A F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CE0F F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CE14 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CE19 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CE1E F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CE23 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CE28 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CE2D F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CE32 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CE33 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CE38 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CE3D F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CE42 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CE47 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CE4C 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CE4D F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CE52 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CE57 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CE5C F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CE61 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CE66 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CE6B F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CE70 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CE75 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CE7A F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CE7F F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CE84 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CE89 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CE8E F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CE93 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CE98 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CE9D F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CEA2 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CEA3 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CEA8 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CEAD F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CEB2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CEB7 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CEBC F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CEC1 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CEC6 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CECB F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CED0 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CED5 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000CEDA F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000CEDF F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000CEE4 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000CEE9 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000CEEE F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000CEF3 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000CEF8 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000CEFD F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000CF02 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000CF07 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000CF0C 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000CF0D F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000CF12 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000CF17 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000CF1C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CF21 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000CF26 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF2B F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000CF30 04                         byte_CB10:	dc.b 4			; ZONE
0000CF31 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CF36 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CF3B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CF40 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CF45 00                         		dc.b 0
0000CF46 02                         byte_CB26:	dc.b 2			; ACT 1
0000CF47 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CF4C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CF51 02                         byte_CB31:	dc.b 2			; ACT 2
0000CF52 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CF57 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CF5C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CF5D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CF62 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CF67 0D                         byte_CB47:	dc.b $D			; Oval
0000CF68 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CF6D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CF72 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CF77 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CF7C 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CF81 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CF86 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CF8B FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CF90 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CF95 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CF9A FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CF9F 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CFA4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CFA9 00                         		dc.b 0
0000CFAA 05                         byte_CB8A:	dc.b 5			; FINAL
0000CFAB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CFB0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CFB5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CFBA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CFBF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CFC4                            		even
0000CFC4                            ; ---------------------------------------------------------------------------
0000CFC4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CFC4                            ; ---------------------------------------------------------------------------
0000CFC4                            Map_obj39:
0000CFC4                            	include "_maps\obj39.asm"
0000CFC4                            ; ---------------------------------------------------------------------------
0000CFC4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CFC4                            ; ---------------------------------------------------------------------------
0000CFC4 0000                       		dc.w byte_CBAC-Map_obj39
0000CFC6 0000                       		dc.w byte_CBB7-Map_obj39
0000CFC8 0000                       		dc.w byte_CBC2-Map_obj39
0000CFCA 0000                       		dc.w byte_CBCD-Map_obj39
0000CFCC 02                         byte_CBAC:	dc.b 2
0000CFCD F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CFD2 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CFD7 02                         byte_CBB7:	dc.b 2
0000CFD8 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CFDD F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CFE2 02                         byte_CBC2:	dc.b 2
0000CFE3 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CFE8 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CFED 02                         byte_CBCD:	dc.b 2
0000CFEE F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CFF3 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CFF8                            		even
0000CFF8                            		even
0000CFF8                            
0000CFF8                            ; ---------------------------------------------------------------------------
0000CFF8                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CFF8                            ; ---------------------------------------------------------------------------
0000CFF8 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CFFA 0000                       		dc.w byte_CC13-Map_obj3A
0000CFFC 0000                       		dc.w byte_CC32-Map_obj3A
0000CFFE 0000                       		dc.w byte_CC51-Map_obj3A
0000D000 0000                       		dc.w byte_CC75-Map_obj3A
0000D002 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D004 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D006 FF59                       		dc.w byte_CB31-Map_obj3A
0000D008 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D00A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D00B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D010 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D015 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D01A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D01F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D024 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D029 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D02E F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D033 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D038 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D03D F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D042 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D047 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D04C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D051 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D056 06                         byte_CC13:	dc.b 6			; PASSED
0000D057 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D05C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D061 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D066 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D06B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D070 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D075 06                         byte_CC32:	dc.b 6			; SCORE
0000D076 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D07B F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D080 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D085 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D08A F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D08F FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D094 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D095 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D09A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D09F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D0A4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D0A9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D0AE F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D0B3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D0B8 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D0B9 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D0BE F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D0C3 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D0C8 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D0CD FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D0D2 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D0D7 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D0DC                            		even
0000D0DC                            ; ---------------------------------------------------------------------------
0000D0DC                            ; Sprite mappings - special stage results screen
0000D0DC                            ; ---------------------------------------------------------------------------
0000D0DC 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D0DE 0000                       		dc.w byte_CCEE-Map_obj7E
0000D0E0 0000                       		dc.w byte_CD0D-Map_obj7E
0000D0E2 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D0E4 0000                       		dc.w byte_CD31-Map_obj7E
0000D0E6 0000                       		dc.w byte_CD46-Map_obj7E
0000D0E8 0000                       		dc.w byte_CD5B-Map_obj7E
0000D0EA 0000                       		dc.w byte_CD6B-Map_obj7E
0000D0EC 0000                       		dc.w byte_CDA8-Map_obj7E
0000D0EE 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D0EF F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D0F4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D0F9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D0FE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D103 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D108 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D10D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D112 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D117 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D11C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D121 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D126 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D12B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D130 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D131 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D136 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D13B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D140 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D145 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D14A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D14F 07                         byte_CD0D:	dc.b 7
0000D150 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D155 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D15A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D15F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D164 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D169 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D16E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D173 04                         byte_CD31:	dc.b 4
0000D174 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D179 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D17E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D183 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D188 04                         byte_CD46:	dc.b 4
0000D189 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D18E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D193 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D198 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D19D 03                         byte_CD5B:	dc.b 3
0000D19E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D1A3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D1A8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D1AD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D1AE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D1B3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D1B8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D1BD F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D1C2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D1C7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D1CC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D1D1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D1D6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D1DB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D1E0 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D1E5 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D1EA 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D1EB F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D1F0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D1F5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D1FA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D1FF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D204 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D209 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D20E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D213 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D218 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D21D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D222 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D227 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D22C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D231 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D236                            		even
0000D236                            ; ---------------------------------------------------------------------------
0000D236                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D236                            ; ---------------------------------------------------------------------------
0000D236                            Map_obj7F:
0000D236                            	include "_maps\obj7F.asm"
0000D236                            ; ---------------------------------------------------------------------------
0000D236                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D236                            ; ---------------------------------------------------------------------------
0000D236 0000                       		dc.w byte_CE02-Map_obj7F
0000D238 0000                       		dc.w byte_CE08-Map_obj7F
0000D23A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D23C 0000                       		dc.w byte_CE14-Map_obj7F
0000D23E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D240 0000                       		dc.w byte_CE20-Map_obj7F
0000D242 0000                       		dc.w byte_CE26-Map_obj7F
0000D244 01                         byte_CE02:	dc.b 1
0000D245 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D24A 01                         byte_CE08:	dc.b 1
0000D24B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D250 01                         byte_CE0E:	dc.b 1
0000D251 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D256 01                         byte_CE14:	dc.b 1
0000D257 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D25C 01                         byte_CE1A:	dc.b 1
0000D25D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D262 01                         byte_CE20:	dc.b 1
0000D263 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D268 00                         byte_CE26:	dc.b 0			; Blank frame
0000D26A 00                         		even
0000D26A 00                         		even
0000D26A                            
0000D26A                            ; ===========================================================================
0000D26A                            ; ---------------------------------------------------------------------------
0000D26A                            ; Object 36 - spikes
0000D26A                            ; ---------------------------------------------------------------------------
0000D26A                            
0000D26A                            Obj36:					; XREF: Obj_Index
0000D26A 7000                       		moveq	#0,d0
0000D26C 1028 0024                  		move.b	$24(a0),d0
0000D270 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D274 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D278                            ; ===========================================================================
0000D278 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D27A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D27C                            
0000D27C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D27E 0110                       		dc.b 1,	$10
0000D280 0204                       		dc.b 2,	4
0000D282 031C                       		dc.b 3,	$1C
0000D284 0440                       		dc.b 4,	$40
0000D286 0510                       		dc.b 5,	$10
0000D288                            ; ===========================================================================
0000D288                            
0000D288                            Obj36_Main:				; XREF: Obj36_Index
0000D288 5428 0024                  		addq.b	#2,$24(a0)
0000D28C 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D294 317C 051B 0002             		move.w	#$51B,2(a0)
0000D29A 0028 0004 0001             		ori.b	#4,1(a0)
0000D2A0 117C 0004 0018             		move.b	#4,$18(a0)
0000D2A6 1028 0028                  		move.b	$28(a0),d0
0000D2AA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D2B0 0240 00F0                  		andi.w	#$F0,d0
0000D2B4 43F9 0000 D27C             		lea	(Obj36_Var).l,a1
0000D2BA E648                       		lsr.w	#3,d0
0000D2BC D2C0                       		adda.w	d0,a1
0000D2BE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D2C2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D2C6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D2CC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D2D2                            
0000D2D2                            Obj36_Solid:				; XREF: Obj36_Index
0000D2D2 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D2D6 343C 0004                  		move.w	#4,d2
0000D2DA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D2E0 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D2E2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D2E8 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D2EA 343C 0014                  		move.w	#$14,d2
0000D2EE                            
0000D2EE                            ; Spikes types $1x and $5x face	sideways
0000D2EE                            
0000D2EE                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D2EE 323C 001B                  		move.w	#$1B,d1
0000D2F2 3602                       		move.w	d2,d3
0000D2F4 5243                       		addq.w	#1,d3
0000D2F6 3828 0008                  		move.w	8(a0),d4
0000D2FA 6100 0000                  		bsr.w	SolidObject
0000D2FE 0828 0003 0022             		btst	#3,$22(a0)
0000D304 6600                       		bne.s	Obj36_Display
0000D306 0C44 0001                  		cmpi.w	#1,d4
0000D30A 6700                       		beq.s	Obj36_Hurt
0000D30C 6000                       		bra.s	Obj36_Display
0000D30E                            ; ===========================================================================
0000D30E                            
0000D30E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D30E                            
0000D30E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D30E 7200                       		moveq	#0,d1
0000D310 1228 0019                  		move.b	$19(a0),d1
0000D314 0641 000B                  		addi.w	#$B,d1
0000D318 343C 0010                  		move.w	#$10,d2
0000D31C 363C 0011                  		move.w	#$11,d3
0000D320 3828 0008                  		move.w	8(a0),d4
0000D324 6100 0000                  		bsr.w	SolidObject
0000D328 0828 0003 0022             		btst	#3,$22(a0)
0000D32E 6600                       		bne.s	Obj36_Hurt
0000D330 4A44                       		tst.w	d4
0000D332 6A00                       		bpl.s	Obj36_Display
0000D334                            
0000D334                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D334 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D338 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D33A 2F08                       		move.l	a0,-(sp)
0000D33C 2448                       		movea.l	a0,a2
0000D33E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D342 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D348 6400                       		bcc.s	loc_CF20
0000D34A 2628 000C                  		move.l	$C(a0),d3
0000D34E 3028 0012                  		move.w	$12(a0),d0
0000D352 48C0                       		ext.l	d0
0000D354 E180                       		asl.l	#8,d0
0000D356 9680                       		sub.l	d0,d3
0000D358 2143 000C                  		move.l	d3,$C(a0)
0000D35C 4EB9 0000 0000             		jsr	HurtSonic
0000D362                            
0000D362                            loc_CF20:
0000D362 205F                       		movea.l	(sp)+,a0
0000D364                            
0000D364                            Obj36_Display:
0000D364 6100 0000                  		bsr.w	DisplaySprite
0000D368 3028 0030                  		move.w	$30(a0),d0
0000D36C 0240 FF80                  		andi.w	#$FF80,d0
0000D370 3238 F700                  		move.w	($FFFFF700).w,d1
0000D374 0441 0080                  		subi.w	#$80,d1
0000D378 0241 FF80                  		andi.w	#$FF80,d1
0000D37C 9041                       		sub.w	d1,d0
0000D37E 0C40 0280                  		cmpi.w	#$280,d0
0000D382 6200 0000                  		bhi.w	DeleteObject
0000D386 4E75                       		rts	
0000D388                            ; ===========================================================================
0000D388                            
0000D388                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D388 7000                       		moveq	#0,d0
0000D38A 1028 0028                  		move.b	$28(a0),d0
0000D38E D040                       		add.w	d0,d0
0000D390 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D394 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D398                            ; ===========================================================================
0000D398 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D39A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D39C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D39E                            ; ===========================================================================
0000D39E                            
0000D39E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D39E 4E75                       		rts			; don't move the object
0000D3A0                            ; ===========================================================================
0000D3A0                            
0000D3A0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D3A0 6100 0000                  		bsr.w	Obj36_Wait
0000D3A4 7000                       		moveq	#0,d0
0000D3A6 1028 0034                  		move.b	$34(a0),d0
0000D3AA D068 0032                  		add.w	$32(a0),d0
0000D3AE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D3B2 4E75                       		rts	
0000D3B4                            ; ===========================================================================
0000D3B4                            
0000D3B4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D3B4 6100 0000                  		bsr.w	Obj36_Wait
0000D3B8 7000                       		moveq	#0,d0
0000D3BA 1028 0034                  		move.b	$34(a0),d0
0000D3BE D068 0030                  		add.w	$30(a0),d0
0000D3C2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D3C6 4E75                       		rts	
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            Obj36_Wait:
0000D3C8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D3CC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D3CE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D3D2 6600                       		bne.s	locret_CFE6
0000D3D4 4A28 0001                  		tst.b	1(a0)
0000D3D8 6A00                       		bpl.s	locret_CFE6
0000D3DA 303C 00B6                  		move.w	#$B6,d0
0000D3DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D3E4 6000                       		bra.s	locret_CFE6
0000D3E6                            ; ===========================================================================
0000D3E6                            
0000D3E6                            loc_CFA4:
0000D3E6 4A68 0036                  		tst.w	$36(a0)
0000D3EA 6700                       		beq.s	loc_CFC6
0000D3EC 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D3F2 6400                       		bcc.s	locret_CFE6
0000D3F4 317C 0000 0034             		move.w	#0,$34(a0)
0000D3FA 317C 0000 0036             		move.w	#0,$36(a0)
0000D400 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D406 6000                       		bra.s	locret_CFE6
0000D408                            ; ===========================================================================
0000D408                            
0000D408                            loc_CFC6:
0000D408 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D40E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D414 6500                       		bcs.s	locret_CFE6
0000D416 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D41C 317C 0001 0036             		move.w	#1,$36(a0)
0000D422 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D428                            
0000D428                            locret_CFE6:
0000D428 4E75                       		rts	
0000D42A                            ; ===========================================================================
0000D42A                            ; ---------------------------------------------------------------------------
0000D42A                            ; Sprite mappings - spikes
0000D42A                            ; ---------------------------------------------------------------------------
0000D42A                            Map_obj36:
0000D42A                            	include "_maps\obj36.asm"
0000D42A                            ; ---------------------------------------------------------------------------
0000D42A                            ; Sprite mappings - spikes
0000D42A                            ; ---------------------------------------------------------------------------
0000D42A 0000                       		dc.w byte_CFF4-Map_obj36
0000D42C 0000                       		dc.w byte_D004-Map_obj36
0000D42E 0000                       		dc.w byte_D014-Map_obj36
0000D430 0000                       		dc.w byte_D01A-Map_obj36
0000D432 0000                       		dc.w byte_D02A-Map_obj36
0000D434 0000                       		dc.w byte_D049-Map_obj36
0000D436 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D437 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D43C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D441 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D446 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D447 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D44C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D451 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D456 01                         byte_D014:	dc.b 1			; 1 spike
0000D457 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D45C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D45D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D462 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D467 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D46C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D46D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D472 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D477 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D47C F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D481 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D486 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D48B 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D48C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D492 00                         		even
0000D492 00                         		even
0000D492                            
0000D492                            ; ===========================================================================
0000D492                            ; ---------------------------------------------------------------------------
0000D492                            ; Object 3B - purple rock (GHZ)
0000D492                            ; ---------------------------------------------------------------------------
0000D492                            
0000D492                            Obj3B:					; XREF: Obj_Index
0000D492 7000                       		moveq	#0,d0
0000D494 1028 0024                  		move.b	$24(a0),d0
0000D498 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D49C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D4A0                            ; ===========================================================================
0000D4A0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D4A2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D4A4                            ; ===========================================================================
0000D4A4                            
0000D4A4                            Obj3B_Main:				; XREF: Obj3B_Index
0000D4A4 5428 0024                  		addq.b	#2,$24(a0)
0000D4A8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D4B0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D4B6 117C 0004 0001             		move.b	#4,1(a0)
0000D4BC 117C 0013 0019             		move.b	#$13,$19(a0)
0000D4C2 117C 0004 0018             		move.b	#4,$18(a0)
0000D4C8                            
0000D4C8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D4C8 323C 001B                  		move.w	#$1B,d1
0000D4CC 343C 0010                  		move.w	#$10,d2
0000D4D0 363C 0010                  		move.w	#$10,d3
0000D4D4 3828 0008                  		move.w	8(a0),d4
0000D4D8 6100 0000                  		bsr.w	SolidObject
0000D4DC 6100 0000                  		bsr.w	DisplaySprite
0000D4E0 3028 0008                  		move.w	8(a0),d0
0000D4E4 0240 FF80                  		andi.w	#$FF80,d0
0000D4E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4EC 0441 0080                  		subi.w	#$80,d1
0000D4F0 0241 FF80                  		andi.w	#$FF80,d1
0000D4F4 9041                       		sub.w	d1,d0
0000D4F6 0C40 0280                  		cmpi.w	#$280,d0
0000D4FA 6200 0000                  		bhi.w	DeleteObject
0000D4FE 4E75                       		rts	
0000D500                            ; ===========================================================================
0000D500                            ; ---------------------------------------------------------------------------
0000D500                            ; Object 49 - waterfall	sound effect (GHZ)
0000D500                            ; ---------------------------------------------------------------------------
0000D500                            
0000D500                            Obj49:					; XREF: Obj_Index
0000D500 7000                       		moveq	#0,d0
0000D502 1028 0024                  		move.b	$24(a0),d0
0000D506 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D50A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D50E                            ; ===========================================================================
0000D50E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D510 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D512                            ; ===========================================================================
0000D512                            
0000D512                            Obj49_Main:				; XREF: Obj49_Index
0000D512 5428 0024                  		addq.b	#2,$24(a0)
0000D516 117C 0004 0001             		move.b	#4,1(a0)
0000D51C                            
0000D51C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D51C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D520 0200 003F                  		andi.b	#$3F,d0
0000D524 6600                       		bne.s	Obj49_ChkDel
0000D526 303C 00D0                  		move.w	#$D0,d0
0000D52A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D530                            
0000D530                            Obj49_ChkDel:
0000D530 3028 0008                  		move.w	8(a0),d0
0000D534 0240 FF80                  		andi.w	#$FF80,d0
0000D538 3238 F700                  		move.w	($FFFFF700).w,d1
0000D53C 0441 0080                  		subi.w	#$80,d1
0000D540 0241 FF80                  		andi.w	#$FF80,d1
0000D544 9041                       		sub.w	d1,d0
0000D546 0C40 0280                  		cmpi.w	#$280,d0
0000D54A 6200 0000                  		bhi.w	DeleteObject
0000D54E 4E75                       		rts	
0000D550                            ; ===========================================================================
0000D550                            ; ---------------------------------------------------------------------------
0000D550                            ; Sprite mappings - purple rock	(GHZ)
0000D550                            ; ---------------------------------------------------------------------------
0000D550                            Map_obj3B:
0000D550                            	include "_maps\obj3B.asm"
0000D550                            ; ---------------------------------------------------------------------------
0000D550                            ; Sprite mappings - purple rock	(GHZ)
0000D550                            ; ---------------------------------------------------------------------------
0000D550 0000                       		dc.w byte_D110-Map_obj3B
0000D552 02                         byte_D110:	dc.b 2
0000D553 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D558 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D55E 00                         		even
0000D55E 00                         		even
0000D55E                            
0000D55E                            ; ===========================================================================
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            
0000D55E                            Obj3C:					; XREF: Obj_Index
0000D55E 7000                       		moveq	#0,d0
0000D560 1028 0024                  		move.b	$24(a0),d0
0000D564 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D568 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D56C 6000 0000                  		bra.w	MarkObjGone
0000D570                            ; ===========================================================================
0000D570 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D572 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D574 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D576                            ; ===========================================================================
0000D576                            
0000D576                            Obj3C_Main:				; XREF: Obj3C_Index
0000D576 5428 0024                  		addq.b	#2,$24(a0)
0000D57A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D582 317C 450F 0002             		move.w	#$450F,2(a0)
0000D588 117C 0004 0001             		move.b	#4,1(a0)
0000D58E 117C 0010 0019             		move.b	#$10,$19(a0)
0000D594 117C 0004 0018             		move.b	#4,$18(a0)
0000D59A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D5A0                            
0000D5A0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D5A0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D5A6 323C 001B                  		move.w	#$1B,d1
0000D5AA 343C 0020                  		move.w	#$20,d2
0000D5AE 363C 0020                  		move.w	#$20,d3
0000D5B2 3828 0008                  		move.w	8(a0),d4
0000D5B6 6100 0000                  		bsr.w	SolidObject
0000D5BA 0828 0005 0022             		btst	#5,$22(a0)
0000D5C0 6600                       		bne.s	Obj3C_ChkRoll
0000D5C2                            
0000D5C2                            locret_D180:
0000D5C2 4E75                       		rts	
0000D5C4                            ; ===========================================================================
0000D5C4                            
0000D5C4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D5C4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D5CA 66F6                       		bne.s	locret_D180	; if not, branch
0000D5CC 3028 0030                  		move.w	$30(a0),d0
0000D5D0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D5D2 4440                       		neg.w	d0
0000D5D4                            
0000D5D4                            Obj3C_ChkSpeed:
0000D5D4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D5D8 65E8                       		bcs.s	locret_D180	; if not, branch
0000D5DA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D5E0 5869 0008                  		addq.w	#4,8(a1)
0000D5E4 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D5EA 3028 0008                  		move.w	8(a0),d0
0000D5EE B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D5F2 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D5F4 5169 0008                  		subq.w	#8,8(a1)
0000D5F8 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D5FE                            
0000D5FE                            Obj3C_Smash:
0000D5FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D604 08A8 0005 0022             		bclr	#5,$22(a0)
0000D60A 08A9 0005 0022             		bclr	#5,$22(a1)
0000D610 7207                       		moveq	#7,d1		; load 8 fragments
0000D612 343C 0070                  		move.w	#$70,d2
0000D616 6100                       		bsr.s	SmashObject
0000D618                            
0000D618                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D618 6100 0000                  		bsr.w	SpeedToPos
0000D61C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D622 6100 0000                  		bsr.w	DisplaySprite
0000D626 4A28 0001                  		tst.b	1(a0)
0000D62A 6A00 0000                  		bpl.w	DeleteObject
0000D62E 4E75                       		rts	
0000D630                            
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            
0000D630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D630                            
0000D630                            
0000D630                            SmashObject:				; XREF: Obj3C_Smash
0000D630 7000                       		moveq	#0,d0
0000D632 1028 001A                  		move.b	$1A(a0),d0
0000D636 D040                       		add.w	d0,d0
0000D638 2668 0004                  		movea.l	4(a0),a3
0000D63C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D640 524B                       		addq.w	#1,a3
0000D642 08E8 0005 0001             		bset	#5,1(a0)
0000D648 1810                       		move.b	0(a0),d4
0000D64A 1A28 0001                  		move.b	1(a0),d5
0000D64E 2248                       		movea.l	a0,a1
0000D650 6000                       		bra.s	Smash_LoadFrag
0000D652                            ; ===========================================================================
0000D652                            
0000D652                            Smash_Loop:
0000D652 6100 0000                  		bsr.w	SingleObjLoad
0000D656 6600                       		bne.s	Smash_PlaySnd
0000D658 5A4B                       		addq.w	#5,a3
0000D65A                            
0000D65A                            Smash_LoadFrag:				; XREF: SmashObject
0000D65A 137C 0004 0024             		move.b	#4,$24(a1)
0000D660 1284                       		move.b	d4,0(a1)
0000D662 234B 0004                  		move.l	a3,4(a1)
0000D666 1345 0001                  		move.b	d5,1(a1)
0000D66A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D670 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D676 3368 0002 0002             		move.w	2(a0),2(a1)
0000D67C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D682 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D688 335C 0010                  		move.w	(a4)+,$10(a1)
0000D68C 335C 0012                  		move.w	(a4)+,$12(a1)
0000D690 B3C8                       		cmpa.l	a0,a1
0000D692 6400                       		bcc.s	loc_D268
0000D694 2F08                       		move.l	a0,-(sp)
0000D696 2049                       		movea.l	a1,a0
0000D698 6100 0000                  		bsr.w	SpeedToPos
0000D69C D568 0012                  		add.w	d2,$12(a0)
0000D6A0 205F                       		movea.l	(sp)+,a0
0000D6A2 6100 0000                  		bsr.w	DisplaySprite2
0000D6A6                            
0000D6A6                            loc_D268:
0000D6A6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D6AA                            
0000D6AA                            Smash_PlaySnd:
0000D6AA 303C 00CB                  		move.w	#$CB,d0
0000D6AE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D6B4                            ; End of function SmashObject
0000D6B4                            
0000D6B4                            ; ===========================================================================
0000D6B4                            ; Smashed block	fragment speeds
0000D6B4                            ;
0000D6B4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D6B8 0600 FF00                  		dc.w $600, $FF00
0000D6BC 0600 0100                  		dc.w $600, $100
0000D6C0 0400 0500                  		dc.w $400, $500
0000D6C4 0600 FA00                  		dc.w $600, $FA00
0000D6C8 0800 FE00                  		dc.w $800, $FE00
0000D6CC 0800 0200                  		dc.w $800, $200
0000D6D0 0600 0600                  		dc.w $600, $600
0000D6D4                            
0000D6D4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D6D8 F800 FE00                  		dc.w $F800, $FE00
0000D6DC F800 0200                  		dc.w $F800, $200
0000D6E0 FA00 0600                  		dc.w $FA00, $600
0000D6E4 FC00 FB00                  		dc.w $FC00, $FB00
0000D6E8 FA00 FF00                  		dc.w $FA00, $FF00
0000D6EC FA00 0100                  		dc.w $FA00, $100
0000D6F0 FC00 0500                  		dc.w $FC00, $500
0000D6F4                            ; ---------------------------------------------------------------------------
0000D6F4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D6F4                            ; ---------------------------------------------------------------------------
0000D6F4                            Map_obj3C:
0000D6F4                            	include "_maps\obj3C.asm"
0000D6F4                            ; ---------------------------------------------------------------------------
0000D6F4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D6F4                            ; ---------------------------------------------------------------------------
0000D6F4 0000                       		dc.w byte_D2BC-Map_obj3C
0000D6F6 0000                       		dc.w byte_D2E5-Map_obj3C
0000D6F8 0000                       		dc.w byte_D30E-Map_obj3C
0000D6FA 08                         byte_D2BC:	dc.b 8
0000D6FB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D700 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D705 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D70A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D70F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D714 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D719 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D71E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D723 08                         byte_D2E5:	dc.b 8
0000D724 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D729 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D72E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D733 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D738 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D73D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D742 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D747 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D74C 08                         byte_D30E:	dc.b 8
0000D74D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D752 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D757 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D75C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D761 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D766 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D76B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D770 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D776 00                         		even
0000D776 00                         		even
0000D776                            
0000D776                            ; ---------------------------------------------------------------------------
0000D776                            ; Object code loading subroutine
0000D776                            ; ---------------------------------------------------------------------------
0000D776                            
0000D776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D776                            
0000D776                            
0000D776                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D776 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D77A 7E7F                       		moveq	#$7F,d7
0000D77C 7000                       		moveq	#0,d0
0000D77E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D784 6400                       		bcc.s	loc_D362
0000D786                            
0000D786                            loc_D348:
0000D786 1010                       		move.b	(a0),d0		; load object number from RAM
0000D788 6700                       		beq.s	loc_D358
0000D78A D040                       		add.w	d0,d0
0000D78C D040                       		add.w	d0,d0
0000D78E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D792 4E91                       		jsr	(a1)		; run the object's code
0000D794 7000                       		moveq	#0,d0
0000D796                            
0000D796                            loc_D358:
0000D796 41E8 0040                  		lea	$40(a0),a0	; next object
0000D79A 51CF FFEA                  		dbf	d7,loc_D348
0000D79E 4E75                       		rts	
0000D7A0                            ; ===========================================================================
0000D7A0                            
0000D7A0                            loc_D362:
0000D7A0 7E1F                       		moveq	#$1F,d7
0000D7A2 61E2                       		bsr.s	loc_D348
0000D7A4 7E5F                       		moveq	#$5F,d7
0000D7A6                            
0000D7A6                            loc_D368:
0000D7A6 7000                       		moveq	#0,d0
0000D7A8 1010                       		move.b	(a0),d0
0000D7AA 6700                       		beq.s	loc_D378
0000D7AC 4A28 0001                  		tst.b	1(a0)
0000D7B0 6A00                       		bpl.s	loc_D378
0000D7B2 6100 0000                  		bsr.w	DisplaySprite
0000D7B6                            
0000D7B6                            loc_D378:
0000D7B6 41E8 0040                  		lea	$40(a0),a0
0000D7BA                            
0000D7BA                            loc_D37C:
0000D7BA 51CF FFEA                  		dbf	d7,loc_D368
0000D7BE 4E75                       		rts	
0000D7C0                            ; End of function ObjectsLoad
0000D7C0                            
0000D7C0                            ; ===========================================================================
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            ; Object pointers
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            Obj_Index:
0000D7C0                            	include "_inc\Object pointers.asm"
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            ; Object pointers
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D7D0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D7E0 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D7F0 0000 0000 0000 A9F8 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D800 0000 76DA 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D810 0000 7D00 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D820 0000 854E 0000 85B6 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D830 0000 8C00 0000 8EEE 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D840 0000 0000 0000 9BC2 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D850 0000 9EFA 0000 A4E6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D860 0000 97FA 0000 8CD6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D870 0000 B040 0000 A6DA 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D880 0000 BA12 0000 C0C0 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D890 0000 B576 0000 D26A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D8A0 0000 C846 0000 C900 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D8B0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D8C0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D8D0 0000 BD2E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D8E0 0000 D500 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D8F0 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D900 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D910 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D920 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D930 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D940 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D950 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D960 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D970 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D980 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D990 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D9A0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D9B0 0000 0000 0000 CB3A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D9C0 0000 51FA 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D9D0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D9E0 0000 58B4 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D9E0 0000 58B4 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D9F0                            
0000D9F0                            ; ---------------------------------------------------------------------------
0000D9F0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D9F0                            ; ---------------------------------------------------------------------------
0000D9F0                            
0000D9F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9F0                            
0000D9F0                            
0000D9F0                            ObjectFall:
0000D9F0 2428 0008                  		move.l	8(a0),d2
0000D9F4 2628 000C                  		move.l	$C(a0),d3
0000D9F8 3028 0010                  		move.w	$10(a0),d0
0000D9FC 48C0                       		ext.l	d0
0000D9FE E180                       		asl.l	#8,d0
0000DA00 D480                       		add.l	d0,d2
0000DA02 3028 0012                  		move.w	$12(a0),d0
0000DA06 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DA0C 48C0                       		ext.l	d0
0000DA0E E180                       		asl.l	#8,d0
0000DA10 D680                       		add.l	d0,d3
0000DA12 2142 0008                  		move.l	d2,8(a0)
0000DA16 2143 000C                  		move.l	d3,$C(a0)
0000DA1A 4E75                       		rts	
0000DA1C                            ; End of function ObjectFall
0000DA1C                            
0000DA1C                            ; ---------------------------------------------------------------------------
0000DA1C                            ; Subroutine translating object	speed to update	object position
0000DA1C                            ; ---------------------------------------------------------------------------
0000DA1C                            
0000DA1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA1C                            
0000DA1C                            
0000DA1C                            SpeedToPos:
0000DA1C 2428 0008                  		move.l	8(a0),d2
0000DA20 2628 000C                  		move.l	$C(a0),d3
0000DA24 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DA28 48C0                       		ext.l	d0
0000DA2A E180                       		asl.l	#8,d0		; multiply speed by $100
0000DA2C D480                       		add.l	d0,d2		; add to x-axis	position
0000DA2E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DA32 48C0                       		ext.l	d0
0000DA34 E180                       		asl.l	#8,d0		; multiply by $100
0000DA36 D680                       		add.l	d0,d3		; add to y-axis	position
0000DA38 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DA3C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DA40 4E75                       		rts	
0000DA42                            ; End of function SpeedToPos
0000DA42                            
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            
0000DA42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA42                            
0000DA42                            
0000DA42                            DisplaySprite:
0000DA42 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DA46 3028 0018                  		move.w	$18(a0),d0
0000DA4A E248                       		lsr.w	#1,d0
0000DA4C 0240 0380                  		andi.w	#$380,d0
0000DA50 D2C0                       		adda.w	d0,a1
0000DA52 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DA56 6400                       		bcc.s	locret_D620
0000DA58 5451                       		addq.w	#2,(a1)
0000DA5A D2D1                       		adda.w	(a1),a1
0000DA5C 3288                       		move.w	a0,(a1)
0000DA5E                            
0000DA5E                            locret_D620:
0000DA5E 4E75                       		rts	
0000DA60                            ; End of function DisplaySprite
0000DA60                            
0000DA60                            ; ---------------------------------------------------------------------------
0000DA60                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DA60                            ; ---------------------------------------------------------------------------
0000DA60                            
0000DA60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA60                            
0000DA60                            
0000DA60                            DisplaySprite2:
0000DA60 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DA64 3029 0018                  		move.w	$18(a1),d0
0000DA68 E248                       		lsr.w	#1,d0
0000DA6A 0240 0380                  		andi.w	#$380,d0
0000DA6E D4C0                       		adda.w	d0,a2
0000DA70 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DA74 6400                       		bcc.s	locret_D63E
0000DA76 5452                       		addq.w	#2,(a2)
0000DA78 D4D2                       		adda.w	(a2),a2
0000DA7A 3489                       		move.w	a1,(a2)
0000DA7C                            
0000DA7C                            locret_D63E:
0000DA7C 4E75                       		rts	
0000DA7E                            ; End of function DisplaySprite2
0000DA7E                            
0000DA7E                            ; ---------------------------------------------------------------------------
0000DA7E                            ; Subroutine to	delete an object
0000DA7E                            ; ---------------------------------------------------------------------------
0000DA7E                            
0000DA7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA7E                            
0000DA7E                            
0000DA7E                            DeleteObject:
0000DA7E 2248                       		movea.l	a0,a1
0000DA80                            
0000DA80                            DeleteObject2:
0000DA80 7200                       		moveq	#0,d1
0000DA82 700F                       		moveq	#$F,d0
0000DA84                            
0000DA84                            loc_D646:
0000DA84 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DA86 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DA8A 4E75                       		rts	
0000DA8C                            ; End of function DeleteObject
0000DA8C                            
0000DA8C                            ; ===========================================================================
0000DA8C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DA90 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DA94 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DA98 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DA9C                            ; ---------------------------------------------------------------------------
0000DA9C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DA9C                            ; ---------------------------------------------------------------------------
0000DA9C                            
0000DA9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA9C                            
0000DA9C                            
0000DA9C                            BuildSprites:				; XREF: TitleScreen; et al
0000DA9C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DAA0 7A00                       		moveq	#0,d5
0000DAA2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DAA6 7E07                       		moveq	#7,d7
0000DAA8                            
0000DAA8                            loc_D66A:
0000DAA8 4A54                       		tst.w	(a4)
0000DAAA 6700 0000                  		beq.w	loc_D72E
0000DAAE 7C02                       		moveq	#2,d6
0000DAB0                            
0000DAB0                            loc_D672:
0000DAB0 3074 6000                  		movea.w	(a4,d6.w),a0
0000DAB4 4A10                       		tst.b	(a0)
0000DAB6 6700 0000                  		beq.w	loc_D726
0000DABA 08A8 0007 0001             		bclr	#7,1(a0)
0000DAC0 1028 0001                  		move.b	1(a0),d0
0000DAC4 1800                       		move.b	d0,d4
0000DAC6 0240 000C                  		andi.w	#$C,d0
0000DACA 6700                       		beq.s	loc_D6DE
0000DACC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DAD0 7000                       		moveq	#0,d0
0000DAD2 1028 0019                  		move.b	$19(a0),d0
0000DAD6 3628 0008                  		move.w	8(a0),d3
0000DADA 9651                       		sub.w	(a1),d3
0000DADC 3203                       		move.w	d3,d1
0000DADE D240                       		add.w	d0,d1
0000DAE0 6B00 0000                  		bmi.w	loc_D726
0000DAE4 3203                       		move.w	d3,d1
0000DAE6 9240                       		sub.w	d0,d1
0000DAE8 0C41 0140                  		cmpi.w	#$140,d1
0000DAEC 6C00                       		bge.s	loc_D726
0000DAEE 0643 0080                  		addi.w	#$80,d3
0000DAF2 0804 0004                  		btst	#4,d4
0000DAF6 6700                       		beq.s	loc_D6E8
0000DAF8 7000                       		moveq	#0,d0
0000DAFA 1028 0016                  		move.b	$16(a0),d0
0000DAFE 3428 000C                  		move.w	$C(a0),d2
0000DB02 9469 0004                  		sub.w	4(a1),d2
0000DB06 3202                       		move.w	d2,d1
0000DB08 D240                       		add.w	d0,d1
0000DB0A 6B00                       		bmi.s	loc_D726
0000DB0C 3202                       		move.w	d2,d1
0000DB0E 9240                       		sub.w	d0,d1
0000DB10 0C41 00E0                  		cmpi.w	#$E0,d1
0000DB14 6C00                       		bge.s	loc_D726
0000DB16 0642 0080                  		addi.w	#$80,d2
0000DB1A 6000                       		bra.s	loc_D700
0000DB1C                            ; ===========================================================================
0000DB1C                            
0000DB1C                            loc_D6DE:
0000DB1C 3428 000A                  		move.w	$A(a0),d2
0000DB20 3628 0008                  		move.w	8(a0),d3
0000DB24 6000                       		bra.s	loc_D700
0000DB26                            ; ===========================================================================
0000DB26                            
0000DB26                            loc_D6E8:
0000DB26 3428 000C                  		move.w	$C(a0),d2
0000DB2A 9469 0004                  		sub.w	4(a1),d2
0000DB2E 0642 0080                  		addi.w	#$80,d2
0000DB32 0C42 0060                  		cmpi.w	#$60,d2
0000DB36 6500                       		bcs.s	loc_D726
0000DB38 0C42 0180                  		cmpi.w	#$180,d2
0000DB3C 6400                       		bcc.s	loc_D726
0000DB3E                            
0000DB3E                            loc_D700:
0000DB3E 2268 0004                  		movea.l	4(a0),a1
0000DB42 7200                       		moveq	#0,d1
0000DB44 0804 0005                  		btst	#5,d4
0000DB48 6600                       		bne.s	loc_D71C
0000DB4A 1228 001A                  		move.b	$1A(a0),d1
0000DB4E D201                       		add.b	d1,d1
0000DB50 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DB54 1219                       		move.b	(a1)+,d1
0000DB56 5301                       		subq.b	#1,d1
0000DB58 6B00                       		bmi.s	loc_D720
0000DB5A                            
0000DB5A                            loc_D71C:
0000DB5A 6100 0000                  		bsr.w	sub_D750
0000DB5E                            
0000DB5E                            loc_D720:
0000DB5E 08E8 0007 0001             		bset	#7,1(a0)
0000DB64                            
0000DB64                            loc_D726:
0000DB64 5446                       		addq.w	#2,d6
0000DB66 5554                       		subq.w	#2,(a4)
0000DB68 6600 FF46                  		bne.w	loc_D672
0000DB6C                            
0000DB6C                            loc_D72E:
0000DB6C 49EC 0080                  		lea	$80(a4),a4
0000DB70 51CF FF36                  		dbf	d7,loc_D66A
0000DB74 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DB78 0C05 0050                  		cmpi.b	#$50,d5
0000DB7C 6700                       		beq.s	loc_D748
0000DB7E 24BC 0000 0000             		move.l	#0,(a2)
0000DB84 4E75                       		rts	
0000DB86                            ; ===========================================================================
0000DB86                            
0000DB86                            loc_D748:
0000DB86 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DB8C 4E75                       		rts	
0000DB8E                            ; End of function BuildSprites
0000DB8E                            
0000DB8E                            
0000DB8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB8E                            
0000DB8E                            
0000DB8E                            sub_D750:				; XREF: BuildSprites
0000DB8E 3668 0002                  		movea.w	2(a0),a3
0000DB92 0804 0000                  		btst	#0,d4
0000DB96 6600                       		bne.s	loc_D796
0000DB98 0804 0001                  		btst	#1,d4
0000DB9C 6600 0000                  		bne.w	loc_D7E4
0000DBA0                            ; End of function sub_D750
0000DBA0                            
0000DBA0                            
0000DBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA0                            
0000DBA0                            
0000DBA0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DBA0 0C05 0050                  		cmpi.b	#$50,d5
0000DBA4 6700                       		beq.s	locret_D794
0000DBA6 1019                       		move.b	(a1)+,d0
0000DBA8 4880                       		ext.w	d0
0000DBAA D042                       		add.w	d2,d0
0000DBAC 34C0                       		move.w	d0,(a2)+
0000DBAE 14D9                       		move.b	(a1)+,(a2)+
0000DBB0 5205                       		addq.b	#1,d5
0000DBB2 14C5                       		move.b	d5,(a2)+
0000DBB4 1019                       		move.b	(a1)+,d0
0000DBB6 E148                       		lsl.w	#8,d0
0000DBB8 1019                       		move.b	(a1)+,d0
0000DBBA D04B                       		add.w	a3,d0
0000DBBC 34C0                       		move.w	d0,(a2)+
0000DBBE 1019                       		move.b	(a1)+,d0
0000DBC0 4880                       		ext.w	d0
0000DBC2 D043                       		add.w	d3,d0
0000DBC4 0240 01FF                  		andi.w	#$1FF,d0
0000DBC8 6600                       		bne.s	loc_D78E
0000DBCA 5240                       		addq.w	#1,d0
0000DBCC                            
0000DBCC                            loc_D78E:
0000DBCC 34C0                       		move.w	d0,(a2)+
0000DBCE 51C9 FFD0                  		dbf	d1,sub_D762
0000DBD2                            
0000DBD2                            locret_D794:
0000DBD2 4E75                       		rts	
0000DBD4                            ; End of function sub_D762
0000DBD4                            
0000DBD4                            ; ===========================================================================
0000DBD4                            
0000DBD4                            loc_D796:
0000DBD4 0804 0001                  		btst	#1,d4
0000DBD8 6600 0000                  		bne.w	loc_D82A
0000DBDC                            
0000DBDC                            loc_D79E:
0000DBDC 0C05 0050                  		cmpi.b	#$50,d5
0000DBE0 6700                       		beq.s	locret_D7E2
0000DBE2 1019                       		move.b	(a1)+,d0
0000DBE4 4880                       		ext.w	d0
0000DBE6 D042                       		add.w	d2,d0
0000DBE8 34C0                       		move.w	d0,(a2)+
0000DBEA 1819                       		move.b	(a1)+,d4
0000DBEC 14C4                       		move.b	d4,(a2)+
0000DBEE 5205                       		addq.b	#1,d5
0000DBF0 14C5                       		move.b	d5,(a2)+
0000DBF2 1019                       		move.b	(a1)+,d0
0000DBF4 E148                       		lsl.w	#8,d0
0000DBF6 1019                       		move.b	(a1)+,d0
0000DBF8 D04B                       		add.w	a3,d0
0000DBFA 0A40 0800                  		eori.w	#$800,d0
0000DBFE 34C0                       		move.w	d0,(a2)+
0000DC00 1019                       		move.b	(a1)+,d0
0000DC02 4880                       		ext.w	d0
0000DC04 4440                       		neg.w	d0
0000DC06 D804                       		add.b	d4,d4
0000DC08 0244 0018                  		andi.w	#$18,d4
0000DC0C 5044                       		addq.w	#8,d4
0000DC0E 9044                       		sub.w	d4,d0
0000DC10 D043                       		add.w	d3,d0
0000DC12 0240 01FF                  		andi.w	#$1FF,d0
0000DC16 6600                       		bne.s	loc_D7DC
0000DC18 5240                       		addq.w	#1,d0
0000DC1A                            
0000DC1A                            loc_D7DC:
0000DC1A 34C0                       		move.w	d0,(a2)+
0000DC1C 51C9 FFBE                  		dbf	d1,loc_D79E
0000DC20                            
0000DC20                            locret_D7E2:
0000DC20 4E75                       		rts	
0000DC22                            ; ===========================================================================
0000DC22                            
0000DC22                            loc_D7E4:				; XREF: sub_D750
0000DC22 0C05 0050                  		cmpi.b	#$50,d5
0000DC26 6700                       		beq.s	locret_D828
0000DC28 1019                       		move.b	(a1)+,d0
0000DC2A 1811                       		move.b	(a1),d4
0000DC2C 4880                       		ext.w	d0
0000DC2E 4440                       		neg.w	d0
0000DC30 E70C                       		lsl.b	#3,d4
0000DC32 0244 0018                  		andi.w	#$18,d4
0000DC36 5044                       		addq.w	#8,d4
0000DC38 9044                       		sub.w	d4,d0
0000DC3A D042                       		add.w	d2,d0
0000DC3C 34C0                       		move.w	d0,(a2)+
0000DC3E 14D9                       		move.b	(a1)+,(a2)+
0000DC40 5205                       		addq.b	#1,d5
0000DC42 14C5                       		move.b	d5,(a2)+
0000DC44 1019                       		move.b	(a1)+,d0
0000DC46 E148                       		lsl.w	#8,d0
0000DC48 1019                       		move.b	(a1)+,d0
0000DC4A D04B                       		add.w	a3,d0
0000DC4C 0A40 1000                  		eori.w	#$1000,d0
0000DC50 34C0                       		move.w	d0,(a2)+
0000DC52 1019                       		move.b	(a1)+,d0
0000DC54 4880                       		ext.w	d0
0000DC56 D043                       		add.w	d3,d0
0000DC58 0240 01FF                  		andi.w	#$1FF,d0
0000DC5C 6600                       		bne.s	loc_D822
0000DC5E 5240                       		addq.w	#1,d0
0000DC60                            
0000DC60                            loc_D822:
0000DC60 34C0                       		move.w	d0,(a2)+
0000DC62 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DC66                            
0000DC66                            locret_D828:
0000DC66 4E75                       		rts	
0000DC68                            ; ===========================================================================
0000DC68                            
0000DC68                            loc_D82A:
0000DC68 0C05 0050                  		cmpi.b	#$50,d5
0000DC6C 6700                       		beq.s	locret_D87C
0000DC6E 1019                       		move.b	(a1)+,d0
0000DC70 1811                       		move.b	(a1),d4
0000DC72 4880                       		ext.w	d0
0000DC74 4440                       		neg.w	d0
0000DC76 E70C                       		lsl.b	#3,d4
0000DC78 0244 0018                  		andi.w	#$18,d4
0000DC7C 5044                       		addq.w	#8,d4
0000DC7E 9044                       		sub.w	d4,d0
0000DC80 D042                       		add.w	d2,d0
0000DC82 34C0                       		move.w	d0,(a2)+
0000DC84 1819                       		move.b	(a1)+,d4
0000DC86 14C4                       		move.b	d4,(a2)+
0000DC88 5205                       		addq.b	#1,d5
0000DC8A 14C5                       		move.b	d5,(a2)+
0000DC8C 1019                       		move.b	(a1)+,d0
0000DC8E E148                       		lsl.w	#8,d0
0000DC90 1019                       		move.b	(a1)+,d0
0000DC92 D04B                       		add.w	a3,d0
0000DC94 0A40 1800                  		eori.w	#$1800,d0
0000DC98 34C0                       		move.w	d0,(a2)+
0000DC9A 1019                       		move.b	(a1)+,d0
0000DC9C 4880                       		ext.w	d0
0000DC9E 4440                       		neg.w	d0
0000DCA0 D804                       		add.b	d4,d4
0000DCA2 0244 0018                  		andi.w	#$18,d4
0000DCA6 5044                       		addq.w	#8,d4
0000DCA8 9044                       		sub.w	d4,d0
0000DCAA D043                       		add.w	d3,d0
0000DCAC 0240 01FF                  		andi.w	#$1FF,d0
0000DCB0 6600                       		bne.s	loc_D876
0000DCB2 5240                       		addq.w	#1,d0
0000DCB4                            
0000DCB4                            loc_D876:
0000DCB4 34C0                       		move.w	d0,(a2)+
0000DCB6 51C9 FFB0                  		dbf	d1,loc_D82A
0000DCBA                            
0000DCBA                            locret_D87C:
0000DCBA 4E75                       		rts	
0000DCBC                            ; ---------------------------------------------------------------------------
0000DCBC                            ; Subroutine to	check if an object is on the screen
0000DCBC                            ; ---------------------------------------------------------------------------
0000DCBC                            
0000DCBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCBC                            
0000DCBC                            
0000DCBC                            ChkObjOnScreen:
0000DCBC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DCC0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DCC4 6B00                       		bmi.s	NotOnScreen
0000DCC6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DCCA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DCCC                            
0000DCCC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DCD0 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DCD4 6B00                       		bmi.s	NotOnScreen
0000DCD6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DCDA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DCDC                            
0000DCDC 7000                       		moveq	#0,d0		; set flag to 0
0000DCDE 4E75                       		rts	
0000DCE0                            ; ===========================================================================
0000DCE0                            
0000DCE0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DCE0 7001                       		moveq	#1,d0		; set flag to 1
0000DCE2 4E75                       		rts	
0000DCE4                            ; End of function ChkObjOnScreen
0000DCE4                            
0000DCE4                            
0000DCE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCE4                            
0000DCE4                            
0000DCE4                            ChkObjOnScreen2:
0000DCE4 7200                       		moveq	#0,d1
0000DCE6 1228 0019                  		move.b	$19(a0),d1
0000DCEA 3028 0008                  		move.w	8(a0),d0
0000DCEE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DCF2 D041                       		add.w	d1,d0
0000DCF4 6B00                       		bmi.s	NotOnScreen2
0000DCF6 D241                       		add.w	d1,d1
0000DCF8 9041                       		sub.w	d1,d0
0000DCFA 0C40 0140                  		cmpi.w	#320,d0
0000DCFE 6C00                       		bge.s	NotOnScreen2
0000DD00                            
0000DD00 3228 000C                  		move.w	$C(a0),d1
0000DD04 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DD08 6B00                       		bmi.s	NotOnScreen2
0000DD0A 0C41 00E0                  		cmpi.w	#224,d1
0000DD0E 6C00                       		bge.s	NotOnScreen2
0000DD10                            
0000DD10 7000                       		moveq	#0,d0
0000DD12 4E75                       		rts	
0000DD14                            ; ===========================================================================
0000DD14                            
0000DD14                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DD14 7001                       		moveq	#1,d0
0000DD16 4E75                       		rts	
0000DD18                            ; End of function ChkObjOnScreen2
0000DD18                            
0000DD18                            ; ---------------------------------------------------------------------------
0000DD18                            ; Subroutine to	load a level's objects
0000DD18                            ; ---------------------------------------------------------------------------
0000DD18                            
0000DD18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD18                            
0000DD18                            
0000DD18                            ObjPosLoad:				; XREF: Level; et al
0000DD18 7000                       		moveq	#0,d0
0000DD1A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DD1E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DD22 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DD26                            ; End of function ObjPosLoad
0000DD26                            
0000DD26                            ; ===========================================================================
0000DD26 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DD28 0000                       		dc.w OPL_Next-OPL_Index
0000DD2A                            ; ===========================================================================
0000DD2A                            
0000DD2A                            OPL_Main:				; XREF: OPL_Index
0000DD2A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DD2E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DD32 ED08                       		lsl.b	#6,d0
0000DD34 E848                       		lsr.w	#4,d0
0000DD36 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DD3C 2248                       		movea.l	a0,a1
0000DD3E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DD42 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DD46 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DD4A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DD4E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DD52 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DD56 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DD5A 34FC 0101                  		move.w	#$101,(a2)+
0000DD5E 303C 005E                  		move.w	#$5E,d0
0000DD62                            
0000DD62                            OPL_ClrList:
0000DD62 429A                       		clr.l	(a2)+
0000DD64 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DD68                            
0000DD68 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DD6C 7400                       		moveq	#0,d2
0000DD6E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DD72 0446 0080                  		subi.w	#$80,d6
0000DD76 6400                       		bcc.s	loc_D93C
0000DD78 7C00                       		moveq	#0,d6
0000DD7A                            
0000DD7A                            loc_D93C:
0000DD7A 0246 FF80                  		andi.w	#$FF80,d6
0000DD7E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DD82                            
0000DD82                            loc_D944:
0000DD82 BC50                       		cmp.w	(a0),d6
0000DD84 6300                       		bls.s	loc_D956
0000DD86 4A28 0004                  		tst.b	4(a0)
0000DD8A 6A00                       		bpl.s	loc_D952
0000DD8C 1412                       		move.b	(a2),d2
0000DD8E 5212                       		addq.b	#1,(a2)
0000DD90                            
0000DD90                            loc_D952:
0000DD90 5C48                       		addq.w	#6,a0
0000DD92 60EE                       		bra.s	loc_D944
0000DD94                            ; ===========================================================================
0000DD94                            
0000DD94                            loc_D956:
0000DD94 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DD98 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DD9C 0446 0080                  		subi.w	#$80,d6
0000DDA0 6500                       		bcs.s	loc_D976
0000DDA2                            
0000DDA2                            loc_D964:
0000DDA2 BC50                       		cmp.w	(a0),d6
0000DDA4 6300                       		bls.s	loc_D976
0000DDA6 4A28 0004                  		tst.b	4(a0)
0000DDAA 6A00                       		bpl.s	loc_D972
0000DDAC 522A 0001                  		addq.b	#1,1(a2)
0000DDB0                            
0000DDB0                            loc_D972:
0000DDB0 5C48                       		addq.w	#6,a0
0000DDB2 60EE                       		bra.s	loc_D964
0000DDB4                            ; ===========================================================================
0000DDB4                            
0000DDB4                            loc_D976:
0000DDB4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DDB8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DDBE                            
0000DDBE                            OPL_Next:				; XREF: OPL_Index
0000DDBE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DDC2 7400                       		moveq	#0,d2
0000DDC4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DDC8 0246 FF80                  		andi.w	#$FF80,d6
0000DDCC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DDD0 6700 0000                  		beq.w	locret_DA3A
0000DDD4 6C00                       		bge.s	loc_D9F6
0000DDD6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DDDA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DDDE 0446 0080                  		subi.w	#$80,d6
0000DDE2 6500                       		bcs.s	loc_D9D2
0000DDE4                            
0000DDE4                            loc_D9A6:
0000DDE4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DDE8 6C00                       		bge.s	loc_D9D2
0000DDEA 5D48                       		subq.w	#6,a0
0000DDEC 4A28 0004                  		tst.b	4(a0)
0000DDF0 6A00                       		bpl.s	loc_D9BC
0000DDF2 532A 0001                  		subq.b	#1,1(a2)
0000DDF6 142A 0001                  		move.b	1(a2),d2
0000DDFA                            
0000DDFA                            loc_D9BC:
0000DDFA 6100 0000                  		bsr.w	loc_DA3C
0000DDFE 6600                       		bne.s	loc_D9C6
0000DE00 5D48                       		subq.w	#6,a0
0000DE02 60E0                       		bra.s	loc_D9A6
0000DE04                            ; ===========================================================================
0000DE04                            
0000DE04                            loc_D9C6:
0000DE04 4A28 0004                  		tst.b	4(a0)
0000DE08 6A00                       		bpl.s	loc_D9D0
0000DE0A 522A 0001                  		addq.b	#1,1(a2)
0000DE0E                            
0000DE0E                            loc_D9D0:
0000DE0E 5C48                       		addq.w	#6,a0
0000DE10                            
0000DE10                            loc_D9D2:
0000DE10 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE14 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DE18 0646 0300                  		addi.w	#$300,d6
0000DE1C                            
0000DE1C                            loc_D9DE:
0000DE1C BC68 FFFA                  		cmp.w	-6(a0),d6
0000DE20 6E00                       		bgt.s	loc_D9F0
0000DE22 4A28 FFFE                  		tst.b	-2(a0)
0000DE26 6A00                       		bpl.s	loc_D9EC
0000DE28 5312                       		subq.b	#1,(a2)
0000DE2A                            
0000DE2A                            loc_D9EC:
0000DE2A 5D48                       		subq.w	#6,a0
0000DE2C 60EE                       		bra.s	loc_D9DE
0000DE2E                            ; ===========================================================================
0000DE2E                            
0000DE2E                            loc_D9F0:
0000DE2E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE32 4E75                       		rts	
0000DE34                            ; ===========================================================================
0000DE34                            
0000DE34                            loc_D9F6:
0000DE34 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DE38 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DE3C 0646 0280                  		addi.w	#$280,d6
0000DE40                            
0000DE40                            loc_DA02:
0000DE40 BC50                       		cmp.w	(a0),d6
0000DE42 6300                       		bls.s	loc_DA16
0000DE44 4A28 0004                  		tst.b	4(a0)
0000DE48 6A00                       		bpl.s	loc_DA10
0000DE4A 1412                       		move.b	(a2),d2
0000DE4C 5212                       		addq.b	#1,(a2)
0000DE4E                            
0000DE4E                            loc_DA10:
0000DE4E 6100 0000                  		bsr.w	loc_DA3C
0000DE52 67EC                       		beq.s	loc_DA02
0000DE54                            
0000DE54                            loc_DA16:
0000DE54 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE58 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DE5C 0446 0300                  		subi.w	#$300,d6
0000DE60 6500                       		bcs.s	loc_DA36
0000DE62                            
0000DE62                            loc_DA24:
0000DE62 BC50                       		cmp.w	(a0),d6
0000DE64 6300                       		bls.s	loc_DA36
0000DE66 4A28 0004                  		tst.b	4(a0)
0000DE6A 6A00                       		bpl.s	loc_DA32
0000DE6C 522A 0001                  		addq.b	#1,1(a2)
0000DE70                            
0000DE70                            loc_DA32:
0000DE70 5C48                       		addq.w	#6,a0
0000DE72 60EE                       		bra.s	loc_DA24
0000DE74                            ; ===========================================================================
0000DE74                            
0000DE74                            loc_DA36:
0000DE74 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE78                            
0000DE78                            locret_DA3A:
0000DE78 4E75                       		rts	
0000DE7A                            ; ===========================================================================
0000DE7A                            
0000DE7A                            loc_DA3C:
0000DE7A 4A28 0004                  		tst.b	4(a0)
0000DE7E 6A00                       		bpl.s	OPL_MakeItem
0000DE80 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DE86 6700                       		beq.s	OPL_MakeItem
0000DE88 5C48                       		addq.w	#6,a0
0000DE8A 7000                       		moveq	#0,d0
0000DE8C 4E75                       		rts	
0000DE8E                            ; ===========================================================================
0000DE8E                            
0000DE8E                            OPL_MakeItem:
0000DE8E 6100 0000                  		bsr.w	SingleObjLoad
0000DE92 6600                       		bne.s	locret_DA8A
0000DE94 3358 0008                  		move.w	(a0)+,8(a1)
0000DE98 3018                       		move.w	(a0)+,d0
0000DE9A 3200                       		move.w	d0,d1
0000DE9C 0240 0FFF                  		andi.w	#$FFF,d0
0000DEA0 3340 000C                  		move.w	d0,$C(a1)
0000DEA4 E559                       		rol.w	#2,d1
0000DEA6 0201 0003                  		andi.b	#3,d1
0000DEAA 1341 0001                  		move.b	d1,1(a1)
0000DEAE 1341 0022                  		move.b	d1,$22(a1)
0000DEB2 1018                       		move.b	(a0)+,d0
0000DEB4 6A00                       		bpl.s	loc_DA80
0000DEB6 0200 007F                  		andi.b	#$7F,d0
0000DEBA 1342 0023                  		move.b	d2,$23(a1)
0000DEBE                            
0000DEBE                            loc_DA80:
0000DEBE 1280                       		move.b	d0,0(a1)
0000DEC0 1358 0028                  		move.b	(a0)+,$28(a1)
0000DEC4 7000                       		moveq	#0,d0
0000DEC6                            
0000DEC6                            locret_DA8A:
0000DEC6 4E75                       		rts	
0000DEC8                            ; ---------------------------------------------------------------------------
0000DEC8                            ; Single object	loading	subroutine
0000DEC8                            ; ---------------------------------------------------------------------------
0000DEC8                            
0000DEC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC8                            
0000DEC8                            
0000DEC8                            SingleObjLoad:
0000DEC8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DECC 303C 005F                  		move.w	#$5F,d0
0000DED0                            
0000DED0                            loc_DA94:
0000DED0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DED2 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DED4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DED8 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DEDC                            
0000DEDC                            locret_DAA0:
0000DEDC 4E75                       		rts	
0000DEDE                            ; End of function SingleObjLoad
0000DEDE                            
0000DEDE                            
0000DEDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEDE                            
0000DEDE                            
0000DEDE                            SingleObjLoad2:
0000DEDE 2248                       		movea.l	a0,a1
0000DEE0 303C F000                  		move.w	#-$1000,d0
0000DEE4 9048                       		sub.w	a0,d0
0000DEE6 EC48                       		lsr.w	#6,d0
0000DEE8 5340                       		subq.w	#1,d0
0000DEEA 6500                       		bcs.s	locret_DABC
0000DEEC                            
0000DEEC                            loc_DAB0:
0000DEEC 4A11                       		tst.b	(a1)
0000DEEE 6700                       		beq.s	locret_DABC
0000DEF0 43E9 0040                  		lea	$40(a1),a1
0000DEF4 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DEF8                            
0000DEF8                            locret_DABC:
0000DEF8 4E75                       		rts	
0000DEFA                            ; End of function SingleObjLoad2
0000DEFA                            
0000DEFA                            ; ===========================================================================
0000DEFA                            ; ---------------------------------------------------------------------------
0000DEFA                            ; Object 41 - springs
0000DEFA                            ; ---------------------------------------------------------------------------
0000DEFA                            
0000DEFA                            Obj41:					; XREF: Obj_Index
0000DEFA 7000                       		moveq	#0,d0
0000DEFC 1028 0024                  		move.b	$24(a0),d0
0000DF00 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DF04 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DF08 6100 FB38                  		bsr.w	DisplaySprite
0000DF0C 3028 0008                  		move.w	8(a0),d0
0000DF10 0240 FF80                  		andi.w	#$FF80,d0
0000DF14 3238 F700                  		move.w	($FFFFF700).w,d1
0000DF18 0441 0080                  		subi.w	#$80,d1
0000DF1C 0241 FF80                  		andi.w	#$FF80,d1
0000DF20 9041                       		sub.w	d1,d0
0000DF22 0C40 0280                  		cmpi.w	#$280,d0
0000DF26 6200 FB56                  		bhi.w	DeleteObject
0000DF2A 4E75                       		rts	
0000DF2C                            ; ===========================================================================
0000DF2C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DF2E 0000                       		dc.w Obj41_Up-Obj41_Index
0000DF30 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DF32 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DF34 0000                       		dc.w Obj41_LR-Obj41_Index
0000DF36 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DF38 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DF3A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DF3C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DF3E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DF40                            
0000DF40 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DF42 F600                       		dc.w -$A00		; power	of yellow spring
0000DF44                            ; ===========================================================================
0000DF44                            
0000DF44                            Obj41_Main:				; XREF: Obj41_Index
0000DF44 5428 0024                  		addq.b	#2,$24(a0)
0000DF48 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DF50 317C 0523 0002             		move.w	#$523,2(a0)
0000DF56 0028 0004 0001             		ori.b	#4,1(a0)
0000DF5C 117C 0010 0019             		move.b	#$10,$19(a0)
0000DF62 117C 0004 0018             		move.b	#4,$18(a0)
0000DF68 1028 0028                  		move.b	$28(a0),d0
0000DF6C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DF70 6700                       		beq.s	loc_DB54	; if not, branch
0000DF72 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DF78 117C 0001 001C             		move.b	#1,$1C(a0)
0000DF7E 117C 0003 001A             		move.b	#3,$1A(a0)
0000DF84 317C 0533 0002             		move.w	#$533,2(a0)
0000DF8A 117C 0008 0019             		move.b	#8,$19(a0)
0000DF90                            
0000DF90                            loc_DB54:
0000DF90 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DF94 6700                       		beq.s	loc_DB66	; if not, branch
0000DF96 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DF9C 08E8 0001 0022             		bset	#1,$22(a0)
0000DFA2                            
0000DFA2                            loc_DB66:
0000DFA2 0800 0001                  		btst	#1,d0
0000DFA6 6700                       		beq.s	loc_DB72
0000DFA8 08E8 0005 0002             		bset	#5,2(a0)
0000DFAE                            
0000DFAE                            loc_DB72:
0000DFAE 0240 000F                  		andi.w	#$F,d0
0000DFB2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DFB8 4E75                       		rts	
0000DFBA                            ; ===========================================================================
0000DFBA                            
0000DFBA                            Obj41_Up:				; XREF: Obj41_Index
0000DFBA 323C 001B                  		move.w	#$1B,d1
0000DFBE 343C 0008                  		move.w	#8,d2
0000DFC2 363C 0010                  		move.w	#$10,d3
0000DFC6 3828 0008                  		move.w	8(a0),d4
0000DFCA 6100 0000                  		bsr.w	SolidObject
0000DFCE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DFD2 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DFD4 4E75                       		rts	
0000DFD6                            ; ===========================================================================
0000DFD6                            
0000DFD6                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DFD6 5428 0024                  		addq.b	#2,$24(a0)
0000DFDA 5069 000C                  		addq.w	#8,$C(a1)
0000DFDE 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DFE4 08E9 0001 0022             		bset	#1,$22(a1)
0000DFEA 08A9 0003 0022             		bclr	#3,$22(a1)
0000DFF0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DFF6 137C 0002 0024             		move.b	#2,$24(a1)
0000DFFC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E002 4228 0025                  		clr.b	$25(a0)
0000E006 303C 00CC                  		move.w	#$CC,d0
0000E00A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E010                            
0000E010                            Obj41_AniUp:				; XREF: Obj41_Index
0000E010 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E016 6000 CADC                  		bra.w	AnimateSprite
0000E01A                            ; ===========================================================================
0000E01A                            
0000E01A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E01A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E020 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E024 4E75                       		rts	
0000E026                            ; ===========================================================================
0000E026                            
0000E026                            Obj41_LR:				; XREF: Obj41_Index
0000E026 323C 0013                  		move.w	#$13,d1
0000E02A 343C 000E                  		move.w	#$E,d2
0000E02E 363C 000F                  		move.w	#$F,d3
0000E032 3828 0008                  		move.w	8(a0),d4
0000E036 6100 0000                  		bsr.w	SolidObject
0000E03A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E040 6600                       		bne.s	loc_DC0C
0000E042 117C 0008 0024             		move.b	#8,$24(a0)
0000E048                            
0000E048                            loc_DC0C:
0000E048 0828 0005 0022             		btst	#5,$22(a0)
0000E04E 6600                       		bne.s	Obj41_BounceLR
0000E050 4E75                       		rts	
0000E052                            ; ===========================================================================
0000E052                            
0000E052                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E052 5428 0024                  		addq.b	#2,$24(a0)
0000E056 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E05C 5069 0008                  		addq.w	#8,8(a1)
0000E060 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E066 6600                       		bne.s	loc_DC36	; if yes, branch
0000E068 0469 0010 0008             		subi.w	#$10,8(a1)
0000E06E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E072                            
0000E072                            loc_DC36:
0000E072 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E078 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E07E 0869 0000 0022             		bchg	#0,$22(a1)
0000E084 0829 0002 0022             		btst	#2,$22(a1)
0000E08A 6600                       		bne.s	loc_DC56
0000E08C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E092                            
0000E092                            loc_DC56:
0000E092 08A8 0005 0022             		bclr	#5,$22(a0)
0000E098 08A9 0005 0022             		bclr	#5,$22(a1)
0000E09E 303C 00CC                  		move.w	#$CC,d0
0000E0A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E0A8                            
0000E0A8                            Obj41_AniLR:				; XREF: Obj41_Index
0000E0A8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E0AE 6000 CA44                  		bra.w	AnimateSprite
0000E0B2                            ; ===========================================================================
0000E0B2                            
0000E0B2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E0B2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E0B8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E0BC 4E75                       		rts	
0000E0BE                            ; ===========================================================================
0000E0BE                            
0000E0BE                            Obj41_Dwn:				; XREF: Obj41_Index
0000E0BE 323C 001B                  		move.w	#$1B,d1
0000E0C2 343C 0008                  		move.w	#8,d2
0000E0C6 363C 0010                  		move.w	#$10,d3
0000E0CA 3828 0008                  		move.w	8(a0),d4
0000E0CE 6100 0000                  		bsr.w	SolidObject
0000E0D2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E0D8 6600                       		bne.s	loc_DCA4
0000E0DA 117C 000E 0024             		move.b	#$E,$24(a0)
0000E0E0                            
0000E0E0                            loc_DCA4:
0000E0E0 4A28 0025                  		tst.b	$25(a0)
0000E0E4 6600                       		bne.s	locret_DCAE
0000E0E6 4A44                       		tst.w	d4
0000E0E8 6B00                       		bmi.s	Obj41_BounceDwn
0000E0EA                            
0000E0EA                            locret_DCAE:
0000E0EA 4E75                       		rts	
0000E0EC                            ; ===========================================================================
0000E0EC                            
0000E0EC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E0EC 5428 0024                  		addq.b	#2,$24(a0)
0000E0F0 5169 000C                  		subq.w	#8,$C(a1)
0000E0F4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E0FA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E0FE 08E9 0001 0022             		bset	#1,$22(a1)
0000E104 08A9 0003 0022             		bclr	#3,$22(a1)
0000E10A 137C 0002 0024             		move.b	#2,$24(a1)
0000E110 08A8 0003 0022             		bclr	#3,$22(a0)
0000E116 4228 0025                  		clr.b	$25(a0)
0000E11A 303C 00CC                  		move.w	#$CC,d0
0000E11E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E124                            
0000E124                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E124 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E12A 6000 C9C8                  		bra.w	AnimateSprite
0000E12E                            ; ===========================================================================
0000E12E                            
0000E12E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E12E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E134 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E138 4E75                       		rts	
0000E13A                            ; ===========================================================================
0000E13A                            Ani_obj41:
0000E13A                            	include "_anim\obj41.asm"
0000E13A                            ; ---------------------------------------------------------------------------
0000E13A                            ; Animation script - springs
0000E13A                            ; ---------------------------------------------------------------------------
0000E13A 0000                       		dc.w byte_DD02-Ani_obj41
0000E13C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E13E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E14A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E156                            		even
0000E156                            		even
0000E156                            
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            ; Sprite mappings - springs
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            Map_obj41:
0000E156                            	include "_maps\obj41.asm"
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            ; Sprite mappings - springs
0000E156                            ; ---------------------------------------------------------------------------
0000E156 0000                       		dc.w byte_DD26-Map_obj41
0000E158 0000                       		dc.w byte_DD31-Map_obj41
0000E15A 0000                       		dc.w byte_DD37-Map_obj41
0000E15C 0000                       		dc.w byte_DD47-Map_obj41
0000E15E 0000                       		dc.w byte_DD4D-Map_obj41
0000E160 0000                       		dc.w byte_DD53-Map_obj41
0000E162 02                         byte_DD26:	dc.b 2
0000E163 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E168 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E16D 01                         byte_DD31:	dc.b 1
0000E16E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E173 03                         byte_DD37:	dc.b 3
0000E174 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E179 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E17E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E183 01                         byte_DD47:	dc.b 1
0000E184 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E189 01                         byte_DD4D:	dc.b 1
0000E18A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E18F 04                         byte_DD53:	dc.b 4
0000E190 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E195 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E19A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E19F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E1A4                            		even
0000E1A4                            		even
0000E1A4                            
0000E1A4                            ; ===========================================================================
0000E1A4                            ; ---------------------------------------------------------------------------
0000E1A4                            ; Object 42 - Newtron enemy (GHZ)
0000E1A4                            ; ---------------------------------------------------------------------------
0000E1A4                            
0000E1A4                            Obj42:					; XREF: Obj_Index
0000E1A4 7000                       		moveq	#0,d0
0000E1A6 1028 0024                  		move.b	$24(a0),d0
0000E1AA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E1AE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E1B2                            ; ===========================================================================
0000E1B2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E1B4 0000                       		dc.w Obj42_Action-Obj42_Index
0000E1B6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E1B8                            ; ===========================================================================
0000E1B8                            
0000E1B8                            Obj42_Main:				; XREF: Obj42_Index
0000E1B8 5428 0024                  		addq.b	#2,$24(a0)
0000E1BC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E1C4 317C 049B 0002             		move.w	#$49B,2(a0)
0000E1CA 117C 0004 0001             		move.b	#4,1(a0)
0000E1D0 117C 0004 0018             		move.b	#4,$18(a0)
0000E1D6 117C 0014 0019             		move.b	#$14,$19(a0)
0000E1DC 117C 0010 0016             		move.b	#$10,$16(a0)
0000E1E2 117C 0008 0017             		move.b	#8,$17(a0)
0000E1E8                            
0000E1E8                            Obj42_Action:				; XREF: Obj42_Index
0000E1E8 7000                       		moveq	#0,d0
0000E1EA 1028 0025                  		move.b	$25(a0),d0
0000E1EE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E1F2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E1F6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E1FC 6100 C8F6                  		bsr.w	AnimateSprite
0000E200 6000 0000                  		bra.w	MarkObjGone
0000E204                            ; ===========================================================================
0000E204 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E206 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E208 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E20A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E20C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E20E                            ; ===========================================================================
0000E20E                            
0000E20E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E20E 08E8 0000 0022             		bset	#0,$22(a0)
0000E214 3038 D008                  		move.w	($FFFFD008).w,d0
0000E218 9068 0008                  		sub.w	8(a0),d0
0000E21C 6400                       		bcc.s	loc_DDEA
0000E21E 4440                       		neg.w	d0
0000E220 08A8 0000 0022             		bclr	#0,$22(a0)
0000E226                            
0000E226                            loc_DDEA:
0000E226 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E22A 6400                       		bcc.s	locret_DE12	; if not, branch
0000E22C 5428 0025                  		addq.b	#2,$25(a0)
0000E230 117C 0001 001C             		move.b	#1,$1C(a0)
0000E236 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E23A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E23C 317C 249B 0002             		move.w	#$249B,2(a0)
0000E242 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E248 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E24E                            
0000E24E                            locret_DE12:
0000E24E 4E75                       		rts	
0000E250                            ; ===========================================================================
0000E250                            
0000E250                            Obj42_Type00:				; XREF: Obj42_Index2
0000E250 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E256 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E258 08E8 0000 0022             		bset	#0,$22(a0)
0000E25E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E262 9068 0008                  		sub.w	8(a0),d0
0000E266 6400                       		bcc.s	locret_DE32
0000E268 08A8 0000 0022             		bclr	#0,$22(a0)
0000E26E                            
0000E26E                            locret_DE32:
0000E26E 4E75                       		rts	
0000E270                            ; ===========================================================================
0000E270                            
0000E270                            Obj42_Fall:				; XREF: Obj42_Type00
0000E270 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E276 6600                       		bne.s	loc_DE42
0000E278 117C 000C 0020             		move.b	#$C,$20(a0)
0000E27E                            
0000E27E                            loc_DE42:
0000E27E 6100 F770                  		bsr.w	ObjectFall
0000E282 6100 0000                  		bsr.w	ObjHitFloor
0000E286 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E288 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E28A D368 000C                  		add.w	d1,$C(a0)
0000E28E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E294 5428 0025                  		addq.b	#2,$25(a0)
0000E298 117C 0002 001C             		move.b	#2,$1C(a0)
0000E29E 0828 0005 0002             		btst	#5,2(a0)
0000E2A4 6700                       		beq.s	Obj42_Move
0000E2A6 5228 001C                  		addq.b	#1,$1C(a0)
0000E2AA                            
0000E2AA                            Obj42_Move:
0000E2AA 117C 000D 0020             		move.b	#$D,$20(a0)
0000E2B0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E2B6 0828 0000 0022             		btst	#0,$22(a0)
0000E2BC 6600                       		bne.s	locret_DE86
0000E2BE 4468 0010                  		neg.w	$10(a0)
0000E2C2                            
0000E2C2                            locret_DE86:
0000E2C2 4E75                       		rts	
0000E2C4                            ; ===========================================================================
0000E2C4                            
0000E2C4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E2C4 6100 F756                  		bsr.w	SpeedToPos
0000E2C8 6100 0000                  		bsr.w	ObjHitFloor
0000E2CC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E2D0 6D00                       		blt.s	loc_DEA2
0000E2D2 0C41 000C                  		cmpi.w	#$C,d1
0000E2D6 6C00                       		bge.s	loc_DEA2
0000E2D8 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E2DC 4E75                       		rts	
0000E2DE                            ; ===========================================================================
0000E2DE                            
0000E2DE                            loc_DEA2:
0000E2DE 5428 0025                  		addq.b	#2,$25(a0)
0000E2E2 4E75                       		rts	
0000E2E4                            ; ===========================================================================
0000E2E4                            
0000E2E4                            Obj42_Speed:				; XREF: Obj42_Index2
0000E2E4 6100 F736                  		bsr.w	SpeedToPos
0000E2E8 4E75                       		rts	
0000E2EA                            ; ===========================================================================
0000E2EA                            
0000E2EA                            Obj42_Type01:				; XREF: Obj42_Index2
0000E2EA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E2F0 6600                       		bne.s	Obj42_FireMissile
0000E2F2 117C 000C 0020             		move.b	#$C,$20(a0)
0000E2F8                            
0000E2F8                            Obj42_FireMissile:
0000E2F8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E2FE 6600                       		bne.s	locret_DF14
0000E300 4A28 0032                  		tst.b	$32(a0)
0000E304 6600                       		bne.s	locret_DF14
0000E306 117C 0001 0032             		move.b	#1,$32(a0)
0000E30C 6100 FBBA                  		bsr.w	SingleObjLoad
0000E310 6600                       		bne.s	locret_DF14
0000E312 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E316 3368 0008 0008             		move.w	8(a0),8(a1)
0000E31C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E322 5169 000C                  		subq.w	#8,$C(a1)
0000E326 337C 0200 0010             		move.w	#$200,$10(a1)
0000E32C 303C 0014                  		move.w	#$14,d0
0000E330 0828 0000 0022             		btst	#0,$22(a0)
0000E336 6600                       		bne.s	loc_DF04
0000E338 4440                       		neg.w	d0
0000E33A 4469 0010                  		neg.w	$10(a1)
0000E33E                            
0000E33E                            loc_DF04:
0000E33E D169 0008                  		add.w	d0,8(a1)
0000E342 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E348 137C 0001 0028             		move.b	#1,$28(a1)
0000E34E                            
0000E34E                            locret_DF14:
0000E34E 4E75                       		rts	
0000E350                            ; ===========================================================================
0000E350                            
0000E350                            Obj42_Delete:				; XREF: Obj42_Index
0000E350 6000 F72C                  		bra.w	DeleteObject
0000E354                            ; ===========================================================================
0000E354                            Ani_obj42:
0000E354                            	include "_anim\obj42.asm"
0000E354                            ; ---------------------------------------------------------------------------
0000E354                            ; Animation script - Newtron enemy
0000E354                            ; ---------------------------------------------------------------------------
0000E354 0000                       		dc.w byte_DF24-Ani_obj42
0000E356 0000                       		dc.w byte_DF28-Ani_obj42
0000E358 0000                       		dc.w byte_DF30-Ani_obj42
0000E35A 0000                       		dc.w byte_DF34-Ani_obj42
0000E35C 0000                       		dc.w byte_DF38-Ani_obj42
0000E35E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E362 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E36A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E36E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E372 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E37C                            		even
0000E37C                            		even
0000E37C                            
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            Map_obj42:
0000E37C                            	include "_maps\obj42.asm"
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E380 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E384 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E388 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E38C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E390 0000                       		dc.w byte_DFF8-Map_obj42
0000E392 03                         byte_DF58:	dc.b 3
0000E393 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E398 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E39D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E3A2 03                         byte_DF68:	dc.b 3
0000E3A3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E3A8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E3AD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E3B2 03                         byte_DF78:	dc.b 3
0000E3B3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E3B8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E3BD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E3C2 04                         byte_DF88:	dc.b 4
0000E3C3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E3C8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E3CD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E3D2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E3D7 03                         byte_DF9D:	dc.b 3
0000E3D8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E3DD FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E3E2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E3E7 02                         byte_DFAD:	dc.b 2
0000E3E8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E3ED F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E3F2 03                         byte_DFB8:	dc.b 3
0000E3F3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E3F8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E3FD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E402 03                         byte_DFC8:	dc.b 3
0000E403 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E408 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E40D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E412 03                         byte_DFD8:	dc.b 3
0000E413 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E418 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E41D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E422 03                         byte_DFE8:	dc.b 3
0000E423 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E428 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E42D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E432 00                         byte_DFF8:	dc.b 0
0000E434 00                         		even
0000E434 00                         		even
0000E434                            
0000E434                            ; ===========================================================================
0000E434                            ; ---------------------------------------------------------------------------
0000E434                            ; Object 43 - Roller enemy (SYZ)
0000E434                            ; ---------------------------------------------------------------------------
0000E434                            
0000E434                            Obj43:					; XREF: Obj_Index
0000E434 7000                       		moveq	#0,d0
0000E436 1028 0024                  		move.b	$24(a0),d0
0000E43A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E43E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E442                            ; ===========================================================================
0000E442 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E444 0000                       		dc.w Obj43_Action-Obj43_Index
0000E446                            ; ===========================================================================
0000E446                            
0000E446                            Obj43_Main:				; XREF: Obj43_Index
0000E446 117C 000E 0016             		move.b	#$E,$16(a0)
0000E44C 117C 0008 0017             		move.b	#8,$17(a0)
0000E452 6100 F59C                  		bsr.w	ObjectFall
0000E456 6100 0000                  		bsr.w	ObjHitFloor
0000E45A 4A41                       		tst.w	d1
0000E45C 6A00                       		bpl.s	locret_E052
0000E45E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E462 317C 0000 0012             		move.w	#0,$12(a0)
0000E468 5428 0024                  		addq.b	#2,$24(a0)
0000E46C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E474 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E47A 117C 0004 0001             		move.b	#4,1(a0)
0000E480 117C 0004 0018             		move.b	#4,$18(a0)
0000E486 117C 0010 0019             		move.b	#$10,$19(a0)
0000E48C                            
0000E48C                            locret_E052:
0000E48C 4E75                       		rts	
0000E48E                            ; ===========================================================================
0000E48E                            
0000E48E                            Obj43_Action:				; XREF: Obj43_Index
0000E48E 7000                       		moveq	#0,d0
0000E490 1028 0025                  		move.b	$25(a0),d0
0000E494 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E498 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E49C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E4A2 6100 C650                  		bsr.w	AnimateSprite
0000E4A6 3028 0008                  		move.w	8(a0),d0
0000E4AA 0240 FF80                  		andi.w	#$FF80,d0
0000E4AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4B2 0441 0080                  		subi.w	#$80,d1
0000E4B6 0241 FF80                  		andi.w	#$FF80,d1
0000E4BA 9041                       		sub.w	d1,d0
0000E4BC 0C40 0280                  		cmpi.w	#$280,d0
0000E4C0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E4C4 6000 F57C                  		bra.w	DisplaySprite
0000E4C8                            ; ===========================================================================
0000E4C8                            
0000E4C8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E4C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E4CC 7000                       		moveq	#0,d0
0000E4CE 1028 0023                  		move.b	$23(a0),d0
0000E4D2 6700                       		beq.s	Obj43_Delete
0000E4D4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E4DA                            
0000E4DA                            Obj43_Delete:
0000E4DA 6000 F5A2                  		bra.w	DeleteObject
0000E4DE                            ; ===========================================================================
0000E4DE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E4E0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E4E2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E4E4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E4E6                            ; ===========================================================================
0000E4E6                            
0000E4E6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E4E6 3038 D008                  		move.w	($FFFFD008).w,d0
0000E4EA 0440 0100                  		subi.w	#$100,d0
0000E4EE 6500                       		bcs.s	loc_E0D2
0000E4F0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E4F4 6500                       		bcs.s	loc_E0D2
0000E4F6 5828 0025                  		addq.b	#4,$25(a0)
0000E4FA 117C 0002 001C             		move.b	#2,$1C(a0)
0000E500 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E506 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E50C                            
0000E50C                            loc_E0D2:
0000E50C 588F                       		addq.l	#4,sp
0000E50E 4E75                       		rts	
0000E510                            ; ===========================================================================
0000E510                            
0000E510                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E510 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E516 6700                       		beq.s	loc_E0F8
0000E518 5368 0030                  		subq.w	#1,$30(a0)
0000E51C 6A00                       		bpl.s	locret_E0F6
0000E51E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E524 317C 0700 0010             		move.w	#$700,$10(a0)
0000E52A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E530                            
0000E530                            locret_E0F6:
0000E530 4E75                       		rts	
0000E532                            ; ===========================================================================
0000E532                            
0000E532                            loc_E0F8:
0000E532 5428 0025                  		addq.b	#2,$25(a0)
0000E536 4E75                       		rts	
0000E538                            ; ===========================================================================
0000E538                            
0000E538                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E538 6100 0000                  		bsr.w	Obj43_Stop
0000E53C 6100 F4DE                  		bsr.w	SpeedToPos
0000E540 6100 0000                  		bsr.w	ObjHitFloor
0000E544 0C41 FFF8                  		cmpi.w	#-8,d1
0000E548 6D00                       		blt.s	Obj43_Jump
0000E54A 0C41 000C                  		cmpi.w	#$C,d1
0000E54E 6C00                       		bge.s	Obj43_Jump
0000E550 D368 000C                  		add.w	d1,$C(a0)
0000E554 4E75                       		rts	
0000E556                            ; ===========================================================================
0000E556                            
0000E556                            Obj43_Jump:
0000E556 5428 0025                  		addq.b	#2,$25(a0)
0000E55A 08E8 0000 0032             		bset	#0,$32(a0)
0000E560 6700                       		beq.s	locret_E12E
0000E562 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E568                            
0000E568                            locret_E12E:
0000E568 4E75                       		rts	
0000E56A                            ; ===========================================================================
0000E56A                            
0000E56A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E56A 6100 F484                  		bsr.w	ObjectFall
0000E56E 4A68 0012                  		tst.w	$12(a0)
0000E572 6B00                       		bmi.s	locret_E150
0000E574 6100 0000                  		bsr.w	ObjHitFloor
0000E578 4A41                       		tst.w	d1
0000E57A 6A00                       		bpl.s	locret_E150
0000E57C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E580 5528 0025                  		subq.b	#2,$25(a0)
0000E584 317C 0000 0012             		move.w	#0,$12(a0)
0000E58A                            
0000E58A                            locret_E150:
0000E58A 4E75                       		rts	
0000E58C                            
0000E58C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E58C                            
0000E58C                            
0000E58C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E58C 4A28 0032                  		tst.b	$32(a0)
0000E590 6B00                       		bmi.s	locret_E188
0000E592 3038 D008                  		move.w	($FFFFD008).w,d0
0000E596 0440 0030                  		subi.w	#$30,d0
0000E59A 9068 0008                  		sub.w	8(a0),d0
0000E59E 6400                       		bcc.s	locret_E188
0000E5A0 117C 0000 001C             		move.b	#0,$1C(a0)
0000E5A6 117C 000E 0020             		move.b	#$E,$20(a0)
0000E5AC 4268 0010                  		clr.w	$10(a0)
0000E5B0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E5B6 117C 0002 0025             		move.b	#2,$25(a0)
0000E5BC 08E8 0007 0032             		bset	#7,$32(a0)
0000E5C2                            
0000E5C2                            locret_E188:
0000E5C2 4E75                       		rts	
0000E5C4                            ; End of function Obj43_Stop
0000E5C4                            
0000E5C4                            ; ===========================================================================
0000E5C4                            Ani_obj43:
0000E5C4                            	include "_anim\obj43.asm"
0000E5C4                            ; ---------------------------------------------------------------------------
0000E5C4                            ; Animation script - Roller enemy
0000E5C4                            ; ---------------------------------------------------------------------------
0000E5C4 0000                       		dc.w byte_E190-Ani_obj43
0000E5C6 0000                       		dc.w byte_E196-Ani_obj43
0000E5C8 0000                       		dc.w byte_E19C-Ani_obj43
0000E5CA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E5D0 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E5D6 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E5DC 00                         		even
0000E5DC 00                         		even
0000E5DC                            
0000E5DC                            ; ---------------------------------------------------------------------------
0000E5DC                            ; Sprite mappings - Roller enemy (SYZ)
0000E5DC                            ; ---------------------------------------------------------------------------
0000E5DC                            Map_obj43:
0000E5DC                            	include "_maps\obj43.asm"
0000E5DC                            ; ---------------------------------------------------------------------------
0000E5DC                            ; Sprite mappings - Roller enemy (SYZ)
0000E5DC                            ; ---------------------------------------------------------------------------
0000E5DC 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E5E0 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E5E4 0000                       		dc.w byte_E1CE-Map_obj43
0000E5E6 02                         byte_E1AC:	dc.b 2
0000E5E7 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E5EC F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E5F1 02                         byte_E1B7:	dc.b 2
0000E5F2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E5F7 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E5FC 01                         byte_E1C2:	dc.b 1
0000E5FD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E602 01                         byte_E1C8:	dc.b 1
0000E603 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E608 01                         byte_E1CE:	dc.b 1
0000E609 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E60E                            		even
0000E60E                            		even
0000E60E                            
0000E60E                            ; ===========================================================================
0000E60E                            ; ---------------------------------------------------------------------------
0000E60E                            ; Object 44 - walls (GHZ)
0000E60E                            ; ---------------------------------------------------------------------------
0000E60E                            
0000E60E                            Obj44:					; XREF: Obj_Index
0000E60E 7000                       		moveq	#0,d0
0000E610 1028 0024                  		move.b	$24(a0),d0
0000E614 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E618 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E61C                            ; ===========================================================================
0000E61C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E61E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E620 0000                       		dc.w Obj44_Display-Obj44_Index
0000E622                            ; ===========================================================================
0000E622                            
0000E622                            Obj44_Main:				; XREF: Obj44_Index
0000E622 5428 0024                  		addq.b	#2,$24(a0)
0000E626 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E62E 317C 434C 0002             		move.w	#$434C,2(a0)
0000E634 0028 0004 0001             		ori.b	#4,1(a0)
0000E63A 117C 0008 0019             		move.b	#8,$19(a0)
0000E640 117C 0006 0018             		move.b	#6,$18(a0)
0000E646 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E64C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E652 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E654 5428 0024                  		addq.b	#2,$24(a0)
0000E658 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E65A                            ; ===========================================================================
0000E65A                            
0000E65A                            Obj44_Solid:				; XREF: Obj44_Index
0000E65A 323C 0013                  		move.w	#$13,d1
0000E65E 343C 0028                  		move.w	#$28,d2
0000E662 6100 A7A0                  		bsr.w	Obj44_SolidWall
0000E666                            
0000E666                            Obj44_Display:				; XREF: Obj44_Index
0000E666 6100 F3DA                  		bsr.w	DisplaySprite
0000E66A 3028 0008                  		move.w	8(a0),d0
0000E66E 0240 FF80                  		andi.w	#$FF80,d0
0000E672 3238 F700                  		move.w	($FFFFF700).w,d1
0000E676 0441 0080                  		subi.w	#$80,d1
0000E67A 0241 FF80                  		andi.w	#$FF80,d1
0000E67E 9041                       		sub.w	d1,d0
0000E680 0C40 0280                  		cmpi.w	#$280,d0
0000E684 6200 F3F8                  		bhi.w	DeleteObject
0000E688 4E75                       		rts	
0000E68A                            ; ===========================================================================
0000E68A                            ; ---------------------------------------------------------------------------
0000E68A                            ; Sprite mappings - walls (GHZ)
0000E68A                            ; ---------------------------------------------------------------------------
0000E68A                            Map_obj44:
0000E68A                            	include "_maps\obj44.asm"
0000E68A                            ; ---------------------------------------------------------------------------
0000E68A                            ; Sprite mappings - walls (GHZ)
0000E68A                            ; ---------------------------------------------------------------------------
0000E68A 0000                       		dc.w byte_E256-Map_obj44
0000E68C 0000                       		dc.w byte_E26B-Map_obj44
0000E68E 0000                       		dc.w byte_E280-Map_obj44
0000E690 04                         byte_E256:	dc.b 4
0000E691 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E696 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E69B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E6A0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E6A5 04                         byte_E26B:	dc.b 4
0000E6A6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E6AB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E6B0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E6B5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E6BA 04                         byte_E280:	dc.b 4
0000E6BB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E6C0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E6C5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E6CA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E6D0 00                         		even
0000E6D0 00                         		even
0000E6D0                            
0000E6D0                            ; ===========================================================================
0000E6D0                            ; ---------------------------------------------------------------------------
0000E6D0                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E6D0                            ; ---------------------------------------------------------------------------
0000E6D0                            
0000E6D0                            Obj13:					; XREF: Obj_Index
0000E6D0 7000                       		moveq	#0,d0
0000E6D2 1028 0024                  		move.b	$24(a0),d0
0000E6D6 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E6DA 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E6DE 6000 0000                  		bra.w	Obj14_ChkDel
0000E6E2                            ; ===========================================================================
0000E6E2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E6E4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E6E6                            ; ---------------------------------------------------------------------------
0000E6E6                            ;
0000E6E6                            ; Lava ball production rates
0000E6E6                            ;
0000E6E6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E6EC                            ; ===========================================================================
0000E6EC                            
0000E6EC                            Obj13_Main:				; XREF: Obj13_Index
0000E6EC 5428 0024                  		addq.b	#2,$24(a0)
0000E6F0 1028 0028                  		move.b	$28(a0),d0
0000E6F4 E848                       		lsr.w	#4,d0
0000E6F6 0240 000F                  		andi.w	#$F,d0
0000E6FA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E700 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E706 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E70C                            
0000E70C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E70C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E710 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E712 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E718 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E71C 6600                       		bne.s	locret_E302
0000E71E 6100 F7A8                  		bsr.w	SingleObjLoad
0000E722 6600                       		bne.s	locret_E302
0000E724 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E728 3368 0008 0008             		move.w	8(a0),8(a1)
0000E72E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E734 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E73A                            
0000E73A                            locret_E302:
0000E73A 4E75                       		rts	
0000E73C                            ; ===========================================================================
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C                            ; Object 14 - lava balls (MZ, SLZ)
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C                            
0000E73C                            Obj14:					; XREF: Obj_Index
0000E73C 7000                       		moveq	#0,d0
0000E73E 1028 0024                  		move.b	$24(a0),d0
0000E742 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E746 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E74A 6000 F2F6                  		bra.w	DisplaySprite
0000E74E                            ; ===========================================================================
0000E74E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E750 0000                       		dc.w Obj14_Action-Obj14_Index
0000E752 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E754                            
0000E754 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E75E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E766                            ; ===========================================================================
0000E766                            
0000E766                            Obj14_Main:				; XREF: Obj14_Index
0000E766 5428 0024                  		addq.b	#2,$24(a0)
0000E76A 117C 0008 0016             		move.b	#8,$16(a0)
0000E770 117C 0008 0017             		move.b	#8,$17(a0)
0000E776 217C 0000 B706 0004        		move.l	#Map_obj14,4(a0)
0000E77E 317C 0345 0002             		move.w	#$345,2(a0)
0000E784 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E78A 6600                       		bne.s	loc_E35A
0000E78C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E792                            
0000E792                            loc_E35A:
0000E792 117C 0004 0001             		move.b	#4,1(a0)
0000E798 117C 0003 0018             		move.b	#3,$18(a0)
0000E79E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E7A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E7AA 4A28 0029                  		tst.b	$29(a0)
0000E7AE 6700                       		beq.s	Obj14_SetSpeed
0000E7B0 5428 0018                  		addq.b	#2,$18(a0)
0000E7B4                            
0000E7B4                            Obj14_SetSpeed:
0000E7B4 7000                       		moveq	#0,d0
0000E7B6 1028 0028                  		move.b	$28(a0),d0
0000E7BA D040                       		add.w	d0,d0
0000E7BC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E7C2 117C 0008 0019             		move.b	#8,$19(a0)
0000E7C8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E7CE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E7D0 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7D6 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E7DC 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E7E2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E7E8                            
0000E7E8                            Obj14_PlaySnd:
0000E7E8 303C 00AE                  		move.w	#$AE,d0
0000E7EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E7F2                            
0000E7F2                            Obj14_Action:				; XREF: Obj14_Index
0000E7F2 7000                       		moveq	#0,d0
0000E7F4 1028 0028                  		move.b	$28(a0),d0
0000E7F8 D040                       		add.w	d0,d0
0000E7FA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E7FE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E802 6100 F218                  		bsr.w	SpeedToPos
0000E806 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E80C 6100 C2E6                  		bsr.w	AnimateSprite
0000E810                            
0000E810                            Obj14_ChkDel:				; XREF: Obj13
0000E810 3028 0008                  		move.w	8(a0),d0
0000E814 0240 FF80                  		andi.w	#$FF80,d0
0000E818 3238 F700                  		move.w	($FFFFF700).w,d1
0000E81C 0441 0080                  		subi.w	#$80,d1
0000E820 0241 FF80                  		andi.w	#$FF80,d1
0000E824 9041                       		sub.w	d1,d0
0000E826 0C40 0280                  		cmpi.w	#$280,d0
0000E82A 6200 F252                  		bhi.w	DeleteObject
0000E82E 4E75                       		rts	
0000E830                            ; ===========================================================================
0000E830 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E834 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E838 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E83C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E840 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E842                            ; ===========================================================================
0000E842                            ; lavaball types 00-03 fly up and fall back down
0000E842                            
0000E842                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E842 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E848 3028 0030                  		move.w	$30(a0),d0
0000E84C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E850 6400                       		bcc.s	loc_E41E	; if not, branch
0000E852 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E856                            
0000E856                            loc_E41E:
0000E856 08A8 0001 0022             		bclr	#1,$22(a0)
0000E85C 4A68 0012                  		tst.w	$12(a0)
0000E860 6A00                       		bpl.s	locret_E430
0000E862 08E8 0001 0022             		bset	#1,$22(a0)
0000E868                            
0000E868                            locret_E430:
0000E868 4E75                       		rts	
0000E86A                            ; ===========================================================================
0000E86A                            ; lavaball type	04 flies up until it hits the ceiling
0000E86A                            
0000E86A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E86A 08E8 0001 0022             		bset	#1,$22(a0)
0000E870 6100 0000                  		bsr.w	ObjHitCeiling
0000E874 4A41                       		tst.w	d1
0000E876 6A00                       		bpl.s	locret_E452
0000E878 117C 0008 0028             		move.b	#8,$28(a0)
0000E87E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E884 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E88A                            
0000E88A                            locret_E452:
0000E88A 4E75                       		rts	
0000E88C                            ; ===========================================================================
0000E88C                            ; lavaball type	05 falls down until it hits the	floor
0000E88C                            
0000E88C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E88C 08A8 0001 0022             		bclr	#1,$22(a0)
0000E892 6100 0000                  		bsr.w	ObjHitFloor
0000E896 4A41                       		tst.w	d1
0000E898 6A00                       		bpl.s	locret_E474
0000E89A 117C 0008 0028             		move.b	#8,$28(a0)
0000E8A0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8A6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E8AC                            
0000E8AC                            locret_E474:
0000E8AC 4E75                       		rts	
0000E8AE                            ; ===========================================================================
0000E8AE                            ; lavaball types 06-07 move sideways
0000E8AE                            
0000E8AE                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E8AE 08E8 0000 0022             		bset	#0,$22(a0)
0000E8B4 76F8                       		moveq	#-8,d3
0000E8B6 6100 0000                  		bsr.w	ObjHitWallLeft
0000E8BA 4A41                       		tst.w	d1
0000E8BC 6A00                       		bpl.s	locret_E498
0000E8BE 117C 0008 0028             		move.b	#8,$28(a0)
0000E8C4 117C 0003 001C             		move.b	#3,$1C(a0)
0000E8CA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E8D0                            
0000E8D0                            locret_E498:
0000E8D0 4E75                       		rts	
0000E8D2                            ; ===========================================================================
0000E8D2                            
0000E8D2                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E8D2 08A8 0000 0022             		bclr	#0,$22(a0)
0000E8D8 7608                       		moveq	#8,d3
0000E8DA 6100 0000                  		bsr.w	ObjHitWallRight
0000E8DE 4A41                       		tst.w	d1
0000E8E0 6A00                       		bpl.s	locret_E4BC
0000E8E2 117C 0008 0028             		move.b	#8,$28(a0)
0000E8E8 117C 0003 001C             		move.b	#3,$1C(a0)
0000E8EE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E8F4                            
0000E8F4                            locret_E4BC:
0000E8F4 4E75                       		rts	
0000E8F6                            ; ===========================================================================
0000E8F6                            
0000E8F6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E8F6 4E75                       		rts	
0000E8F8                            ; ===========================================================================
0000E8F8                            
0000E8F8                            Obj14_Delete:				; XREF: Obj14_Index
0000E8F8 6000 F184                  		bra.w	DeleteObject
0000E8FC                            ; ===========================================================================
0000E8FC                            Ani_obj14:
0000E8FC                            	include "_anim\obj14.asm"
0000E8FC                            ; ---------------------------------------------------------------------------
0000E8FC                            ; Animation script - lava balls
0000E8FC                            ; ---------------------------------------------------------------------------
0000E8FC 0000                       		dc.w byte_E4CC-Ani_obj14
0000E8FE 0000                       		dc.w byte_E4D2-Ani_obj14
0000E900 0000                       		dc.w byte_E4D6-Ani_obj14
0000E902 0000                       		dc.w byte_E4DC-Ani_obj14
0000E904 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E90A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E90E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E914 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E918                            		even
0000E918                            		even
0000E918                            
0000E918                            ; ===========================================================================
0000E918                            ; ---------------------------------------------------------------------------
0000E918                            ; Object 6D - flame thrower (SBZ)
0000E918                            ; ---------------------------------------------------------------------------
0000E918                            
0000E918                            Obj6D:					; XREF: Obj_Index
0000E918 7000                       		moveq	#0,d0
0000E91A 1028 0024                  		move.b	$24(a0),d0
0000E91E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E922 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E926                            ; ===========================================================================
0000E926 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E928 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E92A                            ; ===========================================================================
0000E92A                            
0000E92A                            Obj6D_Main:				; XREF: Obj6D_Index
0000E92A 5428 0024                  		addq.b	#2,$24(a0)
0000E92E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E936 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E93C 0028 0004 0001             		ori.b	#4,1(a0)
0000E942 117C 0001 0018             		move.b	#1,$18(a0)
0000E948 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E94E 117C 000C 0019             		move.b	#$C,$19(a0)
0000E954 1028 0028                  		move.b	$28(a0),d0
0000E958 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E95C D040                       		add.w	d0,d0		; multiply by 2
0000E95E 3140 0030                  		move.w	d0,$30(a0)
0000E962 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E966 1028 0028                  		move.b	$28(a0),d0
0000E96A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E96E EB48                       		lsl.w	#5,d0		; multiply by $20
0000E970 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E974 117C 000A 0036             		move.b	#$A,$36(a0)
0000E97A 0828 0001 0022             		btst	#1,$22(a0)
0000E980 6700                       		beq.s	Obj6D_Action
0000E982 117C 0002 001C             		move.b	#2,$1C(a0)
0000E988 117C 0015 0036             		move.b	#$15,$36(a0)
0000E98E                            
0000E98E                            Obj6D_Action:				; XREF: Obj6D_Index
0000E98E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E992 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E994 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E99A 0868 0000 001C             		bchg	#0,$1C(a0)
0000E9A0 6700                       		beq.s	loc_E57A
0000E9A2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E9A8 303C 00B3                  		move.w	#$B3,d0
0000E9AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000E9B2                            
0000E9B2                            loc_E57A:
0000E9B2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E9B8 6100 C13A                  		bsr.w	AnimateSprite
0000E9BC 117C 0000 0020             		move.b	#0,$20(a0)
0000E9C2 1028 0036                  		move.b	$36(a0),d0
0000E9C6 B028 001A                  		cmp.b	$1A(a0),d0
0000E9CA 6600                       		bne.s	Obj6D_ChkDel
0000E9CC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E9D2                            
0000E9D2                            Obj6D_ChkDel:
0000E9D2 3028 0008                  		move.w	8(a0),d0
0000E9D6 0240 FF80                  		andi.w	#$FF80,d0
0000E9DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9DE 0441 0080                  		subi.w	#$80,d1
0000E9E2 0241 FF80                  		andi.w	#$FF80,d1
0000E9E6 9041                       		sub.w	d1,d0
0000E9E8 0C40 0280                  		cmpi.w	#$280,d0
0000E9EC 6200 F090                  		bhi.w	DeleteObject
0000E9F0 6000 F050                  		bra.w	DisplaySprite
0000E9F4                            ; ===========================================================================
0000E9F4                            Ani_obj6D:
0000E9F4                            	include "_anim\obj6D.asm"
0000E9F4                            ; ---------------------------------------------------------------------------
0000E9F4                            ; Animation script - flamethrower (SBZ)
0000E9F4                            ; ---------------------------------------------------------------------------
0000E9F4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E9F6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E9F8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E9FA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E9FC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EA0A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EA14 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EA22 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EA2C                            		even
0000EA2C                            		even
0000EA2C                            
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Sprite mappings - flame thrower (SBZ)
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            Map_obj6D:
0000EA2C                            	include "_maps\obj6D.asm"
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Sprite mappings - flame thrower (SBZ)
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EA30 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EA34 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EA38 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EA3C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EA40 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EA44 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EA48 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EA4C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EA50 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EA54 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EA58 01                         byte_E620:	dc.b 1
0000EA59 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA5E 02                         byte_E626:	dc.b 2
0000EA5F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EA64 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA69 02                         byte_E631:	dc.b 2
0000EA6A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EA6F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA74 03                         byte_E63C:	dc.b 3
0000EA75 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EA7A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EA7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA84 03                         byte_E64C:	dc.b 3
0000EA85 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EA8A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EA8F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA94 04                         byte_E65C:	dc.b 4
0000EA95 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EA9A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EA9F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EAA4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EAA9 04                         byte_E671:	dc.b 4
0000EAAA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EAAF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EAB4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EAB9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EABE 05                         byte_E686:	dc.b 5
0000EABF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EAC4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EAC9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EACE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EAD3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EAD8 05                         byte_E6A0:	dc.b 5
0000EAD9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EADE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EAE3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EAE8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EAED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EAF2 06                         byte_E6BA:	dc.b 6
0000EAF3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EAF8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EAFD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EB02 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EB07 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB0C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB11 06                         byte_E6D9:	dc.b 6
0000EB12 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EB17 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EB1C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EB21 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EB26 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB2B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB30 01                         byte_E6F8:	dc.b 1
0000EB31 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB36 02                         byte_E6FE:	dc.b 2
0000EB37 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB3C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB41 02                         byte_E709:	dc.b 2
0000EB42 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB47 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB4C 03                         byte_E714:	dc.b 3
0000EB4D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EB52 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB57 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB5C 03                         byte_E724:	dc.b 3
0000EB5D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EB62 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB67 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB6C 04                         byte_E734:	dc.b 4
0000EB6D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EB72 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EB77 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB7C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB81 04                         byte_E749:	dc.b 4
0000EB82 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EB87 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EB8C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB91 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB96 05                         byte_E75E:	dc.b 5
0000EB97 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EB9C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBA1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBA6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EBAB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBB0 05                         byte_E778:	dc.b 5
0000EBB1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EBB6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBBB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBC0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EBC5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBCA 06                         byte_E792:	dc.b 6
0000EBCB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EBD0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EBD5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBDA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EBDF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EBE4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBE9 06                         byte_E7B1:	dc.b 6
0000EBEA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EBEF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EBF4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EBF9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBFE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC03 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC08                            		even
0000EC08                            		even
0000EC08                            
0000EC08                            ; ===========================================================================
0000EC08                            ; ---------------------------------------------------------------------------
0000EC08                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EC08                            ; ---------------------------------------------------------------------------
0000EC08                            
0000EC08                            Obj46:					; XREF: Obj_Index
0000EC08 7000                       		moveq	#0,d0
0000EC0A 1028 0024                  		move.b	$24(a0),d0
0000EC0E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EC12 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EC16                            ; ===========================================================================
0000EC16 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EC18 0000                       		dc.w Obj46_Action-Obj46_Index
0000EC1A                            ; ===========================================================================
0000EC1A                            
0000EC1A                            Obj46_Main:				; XREF: Obj46_Index
0000EC1A 5428 0024                  		addq.b	#2,$24(a0)
0000EC1E 117C 000F 0016             		move.b	#$F,$16(a0)
0000EC24 117C 000F 0017             		move.b	#$F,$17(a0)
0000EC2A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EC32 317C 4000 0002             		move.w	#$4000,2(a0)
0000EC38 117C 0004 0001             		move.b	#4,1(a0)
0000EC3E 117C 0003 0018             		move.b	#3,$18(a0)
0000EC44 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC50 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EC56                            
0000EC56                            Obj46_Action:				; XREF: Obj46_Index
0000EC56 4A28 0001                  		tst.b	1(a0)
0000EC5A 6A00                       		bpl.s	Obj46_ChkDel
0000EC5C 7000                       		moveq	#0,d0
0000EC5E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EC62 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EC66 D040                       		add.w	d0,d0
0000EC68 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EC6C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EC70 323C 001B                  		move.w	#$1B,d1
0000EC74 343C 0010                  		move.w	#$10,d2
0000EC78 363C 0011                  		move.w	#$11,d3
0000EC7C 3828 0008                  		move.w	8(a0),d4
0000EC80 6100 0000                  		bsr.w	SolidObject
0000EC84                            
0000EC84                            Obj46_ChkDel:
0000EC84 6100 EDBC                  		bsr.w	DisplaySprite
0000EC88 3028 0008                  		move.w	8(a0),d0
0000EC8C 0240 FF80                  		andi.w	#$FF80,d0
0000EC90 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC94 0441 0080                  		subi.w	#$80,d1
0000EC98 0241 FF80                  		andi.w	#$FF80,d1
0000EC9C 9041                       		sub.w	d1,d0
0000EC9E 0C40 0280                  		cmpi.w	#$280,d0
0000ECA2 6200 EDDA                  		bhi.w	DeleteObject
0000ECA6 4E75                       		rts	
0000ECA8                            ; ===========================================================================
0000ECA8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000ECAA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000ECAC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000ECAE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000ECB0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000ECB2                            ; ===========================================================================
0000ECB2                            
0000ECB2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000ECB2 4E75                       		rts	
0000ECB4                            ; ===========================================================================
0000ECB4                            
0000ECB4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000ECB4 3038 D008                  		move.w	($FFFFD008).w,d0
0000ECB8 9068 0008                  		sub.w	8(a0),d0
0000ECBC 6400                       		bcc.s	loc_E888
0000ECBE 4440                       		neg.w	d0
0000ECC0                            
0000ECC0                            loc_E888:
0000ECC0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000ECC4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000ECC6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000ECCC                            
0000ECCC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000ECCC 7000                       		moveq	#0,d0
0000ECCE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000ECD2 0828 0003 0028             		btst	#3,$28(a0)
0000ECD8 6700                       		beq.s	loc_E8A8
0000ECDA 4440                       		neg.w	d0
0000ECDC 0640 0010                  		addi.w	#$10,d0
0000ECE0                            
0000ECE0                            loc_E8A8:
0000ECE0 3228 0030                  		move.w	$30(a0),d1
0000ECE4 9240                       		sub.w	d0,d1
0000ECE6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000ECEA 4E75                       		rts	
0000ECEC                            ; ===========================================================================
0000ECEC                            
0000ECEC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000ECEC 6100 ED2E                  		bsr.w	SpeedToPos
0000ECF0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000ECF6 6100 0000                  		bsr.w	ObjHitFloor
0000ECFA 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000ECFC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000ED00 D368 000C                  		add.w	d1,$C(a0)
0000ED04 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000ED08 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED0E 117C 0004 0028             		move.b	#4,$28(a0)
0000ED14 3011                       		move.w	(a1),d0
0000ED16 0240 03FF                  		andi.w	#$3FF,d0
0000ED1A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000ED1E 6400                       		bcc.s	locret_E8EE
0000ED20 117C 0000 0028             		move.b	#0,$28(a0)
0000ED26                            
0000ED26                            locret_E8EE:
0000ED26 4E75                       		rts	
0000ED28                            ; ===========================================================================
0000ED28                            
0000ED28                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000ED28 7000                       		moveq	#0,d0
0000ED2A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000ED2E E648                       		lsr.w	#3,d0
0000ED30 3228 0030                  		move.w	$30(a0),d1
0000ED34 9240                       		sub.w	d0,d1
0000ED36 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000ED3A 4E75                       		rts	
0000ED3C                            ; ===========================================================================
0000ED3C                            ; ---------------------------------------------------------------------------
0000ED3C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000ED3C                            ; ---------------------------------------------------------------------------
0000ED3C                            Map_obj46:
0000ED3C                            	include "_maps\obj46.asm"
0000ED3C                            ; ---------------------------------------------------------------------------
0000ED3C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000ED3C                            ; ---------------------------------------------------------------------------
0000ED3C 0000                       		dc.w byte_E906-Map_obj46
0000ED3E 01                         byte_E906:	dc.b 1
0000ED3F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000ED44                            		even
0000ED44                            		even
0000ED44                            
0000ED44                            ; ===========================================================================
0000ED44                            ; ---------------------------------------------------------------------------
0000ED44                            ; Object 12 - lamp (SYZ)
0000ED44                            ; ---------------------------------------------------------------------------
0000ED44                            
0000ED44                            Obj12:					; XREF: Obj_Index
0000ED44 7000                       		moveq	#0,d0
0000ED46 1028 0024                  		move.b	$24(a0),d0
0000ED4A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000ED4E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000ED52                            ; ===========================================================================
0000ED52 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000ED54 0000                       		dc.w Obj12_Animate-Obj12_Index
0000ED56                            ; ===========================================================================
0000ED56                            
0000ED56                            Obj12_Main:				; XREF: Obj12_Index
0000ED56 5428 0024                  		addq.b	#2,$24(a0)
0000ED5A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000ED62 317C 0000 0002             		move.w	#0,2(a0)
0000ED68 117C 0004 0001             		move.b	#4,1(a0)
0000ED6E 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED74 117C 0006 0018             		move.b	#6,$18(a0)
0000ED7A                            
0000ED7A                            Obj12_Animate:				; XREF: Obj12_Index
0000ED7A 5328 001E                  		subq.b	#1,$1E(a0)
0000ED7E 6A00                       		bpl.s	Obj12_ChkDel
0000ED80 117C 0007 001E             		move.b	#7,$1E(a0)
0000ED86 5228 001A                  		addq.b	#1,$1A(a0)
0000ED8A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000ED90 6500                       		bcs.s	Obj12_ChkDel
0000ED92 117C 0000 001A             		move.b	#0,$1A(a0)
0000ED98                            
0000ED98                            Obj12_ChkDel:
0000ED98 3028 0008                  		move.w	8(a0),d0
0000ED9C 0240 FF80                  		andi.w	#$FF80,d0
0000EDA0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDA4 0441 0080                  		subi.w	#$80,d1
0000EDA8 0241 FF80                  		andi.w	#$FF80,d1
0000EDAC 9041                       		sub.w	d1,d0
0000EDAE 0C40 0280                  		cmpi.w	#$280,d0
0000EDB2 6200 ECCA                  		bhi.w	DeleteObject
0000EDB6 6000 EC8A                  		bra.w	DisplaySprite
0000EDBA                            ; ===========================================================================
0000EDBA                            ; ---------------------------------------------------------------------------
0000EDBA                            ; Sprite mappings - lamp (SYZ)
0000EDBA                            ; ---------------------------------------------------------------------------
0000EDBA                            Map_obj12:
0000EDBA                            	include "_maps\obj12.asm"
0000EDBA                            ; ---------------------------------------------------------------------------
0000EDBA                            ; Sprite mappings - lamp (SYZ)
0000EDBA                            ; ---------------------------------------------------------------------------
0000EDBA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EDBE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EDC2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EDC6 02                         byte_E98E:	dc.b 2
0000EDC7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EDCC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EDD1 02                         byte_E999:	dc.b 2
0000EDD2 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EDD7 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EDDC 02                         byte_E9A4:	dc.b 2
0000EDDD F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EDE2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EDE7 02                         byte_E9AF:	dc.b 2
0000EDE8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EDED 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EDF2 02                         byte_E9BA:	dc.b 2
0000EDF3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EDF8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EDFD 02                         byte_E9C5:	dc.b 2
0000EDFE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EE03 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EE08                            		even
0000EE08                            		even
0000EE08                            
0000EE08                            ; ===========================================================================
0000EE08                            ; ---------------------------------------------------------------------------
0000EE08                            ; Object 47 - pinball bumper (SYZ)
0000EE08                            ; ---------------------------------------------------------------------------
0000EE08                            
0000EE08                            Obj47:					; XREF: Obj_Index
0000EE08 7000                       		moveq	#0,d0
0000EE0A 1028 0024                  		move.b	$24(a0),d0
0000EE0E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EE12 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EE16                            ; ===========================================================================
0000EE16 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EE18 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EE1A                            ; ===========================================================================
0000EE1A                            
0000EE1A                            Obj47_Main:				; XREF: Obj47_Index
0000EE1A 5428 0024                  		addq.b	#2,$24(a0)
0000EE1E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EE26 317C 0380 0002             		move.w	#$380,2(a0)
0000EE2C 117C 0004 0001             		move.b	#4,1(a0)
0000EE32 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE38 117C 0001 0018             		move.b	#1,$18(a0)
0000EE3E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EE44                            
0000EE44                            Obj47_Hit:				; XREF: Obj47_Index
0000EE44 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EE48 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EE4C 4228 0021                  		clr.b	$21(a0)
0000EE50 43F8 D000                  		lea	($FFFFD000).w,a1
0000EE54 3228 0008                  		move.w	8(a0),d1
0000EE58 3428 000C                  		move.w	$C(a0),d2
0000EE5C 9269 0008                  		sub.w	8(a1),d1
0000EE60 9469 000C                  		sub.w	$C(a1),d2
0000EE64 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EE6A 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EE70 C3FC F900                  		muls.w	#-$700,d1
0000EE74 E081                       		asr.l	#8,d1
0000EE76 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EE7A C1FC F900                  		muls.w	#-$700,d0
0000EE7E E080                       		asr.l	#8,d0
0000EE80 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EE84 08E9 0001 0022             		bset	#1,$22(a1)
0000EE8A 08A9 0004 0022             		bclr	#4,$22(a1)
0000EE90 08A9 0005 0022             		bclr	#5,$22(a1)
0000EE96 4229 003C                  		clr.b	$3C(a1)
0000EE9A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EEA0 303C 00B4                  		move.w	#$B4,d0
0000EEA4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EEAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EEAE 7000                       		moveq	#0,d0
0000EEB0 1028 0023                  		move.b	$23(a0),d0
0000EEB4 6700                       		beq.s	Obj47_Score
0000EEB6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EEBC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EEBE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EEC2                            
0000EEC2                            Obj47_Score:
0000EEC2 7001                       		moveq	#1,d0
0000EEC4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EECA 6100 EFFC                  		bsr.w	SingleObjLoad
0000EECE 6600                       		bne.s	Obj47_Display
0000EED0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EED4 3368 0008 0008             		move.w	8(a0),8(a1)
0000EEDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EEE0 137C 0004 001A             		move.b	#4,$1A(a1)
0000EEE6                            
0000EEE6                            Obj47_Display:
0000EEE6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EEEC 6100 BC06                  		bsr.w	AnimateSprite
0000EEF0 3028 0008                  		move.w	8(a0),d0
0000EEF4 0240 FF80                  		andi.w	#$FF80,d0
0000EEF8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEFC 0441 0080                  		subi.w	#$80,d1
0000EF00 0241 FF80                  		andi.w	#$FF80,d1
0000EF04 9041                       		sub.w	d1,d0
0000EF06 0C40 0280                  		cmpi.w	#$280,d0
0000EF0A 6200                       		bhi.s	Obj47_ChkHit
0000EF0C 6000 EB34                  		bra.w	DisplaySprite
0000EF10                            ; ===========================================================================
0000EF10                            
0000EF10                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EF10 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EF14 7000                       		moveq	#0,d0
0000EF16 1028 0023                  		move.b	$23(a0),d0
0000EF1A 6700                       		beq.s	Obj47_Delete
0000EF1C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EF22                            
0000EF22                            Obj47_Delete:
0000EF22 6000 EB5A                  		bra.w	DeleteObject
0000EF26                            ; ===========================================================================
0000EF26                            Ani_obj47:
0000EF26                            	include "_anim\obj47.asm"
0000EF26                            ; ---------------------------------------------------------------------------
0000EF26                            ; Animation script - flamethrower (SBZ)
0000EF26                            ; ---------------------------------------------------------------------------
0000EF26 0000                       		dc.w byte_EAF4-Ani_obj47
0000EF28 0000                       		dc.w byte_EAF8-Ani_obj47
0000EF2A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EF2E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EF36                            		even
0000EF36                            		even
0000EF36                            
0000EF36                            ; ---------------------------------------------------------------------------
0000EF36                            ; Sprite mappings - pinball bumper (SYZ)
0000EF36                            ; ---------------------------------------------------------------------------
0000EF36                            Map_obj47:
0000EF36                            	include "_maps\obj47.asm"
0000EF36                            ; ---------------------------------------------------------------------------
0000EF36                            ; Sprite mappings - pinball bumper (SYZ)
0000EF36                            ; ---------------------------------------------------------------------------
0000EF36 0000                       		dc.w byte_EB06-Map_obj47
0000EF38 0000                       		dc.w byte_EB11-Map_obj47
0000EF3A 0000                       		dc.w byte_EB1C-Map_obj47
0000EF3C 02                         byte_EB06:	dc.b 2
0000EF3D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EF42 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EF47 02                         byte_EB11:	dc.b 2
0000EF48 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EF4D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EF52 02                         byte_EB1C:	dc.b 2
0000EF53 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EF58 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EF5E 00                         		even
0000EF5E 00                         		even
0000EF5E                            
0000EF5E                            ; ===========================================================================
0000EF5E                            ; ---------------------------------------------------------------------------
0000EF5E                            ; Object 0D - signpost at the end of a level
0000EF5E                            ; ---------------------------------------------------------------------------
0000EF5E                            
0000EF5E                            Obj0D:					; XREF: Obj_Index
0000EF5E 7000                       		moveq	#0,d0
0000EF60 1028 0024                  		move.b	$24(a0),d0
0000EF64 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EF68 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EF6C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EF72 6100 BB80                  		bsr.w	AnimateSprite
0000EF76 6100 EACA                  		bsr.w	DisplaySprite
0000EF7A 3028 0008                  		move.w	8(a0),d0
0000EF7E 0240 FF80                  		andi.w	#$FF80,d0
0000EF82 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF86 0441 0080                  		subi.w	#$80,d1
0000EF8A 0241 FF80                  		andi.w	#$FF80,d1
0000EF8E 9041                       		sub.w	d1,d0
0000EF90 0C40 0280                  		cmpi.w	#$280,d0
0000EF94 6200 EAE8                  		bhi.w	DeleteObject
0000EF98 4E75                       		rts	
0000EF9A                            ; ===========================================================================
0000EF9A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EF9C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EF9E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EFA0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EFA2 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EFA4                            ; ===========================================================================
0000EFA4                            
0000EFA4                            Obj0D_Main:				; XREF: Obj0D_Index
0000EFA4 5428 0024                  		addq.b	#2,$24(a0)
0000EFA8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EFB0 317C 0680 0002             		move.w	#$680,2(a0)
0000EFB6 117C 0004 0001             		move.b	#4,1(a0)
0000EFBC 117C 0018 0019             		move.b	#$18,$19(a0)
0000EFC2 117C 0004 0018             		move.b	#4,$18(a0)
0000EFC8                            
0000EFC8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EFC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFCC 9068 0008                  		sub.w	8(a0),d0
0000EFD0 6500                       		bcs.s	locret_EBBA
0000EFD2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EFD6 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EFD8 303C 00CF                  		move.w	#$CF,d0
0000EFDC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000EFE2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EFE6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EFEC 5428 0024                  		addq.b	#2,$24(a0)
0000EFF0                            
0000EFF0                            locret_EBBA:
0000EFF0 4E75                       		rts	
0000EFF2                            ; ===========================================================================
0000EFF2                            
0000EFF2                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EFF2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EFF6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EFF8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EFFE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F002 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F008 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F00A 5428 0024                  		addq.b	#2,$24(a0)
0000F00E                            
0000F00E                            Obj0D_Sparkle:
0000F00E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F012 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F014 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F01A 7000                       		moveq	#0,d0
0000F01C 1028 0034                  		move.b	$34(a0),d0
0000F020 5428 0034                  		addq.b	#2,$34(a0)
0000F024 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F02A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F02E 6100 EE98                  		bsr.w	SingleObjLoad
0000F032 6600                       		bne.s	locret_EC42
0000F034 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F038 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F03E 101A                       		move.b	(a2)+,d0
0000F040 4880                       		ext.w	d0
0000F042 D068 0008                  		add.w	8(a0),d0
0000F046 3340 0008                  		move.w	d0,8(a1)
0000F04A 101A                       		move.b	(a2)+,d0
0000F04C 4880                       		ext.w	d0
0000F04E D068 000C                  		add.w	$C(a0),d0
0000F052 3340 000C                  		move.w	d0,$C(a1)
0000F056 237C 0000 A360 0004        		move.l	#Map_obj25,4(a1)
0000F05E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F064 137C 0004 0001             		move.b	#4,1(a1)
0000F06A 137C 0002 0018             		move.b	#2,$18(a1)
0000F070 137C 0008 0019             		move.b	#8,$19(a1)
0000F076                            
0000F076                            locret_EC42:
0000F076 4E75                       		rts	
0000F078                            ; ===========================================================================
0000F078 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F07A 0808                       		dc.b	8,   8
0000F07C F000                       		dc.b -$10,   0
0000F07E 18F8                       		dc.b  $18,  -8
0000F080 00F8                       		dc.b	0,  -8
0000F082 1000                       		dc.b  $10,   0
0000F084 E808                       		dc.b -$18,   8
0000F086 1810                       		dc.b  $18, $10
0000F088                            ; ===========================================================================
0000F088                            
0000F088                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F088 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F08C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F090 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F096 6600                       		bne.s	loc_EC70
0000F098 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F09E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F0A4 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F0A6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F0AC 6000                       		bra.s	loc_EC70
0000F0AE                            
0000F0AE                            Obj0D_MoveLeft:
0000F0AE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F0B4                            
0000F0B4                            loc_EC70:
0000F0B4 4A38 D000                  		tst.b	($FFFFD000).w
0000F0B8 6700                       		beq.s	loc_EC86
0000F0BA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0BE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F0C2 0641 0128                  		addi.w	#$128,d1
0000F0C6 B041                       		cmp.w	d1,d0
0000F0C8 6500                       		bcs.s	locret_ECEE
0000F0CA                            
0000F0CA                            loc_EC86:
0000F0CA 5428 0024                  		addq.b	#2,$24(a0)
0000F0CE                            
0000F0CE                            ; ---------------------------------------------------------------------------
0000F0CE                            ; Subroutine to	set up bonuses at the end of an	act
0000F0CE                            ; ---------------------------------------------------------------------------
0000F0CE                            
0000F0CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0CE                            
0000F0CE                            
0000F0CE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F0CE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F0D2 6600                       		bne.s	locret_ECEE
0000F0D4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F0DA 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F0DE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F0E2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F0E8 7010                       		moveq	#$10,d0
0000F0EA 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F0F0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F0F6 7000                       		moveq	#0,d0
0000F0F8 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F0FC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F100 7200                       		moveq	#0,d1
0000F102 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F106 D041                       		add.w	d1,d0		; add up your time
0000F108 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F10C 7214                       		moveq	#$14,d1
0000F10E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F110 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F112 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F114                            
0000F114                            loc_ECD0:
0000F114 D040                       		add.w	d0,d0
0000F116 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F11C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F120 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F124 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F128 303C 008E                  		move.w	#$8E,d0
0000F12C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F132                            
0000F132                            locret_ECEE:
0000F132 4E75                       		rts	
0000F134                            ; End of function GotThroughAct
0000F134                            
0000F134                            ; ===========================================================================
0000F134 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F148 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F15E                            ; ===========================================================================
0000F15E                            
0000F15E                            locret_ED1A:				; XREF: Obj0D_Index
0000F15E 4E75                       		rts	
0000F160                            ; ===========================================================================
0000F160                            Ani_obj0D:
0000F160                            	include "_anim\obj0D.asm"
0000F160                            ; ---------------------------------------------------------------------------
0000F160                            ; Animation script - signpost
0000F160                            ; ---------------------------------------------------------------------------
0000F160 0000                       		dc.w byte_ED24-Ani_obj0D
0000F162 0000                       		dc.w byte_ED28-Ani_obj0D
0000F164 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F166 0000                       		dc.w byte_ED34-Ani_obj0D
0000F168 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F16C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F172 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F178 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F17C 00                         		even
0000F17C 00                         		even
0000F17C                            
0000F17C                            ; ---------------------------------------------------------------------------
0000F17C                            ; Sprite mappings - signpost
0000F17C                            ; ---------------------------------------------------------------------------
0000F17C                            Map_obj0D:
0000F17C                            	include "_maps\obj0D.asm"
0000F17C                            ; ---------------------------------------------------------------------------
0000F17C                            ; Sprite mappings - signpost
0000F17C                            ; ---------------------------------------------------------------------------
0000F17C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F180 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F184 0000                       		dc.w byte_ED73-Map_obj0D
0000F186 03                         byte_ED42:	dc.b 3
0000F187 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F18C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F191 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F196 02                         byte_ED52:	dc.b 2
0000F197 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F19C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F1A1 02                         byte_ED5D:	dc.b 2
0000F1A2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F1A7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F1AC 02                         byte_ED68:	dc.b 2
0000F1AD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F1B2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F1B7 03                         byte_ED73:	dc.b 3
0000F1B8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F1BD F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F1C2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F1C8 00                         		even
0000F1C8 00                         		even
0000F1C8                            
0000F1C8                            ; ===========================================================================
0000F1C8                            ; ---------------------------------------------------------------------------
0000F1C8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F1C8                            ; ---------------------------------------------------------------------------
0000F1C8                            
0000F1C8                            Obj4C:					; XREF: Obj_Index
0000F1C8 7000                       		moveq	#0,d0
0000F1CA 1028 0024                  		move.b	$24(a0),d0
0000F1CE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F1D2 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F1D6 6000 0000                  		bra.w	Obj4D_ChkDel
0000F1DA                            ; ===========================================================================
0000F1DA 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F1DC 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F1DE 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F1E0 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F1E2 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F1E4 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F1E6                            ; ===========================================================================
0000F1E6                            
0000F1E6                            Obj4C_Main:				; XREF: Obj4C_Index
0000F1E6 5428 0024                  		addq.b	#2,$24(a0)
0000F1EA 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F1F2 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F1F8 117C 0004 0001             		move.b	#4,1(a0)
0000F1FE 117C 0001 0018             		move.b	#1,$18(a0)
0000F204 117C 0038 0019             		move.b	#$38,$19(a0)
0000F20A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F210                            
0000F210                            loc_EDCC:				; XREF: Obj4C_Index
0000F210 5368 0032                  		subq.w	#1,$32(a0)
0000F214 6A00                       		bpl.s	locret_EDF0
0000F216 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F21C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F220 3228 000C                  		move.w	$C(a0),d1
0000F224 B041                       		cmp.w	d1,d0
0000F226 6400                       		bcc.s	locret_EDF0
0000F228 0441 0170                  		subi.w	#$170,d1
0000F22C B041                       		cmp.w	d1,d0
0000F22E 6500                       		bcs.s	locret_EDF0
0000F230 5428 0024                  		addq.b	#2,$24(a0)
0000F234                            
0000F234                            locret_EDF0:
0000F234 4E75                       		rts	
0000F236                            ; ===========================================================================
0000F236                            
0000F236                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F236 5428 0024                  		addq.b	#2,$24(a0)
0000F23A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F23E 6600                       		bne.s	loc_EE18
0000F240 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F244 3368 0008 0008             		move.w	8(a0),8(a1)
0000F24A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F250 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F256 2348 003C                  		move.l	a0,$3C(a1)
0000F25A                            
0000F25A                            loc_EE18:
0000F25A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F260 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F264 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F266 117C 0004 001C             		move.b	#4,$1C(a0)
0000F26C 6000                       		bra.s	Obj4C_Display
0000F26E                            ; ===========================================================================
0000F26E                            
0000F26E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F26E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F272 08E9 0001 0022             		bset	#1,$22(a1)
0000F278 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F27E 6000                       		bra.s	Obj4C_Display
0000F280                            ; ===========================================================================
0000F280                            
0000F280                            loc_EE3E:				; XREF: Obj4C_Index
0000F280 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F284 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F286 5428 0024                  		addq.b	#2,$24(a0)
0000F28A 4E75                       		rts	
0000F28C                            ; ===========================================================================
0000F28C                            
0000F28C                            Obj4C_Display:				; XREF: Obj4C_Index
0000F28C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F292 6100 B860                  		bsr.w	AnimateSprite
0000F296 6100 E7AA                  		bsr.w	DisplaySprite
0000F29A 4E75                       		rts	
0000F29C                            ; ===========================================================================
0000F29C                            
0000F29C                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F29C 117C 0000 001C             		move.b	#0,$1C(a0)
0000F2A2 117C 0002 0024             		move.b	#2,$24(a0)
0000F2A8 4A28 0028                  		tst.b	$28(a0)
0000F2AC 6700 E7D0                  		beq.w	DeleteObject
0000F2B0 4E75                       		rts	
0000F2B2                            ; ===========================================================================
0000F2B2                            ; ---------------------------------------------------------------------------
0000F2B2                            ; Object 4D - lava geyser / lavafall (MZ)
0000F2B2                            ; ---------------------------------------------------------------------------
0000F2B2                            
0000F2B2                            Obj4D:					; XREF: Obj_Index
0000F2B2 7000                       		moveq	#0,d0
0000F2B4 1028 0024                  		move.b	$24(a0),d0
0000F2B8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F2BC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F2C0 6000 E780                  		bra.w	DisplaySprite
0000F2C4                            ; ===========================================================================
0000F2C4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F2C6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F2C8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F2CA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F2CC                            
0000F2CC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F2D0                            ; ===========================================================================
0000F2D0                            
0000F2D0                            Obj4D_Main:				; XREF: Obj4D_Index
0000F2D0 5428 0024                  		addq.b	#2,$24(a0)
0000F2D4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2DA 4A28 0028                  		tst.b	$28(a0)
0000F2DE 6700                       		beq.s	loc_EEA4
0000F2E0 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F2E6                            
0000F2E6                            loc_EEA4:
0000F2E6 7000                       		moveq	#0,d0
0000F2E8 1028 0028                  		move.b	$28(a0),d0
0000F2EC D040                       		add.w	d0,d0
0000F2EE 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F2F4 2248                       		movea.l	a0,a1
0000F2F6 7201                       		moveq	#1,d1
0000F2F8 6100                       		bsr.s	Obj4D_MakeLava
0000F2FA 6000                       		bra.s	loc_EF10
0000F2FC                            ; ===========================================================================
0000F2FC                            
0000F2FC                            Obj4D_Loop:
0000F2FC 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F300 6600                       		bne.s	loc_EF0A
0000F302                            
0000F302                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F302 12BC 004D                  		move.b	#$4D,0(a1)
0000F306 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F30E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F314 137C 0004 0001             		move.b	#4,1(a1)
0000F31A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F320 3368 0008 0008             		move.w	8(a0),8(a1)
0000F326 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F32C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F332 137C 0001 0018             		move.b	#1,$18(a1)
0000F338 137C 0005 001C             		move.b	#5,$1C(a1)
0000F33E 4A28 0028                  		tst.b	$28(a0)
0000F342 6700                       		beq.s	loc_EF0A
0000F344 137C 0002 001C             		move.b	#2,$1C(a1)
0000F34A                            
0000F34A                            loc_EF0A:
0000F34A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F34E 4E75                       		rts	
0000F350                            ; ===========================================================================
0000F350                            
0000F350                            loc_EF10:				; XREF: Obj4D_Main
0000F350 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F356 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F35C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F362 137C 0093 0020             		move.b	#$93,$20(a1)
0000F368 137C 0080 0016             		move.b	#$80,$16(a1)
0000F36E 08E9 0004 0001             		bset	#4,1(a1)
0000F374 5829 0024                  		addq.b	#4,$24(a1)
0000F378 2348 003C                  		move.l	a0,$3C(a1)
0000F37C 4A28 0028                  		tst.b	$28(a0)
0000F380 6700                       		beq.s	Obj4D_PlaySnd
0000F382 7200                       		moveq	#0,d1
0000F384 6100 FF76                  		bsr.w	Obj4D_Loop
0000F388 5429 0024                  		addq.b	#2,$24(a1)
0000F38C 08E9 0004 0002             		bset	#4,2(a1)
0000F392 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F398 137C 0000 0018             		move.b	#0,$18(a1)
0000F39E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F3A4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F3AA 117C 0000 0028             		move.b	#0,$28(a0)
0000F3B0                            
0000F3B0                            Obj4D_PlaySnd:
0000F3B0 303C 00C8                  		move.w	#$C8,d0
0000F3B4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F3BA                            
0000F3BA                            Obj4D_Action:				; XREF: Obj4D_Index
0000F3BA 7000                       		moveq	#0,d0
0000F3BC 1028 0028                  		move.b	$28(a0),d0
0000F3C0 D040                       		add.w	d0,d0
0000F3C2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F3C6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F3CA 6100 E650                  		bsr.w	SpeedToPos
0000F3CE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3D4 6100 B71E                  		bsr.w	AnimateSprite
0000F3D8                            
0000F3D8                            Obj4D_ChkDel:				; XREF: Obj4C
0000F3D8 3028 0008                  		move.w	8(a0),d0
0000F3DC 0240 FF80                  		andi.w	#$FF80,d0
0000F3E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3E4 0441 0080                  		subi.w	#$80,d1
0000F3E8 0241 FF80                  		andi.w	#$FF80,d1
0000F3EC 9041                       		sub.w	d1,d0
0000F3EE 0C40 0280                  		cmpi.w	#$280,d0
0000F3F2 6200 E68A                  		bhi.w	DeleteObject
0000F3F6 4E75                       		rts	
0000F3F8                            ; ===========================================================================
0000F3F8 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F3FA 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F3FC                            ; ===========================================================================
0000F3FC                            
0000F3FC                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F3FC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F402 3028 0030                  		move.w	$30(a0),d0
0000F406 B068 000C                  		cmp.w	$C(a0),d0
0000F40A 6400                       		bcc.s	locret_EFDA
0000F40C 5828 0024                  		addq.b	#4,$24(a0)
0000F410 2268 003C                  		movea.l	$3C(a0),a1
0000F414 137C 0003 001C             		move.b	#3,$1C(a1)
0000F41A                            
0000F41A                            locret_EFDA:
0000F41A 4E75                       		rts	
0000F41C                            ; ===========================================================================
0000F41C                            
0000F41C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F41C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F422 3028 0030                  		move.w	$30(a0),d0
0000F426 B068 000C                  		cmp.w	$C(a0),d0
0000F42A 6400                       		bcc.s	locret_EFFA
0000F42C 5828 0024                  		addq.b	#4,$24(a0)
0000F430 2268 003C                  		movea.l	$3C(a0),a1
0000F434 137C 0001 001C             		move.b	#1,$1C(a1)
0000F43A                            
0000F43A                            locret_EFFA:
0000F43A 4E75                       		rts	
0000F43C                            ; ===========================================================================
0000F43C                            
0000F43C                            loc_EFFC:				; XREF: Obj4D_Index
0000F43C 2268 003C                  		movea.l	$3C(a0),a1
0000F440 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F446 6700 0000                  		beq.w	Obj4D_Delete
0000F44A 3029 000C                  		move.w	$C(a1),d0
0000F44E 0640 0060                  		addi.w	#$60,d0
0000F452 3140 000C                  		move.w	d0,$C(a0)
0000F456 9068 0030                  		sub.w	$30(a0),d0
0000F45A 4440                       		neg.w	d0
0000F45C 7208                       		moveq	#8,d1
0000F45E 0C40 0040                  		cmpi.w	#$40,d0
0000F462 6C00                       		bge.s	loc_F026
0000F464 720B                       		moveq	#$B,d1
0000F466                            
0000F466                            loc_F026:
0000F466 0C40 0080                  		cmpi.w	#$80,d0
0000F46A 6F00                       		ble.s	loc_F02E
0000F46C 720E                       		moveq	#$E,d1
0000F46E                            
0000F46E                            loc_F02E:
0000F46E 5328 001E                  		subq.b	#1,$1E(a0)
0000F472 6A00                       		bpl.s	loc_F04C
0000F474 117C 0007 001E             		move.b	#7,$1E(a0)
0000F47A 5228 001B                  		addq.b	#1,$1B(a0)
0000F47E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F484 6500                       		bcs.s	loc_F04C
0000F486 117C 0000 001B             		move.b	#0,$1B(a0)
0000F48C                            
0000F48C                            loc_F04C:
0000F48C 1028 001B                  		move.b	$1B(a0),d0
0000F490 D001                       		add.b	d1,d0
0000F492 1140 001A                  		move.b	d0,$1A(a0)
0000F496 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F49A                            ; ===========================================================================
0000F49A                            
0000F49A                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F49A 6000 E5E2                  		bra.w	DeleteObject
0000F49E                            ; ===========================================================================
0000F49E                            ; ---------------------------------------------------------------------------
0000F49E                            ; Object 4E - advancing	wall of	lava (MZ)
0000F49E                            ; ---------------------------------------------------------------------------
0000F49E                            
0000F49E                            Obj4E:					; XREF: Obj_Index
0000F49E 7000                       		moveq	#0,d0
0000F4A0 1028 0024                  		move.b	$24(a0),d0
0000F4A4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F4A8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F4AC                            ; ===========================================================================
0000F4AC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F4AE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F4B0 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F4B2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F4B4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F4B6                            ; ===========================================================================
0000F4B6                            
0000F4B6                            Obj4E_Main:				; XREF: Obj4E_Index
0000F4B6 5828 0024                  		addq.b	#4,$24(a0)
0000F4BA 2248                       		movea.l	a0,a1
0000F4BC 7201                       		moveq	#1,d1
0000F4BE 6000                       		bra.s	Obj4E_Main2
0000F4C0                            ; ===========================================================================
0000F4C0                            
0000F4C0                            Obj4E_Loop:
0000F4C0 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F4C4 6600                       		bne.s	loc_F0C8
0000F4C6                            
0000F4C6                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F4C6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F4CA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F4D2 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F4D8 137C 0004 0001             		move.b	#4,1(a1)
0000F4DE 137C 0050 0019             		move.b	#$50,$19(a1)
0000F4E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4F0 137C 0001 0018             		move.b	#1,$18(a1)
0000F4F6 137C 0000 001C             		move.b	#0,$1C(a1)
0000F4FC 137C 0094 0020             		move.b	#$94,$20(a1)
0000F502 2348 003C                  		move.l	a0,$3C(a1)
0000F506                            
0000F506                            loc_F0C8:
0000F506 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F50A                            
0000F50A 5C29 0024                  		addq.b	#6,$24(a1)
0000F50E 137C 0004 001A             		move.b	#4,$1A(a1)
0000F514                            
0000F514                            Obj4E_Action:				; XREF: Obj4E_Index
0000F514 3038 D008                  		move.w	($FFFFD008).w,d0
0000F518 9068 0008                  		sub.w	8(a0),d0
0000F51C 6400                       		bcc.s	Obj4E_ChkSonic
0000F51E 4440                       		neg.w	d0
0000F520                            
0000F520                            Obj4E_ChkSonic:
0000F520 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F524 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F526 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F52A 9068 000C                  		sub.w	$C(a0),d0
0000F52E 6400                       		bcc.s	loc_F0F4
0000F530 4440                       		neg.w	d0
0000F532                            
0000F532                            loc_F0F4:
0000F532 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F536 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F538 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F53E 6000                       		bra.s	Obj4E_Solid
0000F540                            ; ===========================================================================
0000F540                            
0000F540                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F540 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F544 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F546 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F54C 5528 0024                  		subq.b	#2,$24(a0)
0000F550                            
0000F550                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F550 323C 002B                  		move.w	#$2B,d1
0000F554 343C 0018                  		move.w	#$18,d2
0000F558 3602                       		move.w	d2,d3
0000F55A 5243                       		addq.w	#1,d3
0000F55C 3828 0008                  		move.w	8(a0),d4
0000F560 1028 0024                  		move.b	$24(a0),d0
0000F564 3F00                       		move.w	d0,-(sp)
0000F566 6100 0000                  		bsr.w	SolidObject
0000F56A 301F                       		move.w	(sp)+,d0
0000F56C 1140 0024                  		move.b	d0,$24(a0)
0000F570 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F576 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F578 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F57C 4228 0036                  		clr.b	$36(a0)
0000F580                            
0000F580                            Obj4E_Animate:
0000F580 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F586 6100 B56C                  		bsr.w	AnimateSprite
0000F58A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F590 6400                       		bcc.s	Obj4E_ChkDel
0000F592 6100 E488                  		bsr.w	SpeedToPos
0000F596                            
0000F596                            Obj4E_ChkDel:
0000F596 6100 E4AA                  		bsr.w	DisplaySprite
0000F59A 4A28 0036                  		tst.b	$36(a0)
0000F59E 6600                       		bne.s	locret_F17E
0000F5A0 3028 0008                  		move.w	8(a0),d0
0000F5A4 0240 FF80                  		andi.w	#$FF80,d0
0000F5A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5AC 0441 0080                  		subi.w	#$80,d1
0000F5B0 0241 FF80                  		andi.w	#$FF80,d1
0000F5B4 9041                       		sub.w	d1,d0
0000F5B6 0C40 0280                  		cmpi.w	#$280,d0
0000F5BA 6200                       		bhi.s	Obj4E_ChkGone
0000F5BC                            
0000F5BC                            locret_F17E:
0000F5BC 4E75                       		rts	
0000F5BE                            ; ===========================================================================
0000F5BE                            
0000F5BE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F5BE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5C2 7000                       		moveq	#0,d0
0000F5C4 1028 0023                  		move.b	$23(a0),d0
0000F5C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F5CE 117C 0008 0024             		move.b	#8,$24(a0)
0000F5D4 4E75                       		rts	
0000F5D6                            ; ===========================================================================
0000F5D6                            
0000F5D6                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F5D6 2268 003C                  		movea.l	$3C(a0),a1
0000F5DA 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F5E0 6700                       		beq.s	Obj4E_Delete
0000F5E2 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F5E8 0468 0080 0008             		subi.w	#$80,8(a0)
0000F5EE 6000 E452                  		bra.w	DisplaySprite
0000F5F2                            ; ===========================================================================
0000F5F2                            
0000F5F2                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F5F2 6000 E48A                  		bra.w	DeleteObject
0000F5F6                            ; ===========================================================================
0000F5F6                            ; ---------------------------------------------------------------------------
0000F5F6                            ; Object 54 - invisible	lava tag (MZ)
0000F5F6                            ; ---------------------------------------------------------------------------
0000F5F6                            
0000F5F6                            Obj54:					; XREF: Obj_Index
0000F5F6 7000                       		moveq	#0,d0
0000F5F8 1028 0024                  		move.b	$24(a0),d0
0000F5FC 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F600 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F604                            ; ===========================================================================
0000F604 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F606 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F608                            
0000F608 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F60C                            ; ===========================================================================
0000F60C                            
0000F60C                            Obj54_Main:				; XREF: Obj54_Index
0000F60C 5428 0024                  		addq.b	#2,$24(a0)
0000F610 7000                       		moveq	#0,d0
0000F612 1028 0028                  		move.b	$28(a0),d0
0000F616 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F61C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F624 117C 0084 0001             		move.b	#$84,1(a0)
0000F62A                            
0000F62A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F62A 3028 0008                  		move.w	8(a0),d0
0000F62E 0240 FF80                  		andi.w	#$FF80,d0
0000F632 3238 F700                  		move.w	($FFFFF700).w,d1
0000F636 0441 0080                  		subi.w	#$80,d1
0000F63A 0241 FF80                  		andi.w	#$FF80,d1
0000F63E 9041                       		sub.w	d1,d0
0000F640 6B00 E43C                  		bmi.w	DeleteObject
0000F644 0C40 0280                  		cmpi.w	#$280,d0
0000F648 6200 E434                  		bhi.w	DeleteObject
0000F64C 4E75                       		rts	
0000F64E                            ; ===========================================================================
0000F64E                            ; ---------------------------------------------------------------------------
0000F64E                            ; Sprite mappings - invisible lava tag (MZ)
0000F64E                            ; ---------------------------------------------------------------------------
0000F64E                            Map_obj54:
0000F64E                            	include "_maps\obj54.asm"
0000F64E                            ; ---------------------------------------------------------------------------
0000F64E                            ; Sprite mappings - invisible lava tag (MZ)
0000F64E                            ; ---------------------------------------------------------------------------
0000F64E 0000                       		dc.w byte_F212-Map_obj54
0000F650 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F652 00                         		even
0000F652 00                         		even
0000F652                            
0000F652                            Ani_obj4C:
0000F652                            	include "_anim\obj4C.asm"
0000F652                            ; ---------------------------------------------------------------------------
0000F652                            ; Animation script - geyser of lava (MZ)
0000F652                            ; ---------------------------------------------------------------------------
0000F652 0000                       		dc.w byte_F220-Ani_obj4C
0000F654 0000                       		dc.w byte_F22A-Ani_obj4C
0000F656 0000                       		dc.w byte_F22E-Ani_obj4C
0000F658 0000                       		dc.w byte_F232-Ani_obj4C
0000F65A 0000                       		dc.w byte_F23A-Ani_obj4C
0000F65C 0000                       		dc.w byte_F23E-Ani_obj4C
0000F65E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F668 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F66C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F670 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F678 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F67C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F680                            		even
0000F680                            		even
0000F680                            
0000F680                            Ani_obj4E:
0000F680                            	include "_anim\obj4E.asm"
0000F680                            ; ---------------------------------------------------------------------------
0000F680                            ; Animation script - advancing wall of lava (MZ)
0000F680                            ; ---------------------------------------------------------------------------
0000F680 0000                       		dc.w byte_F244-Ani_obj4E
0000F682 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F688                            		even
0000F688                            		even
0000F688                            
0000F688                            ; ---------------------------------------------------------------------------
0000F688                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F688                            ; ---------------------------------------------------------------------------
0000F688                            Map_obj4C:
0000F688                            	include "_maps\obj4C.asm"
0000F688                            ; ---------------------------------------------------------------------------
0000F688                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F688                            ; ---------------------------------------------------------------------------
0000F688 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F68C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F690 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F694 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F698 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F69C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F6A0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F6A4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F6A8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F6AC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F6B0 02                         byte_F272:	dc.b 2
0000F6B1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F6B6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F6BB 02                         byte_F27D:	dc.b 2
0000F6BC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F6C1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F6C6 04                         byte_F288:	dc.b 4
0000F6C7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F6CC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F6D1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F6D6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F6DB 04                         byte_F29D:	dc.b 4
0000F6DC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F6E1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F6E6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F6EB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F6F0 06                         byte_F2B2:	dc.b 6
0000F6F1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F6F6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F6FB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F700 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F705 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F70A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F70F 06                         byte_F2D1:	dc.b 6
0000F710 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F715 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F71A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F71F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F724 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F729 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F72E 02                         byte_F2F0:	dc.b 2
0000F72F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F734 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F739 02                         byte_F2FB:	dc.b 2
0000F73A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F73F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F744 0A                         byte_F306:	dc.b $A
0000F745 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F74A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F74F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F754 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F759 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F75E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F763 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F768 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F76D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F772 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F777 0A                         byte_F339:	dc.b $A
0000F778 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F77D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F782 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F787 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F78C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F791 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F796 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F79B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F7A0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F7A5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F7AA 0A                         byte_F36C:	dc.b $A
0000F7AB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F7B0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F7B5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F7BA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F7BF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F7C4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F7C9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F7CE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F7D3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F7D8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F7DD 06                         byte_F39F:	dc.b 6
0000F7DE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F7E3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F7E8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F7ED B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F7F2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F7F7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F7FC 06                         byte_F3BE:	dc.b 6
0000F7FD 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F802 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F807 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F80C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F811 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F816 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F81B 06                         byte_F3DD:	dc.b 6
0000F81C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F821 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F826 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F82B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F830 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F835 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F83A 10                         byte_F3FC:	dc.b $10
0000F83B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F840 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F845 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F84A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F84F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F854 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F859 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F85E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F863 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F868 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F86D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F872 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F877 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F87C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F881 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F886 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F88B 10                         byte_F44D:	dc.b $10
0000F88C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F891 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F896 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F89B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8A0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8A5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8AA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F8AF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F8B4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F8B9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F8BE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F8C3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F8C8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F8CD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F8D2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F8D7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F8DC 10                         byte_F49E:	dc.b $10
0000F8DD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F8E2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F8E7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F8EC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F8F1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F8F6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F8FB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F900 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F905 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F90A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F90F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F914 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F919 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F91E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F923 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F928 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F92D 06                         byte_F4EF:	dc.b 6
0000F92E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F933 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F938 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F93D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F942 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F947 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F94C 06                         byte_F50E:	dc.b 6
0000F94D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F952 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F957 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F95C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F961 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F966 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F96B 00                         byte_F52D:	dc.b 0
0000F96C                            		even
0000F96C                            		even
0000F96C                            
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            ; Sprite mappings - advancing wall of lava (MZ)
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            Map_obj4E:
0000F96C                            	include "_maps\obj4E.asm"
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            ; Sprite mappings - advancing wall of lava (MZ)
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C 0000                       		dc.w byte_F538-Map_obj4E
0000F96E 0000                       		dc.w byte_F566-Map_obj4E
0000F970 0000                       		dc.w byte_F594-Map_obj4E
0000F972 0000                       		dc.w byte_F5C2-Map_obj4E
0000F974 0000                       		dc.w byte_F5F0-Map_obj4E
0000F976 09                         byte_F538:	dc.b 9
0000F977 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F97C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F981 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F986 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F98B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F990 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F995 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F99A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F99F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F9A4 09                         byte_F566:	dc.b 9
0000F9A5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F9AA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F9AF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F9B4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F9B9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F9BE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F9C3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F9C8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F9CD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F9D2 09                         byte_F594:	dc.b 9
0000F9D3 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F9D8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F9DD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F9E2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F9E7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F9EC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F9F1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F9F6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F9FB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FA00 09                         byte_F5C2:	dc.b 9
0000FA01 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FA06 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FA0B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FA10 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FA15 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FA1A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FA1F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FA24 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FA29 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FA2E 08                         byte_F5F0:	dc.b 8
0000FA2F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FA34 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FA39 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FA3E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FA43 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FA48 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FA4D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FA52 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FA58 00                         		even
0000FA58 00                         		even
0000FA58                            
0000FA58                            ; ===========================================================================
0000FA58                            ; ---------------------------------------------------------------------------
0000FA58                            ; Object 40 - Moto Bug enemy (GHZ)
0000FA58                            ; ---------------------------------------------------------------------------
0000FA58                            
0000FA58                            Obj40:					; XREF: Obj_Index
0000FA58 7000                       		moveq	#0,d0
0000FA5A 1028 0024                  		move.b	$24(a0),d0
0000FA5E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FA62 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FA66                            ; ===========================================================================
0000FA66 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FA68 0000                       		dc.w Obj40_Action-Obj40_Index
0000FA6A 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FA6C 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FA6E                            ; ===========================================================================
0000FA6E                            
0000FA6E                            Obj40_Main:				; XREF: Obj40_Index
0000FA6E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FA76 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FA7C 117C 0004 0001             		move.b	#4,1(a0)
0000FA82 117C 0004 0018             		move.b	#4,$18(a0)
0000FA88 117C 0014 0019             		move.b	#$14,$19(a0)
0000FA8E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FA92 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FA94 117C 000E 0016             		move.b	#$E,$16(a0)
0000FA9A 117C 0008 0017             		move.b	#8,$17(a0)
0000FAA0 117C 000C 0020             		move.b	#$C,$20(a0)
0000FAA6 6100 DF48                  		bsr.w	ObjectFall
0000FAAA 4EB9 0000 0000             		jsr	ObjHitFloor
0000FAB0 4A41                       		tst.w	d1
0000FAB2 6A00                       		bpl.s	locret_F68A
0000FAB4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FAB8 317C 0000 0012             		move.w	#0,$12(a0)
0000FABE 5428 0024                  		addq.b	#2,$24(a0)
0000FAC2 0868 0000 0022             		bchg	#0,$22(a0)
0000FAC8                            
0000FAC8                            locret_F68A:
0000FAC8 4E75                       		rts	
0000FACA                            ; ===========================================================================
0000FACA                            
0000FACA                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FACA 5828 0024                  		addq.b	#4,$24(a0)
0000FACE 6000 0000                  		bra.w	Obj40_Animate
0000FAD2                            ; ===========================================================================
0000FAD2                            
0000FAD2                            Obj40_Action:				; XREF: Obj40_Index
0000FAD2 7000                       		moveq	#0,d0
0000FAD4 1028 0025                  		move.b	$25(a0),d0
0000FAD8 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FADC 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FAE0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FAE6 6100 B00C                  		bsr.w	AnimateSprite
0000FAEA                            
0000FAEA                            ; ---------------------------------------------------------------------------
0000FAEA                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FAEA                            ; ---------------------------------------------------------------------------
0000FAEA                            
0000FAEA                            MarkObjGone:
0000FAEA 3028 0008                  		move.w	8(a0),d0
0000FAEE 0240 FF80                  		andi.w	#$FF80,d0
0000FAF2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAF6 0441 0080                  		subi.w	#$80,d1
0000FAFA 0241 FF80                  		andi.w	#$FF80,d1
0000FAFE 9041                       		sub.w	d1,d0
0000FB00 0C40 0280                  		cmpi.w	#$280,d0
0000FB04 6200 0000                  		bhi.w	Mark_ChkGone
0000FB08 6000 DF38                  		bra.w	DisplaySprite
0000FB0C                            ; ===========================================================================
0000FB0C                            
0000FB0C                            Mark_ChkGone:
0000FB0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB10 7000                       		moveq	#0,d0
0000FB12 1028 0023                  		move.b	$23(a0),d0
0000FB16 6700                       		beq.s	Mark_Delete
0000FB18 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB1E                            
0000FB1E                            Mark_Delete:
0000FB1E 6000 DF5E                  		bra.w	DeleteObject
0000FB22                            
0000FB22                            ; ===========================================================================
0000FB22 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FB24 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FB26                            ; ===========================================================================
0000FB26                            
0000FB26                            Obj40_Move:				; XREF: Obj40_Index2
0000FB26 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FB2A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FB2C 5428 0025                  		addq.b	#2,$25(a0)
0000FB30 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FB36 117C 0001 001C             		move.b	#1,$1C(a0)
0000FB3C 0868 0000 0022             		bchg	#0,$22(a0)
0000FB42 6600                       		bne.s	locret_F70A
0000FB44 4468 0010                  		neg.w	$10(a0)		; change direction
0000FB48                            
0000FB48                            locret_F70A:
0000FB48 4E75                       		rts	
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FB4A 6100 DED0                  		bsr.w	SpeedToPos
0000FB4E 4EB9 0000 0000             		jsr	ObjHitFloor
0000FB54 0C41 FFF8                  		cmpi.w	#-8,d1
0000FB58 6D00                       		blt.s	Obj40_Pause
0000FB5A 0C41 000C                  		cmpi.w	#$C,d1
0000FB5E 6C00                       		bge.s	Obj40_Pause
0000FB60 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FB64 5328 0033                  		subq.b	#1,$33(a0)
0000FB68 6A00                       		bpl.s	locret_F756
0000FB6A 117C 000F 0033             		move.b	#$F,$33(a0)
0000FB70 6100 E356                  		bsr.w	SingleObjLoad
0000FB74 6600                       		bne.s	locret_F756
0000FB76 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FB7A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB80 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB86 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FB8C 137C 0002 001C             		move.b	#2,$1C(a1)
0000FB92                            
0000FB92                            locret_F756:
0000FB92 4E75                       		rts	
0000FB94                            ; ===========================================================================
0000FB94                            
0000FB94                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FB94 5528 0025                  		subq.b	#2,$25(a0)
0000FB98 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FB9E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FBA4 117C 0000 001C             		move.b	#0,$1C(a0)
0000FBAA 4E75                       		rts	
0000FBAC                            ; ===========================================================================
0000FBAC                            
0000FBAC                            Obj40_Animate:				; XREF: Obj40_Index
0000FBAC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FBB2 6100 AF40                  		bsr.w	AnimateSprite
0000FBB6 6000 DE8A                  		bra.w	DisplaySprite
0000FBBA                            ; ===========================================================================
0000FBBA                            
0000FBBA                            Obj40_Delete:				; XREF: Obj40_Index
0000FBBA 6000 DEC2                  		bra.w	DeleteObject
0000FBBE                            ; ===========================================================================
0000FBBE                            Ani_obj40:
0000FBBE                            	include "_anim\obj40.asm"
0000FBBE                            ; ---------------------------------------------------------------------------
0000FBBE                            ; Animation script - Motobug enemy
0000FBBE                            ; ---------------------------------------------------------------------------
0000FBBE 0000                       		dc.w byte_F788-Ani_obj40
0000FBC0 0000                       		dc.w byte_F78C-Ani_obj40
0000FBC2 0000                       		dc.w byte_F792-Ani_obj40
0000FBC4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FBC8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FBCE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FBDC                            		even
0000FBDC                            		even
0000FBDC                            
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            Map_obj40:
0000FBDC                            	include "_maps\obj40.asm"
0000FBDC                            Map_cedc:
0000FBDC 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FBDE 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FBE0 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FBE2 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FBE4 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FBE6 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FBE8 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FBEA 04                         Map_cedc_E: 	dc.b $4
0000FBEB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FBF0 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FBF5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FBFA 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FBFF 04                         Map_cedc_23: 	dc.b $4
0000FC00 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FC05 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FC0A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FC0F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FC14 05                         Map_cedc_38: 	dc.b $5
0000FC15 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FC1A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FC1F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FC24 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FC29 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FC2E 01                         Map_cedc_52: 	dc.b $1
0000FC2F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FC34 01                         Map_cedc_58: 	dc.b $1
0000FC35 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FC3A 01                         Map_cedc_5E: 	dc.b $1
0000FC3B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FC40 00                         Map_cedc_64: 	dc.b $0
0000FC42 00                         	even
0000FC42 00                         	even
0000FC42                            
0000FC42                            ; ===========================================================================
0000FC42                            ; ---------------------------------------------------------------------------
0000FC42                            ; Object 4F - blank
0000FC42                            ; ---------------------------------------------------------------------------
0000FC42                            
0000FC42                            Obj4F:					; XREF: Obj_Index
0000FC42 4E75                       		rts	
0000FC44                            
0000FC44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC44                            
0000FC44                            
0000FC44                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FC44 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FC48 D047                       		add.w	d7,d0
0000FC4A 0240 0003                  		andi.w	#3,d0
0000FC4E 6600                       		bne.s	loc_F836
0000FC50 7600                       		moveq	#0,d3
0000FC52 1628 0019                  		move.b	$19(a0),d3
0000FC56 4A68 0010                  		tst.w	$10(a0)
0000FC5A 6B00                       		bmi.s	loc_F82C
0000FC5C 6100 0000                  		bsr.w	ObjHitWallRight
0000FC60 4A41                       		tst.w	d1
0000FC62 6A00                       		bpl.s	loc_F836
0000FC64                            
0000FC64                            loc_F828:
0000FC64 7001                       		moveq	#1,d0
0000FC66 4E75                       		rts	
0000FC68                            ; ===========================================================================
0000FC68                            
0000FC68                            loc_F82C:
0000FC68 4643                       		not.w	d3
0000FC6A 6100 0000                  		bsr.w	ObjHitWallLeft
0000FC6E 4A41                       		tst.w	d1
0000FC70 6BF2                       		bmi.s	loc_F828
0000FC72                            
0000FC72                            loc_F836:
0000FC72 7000                       		moveq	#0,d0
0000FC74 4E75                       		rts	
0000FC76                            ; End of function Obj50_ChkWall
0000FC76                            
0000FC76                            ; ===========================================================================
0000FC76                            ; ---------------------------------------------------------------------------
0000FC76                            ; Object 50 - Yadrin enemy (SYZ)
0000FC76                            ; ---------------------------------------------------------------------------
0000FC76                            
0000FC76                            Obj50:					; XREF: Obj_Index
0000FC76 7000                       		moveq	#0,d0
0000FC78 1028 0024                  		move.b	$24(a0),d0
0000FC7C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FC80 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FC84                            ; ===========================================================================
0000FC84 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FC86 0000                       		dc.w Obj50_Action-Obj50_Index
0000FC88                            ; ===========================================================================
0000FC88                            
0000FC88                            Obj50_Main:				; XREF: Obj50_Index
0000FC88 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FC90 317C 247B 0002             		move.w	#$247B,2(a0)
0000FC96 117C 0004 0001             		move.b	#4,1(a0)
0000FC9C 117C 0004 0018             		move.b	#4,$18(a0)
0000FCA2 117C 0014 0019             		move.b	#$14,$19(a0)
0000FCA8 117C 0011 0016             		move.b	#$11,$16(a0)
0000FCAE 117C 0008 0017             		move.b	#8,$17(a0)
0000FCB4 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FCBA 6100 DD34                  		bsr.w	ObjectFall
0000FCBE 6100 0000                  		bsr.w	ObjHitFloor
0000FCC2 4A41                       		tst.w	d1
0000FCC4 6A00                       		bpl.s	locret_F89E
0000FCC6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCCA 317C 0000 0012             		move.w	#0,$12(a0)
0000FCD0 5428 0024                  		addq.b	#2,$24(a0)
0000FCD4 0868 0000 0022             		bchg	#0,$22(a0)
0000FCDA                            
0000FCDA                            locret_F89E:
0000FCDA 4E75                       		rts	
0000FCDC                            ; ===========================================================================
0000FCDC                            
0000FCDC                            Obj50_Action:				; XREF: Obj50_Index
0000FCDC 7000                       		moveq	#0,d0
0000FCDE 1028 0025                  		move.b	$25(a0),d0
0000FCE2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FCE6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FCEA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FCF0 6100 AE02                  		bsr.w	AnimateSprite
0000FCF4 6000 FDF4                  		bra.w	MarkObjGone
0000FCF8                            ; ===========================================================================
0000FCF8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FCFA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FCFC                            ; ===========================================================================
0000FCFC                            
0000FCFC                            Obj50_Move:				; XREF: Obj50_Index2
0000FCFC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FD00 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FD02 5428 0025                  		addq.b	#2,$25(a0)
0000FD06 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FD0C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FD12 0868 0000 0022             		bchg	#0,$22(a0)
0000FD18 6600                       		bne.s	locret_F8E2
0000FD1A 4468 0010                  		neg.w	$10(a0)		; change direction
0000FD1E                            
0000FD1E                            locret_F8E2:
0000FD1E 4E75                       		rts	
0000FD20                            ; ===========================================================================
0000FD20                            
0000FD20                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FD20 6100 DCFA                  		bsr.w	SpeedToPos
0000FD24 6100 0000                  		bsr.w	ObjHitFloor
0000FD28 0C41 FFF8                  		cmpi.w	#-8,d1
0000FD2C 6D00                       		blt.s	Obj50_Pause
0000FD2E 0C41 000C                  		cmpi.w	#$C,d1
0000FD32 6C00                       		bge.s	Obj50_Pause
0000FD34 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FD38 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FD3C 6600                       		bne.s	Obj50_Pause
0000FD3E 4E75                       		rts	
0000FD40                            ; ===========================================================================
0000FD40                            
0000FD40                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FD40 5528 0025                  		subq.b	#2,$25(a0)
0000FD44 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD4A 317C 0000 0010             		move.w	#0,$10(a0)
0000FD50 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD56 4E75                       		rts	
0000FD58                            ; ===========================================================================
0000FD58                            Ani_obj50:
0000FD58                            	include "_anim\obj50.asm"
0000FD58                            ; ---------------------------------------------------------------------------
0000FD58                            ; Animation script - Yadrin enemy
0000FD58                            ; ---------------------------------------------------------------------------
0000FD58 0000                       		dc.w byte_F920-Ani_obj50
0000FD5A 0000                       		dc.w byte_F924-Ani_obj50
0000FD5C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FD60 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FD6A                            		even
0000FD6A                            		even
0000FD6A                            
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            Map_obj50:
0000FD6A                            	include "_maps\obj50.asm"
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FD6E 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FD72 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FD76 05                         byte_F93A:	dc.b 5
0000FD77 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FD7C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FD81 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FD86 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FD8B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FD90 05                         byte_F954:	dc.b 5
0000FD91 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FD96 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FD9B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FDA0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FDA5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FDAA 05                         byte_F96E:	dc.b 5
0000FDAB F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FDB0 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FDB5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FDBA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FDBF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FDC4 05                         byte_F988:	dc.b 5
0000FDC5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FDCA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FDCF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FDD4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FDD9 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FDDE 05                         byte_F9A2:	dc.b 5
0000FDDF F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FDE4 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FDE9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FDEE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FDF3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FDF8 05                         byte_F9BC:	dc.b 5
0000FDF9 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FDFE 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FE03 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FE08 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FE0D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FE12                            		even
0000FE12                            		even
0000FE12                            
0000FE12                            ; ---------------------------------------------------------------------------
0000FE12                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FE12                            ;
0000FE12                            ; variables:
0000FE12                            ; d1 = width
0000FE12                            ; d2 = height /	2 (when	jumping)
0000FE12                            ; d3 = height /	2 (when	walking)
0000FE12                            ; d4 = x-axis position
0000FE12                            ; ---------------------------------------------------------------------------
0000FE12                            
0000FE12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE12                            
0000FE12                            
0000FE12                            SolidObject:
0000FE12 4A28 0025                  		tst.b	$25(a0)
0000FE16 6700 0000                  		beq.w	loc_FAC8
0000FE1A 3401                       		move.w	d1,d2
0000FE1C D442                       		add.w	d2,d2
0000FE1E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FE22 0829 0001 0022             		btst	#1,$22(a1)
0000FE28 6600                       		bne.s	loc_F9FE
0000FE2A 3029 0008                  		move.w	8(a1),d0
0000FE2E 9068 0008                  		sub.w	8(a0),d0
0000FE32 D041                       		add.w	d1,d0
0000FE34 6B00                       		bmi.s	loc_F9FE
0000FE36 B042                       		cmp.w	d2,d0
0000FE38 6500                       		bcs.s	loc_FA12
0000FE3A                            
0000FE3A                            loc_F9FE:
0000FE3A 08A9 0003 0022             		bclr	#3,$22(a1)
0000FE40 08A8 0003 0022             		bclr	#3,$22(a0)
0000FE46 4228 0025                  		clr.b	$25(a0)
0000FE4A 7800                       		moveq	#0,d4
0000FE4C 4E75                       		rts	
0000FE4E                            ; ===========================================================================
0000FE4E                            
0000FE4E                            loc_FA12:
0000FE4E 3404                       		move.w	d4,d2
0000FE50 6100 807A                  		bsr.w	MvSonicOnPtfm
0000FE54 7800                       		moveq	#0,d4
0000FE56 4E75                       		rts	
0000FE58                            ; ===========================================================================
0000FE58                            
0000FE58                            SolidObject71:				; XREF: Obj71_Solid
0000FE58 4A28 0025                  		tst.b	$25(a0)
0000FE5C 6700 0000                  		beq.w	loc_FAD0
0000FE60 3401                       		move.w	d1,d2
0000FE62 D442                       		add.w	d2,d2
0000FE64 43F8 D000                  		lea	($FFFFD000).w,a1
0000FE68 0829 0001 0022             		btst	#1,$22(a1)
0000FE6E 6600                       		bne.s	loc_FA44
0000FE70 3029 0008                  		move.w	8(a1),d0
0000FE74 9068 0008                  		sub.w	8(a0),d0
0000FE78 D041                       		add.w	d1,d0
0000FE7A 6B00                       		bmi.s	loc_FA44
0000FE7C B042                       		cmp.w	d2,d0
0000FE7E 6500                       		bcs.s	loc_FA58
0000FE80                            
0000FE80                            loc_FA44:
0000FE80 08A9 0003 0022             		bclr	#3,$22(a1)
0000FE86 08A8 0003 0022             		bclr	#3,$22(a0)
0000FE8C 4228 0025                  		clr.b	$25(a0)
0000FE90 7800                       		moveq	#0,d4
0000FE92 4E75                       		rts	
0000FE94                            ; ===========================================================================
0000FE94                            
0000FE94                            loc_FA58:
0000FE94 3404                       		move.w	d4,d2
0000FE96 6100 8034                  		bsr.w	MvSonicOnPtfm
0000FE9A 7800                       		moveq	#0,d4
0000FE9C 4E75                       		rts	
0000FE9E                            ; ===========================================================================
0000FE9E                            
0000FE9E                            SolidObject2F:				; XREF: Obj2F_Solid
0000FE9E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FEA2 4A28 0001                  		tst.b	1(a0)
0000FEA6 6A00 0000                  		bpl.w	loc_FB92
0000FEAA 3029 0008                  		move.w	8(a1),d0
0000FEAE 9068 0008                  		sub.w	8(a0),d0
0000FEB2 D041                       		add.w	d1,d0
0000FEB4 6B00 0000                  		bmi.w	loc_FB92
0000FEB8 3601                       		move.w	d1,d3
0000FEBA D643                       		add.w	d3,d3
0000FEBC B043                       		cmp.w	d3,d0
0000FEBE 6200 0000                  		bhi.w	loc_FB92
0000FEC2 3A00                       		move.w	d0,d5
0000FEC4 0828 0000 0001             		btst	#0,1(a0)
0000FECA 6700                       		beq.s	loc_FA94
0000FECC 4645                       		not.w	d5
0000FECE DA43                       		add.w	d3,d5
0000FED0                            
0000FED0                            loc_FA94:
0000FED0 E24D                       		lsr.w	#1,d5
0000FED2 7600                       		moveq	#0,d3
0000FED4 1632 5000                  		move.b	(a2,d5.w),d3
0000FED8 9612                       		sub.b	(a2),d3
0000FEDA 3A28 000C                  		move.w	$C(a0),d5
0000FEDE 9A43                       		sub.w	d3,d5
0000FEE0 1629 0016                  		move.b	$16(a1),d3
0000FEE4 4883                       		ext.w	d3
0000FEE6 D443                       		add.w	d3,d2
0000FEE8 3629 000C                  		move.w	$C(a1),d3
0000FEEC 9645                       		sub.w	d5,d3
0000FEEE 5843                       		addq.w	#4,d3
0000FEF0 D642                       		add.w	d2,d3
0000FEF2 6B00 0000                  		bmi.w	loc_FB92
0000FEF6 3802                       		move.w	d2,d4
0000FEF8 D844                       		add.w	d4,d4
0000FEFA B644                       		cmp.w	d4,d3
0000FEFC 6400 0000                  		bcc.w	loc_FB92
0000FF00 6000 0000                  		bra.w	loc_FB0E
0000FF04                            ; ===========================================================================
0000FF04                            
0000FF04                            loc_FAC8:
0000FF04 4A28 0001                  		tst.b	1(a0)
0000FF08 6A00 0000                  		bpl.w	loc_FB92
0000FF0C                            
0000FF0C                            loc_FAD0:
0000FF0C 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF10 3029 0008                  		move.w	8(a1),d0
0000FF14 9068 0008                  		sub.w	8(a0),d0
0000FF18 D041                       		add.w	d1,d0
0000FF1A 6B00 0000                  		bmi.w	loc_FB92
0000FF1E 3601                       		move.w	d1,d3
0000FF20 D643                       		add.w	d3,d3
0000FF22 B043                       		cmp.w	d3,d0
0000FF24 6200 0000                  		bhi.w	loc_FB92
0000FF28 1629 0016                  		move.b	$16(a1),d3
0000FF2C 4883                       		ext.w	d3
0000FF2E D443                       		add.w	d3,d2
0000FF30 3629 000C                  		move.w	$C(a1),d3
0000FF34 9668 000C                  		sub.w	$C(a0),d3
0000FF38 5843                       		addq.w	#4,d3
0000FF3A D642                       		add.w	d2,d3
0000FF3C 6B00 0000                  		bmi.w	loc_FB92
0000FF40 3802                       		move.w	d2,d4
0000FF42 D844                       		add.w	d4,d4
0000FF44 B644                       		cmp.w	d4,d3
0000FF46 6400 0000                  		bcc.w	loc_FB92
0000FF4A                            
0000FF4A                            loc_FB0E:
0000FF4A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FF4E 6B00 0000                  		bmi.w	loc_FB92
0000FF52 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FF58 6400 0000                  		bcc.w	loc_FB92
0000FF5C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FF60 6600 0000                  		bne.w	loc_FBAC
0000FF64 3A00                       		move.w	d0,d5
0000FF66 B240                       		cmp.w	d0,d1
0000FF68 6400                       		bcc.s	loc_FB36
0000FF6A D241                       		add.w	d1,d1
0000FF6C 9041                       		sub.w	d1,d0
0000FF6E 3A00                       		move.w	d0,d5
0000FF70 4445                       		neg.w	d5
0000FF72                            
0000FF72                            loc_FB36:
0000FF72 3203                       		move.w	d3,d1
0000FF74 B443                       		cmp.w	d3,d2
0000FF76 6400                       		bcc.s	loc_FB44
0000FF78 5943                       		subq.w	#4,d3
0000FF7A 9644                       		sub.w	d4,d3
0000FF7C 3203                       		move.w	d3,d1
0000FF7E 4441                       		neg.w	d1
0000FF80                            
0000FF80                            loc_FB44:
0000FF80 BA41                       		cmp.w	d1,d5
0000FF82 6200 0000                  		bhi.w	loc_FBB0
0000FF86 0C41 0004                  		cmpi.w	#4,d1
0000FF8A 6300                       		bls.s	loc_FB8C
0000FF8C 4A40                       		tst.w	d0
0000FF8E 6700                       		beq.s	loc_FB70
0000FF90 6B00                       		bmi.s	loc_FB5E
0000FF92 4A69 0010                  		tst.w	$10(a1)
0000FF96 6B00                       		bmi.s	loc_FB70
0000FF98 6000                       		bra.s	loc_FB64
0000FF9A                            ; ===========================================================================
0000FF9A                            
0000FF9A                            loc_FB5E:
0000FF9A 4A69 0010                  		tst.w	$10(a1)
0000FF9E 6A00                       		bpl.s	loc_FB70
0000FFA0                            
0000FFA0                            loc_FB64:
0000FFA0 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FFA6 337C 0000 0010             		move.w	#0,$10(a1)
0000FFAC                            
0000FFAC                            loc_FB70:
0000FFAC 9169 0008                  		sub.w	d0,8(a1)
0000FFB0 0829 0001 0022             		btst	#1,$22(a1)
0000FFB6 6600                       		bne.s	loc_FB8C
0000FFB8 08E9 0005 0022             		bset	#5,$22(a1)
0000FFBE 08E8 0005 0022             		bset	#5,$22(a0)
0000FFC4 7801                       		moveq	#1,d4
0000FFC6 4E75                       		rts	
0000FFC8                            ; ===========================================================================
0000FFC8                            
0000FFC8                            loc_FB8C:
0000FFC8 6100                       		bsr.s	loc_FBA0
0000FFCA 7801                       		moveq	#1,d4
0000FFCC 4E75                       		rts	
0000FFCE                            ; ===========================================================================
0000FFCE                            
0000FFCE                            loc_FB92:
0000FFCE 0828 0005 0022             		btst	#5,$22(a0)
0000FFD4 6700                       		beq.s	loc_FBAC
0000FFD6 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FFDC                            
0000FFDC                            loc_FBA0:
0000FFDC 08A8 0005 0022             		bclr	#5,$22(a0)
0000FFE2 08A9 0005 0022             		bclr	#5,$22(a1)
0000FFE8                            
0000FFE8                            loc_FBAC:
0000FFE8 7800                       		moveq	#0,d4
0000FFEA 4E75                       		rts	
0000FFEC                            ; ===========================================================================
0000FFEC                            
0000FFEC                            loc_FBB0:
0000FFEC 4A43                       		tst.w	d3
0000FFEE 6B00                       		bmi.s	loc_FBBC
0000FFF0 0C43 0010                  		cmpi.w	#$10,d3
0000FFF4 6500                       		bcs.s	loc_FBEE
0000FFF6 60D6                       		bra.s	loc_FB92
0000FFF8                            ; ===========================================================================
0000FFF8                            
0000FFF8                            loc_FBBC:
0000FFF8 4A69 0012                  		tst.w	$12(a1)
0000FFFC 6700                       		beq.s	loc_FBD6
0000FFFE 6A00                       		bpl.s	loc_FBD2
00010000 4A43                       		tst.w	d3
00010002 6A00                       		bpl.s	loc_FBD2
00010004 9769 000C                  		sub.w	d3,$C(a1)
00010008 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001000E                            
0001000E                            loc_FBD2:
0001000E 78FF                       		moveq	#-1,d4
00010010 4E75                       		rts	
00010012                            ; ===========================================================================
00010012                            
00010012                            loc_FBD6:
00010012 0829 0001 0022             		btst	#1,$22(a1)
00010018 66F4                       		bne.s	loc_FBD2
0001001A 2F08                       		move.l	a0,-(sp)
0001001C 2049                       		movea.l	a1,a0
0001001E 4EB9 0000 0000             		jsr	KillSonic
00010024 205F                       		movea.l	(sp)+,a0
00010026 78FF                       		moveq	#-1,d4
00010028 4E75                       		rts	
0001002A                            ; ===========================================================================
0001002A                            
0001002A                            loc_FBEE:
0001002A 5943                       		subq.w	#4,d3
0001002C 7200                       		moveq	#0,d1
0001002E 1228 0019                  		move.b	$19(a0),d1
00010032 3401                       		move.w	d1,d2
00010034 D442                       		add.w	d2,d2
00010036 D269 0008                  		add.w	8(a1),d1
0001003A 9268 0008                  		sub.w	8(a0),d1
0001003E 6B00                       		bmi.s	loc_FC28
00010040 B242                       		cmp.w	d2,d1
00010042 6400                       		bcc.s	loc_FC28
00010044 4A69 0012                  		tst.w	$12(a1)
00010048 6B00                       		bmi.s	loc_FC28
0001004A 9769 000C                  		sub.w	d3,$C(a1)
0001004E 5369 000C                  		subq.w	#1,$C(a1)
00010052 6100                       		bsr.s	sub_FC2C
00010054 117C 0002 0025             		move.b	#2,$25(a0)
0001005A 08E8 0003 0022             		bset	#3,$22(a0)
00010060 78FF                       		moveq	#-1,d4
00010062 4E75                       		rts	
00010064                            ; ===========================================================================
00010064                            
00010064                            loc_FC28:
00010064 7800                       		moveq	#0,d4
00010066 4E75                       		rts	
00010068                            ; End of function SolidObject
00010068                            
00010068                            
00010068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010068                            
00010068                            
00010068                            sub_FC2C:				; XREF: SolidObject
00010068 0829 0003 0022             		btst	#3,$22(a1)
0001006E 6700                       		beq.s	loc_FC4E
00010070 7000                       		moveq	#0,d0
00010072 1029 003D                  		move.b	$3D(a1),d0
00010076 ED48                       		lsl.w	#6,d0
00010078 0680 00FF D000             		addi.l	#$FFD000,d0
0001007E 2440                       		movea.l	d0,a2
00010080 08AA 0003 0022             		bclr	#3,$22(a2)
00010086 422A 0025                  		clr.b	$25(a2)
0001008A                            
0001008A                            loc_FC4E:
0001008A 3008                       		move.w	a0,d0
0001008C 0440 D000                  		subi.w	#-$3000,d0
00010090 EC48                       		lsr.w	#6,d0
00010092 0240 007F                  		andi.w	#$7F,d0
00010096 1340 003D                  		move.b	d0,$3D(a1)
0001009A 137C 0000 0026             		move.b	#0,$26(a1)
000100A0 337C 0000 0012             		move.w	#0,$12(a1)
000100A6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000100AC 0829 0001 0022             		btst	#1,$22(a1)
000100B2 6700                       		beq.s	loc_FC84
000100B4 2F08                       		move.l	a0,-(sp)
000100B6 2049                       		movea.l	a1,a0
000100B8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000100BE 205F                       		movea.l	(sp)+,a0
000100C0                            
000100C0                            loc_FC84:
000100C0 08E9 0003 0022             		bset	#3,$22(a1)
000100C6 08E8 0003 0022             		bset	#3,$22(a0)
000100CC 4E75                       		rts	
000100CE                            ; End of function sub_FC2C
000100CE                            
000100CE                            ; ===========================================================================
000100CE                            ; ---------------------------------------------------------------------------
000100CE                            ; Object 51 - smashable	green block (MZ)
000100CE                            ; ---------------------------------------------------------------------------
000100CE                            
000100CE                            Obj51:					; XREF: Obj_Index
000100CE 7000                       		moveq	#0,d0
000100D0 1028 0024                  		move.b	$24(a0),d0
000100D4 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000100D8 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000100DC 6000 FA0C                  		bra.w	MarkObjGone
000100E0                            ; ===========================================================================
000100E0 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000100E2 0000                       		dc.w Obj51_Solid-Obj51_Index
000100E4 0000                       		dc.w Obj51_Display-Obj51_Index
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj51_Main:				; XREF: Obj51_Index
000100E6 5428 0024                  		addq.b	#2,$24(a0)
000100EA 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000100F2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000100F8 117C 0004 0001             		move.b	#4,1(a0)
000100FE 117C 0010 0019             		move.b	#$10,$19(a0)
00010104 117C 0004 0018             		move.b	#4,$18(a0)
0001010A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010110                            
00010110                            Obj51_Solid:				; XREF: Obj51_Index
00010110 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010116 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001011C 323C 001B                  		move.w	#$1B,d1
00010120 343C 0010                  		move.w	#$10,d2
00010124 363C 0011                  		move.w	#$11,d3
00010128 3828 0008                  		move.w	8(a0),d4
0001012C 6100 FCE4                  		bsr.w	SolidObject
00010130 0828 0003 0022             		btst	#3,$22(a0)
00010136 6600                       		bne.s	Obj51_Smash
00010138                            
00010138                            locret_FCFC:
00010138 4E75                       		rts	
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            Obj51_Smash:				; XREF: Obj51_Solid
0001013A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010140 66F6                       		bne.s	locret_FCFC	; if not, branch
00010142 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010148 08E9 0002 0022             		bset	#2,$22(a1)
0001014E 137C 000E 0016             		move.b	#$E,$16(a1)
00010154 137C 0007 0017             		move.b	#7,$17(a1)
0001015A 137C 0002 001C             		move.b	#2,$1C(a1)
00010160 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010166 08E9 0001 0022             		bset	#1,$22(a1)
0001016C 08A9 0003 0022             		bclr	#3,$22(a1)
00010172 137C 0002 0024             		move.b	#2,$24(a1)
00010178 08A8 0003 0022             		bclr	#3,$22(a0)
0001017E 4228 0025                  		clr.b	$25(a0)
00010182 117C 0001 001A             		move.b	#1,$1A(a0)
00010188 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001018E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010190 343C 0038                  		move.w	#$38,d2
00010194 6100 D49A                  		bsr.w	SmashObject
00010198 6100 DD2E                  		bsr.w	SingleObjLoad
0001019C 6600                       		bne.s	Obj51_Display
0001019E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000101A2 3368 0008 0008             		move.w	8(a0),8(a1)
000101A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000101AE 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000101B2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000101B6 0C42 0006                  		cmpi.w	#6,d2
000101BA 6500                       		bcs.s	Obj51_Bonus
000101BC 7406                       		moveq	#6,d2
000101BE                            
000101BE                            Obj51_Bonus:
000101BE 7000                       		moveq	#0,d0
000101C0 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000101C4 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000101CA 6500                       		bcs.s	loc_FD98	; if not, branch
000101CC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000101D0 740A                       		moveq	#10,d2
000101D2                            
000101D2                            loc_FD98:
000101D2 4EB9 0000 0000             		jsr	AddPoints
000101D8 E24A                       		lsr.w	#1,d2
000101DA 1342 001A                  		move.b	d2,$1A(a1)
000101DE                            
000101DE                            Obj51_Display:				; XREF: Obj51_Index
000101DE 6100 D83C                  		bsr.w	SpeedToPos
000101E2 0668 0038 0012             		addi.w	#$38,$12(a0)
000101E8 6100 D858                  		bsr.w	DisplaySprite
000101EC 4A28 0001                  		tst.b	1(a0)
000101F0 6A00 D88C                  		bpl.w	DeleteObject
000101F4 4E75                       		rts	
000101F6                            ; ===========================================================================
000101F6 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000101FA FF00 FF00                  		dc.w $FF00, $FF00
000101FE 0200 FE00                  		dc.w $200, $FE00
00010202 0100 FF00                  		dc.w $100, $FF00
00010206                            
00010206 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001020E                            ; ---------------------------------------------------------------------------
0001020E                            ; Sprite mappings - smashable green block (MZ)
0001020E                            ; ---------------------------------------------------------------------------
0001020E                            Map_obj51:
0001020E                            	include "_maps\obj51.asm"
0001020E                            ; ---------------------------------------------------------------------------
0001020E                            ; Sprite mappings - smashable green block (MZ)
0001020E                            ; ---------------------------------------------------------------------------
0001020E 0000                       		dc.w byte_FDD8-Map_obj51
00010210 0000                       		dc.w byte_FDE3-Map_obj51
00010212 02                         byte_FDD8:	dc.b 2
00010213 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010218 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001021D 04                         byte_FDE3:	dc.b 4
0001021E F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010223 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010228 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001022D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010232                            		even
00010232                            		even
00010232                            
00010232                            ; ===========================================================================
00010232                            ; ---------------------------------------------------------------------------
00010232                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010232                            ; ---------------------------------------------------------------------------
00010232                            
00010232                            Obj52:					; XREF: Obj_Index
00010232 7000                       		moveq	#0,d0
00010234 1028 0024                  		move.b	$24(a0),d0
00010238 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001023C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010240                            ; ===========================================================================
00010240 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010242 0000                       		dc.w Obj52_Platform-Obj52_Index
00010244 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010246                            
00010246 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010248 2001                       		dc.b $20, 1
0001024A 2002                       		dc.b $20, 2
0001024C 4003                       		dc.b $40, 3
0001024E 3004                       		dc.b $30, 4
00010250                            ; ===========================================================================
00010250                            
00010250                            Obj52_Main:				; XREF: Obj52_Index
00010250 5428 0024                  		addq.b	#2,$24(a0)
00010254 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001025C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010262 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010268 6600                       		bne.s	loc_FE44
0001026A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010272 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010278 117C 0007 0016             		move.b	#7,$16(a0)
0001027E                            
0001027E                            loc_FE44:
0001027E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010284 6600                       		bne.s	loc_FE60
00010286 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001028C 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010292 6700                       		beq.s	loc_FE60	; if yes, branch
00010294 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001029A                            
0001029A                            loc_FE60:
0001029A 117C 0004 0001             		move.b	#4,1(a0)
000102A0 7000                       		moveq	#0,d0
000102A2 1028 0028                  		move.b	$28(a0),d0
000102A6 E648                       		lsr.w	#3,d0
000102A8 0240 001E                  		andi.w	#$1E,d0
000102AC 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000102B0 115A 0019                  		move.b	(a2)+,$19(a0)
000102B4 115A 001A                  		move.b	(a2)+,$1A(a0)
000102B8 117C 0004 0018             		move.b	#4,$18(a0)
000102BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000102C4 3168 000C 0032             		move.w	$C(a0),$32(a0)
000102CA 0228 000F 0028             		andi.b	#$F,$28(a0)
000102D0                            
000102D0                            Obj52_Platform:				; XREF: Obj52_Index
000102D0 6100 0000                  		bsr.w	Obj52_Move
000102D4 7200                       		moveq	#0,d1
000102D6 1228 0019                  		move.b	$19(a0),d1
000102DA 4EB9 0000 77FA             		jsr	(PlatformObject).l
000102E0 6000                       		bra.s	Obj52_ChkDel
000102E2                            ; ===========================================================================
000102E2                            
000102E2                            Obj52_StandOn:				; XREF: Obj52_Index
000102E2 7200                       		moveq	#0,d1
000102E4 1228 0019                  		move.b	$19(a0),d1
000102E8 4EB9 0000 796E             		jsr	(ExitPlatform).l
000102EE 3F28 0008                  		move.w	8(a0),-(sp)
000102F2 6100 0000                  		bsr.w	Obj52_Move
000102F6 341F                       		move.w	(sp)+,d2
000102F8 4EB9 0000 7ED8             		jsr	(MvSonicOnPtfm2).l
000102FE                            
000102FE                            Obj52_ChkDel:				; XREF: Obj52_Platform
000102FE 3028 0030                  		move.w	$30(a0),d0
00010302 0240 FF80                  		andi.w	#$FF80,d0
00010306 3238 F700                  		move.w	($FFFFF700).w,d1
0001030A 0441 0080                  		subi.w	#$80,d1
0001030E 0241 FF80                  		andi.w	#$FF80,d1
00010312 9041                       		sub.w	d1,d0
00010314 0C40 0280                  		cmpi.w	#$280,d0
00010318 6200 D764                  		bhi.w	DeleteObject
0001031C 6000 D724                  		bra.w	DisplaySprite
00010320                            ; ===========================================================================
00010320                            
00010320                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010320 7000                       		moveq	#0,d0
00010322 1028 0028                  		move.b	$28(a0),d0
00010326 0240 000F                  		andi.w	#$F,d0
0001032A D040                       		add.w	d0,d0
0001032C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010330 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010334                            ; ===========================================================================
00010334 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010338 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001033C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010340 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010344 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010348 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001034A                            ; ===========================================================================
0001034A                            
0001034A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001034A 4E75                       		rts	
0001034C                            ; ===========================================================================
0001034C                            
0001034C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001034C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010350 323C 0060                  		move.w	#$60,d1
00010354 0828 0000 0022             		btst	#0,$22(a0)
0001035A 6700                       		beq.s	loc_FF26
0001035C 4440                       		neg.w	d0
0001035E D041                       		add.w	d1,d0
00010360                            
00010360                            loc_FF26:
00010360 3228 0030                  		move.w	$30(a0),d1
00010364 9240                       		sub.w	d0,d1
00010366 3141 0008                  		move.w	d1,8(a0)
0001036A 4E75                       		rts	
0001036C                            ; ===========================================================================
0001036C                            
0001036C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001036C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010372 6600                       		bne.s	Obj52_02_Wait
00010374 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010378                            
00010378                            Obj52_02_Wait:
00010378 4E75                       		rts	
0001037A                            ; ===========================================================================
0001037A                            
0001037A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001037A 7600                       		moveq	#0,d3
0001037C 1628 0019                  		move.b	$19(a0),d3
00010380 6100 0000                  		bsr.w	ObjHitWallRight
00010384 4A41                       		tst.w	d1		; has the platform hit a wall?
00010386 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010388 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001038C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010392 4E75                       		rts	
00010394                            ; ===========================================================================
00010394                            
00010394                            Obj52_03_End:
00010394 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010398 4E75                       		rts	
0001039A                            ; ===========================================================================
0001039A                            
0001039A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001039A 7600                       		moveq	#0,d3
0001039C 1628 0019                  		move.b	$19(a0),d3
000103A0 6100 0000                  		bsr.w	ObjHitWallRight
000103A4 4A41                       		tst.w	d1		; has the platform hit a wall?
000103A6 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000103A8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000103AC 3168 0008 0030             		move.w	8(a0),$30(a0)
000103B2 4E75                       		rts	
000103B4                            ; ===========================================================================
000103B4                            
000103B4                            Obj52_05_End:
000103B4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000103B8 4E75                       		rts	
000103BA                            ; ===========================================================================
000103BA                            
000103BA                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000103BA 6100 D660                  		bsr.w	SpeedToPos
000103BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000103C4 6100 0000                  		bsr.w	ObjHitFloor
000103C8 4A41                       		tst.w	d1		; has platform hit the floor?
000103CA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000103CE D368 000C                  		add.w	d1,$C(a0)
000103D2 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000103D6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000103DA                            
000103DA                            locret_FFA0:
000103DA 4E75                       		rts	
000103DC                            ; ===========================================================================
000103DC                            
000103DC                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000103DC 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000103E0 6700                       		beq.s	Obj52_07_ChkDel
000103E2 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000103E6                            
000103E6                            Obj52_07_ChkDel:
000103E6 588F                       		addq.l	#4,sp
000103E8 3028 0030                  		move.w	$30(a0),d0
000103EC 0240 FF80                  		andi.w	#$FF80,d0
000103F0 3238 F700                  		move.w	($FFFFF700).w,d1
000103F4 0441 0080                  		subi.w	#$80,d1
000103F8 0241 FF80                  		andi.w	#$FF80,d1
000103FC 9041                       		sub.w	d1,d0
000103FE 0C40 0280                  		cmpi.w	#$280,d0
00010402 6200 D67A                  		bhi.w	DeleteObject
00010406 4E75                       		rts	
00010408                            ; ===========================================================================
00010408                            
00010408                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010408 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001040C 323C 0080                  		move.w	#$80,d1
00010410 0828 0000 0022             		btst	#0,$22(a0)
00010416 6700                       		beq.s	loc_FFE2
00010418 4440                       		neg.w	d0
0001041A D041                       		add.w	d1,d0
0001041C                            
0001041C                            loc_FFE2:
0001041C 3228 0032                  		move.w	$32(a0),d1
00010420 9240                       		sub.w	d0,d1
00010422 3141 000C                  		move.w	d1,$C(a0)
00010426 4E75                       		rts	
00010428                            ; ===========================================================================
00010428                            
00010428                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010428 7600                       		moveq	#0,d3
0001042A 1628 0019                  		move.b	$19(a0),d3
0001042E D643                       		add.w	d3,d3
00010430 7208                       		moveq	#8,d1
00010432 0828 0000 0022             		btst	#0,$22(a0)
00010438 6700                       		beq.s	loc_10004
0001043A 4441                       		neg.w	d1
0001043C 4443                       		neg.w	d3
0001043E                            
0001043E                            loc_10004:
0001043E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010442 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010444 3028 0008                  		move.w	8(a0),d0
00010448 9068 0030                  		sub.w	$30(a0),d0
0001044C B043                       		cmp.w	d3,d0
0001044E 6700                       		beq.s	Obj52_0A_Wait
00010450 D368 0008                  		add.w	d1,8(a0)	; move platform
00010454 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001045A 4E75                       		rts	
0001045C                            ; ===========================================================================
0001045C                            
0001045C                            Obj52_0A_Wait:
0001045C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010460 6600                       		bne.s	locret_1002E	; if time remains, branch
00010462 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010468                            
00010468                            locret_1002E:
00010468 4E75                       		rts	
0001046A                            ; ===========================================================================
0001046A                            
0001046A                            Obj52_0A_Back:
0001046A 3028 0008                  		move.w	8(a0),d0
0001046E 9068 0030                  		sub.w	$30(a0),d0
00010472 6700                       		beq.s	Obj52_0A_Reset
00010474 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010478 4E75                       		rts	
0001047A                            ; ===========================================================================
0001047A                            
0001047A                            Obj52_0A_Reset:
0001047A 4268 0036                  		clr.w	$36(a0)
0001047E 5328 0028                  		subq.b	#1,$28(a0)
00010482 4E75                       		rts	
00010484                            ; ===========================================================================
00010484                            ; ---------------------------------------------------------------------------
00010484                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010484                            ; ---------------------------------------------------------------------------
00010484                            Map_obj52:
00010484                            	include "_maps\obj52mz.asm"
00010484                            ; ---------------------------------------------------------------------------
00010484                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010484                            ; ---------------------------------------------------------------------------
00010484 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010488 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001048C 0000                       		dc.w byte_1008F-Map_obj52
0001048E 01                         byte_10054:	dc.b 1
0001048F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010494 02                         byte_1005A:	dc.b 2
00010495 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001049A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001049F 04                         byte_10065:	dc.b 4
000104A0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000104A5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000104AA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000104AF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000104B4 04                         byte_1007A:	dc.b 4
000104B5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000104BA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000104BF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000104C4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000104C9 03                         byte_1008F:	dc.b 3
000104CA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000104CF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000104D4 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000104DA 00                         		even
000104DA 00                         		even
000104DA                            
000104DA                            ; ---------------------------------------------------------------------------
000104DA                            ; Sprite mappings - moving block (LZ)
000104DA                            ; ---------------------------------------------------------------------------
000104DA                            Map_obj52a:
000104DA                            	include "_maps\obj52lz.asm"
000104DA                            ; ---------------------------------------------------------------------------
000104DA                            ; Sprite mappings - moving block (LZ)
000104DA                            ; ---------------------------------------------------------------------------
000104DA 0000                       		dc.w byte_100A2-Map_obj52a
000104DC 01                         byte_100A2:	dc.b 1
000104DD F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000104E2                            		even
000104E2                            		even
000104E2                            
000104E2                            ; ===========================================================================
000104E2                            ; ---------------------------------------------------------------------------
000104E2                            ; Object 55 - Basaran enemy (MZ)
000104E2                            ; ---------------------------------------------------------------------------
000104E2                            
000104E2                            Obj55:					; XREF: Obj_Index
000104E2 7000                       		moveq	#0,d0
000104E4 1028 0024                  		move.b	$24(a0),d0
000104E8 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000104EC 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000104F0                            ; ===========================================================================
000104F0 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000104F2 0000                       		dc.w Obj55_Action-Obj55_Index
000104F4                            ; ===========================================================================
000104F4                            
000104F4                            Obj55_Main:				; XREF: Obj55_Index
000104F4 5428 0024                  		addq.b	#2,$24(a0)
000104F8 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010500 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010506 117C 0004 0001             		move.b	#4,1(a0)
0001050C 117C 000C 0016             		move.b	#$C,$16(a0)
00010512 117C 0002 0018             		move.b	#2,$18(a0)
00010518 117C 000B 0020             		move.b	#$B,$20(a0)
0001051E 117C 0010 0019             		move.b	#$10,$19(a0)
00010524                            
00010524                            Obj55_Action:				; XREF: Obj55_Index
00010524 7000                       		moveq	#0,d0
00010526 1028 0025                  		move.b	$25(a0),d0
0001052A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001052E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010532 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010538 6100 A5BA                  		bsr.w	AnimateSprite
0001053C 6000 F5AC                  		bra.w	MarkObjGone
00010540                            ; ===========================================================================
00010540 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010542 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010544 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010546 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010548                            ; ===========================================================================
00010548                            
00010548                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010548 343C 0080                  		move.w	#$80,d2
0001054C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010550 6400                       		bcc.s	Obj55_NoDrop
00010552 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010556 3140 0036                  		move.w	d0,$36(a0)
0001055A 9068 000C                  		sub.w	$C(a0),d0
0001055E 6500                       		bcs.s	Obj55_NoDrop
00010560 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010564 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010566 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001056A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001056C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010570 D007                       		add.b	d7,d0
00010572 0200 0007                  		andi.b	#7,d0
00010576 6600                       		bne.s	Obj55_NoDrop
00010578 117C 0001 001C             		move.b	#1,$1C(a0)
0001057E 5428 0025                  		addq.b	#2,$25(a0)
00010582                            
00010582                            Obj55_NoDrop:
00010582 4E75                       		rts	
00010584                            ; ===========================================================================
00010584                            
00010584                            Obj55_DropFly:				; XREF: Obj55_Index2
00010584 6100 D496                  		bsr.w	SpeedToPos
00010588 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001058E 343C 0080                  		move.w	#$80,d2
00010592 6100 0000                  		bsr.w	Obj55_ChkSonic
00010596 3028 0036                  		move.w	$36(a0),d0
0001059A 9068 000C                  		sub.w	$C(a0),d0
0001059E 6500                       		bcs.s	Obj55_ChkDel
000105A0 0C40 0010                  		cmpi.w	#$10,d0
000105A4 6400                       		bcc.s	locret_10180
000105A6 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000105AA 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000105B0 117C 0002 001C             		move.b	#2,$1C(a0)
000105B6 5428 0025                  		addq.b	#2,$25(a0)
000105BA                            
000105BA                            locret_10180:
000105BA 4E75                       		rts	
000105BC                            ; ===========================================================================
000105BC                            
000105BC                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000105BC 4A28 0001                  		tst.b	1(a0)
000105C0 6A00 D4BC                  		bpl.w	DeleteObject
000105C4 4E75                       		rts	
000105C6                            ; ===========================================================================
000105C6                            
000105C6                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000105C6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000105CA 0200 000F                  		andi.b	#$F,d0
000105CE 6600                       		bne.s	loc_101A0
000105D0 303C 00C0                  		move.w	#$C0,d0
000105D4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
000105DA                            
000105DA                            loc_101A0:
000105DA 6100 D440                  		bsr.w	SpeedToPos
000105DE 3038 D008                  		move.w	($FFFFD008).w,d0
000105E2 9068 0008                  		sub.w	8(a0),d0
000105E6 6400                       		bcc.s	loc_101B0
000105E8 4440                       		neg.w	d0
000105EA                            
000105EA                            loc_101B0:
000105EA 0C40 0080                  		cmpi.w	#$80,d0
000105EE 6500                       		bcs.s	locret_101C6
000105F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000105F4 D007                       		add.b	d7,d0
000105F6 0200 0007                  		andi.b	#7,d0
000105FA 6600                       		bne.s	locret_101C6
000105FC 5428 0025                  		addq.b	#2,$25(a0)
00010600                            
00010600                            locret_101C6:
00010600 4E75                       		rts	
00010602                            ; ===========================================================================
00010602                            
00010602                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010602 6100 D418                  		bsr.w	SpeedToPos
00010606 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001060C 6100 0000                  		bsr.w	ObjHitCeiling
00010610 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010612 6A00                       		bpl.s	locret_101F4	; if not, branch
00010614 9368 000C                  		sub.w	d1,$C(a0)
00010618 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001061E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010622 4268 0012                  		clr.w	$12(a0)
00010626 4228 001C                  		clr.b	$1C(a0)
0001062A 4228 0025                  		clr.b	$25(a0)
0001062E                            
0001062E                            locret_101F4:
0001062E 4E75                       		rts	
00010630                            ; ===========================================================================
00010630                            
00010630                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010630 323C 0100                  		move.w	#$100,d1
00010634 08E8 0000 0022             		bset	#0,$22(a0)
0001063A 3038 D008                  		move.w	($FFFFD008).w,d0
0001063E 9068 0008                  		sub.w	8(a0),d0
00010642 6400                       		bcc.s	loc_10214
00010644 4440                       		neg.w	d0
00010646 4441                       		neg.w	d1
00010648 08A8 0000 0022             		bclr	#0,$22(a0)
0001064E                            
0001064E                            loc_10214:
0001064E B042                       		cmp.w	d2,d0
00010650 4E75                       		rts	
00010652                            ; ===========================================================================
00010652 6100 D3C8                  		bsr.w	SpeedToPos
00010656 6100 D3EA                  		bsr.w	DisplaySprite
0001065A 4A28 0001                  		tst.b	1(a0)
0001065E 6A00 D41E                  		bpl.w	DeleteObject
00010662 4E75                       		rts	
00010664                            ; ===========================================================================
00010664                            Ani_obj55:
00010664                            	include "_anim\obj55.asm"
00010664                            ; ---------------------------------------------------------------------------
00010664                            ; Animation script - Basaran enemy
00010664                            ; ---------------------------------------------------------------------------
00010664 0000                       		dc.w byte_10230-Ani_obj55
00010666 0000                       		dc.w byte_10234-Ani_obj55
00010668 0000                       		dc.w byte_10238-Ani_obj55
0001066A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001066E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010672 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010678                            		even
00010678                            		even
00010678                            
00010678                            ; ---------------------------------------------------------------------------
00010678                            ; Sprite mappings - Basaran enemy (MZ)
00010678                            ; ---------------------------------------------------------------------------
00010678                            Map_obj55:
00010678                            	include "_maps\obj55.asm"
00010678                            ; ---------------------------------------------------------------------------
00010678                            ; Sprite mappings - Basaran enemy (MZ)
00010678                            ; ---------------------------------------------------------------------------
00010678 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001067C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010680 01                         byte_10246:	dc.b 1
00010681 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010686 03                         byte_1024C:	dc.b 3
00010687 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001068C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010691 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010696 04                         byte_1025C:	dc.b 4
00010697 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001069C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000106A1 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000106A6 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000106AB 04                         byte_10271:	dc.b 4
000106AC F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000106B1 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000106B6 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000106BB FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000106C0                            		even
000106C0                            		even
000106C0                            
000106C0                            ; ===========================================================================
000106C0                            ; ---------------------------------------------------------------------------
000106C0                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000106C0                            ; ---------------------------------------------------------------------------
000106C0                            
000106C0                            Obj56:					; XREF: Obj_Index
000106C0 7000                       		moveq	#0,d0
000106C2 1028 0024                  		move.b	$24(a0),d0
000106C6 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000106CA 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000106CE                            ; ===========================================================================
000106CE 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000106D0 0000                       		dc.w Obj56_Action-Obj56_Index
000106D2                            
000106D2 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000106D4 2020                       		dc.b  $20, $20
000106D6 1020                       		dc.b  $10, $20
000106D8 201A                       		dc.b  $20, $1A
000106DA 1027                       		dc.b  $10, $27
000106DC 1010                       		dc.b  $10, $10
000106DE 0820                       		dc.b	8, $20
000106E0 4010                       		dc.b  $40, $10
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            Obj56_Main:				; XREF: Obj56_Index
000106E2 5428 0024                  		addq.b	#2,$24(a0)
000106E6 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000106EE 317C 4000 0002             		move.w	#$4000,2(a0)
000106F4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000106FA 6600                       		bne.s	loc_102C8
000106FC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010702                            
00010702                            loc_102C8:
00010702 117C 0004 0001             		move.b	#4,1(a0)
00010708 117C 0003 0018             		move.b	#3,$18(a0)
0001070E 7000                       		moveq	#0,d0
00010710 1028 0028                  		move.b	$28(a0),d0
00010714 E648                       		lsr.w	#3,d0
00010716 0240 000E                  		andi.w	#$E,d0
0001071A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001071E 115A 0019                  		move.b	(a2)+,$19(a0)
00010722 1152 0016                  		move.b	(a2),$16(a0)
00010726 E248                       		lsr.w	#1,d0
00010728 1140 001A                  		move.b	d0,$1A(a0)
0001072C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010732 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010738 7000                       		moveq	#0,d0
0001073A 1012                       		move.b	(a2),d0
0001073C D040                       		add.w	d0,d0
0001073E 3140 003A                  		move.w	d0,$3A(a0)
00010742 7000                       		moveq	#0,d0
00010744 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001074A 6700                       		beq.s	loc_10332
0001074C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010750 0240 000F                  		andi.w	#$F,d0
00010754 5140                       		subq.w	#8,d0
00010756 6500                       		bcs.s	loc_10332
00010758 E548                       		lsl.w	#2,d0
0001075A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001075E 45F2 0000                  		lea	(a2,d0.w),a2
00010762 4A52                       		tst.w	(a2)
00010764 6A00                       		bpl.s	loc_10332
00010766 0868 0000 0022             		bchg	#0,$22(a0)
0001076C                            
0001076C                            loc_10332:
0001076C 1028 0028                  		move.b	$28(a0),d0
00010770 6A00                       		bpl.s	Obj56_Action
00010772 0200 000F                  		andi.b	#$F,d0
00010776 1140 003C                  		move.b	d0,$3C(a0)
0001077A 117C 0005 0028             		move.b	#5,$28(a0)
00010780 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010786 6600                       		bne.s	Obj56_ChkGone
00010788 117C 000C 0028             		move.b	#$C,$28(a0)
0001078E 317C 0080 003A             		move.w	#$80,$3A(a0)
00010794                            
00010794                            Obj56_ChkGone:
00010794 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010798 7000                       		moveq	#0,d0
0001079A 1028 0023                  		move.b	$23(a0),d0
0001079E 6700                       		beq.s	Obj56_Action
000107A0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000107A6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000107AC 6700                       		beq.s	Obj56_Action
000107AE 5228 0028                  		addq.b	#1,$28(a0)
000107B2 4268 003A                  		clr.w	$3A(a0)
000107B6                            
000107B6                            Obj56_Action:				; XREF: Obj56_Index
000107B6 3F28 0008                  		move.w	8(a0),-(sp)
000107BA 7000                       		moveq	#0,d0
000107BC 1028 0028                  		move.b	$28(a0),d0	; get object type
000107C0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000107C4 D040                       		add.w	d0,d0
000107C6 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000107CA 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000107CE 381F                       		move.w	(sp)+,d4
000107D0 4A28 0001                  		tst.b	1(a0)
000107D4 6A00                       		bpl.s	Obj56_ChkDel
000107D6 7200                       		moveq	#0,d1
000107D8 1228 0019                  		move.b	$19(a0),d1
000107DC 0641 000B                  		addi.w	#$B,d1
000107E0 7400                       		moveq	#0,d2
000107E2 1428 0016                  		move.b	$16(a0),d2
000107E6 3602                       		move.w	d2,d3
000107E8 5243                       		addq.w	#1,d3
000107EA 6100 F626                  		bsr.w	SolidObject
000107EE                            
000107EE                            Obj56_ChkDel:
000107EE 3028 0034                  		move.w	$34(a0),d0
000107F2 0240 FF80                  		andi.w	#$FF80,d0
000107F6 3238 F700                  		move.w	($FFFFF700).w,d1
000107FA 0441 0080                  		subi.w	#$80,d1
000107FE 0241 FF80                  		andi.w	#$FF80,d1
00010802 9041                       		sub.w	d1,d0
00010804 0C40 0280                  		cmpi.w	#$280,d0
00010808 6200 D274                  		bhi.w	DeleteObject
0001080C 6000 D234                  		bra.w	DisplaySprite
00010810                            ; ===========================================================================
00010810 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010814 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010818 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001081C 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010820 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010824 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010828 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001082C                            ; ===========================================================================
0001082C                            
0001082C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001082C 4E75                       		rts	
0001082E                            ; ===========================================================================
0001082E                            
0001082E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001082E 323C 0040                  		move.w	#$40,d1
00010832 7000                       		moveq	#0,d0
00010834 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010838 6000                       		bra.s	Obj56_Move_LR
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001083A 323C 0080                  		move.w	#$80,d1
0001083E 7000                       		moveq	#0,d0
00010840 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010844                            
00010844                            Obj56_Move_LR:
00010844 0828 0000 0022             		btst	#0,$22(a0)
0001084A 6700                       		beq.s	loc_10416
0001084C 4440                       		neg.w	d0
0001084E D041                       		add.w	d1,d0
00010850                            
00010850                            loc_10416:
00010850 3228 0034                  		move.w	$34(a0),d1
00010854 9240                       		sub.w	d0,d1
00010856 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001085A 4E75                       		rts	
0001085C                            ; ===========================================================================
0001085C                            
0001085C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001085C 323C 0040                  		move.w	#$40,d1
00010860 7000                       		moveq	#0,d0
00010862 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010866 6000                       		bra.s	Obj56_Move_UD
00010868                            ; ===========================================================================
00010868                            
00010868                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010868 323C 0080                  		move.w	#$80,d1
0001086C 7000                       		moveq	#0,d0
0001086E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010872                            
00010872                            Obj56_Move_UD:
00010872 0828 0000 0022             		btst	#0,$22(a0)
00010878 6700                       		beq.s	loc_10444
0001087A 4440                       		neg.w	d0
0001087C D041                       		add.w	d1,d0
0001087E                            
0001087E                            loc_10444:
0001087E 3228 0030                  		move.w	$30(a0),d1
00010882 9240                       		sub.w	d0,d1
00010884 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010888 4E75                       		rts	
0001088A                            ; ===========================================================================
0001088A                            
0001088A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0001088A 4A28 0038                  		tst.b	$38(a0)
0001088E 6600                       		bne.s	loc_104A4
00010890 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010896 6600                       		bne.s	loc_1047A	; if not, branch
00010898 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001089E 6600                       		bne.s	loc_1047A
000108A0 4238 F7C9                  		clr.b	($FFFFF7C9).w
000108A4 3038 D008                  		move.w	($FFFFD008).w,d0
000108A8 B068 0008                  		cmp.w	8(a0),d0
000108AC 6400                       		bcc.s	loc_1047A
000108AE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000108B4                            
000108B4                            loc_1047A:
000108B4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000108B8 7000                       		moveq	#0,d0
000108BA 1028 003C                  		move.b	$3C(a0),d0
000108BE 0832 0000 0000             		btst	#0,(a2,d0.w)
000108C4 6700                       		beq.s	loc_104AE
000108C6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000108CC 6600                       		bne.s	loc_1049E	; if not, branch
000108CE 0C00 0003                  		cmpi.b	#3,d0
000108D2 6600                       		bne.s	loc_1049E
000108D4 4238 F7C9                  		clr.b	($FFFFF7C9).w
000108D8                            
000108D8                            loc_1049E:
000108D8 117C 0001 0038             		move.b	#1,$38(a0)
000108DE                            
000108DE                            loc_104A4:
000108DE 4A68 003A                  		tst.w	$3A(a0)
000108E2 6700                       		beq.s	loc_104C8
000108E4 5568 003A                  		subq.w	#2,$3A(a0)
000108E8                            
000108E8                            loc_104AE:
000108E8 3028 003A                  		move.w	$3A(a0),d0
000108EC 0828 0000 0022             		btst	#0,$22(a0)
000108F2 6700                       		beq.s	loc_104BC
000108F4 4440                       		neg.w	d0
000108F6                            
000108F6                            loc_104BC:
000108F6 3228 0030                  		move.w	$30(a0),d1
000108FA D240                       		add.w	d0,d1
000108FC 3141 000C                  		move.w	d1,$C(a0)
00010900 4E75                       		rts	
00010902                            ; ===========================================================================
00010902                            
00010902                            loc_104C8:
00010902 5228 0028                  		addq.b	#1,$28(a0)
00010906 4228 0038                  		clr.b	$38(a0)
0001090A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001090E 7000                       		moveq	#0,d0
00010910 1028 0023                  		move.b	$23(a0),d0
00010914 67D2                       		beq.s	loc_104AE
00010916 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001091C 60CA                       		bra.s	loc_104AE
0001091E                            ; ===========================================================================
0001091E                            
0001091E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001091E 4A28 0038                  		tst.b	$38(a0)
00010922 6600                       		bne.s	loc_10500
00010924 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010928 7000                       		moveq	#0,d0
0001092A 1028 003C                  		move.b	$3C(a0),d0
0001092E 4A32 0000                  		tst.b	(a2,d0.w)
00010932 6A00                       		bpl.s	loc_10512
00010934 117C 0001 0038             		move.b	#1,$38(a0)
0001093A                            
0001093A                            loc_10500:
0001093A 7000                       		moveq	#0,d0
0001093C 1028 0016                  		move.b	$16(a0),d0
00010940 D040                       		add.w	d0,d0
00010942 B068 003A                  		cmp.w	$3A(a0),d0
00010946 6700                       		beq.s	loc_1052C
00010948 5468 003A                  		addq.w	#2,$3A(a0)
0001094C                            
0001094C                            loc_10512:
0001094C 3028 003A                  		move.w	$3A(a0),d0
00010950 0828 0000 0022             		btst	#0,$22(a0)
00010956 6700                       		beq.s	loc_10520
00010958 4440                       		neg.w	d0
0001095A                            
0001095A                            loc_10520:
0001095A 3228 0030                  		move.w	$30(a0),d1
0001095E D240                       		add.w	d0,d1
00010960 3141 000C                  		move.w	d1,$C(a0)
00010964 4E75                       		rts	
00010966                            ; ===========================================================================
00010966                            
00010966                            loc_1052C:
00010966 5328 0028                  		subq.b	#1,$28(a0)
0001096A 4228 0038                  		clr.b	$38(a0)
0001096E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010972 7000                       		moveq	#0,d0
00010974 1028 0023                  		move.b	$23(a0),d0
00010978 67D2                       		beq.s	loc_10512
0001097A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010980 60CA                       		bra.s	loc_10512
00010982                            ; ===========================================================================
00010982                            
00010982                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010982 4A28 0038                  		tst.b	$38(a0)
00010986 6600                       		bne.s	loc_1055E
00010988 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001098C 6700                       		beq.s	locret_10578
0001098E 117C 0001 0038             		move.b	#1,$38(a0)
00010994 4268 003A                  		clr.w	$3A(a0)
00010998                            
00010998                            loc_1055E:
00010998 5268 0008                  		addq.w	#1,8(a0)
0001099C 3168 0008 0034             		move.w	8(a0),$34(a0)
000109A2 5268 003A                  		addq.w	#1,$3A(a0)
000109A6 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000109AC 6600                       		bne.s	locret_10578
000109AE 4228 0028                  		clr.b	$28(a0)
000109B2                            
000109B2                            locret_10578:
000109B2 4E75                       		rts	
000109B4                            ; ===========================================================================
000109B4                            
000109B4                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000109B4 4A28 0038                  		tst.b	$38(a0)
000109B8 6600                       		bne.s	loc_10598
000109BA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000109BE 7000                       		moveq	#0,d0
000109C0 1028 003C                  		move.b	$3C(a0),d0
000109C4 0832 0000 0000             		btst	#0,(a2,d0.w)
000109CA 6700                       		beq.s	loc_105A2
000109CC 117C 0001 0038             		move.b	#1,$38(a0)
000109D2                            
000109D2                            loc_10598:
000109D2 4A68 003A                  		tst.w	$3A(a0)
000109D6 6700                       		beq.s	loc_105C0
000109D8 5568 003A                  		subq.w	#2,$3A(a0)
000109DC                            
000109DC                            loc_105A2:
000109DC 3028 003A                  		move.w	$3A(a0),d0
000109E0 0828 0000 0022             		btst	#0,$22(a0)
000109E6 6700                       		beq.s	loc_105B4
000109E8 4440                       		neg.w	d0
000109EA 0640 0080                  		addi.w	#$80,d0
000109EE                            
000109EE                            loc_105B4:
000109EE 3228 0034                  		move.w	$34(a0),d1
000109F2 D240                       		add.w	d0,d1
000109F4 3141 0008                  		move.w	d1,8(a0)
000109F8 4E75                       		rts	
000109FA                            ; ===========================================================================
000109FA                            
000109FA                            loc_105C0:
000109FA 5228 0028                  		addq.b	#1,$28(a0)
000109FE 4228 0038                  		clr.b	$38(a0)
00010A02 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A06 7000                       		moveq	#0,d0
00010A08 1028 0023                  		move.b	$23(a0),d0
00010A0C 67CE                       		beq.s	loc_105A2
00010A0E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A14 60C6                       		bra.s	loc_105A2
00010A16                            ; ===========================================================================
00010A16                            
00010A16                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010A16 4A28 0038                  		tst.b	$38(a0)
00010A1A 6600                       		bne.s	loc_105F8
00010A1C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A20 7000                       		moveq	#0,d0
00010A22 1028 003C                  		move.b	$3C(a0),d0
00010A26 4A32 0000                  		tst.b	(a2,d0.w)
00010A2A 6A00                       		bpl.s	loc_10606
00010A2C 117C 0001 0038             		move.b	#1,$38(a0)
00010A32                            
00010A32                            loc_105F8:
00010A32 303C 0080                  		move.w	#$80,d0
00010A36 B068 003A                  		cmp.w	$3A(a0),d0
00010A3A 6700                       		beq.s	loc_10624
00010A3C 5468 003A                  		addq.w	#2,$3A(a0)
00010A40                            
00010A40                            loc_10606:
00010A40 3028 003A                  		move.w	$3A(a0),d0
00010A44 0828 0000 0022             		btst	#0,$22(a0)
00010A4A 6700                       		beq.s	loc_10618
00010A4C 4440                       		neg.w	d0
00010A4E 0640 0080                  		addi.w	#$80,d0
00010A52                            
00010A52                            loc_10618:
00010A52 3228 0034                  		move.w	$34(a0),d1
00010A56 D240                       		add.w	d0,d1
00010A58 3141 0008                  		move.w	d1,8(a0)
00010A5C 4E75                       		rts	
00010A5E                            ; ===========================================================================
00010A5E                            
00010A5E                            loc_10624:
00010A5E 5328 0028                  		subq.b	#1,$28(a0)
00010A62 4228 0038                  		clr.b	$38(a0)
00010A66 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A6A 7000                       		moveq	#0,d0
00010A6C 1028 0023                  		move.b	$23(a0),d0
00010A70 67CE                       		beq.s	loc_10606
00010A72 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010A78 60C6                       		bra.s	loc_10606
00010A7A                            ; ===========================================================================
00010A7A                            
00010A7A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010A7A 323C 0010                  		move.w	#$10,d1
00010A7E 7000                       		moveq	#0,d0
00010A80 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010A84 E248                       		lsr.w	#1,d0
00010A86 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010A8A 6000                       		bra.s	Obj56_Move_Sqr
00010A8C                            ; ===========================================================================
00010A8C                            
00010A8C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010A8C 323C 0030                  		move.w	#$30,d1
00010A90 7000                       		moveq	#0,d0
00010A92 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010A96 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010A9A 6000                       		bra.s	Obj56_Move_Sqr
00010A9C                            ; ===========================================================================
00010A9C                            
00010A9C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010A9C 323C 0050                  		move.w	#$50,d1
00010AA0 7000                       		moveq	#0,d0
00010AA2 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010AA6 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010AAA 6000                       		bra.s	Obj56_Move_Sqr
00010AAC                            ; ===========================================================================
00010AAC                            
00010AAC                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010AAC 323C 0070                  		move.w	#$70,d1
00010AB0 7000                       		moveq	#0,d0
00010AB2 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010AB6 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010ABA                            
00010ABA                            Obj56_Move_Sqr:
00010ABA 4A43                       		tst.w	d3
00010ABC 6600                       		bne.s	loc_1068E
00010ABE 5228 0022                  		addq.b	#1,$22(a0)
00010AC2 0228 0003 0022             		andi.b	#3,$22(a0)
00010AC8                            
00010AC8                            loc_1068E:
00010AC8 1428 0022                  		move.b	$22(a0),d2
00010ACC 0202 0003                  		andi.b	#3,d2
00010AD0 6600                       		bne.s	loc_106AE
00010AD2 9041                       		sub.w	d1,d0
00010AD4 D068 0034                  		add.w	$34(a0),d0
00010AD8 3140 0008                  		move.w	d0,8(a0)
00010ADC 4441                       		neg.w	d1
00010ADE D268 0030                  		add.w	$30(a0),d1
00010AE2 3141 000C                  		move.w	d1,$C(a0)
00010AE6 4E75                       		rts	
00010AE8                            ; ===========================================================================
00010AE8                            
00010AE8                            loc_106AE:
00010AE8 5302                       		subq.b	#1,d2
00010AEA 6600                       		bne.s	loc_106CC
00010AEC 5341                       		subq.w	#1,d1
00010AEE 9041                       		sub.w	d1,d0
00010AF0 4440                       		neg.w	d0
00010AF2 D068 0030                  		add.w	$30(a0),d0
00010AF6 3140 000C                  		move.w	d0,$C(a0)
00010AFA 5241                       		addq.w	#1,d1
00010AFC D268 0034                  		add.w	$34(a0),d1
00010B00 3141 0008                  		move.w	d1,8(a0)
00010B04 4E75                       		rts	
00010B06                            ; ===========================================================================
00010B06                            
00010B06                            loc_106CC:
00010B06 5302                       		subq.b	#1,d2
00010B08 6600                       		bne.s	loc_106EA
00010B0A 5341                       		subq.w	#1,d1
00010B0C 9041                       		sub.w	d1,d0
00010B0E 4440                       		neg.w	d0
00010B10 D068 0034                  		add.w	$34(a0),d0
00010B14 3140 0008                  		move.w	d0,8(a0)
00010B18 5241                       		addq.w	#1,d1
00010B1A D268 0030                  		add.w	$30(a0),d1
00010B1E 3141 000C                  		move.w	d1,$C(a0)
00010B22 4E75                       		rts	
00010B24                            ; ===========================================================================
00010B24                            
00010B24                            loc_106EA:
00010B24 9041                       		sub.w	d1,d0
00010B26 D068 0030                  		add.w	$30(a0),d0
00010B2A 3140 000C                  		move.w	d0,$C(a0)
00010B2E 4441                       		neg.w	d1
00010B30 D268 0034                  		add.w	$34(a0),d1
00010B34 3141 0008                  		move.w	d1,8(a0)
00010B38 4E75                       		rts	
00010B3A                            ; ===========================================================================
00010B3A                            ; ---------------------------------------------------------------------------
00010B3A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010B3A                            ; ---------------------------------------------------------------------------
00010B3A                            Map_obj56:
00010B3A                            	include "_maps\obj56.asm"
00010B3A                            ; ---------------------------------------------------------------------------
00010B3A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010B3A                            ; ---------------------------------------------------------------------------
00010B3A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010B3E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010B42 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010B46 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010B4A 01                         byte_10710:	dc.b 1
00010B4B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010B50 04                         byte_10716:	dc.b 4
00010B51 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010B56 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010B5B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010B60 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010B65 02                         byte_1072B:	dc.b 2
00010B66 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010B6B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010B70 04                         byte_10736:	dc.b 4
00010B71 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010B76 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010B7B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010B80 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010B85 03                         byte_1074B:	dc.b 3
00010B86 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010B8B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010B90 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010B95 01                         byte_1075B:	dc.b 1
00010B96 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010B9B 02                         byte_10761:	dc.b 2
00010B9C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010BA1 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010BA6 04                         byte_1076C:	dc.b 4
00010BA7 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010BAC F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010BB1 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010BB6 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010BBC 00                         		even
00010BBC 00                         		even
00010BBC                            
00010BBC                            ; ===========================================================================
00010BBC                            ; ---------------------------------------------------------------------------
00010BBC                            ; Object 57 - spiked balls (SYZ, LZ)
00010BBC                            ; ---------------------------------------------------------------------------
00010BBC                            
00010BBC                            Obj57:					; XREF: Obj_Index
00010BBC 7000                       		moveq	#0,d0
00010BBE 1028 0024                  		move.b	$24(a0),d0
00010BC2 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010BC6 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010BCA                            ; ===========================================================================
00010BCA 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010BCC 0000                       		dc.w Obj57_Move-Obj57_Index
00010BCE 0000                       		dc.w Obj57_Display-Obj57_Index
00010BD0                            ; ===========================================================================
00010BD0                            
00010BD0                            Obj57_Main:				; XREF: Obj57_Index
00010BD0 5428 0024                  		addq.b	#2,$24(a0)
00010BD4 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010BDC 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010BE2 117C 0004 0001             		move.b	#4,1(a0)
00010BE8 117C 0004 0018             		move.b	#4,$18(a0)
00010BEE 117C 0008 0019             		move.b	#8,$19(a0)
00010BF4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010BFA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010C00 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010C06 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010C0C 6600                       		bne.s	loc_107E8
00010C0E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010C14 317C 0310 0002             		move.w	#$310,2(a0)
00010C1A 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010C22                            
00010C22                            loc_107E8:
00010C22 1228 0028                  		move.b	$28(a0),d1	; get object type
00010C26 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010C2A 4881                       		ext.w	d1
00010C2C E741                       		asl.w	#3,d1		; multiply by 8
00010C2E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010C32 1028 0022                  		move.b	$22(a0),d0
00010C36 E418                       		ror.b	#2,d0
00010C38 0200 00C0                  		andi.b	#-$40,d0
00010C3C 1140 0026                  		move.b	d0,$26(a0)
00010C40 45E8 0029                  		lea	$29(a0),a2
00010C44 1228 0028                  		move.b	$28(a0),d1	; get object type
00010C48 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010C4C 14FC 0000                  		move.b	#0,(a2)+
00010C50 3601                       		move.w	d1,d3
00010C52 E94B                       		lsl.w	#4,d3
00010C54 1143 003C                  		move.b	d3,$3C(a0)
00010C58 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010C5A 6500                       		bcs.s	loc_10894
00010C5C 0828 0003 0028             		btst	#3,$28(a0)
00010C62 6700                       		beq.s	Obj57_MakeChain
00010C64 5341                       		subq.w	#1,d1
00010C66 6500                       		bcs.s	loc_10894
00010C68                            
00010C68                            Obj57_MakeChain:
00010C68 6100 D25E                  		bsr.w	SingleObjLoad
00010C6C 6600                       		bne.s	loc_10894
00010C6E 5228 0029                  		addq.b	#1,$29(a0)
00010C72 3A09                       		move.w	a1,d5
00010C74 0445 D000                  		subi.w	#-$3000,d5
00010C78 EC4D                       		lsr.w	#6,d5
00010C7A 0245 007F                  		andi.w	#$7F,d5
00010C7E 14C5                       		move.b	d5,(a2)+
00010C80 137C 0004 0024             		move.b	#4,$24(a1)
00010C86 1290                       		move.b	0(a0),0(a1)
00010C88 2368 0004 0004             		move.l	4(a0),4(a1)
00010C8E 3368 0002 0002             		move.w	2(a0),2(a1)
00010C94 1368 0001 0001             		move.b	1(a0),1(a1)
00010C9A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010CA0 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010CA6 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010CAC 0403 0010                  		subi.b	#$10,d3
00010CB0 1343 003C                  		move.b	d3,$3C(a1)
00010CB4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010CBA 6600                       		bne.s	loc_10890
00010CBC 4A03                       		tst.b	d3
00010CBE 6600                       		bne.s	loc_10890
00010CC0 137C 0002 001A             		move.b	#2,$1A(a1)
00010CC6                            
00010CC6                            loc_10890:
00010CC6 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010CCA                            
00010CCA                            loc_10894:
00010CCA 3A08                       		move.w	a0,d5
00010CCC 0445 D000                  		subi.w	#-$3000,d5
00010CD0 EC4D                       		lsr.w	#6,d5
00010CD2 0245 007F                  		andi.w	#$7F,d5
00010CD6 14C5                       		move.b	d5,(a2)+
00010CD8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CDE 6600                       		bne.s	Obj57_Move
00010CE0 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010CE6 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010CEC                            
00010CEC                            Obj57_Move:				; XREF: Obj57_Index
00010CEC 6100 0000                  		bsr.w	Obj57_MoveSub
00010CF0 6000 0000                  		bra.w	Obj57_ChkDel
00010CF4                            ; ===========================================================================
00010CF4                            
00010CF4                            Obj57_MoveSub:				; XREF: Obj57_Move
00010CF4 3028 003E                  		move.w	$3E(a0),d0
00010CF8 D168 0026                  		add.w	d0,$26(a0)
00010CFC 1028 0026                  		move.b	$26(a0),d0
00010D00 4EB9 0000 2C22             		jsr	(CalcSine).l
00010D06 3428 0038                  		move.w	$38(a0),d2
00010D0A 3628 003A                  		move.w	$3A(a0),d3
00010D0E 45E8 0029                  		lea	$29(a0),a2
00010D12 7C00                       		moveq	#0,d6
00010D14 1C1A                       		move.b	(a2)+,d6
00010D16                            
00010D16                            Obj57_MoveLoop:
00010D16 7800                       		moveq	#0,d4
00010D18 181A                       		move.b	(a2)+,d4
00010D1A ED4C                       		lsl.w	#6,d4
00010D1C 0684 00FF D000             		addi.l	#$FFD000,d4
00010D22 2244                       		movea.l	d4,a1
00010D24 7800                       		moveq	#0,d4
00010D26 1829 003C                  		move.b	$3C(a1),d4
00010D2A 2A04                       		move.l	d4,d5
00010D2C C9C0                       		muls.w	d0,d4
00010D2E E084                       		asr.l	#8,d4
00010D30 CBC1                       		muls.w	d1,d5
00010D32 E085                       		asr.l	#8,d5
00010D34 D842                       		add.w	d2,d4
00010D36 DA43                       		add.w	d3,d5
00010D38 3344 000C                  		move.w	d4,$C(a1)
00010D3C 3345 0008                  		move.w	d5,8(a1)
00010D40 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010D44 4E75                       		rts	
00010D46                            ; ===========================================================================
00010D46                            
00010D46                            Obj57_ChkDel:				; XREF: Obj57_Move
00010D46 3028 003A                  		move.w	$3A(a0),d0
00010D4A 0240 FF80                  		andi.w	#$FF80,d0
00010D4E 3238 F700                  		move.w	($FFFFF700).w,d1
00010D52 0441 0080                  		subi.w	#$80,d1
00010D56 0241 FF80                  		andi.w	#$FF80,d1
00010D5A 9041                       		sub.w	d1,d0
00010D5C 0C40 0280                  		cmpi.w	#$280,d0
00010D60 6200 0000                  		bhi.w	Obj57_Delete
00010D64 6000 CCDC                  		bra.w	DisplaySprite
00010D68                            ; ===========================================================================
00010D68                            
00010D68                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010D68 7400                       		moveq	#0,d2
00010D6A 45E8 0029                  		lea	$29(a0),a2
00010D6E 141A                       		move.b	(a2)+,d2
00010D70                            
00010D70                            Obj57_DelLoop:
00010D70 7000                       		moveq	#0,d0
00010D72 101A                       		move.b	(a2)+,d0
00010D74 ED48                       		lsl.w	#6,d0
00010D76 0680 00FF D000             		addi.l	#$FFD000,d0
00010D7C 2240                       		movea.l	d0,a1
00010D7E 6100 CD00                  		bsr.w	DeleteObject2
00010D82 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010D86                            
00010D86 4E75                       		rts	
00010D88                            ; ===========================================================================
00010D88                            
00010D88                            Obj57_Display:				; XREF: Obj57_Index
00010D88 6000 CCB8                  		bra.w	DisplaySprite
00010D8C                            ; ===========================================================================
00010D8C                            ; ---------------------------------------------------------------------------
00010D8C                            ; Sprite mappings - chain of spiked balls (SYZ)
00010D8C                            ; ---------------------------------------------------------------------------
00010D8C                            Map_obj57:
00010D8C                            	include "_maps\obj57syz.asm"
00010D8C                            ; ---------------------------------------------------------------------------
00010D8C                            ; Sprite mappings - chain of spiked balls (SYZ)
00010D8C                            ; ---------------------------------------------------------------------------
00010D8C 0000                       		dc.w byte_10958-Map_obj57
00010D8E 01                         byte_10958:	dc.b 1
00010D8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010D94                            		even
00010D94                            		even
00010D94                            
00010D94                            ; ---------------------------------------------------------------------------
00010D94                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010D94                            ; ---------------------------------------------------------------------------
00010D94                            Map_obj57a:
00010D94                            	include "_maps\obj57lz.asm"
00010D94                            ; ---------------------------------------------------------------------------
00010D94                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010D94                            ; ---------------------------------------------------------------------------
00010D94 0000                       		dc.w byte_10964-Map_obj57a
00010D96 0000                       		dc.w byte_1096A-Map_obj57a
00010D98 0000                       		dc.w byte_10970-Map_obj57a
00010D9A 01                         byte_10964:	dc.b 1
00010D9B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010DA0 01                         byte_1096A:	dc.b 1
00010DA1 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010DA6 01                         byte_10970:	dc.b 1
00010DA7 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010DAC                            		even
00010DAC                            		even
00010DAC                            
00010DAC                            ; ===========================================================================
00010DAC                            ; ---------------------------------------------------------------------------
00010DAC                            ; Object 58 - giant spiked balls (SYZ)
00010DAC                            ; ---------------------------------------------------------------------------
00010DAC                            
00010DAC                            Obj58:					; XREF: Obj_Index
00010DAC 7000                       		moveq	#0,d0
00010DAE 1028 0024                  		move.b	$24(a0),d0
00010DB2 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010DB6 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010DBA                            ; ===========================================================================
00010DBA 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010DBC 0000                       		dc.w Obj58_Move-Obj58_Index
00010DBE                            ; ===========================================================================
00010DBE                            
00010DBE                            Obj58_Main:				; XREF: Obj58_Index
00010DBE 5428 0024                  		addq.b	#2,$24(a0)
00010DC2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010DCA 317C 0396 0002             		move.w	#$396,2(a0)
00010DD0 117C 0004 0001             		move.b	#4,1(a0)
00010DD6 117C 0004 0018             		move.b	#4,$18(a0)
00010DDC 117C 0018 0019             		move.b	#$18,$19(a0)
00010DE2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010DE8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010DEE 117C 0086 0020             		move.b	#$86,$20(a0)
00010DF4 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DF8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010DFC 4881                       		ext.w	d1
00010DFE E741                       		asl.w	#3,d1		; multiply by 8
00010E00 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010E04 1028 0022                  		move.b	$22(a0),d0
00010E08 E418                       		ror.b	#2,d0
00010E0A 0200 00C0                  		andi.b	#$C0,d0
00010E0E 1140 0026                  		move.b	d0,$26(a0)
00010E12 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010E18                            
00010E18                            Obj58_Move:				; XREF: Obj58_Index
00010E18 7000                       		moveq	#0,d0
00010E1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010E1E 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010E22 D040                       		add.w	d0,d0
00010E24 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010E28 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010E2C 3028 003A                  		move.w	$3A(a0),d0
00010E30 0240 FF80                  		andi.w	#$FF80,d0
00010E34 3238 F700                  		move.w	($FFFFF700).w,d1
00010E38 0441 0080                  		subi.w	#$80,d1
00010E3C 0241 FF80                  		andi.w	#$FF80,d1
00010E40 9041                       		sub.w	d1,d0
00010E42 0C40 0280                  		cmpi.w	#$280,d0
00010E46 6200 CC36                  		bhi.w	DeleteObject
00010E4A 6000 CBF6                  		bra.w	DisplaySprite
00010E4E                            ; ===========================================================================
00010E4E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010E50 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010E52 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010E54 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010E56                            ; ===========================================================================
00010E56                            
00010E56                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010E56 4E75                       		rts	
00010E58                            ; ===========================================================================
00010E58                            
00010E58                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010E58 323C 0060                  		move.w	#$60,d1
00010E5C 7000                       		moveq	#0,d0
00010E5E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010E62 0828 0000 0022             		btst	#0,$22(a0)
00010E68 6700                       		beq.s	loc_10A38
00010E6A 4440                       		neg.w	d0
00010E6C D041                       		add.w	d1,d0
00010E6E                            
00010E6E                            loc_10A38:
00010E6E 3228 003A                  		move.w	$3A(a0),d1
00010E72 9240                       		sub.w	d0,d1
00010E74 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E78 4E75                       		rts	
00010E7A                            ; ===========================================================================
00010E7A                            
00010E7A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010E7A 323C 0060                  		move.w	#$60,d1
00010E7E 7000                       		moveq	#0,d0
00010E80 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010E84 0828 0000 0022             		btst	#0,$22(a0)
00010E8A 6700                       		beq.s	loc_10A5C
00010E8C 4440                       		neg.w	d0
00010E8E 0640 0080                  		addi.w	#$80,d0
00010E92                            
00010E92                            loc_10A5C:
00010E92 3228 0038                  		move.w	$38(a0),d1
00010E96 9240                       		sub.w	d0,d1
00010E98 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E9C 4E75                       		rts	
00010E9E                            ; ===========================================================================
00010E9E                            
00010E9E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010E9E 3028 003E                  		move.w	$3E(a0),d0
00010EA2 D168 0026                  		add.w	d0,$26(a0)
00010EA6 1028 0026                  		move.b	$26(a0),d0
00010EAA 4EB9 0000 2C22             		jsr	(CalcSine).l
00010EB0 3428 0038                  		move.w	$38(a0),d2
00010EB4 3628 003A                  		move.w	$3A(a0),d3
00010EB8 7800                       		moveq	#0,d4
00010EBA 1828 003C                  		move.b	$3C(a0),d4
00010EBE 2A04                       		move.l	d4,d5
00010EC0 C9C0                       		muls.w	d0,d4
00010EC2 E084                       		asr.l	#8,d4
00010EC4 CBC1                       		muls.w	d1,d5
00010EC6 E085                       		asr.l	#8,d5
00010EC8 D842                       		add.w	d2,d4
00010ECA DA43                       		add.w	d3,d5
00010ECC 3144 000C                  		move.w	d4,$C(a0)
00010ED0 3145 0008                  		move.w	d5,8(a0)
00010ED4 4E75                       		rts	
00010ED6                            ; ===========================================================================
00010ED6                            ; ---------------------------------------------------------------------------
00010ED6                            ; Sprite mappings - SBZ	spiked ball on a chain
00010ED6                            ; ---------------------------------------------------------------------------
00010ED6                            Map_obj15b:
00010ED6                            	include "_maps\obj15sbz.asm"
00010ED6                            ; ---------------------------------------------------------------------------
00010ED6                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010ED6                            ; ---------------------------------------------------------------------------
00010ED6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010EDA 0000                       		dc.w byte_10AC6-Map_obj15b
00010EDC 05                         byte_10AA6:	dc.b 5
00010EDD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010EE2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010EE7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010EEC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010EF1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010EF6 01                         byte_10AC0:	dc.b 1
00010EF7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010EFC 02                         byte_10AC6:	dc.b 2
00010EFD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010F02 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010F08 00                         		even
00010F08 00                         		even
00010F08                            
00010F08                            ; ===========================================================================
00010F08                            ; ---------------------------------------------------------------------------
00010F08                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010F08                            ; ---------------------------------------------------------------------------
00010F08                            
00010F08                            Obj59:					; XREF: Obj_Index
00010F08 7000                       		moveq	#0,d0
00010F0A 1028 0024                  		move.b	$24(a0),d0
00010F0E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010F12 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010F16 3028 0032                  		move.w	$32(a0),d0
00010F1A 0240 FF80                  		andi.w	#$FF80,d0
00010F1E 3238 F700                  		move.w	($FFFFF700).w,d1
00010F22 0441 0080                  		subi.w	#$80,d1
00010F26 0241 FF80                  		andi.w	#$FF80,d1
00010F2A 9041                       		sub.w	d1,d0
00010F2C 0C40 0280                  		cmpi.w	#$280,d0
00010F30 6200 CB4C                  		bhi.w	DeleteObject
00010F34 6000 CB0C                  		bra.w	DisplaySprite
00010F38                            ; ===========================================================================
00010F38 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010F3A 0000                       		dc.w Obj59_Platform-Obj59_Index
00010F3C 0000                       		dc.w Obj59_Action-Obj59_Index
00010F3E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010F40                            
00010F40 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010F42                            
00010F42 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010F44 2001                       		dc.b $20, 1
00010F46 3401                       		dc.b $34, 1
00010F48 1003                       		dc.b $10, 3
00010F4A 2003                       		dc.b $20, 3
00010F4C 3403                       		dc.b $34, 3
00010F4E 1401                       		dc.b $14, 1
00010F50 2401                       		dc.b $24, 1
00010F52 2C01                       		dc.b $2C, 1
00010F54 1403                       		dc.b $14, 3
00010F56 2403                       		dc.b $24, 3
00010F58 2C03                       		dc.b $2C, 3
00010F5A 2005                       		dc.b $20, 5
00010F5C 2007                       		dc.b $20, 7
00010F5E 3009                       		dc.b $30, 9
00010F60                            ; ===========================================================================
00010F60                            
00010F60                            Obj59_Main:				; XREF: Obj59_Index
00010F60 5428 0024                  		addq.b	#2,$24(a0)
00010F64 7000                       		moveq	#0,d0
00010F66 1028 0028                  		move.b	$28(a0),d0
00010F6A 6A00                       		bpl.s	Obj59_Main2
00010F6C 5828 0024                  		addq.b	#4,$24(a0)
00010F70 0240 007F                  		andi.w	#$7F,d0
00010F74 C0FC 0006                  		mulu.w	#6,d0
00010F78 3140 003C                  		move.w	d0,$3C(a0)
00010F7C 3140 003E                  		move.w	d0,$3E(a0)
00010F80 588F                       		addq.l	#4,sp
00010F82 4E75                       		rts	
00010F84                            ; ===========================================================================
00010F84                            
00010F84                            Obj59_Main2:
00010F84 E648                       		lsr.w	#3,d0
00010F86 0240 001E                  		andi.w	#$1E,d0
00010F8A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010F8E 115A 0019                  		move.b	(a2)+,$19(a0)
00010F92 115A 001A                  		move.b	(a2)+,$1A(a0)
00010F96 7000                       		moveq	#0,d0
00010F98 1028 0028                  		move.b	$28(a0),d0
00010F9C D040                       		add.w	d0,d0
00010F9E 0240 001E                  		andi.w	#$1E,d0
00010FA2 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010FA6 101A                       		move.b	(a2)+,d0
00010FA8 E548                       		lsl.w	#2,d0
00010FAA 3140 003C                  		move.w	d0,$3C(a0)
00010FAE 115A 0028                  		move.b	(a2)+,$28(a0)
00010FB2 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010FBA 317C 4000 0002             		move.w	#$4000,2(a0)
00010FC0 117C 0004 0001             		move.b	#4,1(a0)
00010FC6 117C 0004 0018             		move.b	#4,$18(a0)
00010FCC 3168 0008 0032             		move.w	8(a0),$32(a0)
00010FD2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010FD8                            
00010FD8                            Obj59_Platform:				; XREF: Obj59_Index
00010FD8 7200                       		moveq	#0,d1
00010FDA 1228 0019                  		move.b	$19(a0),d1
00010FDE 4EB9 0000 77FA             		jsr	(PlatformObject).l
00010FE4 6000 0000                  		bra.w	Obj59_Types
00010FE8                            ; ===========================================================================
00010FE8                            
00010FE8                            Obj59_Action:				; XREF: Obj59_Index
00010FE8 7200                       		moveq	#0,d1
00010FEA 1228 0019                  		move.b	$19(a0),d1
00010FEE 4EB9 0000 796E             		jsr	(ExitPlatform).l
00010FF4 3F28 0008                  		move.w	8(a0),-(sp)
00010FF8 6100 0000                  		bsr.w	Obj59_Types
00010FFC 341F                       		move.w	(sp)+,d2
00010FFE 4A10                       		tst.b	0(a0)
00011000 6700                       		beq.s	locret_10BD4
00011002 4EF9 0000 7ED8             		jmp	(MvSonicOnPtfm2).l
00011008                            ; ===========================================================================
00011008                            
00011008                            locret_10BD4:
00011008 4E75                       		rts	
0001100A                            ; ===========================================================================
0001100A                            
0001100A                            Obj59_Types:
0001100A 7000                       		moveq	#0,d0
0001100C 1028 0028                  		move.b	$28(a0),d0
00011010 0240 000F                  		andi.w	#$F,d0
00011014 D040                       		add.w	d0,d0
00011016 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001101A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001101E                            ; ===========================================================================
0001101E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011022 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011026 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001102A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001102E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011032                            ; ===========================================================================
00011032                            
00011032                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011032 4E75                       		rts	
00011034                            ; ===========================================================================
00011034                            
00011034                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011034 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001103A 6600                       		bne.s	locret_10C0C
0001103C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011040                            
00011040                            locret_10C0C:
00011040 4E75                       		rts	
00011042                            ; ===========================================================================
00011042                            
00011042                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011042 6100 0000                  		bsr.w	Obj59_Move
00011046 3028 0034                  		move.w	$34(a0),d0
0001104A 4440                       		neg.w	d0
0001104C D068 0030                  		add.w	$30(a0),d0
00011050 3140 000C                  		move.w	d0,$C(a0)
00011054 4E75                       		rts	
00011056                            ; ===========================================================================
00011056                            
00011056                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011056 6100 0000                  		bsr.w	Obj59_Move
0001105A 3028 0034                  		move.w	$34(a0),d0
0001105E D068 0030                  		add.w	$30(a0),d0
00011062 3140 000C                  		move.w	d0,$C(a0)
00011066 4E75                       		rts	
00011068                            ; ===========================================================================
00011068                            
00011068                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011068 6100 0000                  		bsr.w	Obj59_Move
0001106C 3028 0034                  		move.w	$34(a0),d0
00011070 E240                       		asr.w	#1,d0
00011072 4440                       		neg.w	d0
00011074 D068 0030                  		add.w	$30(a0),d0
00011078 3140 000C                  		move.w	d0,$C(a0)
0001107C 3028 0034                  		move.w	$34(a0),d0
00011080 D068 0032                  		add.w	$32(a0),d0
00011084 3140 0008                  		move.w	d0,8(a0)
00011088 4E75                       		rts	
0001108A                            ; ===========================================================================
0001108A                            
0001108A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001108A 6100 0000                  		bsr.w	Obj59_Move
0001108E 3028 0034                  		move.w	$34(a0),d0
00011092 E240                       		asr.w	#1,d0
00011094 D068 0030                  		add.w	$30(a0),d0
00011098 3140 000C                  		move.w	d0,$C(a0)
0001109C 3028 0034                  		move.w	$34(a0),d0
000110A0 4440                       		neg.w	d0
000110A2 D068 0032                  		add.w	$32(a0),d0
000110A6 3140 0008                  		move.w	d0,8(a0)
000110AA 4E75                       		rts	
000110AC                            ; ===========================================================================
000110AC                            
000110AC                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000110AC 6100 0000                  		bsr.w	Obj59_Move
000110B0 3028 0034                  		move.w	$34(a0),d0
000110B4 4440                       		neg.w	d0
000110B6 D068 0030                  		add.w	$30(a0),d0
000110BA 3140 000C                  		move.w	d0,$C(a0)
000110BE 4A28 0028                  		tst.b	$28(a0)
000110C2 6700 0000                  		beq.w	loc_10C94
000110C6 4E75                       		rts	
000110C8                            ; ===========================================================================
000110C8                            
000110C8                            loc_10C94:
000110C8 0828 0003 0022             		btst	#3,$22(a0)
000110CE 6700                       		beq.s	Obj59_Delete
000110D0 08E9 0001 0022             		bset	#1,$22(a1)
000110D6 08A9 0003 0022             		bclr	#3,$22(a1)
000110DC 137C 0002 0024             		move.b	#2,$24(a1)
000110E2                            
000110E2                            Obj59_Delete:
000110E2 6000 C99A                  		bra.w	DeleteObject
000110E6                            
000110E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110E6                            
000110E6                            
000110E6                            Obj59_Move:				; XREF: Obj59_Type02; et al
000110E6 3028 0038                  		move.w	$38(a0),d0
000110EA 4A28 003A                  		tst.b	$3A(a0)
000110EE 6600                       		bne.s	loc_10CC8
000110F0 0C40 0800                  		cmpi.w	#$800,d0
000110F4 6400                       		bcc.s	loc_10CD0
000110F6 0640 0010                  		addi.w	#$10,d0
000110FA 6000                       		bra.s	loc_10CD0
000110FC                            ; ===========================================================================
000110FC                            
000110FC                            loc_10CC8:
000110FC 4A40                       		tst.w	d0
000110FE 6700                       		beq.s	loc_10CD0
00011100 0440 0010                  		subi.w	#$10,d0
00011104                            
00011104                            loc_10CD0:
00011104 3140 0038                  		move.w	d0,$38(a0)
00011108 48C0                       		ext.l	d0
0001110A E180                       		asl.l	#8,d0
0001110C D0A8 0034                  		add.l	$34(a0),d0
00011110 2140 0034                  		move.l	d0,$34(a0)
00011114 4840                       		swap	d0
00011116 3428 003C                  		move.w	$3C(a0),d2
0001111A B042                       		cmp.w	d2,d0
0001111C 6300                       		bls.s	loc_10CF0
0001111E 117C 0001 003A             		move.b	#1,$3A(a0)
00011124                            
00011124                            loc_10CF0:
00011124 D442                       		add.w	d2,d2
00011126 B042                       		cmp.w	d2,d0
00011128 6600                       		bne.s	locret_10CFA
0001112A 4228 0028                  		clr.b	$28(a0)
0001112E                            
0001112E                            locret_10CFA:
0001112E 4E75                       		rts	
00011130                            ; End of function Obj59_Move
00011130                            
00011130                            ; ===========================================================================
00011130                            
00011130                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011130 5368 003C                  		subq.w	#1,$3C(a0)
00011134 6600                       		bne.s	Obj59_ChkDel
00011136 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001113C 6100 CD8A                  		bsr.w	SingleObjLoad
00011140 6600                       		bne.s	Obj59_ChkDel
00011142 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011146 3368 0008 0008             		move.w	8(a0),8(a1)
0001114C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011152 137C 000E 0028             		move.b	#$E,$28(a1)
00011158                            
00011158                            Obj59_ChkDel:
00011158 588F                       		addq.l	#4,sp
0001115A 3028 0008                  		move.w	8(a0),d0
0001115E 0240 FF80                  		andi.w	#$FF80,d0
00011162 3238 F700                  		move.w	($FFFFF700).w,d1
00011166 0441 0080                  		subi.w	#$80,d1
0001116A 0241 FF80                  		andi.w	#$FF80,d1
0001116E 9041                       		sub.w	d1,d0
00011170 0C40 0280                  		cmpi.w	#$280,d0
00011174 6200 C908                  		bhi.w	DeleteObject
00011178 4E75                       		rts	
0001117A                            ; ===========================================================================
0001117A                            ; ---------------------------------------------------------------------------
0001117A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001117A                            ; ---------------------------------------------------------------------------
0001117A                            Map_obj59:
0001117A                            	include "_maps\obj59.asm"
0001117A                            ; ---------------------------------------------------------------------------
0001117A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001117A                            ; ---------------------------------------------------------------------------
0001117A 0000                       		dc.w byte_10D4A-Map_obj59
0001117C 03                         byte_10D4A:	dc.b 3
0001117D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011182 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011187 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001118C                            		even
0001118C                            		even
0001118C                            
0001118C                            ; ===========================================================================
0001118C                            ; ---------------------------------------------------------------------------
0001118C                            ; Object 5A - platforms	moving in circles (SLZ)
0001118C                            ; ---------------------------------------------------------------------------
0001118C                            
0001118C                            Obj5A:					; XREF: Obj_Index
0001118C 7000                       		moveq	#0,d0
0001118E 1028 0024                  		move.b	$24(a0),d0
00011192 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011196 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001119A 3028 0032                  		move.w	$32(a0),d0
0001119E 0240 FF80                  		andi.w	#$FF80,d0
000111A2 3238 F700                  		move.w	($FFFFF700).w,d1
000111A6 0441 0080                  		subi.w	#$80,d1
000111AA 0241 FF80                  		andi.w	#$FF80,d1
000111AE 9041                       		sub.w	d1,d0
000111B0 0C40 0280                  		cmpi.w	#$280,d0
000111B4 6200 C8C8                  		bhi.w	DeleteObject
000111B8 6000 C888                  		bra.w	DisplaySprite
000111BC                            ; ===========================================================================
000111BC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000111BE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000111C0 0000                       		dc.w Obj5A_Action-Obj5A_Index
000111C2                            ; ===========================================================================
000111C2                            
000111C2                            Obj5A_Main:				; XREF: Obj5A_Index
000111C2 5428 0024                  		addq.b	#2,$24(a0)
000111C6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000111CE 317C 4000 0002             		move.w	#$4000,2(a0)
000111D4 117C 0004 0001             		move.b	#4,1(a0)
000111DA 117C 0004 0018             		move.b	#4,$18(a0)
000111E0 117C 0018 0019             		move.b	#$18,$19(a0)
000111E6 3168 0008 0032             		move.w	8(a0),$32(a0)
000111EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000111F2                            
000111F2                            Obj5A_Platform:				; XREF: Obj5A_Index
000111F2 7200                       		moveq	#0,d1
000111F4 1228 0019                  		move.b	$19(a0),d1
000111F8 4EB9 0000 77FA             		jsr	(PlatformObject).l
000111FE 6000 0000                  		bra.w	Obj5A_Types
00011202                            ; ===========================================================================
00011202                            
00011202                            Obj5A_Action:				; XREF: Obj5A_Index
00011202 7200                       		moveq	#0,d1
00011204 1228 0019                  		move.b	$19(a0),d1
00011208 4EB9 0000 796E             		jsr	(ExitPlatform).l
0001120E 3F28 0008                  		move.w	8(a0),-(sp)
00011212 6100 0000                  		bsr.w	Obj5A_Types
00011216 341F                       		move.w	(sp)+,d2
00011218 4EF9 0000 7ED8             		jmp	(MvSonicOnPtfm2).l
0001121E                            ; ===========================================================================
0001121E                            
0001121E                            Obj5A_Types:
0001121E 7000                       		moveq	#0,d0
00011220 1028 0028                  		move.b	$28(a0),d0
00011224 0240 000C                  		andi.w	#$C,d0
00011228 E248                       		lsr.w	#1,d0
0001122A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001122E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011232                            ; ===========================================================================
00011232 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011234 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011236                            ; ===========================================================================
00011236                            
00011236                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011236 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001123A 0401 0050                  		subi.b	#$50,d1
0001123E 4881                       		ext.w	d1
00011240 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011244 0402 0050                  		subi.b	#$50,d2
00011248 4882                       		ext.w	d2
0001124A 0828 0000 0028             		btst	#0,$28(a0)
00011250 6700                       		beq.s	loc_10E24
00011252 4441                       		neg.w	d1
00011254 4442                       		neg.w	d2
00011256                            
00011256                            loc_10E24:
00011256 0828 0001 0028             		btst	#1,$28(a0)
0001125C 6700                       		beq.s	loc_10E30
0001125E 4441                       		neg.w	d1
00011260 C342                       		exg	d1,d2
00011262                            
00011262                            loc_10E30:
00011262 D268 0032                  		add.w	$32(a0),d1
00011266 3141 0008                  		move.w	d1,8(a0)
0001126A D468 0030                  		add.w	$30(a0),d2
0001126E 3142 000C                  		move.w	d2,$C(a0)
00011272 4E75                       		rts	
00011274                            ; ===========================================================================
00011274                            
00011274                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011274 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011278 0401 0050                  		subi.b	#$50,d1
0001127C 4881                       		ext.w	d1
0001127E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011282 0402 0050                  		subi.b	#$50,d2
00011286 4882                       		ext.w	d2
00011288 0828 0000 0028             		btst	#0,$28(a0)
0001128E 6700                       		beq.s	loc_10E62
00011290 4441                       		neg.w	d1
00011292 4442                       		neg.w	d2
00011294                            
00011294                            loc_10E62:
00011294 0828 0001 0028             		btst	#1,$28(a0)
0001129A 6700                       		beq.s	loc_10E6E
0001129C 4441                       		neg.w	d1
0001129E C342                       		exg	d1,d2
000112A0                            
000112A0                            loc_10E6E:
000112A0 4441                       		neg.w	d1
000112A2 D268 0032                  		add.w	$32(a0),d1
000112A6 3141 0008                  		move.w	d1,8(a0)
000112AA D468 0030                  		add.w	$30(a0),d2
000112AE 3142 000C                  		move.w	d2,$C(a0)
000112B2 4E75                       		rts	
000112B4                            ; ===========================================================================
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            Map_obj5A:
000112B4                            	include "_maps\obj5A.asm"
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000112B4                            ; ---------------------------------------------------------------------------
000112B4 0000                       		dc.w byte_10E84-Map_obj5A
000112B6 02                         byte_10E84:	dc.b 2
000112B7 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000112BC F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000112C2 00                         		even
000112C2 00                         		even
000112C2                            
000112C2                            ; ===========================================================================
000112C2                            ; ---------------------------------------------------------------------------
000112C2                            ; Object 5B - blocks that form a staircase (SLZ)
000112C2                            ; ---------------------------------------------------------------------------
000112C2                            
000112C2                            Obj5B:					; XREF: Obj_Index
000112C2 7000                       		moveq	#0,d0
000112C4 1028 0024                  		move.b	$24(a0),d0
000112C8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000112CC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000112D0 3028 0030                  		move.w	$30(a0),d0
000112D4 0240 FF80                  		andi.w	#$FF80,d0
000112D8 3238 F700                  		move.w	($FFFFF700).w,d1
000112DC 0441 0080                  		subi.w	#$80,d1
000112E0 0241 FF80                  		andi.w	#$FF80,d1
000112E4 9041                       		sub.w	d1,d0
000112E6 0C40 0280                  		cmpi.w	#$280,d0
000112EA 6200 C792                  		bhi.w	DeleteObject
000112EE 6000 C752                  		bra.w	DisplaySprite
000112F2                            ; ===========================================================================
000112F2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000112F4 0000                       		dc.w Obj5B_Move-Obj5B_Index
000112F6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000112F8                            ; ===========================================================================
000112F8                            
000112F8                            Obj5B_Main:				; XREF: Obj5B_Index
000112F8 5428 0024                  		addq.b	#2,$24(a0)
000112FC 7638                       		moveq	#$38,d3
000112FE 7801                       		moveq	#1,d4
00011300 0828 0000 0022             		btst	#0,$22(a0)
00011306 6700                       		beq.s	loc_10EDA
00011308 763B                       		moveq	#$3B,d3
0001130A 78FF                       		moveq	#-1,d4
0001130C                            
0001130C                            loc_10EDA:
0001130C 3428 0008                  		move.w	8(a0),d2
00011310 2248                       		movea.l	a0,a1
00011312 7203                       		moveq	#3,d1
00011314 6000                       		bra.s	Obj5B_MakeBlocks
00011316                            ; ===========================================================================
00011316                            
00011316                            Obj5B_Loop:
00011316 6100 CBC6                  		bsr.w	SingleObjLoad2
0001131A 6600 0000                  		bne.w	Obj5B_Move
0001131E 137C 0004 0024             		move.b	#4,$24(a1)
00011324                            
00011324                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011324 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011328 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011330 337C 4000 0002             		move.w	#$4000,2(a1)
00011336 137C 0004 0001             		move.b	#4,1(a1)
0001133C 137C 0003 0018             		move.b	#3,$18(a1)
00011342 137C 0010 0019             		move.b	#$10,$19(a1)
00011348 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001134E 3342 0008                  		move.w	d2,8(a1)
00011352 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011358 3368 0008 0030             		move.w	8(a0),$30(a1)
0001135E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011364 0642 0020                  		addi.w	#$20,d2
00011368 1343 0037                  		move.b	d3,$37(a1)
0001136C 2348 003C                  		move.l	a0,$3C(a1)
00011370 D604                       		add.b	d4,d3
00011372 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011376                            
00011376                            Obj5B_Move:				; XREF: Obj5B_Index
00011376 7000                       		moveq	#0,d0
00011378 1028 0028                  		move.b	$28(a0),d0
0001137C 0240 0007                  		andi.w	#7,d0
00011380 D040                       		add.w	d0,d0
00011382 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011386 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001138A                            
0001138A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001138A 2468 003C                  		movea.l	$3C(a0),a2
0001138E 7000                       		moveq	#0,d0
00011390 1028 0037                  		move.b	$37(a0),d0
00011394 1032 0000                  		move.b	(a2,d0.w),d0
00011398 D068 0032                  		add.w	$32(a0),d0
0001139C 3140 000C                  		move.w	d0,$C(a0)
000113A0 7200                       		moveq	#0,d1
000113A2 1228 0019                  		move.b	$19(a0),d1
000113A6 0641 000B                  		addi.w	#$B,d1
000113AA 343C 0010                  		move.w	#$10,d2
000113AE 363C 0011                  		move.w	#$11,d3
000113B2 3828 0008                  		move.w	8(a0),d4
000113B6 6100 EA5A                  		bsr.w	SolidObject
000113BA 4A04                       		tst.b	d4
000113BC 6A00                       		bpl.s	loc_10F92
000113BE 1544 0036                  		move.b	d4,$36(a2)
000113C2                            
000113C2                            loc_10F92:
000113C2 0828 0003 0022             		btst	#3,$22(a0)
000113C8 6700                       		beq.s	locret_10FA0
000113CA 157C 0001 0036             		move.b	#1,$36(a2)
000113D0                            
000113D0                            locret_10FA0:
000113D0 4E75                       		rts	
000113D2                            ; ===========================================================================
000113D2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000113D4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000113D6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000113D8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000113DA                            ; ===========================================================================
000113DA                            
000113DA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000113DA 4A68 0034                  		tst.w	$34(a0)
000113DE 6600                       		bne.s	loc_10FC0
000113E0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000113E6 6600                       		bne.s	locret_10FBE
000113E8 317C 001E 0034             		move.w	#$1E,$34(a0)
000113EE                            
000113EE                            locret_10FBE:
000113EE 4E75                       		rts	
000113F0                            ; ===========================================================================
000113F0                            
000113F0                            loc_10FC0:
000113F0 5368 0034                  		subq.w	#1,$34(a0)
000113F4 66F8                       		bne.s	locret_10FBE
000113F6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000113FA 4E75                       		rts	
000113FC                            ; ===========================================================================
000113FC                            
000113FC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000113FC 4A68 0034                  		tst.w	$34(a0)
00011400 6600                       		bne.s	loc_10FE0
00011402 4A28 0036                  		tst.b	$36(a0)
00011406 6A00                       		bpl.s	locret_10FDE
00011408 317C 003C 0034             		move.w	#$3C,$34(a0)
0001140E                            
0001140E                            locret_10FDE:
0001140E 4E75                       		rts	
00011410                            ; ===========================================================================
00011410                            
00011410                            loc_10FE0:
00011410 5368 0034                  		subq.w	#1,$34(a0)
00011414 6600                       		bne.s	loc_10FEC
00011416 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001141A 4E75                       		rts	
0001141C                            ; ===========================================================================
0001141C                            
0001141C                            loc_10FEC:
0001141C 43E8 0038                  		lea	$38(a0),a1
00011420 3028 0034                  		move.w	$34(a0),d0
00011424 E408                       		lsr.b	#2,d0
00011426 0200 0001                  		andi.b	#1,d0
0001142A 12C0                       		move.b	d0,(a1)+
0001142C 0A00 0001                  		eori.b	#1,d0
00011430 12C0                       		move.b	d0,(a1)+
00011432 0A00 0001                  		eori.b	#1,d0
00011436 12C0                       		move.b	d0,(a1)+
00011438 0A00 0001                  		eori.b	#1,d0
0001143C 12C0                       		move.b	d0,(a1)+
0001143E 4E75                       		rts	
00011440                            ; ===========================================================================
00011440                            
00011440                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011440 43E8 0038                  		lea	$38(a0),a1
00011444 0C11 0080                  		cmpi.b	#$80,(a1)
00011448 6700                       		beq.s	locret_11038
0001144A 5211                       		addq.b	#1,(a1)
0001144C 7200                       		moveq	#0,d1
0001144E 1219                       		move.b	(a1)+,d1
00011450 4841                       		swap	d1
00011452 E289                       		lsr.l	#1,d1
00011454 2401                       		move.l	d1,d2
00011456 E289                       		lsr.l	#1,d1
00011458 2601                       		move.l	d1,d3
0001145A D682                       		add.l	d2,d3
0001145C 4841                       		swap	d1
0001145E 4842                       		swap	d2
00011460 4843                       		swap	d3
00011462 12C3                       		move.b	d3,(a1)+
00011464 12C2                       		move.b	d2,(a1)+
00011466 12C1                       		move.b	d1,(a1)+
00011468                            
00011468                            locret_11038:
00011468 4E75                       		rts	
0001146A 4E75                       		rts	
0001146C                            ; ===========================================================================
0001146C                            ; ---------------------------------------------------------------------------
0001146C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001146C                            ; ---------------------------------------------------------------------------
0001146C                            Map_obj5B:
0001146C                            	include "_maps\obj5B.asm"
0001146C                            ; ---------------------------------------------------------------------------
0001146C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001146C                            ; ---------------------------------------------------------------------------
0001146C 0000                       		dc.w byte_1103E-Map_obj5B
0001146E 01                         byte_1103E:	dc.b 1
0001146F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011474                            		even
00011474                            		even
00011474                            
00011474                            ; ===========================================================================
00011474                            ; ---------------------------------------------------------------------------
00011474                            ; Object 5C - metal girders in foreground (SLZ)
00011474                            ; ---------------------------------------------------------------------------
00011474                            
00011474                            Obj5C:					; XREF: Obj_Index
00011474 7000                       		moveq	#0,d0
00011476 1028 0024                  		move.b	$24(a0),d0
0001147A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001147E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011482                            ; ===========================================================================
00011482 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011484 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011486                            ; ===========================================================================
00011486                            
00011486                            Obj5C_Main:				; XREF: Obj5C_Index
00011486 5428 0024                  		addq.b	#2,$24(a0)
0001148A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011492 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011498 117C 0010 0019             		move.b	#$10,$19(a0)
0001149E                            
0001149E                            Obj5C_Display:				; XREF: Obj5C_Index
0001149E 2238 F700                  		move.l	($FFFFF700).w,d1
000114A2 D281                       		add.l	d1,d1
000114A4 4841                       		swap	d1
000114A6 4441                       		neg.w	d1
000114A8 3141 0008                  		move.w	d1,8(a0)
000114AC 2238 F704                  		move.l	($FFFFF704).w,d1
000114B0 D281                       		add.l	d1,d1
000114B2 4841                       		swap	d1
000114B4 0241 003F                  		andi.w	#$3F,d1
000114B8 4441                       		neg.w	d1
000114BA 0641 0100                  		addi.w	#$100,d1
000114BE 3141 000A                  		move.w	d1,$A(a0)
000114C2 6000 C57E                  		bra.w	DisplaySprite
000114C6                            ; ===========================================================================
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            Map_obj5C:
000114C6                            	include "_maps\obj5C.asm"
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000114C6                            ; ---------------------------------------------------------------------------
000114C6 0000                       		dc.w byte_11098-Map_obj5C
000114C8 09                         byte_11098:	dc.b 9
000114C9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000114CE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000114D3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000114D8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000114DD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000114E2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000114E7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000114EC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000114F1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000114F6                            		even
000114F6                            		even
000114F6                            
000114F6                            ; ===========================================================================
000114F6                            ; ---------------------------------------------------------------------------
000114F6                            ; Object 1B - water surface (LZ)
000114F6                            ; ---------------------------------------------------------------------------
000114F6                            
000114F6                            Obj1B:					; XREF: Obj_Index
000114F6 7000                       		moveq	#0,d0
000114F8 1028 0024                  		move.b	$24(a0),d0
000114FC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011500 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011504                            ; ===========================================================================
00011504 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011506 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011508                            ; ===========================================================================
00011508                            
00011508                            Obj1B_Main:				; XREF: Obj1B_Index
00011508 5428 0024                  		addq.b	#2,$24(a0)
0001150C 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011514 317C C300 0002             		move.w	#$C300,2(a0)
0001151A 117C 0004 0001             		move.b	#4,1(a0)
00011520 117C 0080 0019             		move.b	#$80,$19(a0)
00011526 3168 0008 0030             		move.w	8(a0),$30(a0)
0001152C                            
0001152C                            Obj1B_Action:				; XREF: Obj1B_Index
0001152C 3238 F700                  		move.w	($FFFFF700).w,d1
00011530 0241 FFE0                  		andi.w	#$FFE0,d1
00011534 D268 0030                  		add.w	$30(a0),d1
00011538 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001153E 6700                       		beq.s	loc_11114
00011540 0641 0020                  		addi.w	#$20,d1
00011544                            
00011544                            loc_11114:
00011544 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011548 3238 F646                  		move.w	($FFFFF646).w,d1
0001154C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011550 4A28 0032                  		tst.b	$32(a0)
00011554 6600                       		bne.s	Obj1B_Animate
00011556 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001155C 6700                       		beq.s	loc_1114A	; if not, branch
0001155E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011562 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011568 6000                       		bra.s	Obj1B_Display
0001156A                            ; ===========================================================================
0001156A                            
0001156A                            Obj1B_Animate:				; XREF: loc_11114
0001156A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001156E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011570 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011576 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001157A                            
0001157A                            loc_1114A:				; XREF: loc_11114
0001157A 5328 001E                  		subq.b	#1,$1E(a0)
0001157E 6A00                       		bpl.s	Obj1B_Display
00011580 117C 0007 001E             		move.b	#7,$1E(a0)
00011586 5228 001A                  		addq.b	#1,$1A(a0)
0001158A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011590 6500                       		bcs.s	Obj1B_Display
00011592 117C 0000 001A             		move.b	#0,$1A(a0)
00011598                            
00011598                            Obj1B_Display:
00011598 6000 C4A8                  		bra.w	DisplaySprite
0001159C                            ; ===========================================================================
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Sprite mappings - water surface (LZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            Map_obj1B:
0001159C                            	include "_maps\obj1B.asm"
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Sprite mappings - water surface (LZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000115A0 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000115A4 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000115A8 03                         byte_11178:	dc.b 3
000115A9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000115AE FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000115B3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000115B8 03                         byte_11188:	dc.b 3
000115B9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000115BE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000115C3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000115C8 03                         byte_11198:	dc.b 3
000115C9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000115CE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000115D3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000115D8 06                         byte_111A8:	dc.b 6
000115D9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000115DE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000115E3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000115E8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000115ED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000115F2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000115F7 06                         byte_111C7:	dc.b 6
000115F8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000115FD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011602 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011607 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001160C FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011611 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011616 06                         byte_111E6:	dc.b 6
00011617 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001161C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011621 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011626 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001162B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011630 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011636 00                         		even
00011636 00                         		even
00011636                            
00011636                            ; ===========================================================================
00011636                            ; ---------------------------------------------------------------------------
00011636                            ; Object 0B - pole that	breaks (LZ)
00011636                            ; ---------------------------------------------------------------------------
00011636                            
00011636                            Obj0B:					; XREF: Obj_Index
00011636 7000                       		moveq	#0,d0
00011638 1028 0024                  		move.b	$24(a0),d0
0001163C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011640 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011644                            ; ===========================================================================
00011644 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011646 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011648 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001164A                            ; ===========================================================================
0001164A                            
0001164A                            Obj0B_Main:				; XREF: Obj0B_Index
0001164A 5428 0024                  		addq.b	#2,$24(a0)
0001164E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011656 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001165C 117C 0004 0001             		move.b	#4,1(a0)
00011662 117C 0008 0019             		move.b	#8,$19(a0)
00011668 117C 0004 0018             		move.b	#4,$18(a0)
0001166E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011674 7000                       		moveq	#0,d0
00011676 1028 0028                  		move.b	$28(a0),d0	; get object type
0001167A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001167E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011682                            
00011682                            Obj0B_Action:				; XREF: Obj0B_Index
00011682 4A28 0032                  		tst.b	$32(a0)
00011686 6700                       		beq.s	Obj0B_Grab
00011688 4A68 0030                  		tst.w	$30(a0)
0001168C 6700                       		beq.s	Obj0B_MoveUp
0001168E 5368 0030                  		subq.w	#1,$30(a0)
00011692 6600                       		bne.s	Obj0B_MoveUp
00011694 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001169A 6000                       		bra.s	Obj0B_Release
0001169C                            ; ===========================================================================
0001169C                            
0001169C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001169C 43F8 D000                  		lea	($FFFFD000).w,a1
000116A0 3028 000C                  		move.w	$C(a0),d0
000116A4 0440 0018                  		subi.w	#$18,d0
000116A8 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000116AE 6700                       		beq.s	Obj0B_MoveDown
000116B0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000116B4 B069 000C                  		cmp.w	$C(a1),d0
000116B8 6500                       		bcs.s	Obj0B_MoveDown
000116BA 3340 000C                  		move.w	d0,$C(a1)
000116BE                            
000116BE                            Obj0B_MoveDown:
000116BE 0640 0024                  		addi.w	#$24,d0
000116C2 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000116C8 6700                       		beq.s	Obj0B_LetGo
000116CA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000116CE B069 000C                  		cmp.w	$C(a1),d0
000116D2 6400                       		bcc.s	Obj0B_LetGo
000116D4 3340 000C                  		move.w	d0,$C(a1)
000116D8                            
000116D8                            Obj0B_LetGo:
000116D8 1038 F603                  		move.b	($FFFFF603).w,d0
000116DC 0240 0070                  		andi.w	#$70,d0
000116E0 6700                       		beq.s	Obj0B_Display
000116E2                            
000116E2                            Obj0B_Release:				; XREF: Obj0B_Action
000116E2 4228 0020                  		clr.b	$20(a0)
000116E6 5428 0024                  		addq.b	#2,$24(a0)
000116EA 4238 F7C8                  		clr.b	($FFFFF7C8).w
000116EE 4238 F7C9                  		clr.b	($FFFFF7C9).w
000116F2 4228 0032                  		clr.b	$32(a0)
000116F6 6000                       		bra.s	Obj0B_Display
000116F8                            ; ===========================================================================
000116F8                            
000116F8                            Obj0B_Grab:				; XREF: Obj0B_Action
000116F8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000116FC 6700                       		beq.s	Obj0B_Display	; if not, branch
000116FE 43F8 D000                  		lea	($FFFFD000).w,a1
00011702 3028 0008                  		move.w	8(a0),d0
00011706 0640 0014                  		addi.w	#$14,d0
0001170A B069 0008                  		cmp.w	8(a1),d0
0001170E 6400                       		bcc.s	Obj0B_Display
00011710 4228 0021                  		clr.b	$21(a0)
00011714 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001171A 6400                       		bcc.s	Obj0B_Display
0001171C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011720 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011724 3028 0008                  		move.w	8(a0),d0
00011728 0640 0014                  		addi.w	#$14,d0
0001172C 3340 0008                  		move.w	d0,8(a1)
00011730 08A9 0000 0022             		bclr	#0,$22(a1)
00011736 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001173C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011742 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011748 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001174E                            
0001174E                            Obj0B_Display:				; XREF: Obj0B_Index
0001174E 6000 E39A                  		bra.w	MarkObjGone
00011752                            ; ===========================================================================
00011752                            ; ---------------------------------------------------------------------------
00011752                            ; Sprite mappings - pole that breaks (LZ)
00011752                            ; ---------------------------------------------------------------------------
00011752                            Map_obj0B:
00011752                            	include "_maps\obj0B.asm"
00011752                            ; ---------------------------------------------------------------------------
00011752                            ; Sprite mappings - pole that breaks (LZ)
00011752                            ; ---------------------------------------------------------------------------
00011752 0000                       		dc.w byte_11326-Map_obj0B
00011754 0000                       		dc.w byte_11331-Map_obj0B
00011756 02                         byte_11326:	dc.b 2			; normal pole
00011757 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001175C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011761 04                         byte_11331:	dc.b 4			; broken pole
00011762 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011767 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001176C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011771 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011776                            		even
00011776                            		even
00011776                            
00011776                            ; ===========================================================================
00011776                            ; ---------------------------------------------------------------------------
00011776                            ; Object 0C - flapping door (LZ)
00011776                            ; ---------------------------------------------------------------------------
00011776                            
00011776                            Obj0C:					; XREF: Obj_Index
00011776 7000                       		moveq	#0,d0
00011778 1028 0024                  		move.b	$24(a0),d0
0001177C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011780 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011784                            ; ===========================================================================
00011784 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011786 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011788                            ; ===========================================================================
00011788                            
00011788                            Obj0C_Main:				; XREF: Obj0C_Index
00011788 5428 0024                  		addq.b	#2,$24(a0)
0001178C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011794 317C 4328 0002             		move.w	#$4328,2(a0)
0001179A 0028 0004 0001             		ori.b	#4,1(a0)
000117A0 117C 0028 0019             		move.b	#$28,$19(a0)
000117A6 7000                       		moveq	#0,d0
000117A8 1028 0028                  		move.b	$28(a0),d0	; get object type
000117AC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117B0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000117B4                            
000117B4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000117B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000117B8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000117BA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000117C0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000117C6 4A28 0001                  		tst.b	1(a0)
000117CA 6A00                       		bpl.s	Obj0C_Solid
000117CC 303C 00BB                  		move.w	#$BB,d0
000117D0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
000117D6                            
000117D6                            Obj0C_Solid:
000117D6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000117DC 6100 9316                  		bsr.w	AnimateSprite
000117E0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000117E4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000117E8 6600                       		bne.s	Obj0C_Display	; if yes, branch
000117EA 3038 D008                  		move.w	($FFFFD008).w,d0
000117EE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000117F2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000117F4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000117FA 323C 0013                  		move.w	#$13,d1
000117FE 343C 0020                  		move.w	#$20,d2
00011802 3602                       		move.w	d2,d3
00011804 5243                       		addq.w	#1,d3
00011806 3828 0008                  		move.w	8(a0),d4
0001180A 6100 E606                  		bsr.w	SolidObject	; make the door	solid
0001180E                            
0001180E                            Obj0C_Display:
0001180E 6000 E2DA                  		bra.w	MarkObjGone
00011812                            ; ===========================================================================
00011812                            Ani_obj0C:
00011812                            	include "_anim\obj0C.asm"
00011812                            ; ---------------------------------------------------------------------------
00011812                            ; Animation script - flapping door (LZ)
00011812                            ; ---------------------------------------------------------------------------
00011812 0000                       		dc.w byte_113E6-Ani_obj0C
00011814 0000                       		dc.w byte_113EC-Ani_obj0C
00011816 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001181C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011822                            		even
00011822                            		even
00011822                            
00011822                            ; ---------------------------------------------------------------------------
00011822                            ; Sprite mappings - flapping door (LZ)
00011822                            ; ---------------------------------------------------------------------------
00011822                            Map_obj0C:
00011822                            	include "_maps\obj0C.asm"
00011822                            ; ---------------------------------------------------------------------------
00011822                            ; Sprite mappings - flapping door (LZ)
00011822                            ; ---------------------------------------------------------------------------
00011822 0000                       		dc.w byte_113F8-Map_obj0C
00011824 0000                       		dc.w byte_11403-Map_obj0C
00011826 0000                       		dc.w byte_1140E-Map_obj0C
00011828 02                         byte_113F8:	dc.b 2
00011829 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001182E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011833 02                         byte_11403:	dc.b 2
00011834 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011839 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001183E 02                         byte_1140E:	dc.b 2
0001183F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011844 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001184A 00                         		even
0001184A 00                         		even
0001184A                            
0001184A                            ; ===========================================================================
0001184A                            ; ---------------------------------------------------------------------------
0001184A                            ; Object 71 - invisible	solid blocks
0001184A                            ; ---------------------------------------------------------------------------
0001184A                            
0001184A                            Obj71:					; XREF: Obj_Index
0001184A 7000                       		moveq	#0,d0
0001184C 1028 0024                  		move.b	$24(a0),d0
00011850 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011854 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011858                            ; ===========================================================================
00011858 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001185A 0000                       		dc.w Obj71_Solid-Obj71_Index
0001185C                            ; ===========================================================================
0001185C                            
0001185C                            Obj71_Main:				; XREF: Obj71_Index
0001185C 5428 0024                  		addq.b	#2,$24(a0)
00011860 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011868 317C 8680 0002             		move.w	#$8680,2(a0)
0001186E 0028 0004 0001             		ori.b	#4,1(a0)
00011874 1028 0028                  		move.b	$28(a0),d0	; get object type
00011878 1200                       		move.b	d0,d1
0001187A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001187E 0640 0010                  		addi.w	#$10,d0
00011882 E248                       		lsr.w	#1,d0
00011884 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011888 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001188C 5241                       		addq.w	#1,d1
0001188E E749                       		lsl.w	#3,d1
00011890 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011894                            
00011894                            Obj71_Solid:				; XREF: Obj71_Index
00011894 6100 C426                  		bsr.w	ChkObjOnScreen
00011898 6600                       		bne.s	Obj71_ChkDel
0001189A 7200                       		moveq	#0,d1
0001189C 1228 0019                  		move.b	$19(a0),d1
000118A0 0641 000B                  		addi.w	#$B,d1
000118A4 7400                       		moveq	#0,d2
000118A6 1428 0016                  		move.b	$16(a0),d2
000118AA 3602                       		move.w	d2,d3
000118AC 5243                       		addq.w	#1,d3
000118AE 3828 0008                  		move.w	8(a0),d4
000118B2 6100 E5A4                  		bsr.w	SolidObject71
000118B6                            
000118B6                            Obj71_ChkDel:
000118B6 3028 0008                  		move.w	8(a0),d0
000118BA 0240 FF80                  		andi.w	#$FF80,d0
000118BE 3238 F700                  		move.w	($FFFFF700).w,d1
000118C2 0441 0080                  		subi.w	#$80,d1
000118C6 0241 FF80                  		andi.w	#$FF80,d1
000118CA 9041                       		sub.w	d1,d0
000118CC 0C40 0280                  		cmpi.w	#$280,d0
000118D0 6200                       		bhi.s	Obj71_Delete
000118D2 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000118D6 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000118D8 4EFA C168                  		jmp	DisplaySprite	; if yes, display the object
000118DC                            ; ===========================================================================
000118DC                            
000118DC                            Obj71_NoDisplay:
000118DC 4E75                       		rts	
000118DE                            ; ===========================================================================
000118DE                            
000118DE                            Obj71_Delete:
000118DE 4EFA C19E                  		jmp	DeleteObject
000118E2                            ; ===========================================================================
000118E2                            ; ---------------------------------------------------------------------------
000118E2                            ; Sprite mappings - invisible solid blocks
000118E2                            ; ---------------------------------------------------------------------------
000118E2                            Map_obj71:
000118E2                            	include "_maps\obj71.asm"
000118E2                            ; ---------------------------------------------------------------------------
000118E2                            ; Sprite mappings - invisible solid blocks
000118E2                            ; ---------------------------------------------------------------------------
000118E2 0000                       		dc.w byte_114BC-Map_obj71
000118E4 0000                       		dc.w byte_114D1-Map_obj71
000118E6 0000                       		dc.w byte_114E6-Map_obj71
000118E8 04                         byte_114BC:	dc.b 4
000118E9 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000118EE F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000118F3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000118F8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000118FD 04                         byte_114D1:	dc.b 4
000118FE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011903 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011908 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001190D 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011912 04                         byte_114E6:	dc.b 4
00011913 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011918 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001191D 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011922 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011928 00                         		even
00011928 00                         		even
00011928                            
00011928                            ; ===========================================================================
00011928                            ; ---------------------------------------------------------------------------
00011928                            ; Object 5D - fans (SLZ)
00011928                            ; ---------------------------------------------------------------------------
00011928                            
00011928                            Obj5D:					; XREF: Obj_Index
00011928 7000                       		moveq	#0,d0
0001192A 1028 0024                  		move.b	$24(a0),d0
0001192E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011932 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011936                            ; ===========================================================================
00011936 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011938 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001193A                            ; ===========================================================================
0001193A                            
0001193A                            Obj5D_Main:				; XREF: Obj5D_Index
0001193A 5428 0024                  		addq.b	#2,$24(a0)
0001193E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011946 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001194C 0028 0004 0001             		ori.b	#4,1(a0)
00011952 117C 0010 0019             		move.b	#$10,$19(a0)
00011958 117C 0004 0018             		move.b	#4,$18(a0)
0001195E                            
0001195E                            Obj5D_Delay:				; XREF: Obj5D_Index
0001195E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011964 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011966 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001196A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001196C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011972 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011978 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001197A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011980                            
00011980                            Obj5D_Blow:
00011980 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011984 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011988 43F8 D000                  		lea	($FFFFD000).w,a1
0001198C 3029 0008                  		move.w	8(a1),d0
00011990 9068 0008                  		sub.w	8(a0),d0
00011994 0828 0000 0022             		btst	#0,$22(a0)
0001199A 6600                       		bne.s	Obj5D_ChkSonic
0001199C 4440                       		neg.w	d0
0001199E                            
0001199E                            Obj5D_ChkSonic:
0001199E 0640 0050                  		addi.w	#$50,d0
000119A2 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000119A6 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000119A8 3229 000C                  		move.w	$C(a1),d1
000119AC 0641 0060                  		addi.w	#$60,d1
000119B0 9268 000C                  		sub.w	$C(a0),d1
000119B4 6500                       		bcs.s	Obj5D_Animate
000119B6 0C41 0070                  		cmpi.w	#$70,d1
000119BA 6400                       		bcc.s	Obj5D_Animate
000119BC 0440 0050                  		subi.w	#$50,d0
000119C0 6400                       		bcc.s	loc_1159A
000119C2 4640                       		not.w	d0
000119C4 D040                       		add.w	d0,d0
000119C6                            
000119C6                            loc_1159A:
000119C6 0640 0060                  		addi.w	#$60,d0
000119CA 0828 0000 0022             		btst	#0,$22(a0)
000119D0 6600                       		bne.s	loc_115A8
000119D2 4440                       		neg.w	d0
000119D4                            
000119D4                            loc_115A8:
000119D4 4400                       		neg.b	d0
000119D6 E840                       		asr.w	#4,d0
000119D8 0828 0000 0028             		btst	#0,$28(a0)
000119DE 6700                       		beq.s	Obj5D_MoveSonic
000119E0 4440                       		neg.w	d0
000119E2                            
000119E2                            Obj5D_MoveSonic:
000119E2 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000119E6                            
000119E6                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000119E6 5328 001E                  		subq.b	#1,$1E(a0)
000119EA 6A00                       		bpl.s	Obj5D_ChkDel
000119EC 117C 0000 001E             		move.b	#0,$1E(a0)
000119F2 5228 001B                  		addq.b	#1,$1B(a0)
000119F6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000119FC 6500                       		bcs.s	loc_115D8
000119FE 117C 0000 001B             		move.b	#0,$1B(a0)
00011A04                            
00011A04                            loc_115D8:
00011A04 7000                       		moveq	#0,d0
00011A06 0828 0000 0028             		btst	#0,$28(a0)
00011A0C 6700                       		beq.s	loc_115E4
00011A0E 7002                       		moveq	#2,d0
00011A10                            
00011A10                            loc_115E4:
00011A10 D028 001B                  		add.b	$1B(a0),d0
00011A14 1140 001A                  		move.b	d0,$1A(a0)
00011A18                            
00011A18                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011A18 6100 C028                  		bsr.w	DisplaySprite
00011A1C 3028 0008                  		move.w	8(a0),d0
00011A20 0240 FF80                  		andi.w	#$FF80,d0
00011A24 3238 F700                  		move.w	($FFFFF700).w,d1
00011A28 0441 0080                  		subi.w	#$80,d1
00011A2C 0241 FF80                  		andi.w	#$FF80,d1
00011A30 9041                       		sub.w	d1,d0
00011A32 0C40 0280                  		cmpi.w	#$280,d0
00011A36 6200 C046                  		bhi.w	DeleteObject
00011A3A 4E75                       		rts	
00011A3C                            ; ===========================================================================
00011A3C                            ; ---------------------------------------------------------------------------
00011A3C                            ; Sprite mappings - fans (SLZ)
00011A3C                            ; ---------------------------------------------------------------------------
00011A3C                            Map_obj5D:
00011A3C                            	include "_maps\obj5D.asm"
00011A3C                            ; ---------------------------------------------------------------------------
00011A3C                            ; Sprite mappings - fans (SLZ)
00011A3C                            ; ---------------------------------------------------------------------------
00011A3C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011A40 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011A44 0000                       		dc.w byte_1161A-Map_obj5D
00011A46 02                         byte_1161A:	dc.b 2
00011A47 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011A4C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011A51 02                         byte_11625:	dc.b 2
00011A52 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011A57 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011A5C 02                         byte_11630:	dc.b 2
00011A5D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011A62 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011A68 00                         		even
00011A68 00                         		even
00011A68                            
00011A68                            ; ===========================================================================
00011A68                            ; ---------------------------------------------------------------------------
00011A68                            ; Object 5E - seesaws (SLZ)
00011A68                            ; ---------------------------------------------------------------------------
00011A68                            
00011A68                            Obj5E:					; XREF: Obj_Index
00011A68 7000                       		moveq	#0,d0
00011A6A 1028 0024                  		move.b	$24(a0),d0
00011A6E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011A72 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011A76 3028 0030                  		move.w	$30(a0),d0
00011A7A 0240 FF80                  		andi.w	#$FF80,d0
00011A7E 3238 F700                  		move.w	($FFFFF700).w,d1
00011A82 0441 0080                  		subi.w	#$80,d1
00011A86 0241 FF80                  		andi.w	#$FF80,d1
00011A8A 9041                       		sub.w	d1,d0
00011A8C 6B00 BFF0                  		bmi.w	DeleteObject
00011A90 0C40 0280                  		cmpi.w	#$280,d0
00011A94 6200 BFE8                  		bhi.w	DeleteObject
00011A98 6000 BFA8                  		bra.w	DisplaySprite
00011A9C                            ; ===========================================================================
00011A9C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011A9E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011AA0 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011AA2 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011AA4 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011AA6 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011AA8                            ; ===========================================================================
00011AA8                            
00011AA8                            Obj5E_Main:				; XREF: Obj5E_Index
00011AA8 5428 0024                  		addq.b	#2,$24(a0)
00011AAC 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011AB4 317C 0374 0002             		move.w	#$374,2(a0)
00011ABA 0028 0004 0001             		ori.b	#4,1(a0)
00011AC0 117C 0004 0018             		move.b	#4,$18(a0)
00011AC6 117C 0030 0019             		move.b	#$30,$19(a0)
00011ACC 3168 0008 0030             		move.w	8(a0),$30(a0)
00011AD2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011AD6 6600                       		bne.s	loc_116D2	; if not, branch
00011AD8 6100 C404                  		bsr.w	SingleObjLoad2
00011ADC 6600                       		bne.s	loc_116D2
00011ADE 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011AE2 5C29 0024                  		addq.b	#6,$24(a1)
00011AE6 3368 0008 0008             		move.w	8(a0),8(a1)
00011AEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011AF2 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011AF8 2348 003C                  		move.l	a0,$3C(a1)
00011AFC                            
00011AFC                            loc_116D2:
00011AFC 0828 0000 0022             		btst	#0,$22(a0)
00011B02 6700                       		beq.s	loc_116E0
00011B04 117C 0002 001A             		move.b	#2,$1A(a0)
00011B0A                            
00011B0A                            loc_116E0:
00011B0A 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011B10                            
00011B10                            Obj5E_Slope:				; XREF: Obj5E_Index
00011B10 1228 003A                  		move.b	$3A(a0),d1
00011B14 6100 0000                  		bsr.w	loc_11766
00011B18 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011B1E 0828 0000 001A             		btst	#0,$1A(a0)
00011B24 6700                       		beq.s	loc_11702
00011B26 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011B2C                            
00011B2C                            loc_11702:
00011B2C 43F8 D000                  		lea	($FFFFD000).w,a1
00011B30 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011B36 323C 0030                  		move.w	#$30,d1
00011B3A 4EB9 0000 78CE             		jsr	(SlopeObject).l
00011B40 4E75                       		rts	
00011B42                            ; ===========================================================================
00011B42                            
00011B42                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011B42 6100 0000                  		bsr.w	loc_1174A
00011B46 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011B4C 0828 0000 001A             		btst	#0,$1A(a0)
00011B52 6700                       		beq.s	loc_11730
00011B54 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011B5A                            
00011B5A                            loc_11730:
00011B5A 323C 0030                  		move.w	#$30,d1
00011B5E 4EB9 0000 796E             		jsr	(ExitPlatform).l
00011B64 323C 0030                  		move.w	#$30,d1
00011B68 3428 0008                  		move.w	8(a0),d2
00011B6C 4EB9 0000 88CC             		jsr	SlopeObject2
00011B72 4E75                       		rts	
00011B74                            ; ===========================================================================
00011B74                            
00011B74                            loc_1174A:				; XREF: Obj5E_Slope2
00011B74 7202                       		moveq	#2,d1
00011B76 43F8 D000                  		lea	($FFFFD000).w,a1
00011B7A 3028 0008                  		move.w	8(a0),d0
00011B7E 9069 0008                  		sub.w	8(a1),d0
00011B82 6400                       		bcc.s	loc_1175E
00011B84 4440                       		neg.w	d0
00011B86 7200                       		moveq	#0,d1
00011B88                            
00011B88                            loc_1175E:
00011B88 0C40 0008                  		cmpi.w	#8,d0
00011B8C 6400                       		bcc.s	loc_11766
00011B8E 7201                       		moveq	#1,d1
00011B90                            
00011B90                            loc_11766:
00011B90 1028 001A                  		move.b	$1A(a0),d0
00011B94 B001                       		cmp.b	d1,d0
00011B96 6700                       		beq.s	locret_11790
00011B98 6400                       		bcc.s	loc_11772
00011B9A 5400                       		addq.b	#2,d0
00011B9C                            
00011B9C                            loc_11772:
00011B9C 5300                       		subq.b	#1,d0
00011B9E 1140 001A                  		move.b	d0,$1A(a0)
00011BA2 1141 003A                  		move.b	d1,$3A(a0)
00011BA6 08A8 0000 0001             		bclr	#0,1(a0)
00011BAC 0828 0001 001A             		btst	#1,$1A(a0)
00011BB2 6700                       		beq.s	locret_11790
00011BB4 08E8 0000 0001             		bset	#0,1(a0)
00011BBA                            
00011BBA                            locret_11790:
00011BBA 4E75                       		rts	
00011BBC                            ; ===========================================================================
00011BBC                            
00011BBC                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011BBC 5428 0024                  		addq.b	#2,$24(a0)
00011BC0 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011BC8 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011BCE 0028 0004 0001             		ori.b	#4,1(a0)
00011BD4 117C 0004 0018             		move.b	#4,$18(a0)
00011BDA 117C 008B 0020             		move.b	#$8B,$20(a0)
00011BE0 117C 000C 0019             		move.b	#$C,$19(a0)
00011BE6 3168 0008 0030             		move.w	8(a0),$30(a0)
00011BEC 0668 0028 0008             		addi.w	#$28,8(a0)
00011BF2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011BF8 117C 0001 001A             		move.b	#1,$1A(a0)
00011BFE 0828 0000 0022             		btst	#0,$22(a0)
00011C04 6700                       		beq.s	Obj5E_MoveSpike
00011C06 0468 0050 0008             		subi.w	#$50,8(a0)
00011C0C 117C 0002 003A             		move.b	#2,$3A(a0)
00011C12                            
00011C12                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011C12 2268 003C                  		movea.l	$3C(a0),a1
00011C16 7000                       		moveq	#0,d0
00011C18 1028 003A                  		move.b	$3A(a0),d0
00011C1C 9029 003A                  		sub.b	$3A(a1),d0
00011C20 6700                       		beq.s	loc_1183E
00011C22 6400                       		bcc.s	loc_117FC
00011C24 4400                       		neg.b	d0
00011C26                            
00011C26                            loc_117FC:
00011C26 323C F7E8                  		move.w	#-$818,d1
00011C2A 343C FEEC                  		move.w	#-$114,d2
00011C2E 0C00 0001                  		cmpi.b	#1,d0
00011C32 6700                       		beq.s	loc_11822
00011C34 323C F510                  		move.w	#-$AF0,d1
00011C38 343C FF34                  		move.w	#-$CC,d2
00011C3C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011C42 6D00                       		blt.s	loc_11822
00011C44 323C F200                  		move.w	#-$E00,d1
00011C48 343C FF60                  		move.w	#-$A0,d2
00011C4C                            
00011C4C                            loc_11822:
00011C4C 3141 0012                  		move.w	d1,$12(a0)
00011C50 3142 0010                  		move.w	d2,$10(a0)
00011C54 3028 0008                  		move.w	8(a0),d0
00011C58 9068 0030                  		sub.w	$30(a0),d0
00011C5C 6400                       		bcc.s	loc_11838
00011C5E 4468 0010                  		neg.w	$10(a0)
00011C62                            
00011C62                            loc_11838:
00011C62 5428 0024                  		addq.b	#2,$24(a0)
00011C66 6000                       		bra.s	Obj5E_SpikeFall
00011C68                            ; ===========================================================================
00011C68                            
00011C68                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011C68 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011C6E 7000                       		moveq	#0,d0
00011C70 1029 001A                  		move.b	$1A(a1),d0
00011C74 343C 0028                  		move.w	#$28,d2
00011C78 3228 0008                  		move.w	8(a0),d1
00011C7C 9268 0030                  		sub.w	$30(a0),d1
00011C80 6400                       		bcc.s	loc_1185C
00011C82 4442                       		neg.w	d2
00011C84 5440                       		addq.w	#2,d0
00011C86                            
00011C86                            loc_1185C:
00011C86 D040                       		add.w	d0,d0
00011C88 3228 0034                  		move.w	$34(a0),d1
00011C8C D272 0000                  		add.w	(a2,d0.w),d1
00011C90 3141 000C                  		move.w	d1,$C(a0)
00011C94 D468 0030                  		add.w	$30(a0),d2
00011C98 3142 0008                  		move.w	d2,8(a0)
00011C9C 4268 000E                  		clr.w	$E(a0)
00011CA0 4268 000A                  		clr.w	$A(a0)
00011CA4 4E75                       		rts	
00011CA6                            ; ===========================================================================
00011CA6                            
00011CA6                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011CA6 4A68 0012                  		tst.w	$12(a0)
00011CAA 6A00                       		bpl.s	loc_1189A
00011CAC 6100 BD42                  		bsr.w	ObjectFall
00011CB0 3028 0034                  		move.w	$34(a0),d0
00011CB4 0440 002F                  		subi.w	#$2F,d0
00011CB8 B068 000C                  		cmp.w	$C(a0),d0
00011CBC 6E00                       		bgt.s	locret_11898
00011CBE 6100 BD30                  		bsr.w	ObjectFall
00011CC2                            
00011CC2                            locret_11898:
00011CC2 4E75                       		rts	
00011CC4                            ; ===========================================================================
00011CC4                            
00011CC4                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011CC4 6100 BD2A                  		bsr.w	ObjectFall
00011CC8 2268 003C                  		movea.l	$3C(a0),a1
00011CCC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011CD2 7000                       		moveq	#0,d0
00011CD4 1029 001A                  		move.b	$1A(a1),d0
00011CD8 3228 0008                  		move.w	8(a0),d1
00011CDC 9268 0030                  		sub.w	$30(a0),d1
00011CE0 6400                       		bcc.s	loc_118BA
00011CE2 5440                       		addq.w	#2,d0
00011CE4                            
00011CE4                            loc_118BA:
00011CE4 D040                       		add.w	d0,d0
00011CE6 3228 0034                  		move.w	$34(a0),d1
00011CEA D272 0000                  		add.w	(a2,d0.w),d1
00011CEE B268 000C                  		cmp.w	$C(a0),d1
00011CF2 6E00                       		bgt.s	locret_11938
00011CF4 2268 003C                  		movea.l	$3C(a0),a1
00011CF8 7202                       		moveq	#2,d1
00011CFA 4A68 0010                  		tst.w	$10(a0)
00011CFE 6B00                       		bmi.s	Obj5E_Spring
00011D00 7200                       		moveq	#0,d1
00011D02                            
00011D02                            Obj5E_Spring:
00011D02 1341 003A                  		move.b	d1,$3A(a1)
00011D06 1141 003A                  		move.b	d1,$3A(a0)
00011D0A B229 001A                  		cmp.b	$1A(a1),d1
00011D0E 6700                       		beq.s	loc_1192C
00011D10 08A9 0003 0022             		bclr	#3,$22(a1)
00011D16 6700                       		beq.s	loc_1192C
00011D18 4229 0025                  		clr.b	$25(a1)
00011D1C 137C 0002 0024             		move.b	#2,$24(a1)
00011D22 45F8 D000                  		lea	($FFFFD000).w,a2
00011D26 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011D2C 446A 0012                  		neg.w	$12(a2)
00011D30 08EA 0001 0022             		bset	#1,$22(a2)
00011D36 08AA 0003 0022             		bclr	#3,$22(a2)
00011D3C 422A 003C                  		clr.b	$3C(a2)
00011D40 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011D46 157C 0002 0024             		move.b	#2,$24(a2)
00011D4C 303C 00CC                  		move.w	#$CC,d0
00011D50 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011D56                            
00011D56                            loc_1192C:
00011D56 4268 0010                  		clr.w	$10(a0)
00011D5A 4268 0012                  		clr.w	$12(a0)
00011D5E 5528 0024                  		subq.b	#2,$24(a0)
00011D62                            
00011D62                            locret_11938:
00011D62 4E75                       		rts	
00011D64                            ; ===========================================================================
00011D64 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011D6E                            
00011D6E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011D9E                            		even
00011D9E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011DCE                            		even
00011DCE                            ; ---------------------------------------------------------------------------
00011DCE                            ; Sprite mappings - seesaws (SLZ)
00011DCE                            ; ---------------------------------------------------------------------------
00011DCE                            Map_obj5E:
00011DCE                            	include "_maps\obj5E.asm"
00011DCE                            ; ---------------------------------------------------------------------------
00011DCE                            ; Sprite mappings - seesaws (SLZ)
00011DCE                            ; ---------------------------------------------------------------------------
00011DCE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011DD2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011DD6 07                         byte_119AC:	dc.b 7
00011DD7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011DDC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011DE1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011DE6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011DEB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011DF0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011DF5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011DFA 04                         byte_119D0:	dc.b 4
00011DFB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011E00 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011E05 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011E0A E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011E10 00                         		even
00011E10 00                         		even
00011E10                            
00011E10                            ; ---------------------------------------------------------------------------
00011E10                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011E10                            ; ---------------------------------------------------------------------------
00011E10                            Map_obj5Ea:
00011E10                            	include "_maps\obj5Eballs.asm"
00011E10                            ; ---------------------------------------------------------------------------
00011E10                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011E10                            ; ---------------------------------------------------------------------------
00011E10 0000                       		dc.w byte_119EA-Map_obj5Ea
00011E12 0000                       		dc.w byte_119F0-Map_obj5Ea
00011E14 01                         byte_119EA:	dc.b 1
00011E15 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011E1A 01                         byte_119F0:	dc.b 1
00011E1B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011E20                            		even
00011E20                            		even
00011E20                            
00011E20                            ; ===========================================================================
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            
00011E20                            Obj5F:					; XREF: Obj_Index
00011E20 7000                       		moveq	#0,d0
00011E22 1028 0024                  		move.b	$24(a0),d0
00011E26 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011E2A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011E2E                            ; ===========================================================================
00011E2E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011E30 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011E32 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011E34 0000                       		dc.w Obj5F_End-Obj5F_Index
00011E36                            ; ===========================================================================
00011E36                            
00011E36                            Obj5F_Main:				; XREF: Obj5F_Index
00011E36 5428 0024                  		addq.b	#2,$24(a0)
00011E3A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011E42 317C 0400 0002             		move.w	#$400,2(a0)
00011E48 0028 0004 0001             		ori.b	#4,1(a0)
00011E4E 117C 0003 0018             		move.b	#3,$18(a0)
00011E54 117C 000C 0019             		move.b	#$C,$19(a0)
00011E5A 1028 0028                  		move.b	$28(a0),d0
00011E5E 6700                       		beq.s	loc_11A3C
00011E60 1140 0024                  		move.b	d0,$24(a0)
00011E64 4E75                       		rts	
00011E66                            ; ===========================================================================
00011E66                            
00011E66                            loc_11A3C:
00011E66 117C 009A 0020             		move.b	#$9A,$20(a0)
00011E6C 0868 0000 0022             		bchg	#0,$22(a0)
00011E72                            
00011E72                            Obj5F_Action:				; XREF: Obj5F_Index
00011E72 7000                       		moveq	#0,d0
00011E74 1028 0025                  		move.b	$25(a0),d0
00011E78 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011E7C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011E80 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011E86 6100 8C6C                  		bsr.w	AnimateSprite
00011E8A 6000 DC5E                  		bra.w	MarkObjGone
00011E8E                            ; ===========================================================================
00011E8E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011E90 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011E92 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011E94                            ; ===========================================================================
00011E94                            
00011E94                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011E94 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011E98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011E9C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011E9E 5428 0025                  		addq.b	#2,$25(a0)
00011EA2 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011EA8 317C 0010 0010             		move.w	#$10,$10(a0)
00011EAE 117C 0001 001C             		move.b	#1,$1C(a0)
00011EB4 0868 0000 0022             		bchg	#0,$22(a0)
00011EBA 6700                       		beq.s	locret_11A96
00011EBC 4468 0010                  		neg.w	$10(a0)		; change direction
00011EC0                            
00011EC0                            locret_11A96:
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2                            
00011EC2                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011EC2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011EC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011ECA 6B00                       		bmi.s	loc_11AA8
00011ECC 6100 BB4E                  		bsr.w	SpeedToPos
00011ED0 4E75                       		rts	
00011ED2                            ; ===========================================================================
00011ED2                            
00011ED2                            loc_11AA8:
00011ED2 5528 0025                  		subq.b	#2,$25(a0)
00011ED6 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011EDC 4268 0010                  		clr.w	$10(a0)		; stop walking
00011EE0 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011EE6 4E75                       		rts	
00011EE8                            ; ===========================================================================
00011EE8                            
00011EE8                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011EE8 5368 0030                  		subq.w	#1,$30(a0)
00011EEC 6A00                       		bpl.s	locret_11AD0
00011EEE 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011EF2 117C 0000 0024             		move.b	#0,$24(a0)
00011EF8                            
00011EF8                            locret_11AD0:
00011EF8 4E75                       		rts	
00011EFA                            ; ===========================================================================
00011EFA                            
00011EFA                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011EFA 3038 D008                  		move.w	($FFFFD008).w,d0
00011EFE 9068 0008                  		sub.w	8(a0),d0
00011F02 6400                       		bcc.s	loc_11ADE
00011F04 4440                       		neg.w	d0
00011F06                            
00011F06                            loc_11ADE:
00011F06 0C40 0060                  		cmpi.w	#$60,d0
00011F0A 6400                       		bcc.s	locret_11B5E
00011F0C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011F10 9068 000C                  		sub.w	$C(a0),d0
00011F14 6400                       		bcc.s	Obj5F_MakeFuse
00011F16 4440                       		neg.w	d0
00011F18                            
00011F18                            Obj5F_MakeFuse:
00011F18 0C40 0060                  		cmpi.w	#$60,d0
00011F1C 6400                       		bcc.s	locret_11B5E
00011F1E 4A78 FE08                  		tst.w	($FFFFFE08).w
00011F22 6600                       		bne.s	locret_11B5E
00011F24 117C 0004 0025             		move.b	#4,$25(a0)
00011F2A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011F30 4268 0010                  		clr.w	$10(a0)
00011F34 117C 0002 001C             		move.b	#2,$1C(a0)
00011F3A 6100 BFA2                  		bsr.w	SingleObjLoad2
00011F3E 6600                       		bne.s	locret_11B5E
00011F40 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011F44 3368 0008 0008             		move.w	8(a0),8(a1)
00011F4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F50 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011F56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011F5C 137C 0004 0028             		move.b	#4,$28(a1)
00011F62 137C 0003 001C             		move.b	#3,$1C(a1)
00011F68 337C 0010 0012             		move.w	#$10,$12(a1)
00011F6E 0828 0001 0022             		btst	#1,$22(a0)
00011F74 6700                       		beq.s	loc_11B54
00011F76 4469 0012                  		neg.w	$12(a1)
00011F7A                            
00011F7A                            loc_11B54:
00011F7A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011F80 2348 003C                  		move.l	a0,$3C(a1)
00011F84                            
00011F84                            locret_11B5E:
00011F84 4E75                       		rts	
00011F86                            ; ===========================================================================
00011F86                            
00011F86                            Obj5F_Display:				; XREF: Obj5F_Index
00011F86 6100                       		bsr.s	loc_11B70
00011F88 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011F8E 6100 8B64                  		bsr.w	AnimateSprite
00011F92 6000 DB56                  		bra.w	MarkObjGone
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            loc_11B70:
00011F96 5368 0030                  		subq.w	#1,$30(a0)
00011F9A 6B00                       		bmi.s	loc_11B7C
00011F9C 6100 BA7E                  		bsr.w	SpeedToPos
00011FA0 4E75                       		rts	
00011FA2                            ; ===========================================================================
00011FA2                            
00011FA2                            loc_11B7C:
00011FA2 4268 0030                  		clr.w	$30(a0)
00011FA6 4228 0024                  		clr.b	$24(a0)
00011FAA 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011FB0 7203                       		moveq	#3,d1
00011FB2 2248                       		movea.l	a0,a1
00011FB4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011FBA 6000                       		bra.s	Obj5F_MakeShrap
00011FBC                            ; ===========================================================================
00011FBC                            
00011FBC                            Obj5F_Loop:
00011FBC 6100 BF20                  		bsr.w	SingleObjLoad2
00011FC0 6600                       		bne.s	loc_11BCE
00011FC2                            
00011FC2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011FC2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011FC6 3368 0008 0008             		move.w	8(a0),8(a1)
00011FCC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011FD2 137C 0006 0028             		move.b	#6,$28(a1)
00011FD8 137C 0004 001C             		move.b	#4,$1C(a1)
00011FDE 335A 0010                  		move.w	(a2)+,$10(a1)
00011FE2 335A 0012                  		move.w	(a2)+,$12(a1)
00011FE6 137C 0098 0020             		move.b	#$98,$20(a1)
00011FEC 08E9 0007 0001             		bset	#7,1(a1)
00011FF2                            
00011FF2                            loc_11BCE:
00011FF2 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011FF6                            
00011FF6 117C 0006 0024             		move.b	#6,$24(a0)
00011FFC                            
00011FFC                            Obj5F_End:				; XREF: Obj5F_Index
00011FFC 6100 BA1E                  		bsr.w	SpeedToPos
00012000 0668 0018 0012             		addi.w	#$18,$12(a0)
00012006 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001200C 6100 8AE6                  		bsr.w	AnimateSprite
00012010 4A28 0001                  		tst.b	1(a0)
00012014 6A00 BA68                  		bpl.w	DeleteObject
00012018 6000 BA28                  		bra.w	DisplaySprite
0001201C                            ; ===========================================================================
0001201C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001202C                            
0001202C                            Ani_obj5F:
0001202C                            	include "_anim\obj5F.asm"
0001202C                            ; ---------------------------------------------------------------------------
0001202C                            ; Animation script - Bomb enemy
0001202C                            ; ---------------------------------------------------------------------------
0001202C 0000                       		dc.w byte_11C12-Ani_obj5F
0001202E 0000                       		dc.w byte_11C16-Ani_obj5F
00012030 0000                       		dc.w byte_11C1C-Ani_obj5F
00012032 0000                       		dc.w byte_11C20-Ani_obj5F
00012034 0000                       		dc.w byte_11C24-Ani_obj5F
00012036 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001203A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012040 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012044 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012048 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001204C                            		even
0001204C                            		even
0001204C                            
0001204C                            ; ---------------------------------------------------------------------------
0001204C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001204C                            ; ---------------------------------------------------------------------------
0001204C                            Map_obj5F:
0001204C                            	include "_maps\obj5F.asm"
0001204C                            ; ---------------------------------------------------------------------------
0001204C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001204C                            ; ---------------------------------------------------------------------------
0001204C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012050 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012054 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012058 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001205C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012060 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012064 03                         byte_11C40:	dc.b 3
00012065 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001206A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001206F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012074 03                         byte_11C50:	dc.b 3
00012075 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001207A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001207F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012084 03                         byte_11C60:	dc.b 3
00012085 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001208A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001208F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012094 03                         byte_11C70:	dc.b 3
00012095 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001209A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001209F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000120A4 03                         byte_11C80:	dc.b 3
000120A5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000120AA 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000120AF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000120B4 03                         byte_11C90:	dc.b 3
000120B5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000120BA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000120BF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000120C4 02                         byte_11CA0:	dc.b 2
000120C5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000120CA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000120CF 02                         byte_11CAB:	dc.b 2
000120D0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000120D5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000120DA 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000120DB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000120E0 01                         byte_11CBC:	dc.b 1			; fuse
000120E1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000120E6 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000120E7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000120EC 01                         byte_11CC8:	dc.b 1			; fireball
000120ED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000120F2                            		even
000120F2                            		even
000120F2                            
000120F2                            ; ===========================================================================
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            
000120F2                            Obj60:					; XREF: Obj_Index
000120F2 7000                       		moveq	#0,d0
000120F4 1028 0024                  		move.b	$24(a0),d0
000120F8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000120FC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012100                            ; ===========================================================================
00012100 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012102 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012104 0000                       		dc.w Obj60_Display-Obj60_Index
00012106 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012108 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001210A                            ; ===========================================================================
0001210A                            
0001210A                            Obj60_Main:				; XREF: Obj60_Index
0001210A 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012112 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012118 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001211E 6700                       		beq.s	loc_11D02
00012120 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012126                            
00012126                            loc_11D02:
00012126 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001212C 6600                       		bne.s	loc_11D10
0001212E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012134                            
00012134                            loc_11D10:
00012134 0028 0004 0001             		ori.b	#4,1(a0)
0001213A 117C 0004 0018             		move.b	#4,$18(a0)
00012140 117C 000B 0020             		move.b	#$B,$20(a0)
00012146 117C 000C 0019             		move.b	#$C,$19(a0)
0001214C 7400                       		moveq	#0,d2
0001214E 45E8 0037                  		lea	$37(a0),a2
00012152 264A                       		movea.l	a2,a3
00012154 524A                       		addq.w	#1,a2
00012156 7203                       		moveq	#3,d1
00012158                            
00012158                            Obj60_MakeOrbs:
00012158 6100 BD84                  		bsr.w	SingleObjLoad2
0001215C 6600                       		bne.s	loc_11D90
0001215E 5213                       		addq.b	#1,(a3)
00012160 3A09                       		move.w	a1,d5
00012162 0445 D000                  		subi.w	#-$3000,d5
00012166 EC4D                       		lsr.w	#6,d5
00012168 0245 007F                  		andi.w	#$7F,d5
0001216C 14C5                       		move.b	d5,(a2)+
0001216E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012170 137C 0006 0024             		move.b	#6,$24(a1)
00012176 2368 0004 0004             		move.l	4(a0),4(a1)
0001217C 3368 0002 0002             		move.w	2(a0),2(a1)
00012182 0029 0004 0001             		ori.b	#4,1(a1)
00012188 137C 0004 0018             		move.b	#4,$18(a1)
0001218E 137C 0008 0019             		move.b	#8,$19(a1)
00012194 137C 0003 001A             		move.b	#3,$1A(a1)
0001219A 137C 0098 0020             		move.b	#$98,$20(a1)
000121A0 1342 0026                  		move.b	d2,$26(a1)
000121A4 0602 0040                  		addi.b	#$40,d2
000121A8 2348 003C                  		move.l	a0,$3C(a1)
000121AC 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000121B0                            
000121B0                            loc_11D90:
000121B0 7001                       		moveq	#1,d0
000121B2 0828 0000 0022             		btst	#0,$22(a0)
000121B8 6700                       		beq.s	Obj60_Move
000121BA 4440                       		neg.w	d0
000121BC                            
000121BC                            Obj60_Move:
000121BC 1140 0036                  		move.b	d0,$36(a0)
000121C0 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000121C6 5428 0024                  		addq.b	#2,$24(a0)
000121CA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000121D0 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000121D6 6700                       		beq.s	locret_11DBC	; if not, branch
000121D8 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000121DC                            
000121DC                            locret_11DBC:
000121DC 4E75                       		rts	
000121DE                            ; ===========================================================================
000121DE                            
000121DE                            Obj60_ChkSonic:				; XREF: Obj60_Index
000121DE 3038 D008                  		move.w	($FFFFD008).w,d0
000121E2 9068 0008                  		sub.w	8(a0),d0
000121E6 6400                       		bcc.s	loc_11DCA
000121E8 4440                       		neg.w	d0
000121EA                            
000121EA                            loc_11DCA:
000121EA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000121EE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000121F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000121F4 9068 000C                  		sub.w	$C(a0),d0
000121F8 6400                       		bcc.s	loc_11DDC
000121FA 4440                       		neg.w	d0
000121FC                            
000121FC                            loc_11DDC:
000121FC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012200 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012202 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012206 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012208 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001220E                            
0001220E                            Obj60_Animate:
0001220E 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012214 6100 88DE                  		bsr.w	AnimateSprite
00012218 6000 0000                  		bra.w	Obj60_ChkDel
0001221C                            ; ===========================================================================
0001221C                            
0001221C                            Obj60_Display:				; XREF: Obj60_Index
0001221C 6100 B7FE                  		bsr.w	SpeedToPos
00012220                            
00012220                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012220 3028 0008                  		move.w	8(a0),d0
00012224 0240 FF80                  		andi.w	#$FF80,d0
00012228 3238 F700                  		move.w	($FFFFF700).w,d1
0001222C 0441 0080                  		subi.w	#$80,d1
00012230 0241 FF80                  		andi.w	#$FF80,d1
00012234 9041                       		sub.w	d1,d0
00012236 0C40 0280                  		cmpi.w	#$280,d0
0001223A 6200 0000                  		bhi.w	Obj60_ChkGone
0001223E 6000 B802                  		bra.w	DisplaySprite
00012242                            ; ===========================================================================
00012242                            
00012242                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012242 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012246 7000                       		moveq	#0,d0
00012248 1028 0023                  		move.b	$23(a0),d0
0001224C 6700                       		beq.s	loc_11E34
0001224E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012254                            
00012254                            loc_11E34:
00012254 45E8 0037                  		lea	$37(a0),a2
00012258 7400                       		moveq	#0,d2
0001225A 141A                       		move.b	(a2)+,d2
0001225C 5342                       		subq.w	#1,d2
0001225E 6500                       		bcs.s	Obj60_Delete
00012260                            
00012260                            loc_11E40:
00012260 7000                       		moveq	#0,d0
00012262 101A                       		move.b	(a2)+,d0
00012264 ED48                       		lsl.w	#6,d0
00012266 0680 00FF D000             		addi.l	#$FFD000,d0
0001226C 2240                       		movea.l	d0,a1
0001226E 6100 B810                  		bsr.w	DeleteObject2
00012272 51CA FFEC                  		dbf	d2,loc_11E40
00012276                            
00012276                            Obj60_Delete:
00012276 6000 B806                  		bra.w	DeleteObject
0001227A                            ; ===========================================================================
0001227A                            
0001227A                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001227A 2268 003C                  		movea.l	$3C(a0),a1
0001227E 0C11 0060                  		cmpi.b	#$60,0(a1)
00012282 6600 B7FA                  		bne.w	DeleteObject
00012286 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001228C 6600                       		bne.s	Obj60_Circle
0001228E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012294 6600                       		bne.s	Obj60_Circle
00012296 5428 0024                  		addq.b	#2,$24(a0)
0001229A 5329 0037                  		subq.b	#1,$37(a1)
0001229E 6600                       		bne.s	Obj60_FireOrb
000122A0 5429 0024                  		addq.b	#2,$24(a1)
000122A4                            
000122A4                            Obj60_FireOrb:
000122A4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000122AA 0829 0000 0022             		btst	#0,$22(a1)
000122B0 6700                       		beq.s	Obj60_Display2
000122B2 4468 0010                  		neg.w	$10(a0)
000122B6                            
000122B6                            Obj60_Display2:
000122B6 6000 B78A                  		bra.w	DisplaySprite
000122BA                            ; ===========================================================================
000122BA                            
000122BA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000122BA 1028 0026                  		move.b	$26(a0),d0
000122BE 4EB9 0000 2C22             		jsr	(CalcSine).l
000122C4 E841                       		asr.w	#4,d1
000122C6 D269 0008                  		add.w	8(a1),d1
000122CA 3141 0008                  		move.w	d1,8(a0)
000122CE E840                       		asr.w	#4,d0
000122D0 D069 000C                  		add.w	$C(a1),d0
000122D4 3140 000C                  		move.w	d0,$C(a0)
000122D8 1029 0036                  		move.b	$36(a1),d0
000122DC D128 0026                  		add.b	d0,$26(a0)
000122E0 6000 B760                  		bra.w	DisplaySprite
000122E4                            ; ===========================================================================
000122E4                            
000122E4                            Obj60_ChkDel2:				; XREF: Obj60_Index
000122E4 6100 B736                  		bsr.w	SpeedToPos
000122E8 4A28 0001                  		tst.b	1(a0)
000122EC 6A00 B790                  		bpl.w	DeleteObject
000122F0 6000 B750                  		bra.w	DisplaySprite
000122F4                            ; ===========================================================================
000122F4                            Ani_obj60:
000122F4                            	include "_anim\obj60.asm"
000122F4                            ; ---------------------------------------------------------------------------
000122F4                            ; Animation script - Orbinaut enemy
000122F4                            ; ---------------------------------------------------------------------------
000122F4 0000                       		dc.w byte_11EDA-Ani_obj60
000122F6 0000                       		dc.w byte_11EDE-Ani_obj60
000122F8 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000122FC 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012302                            		even
00012302                            		even
00012302                            
00012302                            ; ---------------------------------------------------------------------------
00012302                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012302                            ; ---------------------------------------------------------------------------
00012302                            Map_obj60:
00012302                            	include "_maps\obj60.asm"
00012302                            ; ---------------------------------------------------------------------------
00012302                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012302                            ; ---------------------------------------------------------------------------
00012302 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012306 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001230A 01                         byte_11EEC:	dc.b 1
0001230B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012310 01                         byte_11EF2:	dc.b 1
00012311 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012316 01                         byte_11EF8:	dc.b 1
00012317 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001231C 01                         byte_11EFE:	dc.b 1
0001231D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012322                            		even
00012322                            		even
00012322                            
00012322                            ; ===========================================================================
00012322                            ; ---------------------------------------------------------------------------
00012322                            ; Object 16 - harpoon (LZ)
00012322                            ; ---------------------------------------------------------------------------
00012322                            
00012322                            Obj16:					; XREF: Obj_Index
00012322 7000                       		moveq	#0,d0
00012324 1028 0024                  		move.b	$24(a0),d0
00012328 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001232C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012330                            ; ===========================================================================
00012330 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012332 0000                       		dc.w Obj16_Move-Obj16_Index
00012334 0000                       		dc.w Obj16_Wait-Obj16_Index
00012336                            ; ===========================================================================
00012336                            
00012336                            Obj16_Main:				; XREF: Obj16_Index
00012336 5428 0024                  		addq.b	#2,$24(a0)
0001233A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012342 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012348 0028 0004 0001             		ori.b	#4,1(a0)
0001234E 117C 0004 0018             		move.b	#4,$18(a0)
00012354 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001235A 117C 0014 0019             		move.b	#$14,$19(a0)
00012360 317C 003C 0030             		move.w	#60,$30(a0)
00012366                            
00012366                            Obj16_Move:				; XREF: Obj16_Index
00012366 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001236C 6100 8786                  		bsr.w	AnimateSprite
00012370 7000                       		moveq	#0,d0
00012372 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012376 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001237C 6000 D76C                  		bra.w	MarkObjGone
00012380                            ; ===========================================================================
00012380 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012386                            ; ===========================================================================
00012386                            
00012386                            Obj16_Wait:				; XREF: Obj16_Index
00012386 5368 0030                  		subq.w	#1,$30(a0)
0001238A 6A00                       		bpl.s	Obj16_ChkDel
0001238C 317C 003C 0030             		move.w	#60,$30(a0)
00012392 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012396 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001239C                            
0001239C                            Obj16_ChkDel:
0001239C 6000 D74C                  		bra.w	MarkObjGone
000123A0                            ; ===========================================================================
000123A0                            Ani_obj16:
000123A0                            	include "_anim\obj16.asm"
000123A0                            ; ---------------------------------------------------------------------------
000123A0                            ; Animation script - harpoon (LZ)
000123A0                            ; ---------------------------------------------------------------------------
000123A0 0000                       		dc.w byte_11F8A-Ani_obj16
000123A2 0000                       		dc.w byte_11F8E-Ani_obj16
000123A4 0000                       		dc.w byte_11F92-Ani_obj16
000123A6 0000                       		dc.w byte_11F96-Ani_obj16
000123A8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000123AC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000123B0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000123B4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000123B8                            		even
000123B8                            		even
000123B8                            
000123B8                            ; ---------------------------------------------------------------------------
000123B8                            ; Sprite mappings - harpoon (LZ)
000123B8                            ; ---------------------------------------------------------------------------
000123B8                            Map_obj16:
000123B8                            	include "_maps\obj16.asm"
000123B8                            ; ---------------------------------------------------------------------------
000123B8                            ; Sprite mappings - harpoon (LZ)
000123B8                            ; ---------------------------------------------------------------------------
000123B8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000123BC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000123C0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000123C4 01                         byte_11FA6:	dc.b 1
000123C5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000123CA 01                         byte_11FAC:	dc.b 1
000123CB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000123D0 02                         byte_11FB2:	dc.b 2
000123D1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000123D6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000123DB 01                         byte_11FBD:	dc.b 1
000123DC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000123E1 01                         byte_11FC3:	dc.b 1
000123E2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000123E7 02                         byte_11FC9:	dc.b 2
000123E8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000123ED F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000123F2                            		even
000123F2                            		even
000123F2                            
000123F2                            ; ===========================================================================
000123F2                            ; ---------------------------------------------------------------------------
000123F2                            ; Object 61 - blocks (LZ)
000123F2                            ; ---------------------------------------------------------------------------
000123F2                            
000123F2                            Obj61:					; XREF: Obj_Index
000123F2 7000                       		moveq	#0,d0
000123F4 1028 0024                  		move.b	$24(a0),d0
000123F8 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000123FC 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012400                            ; ===========================================================================
00012400 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012402 0000                       		dc.w Obj61_Action-Obj61_Index
00012404                            
00012404 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012406 200C                       		dc.b $20, $C
00012408 1010                       		dc.b $10, $10
0001240A 1010                       		dc.b $10, $10
0001240C                            ; ===========================================================================
0001240C                            
0001240C                            Obj61_Main:				; XREF: Obj61_Index
0001240C 5428 0024                  		addq.b	#2,$24(a0)
00012410 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012418 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001241E 117C 0004 0001             		move.b	#4,1(a0)
00012424 117C 0003 0018             		move.b	#3,$18(a0)
0001242A 7000                       		moveq	#0,d0
0001242C 1028 0028                  		move.b	$28(a0),d0
00012430 E648                       		lsr.w	#3,d0
00012432 0240 000E                  		andi.w	#$E,d0
00012436 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001243A 115A 0019                  		move.b	(a2)+,$19(a0)
0001243E 1152 0016                  		move.b	(a2),$16(a0)
00012442 E248                       		lsr.w	#1,d0
00012444 1140 001A                  		move.b	d0,$1A(a0)
00012448 3168 0008 0034             		move.w	8(a0),$34(a0)
0001244E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012454 1028 0028                  		move.b	$28(a0),d0
00012458 0200 000F                  		andi.b	#$F,d0
0001245C 6700                       		beq.s	Obj61_Action
0001245E 0C00 0007                  		cmpi.b	#7,d0
00012462 6700                       		beq.s	Obj61_Action
00012464 117C 0001 0038             		move.b	#1,$38(a0)
0001246A                            
0001246A                            Obj61_Action:				; XREF: Obj61_Index
0001246A 3F28 0008                  		move.w	8(a0),-(sp)
0001246E 7000                       		moveq	#0,d0
00012470 1028 0028                  		move.b	$28(a0),d0
00012474 0240 000F                  		andi.w	#$F,d0
00012478 D040                       		add.w	d0,d0
0001247A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001247E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012482 381F                       		move.w	(sp)+,d4
00012484 4A28 0001                  		tst.b	1(a0)
00012488 6A00                       		bpl.s	Obj61_ChkDel
0001248A 7200                       		moveq	#0,d1
0001248C 1228 0019                  		move.b	$19(a0),d1
00012490 0641 000B                  		addi.w	#$B,d1
00012494 7400                       		moveq	#0,d2
00012496 1428 0016                  		move.b	$16(a0),d2
0001249A 3602                       		move.w	d2,d3
0001249C 5243                       		addq.w	#1,d3
0001249E 6100 D972                  		bsr.w	SolidObject
000124A2 1144 003F                  		move.b	d4,$3F(a0)
000124A6 6100 0000                  		bsr.w	loc_12180
000124AA                            
000124AA                            Obj61_ChkDel:
000124AA 3028 0034                  		move.w	$34(a0),d0
000124AE 0240 FF80                  		andi.w	#$FF80,d0
000124B2 3238 F700                  		move.w	($FFFFF700).w,d1
000124B6 0441 0080                  		subi.w	#$80,d1
000124BA 0241 FF80                  		andi.w	#$FF80,d1
000124BE 9041                       		sub.w	d1,d0
000124C0 0C40 0280                  		cmpi.w	#$280,d0
000124C4 6200 B5B8                  		bhi.w	DeleteObject
000124C8 6000 B578                  		bra.w	DisplaySprite
000124CC                            ; ===========================================================================
000124CC 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000124D0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000124D4 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000124D8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000124DC                            ; ===========================================================================
000124DC                            
000124DC                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000124DC 4E75                       		rts	
000124DE                            ; ===========================================================================
000124DE                            
000124DE                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000124DE 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000124E2 6600                       		bne.s	loc_120D6	; if yes, branch
000124E4 0828 0003 0022             		btst	#3,$22(a0)
000124EA 6700                       		beq.s	locret_120D4
000124EC 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000124F2                            
000124F2                            locret_120D4:
000124F2 4E75                       		rts	
000124F4                            ; ===========================================================================
000124F4                            
000124F4                            loc_120D6:
000124F4 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000124F8 66F8                       		bne.s	locret_120D4	; if time remains, branch
000124FA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000124FE 4228 0038                  		clr.b	$38(a0)
00012502 4E75                       		rts	
00012504                            ; ===========================================================================
00012504                            
00012504                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012504 6100 B516                  		bsr.w	SpeedToPos
00012508 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001250C 6100 0000                  		bsr.w	ObjHitFloor
00012510 4A41                       		tst.w	d1
00012512 6A00 0000                  		bpl.w	locret_12106
00012516 5241                       		addq.w	#1,d1
00012518 D368 000C                  		add.w	d1,$C(a0)
0001251C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012520 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012524                            
00012524                            locret_12106:
00012524 4E75                       		rts	
00012526                            ; ===========================================================================
00012526                            
00012526                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012526 6100 B4F4                  		bsr.w	SpeedToPos
0001252A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001252E 6100 0000                  		bsr.w	ObjHitCeiling
00012532 4A41                       		tst.w	d1
00012534 6A00 0000                  		bpl.w	locret_12126
00012538 9368 000C                  		sub.w	d1,$C(a0)
0001253C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012540 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012544                            
00012544                            locret_12126:
00012544 4E75                       		rts	
00012546                            ; ===========================================================================
00012546                            
00012546                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012546 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001254C 6600                       		bne.s	locret_12138	; if not, branch
0001254E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012552 4228 0038                  		clr.b	$38(a0)
00012556                            
00012556                            locret_12138:
00012556 4E75                       		rts	
00012558                            ; ===========================================================================
00012558                            
00012558                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012558 3038 F646                  		move.w	($FFFFF646).w,d0
0001255C 9068 000C                  		sub.w	$C(a0),d0
00012560 6700                       		beq.s	locret_1217E
00012562 6400                       		bcc.s	loc_12162
00012564 0C40 FFFE                  		cmpi.w	#-2,d0
00012568 6C00                       		bge.s	loc_1214E
0001256A 70FE                       		moveq	#-2,d0
0001256C                            
0001256C                            loc_1214E:
0001256C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012570 6100 0000                  		bsr.w	ObjHitCeiling
00012574 4A41                       		tst.w	d1
00012576 6A00 0000                  		bpl.w	locret_12160
0001257A 9368 000C                  		sub.w	d1,$C(a0)
0001257E                            
0001257E                            locret_12160:
0001257E 4E75                       		rts	
00012580                            ; ===========================================================================
00012580                            
00012580                            loc_12162:				; XREF: Obj61_Type07
00012580 0C40 0002                  		cmpi.w	#2,d0
00012584 6F00                       		ble.s	loc_1216A
00012586 7002                       		moveq	#2,d0
00012588                            
00012588                            loc_1216A:
00012588 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001258C 6100 0000                  		bsr.w	ObjHitFloor
00012590 4A41                       		tst.w	d1
00012592 6A00 0000                  		bpl.w	locret_1217E
00012596 5241                       		addq.w	#1,d1
00012598 D368 000C                  		add.w	d1,$C(a0)
0001259C                            
0001259C                            locret_1217E:
0001259C 4E75                       		rts	
0001259E                            ; ===========================================================================
0001259E                            
0001259E                            loc_12180:				; XREF: Obj61_Action
0001259E 4A28 0038                  		tst.b	$38(a0)
000125A2 6700                       		beq.s	locret_121C0
000125A4 0828 0003 0022             		btst	#3,$22(a0)
000125AA 6600                       		bne.s	loc_1219A
000125AC 4A28 003E                  		tst.b	$3E(a0)
000125B0 6700                       		beq.s	locret_121C0
000125B2 5928 003E                  		subq.b	#4,$3E(a0)
000125B6 6000                       		bra.s	loc_121A6
000125B8                            ; ===========================================================================
000125B8                            
000125B8                            loc_1219A:
000125B8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000125BE 6700                       		beq.s	locret_121C0
000125C0 5828 003E                  		addq.b	#4,$3E(a0)
000125C4                            
000125C4                            loc_121A6:
000125C4 1028 003E                  		move.b	$3E(a0),d0
000125C8 4EB9 0000 2C22             		jsr	(CalcSine).l
000125CE 323C 0400                  		move.w	#$400,d1
000125D2 C1C1                       		muls.w	d1,d0
000125D4 4840                       		swap	d0
000125D6 D068 0030                  		add.w	$30(a0),d0
000125DA 3140 000C                  		move.w	d0,$C(a0)
000125DE                            
000125DE                            locret_121C0:
000125DE 4E75                       		rts	
000125E0                            ; ===========================================================================
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            ; Sprite mappings - blocks (LZ)
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            Map_obj61:
000125E0                            	include "_maps\obj61.asm"
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            ; Sprite mappings - blocks (LZ)
000125E0                            ; ---------------------------------------------------------------------------
000125E0 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000125E4 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000125E8 01                         byte_121CA:	dc.b 1
000125E9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000125EE 02                         byte_121D0:	dc.b 2
000125EF F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000125F4 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000125F9 01                         byte_121DB:	dc.b 1
000125FA F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000125FF 01                         byte_121E1:	dc.b 1
00012600 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012606 00                         		even
00012606 00                         		even
00012606                            
00012606                            ; ===========================================================================
00012606                            ; ---------------------------------------------------------------------------
00012606                            ; Object 62 - gargoyle head (LZ)
00012606                            ; ---------------------------------------------------------------------------
00012606                            
00012606                            Obj62:					; XREF: Obj_Index
00012606 7000                       		moveq	#0,d0
00012608 1028 0024                  		move.b	$24(a0),d0
0001260C 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012610 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012614 6000 D4D4                  		bra.w	MarkObjGone
00012618                            ; ===========================================================================
00012618 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001261A 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001261C 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001261E 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012620                            
00012620 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012628                            ; ===========================================================================
00012628                            
00012628                            Obj62_Main:				; XREF: Obj62_Index
00012628 5428 0024                  		addq.b	#2,$24(a0)
0001262C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012634 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001263A 0028 0004 0001             		ori.b	#4,1(a0)
00012640 117C 0003 0018             		move.b	#3,$18(a0)
00012646 117C 0010 0019             		move.b	#$10,$19(a0)
0001264C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012650 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012654 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001265A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012660 0228 000F 0028             		andi.b	#$F,$28(a0)
00012666                            
00012666                            Obj62_MakeFire:				; XREF: Obj62_Index
00012666 5328 001E                  		subq.b	#1,$1E(a0)
0001266A 6600                       		bne.s	Obj62_NoFire
0001266C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012672 6100 B648                  		bsr.w	ChkObjOnScreen
00012676 6600                       		bne.s	Obj62_NoFire
00012678 6100 B84E                  		bsr.w	SingleObjLoad
0001267C 6600                       		bne.s	Obj62_NoFire
0001267E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012682 5829 0024                  		addq.b	#4,$24(a1)
00012686 3368 0008 0008             		move.w	8(a0),8(a1)
0001268C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012692 1368 0001 0001             		move.b	1(a0),1(a1)
00012698 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001269E                            
0001269E                            Obj62_NoFire:
0001269E 4E75                       		rts	
000126A0                            ; ===========================================================================
000126A0                            
000126A0                            Obj62_FireBall:				; XREF: Obj62_Index
000126A0 5428 0024                  		addq.b	#2,$24(a0)
000126A4 117C 0008 0016             		move.b	#8,$16(a0)
000126AA 117C 0008 0017             		move.b	#8,$17(a0)
000126B0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000126B8 317C 02E9 0002             		move.w	#$2E9,2(a0)
000126BE 0028 0004 0001             		ori.b	#4,1(a0)
000126C4 117C 0004 0018             		move.b	#4,$18(a0)
000126CA 117C 0098 0020             		move.b	#$98,$20(a0)
000126D0 117C 0008 0019             		move.b	#8,$19(a0)
000126D6 117C 0002 001A             		move.b	#2,$1A(a0)
000126DC 5068 000C                  		addq.w	#8,$C(a0)
000126E0 317C 0200 0010             		move.w	#$200,$10(a0)
000126E6 0828 0000 0022             		btst	#0,$22(a0)
000126EC 6600                       		bne.s	Obj62_Sound
000126EE 4468 0010                  		neg.w	$10(a0)
000126F2                            
000126F2                            Obj62_Sound:
000126F2 303C 00AE                  		move.w	#$AE,d0
000126F6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
000126FC                            
000126FC                            Obj62_AniFire:				; XREF: Obj62_Index
000126FC 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012700 0200 0007                  		andi.b	#7,d0
00012704 6600                       		bne.s	Obj62_StopFire
00012706 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001270C                            
0001270C                            Obj62_StopFire:
0001270C 6100 B30E                  		bsr.w	SpeedToPos
00012710 0828 0000 0022             		btst	#0,$22(a0)
00012716 6600                       		bne.s	Obj62_StopFire2
00012718 76F8                       		moveq	#-8,d3
0001271A 6100 0000                  		bsr.w	ObjHitWallLeft
0001271E 4A41                       		tst.w	d1
00012720 6B00 B35C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012724 4E75                       		rts	
00012726                            ; ===========================================================================
00012726                            
00012726                            Obj62_StopFire2:
00012726 7608                       		moveq	#8,d3
00012728 6100 0000                  		bsr.w	ObjHitWallRight
0001272C 4A41                       		tst.w	d1
0001272E 6B00 B34E                  		bmi.w	DeleteObject
00012732 4E75                       		rts	
00012734                            ; ===========================================================================
00012734                            ; ---------------------------------------------------------------------------
00012734                            ; Sprite mappings - gargoyle head (LZ)
00012734                            ; ---------------------------------------------------------------------------
00012734                            Map_obj62:
00012734                            	include "_maps\obj62.asm"
00012734                            ; ---------------------------------------------------------------------------
00012734                            ; Sprite mappings - gargoyle head (LZ)
00012734                            ; ---------------------------------------------------------------------------
00012734 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012738 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001273C 03                         byte_12320:	dc.b 3
0001273D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012742 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012747 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001274C 01                         byte_12330:	dc.b 1
0001274D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012752 01                         byte_12336:	dc.b 1
00012753 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012758                            		even
00012758                            		even
00012758                            
00012758                            ; ===========================================================================
00012758                            ; ---------------------------------------------------------------------------
00012758                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012758                            ; ---------------------------------------------------------------------------
00012758                            
00012758                            Obj63:					; XREF: Obj_Index
00012758 7000                       		moveq	#0,d0
0001275A 1028 0024                  		move.b	$24(a0),d0
0001275E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012762 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012766 3028 0030                  		move.w	$30(a0),d0
0001276A 0240 FF80                  		andi.w	#$FF80,d0
0001276E 3238 F700                  		move.w	($FFFFF700).w,d1
00012772 0441 0080                  		subi.w	#$80,d1
00012776 0241 FF80                  		andi.w	#$FF80,d1
0001277A 9041                       		sub.w	d1,d0
0001277C 0C40 0280                  		cmpi.w	#$280,d0
00012780 6200                       		bhi.s	loc_1236A
00012782                            
00012782                            Obj63_Display:				; XREF: loc_1236A
00012782 6000 B2BE                  		bra.w	DisplaySprite
00012786                            ; ===========================================================================
00012786                            
00012786                            loc_1236A:				; XREF: Obj63
00012786 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001278C 6600                       		bne.s	loc_12378
0001278E 0C40 FF80                  		cmpi.w	#-$80,d0
00012792 64EE                       		bcc.s	Obj63_Display
00012794                            
00012794                            loc_12378:
00012794 1028 002F                  		move.b	$2F(a0),d0
00012798 6A00 B2E4                  		bpl.w	DeleteObject
0001279C 0240 007F                  		andi.w	#$7F,d0
000127A0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000127A4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000127AA 6000 B2D2                  		bra.w	DeleteObject
000127AE                            ; ===========================================================================
000127AE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000127B0 0000                       		dc.w loc_124B2-Obj63_Index
000127B2 0000                       		dc.w loc_124C2-Obj63_Index
000127B4 0000                       		dc.w loc_124DE-Obj63_Index
000127B6                            ; ===========================================================================
000127B6                            
000127B6                            Obj63_Main:				; XREF: Obj63_Index
000127B6 1028 0028                  		move.b	$28(a0),d0
000127BA 6B00 0000                  		bmi.w	loc_12460
000127BE 5428 0024                  		addq.b	#2,$24(a0)
000127C2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000127CA 317C 43F6 0002             		move.w	#$43F6,2(a0)
000127D0 0028 0004 0001             		ori.b	#4,1(a0)
000127D6 117C 0010 0019             		move.b	#$10,$19(a0)
000127DC 117C 0004 0018             		move.b	#4,$18(a0)
000127E2 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000127E8 6600                       		bne.s	loc_123E2
000127EA 5828 0024                  		addq.b	#4,$24(a0)
000127EE 317C 03F6 0002             		move.w	#$3F6,2(a0)
000127F4 117C 0001 0018             		move.b	#1,$18(a0)
000127FA 6000 0000                  		bra.w	loc_124DE
000127FE                            ; ===========================================================================
000127FE                            
000127FE                            loc_123E2:
000127FE 117C 0004 001A             		move.b	#4,$1A(a0)
00012804 7000                       		moveq	#0,d0
00012806 1028 0028                  		move.b	$28(a0),d0
0001280A 3200                       		move.w	d0,d1
0001280C E648                       		lsr.w	#3,d0
0001280E 0240 001E                  		andi.w	#$1E,d0
00012812 45FA 0000                  		lea	Obj63_Data(pc),a2
00012816 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001281A 315A 0038                  		move.w	(a2)+,$38(a0)
0001281E 315A 0030                  		move.w	(a2)+,$30(a0)
00012822 214A 003C                  		move.l	a2,$3C(a0)
00012826 0241 000F                  		andi.w	#$F,d1
0001282A E549                       		lsl.w	#2,d1
0001282C 1141 0038                  		move.b	d1,$38(a0)
00012830 117C 0004 003A             		move.b	#4,$3A(a0)
00012836 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001283A 6700                       		beq.s	loc_1244C
0001283C 117C 0001 003B             		move.b	#1,$3B(a0)
00012842 4428 003A                  		neg.b	$3A(a0)
00012846 7200                       		moveq	#0,d1
00012848 1228 0038                  		move.b	$38(a0),d1
0001284C D228 003A                  		add.b	$3A(a0),d1
00012850 B228 0039                  		cmp.b	$39(a0),d1
00012854 6500                       		bcs.s	loc_12448
00012856 1001                       		move.b	d1,d0
00012858 7200                       		moveq	#0,d1
0001285A 4A00                       		tst.b	d0
0001285C 6A00                       		bpl.s	loc_12448
0001285E 1228 0039                  		move.b	$39(a0),d1
00012862 5901                       		subq.b	#4,d1
00012864                            
00012864                            loc_12448:
00012864 1141 0038                  		move.b	d1,$38(a0)
00012868                            
00012868                            loc_1244C:
00012868 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001286E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012874 6100 0000                  		bsr.w	Obj63_ChangeDir
00012878 6000 0000                  		bra.w	loc_124B2
0001287C                            ; ===========================================================================
0001287C                            
0001287C                            loc_12460:				; XREF: Obj63_Main
0001287C 1140 002F                  		move.b	d0,$2F(a0)
00012880 0240 007F                  		andi.w	#$7F,d0
00012884 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012888 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001288E 6600 B1EE                  		bne.w	DeleteObject
00012892 D040                       		add.w	d0,d0
00012894 0240 001E                  		andi.w	#$1E,d0
00012898 0640 0070                  		addi.w	#$70,d0
0001289C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000128A2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000128A6 321A                       		move.w	(a2)+,d1
000128A8 2248                       		movea.l	a0,a1
000128AA 6000                       		bra.s	Obj63_MakePtfms
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            Obj63_Loop:
000128AC 6100 B61A                  		bsr.w	SingleObjLoad
000128B0 6600                       		bne.s	loc_124AA
000128B2                            
000128B2                            Obj63_MakePtfms:			; XREF: loc_12460
000128B2 12BC 0063                  		move.b	#$63,0(a1)
000128B6 335A 0008                  		move.w	(a2)+,8(a1)
000128BA 335A 000C                  		move.w	(a2)+,$C(a1)
000128BE 301A                       		move.w	(a2)+,d0
000128C0 1340 0028                  		move.b	d0,$28(a1)
000128C4                            
000128C4                            loc_124AA:
000128C4 51C9 FFE6                  		dbf	d1,Obj63_Loop
000128C8                            
000128C8 588F                       		addq.l	#4,sp
000128CA 4E75                       		rts	
000128CC                            ; ===========================================================================
000128CC                            
000128CC                            loc_124B2:				; XREF: Obj63_Index
000128CC 7200                       		moveq	#0,d1
000128CE 1228 0019                  		move.b	$19(a0),d1
000128D2 4EB9 0000 77FA             		jsr	(PlatformObject).l
000128D8 6000 0000                  		bra.w	sub_12502
000128DC                            ; ===========================================================================
000128DC                            
000128DC                            loc_124C2:				; XREF: Obj63_Index
000128DC 7200                       		moveq	#0,d1
000128DE 1228 0019                  		move.b	$19(a0),d1
000128E2 4EB9 0000 796E             		jsr	(ExitPlatform).l
000128E8 3F28 0008                  		move.w	8(a0),-(sp)
000128EC 6100 0000                  		bsr.w	sub_12502
000128F0 341F                       		move.w	(sp)+,d2
000128F2 4EF9 0000 7ED8             		jmp	(MvSonicOnPtfm2).l
000128F8                            ; ===========================================================================
000128F8                            
000128F8                            loc_124DE:				; XREF: Obj63_Index
000128F8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000128FC 0240 0003                  		andi.w	#3,d0
00012900 6600                       		bne.s	loc_124FC
00012902 7201                       		moveq	#1,d1
00012904 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012908 6700                       		beq.s	loc_124F2
0001290A 4401                       		neg.b	d1
0001290C                            
0001290C                            loc_124F2:
0001290C D328 001A                  		add.b	d1,$1A(a0)
00012910 0228 0003 001A             		andi.b	#3,$1A(a0)
00012916                            
00012916                            loc_124FC:
00012916 588F                       		addq.l	#4,sp
00012918 6000 D1D0                  		bra.w	MarkObjGone
0001291C                            
0001291C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001291C                            
0001291C                            
0001291C                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001291C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012920 6700                       		beq.s	loc_12520
00012922 4A28 003B                  		tst.b	$3B(a0)
00012926 6600                       		bne.s	loc_12520
00012928 117C 0001 003B             		move.b	#1,$3B(a0)
0001292E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012934 4428 003A                  		neg.b	$3A(a0)
00012938 6000                       		bra.s	loc_12534
0001293A                            ; ===========================================================================
0001293A                            
0001293A                            loc_12520:
0001293A 3028 0008                  		move.w	8(a0),d0
0001293E B068 0034                  		cmp.w	$34(a0),d0
00012942 6600                       		bne.s	loc_1256A
00012944 3028 000C                  		move.w	$C(a0),d0
00012948 B068 0036                  		cmp.w	$36(a0),d0
0001294C 6600                       		bne.s	loc_1256A
0001294E                            
0001294E                            loc_12534:
0001294E 7200                       		moveq	#0,d1
00012950 1228 0038                  		move.b	$38(a0),d1
00012954 D228 003A                  		add.b	$3A(a0),d1
00012958 B228 0039                  		cmp.b	$39(a0),d1
0001295C 6500                       		bcs.s	loc_12552
0001295E 1001                       		move.b	d1,d0
00012960 7200                       		moveq	#0,d1
00012962 4A00                       		tst.b	d0
00012964 6A00                       		bpl.s	loc_12552
00012966 1228 0039                  		move.b	$39(a0),d1
0001296A 5901                       		subq.b	#4,d1
0001296C                            
0001296C                            loc_12552:
0001296C 1141 0038                  		move.b	d1,$38(a0)
00012970 2268 003C                  		movea.l	$3C(a0),a1
00012974 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001297A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012980 6100 0000                  		bsr.w	Obj63_ChangeDir
00012984                            
00012984                            loc_1256A:
00012984 6100 B096                  		bsr.w	SpeedToPos
00012988 4E75                       		rts	
0001298A                            ; End of function sub_12502
0001298A                            
0001298A                            
0001298A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001298A                            
0001298A                            
0001298A                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001298A 7000                       		moveq	#0,d0
0001298C 343C FF00                  		move.w	#-$100,d2
00012990 3028 0008                  		move.w	8(a0),d0
00012994 9068 0034                  		sub.w	$34(a0),d0
00012998 6400                       		bcc.s	loc_12584
0001299A 4440                       		neg.w	d0
0001299C 4442                       		neg.w	d2
0001299E                            
0001299E                            loc_12584:
0001299E 7200                       		moveq	#0,d1
000129A0 363C FF00                  		move.w	#-$100,d3
000129A4 3228 000C                  		move.w	$C(a0),d1
000129A8 9268 0036                  		sub.w	$36(a0),d1
000129AC 6400                       		bcc.s	loc_12598
000129AE 4441                       		neg.w	d1
000129B0 4443                       		neg.w	d3
000129B2                            
000129B2                            loc_12598:
000129B2 B240                       		cmp.w	d0,d1
000129B4 6500                       		bcs.s	loc_125C2
000129B6 3028 0008                  		move.w	8(a0),d0
000129BA 9068 0034                  		sub.w	$34(a0),d0
000129BE 6700                       		beq.s	loc_125AE
000129C0 48C0                       		ext.l	d0
000129C2 E180                       		asl.l	#8,d0
000129C4 81C1                       		divs.w	d1,d0
000129C6 4440                       		neg.w	d0
000129C8                            
000129C8                            loc_125AE:
000129C8 3140 0010                  		move.w	d0,$10(a0)
000129CC 3143 0012                  		move.w	d3,$12(a0)
000129D0 4840                       		swap	d0
000129D2 3140 000A                  		move.w	d0,$A(a0)
000129D6 4268 000E                  		clr.w	$E(a0)
000129DA 4E75                       		rts	
000129DC                            ; ===========================================================================
000129DC                            
000129DC                            loc_125C2:				; XREF: Obj63_ChangeDir
000129DC 3228 000C                  		move.w	$C(a0),d1
000129E0 9268 0036                  		sub.w	$36(a0),d1
000129E4 6700                       		beq.s	loc_125D4
000129E6 48C1                       		ext.l	d1
000129E8 E181                       		asl.l	#8,d1
000129EA 83C0                       		divs.w	d0,d1
000129EC 4441                       		neg.w	d1
000129EE                            
000129EE                            loc_125D4:
000129EE 3141 0012                  		move.w	d1,$12(a0)
000129F2 3142 0010                  		move.w	d2,$10(a0)
000129F6 4841                       		swap	d1
000129F8 3141 000E                  		move.w	d1,$E(a0)
000129FC 4268 000A                  		clr.w	$A(a0)
00012A00 4E75                       		rts	
00012A02                            ; End of function Obj63_ChangeDir
00012A02                            
00012A02                            ; ===========================================================================
00012A02 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012A04 0000                       		dc.w word_12610-Obj63_Data
00012A06 0000                       		dc.w word_12628-Obj63_Data
00012A08 0000                       		dc.w word_1263C-Obj63_Data
00012A0A 0000                       		dc.w word_12650-Obj63_Data
00012A0C 0000                       		dc.w word_12668-Obj63_Data
00012A0E 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012A1E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012A2A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012A3A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012A42 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012A56 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012A6A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012A82 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012A96                            
00012A96                            ; ---------------------------------------------------------------------------
00012A96                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012A96                            ; ---------------------------------------------------------------------------
00012A96                            Map_obj63:
00012A96                            	include "_maps\obj63.asm"
00012A96                            ; ---------------------------------------------------------------------------
00012A96                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012A96                            ; ---------------------------------------------------------------------------
00012A96 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012A9A 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012A9E 0000                       		dc.w byte_1269E-Map_obj63
00012AA0 01                         byte_12686:	dc.b 1
00012AA1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012AA6 01                         byte_1268C:	dc.b 1
00012AA7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012AAC 01                         byte_12692:	dc.b 1
00012AAD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012AB2 01                         byte_12698:	dc.b 1
00012AB3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012AB8 01                         byte_1269E:	dc.b 1
00012AB9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012ABE                            		even
00012ABE                            		even
00012ABE                            
00012ABE                            ; ===========================================================================
00012ABE                            ; ---------------------------------------------------------------------------
00012ABE                            ; Object 64 - bubbles (LZ)
00012ABE                            ; ---------------------------------------------------------------------------
00012ABE                            
00012ABE                            Obj64:					; XREF: Obj_Index
00012ABE 7000                       		moveq	#0,d0
00012AC0 1028 0024                  		move.b	$24(a0),d0
00012AC4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012AC8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012ACC                            ; ===========================================================================
00012ACC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012ACE 0000                       		dc.w Obj64_Animate-Obj64_Index
00012AD0 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012AD2 0000                       		dc.w Obj64_Display2-Obj64_Index
00012AD4 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012AD6 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012AD8                            ; ===========================================================================
00012AD8                            
00012AD8                            Obj64_Main:				; XREF: Obj64_Index
00012AD8 5428 0024                  		addq.b	#2,$24(a0)
00012ADC 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012AE4 317C 8348 0002             		move.w	#$8348,2(a0)
00012AEA 117C 0084 0001             		move.b	#$84,1(a0)
00012AF0 117C 0010 0019             		move.b	#$10,$19(a0)
00012AF6 117C 0001 0018             		move.b	#1,$18(a0)
00012AFC 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B00 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012B02 5028 0024                  		addq.b	#8,$24(a0)
00012B06 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012B0A 1140 0032                  		move.b	d0,$32(a0)
00012B0E 1140 0033                  		move.b	d0,$33(a0)
00012B12 117C 0006 001C             		move.b	#6,$1C(a0)
00012B18 6000 0000                  		bra.w	Obj64_BblMaker
00012B1C                            ; ===========================================================================
00012B1C                            
00012B1C                            Obj64_Bubble:				; XREF: Obj64_Main
00012B1C 1140 001C                  		move.b	d0,$1C(a0)
00012B20 3168 0008 0030             		move.w	8(a0),$30(a0)
00012B26 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012B2C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012B32 1140 0026                  		move.b	d0,$26(a0)
00012B36                            
00012B36                            Obj64_Animate:				; XREF: Obj64_Index
00012B36 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012B3C 4EB9 0000 AAF4             		jsr	AnimateSprite
00012B42 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012B48 6600                       		bne.s	Obj64_ChkWater
00012B4A 117C 0001 002E             		move.b	#1,$2E(a0)
00012B50                            
00012B50                            Obj64_ChkWater:				; XREF: Obj64_Index
00012B50 3038 F646                  		move.w	($FFFFF646).w,d0
00012B54 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012B58 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012B5A                            
00012B5A                            Obj64_Burst:				; XREF: Obj64_Wobble
00012B5A 117C 0006 0024             		move.b	#6,$24(a0)
00012B60 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012B64 6000 0000                  		bra.w	Obj64_Display2
00012B68                            ; ===========================================================================
00012B68                            
00012B68                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012B68 1028 0026                  		move.b	$26(a0),d0
00012B6C 5228 0026                  		addq.b	#1,$26(a0)
00012B70 0240 007F                  		andi.w	#$7F,d0
00012B74 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012B7A 1031 0000                  		move.b	(a1,d0.w),d0
00012B7E 4880                       		ext.w	d0
00012B80 D068 0030                  		add.w	$30(a0),d0
00012B84 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012B88 4A28 002E                  		tst.b	$2E(a0)
00012B8C 6700                       		beq.s	Obj64_Display
00012B8E 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012B92 6700                       		beq.s	Obj64_Display	; if not, branch
00012B94                            
00012B94 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012B98 303C 00AD                  		move.w	#$AD,d0
00012B9C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012BA2 43F8 D000                  		lea	($FFFFD000).w,a1
00012BA6 4269 0010                  		clr.w	$10(a1)
00012BAA 4269 0012                  		clr.w	$12(a1)
00012BAE 4269 0014                  		clr.w	$14(a1)
00012BB2 137C 0015 001C             		move.b	#$15,$1C(a1)
00012BB8 337C 0023 003E             		move.w	#$23,$3E(a1)
00012BBE 137C 0000 003C             		move.b	#0,$3C(a1)
00012BC4 08A9 0005 0022             		bclr	#5,$22(a1)
00012BCA 08A9 0004 0022             		bclr	#4,$22(a1)
00012BD0 0829 0002 0022             		btst	#2,$22(a1)
00012BD6 6700 FF82                  		beq.w	Obj64_Burst
00012BDA 08A9 0002 0022             		bclr	#2,$22(a1)
00012BE0 137C 0013 0016             		move.b	#$13,$16(a1)
00012BE6 137C 0009 0017             		move.b	#9,$17(a1)
00012BEC 5B69 000C                  		subq.w	#5,$C(a1)
00012BF0 6000 FF68                  		bra.w	Obj64_Burst
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            Obj64_Display:				; XREF: Obj64_Wobble
00012BF4 6100 AE26                  		bsr.w	SpeedToPos
00012BF8 4A28 0001                  		tst.b	1(a0)
00012BFC 6A00                       		bpl.s	Obj64_Delete
00012BFE 4EFA AE42                  		jmp	DisplaySprite
00012C02                            ; ===========================================================================
00012C02                            
00012C02                            Obj64_Delete:
00012C02 4EFA AE7A                  		jmp	DeleteObject
00012C06                            ; ===========================================================================
00012C06                            
00012C06                            Obj64_Display2:				; XREF: Obj64_Index
00012C06 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C0C 4EB9 0000 AAF4             		jsr	AnimateSprite
00012C12 4A28 0001                  		tst.b	1(a0)
00012C16 6A00                       		bpl.s	Obj64_Delete2
00012C18 4EFA AE28                  		jmp	DisplaySprite
00012C1C                            ; ===========================================================================
00012C1C                            
00012C1C                            Obj64_Delete2:
00012C1C 4EFA AE60                  		jmp	DeleteObject
00012C20                            ; ===========================================================================
00012C20                            
00012C20                            Obj64_Delete3:				; XREF: Obj64_Index
00012C20 6000 AE5C                  		bra.w	DeleteObject
00012C24                            ; ===========================================================================
00012C24                            
00012C24                            Obj64_BblMaker:				; XREF: Obj64_Index
00012C24 4A68 0036                  		tst.w	$36(a0)
00012C28 6600                       		bne.s	loc_12874
00012C2A 3038 F646                  		move.w	($FFFFF646).w,d0
00012C2E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012C32 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012C36 4A28 0001                  		tst.b	1(a0)
00012C3A 6A00 0000                  		bpl.w	Obj64_ChkDel
00012C3E 5368 0038                  		subq.w	#1,$38(a0)
00012C42 6A00 0000                  		bpl.w	loc_12914
00012C46 317C 0001 0036             		move.w	#1,$36(a0)
00012C4C                            
00012C4C                            loc_1283A:
00012C4C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C52 3200                       		move.w	d0,d1
00012C54 0240 0007                  		andi.w	#7,d0
00012C58 0C40 0006                  		cmpi.w	#6,d0
00012C5C 64EE                       		bcc.s	loc_1283A
00012C5E                            
00012C5E 1140 0034                  		move.b	d0,$34(a0)
00012C62 0241 000C                  		andi.w	#$C,d1
00012C66 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012C6C D2C1                       		adda.w	d1,a1
00012C6E 2149 003C                  		move.l	a1,$3C(a0)
00012C72 5328 0032                  		subq.b	#1,$32(a0)
00012C76 6A00                       		bpl.s	loc_12872
00012C78 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012C7E 08E8 0007 0036             		bset	#7,$36(a0)
00012C84                            
00012C84                            loc_12872:
00012C84 6000                       		bra.s	loc_1287C
00012C86                            ; ===========================================================================
00012C86                            
00012C86                            loc_12874:				; XREF: Obj64_BblMaker
00012C86 5368 0038                  		subq.w	#1,$38(a0)
00012C8A 6A00 0000                  		bpl.w	loc_12914
00012C8E                            
00012C8E                            loc_1287C:
00012C8E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C94 0240 001F                  		andi.w	#$1F,d0
00012C98 3140 0038                  		move.w	d0,$38(a0)
00012C9C 6100 B22A                  		bsr.w	SingleObjLoad
00012CA0 6600                       		bne.s	loc_128F8
00012CA2 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012CA6 3368 0008 0008             		move.w	8(a0),8(a1)
00012CAC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012CB2 0240 000F                  		andi.w	#$F,d0
00012CB6 5140                       		subq.w	#8,d0
00012CB8 D169 0008                  		add.w	d0,8(a1)
00012CBC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012CC2 7000                       		moveq	#0,d0
00012CC4 1028 0034                  		move.b	$34(a0),d0
00012CC8 2468 003C                  		movea.l	$3C(a0),a2
00012CCC 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012CD2 0828 0007 0036             		btst	#7,$36(a0)
00012CD8 6700                       		beq.s	loc_128F8
00012CDA 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012CE0 0240 0003                  		andi.w	#3,d0
00012CE4 6600                       		bne.s	loc_128E4
00012CE6 08E8 0006 0036             		bset	#6,$36(a0)
00012CEC 6600                       		bne.s	loc_128F8
00012CEE 137C 0002 0028             		move.b	#2,$28(a1)
00012CF4                            
00012CF4                            loc_128E4:
00012CF4 4A28 0034                  		tst.b	$34(a0)
00012CF8 6600                       		bne.s	loc_128F8
00012CFA 08E8 0006 0036             		bset	#6,$36(a0)
00012D00 6600                       		bne.s	loc_128F8
00012D02 137C 0002 0028             		move.b	#2,$28(a1)
00012D08                            
00012D08                            loc_128F8:
00012D08 5328 0034                  		subq.b	#1,$34(a0)
00012D0C 6A00                       		bpl.s	loc_12914
00012D0E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012D14 0240 007F                  		andi.w	#$7F,d0
00012D18 0640 0080                  		addi.w	#$80,d0
00012D1C D168 0038                  		add.w	d0,$38(a0)
00012D20 4268 0036                  		clr.w	$36(a0)
00012D24                            
00012D24                            loc_12914:
00012D24 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D2A 4EB9 0000 AAF4             		jsr	AnimateSprite
00012D30                            
00012D30                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012D30 3028 0008                  		move.w	8(a0),d0
00012D34 0240 FF80                  		andi.w	#$FF80,d0
00012D38 3238 F700                  		move.w	($FFFFF700).w,d1
00012D3C 0441 0080                  		subi.w	#$80,d1
00012D40 0241 FF80                  		andi.w	#$FF80,d1
00012D44 9041                       		sub.w	d1,d0
00012D46 0C40 0280                  		cmpi.w	#$280,d0
00012D4A 6200 AD32                  		bhi.w	DeleteObject
00012D4E 3038 F646                  		move.w	($FFFFF646).w,d0
00012D52 B068 000C                  		cmp.w	$C(a0),d0
00012D56 6500 ACEA                  		bcs.w	DisplaySprite
00012D5A 4E75                       		rts	
00012D5C                            ; ===========================================================================
00012D5C                            ; bubble production sequence
00012D5C                            
00012D5C                            ; 0 = small bubble, 1 =	large bubble
00012D5C                            
00012D5C 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012D6E                            
00012D6E                            ; ===========================================================================
00012D6E                            
00012D6E                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012D6E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012D72 6B00                       		bmi.s	loc_12998
00012D74 43F8 D000                  		lea	($FFFFD000).w,a1
00012D78 3029 0008                  		move.w	8(a1),d0
00012D7C 3228 0008                  		move.w	8(a0),d1
00012D80 0441 0010                  		subi.w	#$10,d1
00012D84 B240                       		cmp.w	d0,d1
00012D86 6400                       		bcc.s	loc_12998
00012D88 0641 0020                  		addi.w	#$20,d1
00012D8C B240                       		cmp.w	d0,d1
00012D8E 6500                       		bcs.s	loc_12998
00012D90 3029 000C                  		move.w	$C(a1),d0
00012D94 3228 000C                  		move.w	$C(a0),d1
00012D98 B240                       		cmp.w	d0,d1
00012D9A 6400                       		bcc.s	loc_12998
00012D9C 0641 0010                  		addi.w	#$10,d1
00012DA0 B240                       		cmp.w	d0,d1
00012DA2 6500                       		bcs.s	loc_12998
00012DA4 7001                       		moveq	#1,d0
00012DA6 4E75                       		rts	
00012DA8                            ; ===========================================================================
00012DA8                            
00012DA8                            loc_12998:
00012DA8 7000                       		moveq	#0,d0
00012DAA 4E75                       		rts	
00012DAC                            ; ===========================================================================
00012DAC                            Ani_obj64:
00012DAC                            	include "_anim\obj64.asm"
00012DAC                            ; ---------------------------------------------------------------------------
00012DAC                            ; Animation script - bubbles (LZ)
00012DAC                            ; ---------------------------------------------------------------------------
00012DAC 0000                       		dc.w byte_129AA-Ani_obj64
00012DAE 0000                       		dc.w byte_129B0-Ani_obj64
00012DB0 0000                       		dc.w byte_129B6-Ani_obj64
00012DB2 0000                       		dc.w byte_129BE-Ani_obj64
00012DB4 0000                       		dc.w byte_129BE-Ani_obj64
00012DB6 0000                       		dc.w byte_129C0-Ani_obj64
00012DB8 0000                       		dc.w byte_129C6-Ani_obj64
00012DBA 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012DC0 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012DC6 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012DCE 04FC                       byte_129BE:	dc.b 4,	$FC
00012DD0 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012DD6 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012DDC 00                         		even
00012DDC 00                         		even
00012DDC                            
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC                            ; Sprite mappings - bubbles (LZ)
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC                            Map_obj64:
00012DDC                            	include "_maps\obj64.asm"
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC                            ; Sprite mappings - bubbles (LZ)
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012DE0 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012DE4 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012DE8 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012DEC 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012DF0 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012DF4 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012DF8 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012DFC 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012E00 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012E04 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012E08 0000                       		dc.w byte_12A9C-Map_obj64
00012E0A 01                         byte_129FA:	dc.b 1
00012E0B FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012E10 01                         byte_12A00:	dc.b 1
00012E11 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012E16 01                         byte_12A06:	dc.b 1
00012E17 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012E1C 01                         byte_12A0C:	dc.b 1
00012E1D F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012E22 01                         byte_12A12:	dc.b 1
00012E23 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012E28 01                         byte_12A18:	dc.b 1
00012E29 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012E2E 01                         byte_12A1E:	dc.b 1
00012E2F F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012E34 04                         byte_12A24:	dc.b 4
00012E35 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012E3A F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012E3F 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012E44 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012E49 04                         byte_12A39:	dc.b 4
00012E4A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012E4F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012E54 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012E59 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012E5E 01                         byte_12A4E:	dc.b 1
00012E5F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012E64 01                         byte_12A54:	dc.b 1
00012E65 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012E6A 01                         byte_12A5A:	dc.b 1
00012E6B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012E70 01                         byte_12A60:	dc.b 1
00012E71 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012E76 01                         byte_12A66:	dc.b 1
00012E77 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012E7C 01                         byte_12A6C:	dc.b 1
00012E7D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012E82 01                         byte_12A72:	dc.b 1
00012E83 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012E88 01                         byte_12A78:	dc.b 1
00012E89 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012E8E 01                         byte_12A7E:	dc.b 1
00012E8F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012E94 01                         byte_12A84:	dc.b 1
00012E95 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012E9A 01                         byte_12A8A:	dc.b 1
00012E9B F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012EA0 01                         byte_12A90:	dc.b 1
00012EA1 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012EA6 01                         byte_12A96:	dc.b 1
00012EA7 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012EAC 00                         byte_12A9C:	dc.b 0
00012EAE 00                         		even
00012EAE 00                         		even
00012EAE                            
00012EAE                            ; ===========================================================================
00012EAE                            ; ---------------------------------------------------------------------------
00012EAE                            ; Object 65 - waterfalls (LZ)
00012EAE                            ; ---------------------------------------------------------------------------
00012EAE                            
00012EAE                            Obj65:					; XREF: Obj_Index
00012EAE 7000                       		moveq	#0,d0
00012EB0 1028 0024                  		move.b	$24(a0),d0
00012EB4 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012EB8 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012EBC                            ; ===========================================================================
00012EBC 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012EBE 0000                       		dc.w Obj65_Animate-Obj65_Index
00012EC0 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012EC2 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012EC4 0000                       		dc.w loc_12B36-Obj65_Index
00012EC6                            ; ===========================================================================
00012EC6                            
00012EC6                            Obj65_Main:				; XREF: Obj65_Index
00012EC6 5828 0024                  		addq.b	#4,$24(a0)
00012ECA 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012ED2 317C 4259 0002             		move.w	#$4259,2(a0)
00012ED8 0028 0004 0001             		ori.b	#4,1(a0)
00012EDE 117C 0018 0019             		move.b	#$18,$19(a0)
00012EE4 117C 0001 0018             		move.b	#1,$18(a0)
00012EEA 1028 0028                  		move.b	$28(a0),d0	; get object type
00012EEE 6A00                       		bpl.s	loc_12AE6
00012EF0 08E8 0007 0002             		bset	#7,2(a0)
00012EF6                            
00012EF6                            loc_12AE6:
00012EF6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012EFA 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012EFE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012F02 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012F04 4228 0018                  		clr.b	$18(a0)
00012F08 5528 0024                  		subq.b	#2,$24(a0)
00012F0C 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012F12 6700                       		beq.s	loc_12B0A	; if not, branch
00012F14 117C 0006 0024             		move.b	#6,$24(a0)
00012F1A                            
00012F1A                            loc_12B0A:
00012F1A 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012F20 6700                       		beq.s	Obj65_Animate	; if not, branch
00012F22 117C 0008 0024             		move.b	#8,$24(a0)
00012F28                            
00012F28                            Obj65_Animate:				; XREF: Obj65_Index
00012F28 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012F2E 4EB9 0000 AAF4             		jsr	AnimateSprite
00012F34                            
00012F34                            Obj65_ChkDel:				; XREF: Obj65_Index
00012F34 6000 CBB4                  		bra.w	MarkObjGone
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            Obj65_FixHeight:			; XREF: Obj65_Index
00012F38 3038 F646                  		move.w	($FFFFF646).w,d0
00012F3C 0440 0010                  		subi.w	#$10,d0
00012F40 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012F44 60E2                       		bra.s	Obj65_Animate
00012F46                            ; ===========================================================================
00012F46                            
00012F46                            loc_12B36:				; XREF: Obj65_Index
00012F46 08A8 0007 0002             		bclr	#7,2(a0)
00012F4C 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012F52 6600                       		bne.s	Obj65_Animate2
00012F54 08E8 0007 0002             		bset	#7,2(a0)
00012F5A                            
00012F5A                            Obj65_Animate2:
00012F5A 60CC                       		bra.s	Obj65_Animate
00012F5C                            ; ===========================================================================
00012F5C                            Ani_obj65:
00012F5C                            	include "_anim\obj65.asm"
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C                            ; Animation script - waterfall (LZ)
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C 0000                       		dc.w byte_12B4E-Ani_obj65
00012F5E 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012F64 00                         		even
00012F64 00                         		even
00012F64                            
00012F64                            ; ---------------------------------------------------------------------------
00012F64                            ; Sprite mappings - waterfalls (LZ)
00012F64                            ; ---------------------------------------------------------------------------
00012F64                            Map_obj65:
00012F64                            	include "_maps\obj65.asm"
00012F64                            ; ---------------------------------------------------------------------------
00012F64                            ; Sprite mappings - waterfalls (LZ)
00012F64                            ; ---------------------------------------------------------------------------
00012F64 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012F68 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012F6C 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012F70 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012F74 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012F78 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012F7C 01                         byte_12B6C:	dc.b 1
00012F7D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012F82 02                         byte_12B72:	dc.b 2
00012F83 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012F88 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012F8D 02                         byte_12B7D:	dc.b 2
00012F8E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012F93 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012F98 01                         byte_12B88:	dc.b 1
00012F99 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012F9E 02                         byte_12B8E:	dc.b 2
00012F9F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012FA4 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012FA9 01                         byte_12B99:	dc.b 1
00012FAA F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012FAF 01                         byte_12B9F:	dc.b 1
00012FB0 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012FB5 01                         byte_12BA5:	dc.b 1
00012FB6 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012FBB 02                         byte_12BAB:	dc.b 2
00012FBC F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012FC1 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012FC6 02                         byte_12BB6:	dc.b 2
00012FC7 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012FCC F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012FD1 02                         byte_12BC1:	dc.b 2
00012FD2 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012FD7 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012FDC 02                         byte_12BCC:	dc.b 2
00012FDD F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012FE2 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012FE8 00                         		even
00012FE8 00                         		even
00012FE8                            
00012FE8                            ; ===========================================================================
00012FE8                            ; ---------------------------------------------------------------------------
00012FE8                            ; Object 01 - Sonic
00012FE8                            ; ---------------------------------------------------------------------------
00012FE8                            
00012FE8                            Obj01:					; XREF: Obj_Index
00012FE8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012FEC 6700                       		beq.s	Obj01_Normal	; if not, branch
00012FEE 4EF9 0000 0000             		jmp	DebugMode
00012FF4                            ; ===========================================================================
00012FF4                            
00012FF4                            Obj01_Normal:
00012FF4 7000                       		moveq	#0,d0
00012FF6 1028 0024                  		move.b	$24(a0),d0
00012FFA 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012FFE 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013002                            ; ===========================================================================
00013002 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013004 0000                       		dc.w Obj01_Control-Obj01_Index
00013006 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013008 0000                       		dc.w Obj01_Death-Obj01_Index
0001300A 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001300C                            ; ===========================================================================
0001300C                            
0001300C                            Obj01_Main:				; XREF: Obj01_Index
0001300C 5428 0024                  		addq.b	#2,$24(a0)
00013010 117C 0013 0016             		move.b	#$13,$16(a0)
00013016 117C 0009 0017             		move.b	#9,$17(a0)
0001301C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013024 317C 0780 0002             		move.w	#$780,2(a0)
0001302A 117C 0002 0018             		move.b	#2,$18(a0)
00013030 117C 0018 0019             		move.b	#$18,$19(a0)
00013036 117C 0004 0001             		move.b	#4,1(a0)
0001303C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013042 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013048 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001304E                            
0001304E                            Obj01_Control:				; XREF: Obj01_Index
0001304E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013052 6700                       		beq.s	loc_12C58	; if not, branch
00013054 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001305A 6700                       		beq.s	loc_12C58	; if not, branch
0001305C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013062 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013066 4E75                       		rts	
00013068                            ; ===========================================================================
00013068                            
00013068                            loc_12C58:
00013068 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001306C 6600                       		bne.s	loc_12C64	; if yes, branch
0001306E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013074                            
00013074                            loc_12C64:
00013074 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001307A 6600                       		bne.s	loc_12C7E	; if yes, branch
0001307C 7000                       		moveq	#0,d0
0001307E 1028 0022                  		move.b	$22(a0),d0
00013082 0240 0006                  		andi.w	#6,d0
00013086 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001308A 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001308E                            
0001308E                            loc_12C7E:
0001308E 6100                       		bsr.s	Sonic_Display
00013090 6100 0000                  		bsr.w	Sonic_RecordPos
00013094 6100 0000                  		bsr.w	Sonic_Water
00013098 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001309E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000130A4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000130A8 6700                       		beq.s	loc_12CA6
000130AA 4A28 001C                  		tst.b	$1C(a0)
000130AE 6600                       		bne.s	loc_12CA6
000130B0 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000130B6                            
000130B6                            loc_12CA6:
000130B6 6100 0000                  		bsr.w	Sonic_Animate
000130BA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000130BE 6B00                       		bmi.s	loc_12CB6
000130C0 4EB9 0000 0000             		jsr	TouchResponse
000130C6                            
000130C6                            loc_12CB6:
000130C6 6100 0000                  		bsr.w	Sonic_Loops
000130CA 6100 0000                  		bsr.w	LoadSonicDynPLC
000130CE 4E75                       		rts	
000130D0                            ; ===========================================================================
000130D0 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000130D2 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000130D4 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000130D6 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000130D8                            ; ---------------------------------------------------------------------------
000130D8                            ; Music	to play	after invincibility wears off
000130D8                            ; ---------------------------------------------------------------------------
000130D8                            ; ===========================================================================
000130D8                            
000130D8                            Sonic_Display:				; XREF: loc_12C7E
000130D8 3028 0030                  		move.w	$30(a0),d0
000130DC 6700                       		beq.s	Obj01_Display
000130DE 5368 0030                  		subq.w	#1,$30(a0)
000130E2 E648                       		lsr.w	#3,d0
000130E4 6400                       		bcc.s	Obj01_ChkInvin
000130E6                            
000130E6                            Obj01_Display:
000130E6 4EBA A95A                  		jsr	DisplaySprite
000130EA                            
000130EA                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000130EA                             
000130EA                            Obj01_ChkInvin:
000130EA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000130EE 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000130F2 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000130F6 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000130FA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000130FE 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013102 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013106 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001310A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013110 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013114 7000                       		moveq	#0,d0
00013116 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001311A                             
0001311A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013120 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013122 43F9 0000 3A08             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013128 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001312A                             
0001312A                            Obj01_GetBgm2:
0001312A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013130 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013132 43F9 0000 3A10             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013138 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001313A                             
0001313A                            Obj01_GetBgm3:
0001313A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013140 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013142 43F9 0000 3A16             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013148 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001314A                             
0001314A                            Obj01_GetBgm4:
0001314A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013150 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013152 43F9 0000 3A1C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013158                             
00013158                            Obj01_PlayMusic:
00013158 1031 0000                  		move.b	(a1,d0.w),d0
0001315C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
00013162                             
00013162                            ; NineKode ends here.
00013162                            
00013162                            Obj01_RmvInvin:
00013162 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013168                            
00013168                            Obj01_ChkShoes:
00013168 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001316C 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001316E 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013172 6700                       		beq.s	Obj01_ExitChk
00013174 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013178 6600                       		bne.s	Obj01_ExitChk
0001317A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013180 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013186 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001318C 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013192 303C 00E3                  		move.w	#$E3,d0
00013196 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
0001319C                            ; ===========================================================================
0001319C                            
0001319C                            Obj01_ExitChk:
0001319C 4E75                       		rts	
0001319E                            
0001319E                            ; ---------------------------------------------------------------------------
0001319E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001319E                            ; ---------------------------------------------------------------------------
0001319E                            
0001319E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001319E                            
0001319E                            
0001319E                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001319E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000131A2 43F8 CB00                  		lea	($FFFFCB00).w,a1
000131A6 43F1 0000                  		lea	(a1,d0.w),a1
000131AA 32E8 0008                  		move.w	8(a0),(a1)+
000131AE 32E8 000C                  		move.w	$C(a0),(a1)+
000131B2 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000131B6 4E75                       		rts	
000131B8                            ; End of function Sonic_RecordPos
000131B8                            
000131B8                            ; ---------------------------------------------------------------------------
000131B8                            ; Subroutine for Sonic when he's underwater
000131B8                            ; ---------------------------------------------------------------------------
000131B8                            
000131B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131B8                            
000131B8                            
000131B8                            Sonic_Water:				; XREF: loc_12C7E
000131B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000131BE 6700                       		beq.s	Obj01_InWater	; if yes, branch
000131C0                            
000131C0                            locret_12D80:
000131C0 4E75                       		rts	
000131C2                            ; ===========================================================================
000131C2                            
000131C2                            Obj01_InWater:
000131C2 3038 F646                  		move.w	($FFFFF646).w,d0
000131C6 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000131CA 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000131CC 08E8 0006 0022             		bset	#6,$22(a0)
000131D2 66EC                       		bne.s	locret_12D80
000131D4 6100 0000                  		bsr.w	ResumeMusic
000131D8 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000131DE 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000131E4 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000131EA 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000131F0 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000131F6 E0E8 0010                  		asr	$10(a0)
000131FA E0E8 0012                  		asr	$12(a0)
000131FE E0E8 0012                  		asr	$12(a0)
00013202 67BC                       		beq.s	locret_12D80
00013204 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001320A 303C 00AA                  		move.w	#$AA,d0
0001320E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013214                            ; ===========================================================================
00013214                            
00013214                            Obj01_OutWater:
00013214 08A8 0006 0022             		bclr	#6,$22(a0)
0001321A 67A4                       		beq.s	locret_12D80
0001321C 6100 0000                  		bsr.w	ResumeMusic
00013220 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013226 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001322C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013232 E1E8 0012                  		asl	$12(a0)
00013236 6700 FF88                  		beq.w	locret_12D80
0001323A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013240 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013246 6E00                       		bgt.s	loc_12E0E
00013248 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001324E                            
0001324E                            loc_12E0E:
0001324E 303C 00AA                  		move.w	#$AA,d0
00013252 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013258                            ; End of function Sonic_Water
00013258                            
00013258                            ; ===========================================================================
00013258                            ; ---------------------------------------------------------------------------
00013258                            ; Modes	for controlling	Sonic
00013258                            ; ---------------------------------------------------------------------------
00013258                            
00013258                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013258 6100 0000                  		bsr.w	Sonic_Jump
0001325C 6100 0000                  		bsr.w	Sonic_SlopeResist
00013260 6100 0000                  		bsr.w	Sonic_Move
00013264 6100 0000                  		bsr.w	Sonic_Roll
00013268 6100 0000                  		bsr.w	Sonic_LevelBound
0001326C 4EBA A7AE                  		jsr	SpeedToPos
00013270 6100 0000                  		bsr.w	Sonic_AnglePos
00013274 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013278 4E75                       		rts	
0001327A                            ; ===========================================================================
0001327A                            
0001327A                            Obj01_MdJump:				; XREF: Obj01_Modes
0001327A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001327E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013282 6100 0000                  		bsr.w	Sonic_LevelBound
00013286 4EBA A768                  		jsr	ObjectFall
0001328A 0828 0006 0022             		btst	#6,$22(a0)
00013290 6700                       		beq.s	loc_12E5C
00013292 0468 0028 0012             		subi.w	#$28,$12(a0)
00013298                            
00013298                            loc_12E5C:
00013298 6100 0000                  		bsr.w	Sonic_JumpAngle
0001329C 6100 0000                  		bsr.w	Sonic_Floor
000132A0 4E75                       		rts	
000132A2                            ; ===========================================================================
000132A2                            
000132A2                            Obj01_MdRoll:				; XREF: Obj01_Modes
000132A2 6100 0000                  		bsr.w	Sonic_Jump
000132A6 6100 0000                  		bsr.w	Sonic_RollRepel
000132AA 6100 0000                  		bsr.w	Sonic_RollSpeed
000132AE 6100 0000                  		bsr.w	Sonic_LevelBound
000132B2 4EBA A768                  		jsr	SpeedToPos
000132B6 6100 0000                  		bsr.w	Sonic_AnglePos
000132BA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000132BE 4E75                       		rts	
000132C0                            ; ===========================================================================
000132C0                            
000132C0                            Obj01_MdJump2:				; XREF: Obj01_Modes
000132C0 6100 0000                  		bsr.w	Sonic_JumpHeight
000132C4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000132C8 6100 0000                  		bsr.w	Sonic_LevelBound
000132CC 4EBA A722                  		jsr	ObjectFall
000132D0 0828 0006 0022             		btst	#6,$22(a0)
000132D6 6700                       		beq.s	loc_12EA6
000132D8 0468 0028 0012             		subi.w	#$28,$12(a0)
000132DE                            
000132DE                            loc_12EA6:
000132DE 6100 0000                  		bsr.w	Sonic_JumpAngle
000132E2 6100 0000                  		bsr.w	Sonic_Floor
000132E6 4E75                       		rts	
000132E8                            ; ---------------------------------------------------------------------------
000132E8                            ; Subroutine to	make Sonic walk/run
000132E8                            ; ---------------------------------------------------------------------------
000132E8                            
000132E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E8                            
000132E8                            
000132E8                            Sonic_Move:				; XREF: Obj01_MdNormal
000132E8 3C38 F760                  		move.w	($FFFFF760).w,d6
000132EC 3A38 F762                  		move.w	($FFFFF762).w,d5
000132F0 3838 F764                  		move.w	($FFFFF764).w,d4
000132F4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000132F8 6600 0000                  		bne.w	loc_12FEE
000132FC 4A68 003E                  		tst.w	$3E(a0)
00013300 6600 0000                  		bne.w	Obj01_ResetScr
00013304 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001330A 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001330C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013312 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013314 6100 0000                  		bsr.w	Sonic_MoveLeft
00013318                            
00013318                            Obj01_NotLeft:
00013318 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001331E 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013320 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013326 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013328 6100 0000                  		bsr.w	Sonic_MoveLeft
0001332C 6000                       		bra.s	Obj01_NotRight
0001332E                            
0001332E                            Obj01_MoveRight:
0001332E 6100 0000                  		bsr.w	Sonic_MoveRight
00013332                            
00013332                            Obj01_NotRight:
00013332 1028 0026                  		move.b	$26(a0),d0
00013336 0600 0020                  		addi.b	#$20,d0
0001333A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001333E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013342 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013346 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001334A 08A8 0005 0022             		bclr	#5,$22(a0)
00013350 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013356 0828 0003 0022             		btst	#3,$22(a0)
0001335C 6700                       		beq.s	Sonic_Balance
0001335E 7000                       		moveq	#0,d0
00013360 1028 003D                  		move.b	$3D(a0),d0
00013364 ED48                       		lsl.w	#6,d0
00013366 43F8 D000                  		lea	($FFFFD000).w,a1
0001336A 43F1 0000                  		lea	(a1,d0.w),a1
0001336E 4A29 0022                  		tst.b	$22(a1)
00013372 6B00                       		bmi.s	Sonic_LookUp
00013374 7200                       		moveq	#0,d1
00013376 1229 0019                  		move.b	$19(a1),d1
0001337A 3401                       		move.w	d1,d2
0001337C D442                       		add.w	d2,d2
0001337E 5942                       		subq.w	#4,d2
00013380 D268 0008                  		add.w	8(a0),d1
00013384 9269 0008                  		sub.w	8(a1),d1
00013388 0C41 0004                  		cmpi.w	#4,d1
0001338C 6D00                       		blt.s	loc_12F6A
0001338E B242                       		cmp.w	d2,d1
00013390 6C00                       		bge.s	loc_12F5A
00013392 6000                       		bra.s	Sonic_LookUp
00013394                            ; ===========================================================================
00013394                            
00013394                            Sonic_Balance:
00013394 4EB9 0000 0000             		jsr	ObjHitFloor
0001339A 0C41 000C                  		cmpi.w	#$C,d1
0001339E 6D00                       		blt.s	Sonic_LookUp
000133A0 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000133A6 6600                       		bne.s	loc_12F62
000133A8                            
000133A8                            loc_12F5A:
000133A8 08A8 0000 0022             		bclr	#0,$22(a0)
000133AE 6000                       		bra.s	loc_12F70
000133B0                            ; ===========================================================================
000133B0                            
000133B0                            loc_12F62:
000133B0 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000133B6 6600                       		bne.s	Sonic_LookUp
000133B8                            
000133B8                            loc_12F6A:
000133B8 08E8 0000 0022             		bset	#0,$22(a0)
000133BE                            
000133BE                            loc_12F70:
000133BE 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000133C4 6000                       		bra.s	Obj01_ResetScr
000133C6                            ; ===========================================================================
000133C6                            
000133C6                            Sonic_LookUp:
000133C6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000133CC 6700                       		beq.s	Sonic_Duck	; if not, branch
000133CE 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000133D4 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000133DA 6700                       		beq.s	loc_12FC2
000133DC 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000133E0 6000                       		bra.s	loc_12FC2
000133E2                            ; ===========================================================================
000133E2                            
000133E2                            Sonic_Duck:
000133E2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000133E8 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000133EA 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000133F0 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000133F6 6700                       		beq.s	loc_12FC2
000133F8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000133FC 6000                       		bra.s	loc_12FC2
000133FE                            ; ===========================================================================
000133FE                            
000133FE                            Obj01_ResetScr:
000133FE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013404 6700                       		beq.s	loc_12FC2	; if yes, branch
00013406 6400                       		bcc.s	loc_12FBE
00013408 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001340C                            
0001340C                            loc_12FBE:
0001340C 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013410                            
00013410                            loc_12FC2:
00013410 1038 F602                  		move.b	($FFFFF602).w,d0
00013414 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013418 6600                       		bne.s	loc_12FEE	; if yes, branch
0001341A 3028 0014                  		move.w	$14(a0),d0
0001341E 6700                       		beq.s	loc_12FEE
00013420 6B00                       		bmi.s	loc_12FE2
00013422 9045                       		sub.w	d5,d0
00013424 6400                       		bcc.s	loc_12FDC
00013426 303C 0000                  		move.w	#0,d0
0001342A                            
0001342A                            loc_12FDC:
0001342A 3140 0014                  		move.w	d0,$14(a0)
0001342E 6000                       		bra.s	loc_12FEE
00013430                            ; ===========================================================================
00013430                            
00013430                            loc_12FE2:
00013430 D045                       		add.w	d5,d0
00013432 6400                       		bcc.s	loc_12FEA
00013434 303C 0000                  		move.w	#0,d0
00013438                            
00013438                            loc_12FEA:
00013438 3140 0014                  		move.w	d0,$14(a0)
0001343C                            
0001343C                            loc_12FEE:
0001343C 1028 0026                  		move.b	$26(a0),d0
00013440 4EB9 0000 2C22             		jsr	(CalcSine).l
00013446 C3E8 0014                  		muls.w	$14(a0),d1
0001344A E081                       		asr.l	#8,d1
0001344C 3141 0010                  		move.w	d1,$10(a0)
00013450 C1E8 0014                  		muls.w	$14(a0),d0
00013454 E080                       		asr.l	#8,d0
00013456 3140 0012                  		move.w	d0,$12(a0)
0001345A                            
0001345A                            loc_1300C:
0001345A 1028 0026                  		move.b	$26(a0),d0
0001345E 0600 0040                  		addi.b	#$40,d0
00013462 6B00                       		bmi.s	locret_1307C
00013464 123C 0040                  		move.b	#$40,d1
00013468 4A68 0014                  		tst.w	$14(a0)
0001346C 6700                       		beq.s	locret_1307C
0001346E 6B00                       		bmi.s	loc_13024
00013470 4441                       		neg.w	d1
00013472                            
00013472                            loc_13024:
00013472 1028 0026                  		move.b	$26(a0),d0
00013476 D001                       		add.b	d1,d0
00013478 3F00                       		move.w	d0,-(sp)
0001347A 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001347E 301F                       		move.w	(sp)+,d0
00013480 4A41                       		tst.w	d1
00013482 6A00                       		bpl.s	locret_1307C
00013484 E141                       		asl.w	#8,d1
00013486 0600 0020                  		addi.b	#$20,d0
0001348A 0200 00C0                  		andi.b	#$C0,d0
0001348E 6700                       		beq.s	loc_13078
00013490 0C00 0040                  		cmpi.b	#$40,d0
00013494 6700                       		beq.s	loc_13066
00013496 0C00 0080                  		cmpi.b	#$80,d0
0001349A 6700                       		beq.s	loc_13060
0001349C D368 0010                  		add.w	d1,$10(a0)
000134A0 08E8 0005 0022             		bset	#5,$22(a0)
000134A6 317C 0000 0014             		move.w	#0,$14(a0)
000134AC 4E75                       		rts	
000134AE                            ; ===========================================================================
000134AE                            
000134AE                            loc_13060:
000134AE 9368 0012                  		sub.w	d1,$12(a0)
000134B2 4E75                       		rts	
000134B4                            ; ===========================================================================
000134B4                            
000134B4                            loc_13066:
000134B4 9368 0010                  		sub.w	d1,$10(a0)
000134B8 08E8 0005 0022             		bset	#5,$22(a0)
000134BE 317C 0000 0014             		move.w	#0,$14(a0)
000134C4 4E75                       		rts	
000134C6                            ; ===========================================================================
000134C6                            
000134C6                            loc_13078:
000134C6 D368 0012                  		add.w	d1,$12(a0)
000134CA                            
000134CA                            locret_1307C:
000134CA 4E75                       		rts	
000134CC                            ; End of function Sonic_Move
000134CC                            
000134CC                            
000134CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134CC                            
000134CC                            
000134CC                            Sonic_MoveLeft:				; XREF: Sonic_Move
000134CC 3028 0014                  		move.w	$14(a0),d0
000134D0 6700                       		beq.s	loc_13086
000134D2 6A00                       		bpl.s	loc_130B2
000134D4                            
000134D4                            loc_13086:
000134D4 08E8 0000 0022             		bset	#0,$22(a0)
000134DA 6600                       		bne.s	loc_1309A
000134DC 08A8 0005 0022             		bclr	#5,$22(a0)
000134E2 117C 0001 001D             		move.b	#1,$1D(a0)
000134E8                            
000134E8                            loc_1309A:
000134E8 9045                       		sub.w	d5,d0
000134EA 3206                       		move.w	d6,d1
000134EC 4441                       		neg.w	d1
000134EE B041                       		cmp.w	d1,d0
000134F0 6E00                       		bgt.s	loc_130A6
000134F2 3001                       		move.w	d1,d0
000134F4                            
000134F4                            loc_130A6:
000134F4 3140 0014                  		move.w	d0,$14(a0)
000134F8 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000134FE 4E75                       		rts	
00013500                            ; ===========================================================================
00013500                            
00013500                            loc_130B2:				; XREF: Sonic_MoveLeft
00013500 9044                       		sub.w	d4,d0
00013502 6400                       		bcc.s	loc_130BA
00013504 303C FF80                  		move.w	#-$80,d0
00013508                            
00013508                            loc_130BA:
00013508 3140 0014                  		move.w	d0,$14(a0)
0001350C 1028 0026                  		move.b	$26(a0),d0
00013510 0600 0020                  		addi.b	#$20,d0
00013514 0200 00C0                  		andi.b	#$C0,d0
00013518 6600                       		bne.s	locret_130E8
0001351A 0C40 0400                  		cmpi.w	#$400,d0
0001351E 6D00                       		blt.s	locret_130E8
00013520 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013526 08A8 0000 0022             		bclr	#0,$22(a0)
0001352C 303C 00A4                  		move.w	#$A4,d0
00013530 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013536                            
00013536                            locret_130E8:
00013536 4E75                       		rts	
00013538                            ; End of function Sonic_MoveLeft
00013538                            
00013538                            
00013538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013538                            
00013538                            
00013538                            Sonic_MoveRight:			; XREF: Sonic_Move
00013538 3028 0014                  		move.w	$14(a0),d0
0001353C 6B00                       		bmi.s	loc_13118
0001353E 08A8 0000 0022             		bclr	#0,$22(a0)
00013544 6700                       		beq.s	loc_13104
00013546 08A8 0005 0022             		bclr	#5,$22(a0)
0001354C 117C 0001 001D             		move.b	#1,$1D(a0)
00013552                            
00013552                            loc_13104:
00013552 D045                       		add.w	d5,d0
00013554 B046                       		cmp.w	d6,d0
00013556 6D00                       		blt.s	loc_1310C
00013558 3006                       		move.w	d6,d0
0001355A                            
0001355A                            loc_1310C:
0001355A 3140 0014                  		move.w	d0,$14(a0)
0001355E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013564 4E75                       		rts	
00013566                            ; ===========================================================================
00013566                            
00013566                            loc_13118:				; XREF: Sonic_MoveRight
00013566 D044                       		add.w	d4,d0
00013568 6400                       		bcc.s	loc_13120
0001356A 303C 0080                  		move.w	#$80,d0
0001356E                            
0001356E                            loc_13120:
0001356E 3140 0014                  		move.w	d0,$14(a0)
00013572 1028 0026                  		move.b	$26(a0),d0
00013576 0600 0020                  		addi.b	#$20,d0
0001357A 0200 00C0                  		andi.b	#$C0,d0
0001357E 6600                       		bne.s	locret_1314E
00013580 0C40 FC00                  		cmpi.w	#-$400,d0
00013584 6E00                       		bgt.s	locret_1314E
00013586 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001358C 08E8 0000 0022             		bset	#0,$22(a0)
00013592 303C 00A4                  		move.w	#$A4,d0
00013596 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
0001359C                            
0001359C                            locret_1314E:
0001359C 4E75                       		rts	
0001359E                            ; End of function Sonic_MoveRight
0001359E                            
0001359E                            ; ---------------------------------------------------------------------------
0001359E                            ; Subroutine to	change Sonic's speed as he rolls
0001359E                            ; ---------------------------------------------------------------------------
0001359E                            
0001359E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001359E                            
0001359E                            
0001359E                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001359E 3C38 F760                  		move.w	($FFFFF760).w,d6
000135A2 E346                       		asl.w	#1,d6
000135A4 3A38 F762                  		move.w	($FFFFF762).w,d5
000135A8 E245                       		asr.w	#1,d5
000135AA 3838 F764                  		move.w	($FFFFF764).w,d4
000135AE E444                       		asr.w	#2,d4
000135B0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000135B4 6600 0000                  		bne.w	loc_131CC
000135B8 4A68 003E                  		tst.w	$3E(a0)
000135BC 6600                       		bne.s	loc_13188
000135BE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000135C4 6700                       		beq.s	loc_1317C	; if not, branch
000135C6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000135CC 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000135CE 6100 0000                  		bsr.w	Sonic_RollLeft
000135D2                            
000135D2                            loc_1317C:
000135D2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000135D8 6700                       		beq.s	loc_13188	; if not, branch
000135DA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000135E0 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000135E2 6100 0000                  		bsr.w	Sonic_RollLeft
000135E6 6000                       		bra.s	loc_13188
000135E8                            
000135E8                            SonicRS_RollRight:
000135E8 6100 0000                  		bsr.w	Sonic_RollRight
000135EC                            
000135EC                            loc_13188:
000135EC 3028 0014                  		move.w	$14(a0),d0
000135F0 6700                       		beq.s	loc_131AA
000135F2 6B00                       		bmi.s	loc_1319E
000135F4 9045                       		sub.w	d5,d0
000135F6 6400                       		bcc.s	loc_13198
000135F8 303C 0000                  		move.w	#0,d0
000135FC                            
000135FC                            loc_13198:
000135FC 3140 0014                  		move.w	d0,$14(a0)
00013600 6000                       		bra.s	loc_131AA
00013602                            ; ===========================================================================
00013602                            
00013602                            loc_1319E:				; XREF: Sonic_RollSpeed
00013602 D045                       		add.w	d5,d0
00013604 6400                       		bcc.s	loc_131A6
00013606 303C 0000                  		move.w	#0,d0
0001360A                            
0001360A                            loc_131A6:
0001360A 3140 0014                  		move.w	d0,$14(a0)
0001360E                            
0001360E                            loc_131AA:
0001360E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013612 6600                       		bne.s	loc_131CC	; if yes, branch
00013614 08A8 0002 0022             		bclr	#2,$22(a0)
0001361A 117C 0013 0016             		move.b	#$13,$16(a0)
00013620 117C 0009 0017             		move.b	#9,$17(a0)
00013626 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001362C 5B68 000C                  		subq.w	#5,$C(a0)
00013630                            
00013630                            loc_131CC:
00013630 1028 0026                  		move.b	$26(a0),d0
00013634 4EB9 0000 2C22             		jsr	(CalcSine).l
0001363A C1E8 0014                  		muls.w	$14(a0),d0
0001363E E080                       		asr.l	#8,d0
00013640 3140 0012                  		move.w	d0,$12(a0)
00013644 C3E8 0014                  		muls.w	$14(a0),d1
00013648 E081                       		asr.l	#8,d1
0001364A 0C41 1000                  		cmpi.w	#$1000,d1
0001364E 6F00                       		ble.s	loc_131F0
00013650 323C 1000                  		move.w	#$1000,d1
00013654                            
00013654                            loc_131F0:
00013654 0C41 F000                  		cmpi.w	#-$1000,d1
00013658 6C00                       		bge.s	loc_131FA
0001365A 323C F000                  		move.w	#-$1000,d1
0001365E                            
0001365E                            loc_131FA:
0001365E 3141 0010                  		move.w	d1,$10(a0)
00013662 6000 FDF6                  		bra.w	loc_1300C
00013666                            ; End of function Sonic_RollSpeed
00013666                            
00013666                            
00013666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013666                            
00013666                            
00013666                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013666 3028 0014                  		move.w	$14(a0),d0
0001366A 6700                       		beq.s	loc_1320A
0001366C 6A00                       		bpl.s	loc_13218
0001366E                            
0001366E                            loc_1320A:
0001366E 08E8 0000 0022             		bset	#0,$22(a0)
00013674 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001367A 4E75                       		rts	
0001367C                            ; ===========================================================================
0001367C                            
0001367C                            loc_13218:
0001367C 9044                       		sub.w	d4,d0
0001367E 6400                       		bcc.s	loc_13220
00013680 303C FF80                  		move.w	#-$80,d0
00013684                            
00013684                            loc_13220:
00013684 3140 0014                  		move.w	d0,$14(a0)
00013688 4E75                       		rts	
0001368A                            ; End of function Sonic_RollLeft
0001368A                            
0001368A                            
0001368A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001368A                            
0001368A                            
0001368A                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001368A 3028 0014                  		move.w	$14(a0),d0
0001368E 6B00                       		bmi.s	loc_1323A
00013690 08A8 0000 0022             		bclr	#0,$22(a0)
00013696 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001369C 4E75                       		rts	
0001369E                            ; ===========================================================================
0001369E                            
0001369E                            loc_1323A:
0001369E D044                       		add.w	d4,d0
000136A0 6400                       		bcc.s	loc_13242
000136A2 303C 0080                  		move.w	#$80,d0
000136A6                            
000136A6                            loc_13242:
000136A6 3140 0014                  		move.w	d0,$14(a0)
000136AA 4E75                       		rts	
000136AC                            ; End of function Sonic_RollRight
000136AC                            
000136AC                            ; ---------------------------------------------------------------------------
000136AC                            ; Subroutine to	change Sonic's direction while jumping
000136AC                            ; ---------------------------------------------------------------------------
000136AC                            
000136AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136AC                            
000136AC                            
000136AC                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000136AC 3C38 F760                  		move.w	($FFFFF760).w,d6
000136B0 3A38 F762                  		move.w	($FFFFF762).w,d5
000136B4 E345                       		asl.w	#1,d5
000136B6 0828 0004 0022             		btst	#4,$22(a0)
000136BC 6600                       		bne.s	Obj01_ResetScr2
000136BE 3028 0010                  		move.w	$10(a0),d0
000136C2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136C8 6700                       		beq.s	loc_13278	; if not, branch
000136CA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136D0 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000136D2 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000136D6 6E00                       		bgt.s	loc_13278
000136D8 3001                       		move.w	d1,d0
000136DA                            
000136DA                            loc_13278:
000136DA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136E0 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000136E2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136E8 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000136EA 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000136EE 6E00                       		bgt.s	Obj01_JumpMove
000136F0 3001                       		move.w	d1,d0
000136F2 6000                       		bra.s	Obj01_JumpMove
000136F4                            
000136F4                            SonicCJD_JumpLeft:
000136F4 08E8 0000 0022             		bset	#0,$22(a0)
000136FA 9045                       		sub.w	d5,d0
000136FC 3206                       		move.w	d6,d1
000136FE 4441                       		neg.w	d1
00013700 B041                       		cmp.w	d1,d0
00013702                            		; bgt.s	loc_13278
00013702                            		; move.w	d1,d0
00013702 4E75                       		rts
00013704                            
00013704                            SonicCJD_JumpRight:
00013704 08A8 0000 0022             		bclr	#0,$22(a0)
0001370A D045                       		add.w	d5,d0
0001370C B046                       		cmp.w	d6,d0
0001370E 6D00                       		blt.s	Obj01_JumpMove
00013710 3006                       		move.w	d6,d0
00013712                            
00013712                            Obj01_JumpMove:
00013712 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013716                            
00013716                            Obj01_ResetScr2:
00013716 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001371C 6700                       		beq.s	loc_132A4	; if yes, branch
0001371E 6400                       		bcc.s	loc_132A0
00013720 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013724                            
00013724                            loc_132A0:
00013724 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013728                            
00013728                            loc_132A4:
00013728 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001372E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013730 3028 0010                  		move.w	$10(a0),d0
00013734 3200                       		move.w	d0,d1
00013736 EA41                       		asr.w	#5,d1
00013738 6700                       		beq.s	locret_132D2
0001373A 6B00                       		bmi.s	loc_132C6
0001373C 9041                       		sub.w	d1,d0
0001373E 6400                       		bcc.s	loc_132C0
00013740 303C 0000                  		move.w	#0,d0
00013744                            
00013744                            loc_132C0:
00013744 3140 0010                  		move.w	d0,$10(a0)
00013748 4E75                       		rts	
0001374A                            ; ===========================================================================
0001374A                            
0001374A                            loc_132C6:
0001374A 9041                       		sub.w	d1,d0
0001374C 6500                       		bcs.s	loc_132CE
0001374E 303C 0000                  		move.w	#0,d0
00013752                            
00013752                            loc_132CE:
00013752 3140 0010                  		move.w	d0,$10(a0)
00013756                            
00013756                            locret_132D2:
00013756 4E75                       		rts	
00013758                            ; End of function Sonic_ChgJumpDir
00013758                            
00013758                            ; ===========================================================================
00013758                            ; ---------------------------------------------------------------------------
00013758                            ; Unused subroutine to squash Sonic
00013758                            ; ---------------------------------------------------------------------------
00013758 1028 0026                  		move.b	$26(a0),d0
0001375C 0600 0020                  		addi.b	#$20,d0
00013760 0200 00C0                  		andi.b	#$C0,d0
00013764 6600                       		bne.s	locret_13302
00013766 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001376A 4A41                       		tst.w	d1
0001376C 6A00                       		bpl.s	locret_13302
0001376E 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013774 317C 0000 0010             		move.w	#0,$10(a0)
0001377A 317C 0000 0012             		move.w	#0,$12(a0)
00013780 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013786                            
00013786                            locret_13302:
00013786 4E75                       		rts	
00013788                            ; ---------------------------------------------------------------------------
00013788                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013788                            ; ---------------------------------------------------------------------------
00013788                            
00013788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013788                            
00013788                            
00013788                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013788 2228 0008                  		move.l	8(a0),d1
0001378C 3028 0010                  		move.w	$10(a0),d0
00013790 48C0                       		ext.l	d0
00013792 E180                       		asl.l	#8,d0
00013794 D280                       		add.l	d0,d1
00013796 4841                       		swap	d1
00013798 3038 F728                  		move.w	($FFFFF728).w,d0
0001379C 0640 0010                  		addi.w	#$10,d0
000137A0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000137A2 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000137A4 3038 F72A                  		move.w	($FFFFF72A).w,d0
000137A8 0640 0128                  		addi.w	#$128,d0
000137AC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000137B0 6600                       		bne.s	loc_13332
000137B2 0640 0040                  		addi.w	#$40,d0
000137B6                            
000137B6                            loc_13332:
000137B6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000137B8 6300                       		bls.s	Boundary_Sides	; if yes, branch
000137BA                            
000137BA                            loc_13336:
000137BA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000137BE 0640 00E0                  		addi.w	#$E0,d0
000137C2 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000137C6 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000137C8 4E75                       		rts	
000137CA                            ; ===========================================================================
000137CA                            
000137CA                            Boundary_Bottom:
000137CA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000137D0 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000137D4 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000137DA 6500 0000                  		bcs.w	KillSonic
000137DE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000137E2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000137E8 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000137EE 4E75                       		rts	
000137F0                            ; ===========================================================================
000137F0                            
000137F0                            Boundary_Sides:
000137F0 3140 0008                  		move.w	d0,8(a0)
000137F4 317C 0000 000A             		move.w	#0,$A(a0)
000137FA 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013800 317C 0000 0014             		move.w	#0,$14(a0)
00013806 60B2                       		bra.s	loc_13336
00013808                            ; End of function Sonic_LevelBound
00013808                            
00013808                            ; ---------------------------------------------------------------------------
00013808                            ; Subroutine allowing Sonic to roll when he's moving
00013808                            ; ---------------------------------------------------------------------------
00013808                            
00013808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013808                            
00013808                            
00013808                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013808 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001380C 6600                       		bne.s	Obj01_NoRoll
0001380E 3028 0014                  		move.w	$14(a0),d0
00013812 6A00                       		bpl.s	loc_13392
00013814 4440                       		neg.w	d0
00013816                            
00013816                            loc_13392:
00013816 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001381A 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001381C 1038 F602                  		move.b	($FFFFF602).w,d0
00013820 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013824 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013826 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001382C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
0001382E                            
0001382E                            Obj01_NoRoll:
0001382E 4E75                       		rts	
00013830                            ; ===========================================================================
00013830                            
00013830                            Obj01_ChkRoll:
00013830 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013836 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013838 4E75                       		rts	
0001383A                            ; ===========================================================================
0001383A                            
0001383A                            Obj01_DoRoll:
0001383A 08E8 0002 0022             		bset	#2,$22(a0)
00013840 117C 000E 0016             		move.b	#$E,$16(a0)
00013846 117C 0007 0017             		move.b	#7,$17(a0)
0001384C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013852 5A68 000C                  		addq.w	#5,$C(a0)
00013856 303C 00BE                  		move.w	#$BE,d0
0001385A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
00013860 4A68 0014                  		tst.w	$14(a0)
00013864 6600                       		bne.s	locret_133E8
00013866 317C 0200 0014             		move.w	#$200,$14(a0)
0001386C                            
0001386C                            locret_133E8:
0001386C 4E75                       		rts	
0001386E                            ; End of function Sonic_Roll
0001386E                            
0001386E                            ; ---------------------------------------------------------------------------
0001386E                            ; Subroutine allowing Sonic to jump
0001386E                            ; ---------------------------------------------------------------------------
0001386E                            
0001386E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001386E                            
0001386E                            
0001386E                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001386E 1038 F603                  		move.b	($FFFFF603).w,d0
00013872 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013876 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001387A 7000                       		moveq	#0,d0
0001387C 1028 0026                  		move.b	$26(a0),d0
00013880 0600 0080                  		addi.b	#$80,d0
00013884 6100 0000                  		bsr.w	sub_14D48
00013888 0C41 0006                  		cmpi.w	#6,d1
0001388C 6D00 0000                  		blt.w	locret_1348E
00013890 343C 0680                  		move.w	#$680,d2
00013894 0828 0006 0022             		btst	#6,$22(a0)
0001389A 6700                       		beq.s	loc_1341C
0001389C 343C 0380                  		move.w	#$380,d2
000138A0                            
000138A0                            loc_1341C:
000138A0 7000                       		moveq	#0,d0
000138A2 1028 0026                  		move.b	$26(a0),d0
000138A6 0400 0040                  		subi.b	#$40,d0
000138AA 4EB9 0000 2C22             		jsr	(CalcSine).l
000138B0 C3C2                       		muls.w	d2,d1
000138B2 E081                       		asr.l	#8,d1
000138B4 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000138B8 C1C2                       		muls.w	d2,d0
000138BA E080                       		asr.l	#8,d0
000138BC D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000138C0 08E8 0001 0022             		bset	#1,$22(a0)
000138C6 08A8 0005 0022             		bclr	#5,$22(a0)
000138CC 588F                       		addq.l	#4,sp
000138CE 117C 0001 003C             		move.b	#1,$3C(a0)
000138D4 4228 0038                  		clr.b	$38(a0)
000138D8 303C 00A0                  		move.w	#$A0,d0
000138DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
000138E2 117C 0013 0016             		move.b	#$13,$16(a0)
000138E8 117C 0009 0017             		move.b	#9,$17(a0)
000138EE 0828 0002 0022             		btst	#2,$22(a0)
000138F4 6600                       		bne.s	loc_13490
000138F6 117C 000E 0016             		move.b	#$E,$16(a0)
000138FC 117C 0007 0017             		move.b	#7,$17(a0)
00013902 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013908 08E8 0002 0022             		bset	#2,$22(a0)
0001390E 5A68 000C                  		addq.w	#5,$C(a0)
00013912                            
00013912                            locret_1348E:
00013912 4E75                       		rts	
00013914                            ; ===========================================================================
00013914                            
00013914                            loc_13490:
00013914 08E8 0004 0022             		bset	#4,$22(a0)
0001391A 4E75                       		rts	
0001391C                            ; End of function Sonic_Jump
0001391C                            
0001391C                            
0001391C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001391C                            
0001391C                            
0001391C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001391C 4A28 003C                  		tst.b	$3C(a0)
00013920 6700                       		beq.s	loc_134C4
00013922 323C FC00                  		move.w	#-$400,d1
00013926 0828 0006 0022             		btst	#6,$22(a0)
0001392C 6700                       		beq.s	loc_134AE
0001392E 323C FE00                  		move.w	#-$200,d1
00013932                            
00013932                            loc_134AE:
00013932 B268 0012                  		cmp.w	$12(a0),d1
00013936 6F00                       		ble.s	locret_134C2
00013938 1038 F602                  		move.b	($FFFFF602).w,d0
0001393C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013940 6600                       		bne.s	locret_134C2	; if yes, branch
00013942 3141 0012                  		move.w	d1,$12(a0)
00013946                            
00013946                            locret_134C2:
00013946 4E75                       		rts	
00013948                            ; ===========================================================================
00013948                            
00013948                            loc_134C4:
00013948 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
0001394E 6C00                       		bge.s	locret_134D2
00013950 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013956                            
00013956                            locret_134D2:
00013956 4E75                       		rts	
00013958                            ; End of function Sonic_JumpHeight
00013958                            
00013958                            ; ---------------------------------------------------------------------------
00013958                            ; Subroutine to	slow Sonic walking up a	slope
00013958                            ; ---------------------------------------------------------------------------
00013958                            
00013958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013958                            
00013958                            
00013958                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013958 1028 0026                  		move.b	$26(a0),d0
0001395C 0600 0060                  		addi.b	#$60,d0
00013960 0C00 00C0                  		cmpi.b	#$C0,d0
00013964 6400                       		bcc.s	locret_13508
00013966 1028 0026                  		move.b	$26(a0),d0
0001396A 4EB9 0000 2C22             		jsr	(CalcSine).l
00013970 C1FC 0020                  		muls.w	#$20,d0
00013974 E080                       		asr.l	#8,d0
00013976 4A68 0014                  		tst.w	$14(a0)
0001397A 6700                       		beq.s	locret_13508
0001397C 6B00                       		bmi.s	loc_13504
0001397E 4A40                       		tst.w	d0
00013980 6700                       		beq.s	locret_13502
00013982 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013986                            
00013986                            locret_13502:
00013986 4E75                       		rts	
00013988                            ; ===========================================================================
00013988                            
00013988                            loc_13504:
00013988 D168 0014                  		add.w	d0,$14(a0)
0001398C                            
0001398C                            locret_13508:
0001398C 4E75                       		rts	
0001398E                            ; End of function Sonic_SlopeResist
0001398E                            
0001398E                            ; ---------------------------------------------------------------------------
0001398E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001398E                            ; ---------------------------------------------------------------------------
0001398E                            
0001398E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001398E                            
0001398E                            
0001398E                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001398E 1028 0026                  		move.b	$26(a0),d0
00013992 0600 0060                  		addi.b	#$60,d0
00013996 0C00 00C0                  		cmpi.b	#-$40,d0
0001399A 6400                       		bcc.s	locret_13544
0001399C 1028 0026                  		move.b	$26(a0),d0
000139A0 4EB9 0000 2C22             		jsr	(CalcSine).l
000139A6 C1FC 0050                  		muls.w	#$50,d0
000139AA E080                       		asr.l	#8,d0
000139AC 4A68 0014                  		tst.w	$14(a0)
000139B0 6B00                       		bmi.s	loc_1353A
000139B2 4A40                       		tst.w	d0
000139B4 6A00                       		bpl.s	loc_13534
000139B6 E480                       		asr.l	#2,d0
000139B8                            
000139B8                            loc_13534:
000139B8 D168 0014                  		add.w	d0,$14(a0)
000139BC 4E75                       		rts	
000139BE                            ; ===========================================================================
000139BE                            
000139BE                            loc_1353A:
000139BE 4A40                       		tst.w	d0
000139C0 6B00                       		bmi.s	loc_13540
000139C2 E480                       		asr.l	#2,d0
000139C4                            
000139C4                            loc_13540:
000139C4 D168 0014                  		add.w	d0,$14(a0)
000139C8                            
000139C8                            locret_13544:
000139C8 4E75                       		rts	
000139CA                            ; End of function Sonic_RollRepel
000139CA                            
000139CA                            ; ---------------------------------------------------------------------------
000139CA                            ; Subroutine to	push Sonic down	a slope
000139CA                            ; ---------------------------------------------------------------------------
000139CA                            
000139CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139CA                            
000139CA                            
000139CA                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000139CA 4E71                       		nop	
000139CC 4A28 0038                  		tst.b	$38(a0)
000139D0 6600                       		bne.s	locret_13580
000139D2 4A68 003E                  		tst.w	$3E(a0)
000139D6 6600                       		bne.s	loc_13582
000139D8 1028 0026                  		move.b	$26(a0),d0
000139DC 0600 0020                  		addi.b	#$20,d0
000139E0 0200 00C0                  		andi.b	#$C0,d0
000139E4 6700                       		beq.s	locret_13580
000139E6 3028 0014                  		move.w	$14(a0),d0
000139EA 6A00                       		bpl.s	loc_1356A
000139EC 4440                       		neg.w	d0
000139EE                            
000139EE                            loc_1356A:
000139EE 0C40 0280                  		cmpi.w	#$280,d0
000139F2 6400                       		bcc.s	locret_13580
000139F4 4268 0014                  		clr.w	$14(a0)
000139F8 08E8 0001 0022             		bset	#1,$22(a0)
000139FE 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013A04                            
00013A04                            locret_13580:
00013A04 4E75                       		rts	
00013A06                            ; ===========================================================================
00013A06                            
00013A06                            loc_13582:
00013A06 5368 003E                  		subq.w	#1,$3E(a0)
00013A0A 4E75                       		rts	
00013A0C                            ; End of function Sonic_SlopeRepel
00013A0C                            
00013A0C                            ; ---------------------------------------------------------------------------
00013A0C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013A0C                            ; ---------------------------------------------------------------------------
00013A0C                            
00013A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A0C                            
00013A0C                            
00013A0C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A0C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013A10 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013A12 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013A14                            
00013A14 5400                       		addq.b	#2,d0		; increase angle
00013A16 6400                       		bcc.s	loc_13596
00013A18 7000                       		moveq	#0,d0
00013A1A                            
00013A1A                            loc_13596:
00013A1A 6000                       		bra.s	loc_1359E
00013A1C                            ; ===========================================================================
00013A1C                            
00013A1C                            loc_13598:
00013A1C 5500                       		subq.b	#2,d0		; decrease angle
00013A1E 6400                       		bcc.s	loc_1359E
00013A20 7000                       		moveq	#0,d0
00013A22                            
00013A22                            loc_1359E:
00013A22 1140 0026                  		move.b	d0,$26(a0)
00013A26                            
00013A26                            locret_135A2:
00013A26 4E75                       		rts	
00013A28                            ; End of function Sonic_JumpAngle
00013A28                            
00013A28                            ; ---------------------------------------------------------------------------
00013A28                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013A28                            ; ---------------------------------------------------------------------------
00013A28                            
00013A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A28                            
00013A28                            
00013A28                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013A28 3228 0010                  		move.w	$10(a0),d1
00013A2C 3428 0012                  		move.w	$12(a0),d2
00013A30 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013A36 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013A3A 0400 0020                  		subi.b	#$20,d0
00013A3E 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013A42 0200 00C0                  		andi.b	#$C0,d0
00013A46 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013A4A 0C00 0040                  		cmpi.b	#$40,d0
00013A4E 6700 0000                  		beq.w	loc_13680
00013A52 0C00 0080                  		cmpi.b	#$80,d0
00013A56 6700 0000                  		beq.w	loc_136E2
00013A5A 0C00 00C0                  		cmpi.b	#-$40,d0
00013A5E 6700 0000                  		beq.w	loc_1373E
00013A62 6100 0000                  		bsr.w	Sonic_HitWall
00013A66 4A41                       		tst.w	d1
00013A68 6A00                       		bpl.s	loc_135F0
00013A6A 9368 0008                  		sub.w	d1,8(a0)
00013A6E 317C 0000 0010             		move.w	#0,$10(a0)
00013A74                            
00013A74                            loc_135F0:
00013A74 6100 0000                  		bsr.w	sub_14EB4
00013A78 4A41                       		tst.w	d1
00013A7A 6A00                       		bpl.s	loc_13602
00013A7C D368 0008                  		add.w	d1,8(a0)
00013A80 317C 0000 0010             		move.w	#0,$10(a0)
00013A86                            
00013A86                            loc_13602:
00013A86 6100 0000                  		bsr.w	Sonic_HitFloor
00013A8A 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013A8E 4A41                       		tst.w	d1
00013A90 6A00                       		bpl.s	locret_1367E
00013A92 1428 0012                  		move.b	$12(a0),d2
00013A96 5002                       		addq.b	#8,d2
00013A98 4402                       		neg.b	d2
00013A9A B202                       		cmp.b	d2,d1
00013A9C 6C00                       		bge.s	loc_1361E
00013A9E B002                       		cmp.b	d2,d0
00013AA0 6D00                       		blt.s	locret_1367E
00013AA2                            
00013AA2                            loc_1361E:
00013AA2 D368 000C                  		add.w	d1,$C(a0)
00013AA6 1143 0026                  		move.b	d3,$26(a0)
00013AAA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013AAE 117C 0000 001C             		move.b	#0,$1C(a0)
00013AB4 1003                       		move.b	d3,d0
00013AB6 0600 0020                  		addi.b	#$20,d0
00013ABA 0200 0040                  		andi.b	#$40,d0
00013ABE 6600                       		bne.s	loc_1365C
00013AC0 1003                       		move.b	d3,d0
00013AC2 0600 0010                  		addi.b	#$10,d0
00013AC6 0200 0020                  		andi.b	#$20,d0
00013ACA 6700                       		beq.s	loc_1364E
00013ACC E0E8 0012                  		asr	$12(a0)
00013AD0 6000                       		bra.s	loc_13670
00013AD2                            ; ===========================================================================
00013AD2                            
00013AD2                            loc_1364E:
00013AD2 317C 0000 0012             		move.w	#0,$12(a0)
00013AD8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013ADE 4E75                       		rts	
00013AE0                            ; ===========================================================================
00013AE0                            
00013AE0                            loc_1365C:
00013AE0 317C 0000 0010             		move.w	#0,$10(a0)
00013AE6 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013AEC 6F00                       		ble.s	loc_13670
00013AEE 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013AF4                            
00013AF4                            loc_13670:
00013AF4 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013AFA 4A03                       		tst.b	d3
00013AFC 6A00                       		bpl.s	locret_1367E
00013AFE 4468 0014                  		neg.w	$14(a0)
00013B02                            
00013B02                            locret_1367E:
00013B02 4E75                       		rts	
00013B04                            ; ===========================================================================
00013B04                            
00013B04                            loc_13680:
00013B04 6100 0000                  		bsr.w	Sonic_HitWall
00013B08 4A41                       		tst.w	d1
00013B0A 6A00                       		bpl.s	loc_1369A
00013B0C 9368 0008                  		sub.w	d1,8(a0)
00013B10 317C 0000 0010             		move.w	#0,$10(a0)
00013B16 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013B1C 4E75                       		rts	
00013B1E                            ; ===========================================================================
00013B1E                            
00013B1E                            loc_1369A:
00013B1E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B22 4A41                       		tst.w	d1
00013B24 6A00                       		bpl.s	loc_136B4
00013B26 9368 000C                  		sub.w	d1,$C(a0)
00013B2A 4A68 0012                  		tst.w	$12(a0)
00013B2E 6A00                       		bpl.s	locret_136B2
00013B30 317C 0000 0012             		move.w	#0,$12(a0)
00013B36                            
00013B36                            locret_136B2:
00013B36 4E75                       		rts	
00013B38                            ; ===========================================================================
00013B38                            
00013B38                            loc_136B4:
00013B38 4A68 0012                  		tst.w	$12(a0)
00013B3C 6B00                       		bmi.s	locret_136E0
00013B3E 6100 0000                  		bsr.w	Sonic_HitFloor
00013B42 4A41                       		tst.w	d1
00013B44 6A00                       		bpl.s	locret_136E0
00013B46 D368 000C                  		add.w	d1,$C(a0)
00013B4A 1143 0026                  		move.b	d3,$26(a0)
00013B4E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013B52 117C 0000 001C             		move.b	#0,$1C(a0)
00013B58 317C 0000 0012             		move.w	#0,$12(a0)
00013B5E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013B64                            
00013B64                            locret_136E0:
00013B64 4E75                       		rts	
00013B66                            ; ===========================================================================
00013B66                            
00013B66                            loc_136E2:
00013B66 6100 0000                  		bsr.w	Sonic_HitWall
00013B6A 4A41                       		tst.w	d1
00013B6C 6A00                       		bpl.s	loc_136F4
00013B6E 9368 0008                  		sub.w	d1,8(a0)
00013B72 317C 0000 0010             		move.w	#0,$10(a0)
00013B78                            
00013B78                            loc_136F4:
00013B78 6100 0000                  		bsr.w	sub_14EB4
00013B7C 4A41                       		tst.w	d1
00013B7E 6A00                       		bpl.s	loc_13706
00013B80 D368 0008                  		add.w	d1,8(a0)
00013B84 317C 0000 0010             		move.w	#0,$10(a0)
00013B8A                            
00013B8A                            loc_13706:
00013B8A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B8E 4A41                       		tst.w	d1
00013B90 6A00                       		bpl.s	locret_1373C
00013B92 9368 000C                  		sub.w	d1,$C(a0)
00013B96 1003                       		move.b	d3,d0
00013B98 0600 0020                  		addi.b	#$20,d0
00013B9C 0200 0040                  		andi.b	#$40,d0
00013BA0 6600                       		bne.s	loc_13726
00013BA2 317C 0000 0012             		move.w	#0,$12(a0)
00013BA8 4E75                       		rts	
00013BAA                            ; ===========================================================================
00013BAA                            
00013BAA                            loc_13726:
00013BAA 1143 0026                  		move.b	d3,$26(a0)
00013BAE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013BB2 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013BB8 4A03                       		tst.b	d3
00013BBA 6A00                       		bpl.s	locret_1373C
00013BBC 4468 0014                  		neg.w	$14(a0)
00013BC0                            
00013BC0                            locret_1373C:
00013BC0 4E75                       		rts	
00013BC2                            ; ===========================================================================
00013BC2                            
00013BC2                            loc_1373E:
00013BC2 6100 0000                  		bsr.w	sub_14EB4
00013BC6 4A41                       		tst.w	d1
00013BC8 6A00                       		bpl.s	loc_13758
00013BCA D368 0008                  		add.w	d1,8(a0)
00013BCE 317C 0000 0010             		move.w	#0,$10(a0)
00013BD4 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013BDA 4E75                       		rts	
00013BDC                            ; ===========================================================================
00013BDC                            
00013BDC                            loc_13758:
00013BDC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013BE0 4A41                       		tst.w	d1
00013BE2 6A00                       		bpl.s	loc_13772
00013BE4 9368 000C                  		sub.w	d1,$C(a0)
00013BE8 4A68 0012                  		tst.w	$12(a0)
00013BEC 6A00                       		bpl.s	locret_13770
00013BEE 317C 0000 0012             		move.w	#0,$12(a0)
00013BF4                            
00013BF4                            locret_13770:
00013BF4 4E75                       		rts	
00013BF6                            ; ===========================================================================
00013BF6                            
00013BF6                            loc_13772:
00013BF6 4A68 0012                  		tst.w	$12(a0)
00013BFA 6B00                       		bmi.s	locret_1379E
00013BFC 6100 0000                  		bsr.w	Sonic_HitFloor
00013C00 4A41                       		tst.w	d1
00013C02 6A00                       		bpl.s	locret_1379E
00013C04 D368 000C                  		add.w	d1,$C(a0)
00013C08 1143 0026                  		move.b	d3,$26(a0)
00013C0C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C10 117C 0000 001C             		move.b	#0,$1C(a0)
00013C16 317C 0000 0012             		move.w	#0,$12(a0)
00013C1C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C22                            
00013C22                            locret_1379E:
00013C22 4E75                       		rts	
00013C24                            ; End of function Sonic_Floor
00013C24                            
00013C24                            ; ---------------------------------------------------------------------------
00013C24                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013C24                            ; ---------------------------------------------------------------------------
00013C24                            
00013C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C24                            
00013C24                            
00013C24                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013C24 0828 0004 0022             		btst	#4,$22(a0)
00013C2A 6700                       		beq.s	loc_137AE
00013C2C 4E71                       		nop	
00013C2E 4E71                       		nop	
00013C30 4E71                       		nop	
00013C32                            
00013C32                            loc_137AE:
00013C32 08A8 0005 0022             		bclr	#5,$22(a0)
00013C38 08A8 0001 0022             		bclr	#1,$22(a0)
00013C3E 08A8 0004 0022             		bclr	#4,$22(a0)
00013C44 0828 0002 0022             		btst	#2,$22(a0)
00013C4A 6700                       		beq.s	loc_137E4
00013C4C 08A8 0002 0022             		bclr	#2,$22(a0)
00013C52 117C 0013 0016             		move.b	#$13,$16(a0)
00013C58 117C 0009 0017             		move.b	#9,$17(a0)
00013C5E 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013C64 5B68 000C                  		subq.w	#5,$C(a0)
00013C68                            
00013C68                            loc_137E4:
00013C68 117C 0000 003C             		move.b	#0,$3C(a0)
00013C6E 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013C74 4E75                       		rts	
00013C76                            ; End of function Sonic_ResetOnFloor
00013C76                            
00013C76                            ; ===========================================================================
00013C76                            ; ---------------------------------------------------------------------------
00013C76                            ; Sonic	when he	gets hurt
00013C76                            ; ---------------------------------------------------------------------------
00013C76                            
00013C76                            Obj01_Hurt:				; XREF: Obj01_Index
00013C76 4EBA 9DA4                  		jsr	SpeedToPos
00013C7A 0668 0030 0012             		addi.w	#$30,$12(a0)
00013C80 0828 0006 0022             		btst	#6,$22(a0)
00013C86 6700                       		beq.s	loc_1380C
00013C88 0468 0020 0012             		subi.w	#$20,$12(a0)
00013C8E                            
00013C8E                            loc_1380C:
00013C8E 6100 0000                  		bsr.w	Sonic_HurtStop
00013C92 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013C96 6100 F506                  		bsr.w	Sonic_RecordPos
00013C9A 6100 0000                  		bsr.w	Sonic_Animate
00013C9E 6100 0000                  		bsr.w	LoadSonicDynPLC
00013CA2 4EFA 9D9E                  		jmp	DisplaySprite
00013CA6                            
00013CA6                            ; ---------------------------------------------------------------------------
00013CA6                            ; Subroutine to	stop Sonic falling after he's been hurt
00013CA6                            ; ---------------------------------------------------------------------------
00013CA6                            
00013CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CA6                            
00013CA6                            
00013CA6                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013CA6 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013CAA 0640 00E0                  		addi.w	#$E0,d0
00013CAE B068 000C                  		cmp.w	$C(a0),d0
00013CB2 6500 0000                  		bcs.w	KillSonic
00013CB6 6100 FD70                  		bsr.w	Sonic_Floor
00013CBA 0828 0001 0022             		btst	#1,$22(a0)
00013CC0 6600                       		bne.s	locret_13860
00013CC2 7000                       		moveq	#0,d0
00013CC4 3140 0012                  		move.w	d0,$12(a0)
00013CC8 3140 0010                  		move.w	d0,$10(a0)
00013CCC 3140 0014                  		move.w	d0,$14(a0)
00013CD0 117C 0000 001C             		move.b	#0,$1C(a0)
00013CD6 5528 0024                  		subq.b	#2,$24(a0)
00013CDA 317C 0078 0030             		move.w	#$78,$30(a0)
00013CE0                            
00013CE0                            locret_13860:
00013CE0 4E75                       		rts	
00013CE2                            ; End of function Sonic_HurtStop
00013CE2                            
00013CE2                            ; ===========================================================================
00013CE2                            ; ---------------------------------------------------------------------------
00013CE2                            ; Sonic	when he	dies
00013CE2                            ; ---------------------------------------------------------------------------
00013CE2                            
00013CE2                            Obj01_Death:				; XREF: Obj01_Index
00013CE2 6100 0000                  		bsr.w	GameOver
00013CE6 4EBA 9D08                  		jsr	ObjectFall
00013CEA 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013CEE 6100 0000                  		bsr.w	Sonic_Animate
00013CF2 6100 0000                  		bsr.w	LoadSonicDynPLC
00013CF6 4EFA 9D4A                  		jmp	DisplaySprite
00013CFA                            
00013CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CFA                            
00013CFA                            
00013CFA                            GameOver:				; XREF: Obj01_Death
00013CFA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013CFE 0640 0100                  		addi.w	#$100,d0
00013D02 B068 000C                  		cmp.w	$C(a0),d0
00013D06 6400 0000                  		bcc.w	locret_13900
00013D0A 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013D10 5428 0024                  		addq.b	#2,$24(a0)
00013D14 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013D18 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013D1C 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013D20 6600                       		bne.s	loc_138D4
00013D22 317C 0000 003A             		move.w	#0,$3A(a0)
00013D28 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013D2E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013D34 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013D3A 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013D3E                            
00013D3E                            loc_138C2:
00013D3E 303C 008F                  		move.w	#$8F,d0
00013D42 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013D48 7003                       		moveq	#3,d0
00013D4A 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013D50                            ; ===========================================================================
00013D50                            
00013D50                            loc_138D4:
00013D50 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013D56 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013D5A 6700                       		beq.s	locret_13900	; if not, branch
00013D5C 317C 0000 003A             		move.w	#0,$3A(a0)
00013D62 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013D68 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013D6E 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013D74 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013D7A 60C2                       		bra.s	loc_138C2
00013D7C                            ; ===========================================================================
00013D7C                            
00013D7C                            locret_13900:
00013D7C 4E75                       		rts	
00013D7E                            ; End of function GameOver
00013D7E                            
00013D7E                            ; ===========================================================================
00013D7E                            ; ---------------------------------------------------------------------------
00013D7E                            ; Sonic	when the level is restarted
00013D7E                            ; ---------------------------------------------------------------------------
00013D7E                            
00013D7E                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013D7E 4A68 003A                  		tst.w	$3A(a0)
00013D82 6700                       		beq.s	locret_13914
00013D84 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013D88 6600                       		bne.s	locret_13914
00013D8A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013D90                            
00013D90                            locret_13914:
00013D90 4E75                       		rts	
00013D92                            
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            
00013D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D92                            
00013D92                            
00013D92                            Sonic_Loops:				; XREF: Obj01_Control
00013D92 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013D98 6700                       		beq.s	loc_13926	; if yes, branch
00013D9A 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013D9E 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013DA2                            
00013DA2                            loc_13926:
00013DA2 3028 000C                  		move.w	$C(a0),d0
00013DA6 E248                       		lsr.w	#1,d0
00013DA8 0240 0380                  		andi.w	#$380,d0
00013DAC 1228 0008                  		move.b	8(a0),d1
00013DB0 0241 007F                  		andi.w	#$7F,d1
00013DB4 D041                       		add.w	d1,d0
00013DB6 43F8 A400                  		lea	($FFFFA400).w,a1
00013DBA 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013DBE B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013DC2 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013DC6 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013DCA 6700 FA64                  		beq.w	Obj01_ChkRoll
00013DCE B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013DD2 6700                       		beq.s	loc_13976
00013DD4 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013DD8 6700                       		beq.s	loc_13966
00013DDA 08A8 0006 0001             		bclr	#6,1(a0)
00013DE0 4E75                       		rts	
00013DE2                            ; ===========================================================================
00013DE2                            
00013DE2                            loc_13966:
00013DE2 0828 0001 0022             		btst	#1,$22(a0)
00013DE8 6700                       		beq.s	loc_13976
00013DEA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013DF0 4E75                       		rts	
00013DF2                            ; ===========================================================================
00013DF2                            
00013DF2                            loc_13976:
00013DF2 3428 0008                  		move.w	8(a0),d2
00013DF6 0C02 002C                  		cmpi.b	#$2C,d2
00013DFA 6400                       		bcc.s	loc_13988
00013DFC 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013E02 4E75                       		rts	
00013E04                            ; ===========================================================================
00013E04                            
00013E04                            loc_13988:
00013E04 0C02 00E0                  		cmpi.b	#-$20,d2
00013E08 6500                       		bcs.s	loc_13996
00013E0A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013E10 4E75                       		rts	
00013E12                            ; ===========================================================================
00013E12                            
00013E12                            loc_13996:
00013E12 0828 0006 0001             		btst	#6,1(a0)
00013E18 6600                       		bne.s	loc_139B2
00013E1A 1228 0026                  		move.b	$26(a0),d1
00013E1E 6700                       		beq.s	locret_139C2
00013E20 0C01 0080                  		cmpi.b	#-$80,d1
00013E24 6200                       		bhi.s	locret_139C2
00013E26 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013E2C 4E75                       		rts	
00013E2E                            ; ===========================================================================
00013E2E                            
00013E2E                            loc_139B2:
00013E2E 1228 0026                  		move.b	$26(a0),d1
00013E32 0C01 0080                  		cmpi.b	#-$80,d1
00013E36 6300                       		bls.s	locret_139C2
00013E38 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013E3E                            
00013E3E                            locret_139C2:
00013E3E 4E75                       		rts	
00013E40                            ; End of function Sonic_Loops
00013E40                            
00013E40                            ; ---------------------------------------------------------------------------
00013E40                            ; Subroutine to	animate	Sonic's sprites
00013E40                            ; ---------------------------------------------------------------------------
00013E40                            
00013E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E40                            
00013E40                            
00013E40                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013E40 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013E46 7000                       		moveq	#0,d0
00013E48 1028 001C                  		move.b	$1C(a0),d0
00013E4C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013E50 6700                       		beq.s	SAnim_Do	; if not, branch
00013E52 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013E56 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013E5C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013E62                            
00013E62                            SAnim_Do:
00013E62 D040                       		add.w	d0,d0
00013E64 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013E68 1011                       		move.b	(a1),d0
00013E6A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013E6C 1228 0022                  		move.b	$22(a0),d1
00013E70 0201 0001                  		andi.b	#1,d1
00013E74 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013E7A 8328 0001                  		or.b	d1,1(a0)
00013E7E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013E82 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013E84 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013E88                            
00013E88                            SAnim_Do2:
00013E88 7200                       		moveq	#0,d1
00013E8A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013E8E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013E92 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013E94                            
00013E94                            SAnim_Next:
00013E94 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013E98 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013E9C                            
00013E9C                            SAnim_Delay:
00013E9C 4E75                       		rts	
00013E9E                            ; ===========================================================================
00013E9E                            
00013E9E                            SAnim_End_FF:
00013E9E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013EA0 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013EA2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013EA8 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013EAC 60E6                       		bra.s	SAnim_Next
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            SAnim_End_FE:
00013EAE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013EB0 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013EB2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013EB6 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013EBA 9200                       		sub.b	d0,d1
00013EBC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013EC0 60D2                       		bra.s	SAnim_Next
00013EC2                            ; ===========================================================================
00013EC2                            
00013EC2                            SAnim_End_FD:
00013EC2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013EC4 6600                       		bne.s	SAnim_End	; if not, branch
00013EC6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013ECC                            
00013ECC                            SAnim_End:
00013ECC 4E75                       		rts	
00013ECE                            ; ===========================================================================
00013ECE                            
00013ECE                            SAnim_WalkRun:				; XREF: SAnim_Do
00013ECE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013ED2 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013ED4 5200                       		addq.b	#1,d0		; is animation walking/running?
00013ED6 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013EDA 7200                       		moveq	#0,d1
00013EDC 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013EE0 1428 0022                  		move.b	$22(a0),d2
00013EE4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013EE8 6600                       		bne.s	loc_13A70	; if yes, branch
00013EEA 4600                       		not.b	d0		; reverse angle
00013EEC                            
00013EEC                            loc_13A70:
00013EEC 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013EF0 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013EF2 7203                       		moveq	#3,d1
00013EF4                            
00013EF4                            loc_13A78:
00013EF4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013EFA B302                       		eor.b	d1,d2
00013EFC 8528 0001                  		or.b	d2,1(a0)
00013F00 0828 0005 0022             		btst	#5,$22(a0)
00013F06 6600 0000                  		bne.w	SAnim_Push
00013F0A E808                       		lsr.b	#4,d0		; divide angle by $10
00013F0C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013F10 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013F14 6A00                       		bpl.s	loc_13A9C
00013F16 4442                       		neg.w	d2
00013F18                            
00013F18                            loc_13A9C:
00013F18 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013F1E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013F22 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013F24 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013F2A 1200                       		move.b	d0,d1
00013F2C E209                       		lsr.b	#1,d1
00013F2E D001                       		add.b	d1,d0
00013F30                            
00013F30                            loc_13AB4:
00013F30 D000                       		add.b	d0,d0
00013F32 1600                       		move.b	d0,d3
00013F34 4442                       		neg.w	d2
00013F36 0642 0800                  		addi.w	#$800,d2
00013F3A 6A00                       		bpl.s	loc_13AC2
00013F3C 7400                       		moveq	#0,d2
00013F3E                            
00013F3E                            loc_13AC2:
00013F3E E04A                       		lsr.w	#8,d2
00013F40 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013F44 6100 FF42                  		bsr.w	SAnim_Do2
00013F48 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013F4C 4E75                       		rts	
00013F4E                            ; ===========================================================================
00013F4E                            
00013F4E                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013F4E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013F50 6600                       		bne.s	SAnim_Push	; if not, branch
00013F52 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013F56 6A00                       		bpl.s	loc_13ADE
00013F58 4442                       		neg.w	d2
00013F5A                            
00013F5A                            loc_13ADE:
00013F5A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013F60 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013F64 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013F66 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013F6C                            
00013F6C                            loc_13AF0:
00013F6C 4442                       		neg.w	d2
00013F6E 0642 0400                  		addi.w	#$400,d2
00013F72 6A00                       		bpl.s	loc_13AFA
00013F74 7400                       		moveq	#0,d2
00013F76                            
00013F76                            loc_13AFA:
00013F76 E04A                       		lsr.w	#8,d2
00013F78 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013F7C 1228 0022                  		move.b	$22(a0),d1
00013F80 0201 0001                  		andi.b	#1,d1
00013F84 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013F8A 8328 0001                  		or.b	d1,1(a0)
00013F8E 6000 FEF8                  		bra.w	SAnim_Do2
00013F92                            ; ===========================================================================
00013F92                            
00013F92                            SAnim_Push:				; XREF: SAnim_RollJump
00013F92 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013F96 6B00                       		bmi.s	loc_13B1E
00013F98 4442                       		neg.w	d2
00013F9A                            
00013F9A                            loc_13B1E:
00013F9A 0642 0800                  		addi.w	#$800,d2
00013F9E 6A00                       		bpl.s	loc_13B26
00013FA0 7400                       		moveq	#0,d2
00013FA2                            
00013FA2                            loc_13B26:
00013FA2 EC4A                       		lsr.w	#6,d2
00013FA4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013FA8 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013FAE 1228 0022                  		move.b	$22(a0),d1
00013FB2 0201 0001                  		andi.b	#1,d1
00013FB6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FBC 8328 0001                  		or.b	d1,1(a0)
00013FC0 6000 FEC6                  		bra.w	SAnim_Do2
00013FC4                            ; End of function Sonic_Animate
00013FC4                            
00013FC4                            ; ===========================================================================
00013FC4                            SonicAniData:
00013FC4                            	include "_anim\Sonic.asm"
00013FC4                            ; ---------------------------------------------------------------------------
00013FC4                            ; Animation script - Sonic
00013FC4                            ; ---------------------------------------------------------------------------
00013FC4 0000                       		dc.w SonAni_Walk-SonicAniData
00013FC6 0000                       		dc.w SonAni_Run-SonicAniData
00013FC8 0000                       		dc.w SonAni_Roll-SonicAniData
00013FCA 0000                       		dc.w SonAni_Roll2-SonicAniData
00013FCC 0000                       		dc.w SonAni_Push-SonicAniData
00013FCE 0000                       		dc.w SonAni_Wait-SonicAniData
00013FD0 0000                       		dc.w SonAni_Balance-SonicAniData
00013FD2 0000                       		dc.w SonAni_LookUp-SonicAniData
00013FD4 0000                       		dc.w SonAni_Duck-SonicAniData
00013FD6 0000                       		dc.w SonAni_Warp1-SonicAniData
00013FD8 0000                       		dc.w SonAni_Warp2-SonicAniData
00013FDA 0000                       		dc.w SonAni_Warp3-SonicAniData
00013FDC 0000                       		dc.w SonAni_Warp4-SonicAniData
00013FDE 0000                       		dc.w SonAni_Stop-SonicAniData
00013FE0 0000                       		dc.w SonAni_Float1-SonicAniData
00013FE2 0000                       		dc.w SonAni_Float2-SonicAniData
00013FE4 0000                       		dc.w SonAni_Spring-SonicAniData
00013FE6 0000                       		dc.w SonAni_LZHang-SonicAniData
00013FE8 0000                       		dc.w SonAni_Leap1-SonicAniData
00013FEA 0000                       		dc.w SonAni_Leap2-SonicAniData
00013FEC 0000                       		dc.w SonAni_Surf-SonicAniData
00013FEE 0000                       		dc.w SonAni_Bubble-SonicAniData
00013FF0 0000                       		dc.w SonAni_Death1-SonicAniData
00013FF2 0000                       		dc.w SonAni_Drown-SonicAniData
00013FF4 0000                       		dc.w SonAni_Death2-SonicAniData
00013FF6 0000                       		dc.w SonAni_Shrink-SonicAniData
00013FF8 0000                       		dc.w SonAni_Hurt-SonicAniData
00013FFA 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013FFC 0000                       		dc.w SonAni_Blank-SonicAniData
00013FFE 0000                       		dc.w SonAni_Float3-SonicAniData
00014000 0000                       		dc.w SonAni_Float4-SonicAniData
00014002 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
0001400A FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014012 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001401A FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014022 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001402A 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014040 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00014044 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014048 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001404C 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014050 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014054 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014058 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001405C 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014060 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014064 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001406C 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014070 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014074 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001407A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014080 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014084 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001408C 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014090 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014094 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014098 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000140A2 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000140A6 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000140AA 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000140AE 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000140B6 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000140BA                            		even
000140BA                            		even
000140BA                            
000140BA                            ; ---------------------------------------------------------------------------
000140BA                            ; Sonic	pattern	loading	subroutine
000140BA                            ; ---------------------------------------------------------------------------
000140BA                            
000140BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140BA                            
000140BA                            
000140BA                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000140BA 7000                       		moveq	#0,d0
000140BC 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000140C0 B038 F766                  		cmp.b	($FFFFF766).w,d0
000140C4 6700                       		beq.s	locret_13C96
000140C6 11C0 F766                  		move.b	d0,($FFFFF766).w
000140CA 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000140D0 D040                       		add.w	d0,d0
000140D2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000140D6 7200                       		moveq	#0,d1
000140D8 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000140DA 5301                       		subq.b	#1,d1
000140DC 6B00                       		bmi.s	locret_13C96
000140DE 47F8 C800                  		lea	($FFFFC800).w,a3
000140E2 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000140E8                            
000140E8                            SPLC_ReadEntry:
000140E8 7400                       		moveq	#0,d2
000140EA 141A                       		move.b	(a2)+,d2
000140EC 3002                       		move.w	d2,d0
000140EE E808                       		lsr.b	#4,d0
000140F0 E14A                       		lsl.w	#8,d2
000140F2 141A                       		move.b	(a2)+,d2
000140F4 EB4A                       		lsl.w	#5,d2
000140F6 43F9 0000 0000             		lea	(Art_Sonic).l,a1
000140FC D3C2                       		adda.l	d2,a1
000140FE                            
000140FE                            SPLC_LoadTile:
000140FE 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014102 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014106 47EB 0020                  		lea	$20(a3),a3	; next tile
0001410A 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001410E                            
0001410E 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014112                            
00014112                            locret_13C96:
00014112 4E75                       		rts	
00014114                            ; End of function LoadSonicDynPLC
00014114                            
00014114                            ; ===========================================================================
00014114                            ; ---------------------------------------------------------------------------
00014114                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014114                            ; ---------------------------------------------------------------------------
00014114                            
00014114                            Obj0A:					; XREF: Obj_Index
00014114 7000                       		moveq	#0,d0
00014116 1028 0024                  		move.b	$24(a0),d0
0001411A 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001411E 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014122                            ; ===========================================================================
00014122 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014126 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001412A 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001412E 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014132 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014134                            ; ===========================================================================
00014134                            
00014134                            Obj0A_Main:				; XREF: Obj0A_Index
00014134 5428 0024                  		addq.b	#2,$24(a0)
00014138 217C 0001 2DDC 0004        		move.l	#Map_obj64,4(a0)
00014140 317C 8348 0002             		move.w	#$8348,2(a0)
00014146 117C 0084 0001             		move.b	#$84,1(a0)
0001414C 117C 0010 0019             		move.b	#$10,$19(a0)
00014152 117C 0001 0018             		move.b	#1,$18(a0)
00014158 1028 0028                  		move.b	$28(a0),d0
0001415C 6A00                       		bpl.s	loc_13D00
0001415E 5028 0024                  		addq.b	#8,$24(a0)
00014162 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001416A 317C 0440 0002             		move.w	#$440,2(a0)
00014170 0240 007F                  		andi.w	#$7F,d0
00014174 1140 0033                  		move.b	d0,$33(a0)
00014178 6000 0000                  		bra.w	Obj0A_Countdown
0001417C                            ; ===========================================================================
0001417C                            
0001417C                            loc_13D00:
0001417C 1140 001C                  		move.b	d0,$1C(a0)
00014180 3168 0008 0030             		move.w	8(a0),$30(a0)
00014186 317C FF78 0012             		move.w	#-$88,$12(a0)
0001418C                            
0001418C                            Obj0A_Animate:				; XREF: Obj0A_Index
0001418C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014192 4EB9 0000 AAF4             		jsr	AnimateSprite
00014198                            
00014198                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014198 3038 F646                  		move.w	($FFFFF646).w,d0
0001419C B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000141A0 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000141A2 117C 0006 0024             		move.b	#6,$24(a0)
000141A8 5E28 001C                  		addq.b	#7,$1C(a0)
000141AC 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000141B2 6700                       		beq.s	Obj0A_Display
000141B4 6000                       		bra.s	Obj0A_Display
000141B6                            ; ===========================================================================
000141B6                            
000141B6                            Obj0A_Wobble:
000141B6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000141BA 6700                       		beq.s	loc_13D44
000141BC 5868 0030                  		addq.w	#4,$30(a0)
000141C0                            
000141C0                            loc_13D44:
000141C0 1028 0026                  		move.b	$26(a0),d0
000141C4 5228 0026                  		addq.b	#1,$26(a0)
000141C8 0240 007F                  		andi.w	#$7F,d0
000141CC 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000141D2 1031 0000                  		move.b	(a1,d0.w),d0
000141D6 4880                       		ext.w	d0
000141D8 D068 0030                  		add.w	$30(a0),d0
000141DC 3140 0008                  		move.w	d0,8(a0)
000141E0 6100                       		bsr.s	Obj0A_ShowNumber
000141E2 4EBA 9838                  		jsr	SpeedToPos
000141E6 4A28 0001                  		tst.b	1(a0)
000141EA 6A00                       		bpl.s	Obj0A_Delete
000141EC 4EFA 9854                  		jmp	DisplaySprite
000141F0                            ; ===========================================================================
000141F0                            
000141F0                            Obj0A_Delete:
000141F0 4EFA 988C                  		jmp	DeleteObject
000141F4                            ; ===========================================================================
000141F4                            
000141F4                            Obj0A_Display:				; XREF: Obj0A_Index
000141F4 6100                       		bsr.s	Obj0A_ShowNumber
000141F6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000141FC 4EB9 0000 AAF4             		jsr	AnimateSprite
00014202 4EFA 983E                  		jmp	DisplaySprite
00014206                            ; ===========================================================================
00014206                            
00014206                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014206 4EFA 9876                  		jmp	DeleteObject
0001420A                            ; ===========================================================================
0001420A                            
0001420A                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001420A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014210 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014212 5368 0038                  		subq.w	#1,$38(a0)
00014216 6600                       		bne.s	Obj0A_Display2
00014218 117C 000E 0024             		move.b	#$E,$24(a0)
0001421E 5E28 001C                  		addq.b	#7,$1C(a0)
00014222 60D0                       		bra.s	Obj0A_Display
00014224                            ; ===========================================================================
00014224                            
00014224                            Obj0A_Display2:
00014224 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001422A 4EB9 0000 AAF4             		jsr	AnimateSprite
00014230 4A28 0001                  		tst.b	1(a0)
00014234 6A00                       		bpl.s	Obj0A_Delete3
00014236 4EFA 980A                  		jmp	DisplaySprite
0001423A                            ; ===========================================================================
0001423A                            
0001423A                            Obj0A_Delete3:
0001423A 4EFA 9842                  		jmp	DeleteObject
0001423E                            ; ===========================================================================
0001423E                            
0001423E                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001423E 4A68 0038                  		tst.w	$38(a0)
00014242 6700                       		beq.s	locret_13E1A
00014244 5368 0038                  		subq.w	#1,$38(a0)
00014248 6600                       		bne.s	locret_13E1A
0001424A 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014250 6400                       		bcc.s	locret_13E1A
00014252 317C 000F 0038             		move.w	#$F,$38(a0)
00014258 4268 0012                  		clr.w	$12(a0)
0001425C 117C 0080 0001             		move.b	#$80,1(a0)
00014262 3028 0008                  		move.w	8(a0),d0
00014266 9078 F700                  		sub.w	($FFFFF700).w,d0
0001426A 0640 0080                  		addi.w	#$80,d0
0001426E 3140 0008                  		move.w	d0,8(a0)
00014272 3028 000C                  		move.w	$C(a0),d0
00014276 9078 F704                  		sub.w	($FFFFF704).w,d0
0001427A 0640 0080                  		addi.w	#$80,d0
0001427E 3140 000A                  		move.w	d0,$A(a0)
00014282 117C 000C 0024             		move.b	#$C,$24(a0)
00014288                            
00014288                            locret_13E1A:
00014288 4E75                       		rts	
0001428A                            ; ===========================================================================
0001428A                            Obj0A_WobbleData:
0001428A 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001429B 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000142AC 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000142BD 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000142CD FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000142DA FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000142E7 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000142F4 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014301 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001430A                            ; ===========================================================================
0001430A                            
0001430A                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001430A 4A68 002C                  		tst.w	$2C(a0)
0001430E 6600 0000                  		bne.w	loc_13F86
00014312 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014318 6400 0000                  		bcc.w	locret_1408C
0001431C 0838 0006 D022             		btst	#6,($FFFFD022).w
00014322 6700 0000                  		beq.w	locret_1408C
00014326 5368 0038                  		subq.w	#1,$38(a0)
0001432A 6A00 0000                  		bpl.w	loc_13FAC
0001432E 317C 003B 0038             		move.w	#59,$38(a0)
00014334 317C 0001 0036             		move.w	#1,$36(a0)
0001433A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014340 0240 0001                  		andi.w	#1,d0
00014344 1140 0034                  		move.b	d0,$34(a0)
00014348 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001434C 0C40 0019                  		cmpi.w	#$19,d0
00014350 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014352 0C40 0014                  		cmpi.w	#$14,d0
00014356 6700                       		beq.s	Obj0A_WarnSound
00014358 0C40 000F                  		cmpi.w	#$F,d0
0001435C 6700                       		beq.s	Obj0A_WarnSound
0001435E 0C40 000C                  		cmpi.w	#$C,d0
00014362 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014364 6600                       		bne.s	loc_13F02
00014366 303C 0092                  		move.w	#$92,d0
0001436A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
00014370                            
00014370                            loc_13F02:
00014370 5328 0032                  		subq.b	#1,$32(a0)
00014374 6A00                       		bpl.s	Obj0A_ReduceAir
00014376 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001437C 08E8 0007 0036             		bset	#7,$36(a0)
00014382 6000                       		bra.s	Obj0A_ReduceAir
00014384                            ; ===========================================================================
00014384                            
00014384                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014384 303C 00C2                  		move.w	#$C2,d0
00014388 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001438E                            
0001438E                            Obj0A_ReduceAir:
0001438E 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014392 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014396 6100 0000                  		bsr.w	ResumeMusic
0001439A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000143A0 303C 00B2                  		move.w	#$B2,d0
000143A4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
000143AA 117C 000A 0034             		move.b	#$A,$34(a0)
000143B0 317C 0001 0036             		move.w	#1,$36(a0)
000143B6 317C 0078 002C             		move.w	#$78,$2C(a0)
000143BC 2F08                       		move.l	a0,-(sp)
000143BE 41F8 D000                  		lea	($FFFFD000).w,a0
000143C2 6100 F860                  		bsr.w	Sonic_ResetOnFloor
000143C6 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000143CC 08E8 0001 0022             		bset	#1,$22(a0)
000143D2 08E8 0007 0002             		bset	#7,2(a0)
000143D8 317C 0000 0012             		move.w	#0,$12(a0)
000143DE 317C 0000 0010             		move.w	#0,$10(a0)
000143E4 317C 0000 0014             		move.w	#0,$14(a0)
000143EA 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000143F0 205F                       		movea.l	(sp)+,a0
000143F2 4E75                       		rts	
000143F4                            ; ===========================================================================
000143F4                            
000143F4                            loc_13F86:
000143F4 5368 002C                  		subq.w	#1,$2C(a0)
000143F8 6600                       		bne.s	loc_13F94
000143FA 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014400 4E75                       		rts	
00014402                            ; ===========================================================================
00014402                            
00014402                            loc_13F94:
00014402 2F08                       		move.l	a0,-(sp)
00014404 41F8 D000                  		lea	($FFFFD000).w,a0
00014408 4EBA 9612                  		jsr	SpeedToPos
0001440C 0668 0010 0012             		addi.w	#$10,$12(a0)
00014412 205F                       		movea.l	(sp)+,a0
00014414 6000                       		bra.s	loc_13FAC
00014416                            ; ===========================================================================
00014416                            
00014416                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014416 6000                       		bra.s	Obj0A_MakeItem
00014418                            ; ===========================================================================
00014418                            
00014418                            loc_13FAC:
00014418 4A68 0036                  		tst.w	$36(a0)
0001441C 6700 0000                  		beq.w	locret_1408C
00014420 5368 003A                  		subq.w	#1,$3A(a0)
00014424 6A00 0000                  		bpl.w	locret_1408C
00014428                            
00014428                            Obj0A_MakeItem:
00014428 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001442E 0240 000F                  		andi.w	#$F,d0
00014432 3140 003A                  		move.w	d0,$3A(a0)
00014436 4EBA 9A90                  		jsr	SingleObjLoad
0001443A 6600 0000                  		bne.w	locret_1408C
0001443E 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014442 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014448 7006                       		moveq	#6,d0
0001444A 0838 0000 D022             		btst	#0,($FFFFD022).w
00014450 6700                       		beq.s	loc_13FF2
00014452 4440                       		neg.w	d0
00014454 137C 0040 0026             		move.b	#$40,$26(a1)
0001445A                            
0001445A                            loc_13FF2:
0001445A D169 0008                  		add.w	d0,8(a1)
0001445E 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014464 137C 0006 0028             		move.b	#6,$28(a1)
0001446A 4A68 002C                  		tst.w	$2C(a0)
0001446E 6700 0000                  		beq.w	loc_1403E
00014472 0268 0007 003A             		andi.w	#7,$3A(a0)
00014478 0668 0000 003A             		addi.w	#0,$3A(a0)
0001447E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014482 0440 000C                  		subi.w	#$C,d0
00014486 3340 000C                  		move.w	d0,$C(a1)
0001448A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014490 1340 0026                  		move.b	d0,$26(a1)
00014494 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014498 0200 0003                  		andi.b	#3,d0
0001449C 6600                       		bne.s	loc_14082
0001449E 137C 000E 0028             		move.b	#$E,$28(a1)
000144A4 6000                       		bra.s	loc_14082
000144A6                            ; ===========================================================================
000144A6                            
000144A6                            loc_1403E:
000144A6 0828 0007 0036             		btst	#7,$36(a0)
000144AC 6700                       		beq.s	loc_14082
000144AE 3438 FE14                  		move.w	($FFFFFE14).w,d2
000144B2 E24A                       		lsr.w	#1,d2
000144B4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000144BA 0240 0003                  		andi.w	#3,d0
000144BE 6600                       		bne.s	loc_1406A
000144C0 08E8 0006 0036             		bset	#6,$36(a0)
000144C6 6600                       		bne.s	loc_14082
000144C8 1342 0028                  		move.b	d2,$28(a1)
000144CC 337C 001C 0038             		move.w	#$1C,$38(a1)
000144D2                            
000144D2                            loc_1406A:
000144D2 4A28 0034                  		tst.b	$34(a0)
000144D6 6600                       		bne.s	loc_14082
000144D8 08E8 0006 0036             		bset	#6,$36(a0)
000144DE 6600                       		bne.s	loc_14082
000144E0 1342 0028                  		move.b	d2,$28(a1)
000144E4 337C 001C 0038             		move.w	#$1C,$38(a1)
000144EA                            
000144EA                            loc_14082:
000144EA 5328 0034                  		subq.b	#1,$34(a0)
000144EE 6A00                       		bpl.s	locret_1408C
000144F0 4268 0036                  		clr.w	$36(a0)
000144F4                            
000144F4                            locret_1408C:
000144F4 4E75                       		rts	
000144F6                            
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            
000144F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144F6                            
000144F6                            
000144F6                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000144F6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000144FC                             
000144FC                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000144FC                             
000144FC 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014500                             
00014500 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014506 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014508 43F9 0000 3A08             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001450E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014510                             
00014510                            Air_GetBgm2:
00014510 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014516 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014518 43F9 0000 3A10             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001451E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014520                             
00014520                            Air_GetBgm3:
00014520 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014526 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014528 43F9 0000 3A16             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001452E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014530                             
00014530                            Air_GetBgm4:
00014530 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014536 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014538 43F9 0000 3A1C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001453E                             
0001453E                            Air_PlayMusic:
0001453E 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014542                             
00014542                            loc_140A6:
00014542 4EB9 0000 15B6             		jsr	(PlaySound).l
00014548                             
00014548                            ; NineKode ends here
00014548                            
00014548                            loc_140AC:
00014548 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001454E 4238 D372                  		clr.b	($FFFFD372).w
00014552 4E75                       		rts	
00014554                            ; End of function ResumeMusic
00014554                            
00014554                            ; ===========================================================================
00014554                            Ani_obj0A:
00014554                            	include "_anim\obj0A.asm"
00014554                            ; ---------------------------------------------------------------------------
00014554                            ; Animation script - countdown numbers and bubbles (LZ)
00014554                            ; ---------------------------------------------------------------------------
00014554 0000                       		dc.w byte_140D6-Ani_obj0A
00014556 0000                       		dc.w byte_140E0-Ani_obj0A
00014558 0000                       		dc.w byte_140EA-Ani_obj0A
0001455A 0000                       		dc.w byte_140F4-Ani_obj0A
0001455C 0000                       		dc.w byte_140FE-Ani_obj0A
0001455E 0000                       		dc.w byte_14108-Ani_obj0A
00014560 0000                       		dc.w byte_14112-Ani_obj0A
00014562 0000                       		dc.w byte_14118-Ani_obj0A
00014564 0000                       		dc.w byte_14120-Ani_obj0A
00014566 0000                       		dc.w byte_14128-Ani_obj0A
00014568 0000                       		dc.w byte_14130-Ani_obj0A
0001456A 0000                       		dc.w byte_14138-Ani_obj0A
0001456C 0000                       		dc.w byte_14140-Ani_obj0A
0001456E 0000                       		dc.w byte_14148-Ani_obj0A
00014570 0000                       		dc.w byte_1414A-Ani_obj0A
00014572 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001457C 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014586 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014590 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001459A 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000145A4 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000145AE 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000145B4 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000145BC 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000145C4 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000145CC 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000145D4 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000145DC 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000145E4 0EFC                       byte_14148:	dc.b $E, $FC
000145E6 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000145EC                            		even
000145EC                            		even
000145EC                            
000145EC                            ; ---------------------------------------------------------------------------
000145EC                            ; Sprite mappings - drowning countdown numbers (LZ)
000145EC                            ; ---------------------------------------------------------------------------
000145EC                            Map_obj0A:
000145EC                            	include "_maps\obj0A.asm"
000145EC                            ; ---------------------------------------------------------------------------
000145EC                            ; Sprite mappings - drowning countdown numbers (LZ)
000145EC                            ; ---------------------------------------------------------------------------
000145EC 0000                       		dc.w byte_14152-Map_obj0A
000145EE 01                         byte_14152:	dc.b 1
000145EF E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000145F4                            		even
000145F4                            		even
000145F4                            
000145F4                            ; ===========================================================================
000145F4                            ; ---------------------------------------------------------------------------
000145F4                            ; Object 38 - shield and invincibility stars
000145F4                            ; ---------------------------------------------------------------------------
000145F4                            
000145F4                            Obj38:					; XREF: Obj_Index
000145F4 7000                       		moveq	#0,d0
000145F6 1028 0024                  		move.b	$24(a0),d0
000145FA 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000145FE 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014602                            ; ===========================================================================
00014602 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014604 0000                       		dc.w Obj38_Shield-Obj38_Index
00014606 0000                       		dc.w Obj38_Stars-Obj38_Index
00014608                            ; ===========================================================================
00014608                            
00014608                            Obj38_Main:				; XREF: Obj38_Index
00014608 5428 0024                  		addq.b	#2,$24(a0)
0001460C 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014614 117C 0004 0001             		move.b	#4,1(a0)
0001461A 117C 0001 0018             		move.b	#1,$18(a0)
00014620 117C 0010 0019             		move.b	#$10,$19(a0)
00014626 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001462A 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001462C 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014632 4E75                       		rts	
00014634                            ; ===========================================================================
00014634                            
00014634                            Obj38_DoStars:
00014634 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014638 317C 055C 0002             		move.w	#$55C,2(a0)
0001463E 4E75                       		rts	
00014640                            ; ===========================================================================
00014640                            
00014640                            Obj38_Shield:				; XREF: Obj38_Index
00014640 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014644 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014646 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001464A 6700                       		beq.s	Obj38_Delete	; if not, branch
0001464C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014652 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014658 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001465E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014664 4EB9 0000 AAF4             		jsr	AnimateSprite
0001466A 4EFA 93D6                  		jmp	DisplaySprite
0001466E                            ; ===========================================================================
0001466E                            
0001466E                            Obj38_RmvShield:
0001466E 4E75                       		rts	
00014670                            ; ===========================================================================
00014670                            
00014670                            Obj38_Delete:
00014670 4EFA 940C                  		jmp	DeleteObject
00014674                            ; ===========================================================================
00014674                            
00014674                            Obj38_Stars:				; XREF: Obj38_Index
00014674 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014678 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001467A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001467E 1228 001C                  		move.b	$1C(a0),d1
00014682 5301                       		subq.b	#1,d1
00014684 6000                       		bra.s	Obj38_StarTrail
00014686                            ; ===========================================================================
00014686 E909                       		lsl.b	#4,d1
00014688 5801                       		addq.b	#4,d1
0001468A 9001                       		sub.b	d1,d0
0001468C 1228 0030                  		move.b	$30(a0),d1
00014690 9001                       		sub.b	d1,d0
00014692 5801                       		addq.b	#4,d1
00014694 0201 000F                  		andi.b	#$F,d1
00014698 1141 0030                  		move.b	d1,$30(a0)
0001469C 6000                       		bra.s	Obj38_StarTrail2a
0001469E                            ; ===========================================================================
0001469E                            
0001469E                            Obj38_StarTrail:			; XREF: Obj38_Stars
0001469E E709                       		lsl.b	#3,d1
000146A0 1401                       		move.b	d1,d2
000146A2 D201                       		add.b	d1,d1
000146A4 D202                       		add.b	d2,d1
000146A6 5801                       		addq.b	#4,d1
000146A8 9001                       		sub.b	d1,d0
000146AA 1228 0030                  		move.b	$30(a0),d1
000146AE 9001                       		sub.b	d1,d0
000146B0 5801                       		addq.b	#4,d1
000146B2 0C01 0018                  		cmpi.b	#$18,d1
000146B6 6500                       		bcs.s	Obj38_StarTrail2
000146B8 7200                       		moveq	#0,d1
000146BA                            
000146BA                            Obj38_StarTrail2:
000146BA 1141 0030                  		move.b	d1,$30(a0)
000146BE                            
000146BE                            Obj38_StarTrail2a:
000146BE 43F8 CB00                  		lea	($FFFFCB00).w,a1
000146C2 43F1 0000                  		lea	(a1,d0.w),a1
000146C6 3159 0008                  		move.w	(a1)+,8(a0)
000146CA 3159 000C                  		move.w	(a1)+,$C(a0)
000146CE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000146D4 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000146DA 4EB9 0000 AAF4             		jsr	AnimateSprite
000146E0 4EFA 9360                  		jmp	DisplaySprite
000146E4                            ; ===========================================================================
000146E4                            
000146E4                            Obj38_Delete2:				; XREF: Obj38_Stars
000146E4 4EFA 9398                  		jmp	DeleteObject
000146E8                            ; ===========================================================================
000146E8                            ; ---------------------------------------------------------------------------
000146E8                            ; Object 4A - special stage entry from beta
000146E8                            ; ---------------------------------------------------------------------------
000146E8                            
000146E8                            Obj4A:					; XREF: Obj_Index
000146E8 7000                       		moveq	#0,d0
000146EA 1028 0024                  		move.b	$24(a0),d0
000146EE 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000146F2 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000146F6                            ; ===========================================================================
000146F6 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000146F8 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000146FA 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000146FC                            ; ===========================================================================
000146FC                            
000146FC                            Obj4A_Main:				; XREF: Obj4A_Index
000146FC 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014700 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014702 4E75                       		rts	
00014704                            ; ===========================================================================
00014704                            
00014704                            Obj4A_Main2:
00014704 5428 0024                  		addq.b	#2,$24(a0)
00014708 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014710 117C 0004 0001             		move.b	#4,1(a0)
00014716 117C 0001 0018             		move.b	#1,$18(a0)
0001471C 117C 0038 0019             		move.b	#$38,$19(a0)
00014722 317C 0541 0002             		move.w	#$541,2(a0)
00014728 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001472E                            
0001472E                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001472E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014734 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001473A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014740 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014746 4EB9 0000 AAF4             		jsr	AnimateSprite
0001474C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014752 6600                       		bne.s	Obj4A_Display
00014754 4A38 D000                  		tst.b	($FFFFD000).w
00014758 6700                       		beq.s	Obj4A_Display
0001475A 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014760 303C 00A8                  		move.w	#$A8,d0
00014764 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001476A                            
0001476A                            Obj4A_Display:
0001476A 4EFA 92D6                  		jmp	DisplaySprite
0001476E                            ; ===========================================================================
0001476E                            
0001476E                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001476E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014772 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014774 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001477A 4EFA 9302                  		jmp	DeleteObject
0001477E                            ; ===========================================================================
0001477E                            
0001477E                            Obj4A_Wait:
0001477E 4E75                       		rts	
00014780                            ; ===========================================================================
00014780                            ; ---------------------------------------------------------------------------
00014780                            ; Object 08 - water splash (LZ)
00014780                            ; ---------------------------------------------------------------------------
00014780                            
00014780                            Obj08:					; XREF: Obj_Index
00014780 7000                       		moveq	#0,d0
00014782 1028 0024                  		move.b	$24(a0),d0
00014786 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001478A 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001478E                            ; ===========================================================================
0001478E 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014790 0000                       		dc.w Obj08_Display-Obj08_Index
00014792 0000                       		dc.w Obj08_Delete-Obj08_Index
00014794                            ; ===========================================================================
00014794                            
00014794                            Obj08_Main:				; XREF: Obj08_Index
00014794 5428 0024                  		addq.b	#2,$24(a0)
00014798 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000147A0 0028 0004 0001             		ori.b	#4,1(a0)
000147A6 117C 0001 0018             		move.b	#1,$18(a0)
000147AC 117C 0010 0019             		move.b	#$10,$19(a0)
000147B2 317C 4259 0002             		move.w	#$4259,2(a0)
000147B8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000147BE                            
000147BE                            Obj08_Display:				; XREF: Obj08_Index
000147BE 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000147C4 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000147CA 4EB9 0000 AAF4             		jsr	AnimateSprite
000147D0 4EFA 9270                  		jmp	DisplaySprite
000147D4                            ; ===========================================================================
000147D4                            
000147D4                            Obj08_Delete:				; XREF: Obj08_Index
000147D4 4EFA 92A8                  		jmp	DeleteObject	; delete when animation	is complete
000147D8                            ; ===========================================================================
000147D8                            Ani_obj38:
000147D8                            	include "_anim\obj38.asm"
000147D8                            ; ---------------------------------------------------------------------------
000147D8                            ; Animation script - shield and invincibility stars
000147D8                            ; ---------------------------------------------------------------------------
000147D8 0000                       		dc.w byte_14356-Ani_obj38
000147DA 0000                       		dc.w byte_1435E-Ani_obj38
000147DC 0000                       		dc.w byte_14364-Ani_obj38
000147DE 0000                       		dc.w byte_1437E-Ani_obj38
000147E0 0000                       		dc.w byte_14398-Ani_obj38
000147E2 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000147EA 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000147F0 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014801 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001480A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001481B 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014824 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014835 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001483E                            		even
0001483E                            		even
0001483E                            
0001483E                            ; ---------------------------------------------------------------------------
0001483E                            ; Sprite mappings - shield and invincibility stars
0001483E                            ; ---------------------------------------------------------------------------
0001483E                            Map_obj38:
0001483E                            	include "_maps\obj38.asm"
0001483E                            ; ---------------------------------------------------------------------------
0001483E                            ; Sprite mappings - shield and invincibility stars
0001483E                            ; ---------------------------------------------------------------------------
0001483E 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014842 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014846 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001484A 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001484E 04                         byte_143C2:	dc.b 4
0001484F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014854 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014859 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001485E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014863 04                         byte_143D7:	dc.b 4
00014864 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014869 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001486E 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014873 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014878 04                         byte_143EC:	dc.b 4
00014879 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001487E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014883 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014888 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001488D 04                         byte_14401:	dc.b 4
0001488E E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014893 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014898 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001489D 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000148A2 04                         byte_14416:	dc.b 4
000148A3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000148A8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000148AD 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000148B2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000148B7 04                         byte_1442B:	dc.b 4
000148B8 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000148BD E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000148C2 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000148C7 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000148CC 04                         byte_14440:	dc.b 4
000148CD E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000148D2 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000148D7 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000148DC 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000148E2 00                         		even
000148E2 00                         		even
000148E2                            
000148E2                            Ani_obj4A:
000148E2                            	include "_anim\obj4A.asm"
000148E2                            ; ---------------------------------------------------------------------------
000148E2                            ; Animation script - special stage entry effect from beta
000148E2                            ; ---------------------------------------------------------------------------
000148E2 0000                       		dc.w byte_14458-Ani_obj4A
000148E4 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000148F8                            		even
000148F8                            		even
000148F8                            
000148F8                            ; ---------------------------------------------------------------------------
000148F8                            ; Sprite mappings - special stage entry	from beta
000148F8                            ; ---------------------------------------------------------------------------
000148F8                            Map_obj4A:
000148F8                            	include "_maps\obj4A.asm"
000148F8                            ; ---------------------------------------------------------------------------
000148F8                            ; Sprite mappings - special stage entry	from beta
000148F8                            ; ---------------------------------------------------------------------------
000148F8 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000148FC 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014900 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014904 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014908 03                         byte_1447C:	dc.b 3
00014909 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001490E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014913 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014918 03                         byte_1448C:	dc.b 3
00014919 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001491E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014923 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014928 05                         byte_1449C:	dc.b 5
00014929 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001492E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014933 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014938 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001493D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014942 09                         byte_144B6:	dc.b 9
00014943 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014948 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001494D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014952 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014957 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001495C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014961 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014966 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001496B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014970 12                         byte_144E4:	dc.b $12
00014971 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014976 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001497B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014980 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014985 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001498A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001498F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014994 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014999 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001499E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000149A3 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000149A8 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000149AD F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000149B2 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000149B7 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000149BC F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000149C1 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000149C6 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000149CB 11                         byte_1453F:	dc.b $11
000149CC F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000149D1 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000149D6 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000149DB 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000149E0 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000149E5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000149EA 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000149EF F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000149F4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000149F9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000149FE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014A03 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014A08 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014A0D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014A12 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014A17 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014A1C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014A21 09                         byte_14595:	dc.b 9
00014A22 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014A27 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014A2C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014A31 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014A36 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014A3B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014A40 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014A45 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014A4A 04                         		dc.b 4
00014A4B 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014A50                            		even
00014A50                            		even
00014A50                            
00014A50                            Ani_obj08:
00014A50                            	include "_anim\obj08.asm"
00014A50                            ; ---------------------------------------------------------------------------
00014A50                            ; Animation script - water splash (LZ)
00014A50                            ; ---------------------------------------------------------------------------
00014A50 0000                       		dc.w byte_145C6-Ani_obj08
00014A52 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014A58                            		even
00014A58                            		even
00014A58                            
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            ; Sprite mappings - water splash (LZ)
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            Map_obj08:
00014A58                            	include "_maps\obj08.asm"
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            ; Sprite mappings - water splash (LZ)
00014A58                            ; ---------------------------------------------------------------------------
00014A58 0000                       		dc.w byte_145D2-Map_obj08
00014A5A 0000                       		dc.w byte_145DD-Map_obj08
00014A5C 0000                       		dc.w byte_145E8-Map_obj08
00014A5E 02                         byte_145D2:	dc.b 2
00014A5F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014A64 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014A69 02                         byte_145DD:	dc.b 2
00014A6A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014A6F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014A74 01                         byte_145E8:	dc.b 1
00014A75 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014A7A                            		even
00014A7A                            		even
00014A7A                            
00014A7A                            ; ---------------------------------------------------------------------------
00014A7A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014A7A                            ; ---------------------------------------------------------------------------
00014A7A                            
00014A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A7A                            
00014A7A                            
00014A7A                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014A7A 0828 0003 0022             		btst	#3,$22(a0)
00014A80 6700                       		beq.s	loc_14602
00014A82 7000                       		moveq	#0,d0
00014A84 11C0 F768                  		move.b	d0,($FFFFF768).w
00014A88 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014A8C 4E75                       		rts	
00014A8E                            ; ===========================================================================
00014A8E                            
00014A8E                            loc_14602:
00014A8E 7003                       		moveq	#3,d0
00014A90 11C0 F768                  		move.b	d0,($FFFFF768).w
00014A94 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014A98 1028 0026                  		move.b	$26(a0),d0
00014A9C 0600 0020                  		addi.b	#$20,d0
00014AA0 6A00                       		bpl.s	loc_14624
00014AA2 1028 0026                  		move.b	$26(a0),d0
00014AA6 6A00                       		bpl.s	loc_1461E
00014AA8 5300                       		subq.b	#1,d0
00014AAA                            
00014AAA                            loc_1461E:
00014AAA 0600 0020                  		addi.b	#$20,d0
00014AAE 6000                       		bra.s	loc_14630
00014AB0                            ; ===========================================================================
00014AB0                            
00014AB0                            loc_14624:
00014AB0 1028 0026                  		move.b	$26(a0),d0
00014AB4 6A00                       		bpl.s	loc_1462C
00014AB6 5200                       		addq.b	#1,d0
00014AB8                            
00014AB8                            loc_1462C:
00014AB8 0600 001F                  		addi.b	#$1F,d0
00014ABC                            
00014ABC                            loc_14630:
00014ABC 0200 00C0                  		andi.b	#$C0,d0
00014AC0 0C00 0040                  		cmpi.b	#$40,d0
00014AC4 6700 0000                  		beq.w	Sonic_WalkVertL
00014AC8 0C00 0080                  		cmpi.b	#$80,d0
00014ACC 6700 0000                  		beq.w	Sonic_WalkCeiling
00014AD0 0C00 00C0                  		cmpi.b	#$C0,d0
00014AD4 6700 0000                  		beq.w	Sonic_WalkVertR
00014AD8 3428 000C                  		move.w	$C(a0),d2
00014ADC 3628 0008                  		move.w	8(a0),d3
00014AE0 7000                       		moveq	#0,d0
00014AE2 1028 0016                  		move.b	$16(a0),d0
00014AE6 4880                       		ext.w	d0
00014AE8 D440                       		add.w	d0,d2
00014AEA 1028 0017                  		move.b	$17(a0),d0
00014AEE 4880                       		ext.w	d0
00014AF0 D640                       		add.w	d0,d3
00014AF2 49F8 F768                  		lea	($FFFFF768).w,a4
00014AF6 367C 0010                  		movea.w	#$10,a3
00014AFA 3C3C 0000                  		move.w	#0,d6
00014AFE 7A0D                       		moveq	#$D,d5
00014B00 6100 0000                  		bsr.w	FindFloor
00014B04 3F01                       		move.w	d1,-(sp)
00014B06 3428 000C                  		move.w	$C(a0),d2
00014B0A 3628 0008                  		move.w	8(a0),d3
00014B0E 7000                       		moveq	#0,d0
00014B10 1028 0016                  		move.b	$16(a0),d0
00014B14 4880                       		ext.w	d0
00014B16 D440                       		add.w	d0,d2
00014B18 1028 0017                  		move.b	$17(a0),d0
00014B1C 4880                       		ext.w	d0
00014B1E 4440                       		neg.w	d0
00014B20 D640                       		add.w	d0,d3
00014B22 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014B26 367C 0010                  		movea.w	#$10,a3
00014B2A 3C3C 0000                  		move.w	#0,d6
00014B2E 7A0D                       		moveq	#$D,d5
00014B30 6100 0000                  		bsr.w	FindFloor
00014B34 301F                       		move.w	(sp)+,d0
00014B36 6100 0000                  		bsr.w	Sonic_Angle
00014B3A 4A41                       		tst.w	d1
00014B3C 6700                       		beq.s	locret_146BE
00014B3E 6A00                       		bpl.s	loc_146C0
00014B40 0C41 FFF2                  		cmpi.w	#-$E,d1
00014B44 6D00                       		blt.s	locret_146E6
00014B46 D368 000C                  		add.w	d1,$C(a0)
00014B4A                            
00014B4A                            locret_146BE:
00014B4A 4E75                       		rts	
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            loc_146C0:
00014B4C 0C41 000E                  		cmpi.w	#$E,d1
00014B50 6E00                       		bgt.s	loc_146CC
00014B52                            
00014B52                            loc_146C6:
00014B52 D368 000C                  		add.w	d1,$C(a0)
00014B56 4E75                       		rts	
00014B58                            ; ===========================================================================
00014B58                            
00014B58                            loc_146CC:
00014B58 4A28 0038                  		tst.b	$38(a0)
00014B5C 66F4                       		bne.s	loc_146C6
00014B5E 08E8 0001 0022             		bset	#1,$22(a0)
00014B64 08A8 0005 0022             		bclr	#5,$22(a0)
00014B6A 117C 0001 001D             		move.b	#1,$1D(a0)
00014B70 4E75                       		rts	
00014B72                            ; ===========================================================================
00014B72                            
00014B72                            locret_146E6:
00014B72 4E75                       		rts	
00014B74                            ; End of function Sonic_AnglePos
00014B74                            
00014B74                            ; ===========================================================================
00014B74 2428 0008                  		move.l	8(a0),d2
00014B78 3028 0010                  		move.w	$10(a0),d0
00014B7C 48C0                       		ext.l	d0
00014B7E E180                       		asl.l	#8,d0
00014B80 9480                       		sub.l	d0,d2
00014B82 2142 0008                  		move.l	d2,8(a0)
00014B86 303C 0038                  		move.w	#$38,d0
00014B8A 48C0                       		ext.l	d0
00014B8C E180                       		asl.l	#8,d0
00014B8E 9680                       		sub.l	d0,d3
00014B90 2143 000C                  		move.l	d3,$C(a0)
00014B94 4E75                       		rts	
00014B96                            ; ===========================================================================
00014B96                            
00014B96                            locret_1470A:
00014B96 4E75                       		rts	
00014B98                            ; ===========================================================================
00014B98 2628 000C                  		move.l	$C(a0),d3
00014B9C 3028 0012                  		move.w	$12(a0),d0
00014BA0 0440 0038                  		subi.w	#$38,d0
00014BA4 3140 0012                  		move.w	d0,$12(a0)
00014BA8 48C0                       		ext.l	d0
00014BAA E180                       		asl.l	#8,d0
00014BAC 9680                       		sub.l	d0,d3
00014BAE 2143 000C                  		move.l	d3,$C(a0)
00014BB2 4E75                       		rts	
00014BB4 4E75                       		rts	
00014BB6                            ; ===========================================================================
00014BB6 2428 0008                  		move.l	8(a0),d2
00014BBA 2628 000C                  		move.l	$C(a0),d3
00014BBE 3028 0010                  		move.w	$10(a0),d0
00014BC2 48C0                       		ext.l	d0
00014BC4 E180                       		asl.l	#8,d0
00014BC6 9480                       		sub.l	d0,d2
00014BC8 3028 0012                  		move.w	$12(a0),d0
00014BCC 48C0                       		ext.l	d0
00014BCE E180                       		asl.l	#8,d0
00014BD0 9680                       		sub.l	d0,d3
00014BD2 2142 0008                  		move.l	d2,8(a0)
00014BD6 2143 000C                  		move.l	d3,$C(a0)
00014BDA 4E75                       		rts	
00014BDC                            
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            
00014BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BDC                            
00014BDC                            
00014BDC                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014BDC 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014BE0 B240                       		cmp.w	d0,d1
00014BE2 6F00                       		ble.s	loc_1475E
00014BE4 1438 F768                  		move.b	($FFFFF768).w,d2
00014BE8 3200                       		move.w	d0,d1
00014BEA                            
00014BEA                            loc_1475E:
00014BEA 0802 0000                  		btst	#0,d2
00014BEE 6600                       		bne.s	loc_1476A
00014BF0 1142 0026                  		move.b	d2,$26(a0)
00014BF4 4E75                       		rts	
00014BF6                            ; ===========================================================================
00014BF6                            
00014BF6                            loc_1476A:
00014BF6 1428 0026                  		move.b	$26(a0),d2
00014BFA 0602 0020                  		addi.b	#$20,d2
00014BFE 0202 00C0                  		andi.b	#$C0,d2
00014C02 1142 0026                  		move.b	d2,$26(a0)
00014C06 4E75                       		rts	
00014C08                            ; End of function Sonic_Angle
00014C08                            
00014C08                            ; ---------------------------------------------------------------------------
00014C08                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014C08                            ; ---------------------------------------------------------------------------
00014C08                            
00014C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C08                            
00014C08                            
00014C08                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014C08 3428 000C                  		move.w	$C(a0),d2
00014C0C 3628 0008                  		move.w	8(a0),d3
00014C10 7000                       		moveq	#0,d0
00014C12 1028 0017                  		move.b	$17(a0),d0
00014C16 4880                       		ext.w	d0
00014C18 4440                       		neg.w	d0
00014C1A D440                       		add.w	d0,d2
00014C1C 1028 0016                  		move.b	$16(a0),d0
00014C20 4880                       		ext.w	d0
00014C22 D640                       		add.w	d0,d3
00014C24 49F8 F768                  		lea	($FFFFF768).w,a4
00014C28 367C 0010                  		movea.w	#$10,a3
00014C2C 3C3C 0000                  		move.w	#0,d6
00014C30 7A0D                       		moveq	#$D,d5
00014C32 6100 0000                  		bsr.w	FindWall
00014C36 3F01                       		move.w	d1,-(sp)
00014C38 3428 000C                  		move.w	$C(a0),d2
00014C3C 3628 0008                  		move.w	8(a0),d3
00014C40 7000                       		moveq	#0,d0
00014C42 1028 0017                  		move.b	$17(a0),d0
00014C46 4880                       		ext.w	d0
00014C48 D440                       		add.w	d0,d2
00014C4A 1028 0016                  		move.b	$16(a0),d0
00014C4E 4880                       		ext.w	d0
00014C50 D640                       		add.w	d0,d3
00014C52 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C56 367C 0010                  		movea.w	#$10,a3
00014C5A 3C3C 0000                  		move.w	#0,d6
00014C5E 7A0D                       		moveq	#$D,d5
00014C60 6100 0000                  		bsr.w	FindWall
00014C64 301F                       		move.w	(sp)+,d0
00014C66 6100 FF74                  		bsr.w	Sonic_Angle
00014C6A 4A41                       		tst.w	d1
00014C6C 6700                       		beq.s	locret_147F0
00014C6E 6A00                       		bpl.s	loc_147F2
00014C70 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C74 6D00 FF20                  		blt.w	locret_1470A
00014C78 D368 0008                  		add.w	d1,8(a0)
00014C7C                            
00014C7C                            locret_147F0:
00014C7C 4E75                       		rts	
00014C7E                            ; ===========================================================================
00014C7E                            
00014C7E                            loc_147F2:
00014C7E 0C41 000E                  		cmpi.w	#$E,d1
00014C82 6E00                       		bgt.s	loc_147FE
00014C84                            
00014C84                            loc_147F8:
00014C84 D368 0008                  		add.w	d1,8(a0)
00014C88 4E75                       		rts	
00014C8A                            ; ===========================================================================
00014C8A                            
00014C8A                            loc_147FE:
00014C8A 4A28 0038                  		tst.b	$38(a0)
00014C8E 66F4                       		bne.s	loc_147F8
00014C90 08E8 0001 0022             		bset	#1,$22(a0)
00014C96 08A8 0005 0022             		bclr	#5,$22(a0)
00014C9C 117C 0001 001D             		move.b	#1,$1D(a0)
00014CA2 4E75                       		rts	
00014CA4                            ; End of function Sonic_WalkVertR
00014CA4                            
00014CA4                            ; ---------------------------------------------------------------------------
00014CA4                            ; Subroutine allowing Sonic to walk upside-down
00014CA4                            ; ---------------------------------------------------------------------------
00014CA4                            
00014CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CA4                            
00014CA4                            
00014CA4                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014CA4 3428 000C                  		move.w	$C(a0),d2
00014CA8 3628 0008                  		move.w	8(a0),d3
00014CAC 7000                       		moveq	#0,d0
00014CAE 1028 0016                  		move.b	$16(a0),d0
00014CB2 4880                       		ext.w	d0
00014CB4 9440                       		sub.w	d0,d2
00014CB6 0A42 000F                  		eori.w	#$F,d2
00014CBA 1028 0017                  		move.b	$17(a0),d0
00014CBE 4880                       		ext.w	d0
00014CC0 D640                       		add.w	d0,d3
00014CC2 49F8 F768                  		lea	($FFFFF768).w,a4
00014CC6 367C FFF0                  		movea.w	#-$10,a3
00014CCA 3C3C 1000                  		move.w	#$1000,d6
00014CCE 7A0D                       		moveq	#$D,d5
00014CD0 6100 0000                  		bsr.w	FindFloor
00014CD4 3F01                       		move.w	d1,-(sp)
00014CD6 3428 000C                  		move.w	$C(a0),d2
00014CDA 3628 0008                  		move.w	8(a0),d3
00014CDE 7000                       		moveq	#0,d0
00014CE0 1028 0016                  		move.b	$16(a0),d0
00014CE4 4880                       		ext.w	d0
00014CE6 9440                       		sub.w	d0,d2
00014CE8 0A42 000F                  		eori.w	#$F,d2
00014CEC 1028 0017                  		move.b	$17(a0),d0
00014CF0 4880                       		ext.w	d0
00014CF2 9640                       		sub.w	d0,d3
00014CF4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CF8 367C FFF0                  		movea.w	#-$10,a3
00014CFC 3C3C 1000                  		move.w	#$1000,d6
00014D00 7A0D                       		moveq	#$D,d5
00014D02 6100 0000                  		bsr.w	FindFloor
00014D06 301F                       		move.w	(sp)+,d0
00014D08 6100 FED2                  		bsr.w	Sonic_Angle
00014D0C 4A41                       		tst.w	d1
00014D0E 6700                       		beq.s	locret_14892
00014D10 6A00                       		bpl.s	loc_14894
00014D12 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D16 6D00 FE5A                  		blt.w	locret_146E6
00014D1A 9368 000C                  		sub.w	d1,$C(a0)
00014D1E                            
00014D1E                            locret_14892:
00014D1E 4E75                       		rts	
00014D20                            ; ===========================================================================
00014D20                            
00014D20                            loc_14894:
00014D20 0C41 000E                  		cmpi.w	#$E,d1
00014D24 6E00                       		bgt.s	loc_148A0
00014D26                            
00014D26                            loc_1489A:
00014D26 9368 000C                  		sub.w	d1,$C(a0)
00014D2A 4E75                       		rts	
00014D2C                            ; ===========================================================================
00014D2C                            
00014D2C                            loc_148A0:
00014D2C 4A28 0038                  		tst.b	$38(a0)
00014D30 66F4                       		bne.s	loc_1489A
00014D32 08E8 0001 0022             		bset	#1,$22(a0)
00014D38 08A8 0005 0022             		bclr	#5,$22(a0)
00014D3E 117C 0001 001D             		move.b	#1,$1D(a0)
00014D44 4E75                       		rts	
00014D46                            ; End of function Sonic_WalkCeiling
00014D46                            
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            
00014D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D46                            
00014D46                            
00014D46                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014D46 3428 000C                  		move.w	$C(a0),d2
00014D4A 3628 0008                  		move.w	8(a0),d3
00014D4E 7000                       		moveq	#0,d0
00014D50 1028 0017                  		move.b	$17(a0),d0
00014D54 4880                       		ext.w	d0
00014D56 9440                       		sub.w	d0,d2
00014D58 1028 0016                  		move.b	$16(a0),d0
00014D5C 4880                       		ext.w	d0
00014D5E 9640                       		sub.w	d0,d3
00014D60 0A43 000F                  		eori.w	#$F,d3
00014D64 49F8 F768                  		lea	($FFFFF768).w,a4
00014D68 367C FFF0                  		movea.w	#-$10,a3
00014D6C 3C3C 0800                  		move.w	#$800,d6
00014D70 7A0D                       		moveq	#$D,d5
00014D72 6100 0000                  		bsr.w	FindWall
00014D76 3F01                       		move.w	d1,-(sp)
00014D78 3428 000C                  		move.w	$C(a0),d2
00014D7C 3628 0008                  		move.w	8(a0),d3
00014D80 7000                       		moveq	#0,d0
00014D82 1028 0017                  		move.b	$17(a0),d0
00014D86 4880                       		ext.w	d0
00014D88 D440                       		add.w	d0,d2
00014D8A 1028 0016                  		move.b	$16(a0),d0
00014D8E 4880                       		ext.w	d0
00014D90 9640                       		sub.w	d0,d3
00014D92 0A43 000F                  		eori.w	#$F,d3
00014D96 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D9A 367C FFF0                  		movea.w	#-$10,a3
00014D9E 3C3C 0800                  		move.w	#$800,d6
00014DA2 7A0D                       		moveq	#$D,d5
00014DA4 6100 0000                  		bsr.w	FindWall
00014DA8 301F                       		move.w	(sp)+,d0
00014DAA 6100 FE30                  		bsr.w	Sonic_Angle
00014DAE 4A41                       		tst.w	d1
00014DB0 6700                       		beq.s	locret_14934
00014DB2 6A00                       		bpl.s	loc_14936
00014DB4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DB8 6D00 FDDC                  		blt.w	locret_1470A
00014DBC 9368 0008                  		sub.w	d1,8(a0)
00014DC0                            
00014DC0                            locret_14934:
00014DC0 4E75                       		rts	
00014DC2                            ; ===========================================================================
00014DC2                            
00014DC2                            loc_14936:
00014DC2 0C41 000E                  		cmpi.w	#$E,d1
00014DC6 6E00                       		bgt.s	loc_14942
00014DC8                            
00014DC8                            loc_1493C:
00014DC8 9368 0008                  		sub.w	d1,8(a0)
00014DCC 4E75                       		rts	
00014DCE                            ; ===========================================================================
00014DCE                            
00014DCE                            loc_14942:
00014DCE 4A28 0038                  		tst.b	$38(a0)
00014DD2 66F4                       		bne.s	loc_1493C
00014DD4 08E8 0001 0022             		bset	#1,$22(a0)
00014DDA 08A8 0005 0022             		bclr	#5,$22(a0)
00014DE0 117C 0001 001D             		move.b	#1,$1D(a0)
00014DE6 4E75                       		rts	
00014DE8                            ; End of function Sonic_WalkVertL
00014DE8                            
00014DE8                            ; ---------------------------------------------------------------------------
00014DE8                            ; Subroutine to	find which tile	the object is standing on
00014DE8                            ; ---------------------------------------------------------------------------
00014DE8                            
00014DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DE8                            
00014DE8                            
00014DE8                            Floor_ChkTile:				; XREF: FindFloor; et al
00014DE8 3002                       		move.w	d2,d0
00014DEA E248                       		lsr.w	#1,d0
00014DEC 0240 0380                  		andi.w	#$380,d0
00014DF0 3203                       		move.w	d3,d1
00014DF2 E049                       		lsr.w	#8,d1
00014DF4 0241 007F                  		andi.w	#$7F,d1
00014DF8 D041                       		add.w	d1,d0
00014DFA 72FF                       		moveq	#-1,d1
00014DFC 43F8 A400                  		lea	($FFFFA400).w,a1
00014E00 1231 0000                  		move.b	(a1,d0.w),d1
00014E04 6700                       		beq.s	loc_14996
00014E06 6B00                       		bmi.s	loc_1499A
00014E08 5301                       		subq.b	#1,d1
00014E0A 4881                       		ext.w	d1
00014E0C EE59                       		ror.w	#7,d1
00014E0E 3002                       		move.w	d2,d0
00014E10 D040                       		add.w	d0,d0
00014E12 0240 01E0                  		andi.w	#$1E0,d0
00014E16 D240                       		add.w	d0,d1
00014E18 3003                       		move.w	d3,d0
00014E1A E648                       		lsr.w	#3,d0
00014E1C 0240 001E                  		andi.w	#$1E,d0
00014E20 D240                       		add.w	d0,d1
00014E22                            
00014E22                            loc_14996:
00014E22 2241                       		movea.l	d1,a1
00014E24 4E75                       		rts	
00014E26                            ; ===========================================================================
00014E26                            
00014E26                            loc_1499A:
00014E26 0241 007F                  		andi.w	#$7F,d1
00014E2A 0828 0006 0001             		btst	#6,1(a0)
00014E30 6700                       		beq.s	loc_149B2
00014E32 5241                       		addq.w	#1,d1
00014E34 0C41 0029                  		cmpi.w	#$29,d1
00014E38 6600                       		bne.s	loc_149B2
00014E3A 323C 0051                  		move.w	#$51,d1
00014E3E                            
00014E3E                            loc_149B2:
00014E3E 5301                       		subq.b	#1,d1
00014E40 EE59                       		ror.w	#7,d1
00014E42 3002                       		move.w	d2,d0
00014E44 D040                       		add.w	d0,d0
00014E46 0240 01E0                  		andi.w	#$1E0,d0
00014E4A D240                       		add.w	d0,d1
00014E4C 3003                       		move.w	d3,d0
00014E4E E648                       		lsr.w	#3,d0
00014E50 0240 001E                  		andi.w	#$1E,d0
00014E54 D240                       		add.w	d0,d1
00014E56 2241                       		movea.l	d1,a1
00014E58 4E75                       		rts	
00014E5A                            ; End of function Floor_ChkTile
00014E5A                            
00014E5A                            
00014E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E5A                            
00014E5A                            
00014E5A                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014E5A 618C                       		bsr.s	Floor_ChkTile
00014E5C 3011                       		move.w	(a1),d0
00014E5E 3800                       		move.w	d0,d4
00014E60 0240 07FF                  		andi.w	#$7FF,d0
00014E64 6700                       		beq.s	loc_149DE
00014E66 0B04                       		btst	d5,d4
00014E68 6600                       		bne.s	loc_149EC
00014E6A                            
00014E6A                            loc_149DE:
00014E6A D44B                       		add.w	a3,d2
00014E6C 6100 0000                  		bsr.w	FindFloor2
00014E70 944B                       		sub.w	a3,d2
00014E72 0641 0010                  		addi.w	#$10,d1
00014E76 4E75                       		rts	
00014E78                            ; ===========================================================================
00014E78                            
00014E78                            loc_149EC:
00014E78 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014E7C 1032 0000                  		move.b	(a2,d0.w),d0
00014E80 0240 00FF                  		andi.w	#$FF,d0
00014E84 67E4                       		beq.s	loc_149DE
00014E86 45F9 0000 0000             		lea	(AngleMap).l,a2
00014E8C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014E90 E948                       		lsl.w	#4,d0
00014E92 3203                       		move.w	d3,d1
00014E94 0804 000B                  		btst	#$B,d4
00014E98 6700                       		beq.s	loc_14A12
00014E9A 4641                       		not.w	d1
00014E9C 4414                       		neg.b	(a4)
00014E9E                            
00014E9E                            loc_14A12:
00014E9E 0804 000C                  		btst	#$C,d4
00014EA2 6700                       		beq.s	loc_14A22
00014EA4 0614 0040                  		addi.b	#$40,(a4)
00014EA8 4414                       		neg.b	(a4)
00014EAA 0414 0040                  		subi.b	#$40,(a4)
00014EAE                            
00014EAE                            loc_14A22:
00014EAE 0241 000F                  		andi.w	#$F,d1
00014EB2 D240                       		add.w	d0,d1
00014EB4 45F9 0000 0000             		lea	(CollArray1).l,a2
00014EBA 1032 1000                  		move.b	(a2,d1.w),d0
00014EBE 4880                       		ext.w	d0
00014EC0 BD44                       		eor.w	d6,d4
00014EC2 0804 000C                  		btst	#$C,d4
00014EC6 6700                       		beq.s	loc_14A3E
00014EC8 4440                       		neg.w	d0
00014ECA                            
00014ECA                            loc_14A3E:
00014ECA 4A40                       		tst.w	d0
00014ECC 679C                       		beq.s	loc_149DE
00014ECE 6B00                       		bmi.s	loc_14A5A
00014ED0 0C00 0010                  		cmpi.b	#$10,d0
00014ED4 6700                       		beq.s	loc_14A66
00014ED6 3202                       		move.w	d2,d1
00014ED8 0241 000F                  		andi.w	#$F,d1
00014EDC D041                       		add.w	d1,d0
00014EDE 323C 000F                  		move.w	#$F,d1
00014EE2 9240                       		sub.w	d0,d1
00014EE4 4E75                       		rts	
00014EE6                            ; ===========================================================================
00014EE6                            
00014EE6                            loc_14A5A:
00014EE6 3202                       		move.w	d2,d1
00014EE8 0241 000F                  		andi.w	#$F,d1
00014EEC D041                       		add.w	d1,d0
00014EEE 6A00 FF7A                  		bpl.w	loc_149DE
00014EF2                            
00014EF2                            loc_14A66:
00014EF2 944B                       		sub.w	a3,d2
00014EF4 6100 0000                  		bsr.w	FindFloor2
00014EF8 D44B                       		add.w	a3,d2
00014EFA 0441 0010                  		subi.w	#$10,d1
00014EFE 4E75                       		rts	
00014F00                            ; End of function FindFloor
00014F00                            
00014F00                            
00014F00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F00                            
00014F00                            
00014F00                            FindFloor2:				; XREF: FindFloor
00014F00 6100 FEE6                  		bsr.w	Floor_ChkTile
00014F04 3011                       		move.w	(a1),d0
00014F06 3800                       		move.w	d0,d4
00014F08 0240 07FF                  		andi.w	#$7FF,d0
00014F0C 6700                       		beq.s	loc_14A86
00014F0E 0B04                       		btst	d5,d4
00014F10 6600                       		bne.s	loc_14A94
00014F12                            
00014F12                            loc_14A86:
00014F12 323C 000F                  		move.w	#$F,d1
00014F16 3002                       		move.w	d2,d0
00014F18 0240 000F                  		andi.w	#$F,d0
00014F1C 9240                       		sub.w	d0,d1
00014F1E 4E75                       		rts	
00014F20                            ; ===========================================================================
00014F20                            
00014F20                            loc_14A94:
00014F20 2478 F796                  		movea.l	($FFFFF796).w,a2
00014F24 1032 0000                  		move.b	(a2,d0.w),d0
00014F28 0240 00FF                  		andi.w	#$FF,d0
00014F2C 67E4                       		beq.s	loc_14A86
00014F2E 45F9 0000 0000             		lea	(AngleMap).l,a2
00014F34 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014F38 E948                       		lsl.w	#4,d0
00014F3A 3203                       		move.w	d3,d1
00014F3C 0804 000B                  		btst	#$B,d4
00014F40 6700                       		beq.s	loc_14ABA
00014F42 4641                       		not.w	d1
00014F44 4414                       		neg.b	(a4)
00014F46                            
00014F46                            loc_14ABA:
00014F46 0804 000C                  		btst	#$C,d4
00014F4A 6700                       		beq.s	loc_14ACA
00014F4C 0614 0040                  		addi.b	#$40,(a4)
00014F50 4414                       		neg.b	(a4)
00014F52 0414 0040                  		subi.b	#$40,(a4)
00014F56                            
00014F56                            loc_14ACA:
00014F56 0241 000F                  		andi.w	#$F,d1
00014F5A D240                       		add.w	d0,d1
00014F5C 45F9 0000 0000             		lea	(CollArray1).l,a2
00014F62 1032 1000                  		move.b	(a2,d1.w),d0
00014F66 4880                       		ext.w	d0
00014F68 BD44                       		eor.w	d6,d4
00014F6A 0804 000C                  		btst	#$C,d4
00014F6E 6700                       		beq.s	loc_14AE6
00014F70 4440                       		neg.w	d0
00014F72                            
00014F72                            loc_14AE6:
00014F72 4A40                       		tst.w	d0
00014F74 679C                       		beq.s	loc_14A86
00014F76 6B00                       		bmi.s	loc_14AFC
00014F78 3202                       		move.w	d2,d1
00014F7A 0241 000F                  		andi.w	#$F,d1
00014F7E D041                       		add.w	d1,d0
00014F80 323C 000F                  		move.w	#$F,d1
00014F84 9240                       		sub.w	d0,d1
00014F86 4E75                       		rts	
00014F88                            ; ===========================================================================
00014F88                            
00014F88                            loc_14AFC:
00014F88 3202                       		move.w	d2,d1
00014F8A 0241 000F                  		andi.w	#$F,d1
00014F8E D041                       		add.w	d1,d0
00014F90 6A00 FF80                  		bpl.w	loc_14A86
00014F94 4641                       		not.w	d1
00014F96 4E75                       		rts	
00014F98                            ; End of function FindFloor2
00014F98                            
00014F98                            
00014F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F98                            
00014F98                            
00014F98                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014F98 6100 FE4E                  		bsr.w	Floor_ChkTile
00014F9C 3011                       		move.w	(a1),d0
00014F9E 3800                       		move.w	d0,d4
00014FA0 0240 07FF                  		andi.w	#$7FF,d0
00014FA4 6700                       		beq.s	loc_14B1E
00014FA6 0B04                       		btst	d5,d4
00014FA8 6600                       		bne.s	loc_14B2C
00014FAA                            
00014FAA                            loc_14B1E:
00014FAA D64B                       		add.w	a3,d3
00014FAC 6100 0000                  		bsr.w	FindWall2
00014FB0 964B                       		sub.w	a3,d3
00014FB2 0641 0010                  		addi.w	#$10,d1
00014FB6 4E75                       		rts	
00014FB8                            ; ===========================================================================
00014FB8                            
00014FB8                            loc_14B2C:
00014FB8 2478 F796                  		movea.l	($FFFFF796).w,a2
00014FBC 1032 0000                  		move.b	(a2,d0.w),d0
00014FC0 0240 00FF                  		andi.w	#$FF,d0
00014FC4 67E4                       		beq.s	loc_14B1E
00014FC6 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FCC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FD0 E948                       		lsl.w	#4,d0
00014FD2 3202                       		move.w	d2,d1
00014FD4 0804 000C                  		btst	#$C,d4
00014FD8 6700                       		beq.s	loc_14B5A
00014FDA 4641                       		not.w	d1
00014FDC 0614 0040                  		addi.b	#$40,(a4)
00014FE0 4414                       		neg.b	(a4)
00014FE2 0414 0040                  		subi.b	#$40,(a4)
00014FE6                            
00014FE6                            loc_14B5A:
00014FE6 0804 000B                  		btst	#$B,d4
00014FEA 6700                       		beq.s	loc_14B62
00014FEC 4414                       		neg.b	(a4)
00014FEE                            
00014FEE                            loc_14B62:
00014FEE 0241 000F                  		andi.w	#$F,d1
00014FF2 D240                       		add.w	d0,d1
00014FF4 45F9 0000 0000             		lea	(CollArray2).l,a2
00014FFA 1032 1000                  		move.b	(a2,d1.w),d0
00014FFE 4880                       		ext.w	d0
00015000 BD44                       		eor.w	d6,d4
00015002 0804 000B                  		btst	#$B,d4
00015006 6700                       		beq.s	loc_14B7E
00015008 4440                       		neg.w	d0
0001500A                            
0001500A                            loc_14B7E:
0001500A 4A40                       		tst.w	d0
0001500C 679C                       		beq.s	loc_14B1E
0001500E 6B00                       		bmi.s	loc_14B9A
00015010 0C00 0010                  		cmpi.b	#$10,d0
00015014 6700                       		beq.s	loc_14BA6
00015016 3203                       		move.w	d3,d1
00015018 0241 000F                  		andi.w	#$F,d1
0001501C D041                       		add.w	d1,d0
0001501E 323C 000F                  		move.w	#$F,d1
00015022 9240                       		sub.w	d0,d1
00015024 4E75                       		rts	
00015026                            ; ===========================================================================
00015026                            
00015026                            loc_14B9A:
00015026 3203                       		move.w	d3,d1
00015028 0241 000F                  		andi.w	#$F,d1
0001502C D041                       		add.w	d1,d0
0001502E 6A00 FF7A                  		bpl.w	loc_14B1E
00015032                            
00015032                            loc_14BA6:
00015032 964B                       		sub.w	a3,d3
00015034 6100 0000                  		bsr.w	FindWall2
00015038 D64B                       		add.w	a3,d3
0001503A 0441 0010                  		subi.w	#$10,d1
0001503E 4E75                       		rts	
00015040                            ; End of function FindWall
00015040                            
00015040                            
00015040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015040                            
00015040                            
00015040                            FindWall2:				; XREF: FindWall
00015040 6100 FDA6                  		bsr.w	Floor_ChkTile
00015044 3011                       		move.w	(a1),d0
00015046 3800                       		move.w	d0,d4
00015048 0240 07FF                  		andi.w	#$7FF,d0
0001504C 6700                       		beq.s	loc_14BC6
0001504E 0B04                       		btst	d5,d4
00015050 6600                       		bne.s	loc_14BD4
00015052                            
00015052                            loc_14BC6:
00015052 323C 000F                  		move.w	#$F,d1
00015056 3003                       		move.w	d3,d0
00015058 0240 000F                  		andi.w	#$F,d0
0001505C 9240                       		sub.w	d0,d1
0001505E 4E75                       		rts	
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_14BD4:
00015060 2478 F796                  		movea.l	($FFFFF796).w,a2
00015064 1032 0000                  		move.b	(a2,d0.w),d0
00015068 0240 00FF                  		andi.w	#$FF,d0
0001506C 67E4                       		beq.s	loc_14BC6
0001506E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015074 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015078 E948                       		lsl.w	#4,d0
0001507A 3202                       		move.w	d2,d1
0001507C 0804 000C                  		btst	#$C,d4
00015080 6700                       		beq.s	loc_14C02
00015082 4641                       		not.w	d1
00015084 0614 0040                  		addi.b	#$40,(a4)
00015088 4414                       		neg.b	(a4)
0001508A 0414 0040                  		subi.b	#$40,(a4)
0001508E                            
0001508E                            loc_14C02:
0001508E 0804 000B                  		btst	#$B,d4
00015092 6700                       		beq.s	loc_14C0A
00015094 4414                       		neg.b	(a4)
00015096                            
00015096                            loc_14C0A:
00015096 0241 000F                  		andi.w	#$F,d1
0001509A D240                       		add.w	d0,d1
0001509C 45F9 0000 0000             		lea	(CollArray2).l,a2
000150A2 1032 1000                  		move.b	(a2,d1.w),d0
000150A6 4880                       		ext.w	d0
000150A8 BD44                       		eor.w	d6,d4
000150AA 0804 000B                  		btst	#$B,d4
000150AE 6700                       		beq.s	loc_14C26
000150B0 4440                       		neg.w	d0
000150B2                            
000150B2                            loc_14C26:
000150B2 4A40                       		tst.w	d0
000150B4 679C                       		beq.s	loc_14BC6
000150B6 6B00                       		bmi.s	loc_14C3C
000150B8 3203                       		move.w	d3,d1
000150BA 0241 000F                  		andi.w	#$F,d1
000150BE D041                       		add.w	d1,d0
000150C0 323C 000F                  		move.w	#$F,d1
000150C4 9240                       		sub.w	d0,d1
000150C6 4E75                       		rts	
000150C8                            ; ===========================================================================
000150C8                            
000150C8                            loc_14C3C:
000150C8 3203                       		move.w	d3,d1
000150CA 0241 000F                  		andi.w	#$F,d1
000150CE D041                       		add.w	d1,d0
000150D0 6A00 FF80                  		bpl.w	loc_14BC6
000150D4 4641                       		not.w	d1
000150D6 4E75                       		rts	
000150D8                            ; End of function FindWall2
000150D8                            
000150D8                            ; ---------------------------------------------------------------------------
000150D8                            ; Unused floor/wall subroutine - logs something	to do with collision
000150D8                            ; ---------------------------------------------------------------------------
000150D8                            
000150D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D8                            
000150D8                            
000150D8                            FloorLog_Unk:				; XREF: Level
000150D8 4E75                       		rts	
000150DA                            
000150DA 43F9 0000 0000             		lea	(CollArray1).l,a1
000150E0 45F9 0000 0000             		lea	(CollArray1).l,a2
000150E6 363C 00FF                  		move.w	#$FF,d3
000150EA                            
000150EA                            loc_14C5E:
000150EA 7A10                       		moveq	#$10,d5
000150EC 343C 000F                  		move.w	#$F,d2
000150F0                            
000150F0                            loc_14C64:
000150F0 7800                       		moveq	#0,d4
000150F2 323C 000F                  		move.w	#$F,d1
000150F6                            
000150F6                            loc_14C6A:
000150F6 3019                       		move.w	(a1)+,d0
000150F8 EAA8                       		lsr.l	d5,d0
000150FA D944                       		addx.w	d4,d4
000150FC 51C9 FFF8                  		dbf	d1,loc_14C6A
00015100                            
00015100 34C4                       		move.w	d4,(a2)+
00015102 92FC 0020                  		suba.w	#$20,a1
00015106 5345                       		subq.w	#1,d5
00015108 51CA FFE6                  		dbf	d2,loc_14C64
0001510C                            
0001510C D2FC 0020                  		adda.w	#$20,a1
00015110 51CB FFD8                  		dbf	d3,loc_14C5E
00015114                            
00015114 43F9 0000 0000             		lea	(CollArray1).l,a1
0001511A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015120 6100                       		bsr.s	FloorLog_Unk2
00015122 43F9 0000 0000             		lea	(CollArray1).l,a1
00015128 45F9 0000 0000             		lea	(CollArray1).l,a2
0001512E                            
0001512E                            ; End of function FloorLog_Unk
0001512E                            
0001512E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001512E                            
0001512E                            
0001512E                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001512E 363C 0FFF                  		move.w	#$FFF,d3
00015132                            
00015132                            loc_14CA6:
00015132 7400                       		moveq	#0,d2
00015134 323C 000F                  		move.w	#$F,d1
00015138 3019                       		move.w	(a1)+,d0
0001513A 6700                       		beq.s	loc_14CD4
0001513C 6B00                       		bmi.s	loc_14CBE
0001513E                            
0001513E                            loc_14CB2:
0001513E E248                       		lsr.w	#1,d0
00015140 6400                       		bcc.s	loc_14CB8
00015142 5202                       		addq.b	#1,d2
00015144                            
00015144                            loc_14CB8:
00015144 51C9 FFF8                  		dbf	d1,loc_14CB2
00015148                            
00015148 6000                       		bra.s	loc_14CD6
0001514A                            ; ===========================================================================
0001514A                            
0001514A                            loc_14CBE:
0001514A 0C40 FFFF                  		cmpi.w	#-1,d0
0001514E 6700                       		beq.s	loc_14CD0
00015150                            
00015150                            loc_14CC4:
00015150 E348                       		lsl.w	#1,d0
00015152 6400                       		bcc.s	loc_14CCA
00015154 5302                       		subq.b	#1,d2
00015156                            
00015156                            loc_14CCA:
00015156 51C9 FFF8                  		dbf	d1,loc_14CC4
0001515A                            
0001515A 6000                       		bra.s	loc_14CD6
0001515C                            ; ===========================================================================
0001515C                            
0001515C                            loc_14CD0:
0001515C 303C 0010                  		move.w	#$10,d0
00015160                            
00015160                            loc_14CD4:
00015160 3400                       		move.w	d0,d2
00015162                            
00015162                            loc_14CD6:
00015162 14C2                       		move.b	d2,(a2)+
00015164 51CB FFCC                  		dbf	d3,loc_14CA6
00015168                            
00015168 4E75                       		rts	
0001516A                            
0001516A                            ; End of function FloorLog_Unk2
0001516A                            
0001516A                            
0001516A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001516A                            
0001516A                            
0001516A                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001516A 2628 0008                  		move.l	8(a0),d3
0001516E 2428 000C                  		move.l	$C(a0),d2
00015172 3228 0010                  		move.w	$10(a0),d1
00015176 48C1                       		ext.l	d1
00015178 E181                       		asl.l	#8,d1
0001517A D681                       		add.l	d1,d3
0001517C 3228 0012                  		move.w	$12(a0),d1
00015180 48C1                       		ext.l	d1
00015182 E181                       		asl.l	#8,d1
00015184 D481                       		add.l	d1,d2
00015186 4842                       		swap	d2
00015188 4843                       		swap	d3
0001518A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001518E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015192 1200                       		move.b	d0,d1
00015194 0600 0020                  		addi.b	#$20,d0
00015198 6A00                       		bpl.s	loc_14D1A
0001519A 1001                       		move.b	d1,d0
0001519C 6A00                       		bpl.s	loc_14D14
0001519E 5300                       		subq.b	#1,d0
000151A0                            
000151A0                            loc_14D14:
000151A0 0600 0020                  		addi.b	#$20,d0
000151A4 6000                       		bra.s	loc_14D24
000151A6                            ; ===========================================================================
000151A6                            
000151A6                            loc_14D1A:
000151A6 1001                       		move.b	d1,d0
000151A8 6A00                       		bpl.s	loc_14D20
000151AA 5200                       		addq.b	#1,d0
000151AC                            
000151AC                            loc_14D20:
000151AC 0600 001F                  		addi.b	#$1F,d0
000151B0                            
000151B0                            loc_14D24:
000151B0 0200 00C0                  		andi.b	#$C0,d0
000151B4 6700 0000                  		beq.w	loc_14DF0
000151B8 0C00 0080                  		cmpi.b	#$80,d0
000151BC 6700 0000                  		beq.w	loc_14F7C
000151C0 0201 0038                  		andi.b	#$38,d1
000151C4 6600                       		bne.s	loc_14D3C
000151C6 5042                       		addq.w	#8,d2
000151C8                            
000151C8                            loc_14D3C:
000151C8 0C00 0040                  		cmpi.b	#$40,d0
000151CC 6700 0000                  		beq.w	loc_1504A
000151D0 6000 0000                  		bra.w	loc_14EBC
000151D4                            
000151D4                            ; End of function Sonic_WalkSpeed
000151D4                            
000151D4                            
000151D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151D4                            
000151D4                            
000151D4                            sub_14D48:				; XREF: Sonic_Jump
000151D4 11C0 F768                  		move.b	d0,($FFFFF768).w
000151D8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000151DC 0600 0020                  		addi.b	#$20,d0
000151E0 0200 00C0                  		andi.b	#$C0,d0
000151E4 0C00 0040                  		cmpi.b	#$40,d0
000151E8 6700 0000                  		beq.w	loc_14FD6
000151EC 0C00 0080                  		cmpi.b	#$80,d0
000151F0 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000151F4 0C00 00C0                  		cmpi.b	#$C0,d0
000151F8 6700 0000                  		beq.w	sub_14E50
000151FC                            
000151FC                            ; End of function sub_14D48
000151FC                            
000151FC                            ; ---------------------------------------------------------------------------
000151FC                            ; Subroutine to	make Sonic land	on the floor after jumping
000151FC                            ; ---------------------------------------------------------------------------
000151FC                            
000151FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151FC                            
000151FC                            
000151FC                            Sonic_HitFloor:				; XREF: Sonic_Floor
000151FC 3428 000C                  		move.w	$C(a0),d2
00015200 3628 0008                  		move.w	8(a0),d3
00015204 7000                       		moveq	#0,d0
00015206 1028 0016                  		move.b	$16(a0),d0
0001520A 4880                       		ext.w	d0
0001520C D440                       		add.w	d0,d2
0001520E 1028 0017                  		move.b	$17(a0),d0
00015212 4880                       		ext.w	d0
00015214 D640                       		add.w	d0,d3
00015216 49F8 F768                  		lea	($FFFFF768).w,a4
0001521A 367C 0010                  		movea.w	#$10,a3
0001521E 3C3C 0000                  		move.w	#0,d6
00015222 7A0D                       		moveq	#$D,d5
00015224 6100 FC34                  		bsr.w	FindFloor
00015228 3F01                       		move.w	d1,-(sp)
0001522A 3428 000C                  		move.w	$C(a0),d2
0001522E 3628 0008                  		move.w	8(a0),d3
00015232 7000                       		moveq	#0,d0
00015234 1028 0016                  		move.b	$16(a0),d0
00015238 4880                       		ext.w	d0
0001523A D440                       		add.w	d0,d2
0001523C 1028 0017                  		move.b	$17(a0),d0
00015240 4880                       		ext.w	d0
00015242 9640                       		sub.w	d0,d3
00015244 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015248 367C 0010                  		movea.w	#$10,a3
0001524C 3C3C 0000                  		move.w	#0,d6
00015250 7A0D                       		moveq	#$D,d5
00015252 6100 FC06                  		bsr.w	FindFloor
00015256 301F                       		move.w	(sp)+,d0
00015258 143C 0000                  		move.b	#0,d2
0001525C                            
0001525C                            loc_14DD0:
0001525C 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015260 B240                       		cmp.w	d0,d1
00015262 6F00                       		ble.s	loc_14DDE
00015264 1638 F768                  		move.b	($FFFFF768).w,d3
00015268 C141                       		exg	d0,d1
0001526A                            
0001526A                            loc_14DDE:
0001526A 0803 0000                  		btst	#0,d3
0001526E 6700                       		beq.s	locret_14DE6
00015270 1602                       		move.b	d2,d3
00015272                            
00015272                            locret_14DE6:
00015272 4E75                       		rts	
00015274                            
00015274                            ; End of function Sonic_HitFloor
00015274                            
00015274                            ; ===========================================================================
00015274 3428 000C                  		move.w	$C(a0),d2
00015278 3628 0008                  		move.w	8(a0),d3
0001527C                            
0001527C                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001527C 0642 000A                  		addi.w	#$A,d2
00015280 49F8 F768                  		lea	($FFFFF768).w,a4
00015284 367C 0010                  		movea.w	#$10,a3
00015288 3C3C 0000                  		move.w	#0,d6
0001528C 7A0E                       		moveq	#$E,d5
0001528E 6100 FBCA                  		bsr.w	FindFloor
00015292 143C 0000                  		move.b	#0,d2
00015296                            
00015296                            loc_14E0A:				; XREF: sub_14EB4
00015296 1638 F768                  		move.b	($FFFFF768).w,d3
0001529A 0803 0000                  		btst	#0,d3
0001529E 6700                       		beq.s	locret_14E16
000152A0 1602                       		move.b	d2,d3
000152A2                            
000152A2                            locret_14E16:
000152A2 4E75                       		rts	
000152A4                            
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            ; Subroutine allowing objects to interact with the floor
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            
000152A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A4                            
000152A4                            
000152A4                            ObjHitFloor:
000152A4 3628 0008                  		move.w	8(a0),d3
000152A8                            
000152A8                            ; End of function ObjHitFloor
000152A8                            
000152A8                            
000152A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A8                            
000152A8                            
000152A8                            ObjHitFloor2:
000152A8 3428 000C                  		move.w	$C(a0),d2
000152AC 7000                       		moveq	#0,d0
000152AE 1028 0016                  		move.b	$16(a0),d0
000152B2 4880                       		ext.w	d0
000152B4 D440                       		add.w	d0,d2
000152B6 49F8 F768                  		lea	($FFFFF768).w,a4
000152BA 18BC 0000                  		move.b	#0,(a4)
000152BE 367C 0010                  		movea.w	#$10,a3
000152C2 3C3C 0000                  		move.w	#0,d6
000152C6 7A0D                       		moveq	#$D,d5
000152C8 6100 FB90                  		bsr.w	FindFloor
000152CC 1638 F768                  		move.b	($FFFFF768).w,d3
000152D0 0803 0000                  		btst	#0,d3
000152D4 6700                       		beq.s	locret_14E4E
000152D6 163C 0000                  		move.b	#0,d3
000152DA                            
000152DA                            locret_14E4E:
000152DA 4E75                       		rts	
000152DC                            ; End of function ObjHitFloor2
000152DC                            
000152DC                            
000152DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152DC                            
000152DC                            
000152DC                            sub_14E50:				; XREF: sub_14D48
000152DC 3428 000C                  		move.w	$C(a0),d2
000152E0 3628 0008                  		move.w	8(a0),d3
000152E4 7000                       		moveq	#0,d0
000152E6 1028 0017                  		move.b	$17(a0),d0
000152EA 4880                       		ext.w	d0
000152EC 9440                       		sub.w	d0,d2
000152EE 1028 0016                  		move.b	$16(a0),d0
000152F2 4880                       		ext.w	d0
000152F4 D640                       		add.w	d0,d3
000152F6 49F8 F768                  		lea	($FFFFF768).w,a4
000152FA 367C 0010                  		movea.w	#$10,a3
000152FE 3C3C 0000                  		move.w	#0,d6
00015302 7A0E                       		moveq	#$E,d5
00015304 6100 FC92                  		bsr.w	FindWall
00015308 3F01                       		move.w	d1,-(sp)
0001530A 3428 000C                  		move.w	$C(a0),d2
0001530E 3628 0008                  		move.w	8(a0),d3
00015312 7000                       		moveq	#0,d0
00015314 1028 0017                  		move.b	$17(a0),d0
00015318 4880                       		ext.w	d0
0001531A D440                       		add.w	d0,d2
0001531C 1028 0016                  		move.b	$16(a0),d0
00015320 4880                       		ext.w	d0
00015322 D640                       		add.w	d0,d3
00015324 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015328 367C 0010                  		movea.w	#$10,a3
0001532C 3C3C 0000                  		move.w	#0,d6
00015330 7A0E                       		moveq	#$E,d5
00015332 6100 FC64                  		bsr.w	FindWall
00015336 301F                       		move.w	(sp)+,d0
00015338 143C 00C0                  		move.b	#-$40,d2
0001533C 6000 FF1E                  		bra.w	loc_14DD0
00015340                            
00015340                            ; End of function sub_14E50
00015340                            
00015340                            
00015340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015340                            
00015340                            
00015340                            sub_14EB4:				; XREF: Sonic_Floor
00015340 3428 000C                  		move.w	$C(a0),d2
00015344 3628 0008                  		move.w	8(a0),d3
00015348                            
00015348                            loc_14EBC:
00015348 0643 000A                  		addi.w	#$A,d3
0001534C 49F8 F768                  		lea	($FFFFF768).w,a4
00015350 367C 0010                  		movea.w	#$10,a3
00015354 3C3C 0000                  		move.w	#0,d6
00015358 7A0E                       		moveq	#$E,d5
0001535A 6100 FC3C                  		bsr.w	FindWall
0001535E 143C 00C0                  		move.b	#-$40,d2
00015362 6000 FF32                  		bra.w	loc_14E0A
00015366                            
00015366                            ; End of function sub_14EB4
00015366                            
00015366                            ; ---------------------------------------------------------------------------
00015366                            ; Subroutine to	detect when an object hits a wall to its right
00015366                            ; ---------------------------------------------------------------------------
00015366                            
00015366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015366                            
00015366                            
00015366                            ObjHitWallRight:
00015366 D668 0008                  		add.w	8(a0),d3
0001536A 3428 000C                  		move.w	$C(a0),d2
0001536E 49F8 F768                  		lea	($FFFFF768).w,a4
00015372 18BC 0000                  		move.b	#0,(a4)
00015376 367C 0010                  		movea.w	#$10,a3
0001537A 3C3C 0000                  		move.w	#0,d6
0001537E 7A0E                       		moveq	#$E,d5
00015380 6100 FC16                  		bsr.w	FindWall
00015384 1638 F768                  		move.b	($FFFFF768).w,d3
00015388 0803 0000                  		btst	#0,d3
0001538C 6700                       		beq.s	locret_14F06
0001538E 163C 00C0                  		move.b	#-$40,d3
00015392                            
00015392                            locret_14F06:
00015392 4E75                       		rts	
00015394                            
00015394                            ; End of function ObjHitWallRight
00015394                            
00015394                            ; ---------------------------------------------------------------------------
00015394                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015394                            ; touches them
00015394                            ; ---------------------------------------------------------------------------
00015394                            
00015394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015394                            
00015394                            
00015394                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015394 3428 000C                  		move.w	$C(a0),d2
00015398 3628 0008                  		move.w	8(a0),d3
0001539C 7000                       		moveq	#0,d0
0001539E 1028 0016                  		move.b	$16(a0),d0
000153A2 4880                       		ext.w	d0
000153A4 9440                       		sub.w	d0,d2
000153A6 0A42 000F                  		eori.w	#$F,d2
000153AA 1028 0017                  		move.b	$17(a0),d0
000153AE 4880                       		ext.w	d0
000153B0 D640                       		add.w	d0,d3
000153B2 49F8 F768                  		lea	($FFFFF768).w,a4
000153B6 367C FFF0                  		movea.w	#-$10,a3
000153BA 3C3C 1000                  		move.w	#$1000,d6
000153BE 7A0E                       		moveq	#$E,d5
000153C0 6100 FA98                  		bsr.w	FindFloor
000153C4 3F01                       		move.w	d1,-(sp)
000153C6 3428 000C                  		move.w	$C(a0),d2
000153CA 3628 0008                  		move.w	8(a0),d3
000153CE 7000                       		moveq	#0,d0
000153D0 1028 0016                  		move.b	$16(a0),d0
000153D4 4880                       		ext.w	d0
000153D6 9440                       		sub.w	d0,d2
000153D8 0A42 000F                  		eori.w	#$F,d2
000153DC 1028 0017                  		move.b	$17(a0),d0
000153E0 4880                       		ext.w	d0
000153E2 9640                       		sub.w	d0,d3
000153E4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153E8 367C FFF0                  		movea.w	#-$10,a3
000153EC 3C3C 1000                  		move.w	#$1000,d6
000153F0 7A0E                       		moveq	#$E,d5
000153F2 6100 FA66                  		bsr.w	FindFloor
000153F6 301F                       		move.w	(sp)+,d0
000153F8 143C 0080                  		move.b	#-$80,d2
000153FC 6000 FE5E                  		bra.w	loc_14DD0
00015400                            ; End of function Sonic_DontRunOnWalls
00015400                            
00015400                            ; ===========================================================================
00015400 3428 000C                  		move.w	$C(a0),d2
00015404 3628 0008                  		move.w	8(a0),d3
00015408                            
00015408                            loc_14F7C:
00015408 0442 000A                  		subi.w	#$A,d2
0001540C 0A42 000F                  		eori.w	#$F,d2
00015410 49F8 F768                  		lea	($FFFFF768).w,a4
00015414 367C FFF0                  		movea.w	#-$10,a3
00015418 3C3C 1000                  		move.w	#$1000,d6
0001541C 7A0E                       		moveq	#$E,d5
0001541E 6100 FA3A                  		bsr.w	FindFloor
00015422 143C 0080                  		move.b	#-$80,d2
00015426 6000 FE6E                  		bra.w	loc_14E0A
0001542A                            
0001542A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001542A                            
0001542A                            
0001542A                            ObjHitCeiling:
0001542A 3428 000C                  		move.w	$C(a0),d2
0001542E 3628 0008                  		move.w	8(a0),d3
00015432 7000                       		moveq	#0,d0
00015434 1028 0016                  		move.b	$16(a0),d0
00015438 4880                       		ext.w	d0
0001543A 9440                       		sub.w	d0,d2
0001543C 0A42 000F                  		eori.w	#$F,d2
00015440 49F8 F768                  		lea	($FFFFF768).w,a4
00015444 367C FFF0                  		movea.w	#-$10,a3
00015448 3C3C 1000                  		move.w	#$1000,d6
0001544C 7A0E                       		moveq	#$E,d5
0001544E 6100 FA0A                  		bsr.w	FindFloor
00015452 1638 F768                  		move.b	($FFFFF768).w,d3
00015456 0803 0000                  		btst	#0,d3
0001545A 6700                       		beq.s	locret_14FD4
0001545C 163C 0080                  		move.b	#-$80,d3
00015460                            
00015460                            locret_14FD4:
00015460 4E75                       		rts	
00015462                            ; End of function ObjHitCeiling
00015462                            
00015462                            ; ===========================================================================
00015462                            
00015462                            loc_14FD6:				; XREF: sub_14D48
00015462 3428 000C                  		move.w	$C(a0),d2
00015466 3628 0008                  		move.w	8(a0),d3
0001546A 7000                       		moveq	#0,d0
0001546C 1028 0017                  		move.b	$17(a0),d0
00015470 4880                       		ext.w	d0
00015472 9440                       		sub.w	d0,d2
00015474 1028 0016                  		move.b	$16(a0),d0
00015478 4880                       		ext.w	d0
0001547A 9640                       		sub.w	d0,d3
0001547C 0A43 000F                  		eori.w	#$F,d3
00015480 49F8 F768                  		lea	($FFFFF768).w,a4
00015484 367C FFF0                  		movea.w	#-$10,a3
00015488 3C3C 0800                  		move.w	#$800,d6
0001548C 7A0E                       		moveq	#$E,d5
0001548E 6100 FB08                  		bsr.w	FindWall
00015492 3F01                       		move.w	d1,-(sp)
00015494 3428 000C                  		move.w	$C(a0),d2
00015498 3628 0008                  		move.w	8(a0),d3
0001549C 7000                       		moveq	#0,d0
0001549E 1028 0017                  		move.b	$17(a0),d0
000154A2 4880                       		ext.w	d0
000154A4 D440                       		add.w	d0,d2
000154A6 1028 0016                  		move.b	$16(a0),d0
000154AA 4880                       		ext.w	d0
000154AC 9640                       		sub.w	d0,d3
000154AE 0A43 000F                  		eori.w	#$F,d3
000154B2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000154B6 367C FFF0                  		movea.w	#-$10,a3
000154BA 3C3C 0800                  		move.w	#$800,d6
000154BE 7A0E                       		moveq	#$E,d5
000154C0 6100 FAD6                  		bsr.w	FindWall
000154C4 301F                       		move.w	(sp)+,d0
000154C6 143C 0040                  		move.b	#$40,d2
000154CA 6000 FD90                  		bra.w	loc_14DD0
000154CE                            
000154CE                            ; ---------------------------------------------------------------------------
000154CE                            ; Subroutine to	stop Sonic when	he jumps at a wall
000154CE                            ; ---------------------------------------------------------------------------
000154CE                            
000154CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154CE                            
000154CE                            
000154CE                            Sonic_HitWall:				; XREF: Sonic_Floor
000154CE 3428 000C                  		move.w	$C(a0),d2
000154D2 3628 0008                  		move.w	8(a0),d3
000154D6                            
000154D6                            loc_1504A:
000154D6 0443 000A                  		subi.w	#$A,d3
000154DA 0A43 000F                  		eori.w	#$F,d3
000154DE 49F8 F768                  		lea	($FFFFF768).w,a4
000154E2 367C FFF0                  		movea.w	#-$10,a3
000154E6 3C3C 0800                  		move.w	#$800,d6
000154EA 7A0E                       		moveq	#$E,d5
000154EC 6100 FAAA                  		bsr.w	FindWall
000154F0 143C 0040                  		move.b	#$40,d2
000154F4 6000 FDA0                  		bra.w	loc_14E0A
000154F8                            ; End of function Sonic_HitWall
000154F8                            
000154F8                            ; ---------------------------------------------------------------------------
000154F8                            ; Subroutine to	detect when an object hits a wall to its left
000154F8                            ; ---------------------------------------------------------------------------
000154F8                            
000154F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F8                            
000154F8                            
000154F8                            ObjHitWallLeft:
000154F8 D668 0008                  		add.w	8(a0),d3
000154FC 3428 000C                  		move.w	$C(a0),d2
00015500 49F8 F768                  		lea	($FFFFF768).w,a4
00015504 18BC 0000                  		move.b	#0,(a4)
00015508 367C FFF0                  		movea.w	#-$10,a3
0001550C 3C3C 0800                  		move.w	#$800,d6
00015510 7A0E                       		moveq	#$E,d5
00015512 6100 FA84                  		bsr.w	FindWall
00015516 1638 F768                  		move.b	($FFFFF768).w,d3
0001551A 0803 0000                  		btst	#0,d3
0001551E 6700                       		beq.s	locret_15098
00015520 163C 0040                  		move.b	#$40,d3
00015524                            
00015524                            locret_15098:
00015524 4E75                       		rts	
00015526                            ; End of function ObjHitWallLeft
00015526                            
00015526                            ; ===========================================================================
00015526                            ; ---------------------------------------------------------------------------
00015526                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015526                            ; ---------------------------------------------------------------------------
00015526                            
00015526                            Obj66:					; XREF: Obj_Index
00015526 7000                       		moveq	#0,d0
00015528 1028 0024                  		move.b	$24(a0),d0
0001552C 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015530 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015534                            ; ===========================================================================
00015534 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015536 0000                       		dc.w Obj66_Action-Obj66_Index
00015538 0000                       		dc.w Obj66_Display-Obj66_Index
0001553A 0000                       		dc.w Obj66_Release-Obj66_Index
0001553C                            ; ===========================================================================
0001553C                            
0001553C                            Obj66_Main:				; XREF: Obj66_Index
0001553C 5428 0024                  		addq.b	#2,$24(a0)
00015540 323C 0001                  		move.w	#1,d1
00015544 2248                       		movea.l	a0,a1
00015546 6000                       		bra.s	Obj66_MakeItem
00015548                            ; ===========================================================================
00015548                            
00015548                            Obj66_Loop:
00015548 6100 897E                  		bsr.w	SingleObjLoad
0001554C 6600                       		bne.s	loc_150FE
0001554E 12BC 0066                  		move.b	#$66,0(a1)
00015552 5829 0024                  		addq.b	#4,$24(a1)
00015556 3368 0008 0008             		move.w	8(a0),8(a1)
0001555C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015562 137C 0003 0018             		move.b	#3,$18(a1)
00015568 137C 0010 001A             		move.b	#$10,$1A(a1)
0001556E                            
0001556E                            Obj66_MakeItem:				; XREF: Obj66_Main
0001556E 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015576 337C 4348 0002             		move.w	#$4348,2(a1)
0001557C 0029 0004 0001             		ori.b	#4,1(a1)
00015582 137C 0038 0019             		move.b	#$38,$19(a1)
00015588                            
00015588                            loc_150FE:
00015588 51C9 FFBE                  		dbf	d1,Obj66_Loop
0001558C                            
0001558C 117C 0030 0019             		move.b	#$30,$19(a0)
00015592 117C 0004 0018             		move.b	#4,$18(a0)
00015598 317C 003C 0030             		move.w	#$3C,$30(a0)
0001559E 117C 0001 0034             		move.b	#1,$34(a0)
000155A4 1168 0028 0038             		move.b	$28(a0),$38(a0)
000155AA                            
000155AA                            Obj66_Action:				; XREF: Obj66_Index
000155AA 6100 0000                  		bsr.w	Obj66_ChkSwitch
000155AE 4A28 0001                  		tst.b	1(a0)
000155B2 6A00 0000                  		bpl.w	Obj66_Display
000155B6 323C 0030                  		move.w	#$30,d1
000155BA 3401                       		move.w	d1,d2
000155BC 3602                       		move.w	d2,d3
000155BE 5243                       		addq.w	#1,d3
000155C0 3828 0008                  		move.w	8(a0),d4
000155C4 6100 A84C                  		bsr.w	SolidObject
000155C8 0828 0005 0022             		btst	#5,$22(a0)
000155CE 6700 0000                  		beq.w	Obj66_Display
000155D2 43F8 D000                  		lea	($FFFFD000).w,a1
000155D6 720E                       		moveq	#$E,d1
000155D8 3029 0008                  		move.w	8(a1),d0
000155DC B068 0008                  		cmp.w	8(a0),d0
000155E0 6500                       		bcs.s	Obj66_GrabSonic
000155E2 7207                       		moveq	#7,d1
000155E4                            
000155E4                            Obj66_GrabSonic:
000155E4 B228 001A                  		cmp.b	$1A(a0),d1
000155E8 6600                       		bne.s	Obj66_Display
000155EA 1141 0032                  		move.b	d1,$32(a0)
000155EE 5828 0024                  		addq.b	#4,$24(a0)
000155F2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000155F8 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000155FE 337C 0800 0014             		move.w	#$800,$14(a1)
00015604 337C 0000 0010             		move.w	#0,$10(a1)
0001560A 337C 0000 0012             		move.w	#0,$12(a1)
00015610 08A8 0005 0022             		bclr	#5,$22(a0)
00015616 08A9 0005 0022             		bclr	#5,$22(a1)
0001561C 08E9 0001 0022             		bset	#1,$22(a1)
00015622 3429 0008                  		move.w	8(a1),d2
00015626 3629 000C                  		move.w	$C(a1),d3
0001562A 6100 0000                  		bsr.w	Obj66_ChgPos
0001562E D569 0008                  		add.w	d2,8(a1)
00015632 D769 000C                  		add.w	d3,$C(a1)
00015636 E0E9 0008                  		asr	8(a1)
0001563A E0E9 000C                  		asr	$C(a1)
0001563E                            
0001563E                            Obj66_Display:				; XREF: Obj66_Index
0001563E 6000 A4AA                  		bra.w	MarkObjGone
00015642                            ; ===========================================================================
00015642                            
00015642                            Obj66_Release:				; XREF: Obj66_Index
00015642 1028 001A                  		move.b	$1A(a0),d0
00015646 0C00 0004                  		cmpi.b	#4,d0
0001564A 6700                       		beq.s	loc_151C8
0001564C 0C00 0007                  		cmpi.b	#7,d0
00015650 6600                       		bne.s	loc_151F8
00015652                            
00015652                            loc_151C8:
00015652 B028 0032                  		cmp.b	$32(a0),d0
00015656 6700                       		beq.s	loc_151F8
00015658 43F8 D000                  		lea	($FFFFD000).w,a1
0001565C 337C 0000 0010             		move.w	#0,$10(a1)
00015662 337C 0800 0012             		move.w	#$800,$12(a1)
00015668 0C00 0004                  		cmpi.b	#4,d0
0001566C 6700                       		beq.s	loc_151F0
0001566E 337C 0800 0010             		move.w	#$800,$10(a1)
00015674 337C 0800 0012             		move.w	#$800,$12(a1)
0001567A                            
0001567A                            loc_151F0:
0001567A 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001567E 5928 0024                  		subq.b	#4,$24(a0)
00015682                            
00015682                            loc_151F8:
00015682 6100                       		bsr.s	Obj66_ChkSwitch
00015684 6100                       		bsr.s	Obj66_ChgPos
00015686 6000 A462                  		bra.w	MarkObjGone
0001568A                            
0001568A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001568A                            
0001568A                            
0001568A                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001568A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001568E 7000                       		moveq	#0,d0
00015690 1028 0038                  		move.b	$38(a0),d0
00015694 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001569A 6700                       		beq.s	loc_15224	; if not, branch
0001569C 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000156A0 6600                       		bne.s	Obj66_Animate	; if yes, branch
000156A2 4428 0034                  		neg.b	$34(a0)
000156A6 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000156AC 6000                       		bra.s	Obj66_Animate
000156AE                            ; ===========================================================================
000156AE                            
000156AE                            loc_15224:
000156AE 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000156B2                            
000156B2                            Obj66_Animate:
000156B2 5328 001E                  		subq.b	#1,$1E(a0)
000156B6 6A00                       		bpl.s	locret_15246
000156B8 117C 0007 001E             		move.b	#7,$1E(a0)
000156BE 1228 0034                  		move.b	$34(a0),d1
000156C2 1028 001A                  		move.b	$1A(a0),d0
000156C6 D001                       		add.b	d1,d0
000156C8 0200 000F                  		andi.b	#$F,d0
000156CC 1140 001A                  		move.b	d0,$1A(a0)
000156D0                            
000156D0                            locret_15246:
000156D0 4E75                       		rts	
000156D2                            ; End of function Obj66_ChkSwitch
000156D2                            
000156D2                            
000156D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D2                            
000156D2                            
000156D2                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000156D2 43F8 D000                  		lea	($FFFFD000).w,a1
000156D6 7000                       		moveq	#0,d0
000156D8 1028 001A                  		move.b	$1A(a0),d0
000156DC D040                       		add.w	d0,d0
000156DE 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000156E2 101A                       		move.b	(a2)+,d0
000156E4 4880                       		ext.w	d0
000156E6 D068 0008                  		add.w	8(a0),d0
000156EA 3340 0008                  		move.w	d0,8(a1)
000156EE 101A                       		move.b	(a2)+,d0
000156F0 4880                       		ext.w	d0
000156F2 D068 000C                  		add.w	$C(a0),d0
000156F6 3340 000C                  		move.w	d0,$C(a1)
000156FA 4E75                       		rts	
000156FC                            ; End of function Obj66_ChgPos
000156FC                            
000156FC                            ; ===========================================================================
000156FC E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015700 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015704 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015708 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001570C 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015710 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015714 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015718 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001571C                            ; ---------------------------------------------------------------------------
0001571C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001571C                            ; ---------------------------------------------------------------------------
0001571C                            Map_obj66:
0001571C                            	include "_maps\obj66.asm"
0001571C                            ; ---------------------------------------------------------------------------
0001571C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001571C                            ; ---------------------------------------------------------------------------
0001571C 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015720 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015724 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015728 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001572C 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015730 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015734 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015738 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001573C 0000                       		dc.w byte_154A4-Map_obj66
0001573E 06                         byte_152B4:	dc.b 6
0001573F E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015744 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015749 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001574E E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015753 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015758 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001575D 06                         byte_152D3:	dc.b 6
0001575E F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015763 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015768 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001576D F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015772 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015777 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001577C 06                         byte_152F2:	dc.b 6
0001577D 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015782 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015787 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001578C 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015791 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015796 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001579B 06                         byte_15311:	dc.b 6
0001579C 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000157A1 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000157A6 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000157AB 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000157B0 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000157B5 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000157BA 06                         byte_15330:	dc.b 6
000157BB 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000157C0 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000157C5 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000157CA 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000157CF 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000157D4 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000157D9 06                         byte_1534F:	dc.b 6
000157DA 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000157DF 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000157E4 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000157E9 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000157EE 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000157F3 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000157F8 06                         byte_1536E:	dc.b 6
000157F9 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000157FE 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015803 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015808 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001580D 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015812 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015817 06                         byte_1538D:	dc.b 6
00015818 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001581D F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015822 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015827 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001582C 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015831 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015836 06                         byte_153AC:	dc.b 6
00015837 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001583C 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015841 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015846 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001584B 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015850 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015855 06                         byte_153CB:	dc.b 6
00015856 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001585B E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015860 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015865 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001586A F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001586F F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015874 06                         byte_153EA:	dc.b 6
00015875 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001587A E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001587F D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015884 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015889 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001588E E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015893 06                         byte_15409:	dc.b 6
00015894 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015899 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001589E CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000158A3 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000158A8 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000158AD E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000158B2 06                         byte_15428:	dc.b 6
000158B3 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000158B8 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000158BD C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000158C2 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000158C7 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000158CC E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000158D1 06                         byte_15447:	dc.b 6
000158D2 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000158D7 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000158DC CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000158E1 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000158E6 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000158EB E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000158F0 06                         byte_15466:	dc.b 6
000158F1 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000158F6 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000158FB D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015900 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015905 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001590A E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001590F 06                         byte_15485:	dc.b 6
00015910 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015915 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001591A DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001591F DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015924 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015929 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001592E 0C                         byte_154A4:	dc.b $C
0001592F C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015934 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015939 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001593E C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015943 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015948 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001594D 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015952 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015957 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001595C 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015961 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015966 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001596C 00                         		even
0001596C 00                         		even
0001596C                            
0001596C                            ; ===========================================================================
0001596C                            ; ---------------------------------------------------------------------------
0001596C                            ; Object 67 - disc that	you run	around (SBZ)
0001596C                            ; ---------------------------------------------------------------------------
0001596C                            
0001596C                            Obj67:					; XREF: Obj_Index
0001596C 7000                       		moveq	#0,d0
0001596E 1028 0024                  		move.b	$24(a0),d0
00015972 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015976 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001597A                            ; ===========================================================================
0001597A 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001597C 0000                       		dc.w Obj67_Action-Obj67_Index
0001597E                            ; ===========================================================================
0001597E                            
0001597E                            Obj67_Main:				; XREF: Obj67_Index
0001597E 5428 0024                  		addq.b	#2,$24(a0)
00015982 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001598A 317C C344 0002             		move.w	#$C344,2(a0)
00015990 117C 0004 0001             		move.b	#4,1(a0)
00015996 117C 0004 0018             		move.b	#4,$18(a0)
0001599C 117C 0008 0019             		move.b	#8,$19(a0)
000159A2 3168 0008 0032             		move.w	8(a0),$32(a0)
000159A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000159AE 117C 0018 0034             		move.b	#$18,$34(a0)
000159B4 117C 0048 0038             		move.b	#$48,$38(a0)
000159BA 1228 0028                  		move.b	$28(a0),d1	; get object type
000159BE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000159C2 6700                       		beq.s	loc_15546
000159C4 117C 0010 0034             		move.b	#$10,$34(a0)
000159CA 117C 0038 0038             		move.b	#$38,$38(a0)
000159D0                            
000159D0                            loc_15546:
000159D0 1228 0028                  		move.b	$28(a0),d1	; get object type
000159D4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000159D8 4881                       		ext.w	d1
000159DA E741                       		asl.w	#3,d1
000159DC 3141 0036                  		move.w	d1,$36(a0)
000159E0 1028 0022                  		move.b	$22(a0),d0
000159E4 E418                       		ror.b	#2,d0
000159E6 0200 00C0                  		andi.b	#-$40,d0
000159EA 1140 0026                  		move.b	d0,$26(a0)
000159EE                            
000159EE                            Obj67_Action:				; XREF: Obj67_Index
000159EE 6100 0000                  		bsr.w	Obj67_MoveSonic
000159F2 6100 0000                  		bsr.w	Obj67_MoveSpot
000159F6 6000 0000                  		bra.w	Obj67_ChkDel
000159FA                            ; ===========================================================================
000159FA                            
000159FA                            Obj67_MoveSonic:			; XREF: Obj67_Action
000159FA 7400                       		moveq	#0,d2
000159FC 1428 0038                  		move.b	$38(a0),d2
00015A00 3602                       		move.w	d2,d3
00015A02 D643                       		add.w	d3,d3
00015A04 43F8 D000                  		lea	($FFFFD000).w,a1
00015A08 3029 0008                  		move.w	8(a1),d0
00015A0C 9068 0032                  		sub.w	$32(a0),d0
00015A10 D042                       		add.w	d2,d0
00015A12 B043                       		cmp.w	d3,d0
00015A14 6400                       		bcc.s	loc_155A8
00015A16 3229 000C                  		move.w	$C(a1),d1
00015A1A 9268 0030                  		sub.w	$30(a0),d1
00015A1E D242                       		add.w	d2,d1
00015A20 B243                       		cmp.w	d3,d1
00015A22 6400                       		bcc.s	loc_155A8
00015A24 0829 0001 0022             		btst	#1,$22(a1)
00015A2A 6700                       		beq.s	loc_155B8
00015A2C 4228 003A                  		clr.b	$3A(a0)
00015A30 4E75                       		rts	
00015A32                            ; ===========================================================================
00015A32                            
00015A32                            loc_155A8:
00015A32 4A28 003A                  		tst.b	$3A(a0)
00015A36 6700                       		beq.s	locret_155B6
00015A38 4229 0038                  		clr.b	$38(a1)
00015A3C 4228 003A                  		clr.b	$3A(a0)
00015A40                            
00015A40                            locret_155B6:
00015A40 4E75                       		rts	
00015A42                            ; ===========================================================================
00015A42                            
00015A42                            loc_155B8:
00015A42 4A28 003A                  		tst.b	$3A(a0)
00015A46 6600                       		bne.s	loc_155E2
00015A48 117C 0001 003A             		move.b	#1,$3A(a0)
00015A4E 0829 0002 0022             		btst	#2,$22(a1)
00015A54 6600                       		bne.s	loc_155D0
00015A56 4229 001C                  		clr.b	$1C(a1)
00015A5A                            
00015A5A                            loc_155D0:
00015A5A 08A9 0005 0022             		bclr	#5,$22(a1)
00015A60 137C 0001 001D             		move.b	#1,$1D(a1)
00015A66 137C 0001 0038             		move.b	#1,$38(a1)
00015A6C                            
00015A6C                            loc_155E2:
00015A6C 3029 0014                  		move.w	$14(a1),d0
00015A70 4A68 0036                  		tst.w	$36(a0)
00015A74 6A00                       		bpl.s	loc_15608
00015A76 0C40 FC00                  		cmpi.w	#-$400,d0
00015A7A 6F00                       		ble.s	loc_155FA
00015A7C 337C FC00 0014             		move.w	#-$400,$14(a1)
00015A82 4E75                       		rts	
00015A84                            ; ===========================================================================
00015A84                            
00015A84                            loc_155FA:
00015A84 0C40 F100                  		cmpi.w	#-$F00,d0
00015A88 6C00                       		bge.s	locret_15606
00015A8A 337C F100 0014             		move.w	#-$F00,$14(a1)
00015A90                            
00015A90                            locret_15606:
00015A90 4E75                       		rts	
00015A92                            ; ===========================================================================
00015A92                            
00015A92                            loc_15608:
00015A92 0C40 0400                  		cmpi.w	#$400,d0
00015A96 6C00                       		bge.s	loc_15616
00015A98 337C 0400 0014             		move.w	#$400,$14(a1)
00015A9E 4E75                       		rts	
00015AA0                            ; ===========================================================================
00015AA0                            
00015AA0                            loc_15616:
00015AA0 0C40 0F00                  		cmpi.w	#$F00,d0
00015AA4 6F00                       		ble.s	locret_15622
00015AA6 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015AAC                            
00015AAC                            locret_15622:
00015AAC 4E75                       		rts	
00015AAE                            ; ===========================================================================
00015AAE                            
00015AAE                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015AAE 3028 0036                  		move.w	$36(a0),d0
00015AB2 D168 0026                  		add.w	d0,$26(a0)
00015AB6 1028 0026                  		move.b	$26(a0),d0
00015ABA 4EB9 0000 2C22             		jsr	(CalcSine).l
00015AC0 3428 0030                  		move.w	$30(a0),d2
00015AC4 3628 0032                  		move.w	$32(a0),d3
00015AC8 7800                       		moveq	#0,d4
00015ACA 1828 0034                  		move.b	$34(a0),d4
00015ACE E14C                       		lsl.w	#8,d4
00015AD0 2A04                       		move.l	d4,d5
00015AD2 C9C0                       		muls.w	d0,d4
00015AD4 4844                       		swap	d4
00015AD6 CBC1                       		muls.w	d1,d5
00015AD8 4845                       		swap	d5
00015ADA D842                       		add.w	d2,d4
00015ADC DA43                       		add.w	d3,d5
00015ADE 3144 000C                  		move.w	d4,$C(a0)
00015AE2 3145 0008                  		move.w	d5,8(a0)
00015AE6 4E75                       		rts	
00015AE8                            ; ===========================================================================
00015AE8                            
00015AE8                            Obj67_ChkDel:				; XREF: Obj67_Action
00015AE8 3028 0032                  		move.w	$32(a0),d0
00015AEC 0240 FF80                  		andi.w	#-$80,d0
00015AF0 3238 F700                  		move.w	($FFFFF700).w,d1
00015AF4 0441 0080                  		subi.w	#$80,d1
00015AF8 0241 FF80                  		andi.w	#-$80,d1
00015AFC 9041                       		sub.w	d1,d0
00015AFE 0C40 0280                  		cmpi.w	#$280,d0
00015B02 6200                       		bhi.s	Obj67_Delete
00015B04 4EF9 0000 DA42             		jmp	DisplaySprite
00015B0A                            ; ===========================================================================
00015B0A                            
00015B0A                            Obj67_Delete:
00015B0A 4EF9 0000 DA7E             		jmp	DeleteObject
00015B10                            ; ===========================================================================
00015B10                            ; ---------------------------------------------------------------------------
00015B10                            ; Sprite mappings - disc that you run around (SBZ)
00015B10                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015B10                            ; part of the level tiles.)
00015B10                            ; ---------------------------------------------------------------------------
00015B10                            Map_obj67:
00015B10                            	include "_maps\obj67.asm"
00015B10                            ; ---------------------------------------------------------------------------
00015B10                            ; Sprite mappings - disc that you run around (SBZ)
00015B10                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015B10                            ; part of the level tiles.)
00015B10                            ; ---------------------------------------------------------------------------
00015B10 0000                       		dc.w byte_15688-Map_obj67
00015B12 01                         byte_15688:	dc.b 1
00015B13 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015B18                            		even
00015B18                            		even
00015B18                            
00015B18                            ; ===========================================================================
00015B18                            ; ---------------------------------------------------------------------------
00015B18                            ; Object 68 - conveyor belts (SBZ)
00015B18                            ; ---------------------------------------------------------------------------
00015B18                            
00015B18                            Obj68:					; XREF: Obj_Index
00015B18 7000                       		moveq	#0,d0
00015B1A 1028 0024                  		move.b	$24(a0),d0
00015B1E 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015B22 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015B26                            ; ===========================================================================
00015B26 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015B28 0000                       		dc.w Obj68_Action-Obj68_Index
00015B2A                            ; ===========================================================================
00015B2A                            
00015B2A                            Obj68_Main:				; XREF: Obj68_Index
00015B2A 5428 0024                  		addq.b	#2,$24(a0)
00015B2E 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015B34 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B38 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B3C 6700                       		beq.s	loc_156BA	; if zero, branch
00015B3E 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015B44                            
00015B44                            loc_156BA:
00015B44 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B48 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B4C 4881                       		ext.w	d1
00015B4E E841                       		asr.w	#4,d1
00015B50 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015B54                            
00015B54                            Obj68_Action:				; XREF: Obj68_Index
00015B54 6100                       		bsr.s	Obj68_MoveSonic
00015B56 3028 0008                  		move.w	8(a0),d0
00015B5A 0240 FF80                  		andi.w	#$FF80,d0
00015B5E 3238 F700                  		move.w	($FFFFF700).w,d1
00015B62 0441 0080                  		subi.w	#$80,d1
00015B66 0241 FF80                  		andi.w	#$FF80,d1
00015B6A 9041                       		sub.w	d1,d0
00015B6C 0C40 0280                  		cmpi.w	#$280,d0
00015B70 6200                       		bhi.s	Obj68_Delete
00015B72 4E75                       		rts	
00015B74                            ; ===========================================================================
00015B74                            
00015B74                            Obj68_Delete:
00015B74 4EF9 0000 DA7E             		jmp	DeleteObject
00015B7A                            ; ===========================================================================
00015B7A                            
00015B7A                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015B7A 7400                       		moveq	#0,d2
00015B7C 1428 0038                  		move.b	$38(a0),d2
00015B80 3602                       		move.w	d2,d3
00015B82 D643                       		add.w	d3,d3
00015B84 43F8 D000                  		lea	($FFFFD000).w,a1
00015B88 3029 0008                  		move.w	8(a1),d0
00015B8C 9068 0008                  		sub.w	8(a0),d0
00015B90 D042                       		add.w	d2,d0
00015B92 B043                       		cmp.w	d3,d0
00015B94 6400                       		bcc.s	locret_1572E
00015B96 3229 000C                  		move.w	$C(a1),d1
00015B9A 9268 000C                  		sub.w	$C(a0),d1
00015B9E 0641 0030                  		addi.w	#$30,d1
00015BA2 0C41 0030                  		cmpi.w	#$30,d1
00015BA6 6400                       		bcc.s	locret_1572E
00015BA8 0829 0001 0022             		btst	#1,$22(a1)
00015BAE 6600                       		bne.s	locret_1572E
00015BB0 3028 0036                  		move.w	$36(a0),d0
00015BB4 D169 0008                  		add.w	d0,8(a1)
00015BB8                            
00015BB8                            locret_1572E:
00015BB8 4E75                       		rts	
00015BBA                            
00015BBA                            ; ===========================================================================
00015BBA                            ; ---------------------------------------------------------------------------
00015BBA                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015BBA                            ; ---------------------------------------------------------------------------
00015BBA                            
00015BBA                            Obj69:					; XREF: Obj_Index
00015BBA 7000                       		moveq	#0,d0
00015BBC 1028 0024                  		move.b	$24(a0),d0
00015BC0 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015BC4 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015BC8                            ; ===========================================================================
00015BC8 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015BCA 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015BCC 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015BCE                            ; ===========================================================================
00015BCE                            
00015BCE                            Obj69_Main:				; XREF: Obj69_Index
00015BCE 5428 0024                  		addq.b	#2,$24(a0)
00015BD2 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015BDA 317C 4492 0002             		move.w	#$4492,2(a0)
00015BE0 0028 0004 0001             		ori.b	#4,1(a0)
00015BE6 117C 0080 0019             		move.b	#$80,$19(a0)
00015BEC 7000                       		moveq	#0,d0
00015BEE 1028 0028                  		move.b	$28(a0),d0
00015BF2 0240 000F                  		andi.w	#$F,d0
00015BF6 C0FC 003C                  		mulu.w	#$3C,d0
00015BFA 3140 0032                  		move.w	d0,$32(a0)
00015BFE 4A28 0028                  		tst.b	$28(a0)
00015C02 6A00                       		bpl.s	Obj69_Trapdoor
00015C04 5428 0024                  		addq.b	#2,$24(a0)
00015C08 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015C10 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015C16 117C 0010 0019             		move.b	#$10,$19(a0)
00015C1C 117C 0002 001C             		move.b	#2,$1C(a0)
00015C22 7000                       		moveq	#0,d0
00015C24 1028 0028                  		move.b	$28(a0),d0	; get object type
00015C28 3200                       		move.w	d0,d1
00015C2A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015C2E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015C32 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015C36 3140 0032                  		move.w	d0,$32(a0)
00015C3A 0241 0070                  		andi.w	#$70,d1
00015C3E 0641 0010                  		addi.w	#$10,d1
00015C42 E549                       		lsl.w	#2,d1
00015C44 5341                       		subq.w	#1,d1
00015C46 3141 0036                  		move.w	d1,$36(a0)
00015C4A 6000                       		bra.s	Obj69_Spinner
00015C4C                            ; ===========================================================================
00015C4C                            
00015C4C                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015C4C 5368 0030                  		subq.w	#1,$30(a0)
00015C50 6A00                       		bpl.s	Obj69_Animate
00015C52 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015C58 0868 0000 001C             		bchg	#0,$1C(a0)
00015C5E 4A28 0001                  		tst.b	1(a0)
00015C62 6A00                       		bpl.s	Obj69_Animate
00015C64 303C 00BB                  		move.w	#$BB,d0
00015C68 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015C6E                            
00015C6E                            Obj69_Animate:
00015C6E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015C74 4EB9 0000 AAF4             		jsr	AnimateSprite
00015C7A 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015C7E 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015C80 323C 004B                  		move.w	#$4B,d1
00015C84 343C 000C                  		move.w	#$C,d2
00015C88 3602                       		move.w	d2,d3
00015C8A 5243                       		addq.w	#1,d3
00015C8C 3828 0008                  		move.w	8(a0),d4
00015C90 6100 A180                  		bsr.w	SolidObject
00015C94 6000 9E54                  		bra.w	MarkObjGone
00015C98                            ; ===========================================================================
00015C98                            
00015C98                            Obj69_NotSolid:
00015C98 0828 0003 0022             		btst	#3,$22(a0)
00015C9E 6700                       		beq.s	Obj69_Display
00015CA0 43F8 D000                  		lea	($FFFFD000).w,a1
00015CA4 08A9 0003 0022             		bclr	#3,$22(a1)
00015CAA 08A8 0003 0022             		bclr	#3,$22(a0)
00015CB0 4228 0025                  		clr.b	$25(a0)
00015CB4                            
00015CB4                            Obj69_Display:
00015CB4 6000 9E34                  		bra.w	MarkObjGone
00015CB8                            ; ===========================================================================
00015CB8                            
00015CB8                            Obj69_Spinner:				; XREF: Obj69_Index
00015CB8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015CBC C068 0036                  		and.w	$36(a0),d0
00015CC0 6600                       		bne.s	Obj69_Delay
00015CC2 117C 0001 0034             		move.b	#1,$34(a0)
00015CC8                            
00015CC8                            Obj69_Delay:
00015CC8 4A28 0034                  		tst.b	$34(a0)
00015CCC 6700                       		beq.s	Obj69_Animate2
00015CCE 5368 0030                  		subq.w	#1,$30(a0)
00015CD2 6A00                       		bpl.s	Obj69_Animate2
00015CD4 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015CDA 4228 0034                  		clr.b	$34(a0)
00015CDE 0868 0000 001C             		bchg	#0,$1C(a0)
00015CE4                            
00015CE4                            Obj69_Animate2:
00015CE4 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015CEA 4EB9 0000 AAF4             		jsr	AnimateSprite
00015CF0 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015CF4 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015CF6 323C 001B                  		move.w	#$1B,d1
00015CFA 343C 0007                  		move.w	#7,d2
00015CFE 3602                       		move.w	d2,d3
00015D00 5243                       		addq.w	#1,d3
00015D02 3828 0008                  		move.w	8(a0),d4
00015D06 6100 A10A                  		bsr.w	SolidObject
00015D0A 6000 9DDE                  		bra.w	MarkObjGone
00015D0E                            ; ===========================================================================
00015D0E                            
00015D0E                            Obj69_NotSolid2:
00015D0E 0828 0003 0022             		btst	#3,$22(a0)
00015D14 6700                       		beq.s	Obj69_Display2
00015D16 43F8 D000                  		lea	($FFFFD000).w,a1
00015D1A 08A9 0003 0022             		bclr	#3,$22(a1)
00015D20 08A8 0003 0022             		bclr	#3,$22(a0)
00015D26 4228 0025                  		clr.b	$25(a0)
00015D2A                            
00015D2A                            Obj69_Display2:
00015D2A 6000 9DBE                  		bra.w	MarkObjGone
00015D2E                            ; ===========================================================================
00015D2E                            Ani_obj69:
00015D2E                            	include "_anim\obj69.asm"
00015D2E                            ; ---------------------------------------------------------------------------
00015D2E                            ; Animation script - trapdoor (SBZ)
00015D2E                            ; ---------------------------------------------------------------------------
00015D2E 0000                       		dc.w byte_158AC-Ani_obj69
00015D30 0000                       		dc.w byte_158B2-Ani_obj69
00015D32 0000                       		dc.w byte_158B8-Ani_obj69
00015D34 0000                       		dc.w byte_158CC-Ani_obj69
00015D36 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015D3C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015D42 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015D4F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015D56 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015D63 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015D6A                            		even
00015D6A                            		even
00015D6A                            
00015D6A                            ; ---------------------------------------------------------------------------
00015D6A                            ; Sprite mappings - trapdoor (SBZ)
00015D6A                            ; ---------------------------------------------------------------------------
00015D6A                            Map_obj69:
00015D6A                            	include "_maps\obj69.asm"
00015D6A                            ; ---------------------------------------------------------------------------
00015D6A                            ; Sprite mappings - trapdoor (SBZ)
00015D6A                            ; ---------------------------------------------------------------------------
00015D6A 0000                       		dc.w byte_158E6-Map_obj69
00015D6C 0000                       		dc.w byte_158FB-Map_obj69
00015D6E 0000                       		dc.w byte_15924-Map_obj69
00015D70 04                         byte_158E6:	dc.b 4
00015D71 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015D76 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015D7B F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015D80 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015D85 08                         byte_158FB:	dc.b 8
00015D86 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015D8B 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015D90 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015D95 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015D9A F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015D9F 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015DA4 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015DA9 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015DAE 04                         byte_15924:	dc.b 4
00015DAF 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015DB4 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015DB9 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015DBE 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015DC4 00                         		even
00015DC4 00                         		even
00015DC4                            
00015DC4                            ; ---------------------------------------------------------------------------
00015DC4                            ; Sprite mappings - spinning platforms (SBZ)
00015DC4                            ; ---------------------------------------------------------------------------
00015DC4                            Map_obj69a:
00015DC4                            	include "_maps\obj69a.asm"
00015DC4                            ; ---------------------------------------------------------------------------
00015DC4                            ; Sprite mappings - spinning platforms (SBZ)
00015DC4                            ; ---------------------------------------------------------------------------
00015DC4 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015DC8 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015DCC 0000                       		dc.w byte_15970-Map_obj69a
00015DCE 02                         byte_15944:	dc.b 2
00015DCF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015DD4 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015DD9 02                         byte_1594F:	dc.b 2
00015DDA F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015DDF 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015DE4 02                         byte_1595A:	dc.b 2
00015DE5 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015DEA 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015DEF 02                         byte_15965:	dc.b 2
00015DF0 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015DF5 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015DFA 02                         byte_15970:	dc.b 2
00015DFB F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015E00 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015E06 00                         		even
00015E06 00                         		even
00015E06                            
00015E06                            ; ===========================================================================
00015E06                            ; ---------------------------------------------------------------------------
00015E06                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015E06                            ; ---------------------------------------------------------------------------
00015E06                            
00015E06                            Obj6A:					; XREF: Obj_Index
00015E06 7000                       		moveq	#0,d0
00015E08 1028 0024                  		move.b	$24(a0),d0
00015E0C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015E10 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015E14                            ; ===========================================================================
00015E14 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015E16 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015E18                            ; ===========================================================================
00015E18                            
00015E18                            Obj6A_Main:				; XREF: Obj6A_Index
00015E18 5428 0024                  		addq.b	#2,$24(a0)
00015E1C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015E24 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015E2A 117C 0004 0001             		move.b	#4,1(a0)
00015E30 117C 0004 0018             		move.b	#4,$18(a0)
00015E36 117C 0020 0019             		move.b	#$20,$19(a0)
00015E3C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015E42 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015E48 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015E4E 6400                       		bcc.s	Obj6A_Action
00015E50 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015E56                            
00015E56                            Obj6A_Action:				; XREF: Obj6A_Index
00015E56 7000                       		moveq	#0,d0
00015E58 1028 0028                  		move.b	$28(a0),d0
00015E5C 0240 0007                  		andi.w	#7,d0
00015E60 D040                       		add.w	d0,d0
00015E62 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015E66 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015E6A 3028 003A                  		move.w	$3A(a0),d0
00015E6E 0240 FF80                  		andi.w	#$FF80,d0
00015E72 3238 F700                  		move.w	($FFFFF700).w,d1
00015E76 0441 0080                  		subi.w	#$80,d1
00015E7A 0241 FF80                  		andi.w	#$FF80,d1
00015E7E 9041                       		sub.w	d1,d0
00015E80 0C40 0280                  		cmpi.w	#$280,d0
00015E84 6200                       		bhi.s	Obj6A_Delete
00015E86 4EF9 0000 DA42             		jmp	DisplaySprite
00015E8C                            ; ===========================================================================
00015E8C                            
00015E8C                            Obj6A_Delete:
00015E8C 4EF9 0000 DA7E             		jmp	DeleteObject
00015E92                            ; ===========================================================================
00015E92 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015E96 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015E9A 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015E9C                            ; ===========================================================================
00015E9C                            
00015E9C                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015E9C 4E75                       		rts	
00015E9E                            ; ===========================================================================
00015E9E                            
00015E9E                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015E9E 323C 0060                  		move.w	#$60,d1
00015EA2 7000                       		moveq	#0,d0
00015EA4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015EA8 0828 0000 0022             		btst	#0,$22(a0)
00015EAE 6700                       		beq.s	Obj6A_Animate01
00015EB0 4440                       		neg.w	d0
00015EB2 D041                       		add.w	d1,d0
00015EB4                            
00015EB4                            Obj6A_Animate01:
00015EB4 3228 003A                  		move.w	$3A(a0),d1
00015EB8 9240                       		sub.w	d0,d1
00015EBA 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015EBE 5328 001E                  		subq.b	#1,$1E(a0)
00015EC2 6A00                       		bpl.s	loc_15A46
00015EC4 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015ECA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015ED0                            
00015ED0                            loc_15A46:
00015ED0 4A28 0001                  		tst.b	1(a0)
00015ED4 6A00                       		bpl.s	locret_15A60
00015ED6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015EDA 0240 000F                  		andi.w	#$F,d0
00015EDE 6600                       		bne.s	locret_15A60
00015EE0 303C 00B0                  		move.w	#$B0,d0
00015EE4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015EEA                            
00015EEA                            locret_15A60:
00015EEA 4E75                       		rts	
00015EEC                            ; ===========================================================================
00015EEC                            
00015EEC                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015EEC 323C 0030                  		move.w	#$30,d1
00015EF0 7000                       		moveq	#0,d0
00015EF2 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015EF6 0828 0000 0022             		btst	#0,$22(a0)
00015EFC 6700                       		beq.s	Obj6A_Animate02
00015EFE 4440                       		neg.w	d0
00015F00 0640 0080                  		addi.w	#$80,d0
00015F04                            
00015F04                            Obj6A_Animate02:
00015F04 3228 0038                  		move.w	$38(a0),d1
00015F08 9240                       		sub.w	d0,d1
00015F0A 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015F0E 5328 001E                  		subq.b	#1,$1E(a0)
00015F12 6A00                       		bpl.s	loc_15A96
00015F14 117C 0002 001E             		move.b	#2,$1E(a0)
00015F1A 0868 0000 001A             		bchg	#0,$1A(a0)
00015F20                            
00015F20                            loc_15A96:
00015F20 4A28 0001                  		tst.b	1(a0)
00015F24 6A00                       		bpl.s	locret_15AB0
00015F26 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015F2A 0C00 0018                  		cmpi.b	#$18,d0
00015F2E 6600                       		bne.s	locret_15AB0
00015F30 303C 00B0                  		move.w	#$B0,d0
00015F34 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015F3A                            
00015F3A                            locret_15AB0:
00015F3A 4E75                       		rts	
00015F3C                            ; ===========================================================================
00015F3C                            
00015F3C                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015F3C 4A28 003D                  		tst.b	$3D(a0)
00015F40 6600                       		bne.s	Obj6A_Animate03
00015F42 3038 D008                  		move.w	($FFFFD008).w,d0
00015F46 0440 00C0                  		subi.w	#$C0,d0
00015F4A 6500                       		bcs.s	loc_15B02
00015F4C 9068 0008                  		sub.w	8(a0),d0
00015F50 6500                       		bcs.s	loc_15B02
00015F52 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015F56 0440 0080                  		subi.w	#$80,d0
00015F5A B068 000C                  		cmp.w	$C(a0),d0
00015F5E 6400                       		bcc.s	locret_15B04
00015F60 0640 0100                  		addi.w	#$100,d0
00015F64 B068 000C                  		cmp.w	$C(a0),d0
00015F68 6500                       		bcs.s	locret_15B04
00015F6A 117C 0001 003D             		move.b	#1,$3D(a0)
00015F70 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015F76 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F7C 117C 0002 001A             		move.b	#2,$1A(a0)
00015F82 303C 00B0                  		move.w	#$B0,d0
00015F86 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015F8C                            
00015F8C                            loc_15B02:
00015F8C 588F                       		addq.l	#4,sp
00015F8E                            
00015F8E                            locret_15B04:
00015F8E 4E75                       		rts	
00015F90                            ; ===========================================================================
00015F90                            
00015F90                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015F90 4EB9 0000 DA1C             		jsr	SpeedToPos
00015F96 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F9C 5328 001E                  		subq.b	#1,$1E(a0)
00015FA0 6A00                       		bpl.s	locret_15B24
00015FA2 117C 0002 001E             		move.b	#2,$1E(a0)
00015FA8 0868 0000 001A             		bchg	#0,$1A(a0)
00015FAE                            
00015FAE                            locret_15B24:
00015FAE 4E75                       		rts	
00015FB0                            ; ===========================================================================
00015FB0                            
00015FB0                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015FB0 4A28 003D                  		tst.b	$3D(a0)
00015FB4 6600                       		bne.s	Obj6A_Animate04
00015FB6 3038 D008                  		move.w	($FFFFD008).w,d0
00015FBA 0640 00E0                  		addi.w	#$E0,d0
00015FBE 9068 0008                  		sub.w	8(a0),d0
00015FC2 6400                       		bcc.s	loc_15B74
00015FC4 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015FC8 0440 0080                  		subi.w	#$80,d0
00015FCC B068 000C                  		cmp.w	$C(a0),d0
00015FD0 6400                       		bcc.s	locret_15B76
00015FD2 0640 0100                  		addi.w	#$100,d0
00015FD6 B068 000C                  		cmp.w	$C(a0),d0
00015FDA 6500                       		bcs.s	locret_15B76
00015FDC 117C 0001 003D             		move.b	#1,$3D(a0)
00015FE2 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015FE8 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FEE 117C 0002 001A             		move.b	#2,$1A(a0)
00015FF4 303C 00B0                  		move.w	#$B0,d0
00015FF8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015FFE                            
00015FFE                            loc_15B74:
00015FFE 588F                       		addq.l	#4,sp
00016000                            
00016000                            locret_15B76:
00016000 4E75                       		rts	
00016002                            ; ===========================================================================
00016002                            
00016002                            Obj6A_Animate04:
00016002 4EB9 0000 DA1C             		jsr	SpeedToPos
00016008 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001600E 5328 001E                  		subq.b	#1,$1E(a0)
00016012 6A00                       		bpl.s	locret_15B96
00016014 117C 0002 001E             		move.b	#2,$1E(a0)
0001601A 0868 0000 001A             		bchg	#0,$1A(a0)
00016020                            
00016020                            locret_15B96:
00016020 4E75                       		rts	
00016022                            ; ===========================================================================
00016022                            ; ---------------------------------------------------------------------------
00016022                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016022                            ; ---------------------------------------------------------------------------
00016022                            Map_obj6A:
00016022                            	include "_maps\obj6A.asm"
00016022                            ; ---------------------------------------------------------------------------
00016022                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016022                            ; ---------------------------------------------------------------------------
00016022 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016026 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001602A 07                         byte_15BA0:	dc.b 7
0001602B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016030 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016035 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001603A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001603F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016044 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016049 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001604E 07                         byte_15BC4:	dc.b 7
0001604F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016054 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016059 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001605E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016063 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016068 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001606D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016072 04                         byte_15BE8:	dc.b 4
00016073 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016078 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001607D 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016082 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016087 04                         byte_15BFD:	dc.b 4
00016088 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001608D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016092 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016097 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001609C                            		even
0001609C                            		even
0001609C                            
0001609C                            ; ===========================================================================
0001609C                            ; ---------------------------------------------------------------------------
0001609C                            ; Object 6B - stomper (SBZ)
0001609C                            ; ---------------------------------------------------------------------------
0001609C                            
0001609C                            Obj6B:					; XREF: Obj_Index
0001609C 7000                       		moveq	#0,d0
0001609E 1028 0024                  		move.b	$24(a0),d0
000160A2 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000160A6 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000160AA                            ; ===========================================================================
000160AA 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000160AC 0000                       		dc.w Obj6B_Action-Obj6B_Index
000160AE                            
000160AE 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000160B2 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000160B6 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000160BA 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000160BE 8040 0005                  		dc.b  $80, $40,	  0,   5
000160C2                            ; ===========================================================================
000160C2                            
000160C2                            Obj6B_Main:				; XREF: Obj6B_Index
000160C2 5428 0024                  		addq.b	#2,$24(a0)
000160C6 7000                       		moveq	#0,d0
000160C8 1028 0028                  		move.b	$28(a0),d0
000160CC E448                       		lsr.w	#2,d0
000160CE 0240 001C                  		andi.w	#$1C,d0
000160D2 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000160D6 115B 0019                  		move.b	(a3)+,$19(a0)
000160DA 115B 0016                  		move.b	(a3)+,$16(a0)
000160DE E448                       		lsr.w	#2,d0
000160E0 1140 001A                  		move.b	d0,$1A(a0)
000160E4 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000160EC 317C 22C0 0002             		move.w	#$22C0,2(a0)
000160F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000160F8 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000160FA 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016100 6700                       		beq.s	Obj6B_SBZ3
00016102                            
00016102                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016102 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016106 7000                       		moveq	#0,d0
00016108 1028 0023                  		move.b	$23(a0),d0
0001610C 6700                       		beq.s	Obj6B_Delete
0001610E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016114                            
00016114                            Obj6B_Delete:
00016114 4EF9 0000 DA7E             		jmp	DeleteObject
0001611A                            ; ===========================================================================
0001611A                            
0001611A                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001611A 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016120 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016126 6600                       		bne.s	Obj6B_SBZ12
00016128 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001612C 7000                       		moveq	#0,d0
0001612E 1028 0023                  		move.b	$23(a0),d0
00016132 6700                       		beq.s	Obj6B_SBZ12
00016134 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001613A 6700                       		beq.s	Obj6B_SBZ12
0001613C 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016140 60C0                       		bra.s	Obj6B_ChkGone
00016142                            ; ===========================================================================
00016142                            
00016142                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016142 0028 0004 0001             		ori.b	#4,1(a0)
00016148 117C 0004 0018             		move.b	#4,$18(a0)
0001614E 3168 0008 0034             		move.w	8(a0),$34(a0)
00016154 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001615A 7000                       		moveq	#0,d0
0001615C 101B                       		move.b	(a3)+,d0
0001615E 3140 003C                  		move.w	d0,$3C(a0)
00016162 7000                       		moveq	#0,d0
00016164 1028 0028                  		move.b	$28(a0),d0
00016168 6A00                       		bpl.s	Obj6B_Action
0001616A 0200 000F                  		andi.b	#$F,d0
0001616E 1140 003E                  		move.b	d0,$3E(a0)
00016172 1153 0028                  		move.b	(a3),$28(a0)
00016176 0C13 0005                  		cmpi.b	#5,(a3)
0001617A 6600                       		bne.s	Obj6B_ChkGone2
0001617C 08E8 0004 0001             		bset	#4,1(a0)
00016182                            
00016182                            Obj6B_ChkGone2:
00016182 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016186 7000                       		moveq	#0,d0
00016188 1028 0023                  		move.b	$23(a0),d0
0001618C 6700                       		beq.s	Obj6B_Action
0001618E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016194                            
00016194                            Obj6B_Action:				; XREF: Obj6B_Index
00016194 3F28 0008                  		move.w	8(a0),-(sp)
00016198 7000                       		moveq	#0,d0
0001619A 1028 0028                  		move.b	$28(a0),d0
0001619E 0240 000F                  		andi.w	#$F,d0
000161A2 D040                       		add.w	d0,d0
000161A4 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000161A8 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000161AC 381F                       		move.w	(sp)+,d4
000161AE 4A28 0001                  		tst.b	1(a0)
000161B2 6A00                       		bpl.s	Obj6B_ChkDel
000161B4 7200                       		moveq	#0,d1
000161B6 1228 0019                  		move.b	$19(a0),d1
000161BA 0641 000B                  		addi.w	#$B,d1
000161BE 7400                       		moveq	#0,d2
000161C0 1428 0016                  		move.b	$16(a0),d2
000161C4 3602                       		move.w	d2,d3
000161C6 5243                       		addq.w	#1,d3
000161C8 6100 9C48                  		bsr.w	SolidObject
000161CC                            
000161CC                            Obj6B_ChkDel:
000161CC 3028 0034                  		move.w	$34(a0),d0
000161D0 0240 FF80                  		andi.w	#$FF80,d0
000161D4 3238 F700                  		move.w	($FFFFF700).w,d1
000161D8 0441 0080                  		subi.w	#$80,d1
000161DC 0241 FF80                  		andi.w	#$FF80,d1
000161E0 9041                       		sub.w	d1,d0
000161E2 0C40 0280                  		cmpi.w	#$280,d0
000161E6 6200                       		bhi.s	loc_15D64
000161E8 4EF9 0000 DA42             		jmp	DisplaySprite
000161EE                            ; ===========================================================================
000161EE                            
000161EE                            loc_15D64:
000161EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000161F4 6600                       		bne.s	Obj6B_Delete2
000161F6 4238 F7CB                  		clr.b	($FFFFF7CB).w
000161FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000161FE 7000                       		moveq	#0,d0
00016200 1028 0023                  		move.b	$23(a0),d0
00016204 6700                       		beq.s	Obj6B_Delete2
00016206 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001620C                            
0001620C                            Obj6B_Delete2:
0001620C 4EF9 0000 DA7E             		jmp	DeleteObject
00016212                            ; ===========================================================================
00016212 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016216 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001621A 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001621E                            ; ===========================================================================
0001621E                            
0001621E                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001621E 4E75                       		rts	
00016220                            ; ===========================================================================
00016220                            
00016220                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016220 4A28 0038                  		tst.b	$38(a0)
00016224 6600                       		bne.s	loc_15DB4
00016226 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001622A 7000                       		moveq	#0,d0
0001622C 1028 003E                  		move.b	$3E(a0),d0
00016230 0832 0000 0000             		btst	#0,(a2,d0.w)
00016236 6700                       		beq.s	loc_15DC2
00016238 117C 0001 0038             		move.b	#1,$38(a0)
0001623E                            
0001623E                            loc_15DB4:
0001623E 3028 003C                  		move.w	$3C(a0),d0
00016242 B068 003A                  		cmp.w	$3A(a0),d0
00016246 6700                       		beq.s	loc_15DE0
00016248 5468 003A                  		addq.w	#2,$3A(a0)
0001624C                            
0001624C                            loc_15DC2:
0001624C 3028 003A                  		move.w	$3A(a0),d0
00016250 0828 0000 0022             		btst	#0,$22(a0)
00016256 6700                       		beq.s	loc_15DD4
00016258 4440                       		neg.w	d0
0001625A 0640 0080                  		addi.w	#$80,d0
0001625E                            
0001625E                            loc_15DD4:
0001625E 3228 0034                  		move.w	$34(a0),d1
00016262 9240                       		sub.w	d0,d1
00016264 3141 0008                  		move.w	d1,8(a0)
00016268 4E75                       		rts	
0001626A                            ; ===========================================================================
0001626A                            
0001626A                            loc_15DE0:
0001626A 5228 0028                  		addq.b	#1,$28(a0)
0001626E 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016274 4228 0038                  		clr.b	$38(a0)
00016278 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001627C 7000                       		moveq	#0,d0
0001627E 1028 0023                  		move.b	$23(a0),d0
00016282 67C8                       		beq.s	loc_15DC2
00016284 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001628A 60C0                       		bra.s	loc_15DC2
0001628C                            ; ===========================================================================
0001628C                            
0001628C                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001628C 4A28 0038                  		tst.b	$38(a0)
00016290 6600                       		bne.s	loc_15E14
00016292 5368 0036                  		subq.w	#1,$36(a0)
00016296 6600                       		bne.s	loc_15E1E
00016298 117C 0001 0038             		move.b	#1,$38(a0)
0001629E                            
0001629E                            loc_15E14:
0001629E 4A68 003A                  		tst.w	$3A(a0)
000162A2 6700                       		beq.s	loc_15E3C
000162A4 5568 003A                  		subq.w	#2,$3A(a0)
000162A8                            
000162A8                            loc_15E1E:
000162A8 3028 003A                  		move.w	$3A(a0),d0
000162AC 0828 0000 0022             		btst	#0,$22(a0)
000162B2 6700                       		beq.s	loc_15E30
000162B4 4440                       		neg.w	d0
000162B6 0640 0080                  		addi.w	#$80,d0
000162BA                            
000162BA                            loc_15E30:
000162BA 3228 0034                  		move.w	$34(a0),d1
000162BE 9240                       		sub.w	d0,d1
000162C0 3141 0008                  		move.w	d1,8(a0)
000162C4 4E75                       		rts	
000162C6                            ; ===========================================================================
000162C6                            
000162C6                            loc_15E3C:
000162C6 5328 0028                  		subq.b	#1,$28(a0)
000162CA 4228 0038                  		clr.b	$38(a0)
000162CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162D2 7000                       		moveq	#0,d0
000162D4 1028 0023                  		move.b	$23(a0),d0
000162D8 67CE                       		beq.s	loc_15E1E
000162DA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000162E0 60C6                       		bra.s	loc_15E1E
000162E2                            ; ===========================================================================
000162E2                            
000162E2                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000162E2 4A28 0038                  		tst.b	$38(a0)
000162E6 6600                       		bne.s	loc_15E7C
000162E8 4A68 003A                  		tst.w	$3A(a0)
000162EC 6700                       		beq.s	loc_15E6A
000162EE 5368 003A                  		subq.w	#1,$3A(a0)
000162F2 6000                       		bra.s	loc_15E8E
000162F4                            ; ===========================================================================
000162F4                            
000162F4                            loc_15E6A:
000162F4 5368 0036                  		subq.w	#1,$36(a0)
000162F8 6A00                       		bpl.s	loc_15E8E
000162FA 317C 003C 0036             		move.w	#$3C,$36(a0)
00016300 117C 0001 0038             		move.b	#1,$38(a0)
00016306                            
00016306                            loc_15E7C:
00016306 5068 003A                  		addq.w	#8,$3A(a0)
0001630A 3028 003A                  		move.w	$3A(a0),d0
0001630E B068 003C                  		cmp.w	$3C(a0),d0
00016312 6600                       		bne.s	loc_15E8E
00016314 4228 0038                  		clr.b	$38(a0)
00016318                            
00016318                            loc_15E8E:
00016318 3028 003A                  		move.w	$3A(a0),d0
0001631C 0828 0000 0022             		btst	#0,$22(a0)
00016322 6700                       		beq.s	loc_15EA0
00016324 4440                       		neg.w	d0
00016326 0640 0038                  		addi.w	#$38,d0
0001632A                            
0001632A                            loc_15EA0:
0001632A 3228 0030                  		move.w	$30(a0),d1
0001632E D240                       		add.w	d0,d1
00016330 3141 000C                  		move.w	d1,$C(a0)
00016334 4E75                       		rts	
00016336                            ; ===========================================================================
00016336                            
00016336                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016336 4A28 0038                  		tst.b	$38(a0)
0001633A 6600                       		bne.s	loc_15ED0
0001633C 4A68 003A                  		tst.w	$3A(a0)
00016340 6700                       		beq.s	loc_15EBE
00016342 5168 003A                  		subq.w	#8,$3A(a0)
00016346 6000                       		bra.s	loc_15EF0
00016348                            ; ===========================================================================
00016348                            
00016348                            loc_15EBE:
00016348 5368 0036                  		subq.w	#1,$36(a0)
0001634C 6A00                       		bpl.s	loc_15EF0
0001634E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016354 117C 0001 0038             		move.b	#1,$38(a0)
0001635A                            
0001635A                            loc_15ED0:
0001635A 3028 003A                  		move.w	$3A(a0),d0
0001635E B068 003C                  		cmp.w	$3C(a0),d0
00016362 6700                       		beq.s	loc_15EE0
00016364 5068 003A                  		addq.w	#8,$3A(a0)
00016368 6000                       		bra.s	loc_15EF0
0001636A                            ; ===========================================================================
0001636A                            
0001636A                            loc_15EE0:
0001636A 5368 0036                  		subq.w	#1,$36(a0)
0001636E 6A00                       		bpl.s	loc_15EF0
00016370 317C 003C 0036             		move.w	#$3C,$36(a0)
00016376 4228 0038                  		clr.b	$38(a0)
0001637A                            
0001637A                            loc_15EF0:
0001637A 3028 003A                  		move.w	$3A(a0),d0
0001637E 0828 0000 0022             		btst	#0,$22(a0)
00016384 6700                       		beq.s	loc_15F02
00016386 4440                       		neg.w	d0
00016388 0640 0038                  		addi.w	#$38,d0
0001638C                            
0001638C                            loc_15F02:
0001638C 3228 0030                  		move.w	$30(a0),d1
00016390 D240                       		add.w	d0,d1
00016392 3141 000C                  		move.w	d1,$C(a0)
00016396 4E75                       		rts	
00016398                            ; ===========================================================================
00016398                            
00016398                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016398 4A28 0038                  		tst.b	$38(a0)
0001639C 6600                       		bne.s	loc_15F3E
0001639E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000163A2 7000                       		moveq	#0,d0
000163A4 1028 003E                  		move.b	$3E(a0),d0
000163A8 0832 0000 0000             		btst	#0,(a2,d0.w)
000163AE 6700                       		beq.s	locret_15F5C
000163B0 117C 0001 0038             		move.b	#1,$38(a0)
000163B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163BA 7000                       		moveq	#0,d0
000163BC 1028 0023                  		move.b	$23(a0),d0
000163C0 6700                       		beq.s	loc_15F3E
000163C2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163C8                            
000163C8                            loc_15F3E:
000163C8 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000163D0 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000163D8 3168 0008 0034             		move.w	8(a0),$34(a0)
000163DE 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000163E4 6700                       		beq.s	loc_15F5E
000163E6                            
000163E6                            locret_15F5C:
000163E6 4E75                       		rts	
000163E8                            ; ===========================================================================
000163E8                            
000163E8                            loc_15F5E:
000163E8 4228 0028                  		clr.b	$28(a0)
000163EC 4228 0038                  		clr.b	$38(a0)
000163F0 4E75                       		rts	
000163F2                            ; ===========================================================================
000163F2                            ; ---------------------------------------------------------------------------
000163F2                            ; Sprite mappings - stomper and	platforms (SBZ)
000163F2                            ; ---------------------------------------------------------------------------
000163F2                            Map_obj6B:
000163F2                            	include "_maps\obj6B.asm"
000163F2                            ; ---------------------------------------------------------------------------
000163F2                            ; Sprite mappings - stomper and	platforms (SBZ)
000163F2                            ; ---------------------------------------------------------------------------
000163F2 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000163F6 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000163FA 0000                       		dc.w byte_15FB0-Map_obj6B
000163FC 04                         byte_15F72:	dc.b 4
000163FD F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016402 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016407 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001640C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016411 08                         byte_15F87:	dc.b 8
00016412 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016417 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001641C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016421 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016426 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001642B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016430 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016435 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001643A 0E                         byte_15FB0:	dc.b $E
0001643B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016440 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016445 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001644A C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001644F C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016454 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016459 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001645E C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016463 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016468 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001646D E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016472 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016477 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001647C 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016482 00                         		even
00016482 00                         		even
00016482                            
00016482                            ; ===========================================================================
00016482                            ; ---------------------------------------------------------------------------
00016482                            ; Object 6C - vanishing	platforms (SBZ)
00016482                            ; ---------------------------------------------------------------------------
00016482                            
00016482                            Obj6C:					; XREF: Obj_Index
00016482 7000                       		moveq	#0,d0
00016484 1028 0024                  		move.b	$24(a0),d0
00016488 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001648C 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016490                            ; ===========================================================================
00016490 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016492 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016494 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016496 0000                       		dc.w loc_16068-Obj6C_Index
00016498                            ; ===========================================================================
00016498                            
00016498                            Obj6C_Main:				; XREF: Obj6C_Index
00016498 5C28 0024                  		addq.b	#6,$24(a0)
0001649C 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000164A4 317C 44C3 0002             		move.w	#$44C3,2(a0)
000164AA 0028 0004 0001             		ori.b	#4,1(a0)
000164B0 117C 0010 0019             		move.b	#$10,$19(a0)
000164B6 117C 0004 0018             		move.b	#4,$18(a0)
000164BC 7000                       		moveq	#0,d0
000164BE 1028 0028                  		move.b	$28(a0),d0	; get object type
000164C2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000164C6 5240                       		addq.w	#1,d0		; add 1
000164C8 EF48                       		lsl.w	#7,d0		; multiply by $80
000164CA 3200                       		move.w	d0,d1
000164CC 5340                       		subq.w	#1,d0
000164CE 3140 0030                  		move.w	d0,$30(a0)
000164D2 3140 0032                  		move.w	d0,$32(a0)
000164D6 7000                       		moveq	#0,d0
000164D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000164DC 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000164E0 0641 0080                  		addi.w	#$80,d1
000164E4 C0C1                       		mulu.w	d1,d0
000164E6 E088                       		lsr.l	#8,d0
000164E8 3140 0036                  		move.w	d0,$36(a0)
000164EC 5341                       		subq.w	#1,d1
000164EE 3141 0038                  		move.w	d1,$38(a0)
000164F2                            
000164F2                            loc_16068:				; XREF: Obj6C_Index
000164F2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000164F6 9068 0036                  		sub.w	$36(a0),d0
000164FA C068 0038                  		and.w	$38(a0),d0
000164FE 6600                       		bne.s	Obj6C_Animate
00016500 5928 0024                  		subq.b	#4,$24(a0)
00016504 6000                       		bra.s	Obj6C_Vanish
00016506                            ; ===========================================================================
00016506                            
00016506                            Obj6C_Animate:
00016506 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001650C 4EB9 0000 AAF4             		jsr	AnimateSprite
00016512 6000 95D6                  		bra.w	MarkObjGone
00016516                            ; ===========================================================================
00016516                            
00016516                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016516 5368 0030                  		subq.w	#1,$30(a0)
0001651A 6A00                       		bpl.s	loc_160AA
0001651C 317C 007F 0030             		move.w	#127,$30(a0)
00016522 4A28 001C                  		tst.b	$1C(a0)
00016526 6700                       		beq.s	loc_160A4
00016528 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001652E                            
0001652E                            loc_160A4:
0001652E 0868 0000 001C             		bchg	#0,$1C(a0)
00016534                            
00016534                            loc_160AA:
00016534 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001653A 4EB9 0000 AAF4             		jsr	AnimateSprite
00016540 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016546 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016548 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001654E 6600                       		bne.s	loc_160D6
00016550 7200                       		moveq	#0,d1
00016552 1228 0019                  		move.b	$19(a0),d1
00016556 4EB9 0000 77FA             		jsr	(PlatformObject).l
0001655C 6000 958C                  		bra.w	MarkObjGone
00016560                            ; ===========================================================================
00016560                            
00016560                            loc_160D6:
00016560 7200                       		moveq	#0,d1
00016562 1228 0019                  		move.b	$19(a0),d1
00016566 4EB9 0000 796E             		jsr	(ExitPlatform).l
0001656C 3428 0008                  		move.w	8(a0),d2
00016570 4EB9 0000 7ED8             		jsr	(MvSonicOnPtfm2).l
00016576 6000 9572                  		bra.w	MarkObjGone
0001657A                            ; ===========================================================================
0001657A                            
0001657A                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001657A 0828 0003 0022             		btst	#3,$22(a0)
00016580 6700                       		beq.s	Obj6C_Display
00016582 43F8 D000                  		lea	($FFFFD000).w,a1
00016586 08A9 0003 0022             		bclr	#3,$22(a1)
0001658C 08A8 0003 0022             		bclr	#3,$22(a0)
00016592 117C 0002 0024             		move.b	#2,$24(a0)
00016598 4228 0025                  		clr.b	$25(a0)
0001659C                            
0001659C                            Obj6C_Display:
0001659C 6000 954C                  		bra.w	MarkObjGone
000165A0                            ; ===========================================================================
000165A0                            Ani_obj6C:
000165A0                            	include "_anim\obj6C.asm"
000165A0                            ; ---------------------------------------------------------------------------
000165A0                            ; Animation script - vanishing platforms (SBZ)
000165A0                            ; ---------------------------------------------------------------------------
000165A0 0000                       		dc.w byte_1611A-Ani_obj6C
000165A2 0000                       		dc.w byte_16122-Ani_obj6C
000165A4 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000165AC 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000165B4                            		even
000165B4                            		even
000165B4                            
000165B4                            ; ---------------------------------------------------------------------------
000165B4                            ; Sprite mappings - vanishing platforms	(SBZ)
000165B4                            ; ---------------------------------------------------------------------------
000165B4                            Map_obj6C:
000165B4                            	include "_maps\obj6C.asm"
000165B4                            ; ---------------------------------------------------------------------------
000165B4                            ; Sprite mappings - vanishing platforms	(SBZ)
000165B4                            ; ---------------------------------------------------------------------------
000165B4 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000165B8 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000165BC 01                         byte_16132:	dc.b 1
000165BD F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000165C2 01                         byte_16138:	dc.b 1
000165C3 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000165C8 01                         byte_1613E:	dc.b 1
000165C9 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000165CE 00                         byte_16144:	dc.b 0
000165D0 00                         		even
000165D0 00                         		even
000165D0                            
000165D0                            ; ===========================================================================
000165D0                            ; ---------------------------------------------------------------------------
000165D0                            ; Object 6E - electrocution orbs (SBZ)
000165D0                            ; ---------------------------------------------------------------------------
000165D0                            
000165D0                            Obj6E:					; XREF: Obj_Index
000165D0 7000                       		moveq	#0,d0
000165D2 1028 0024                  		move.b	$24(a0),d0
000165D6 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000165DA 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000165DE                            ; ===========================================================================
000165DE 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000165E0 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000165E2                            ; ===========================================================================
000165E2                            
000165E2                            Obj6E_Main:				; XREF: Obj6E_Index
000165E2 5428 0024                  		addq.b	#2,$24(a0)
000165E6 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000165EE 317C 047E 0002             		move.w	#$47E,2(a0)
000165F4 0028 0004 0001             		ori.b	#4,1(a0)
000165FA 117C 0028 0019             		move.b	#$28,$19(a0)
00016600 7000                       		moveq	#0,d0
00016602 1028 0028                  		move.b	$28(a0),d0	; read object type
00016606 E948                       		lsl.w	#4,d0		; multiply by $10
00016608 5340                       		subq.w	#1,d0
0001660A 3140 0034                  		move.w	d0,$34(a0)
0001660E                            
0001660E                            Obj6E_Shock:				; XREF: Obj6E_Index
0001660E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016612 C068 0034                  		and.w	$34(a0),d0
00016616 6600                       		bne.s	Obj6E_Animate
00016618 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001661E 4A28 0001                  		tst.b	1(a0)
00016622 6A00                       		bpl.s	Obj6E_Animate
00016624 303C 00B1                  		move.w	#$B1,d0
00016628 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
0001662E                            
0001662E                            Obj6E_Animate:
0001662E 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016634 4EB9 0000 AAF4             		jsr	AnimateSprite
0001663A 117C 0000 0020             		move.b	#0,$20(a0)
00016640 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016646 6600                       		bne.s	Obj6E_Display	; if not, branch
00016648 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001664E                            
0001664E                            Obj6E_Display:
0001664E 6000 949A                  		bra.w	MarkObjGone
00016652                            ; ===========================================================================
00016652                            Ani_obj6E:
00016652                            	include "_anim\obj6E.asm"
00016652                            ; ---------------------------------------------------------------------------
00016652                            ; Animation script - electrocution orbs (SBZ)
00016652                            ; ---------------------------------------------------------------------------
00016652 0000                       		dc.w byte_161CC-Ani_obj6E
00016654 0000                       		dc.w byte_161D0-Ani_obj6E
00016656 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001665A 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001666A                            		even
0001666A                            		even
0001666A                            
0001666A                            ; ---------------------------------------------------------------------------
0001666A                            ; Sprite mappings - electrocution orbs (SBZ)
0001666A                            ; ---------------------------------------------------------------------------
0001666A                            Map_obj6E:
0001666A                            	include "_maps\obj6E.asm"
0001666A                            ; ---------------------------------------------------------------------------
0001666A                            ; Sprite mappings - electrocution orbs (SBZ)
0001666A                            ; ---------------------------------------------------------------------------
0001666A 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001666E 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016672 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016676 02                         byte_161EC:	dc.b 2
00016677 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001667C 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016681 03                         byte_161F7:	dc.b 3
00016682 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016687 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001668C 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016691 05                         byte_16207:	dc.b 5
00016692 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016697 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001669C 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000166A1 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000166A6 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000166AB 04                         byte_16221:	dc.b 4
000166AC F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000166B1 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000166B6 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000166BB F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000166C0 06                         byte_16236:	dc.b 6
000166C1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000166C6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000166CB F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000166D0 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000166D5 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000166DA F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000166DF 04                         byte_16255:	dc.b 4
000166E0 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000166E5 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000166EA F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000166EF F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000166F4                            		even
000166F4                            		even
000166F4                            
000166F4                            ; ===========================================================================
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            
000166F4                            Obj6F:					; XREF: Obj_Index
000166F4 7000                       		moveq	#0,d0
000166F6 1028 0024                  		move.b	$24(a0),d0
000166FA 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000166FE 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016702 3028 0030                  		move.w	$30(a0),d0
00016706 0240 FF80                  		andi.w	#$FF80,d0
0001670A 3238 F700                  		move.w	($FFFFF700).w,d1
0001670E 0441 0080                  		subi.w	#$80,d1
00016712 0241 FF80                  		andi.w	#$FF80,d1
00016716 9041                       		sub.w	d1,d0
00016718 0C40 0280                  		cmpi.w	#$280,d0
0001671C 6200                       		bhi.s	loc_1629A
0001671E                            
0001671E                            Obj6F_Display:
0001671E 4EF9 0000 DA42             		jmp	DisplaySprite
00016724                            ; ===========================================================================
00016724                            
00016724                            loc_1629A:
00016724 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001672A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001672C 0C40 FF80                  		cmpi.w	#-$80,d0
00016730 64EC                       		bcc.s	Obj6F_Display
00016732                            
00016732                            Obj6F_Act1or2:
00016732 1028 002F                  		move.b	$2F(a0),d0
00016736 6A00                       		bpl.s	Obj6F_Delete
00016738 0240 007F                  		andi.w	#$7F,d0
0001673C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016740 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016746                            
00016746                            Obj6F_Delete:
00016746 4EF9 0000 DA7E             		jmp	DeleteObject
0001674C                            ; ===========================================================================
0001674C 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001674E 0000                       		dc.w loc_163D8-Obj6F_Index
00016750                            ; ===========================================================================
00016750                            
00016750                            Obj6F_Main:				; XREF: Obj6F_Index
00016750 1028 0028                  		move.b	$28(a0),d0
00016754 6B00 0000                  		bmi.w	loc_16380
00016758 5428 0024                  		addq.b	#2,$24(a0)
0001675C 217C 0001 5DC4 0004        		move.l	#Map_obj69a,4(a0)
00016764 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001676A 117C 0010 0019             		move.b	#$10,$19(a0)
00016770 0028 0004 0001             		ori.b	#4,1(a0)
00016776 117C 0004 0018             		move.b	#4,$18(a0)
0001677C 7000                       		moveq	#0,d0
0001677E 1028 0028                  		move.b	$28(a0),d0
00016782 3200                       		move.w	d0,d1
00016784 E648                       		lsr.w	#3,d0
00016786 0240 001E                  		andi.w	#$1E,d0
0001678A 45FA 0000                  		lea	off_164A6(pc),a2
0001678E D4F2 0000                  		adda.w	(a2,d0.w),a2
00016792 315A 0038                  		move.w	(a2)+,$38(a0)
00016796 315A 0030                  		move.w	(a2)+,$30(a0)
0001679A 214A 003C                  		move.l	a2,$3C(a0)
0001679E 0241 000F                  		andi.w	#$F,d1
000167A2 E549                       		lsl.w	#2,d1
000167A4 1141 0038                  		move.b	d1,$38(a0)
000167A8 117C 0004 003A             		move.b	#4,$3A(a0)
000167AE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000167B2 6700                       		beq.s	loc_16356
000167B4 117C 0001 003B             		move.b	#1,$3B(a0)
000167BA 4428 003A                  		neg.b	$3A(a0)
000167BE 7200                       		moveq	#0,d1
000167C0 1228 0038                  		move.b	$38(a0),d1
000167C4 D228 003A                  		add.b	$3A(a0),d1
000167C8 B228 0039                  		cmp.b	$39(a0),d1
000167CC 6500                       		bcs.s	loc_16352
000167CE 1001                       		move.b	d1,d0
000167D0 7200                       		moveq	#0,d1
000167D2 4A00                       		tst.b	d0
000167D4 6A00                       		bpl.s	loc_16352
000167D6 1228 0039                  		move.b	$39(a0),d1
000167DA 5901                       		subq.b	#4,d1
000167DC                            
000167DC                            loc_16352:
000167DC 1141 0038                  		move.b	d1,$38(a0)
000167E0                            
000167E0                            loc_16356:
000167E0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000167E6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000167EC 4A41                       		tst.w	d1
000167EE 6600                       		bne.s	loc_1636C
000167F0 117C 0001 001C             		move.b	#1,$1C(a0)
000167F6                            
000167F6                            loc_1636C:
000167F6 0C41 0008                  		cmpi.w	#8,d1
000167FA 6600                       		bne.s	loc_16378
000167FC 117C 0000 001C             		move.b	#0,$1C(a0)
00016802                            
00016802                            loc_16378:
00016802 6100 C186                  		bsr.w	Obj63_ChangeDir
00016806 6000 0000                  		bra.w	loc_163D8
0001680A                            ; ===========================================================================
0001680A                            
0001680A                            loc_16380:				; XREF: Obj6F_Main
0001680A 1140 002F                  		move.b	d0,$2F(a0)
0001680E 0240 007F                  		andi.w	#$7F,d0
00016812 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016816 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001681C 6700                       		beq.s	loc_1639A
0001681E 4EF9 0000 DA7E             		jmp	DeleteObject
00016824                            ; ===========================================================================
00016824                            
00016824                            loc_1639A:
00016824 D040                       		add.w	d0,d0
00016826 0240 001E                  		andi.w	#$1E,d0
0001682A 0640 0080                  		addi.w	#$80,d0
0001682E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016834 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016838 321A                       		move.w	(a2)+,d1
0001683A 2248                       		movea.l	a0,a1
0001683C 6000                       		bra.s	Obj6F_LoadPform
0001683E                            ; ===========================================================================
0001683E                            
0001683E                            Obj6F_Loop:
0001683E 4EB9 0000 DEC8             		jsr	SingleObjLoad
00016844 6600                       		bne.s	loc_163D0
00016846                            
00016846                            Obj6F_LoadPform:			; XREF: loc_1639A
00016846 12BC 006F                  		move.b	#$6F,0(a1)
0001684A 335A 0008                  		move.w	(a2)+,8(a1)
0001684E 335A 000C                  		move.w	(a2)+,$C(a1)
00016852 301A                       		move.w	(a2)+,d0
00016854 1340 0028                  		move.b	d0,$28(a1)
00016858                            
00016858                            loc_163D0:
00016858 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001685C                            
0001685C 588F                       		addq.l	#4,sp
0001685E 4E75                       		rts	
00016860                            ; ===========================================================================
00016860                            
00016860                            loc_163D8:				; XREF: Obj6F_Index
00016860 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016866 4EB9 0000 AAF4             		jsr	AnimateSprite
0001686C 4A28 001A                  		tst.b	$1A(a0)
00016870 6600                       		bne.s	loc_16404
00016872 3F28 0008                  		move.w	8(a0),-(sp)
00016876 6100 0000                  		bsr.w	loc_16424
0001687A 323C 001B                  		move.w	#$1B,d1
0001687E 343C 0007                  		move.w	#7,d2
00016882 3602                       		move.w	d2,d3
00016884 5243                       		addq.w	#1,d3
00016886 381F                       		move.w	(sp)+,d4
00016888 6000 9588                  		bra.w	SolidObject
0001688C                            ; ===========================================================================
0001688C                            
0001688C                            loc_16404:
0001688C 0828 0003 0022             		btst	#3,$22(a0)
00016892 6700                       		beq.s	loc_16420
00016894 43F8 D000                  		lea	($FFFFD000).w,a1
00016898 08A9 0003 0022             		bclr	#3,$22(a1)
0001689E 08A8 0003 0022             		bclr	#3,$22(a0)
000168A4 4228 0025                  		clr.b	$25(a0)
000168A8                            
000168A8                            loc_16420:
000168A8 6000 0002                  		bra.w	*+4
000168AC                            
000168AC                            loc_16424:
000168AC 3028 0008                  		move.w	8(a0),d0
000168B0 B068 0034                  		cmp.w	$34(a0),d0
000168B4 6600                       		bne.s	loc_16484
000168B6 3028 000C                  		move.w	$C(a0),d0
000168BA B068 0036                  		cmp.w	$36(a0),d0
000168BE 6600                       		bne.s	loc_16484
000168C0 7200                       		moveq	#0,d1
000168C2 1228 0038                  		move.b	$38(a0),d1
000168C6 D228 003A                  		add.b	$3A(a0),d1
000168CA B228 0039                  		cmp.b	$39(a0),d1
000168CE 6500                       		bcs.s	loc_16456
000168D0 1001                       		move.b	d1,d0
000168D2 7200                       		moveq	#0,d1
000168D4 4A00                       		tst.b	d0
000168D6 6A00                       		bpl.s	loc_16456
000168D8 1228 0039                  		move.b	$39(a0),d1
000168DC 5901                       		subq.b	#4,d1
000168DE                            
000168DE                            loc_16456:
000168DE 1141 0038                  		move.b	d1,$38(a0)
000168E2 2268 003C                  		movea.l	$3C(a0),a1
000168E6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000168EC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000168F2 4A41                       		tst.w	d1
000168F4 6600                       		bne.s	loc_16474
000168F6 117C 0001 001C             		move.b	#1,$1C(a0)
000168FC                            
000168FC                            loc_16474:
000168FC 0C41 0008                  		cmpi.w	#8,d1
00016900 6600                       		bne.s	loc_16480
00016902 117C 0000 001C             		move.b	#0,$1C(a0)
00016908                            
00016908                            loc_16480:
00016908 6100 C080                  		bsr.w	Obj63_ChangeDir
0001690C                            
0001690C                            loc_16484:
0001690C 4EF9 0000 DA1C             		jmp	SpeedToPos
00016912                            ; ===========================================================================
00016912                            Ani_obj6F:
00016912                            	include "_anim\obj6F.asm"
00016912                            ; ---------------------------------------------------------------------------
00016912                            ; Animation script - platform on conveyor belt (SBZ)
00016912                            ; ---------------------------------------------------------------------------
00016912 0000                       		dc.w byte_1648E-Ani_obj6F
00016914 0000                       		dc.w byte_164A2-Ani_obj6F
00016916 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016923 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001692A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001692E 00                         		even
0001692E 00                         		even
0001692E                            
0001692E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016934 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001693A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001694E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016962 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016976 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001698A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001699E 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000169B2                            ; ===========================================================================
000169B2                            ; ---------------------------------------------------------------------------
000169B2                            ; Object 70 - large girder block (SBZ)
000169B2                            ; ---------------------------------------------------------------------------
000169B2                            
000169B2                            Obj70:					; XREF: Obj_Index
000169B2 7000                       		moveq	#0,d0
000169B4 1028 0024                  		move.b	$24(a0),d0
000169B8 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000169BC 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000169C0                            ; ===========================================================================
000169C0 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000169C2 0000                       		dc.w Obj70_Action-Obj70_Index
000169C4                            ; ===========================================================================
000169C4                            
000169C4                            Obj70_Main:				; XREF: Obj70_Index
000169C4 5428 0024                  		addq.b	#2,$24(a0)
000169C8 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000169D0 317C 42F0 0002             		move.w	#$42F0,2(a0)
000169D6 0028 0004 0001             		ori.b	#4,1(a0)
000169DC 117C 0004 0018             		move.b	#4,$18(a0)
000169E2 117C 0060 0019             		move.b	#$60,$19(a0)
000169E8 117C 0018 0016             		move.b	#$18,$16(a0)
000169EE 3168 0008 0032             		move.w	8(a0),$32(a0)
000169F4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000169FA 6100 0000                  		bsr.w	Obj70_Move2
000169FE                            
000169FE                            Obj70_Action:				; XREF: Obj70_Index
000169FE 3F28 0008                  		move.w	8(a0),-(sp)
00016A02 4A68 003A                  		tst.w	$3A(a0)
00016A06 6700                       		beq.s	Obj70_Move
00016A08 5368 003A                  		subq.w	#1,$3A(a0)
00016A0C 6600                       		bne.s	Obj70_Solid
00016A0E                            
00016A0E                            Obj70_Move:
00016A0E 4EB9 0000 DA1C             		jsr	SpeedToPos
00016A14 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016A18 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016A1A 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016A1E                            
00016A1E                            Obj70_Solid:
00016A1E 381F                       		move.w	(sp)+,d4
00016A20 4A28 0001                  		tst.b	1(a0)
00016A24 6A00                       		bpl.s	Obj70_ChkDel
00016A26 7200                       		moveq	#0,d1
00016A28 1228 0019                  		move.b	$19(a0),d1
00016A2C 0641 000B                  		addi.w	#$B,d1
00016A30 7400                       		moveq	#0,d2
00016A32 1428 0016                  		move.b	$16(a0),d2
00016A36 3602                       		move.w	d2,d3
00016A38 5243                       		addq.w	#1,d3
00016A3A 6100 93D6                  		bsr.w	SolidObject
00016A3E                            
00016A3E                            Obj70_ChkDel:
00016A3E 3028 0032                  		move.w	$32(a0),d0
00016A42 0240 FF80                  		andi.w	#$FF80,d0
00016A46 3238 F700                  		move.w	($FFFFF700).w,d1
00016A4A 0441 0080                  		subi.w	#$80,d1
00016A4E 0241 FF80                  		andi.w	#$FF80,d1
00016A52 9041                       		sub.w	d1,d0
00016A54 0C40 0280                  		cmpi.w	#$280,d0
00016A58 6200                       		bhi.s	Obj70_Delete
00016A5A 4EF9 0000 DA42             		jmp	DisplaySprite
00016A60                            ; ===========================================================================
00016A60                            
00016A60                            Obj70_Delete:
00016A60 4EF9 0000 DA7E             		jmp	DeleteObject
00016A66                            ; ===========================================================================
00016A66                            
00016A66                            Obj70_Move2:				; XREF: Obj70_Main
00016A66 1028 0038                  		move.b	$38(a0),d0
00016A6A 0240 0018                  		andi.w	#$18,d0
00016A6E 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016A74 43F1 0000                  		lea	(a1,d0.w),a1
00016A78 3159 0010                  		move.w	(a1)+,$10(a0)
00016A7C 3159 0012                  		move.w	(a1)+,$12(a0)
00016A80 3159 0034                  		move.w	(a1)+,$34(a0)
00016A84 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016A88 317C 0007 003A             		move.w	#7,$3A(a0)
00016A8E 4E75                       		rts	
00016A90                            ; ===========================================================================
00016A90 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016A98 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016AA0 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016AA8 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016AB0                            ; ---------------------------------------------------------------------------
00016AB0                            ; Sprite mappings - large girder block (SBZ)
00016AB0                            ; ---------------------------------------------------------------------------
00016AB0                            Map_obj70:
00016AB0                            	include "_maps\obj70.asm"
00016AB0                            ; ---------------------------------------------------------------------------
00016AB0                            ; Sprite mappings - large girder block (SBZ)
00016AB0                            ; ---------------------------------------------------------------------------
00016AB0 0000                       		dc.w byte_1662A-Map_obj70
00016AB2 0C                         byte_1662A:	dc.b $C
00016AB3 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016AB8 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016ABD E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016AC2 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016AC7 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016ACC 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016AD1 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016AD6 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016ADB E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016AE0 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016AE5 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016AEA 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016AF0 00                         		even
00016AF0 00                         		even
00016AF0                            
00016AF0                            ; ===========================================================================
00016AF0                            ; ---------------------------------------------------------------------------
00016AF0                            ; Object 72 - teleporter (SBZ)
00016AF0                            ; ---------------------------------------------------------------------------
00016AF0                            
00016AF0                            Obj72:					; XREF: Obj_Index
00016AF0 7000                       		moveq	#0,d0
00016AF2 1028 0024                  		move.b	$24(a0),d0
00016AF6 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016AFA 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016AFE 3028 0008                  		move.w	8(a0),d0
00016B02 0240 FF80                  		andi.w	#$FF80,d0
00016B06 3238 F700                  		move.w	($FFFFF700).w,d1
00016B0A 0441 0080                  		subi.w	#$80,d1
00016B0E 0241 FF80                  		andi.w	#$FF80,d1
00016B12 9041                       		sub.w	d1,d0
00016B14 0C40 0280                  		cmpi.w	#$280,d0
00016B18 6200                       		bhi.s	Obj72_Delete
00016B1A 4E75                       		rts	
00016B1C                            ; ===========================================================================
00016B1C                            
00016B1C                            Obj72_Delete:
00016B1C 4EF9 0000 DA7E             		jmp	DeleteObject
00016B22                            ; ===========================================================================
00016B22 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016B24 0000                       		dc.w loc_166C8-Obj72_Index
00016B26 0000                       		dc.w loc_1675E-Obj72_Index
00016B28 0000                       		dc.w loc_16798-Obj72_Index
00016B2A                            ; ===========================================================================
00016B2A                            
00016B2A                            Obj72_Main:				; XREF: Obj72_Index
00016B2A 5428 0024                  		addq.b	#2,$24(a0)
00016B2E 1028 0028                  		move.b	$28(a0),d0
00016B32 D040                       		add.w	d0,d0
00016B34 0240 001E                  		andi.w	#$1E,d0
00016B38 45FA 0000                  		lea	Obj72_Data(pc),a2
00016B3C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B40 315A 003A                  		move.w	(a2)+,$3A(a0)
00016B44 214A 003C                  		move.l	a2,$3C(a0)
00016B48 315A 0036                  		move.w	(a2)+,$36(a0)
00016B4C 315A 0038                  		move.w	(a2)+,$38(a0)
00016B50                            
00016B50                            loc_166C8:				; XREF: Obj72_Index
00016B50 43F8 D000                  		lea	($FFFFD000).w,a1
00016B54 3029 0008                  		move.w	8(a1),d0
00016B58 9068 0008                  		sub.w	8(a0),d0
00016B5C 0828 0000 0022             		btst	#0,$22(a0)
00016B62 6700                       		beq.s	loc_166E0
00016B64 0640 000F                  		addi.w	#$F,d0
00016B68                            
00016B68                            loc_166E0:
00016B68 0C40 0010                  		cmpi.w	#$10,d0
00016B6C 6400                       		bcc.s	locret_1675C
00016B6E 3229 000C                  		move.w	$C(a1),d1
00016B72 9268 000C                  		sub.w	$C(a0),d1
00016B76 0641 0020                  		addi.w	#$20,d1
00016B7A 0C41 0040                  		cmpi.w	#$40,d1
00016B7E 6400                       		bcc.s	locret_1675C
00016B80 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016B84 6600                       		bne.s	locret_1675C
00016B86 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016B8C 6600                       		bne.s	loc_1670E
00016B8E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016B94 6500                       		bcs.s	locret_1675C
00016B96                            
00016B96                            loc_1670E:
00016B96 5428 0024                  		addq.b	#2,$24(a0)
00016B9A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016BA0 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016BA6 337C 0800 0014             		move.w	#$800,$14(a1)
00016BAC 337C 0000 0010             		move.w	#0,$10(a1)
00016BB2 337C 0000 0012             		move.w	#0,$12(a1)
00016BB8 08A8 0005 0022             		bclr	#5,$22(a0)
00016BBE 08A9 0005 0022             		bclr	#5,$22(a1)
00016BC4 08E9 0001 0022             		bset	#1,$22(a1)
00016BCA 3368 0008 0008             		move.w	8(a0),8(a1)
00016BD0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016BD6 4228 0032                  		clr.b	$32(a0)
00016BDA 303C 00BE                  		move.w	#$BE,d0
00016BDE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016BE4                            
00016BE4                            locret_1675C:
00016BE4 4E75                       		rts	
00016BE6                            ; ===========================================================================
00016BE6                            
00016BE6                            loc_1675E:				; XREF: Obj72_Index
00016BE6 43F8 D000                  		lea	($FFFFD000).w,a1
00016BEA 1028 0032                  		move.b	$32(a0),d0
00016BEE 5428 0032                  		addq.b	#2,$32(a0)
00016BF2 4EB9 0000 2C22             		jsr	(CalcSine).l
00016BF8 EA40                       		asr.w	#5,d0
00016BFA 3428 000C                  		move.w	$C(a0),d2
00016BFE 9440                       		sub.w	d0,d2
00016C00 3342 000C                  		move.w	d2,$C(a1)
00016C04 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016C0A 6600                       		bne.s	locret_16796
00016C0C 6100 0000                  		bsr.w	sub_1681C
00016C10 5428 0024                  		addq.b	#2,$24(a0)
00016C14 303C 00BC                  		move.w	#$BC,d0
00016C18 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016C1E                            
00016C1E                            locret_16796:
00016C1E 4E75                       		rts	
00016C20                            ; ===========================================================================
00016C20                            
00016C20                            loc_16798:				; XREF: Obj72_Index
00016C20 588F                       		addq.l	#4,sp
00016C22 43F8 D000                  		lea	($FFFFD000).w,a1
00016C26 5328 002E                  		subq.b	#1,$2E(a0)
00016C2A 6A00                       		bpl.s	loc_167DA
00016C2C 3368 0036 0008             		move.w	$36(a0),8(a1)
00016C32 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016C38 7200                       		moveq	#0,d1
00016C3A 1228 003A                  		move.b	$3A(a0),d1
00016C3E 5801                       		addq.b	#4,d1
00016C40 B228 003B                  		cmp.b	$3B(a0),d1
00016C44 6500                       		bcs.s	loc_167C2
00016C46 7200                       		moveq	#0,d1
00016C48 6000                       		bra.s	loc_16800
00016C4A                            ; ===========================================================================
00016C4A                            
00016C4A                            loc_167C2:
00016C4A 1141 003A                  		move.b	d1,$3A(a0)
00016C4E 2468 003C                  		movea.l	$3C(a0),a2
00016C52 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016C58 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016C5E 6000 0000                  		bra.w	sub_1681C
00016C62                            ; ===========================================================================
00016C62                            
00016C62                            loc_167DA:
00016C62 2429 0008                  		move.l	8(a1),d2
00016C66 2629 000C                  		move.l	$C(a1),d3
00016C6A 3029 0010                  		move.w	$10(a1),d0
00016C6E 48C0                       		ext.l	d0
00016C70 E180                       		asl.l	#8,d0
00016C72 D480                       		add.l	d0,d2
00016C74 3029 0012                  		move.w	$12(a1),d0
00016C78 48C0                       		ext.l	d0
00016C7A E180                       		asl.l	#8,d0
00016C7C D680                       		add.l	d0,d3
00016C7E 2342 0008                  		move.l	d2,8(a1)
00016C82 2343 000C                  		move.l	d3,$C(a1)
00016C86 4E75                       		rts	
00016C88                            ; ===========================================================================
00016C88                            
00016C88                            loc_16800:
00016C88 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016C8E 4228 0024                  		clr.b	$24(a0)
00016C92 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016C96 337C 0000 0010             		move.w	#0,$10(a1)
00016C9C 337C 0200 0012             		move.w	#$200,$12(a1)
00016CA2 4E75                       		rts	
00016CA4                            
00016CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CA4                            
00016CA4                            
00016CA4                            sub_1681C:
00016CA4 7000                       		moveq	#0,d0
00016CA6 343C 1000                  		move.w	#$1000,d2
00016CAA 3028 0036                  		move.w	$36(a0),d0
00016CAE 9069 0008                  		sub.w	8(a1),d0
00016CB2 6C00                       		bge.s	loc_16830
00016CB4 4440                       		neg.w	d0
00016CB6 4442                       		neg.w	d2
00016CB8                            
00016CB8                            loc_16830:
00016CB8 7200                       		moveq	#0,d1
00016CBA 363C 1000                  		move.w	#$1000,d3
00016CBE 3228 0038                  		move.w	$38(a0),d1
00016CC2 9269 000C                  		sub.w	$C(a1),d1
00016CC6 6C00                       		bge.s	loc_16844
00016CC8 4441                       		neg.w	d1
00016CCA 4443                       		neg.w	d3
00016CCC                            
00016CCC                            loc_16844:
00016CCC B240                       		cmp.w	d0,d1
00016CCE 6500                       		bcs.s	loc_1687A
00016CD0 7200                       		moveq	#0,d1
00016CD2 3228 0038                  		move.w	$38(a0),d1
00016CD6 9269 000C                  		sub.w	$C(a1),d1
00016CDA 4841                       		swap	d1
00016CDC 83C3                       		divs.w	d3,d1
00016CDE 7000                       		moveq	#0,d0
00016CE0 3028 0036                  		move.w	$36(a0),d0
00016CE4 9069 0008                  		sub.w	8(a1),d0
00016CE8 6700                       		beq.s	loc_16866
00016CEA 4840                       		swap	d0
00016CEC 81C1                       		divs.w	d1,d0
00016CEE                            
00016CEE                            loc_16866:
00016CEE 3340 0010                  		move.w	d0,$10(a1)
00016CF2 3343 0012                  		move.w	d3,$12(a1)
00016CF6 4A41                       		tst.w	d1
00016CF8 6A00                       		bpl.s	loc_16874
00016CFA 4441                       		neg.w	d1
00016CFC                            
00016CFC                            loc_16874:
00016CFC 3141 002E                  		move.w	d1,$2E(a0)
00016D00 4E75                       		rts	
00016D02                            ; ===========================================================================
00016D02                            
00016D02                            loc_1687A:
00016D02 7000                       		moveq	#0,d0
00016D04 3028 0036                  		move.w	$36(a0),d0
00016D08 9069 0008                  		sub.w	8(a1),d0
00016D0C 4840                       		swap	d0
00016D0E 81C2                       		divs.w	d2,d0
00016D10 7200                       		moveq	#0,d1
00016D12 3228 0038                  		move.w	$38(a0),d1
00016D16 9269 000C                  		sub.w	$C(a1),d1
00016D1A 6700                       		beq.s	loc_16898
00016D1C 4841                       		swap	d1
00016D1E 83C0                       		divs.w	d0,d1
00016D20                            
00016D20                            loc_16898:
00016D20 3341 0012                  		move.w	d1,$12(a1)
00016D24 3342 0010                  		move.w	d2,$10(a1)
00016D28 4A40                       		tst.w	d0
00016D2A 6A00                       		bpl.s	loc_168A6
00016D2C 4440                       		neg.w	d0
00016D2E                            
00016D2E                            loc_168A6:
00016D2E 3140 002E                  		move.w	d0,$2E(a0)
00016D32 4E75                       		rts	
00016D34                            ; End of function sub_1681C
00016D34                            
00016D34                            ; ===========================================================================
00016D34 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016D3A 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016D40 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016D44 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016D4A 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016D50 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016D56 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016D5C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016D62 0884 0298 0894             		dc.w $884, $298, $894
00016D68 0270 0894 0190             		dc.w $270, $894, $190
00016D6E 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016D74 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016D7A 1184 0498 1158             		dc.w $1184, $498, $1158
00016D80 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016D86 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016D8C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016D92 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016D98 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016D9E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016DA4 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016DAA 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016DB0 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016DB6 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016DBC                            ; ===========================================================================
00016DBC                            ; ---------------------------------------------------------------------------
00016DBC                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016DBC                            ; ---------------------------------------------------------------------------
00016DBC                            
00016DBC                            Obj78:					; XREF: Obj_Index
00016DBC 7000                       		moveq	#0,d0
00016DBE 1028 0024                  		move.b	$24(a0),d0
00016DC2 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016DC6 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016DCA                            ; ===========================================================================
00016DCA 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016DCC 0000                       		dc.w Obj78_Action-Obj78_Index
00016DCE 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016DD0 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016DD2 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016DD4 0000                       		dc.w Obj78_Delete-Obj78_Index
00016DD6 0000                       		dc.w loc_16CC0-Obj78_Index
00016DD8                            ; ===========================================================================
00016DD8                            
00016DD8                            locret_16950:
00016DD8 4E75                       		rts	
00016DDA                            ; ===========================================================================
00016DDA                            
00016DDA                            Obj78_Main:				; XREF: Obj78_Index
00016DDA 117C 0007 0016             		move.b	#7,$16(a0)
00016DE0 117C 0008 0017             		move.b	#8,$17(a0)
00016DE6 4EB9 0000 D9F0             		jsr	ObjectFall
00016DEC 4EBA E4B6                  		jsr	ObjHitFloor
00016DF0 4A41                       		tst.w	d1
00016DF2 6AE4                       		bpl.s	locret_16950
00016DF4 D368 000C                  		add.w	d1,$C(a0)
00016DF8 4268 0012                  		clr.w	$12(a0)
00016DFC 5428 0024                  		addq.b	#2,$24(a0)
00016E00 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016E08 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016E0E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016E14 6700                       		beq.s	loc_16996
00016E16 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016E1C                            
00016E1C                            loc_16996:
00016E1C 0228 0003 0001             		andi.b	#3,1(a0)
00016E22 0028 0004 0001             		ori.b	#4,1(a0)
00016E28 1168 0001 0022             		move.b	1(a0),$22(a0)
00016E2E 117C 0004 0018             		move.b	#4,$18(a0)
00016E34 117C 0008 0019             		move.b	#8,$19(a0)
00016E3A 117C 000B 0020             		move.b	#$B,$20(a0)
00016E40 3428 0008                  		move.w	8(a0),d2
00016E44 7A0C                       		moveq	#$C,d5
00016E46 0828 0000 0022             		btst	#0,$22(a0)
00016E4C 6700                       		beq.s	loc_169CA
00016E4E 4445                       		neg.w	d5
00016E50                            
00016E50                            loc_169CA:
00016E50 1C3C 0004                  		move.b	#4,d6
00016E54 7600                       		moveq	#0,d3
00016E56 7804                       		moveq	#4,d4
00016E58 2448                       		movea.l	a0,a2
00016E5A 7202                       		moveq	#2,d1
00016E5C                            
00016E5C                            Obj78_LoadBody:
00016E5C 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00016E62 6600                       		bne.s	Obj78_QuitLoad
00016E64 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016E68 1346 0024                  		move.b	d6,$24(a1)
00016E6C 5406                       		addq.b	#2,d6
00016E6E 2368 0004 0004             		move.l	4(a0),4(a1)
00016E74 3368 0002 0002             		move.w	2(a0),2(a1)
00016E7A 137C 0005 0018             		move.b	#5,$18(a1)
00016E80 137C 0008 0019             		move.b	#8,$19(a1)
00016E86 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016E8C D445                       		add.w	d5,d2
00016E8E 3342 0008                  		move.w	d2,8(a1)
00016E92 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016E98 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016E9E 1368 0022 0001             		move.b	$22(a0),1(a1)
00016EA4 137C 0008 001A             		move.b	#8,$1A(a1)
00016EAA 234A 003C                  		move.l	a2,$3C(a1)
00016EAE 1344 003C                  		move.b	d4,$3C(a1)
00016EB2 5804                       		addq.b	#4,d4
00016EB4 2449                       		movea.l	a1,a2
00016EB6                            
00016EB6                            Obj78_QuitLoad:
00016EB6 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016EBA                            
00016EBA 117C 0007 002A             		move.b	#7,$2A(a0)
00016EC0 4228 003C                  		clr.b	$3C(a0)
00016EC4                            
00016EC4                            Obj78_Action:				; XREF: Obj78_Index
00016EC4 4A28 0022                  		tst.b	$22(a0)
00016EC8 6B00 0000                  		bmi.w	loc_16C96
00016ECC 7000                       		moveq	#0,d0
00016ECE 1028 0025                  		move.b	$25(a0),d0
00016ED2 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016ED6 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016EDA 1228 002B                  		move.b	$2B(a0),d1
00016EDE 6A00                       		bpl.s	Obj78_Display
00016EE0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016EE6 1028 0026                  		move.b	$26(a0),d0
00016EEA 0240 007F                  		andi.w	#$7F,d0
00016EEE 5828 0026                  		addq.b	#4,$26(a0)
00016EF2 1031 0000                  		move.b	(a1,d0.w),d0
00016EF6 6A00                       		bpl.s	Obj78_AniHead
00016EF8 08A8 0007 002B             		bclr	#7,$2B(a0)
00016EFE 6000                       		bra.s	Obj78_Display
00016F00                            ; ===========================================================================
00016F00                            
00016F00                            Obj78_AniHead:
00016F00 0201 0010                  		andi.b	#$10,d1
00016F04 D001                       		add.b	d1,d0
00016F06 1140 001A                  		move.b	d0,$1A(a0)
00016F0A                            
00016F0A                            Obj78_Display:
00016F0A 3028 0008                  		move.w	8(a0),d0
00016F0E 0240 FF80                  		andi.w	#$FF80,d0
00016F12 3238 F700                  		move.w	($FFFFF700).w,d1
00016F16 0441 0080                  		subi.w	#$80,d1
00016F1A 0241 FF80                  		andi.w	#$FF80,d1
00016F1E 9041                       		sub.w	d1,d0
00016F20 0C40 0280                  		cmpi.w	#$280,d0
00016F24 6200 0000                  		bhi.w	Obj78_ChkGone
00016F28 4EF9 0000 DA42             		jmp	DisplaySprite
00016F2E                            ; ===========================================================================
00016F2E                            
00016F2E                            Obj78_ChkGone:
00016F2E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F32 7000                       		moveq	#0,d0
00016F34 1028 0023                  		move.b	$23(a0),d0
00016F38 6700                       		beq.s	loc_16ABC
00016F3A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F40                            
00016F40                            loc_16ABC:
00016F40 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016F46 4E75                       		rts	
00016F48                            ; ===========================================================================
00016F48                            
00016F48                            Obj78_Delete:				; XREF: Obj78_Index
00016F48 4EF9 0000 DA7E             		jmp	DeleteObject
00016F4E                            ; ===========================================================================
00016F4E 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016F50 0000                       		dc.w loc_16B02-Obj78_Index2
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            Obj78_Move:				; XREF: Obj78_Index2
00016F52 5328 002A                  		subq.b	#1,$2A(a0)
00016F56 6B00                       		bmi.s	Obj78_Move2
00016F58 4E75                       		rts	
00016F5A                            ; ===========================================================================
00016F5A                            
00016F5A                            Obj78_Move2:
00016F5A 5428 0025                  		addq.b	#2,$25(a0)
00016F5E 117C 0010 002A             		move.b	#$10,$2A(a0)
00016F64 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016F6A 317C 0040 0014             		move.w	#$40,$14(a0)
00016F70 0868 0004 002B             		bchg	#4,$2B(a0)
00016F76 6600                       		bne.s	loc_16AFC
00016F78 4268 0010                  		clr.w	$10(a0)
00016F7C 4468 0014                  		neg.w	$14(a0)
00016F80                            
00016F80                            loc_16AFC:
00016F80 08E8 0007 002B             		bset	#7,$2B(a0)
00016F86                            
00016F86                            loc_16B02:				; XREF: Obj78_Index2
00016F86 5328 002A                  		subq.b	#1,$2A(a0)
00016F8A 6B00                       		bmi.s	loc_16B5E
00016F8C 2F28 0008                  		move.l	8(a0),-(sp)
00016F90 2428 0008                  		move.l	8(a0),d2
00016F94 3028 0010                  		move.w	$10(a0),d0
00016F98 0828 0000 0022             		btst	#0,$22(a0)
00016F9E 6700                       		beq.s	loc_16B1E
00016FA0 4440                       		neg.w	d0
00016FA2                            
00016FA2                            loc_16B1E:
00016FA2 48C0                       		ext.l	d0
00016FA4 E180                       		asl.l	#8,d0
00016FA6 D480                       		add.l	d0,d2
00016FA8 2142 0008                  		move.l	d2,8(a0)
00016FAC 4EBA E2F6                  		jsr	ObjHitFloor
00016FB0 241F                       		move.l	(sp)+,d2
00016FB2 0C41 FFF8                  		cmpi.w	#-8,d1
00016FB6 6D00                       		blt.s	loc_16B70
00016FB8 0C41 000C                  		cmpi.w	#$C,d1
00016FBC 6C00                       		bge.s	loc_16B70
00016FBE D368 000C                  		add.w	d1,$C(a0)
00016FC2 4842                       		swap	d2
00016FC4 B468 0008                  		cmp.w	8(a0),d2
00016FC8 6700                       		beq.s	locret_16B5C
00016FCA 7000                       		moveq	#0,d0
00016FCC 1028 003C                  		move.b	$3C(a0),d0
00016FD0 5228 003C                  		addq.b	#1,$3C(a0)
00016FD4 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016FDA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016FDE                            
00016FDE                            locret_16B5C:
00016FDE 4E75                       		rts	
00016FE0                            ; ===========================================================================
00016FE0                            
00016FE0                            loc_16B5E:
00016FE0 5528 0025                  		subq.b	#2,$25(a0)
00016FE4 117C 0007 002A             		move.b	#7,$2A(a0)
00016FEA 317C 0000 0010             		move.w	#0,$10(a0)
00016FF0 4E75                       		rts	
00016FF2                            ; ===========================================================================
00016FF2                            
00016FF2                            loc_16B70:
00016FF2 2142 0008                  		move.l	d2,8(a0)
00016FF6 0868 0000 0022             		bchg	#0,$22(a0)
00016FFC 1168 0022 0001             		move.b	$22(a0),1(a0)
00017002 7000                       		moveq	#0,d0
00017004 1028 003C                  		move.b	$3C(a0),d0
00017008 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001700E 5228 003C                  		addq.b	#1,$3C(a0)
00017012 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017018 4E75                       		rts	
0001701A                            ; ===========================================================================
0001701A                            
0001701A                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001701A 2268 003C                  		movea.l	$3C(a0),a1
0001701E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017024 6A00                       		bpl.s	Obj78_BodySeg1
00017026 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001702C 1028 0026                  		move.b	$26(a0),d0
00017030 0240 007F                  		andi.w	#$7F,d0
00017034 5828 0026                  		addq.b	#4,$26(a0)
00017038 4A31 0004                  		tst.b	4(a1,d0.w)
0001703C 6A00                       		bpl.s	Obj78_AniBody
0001703E 5828 0026                  		addq.b	#4,$26(a0)
00017042                            
00017042                            Obj78_AniBody:
00017042 1031 0000                  		move.b	(a1,d0.w),d0
00017046 5000                       		addq.b	#8,d0
00017048 1140 001A                  		move.b	d0,$1A(a0)
0001704C                            
0001704C                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001704C 2268 003C                  		movea.l	$3C(a0),a1
00017050 4A28 0022                  		tst.b	$22(a0)
00017054 6B00 0000                  		bmi.w	loc_16C90
00017058 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001705E 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017064 6700 0000                  		beq.w	loc_16C64
00017068 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001706E 3029 0010                  		move.w	$10(a1),d0
00017072 D069 0014                  		add.w	$14(a1),d0
00017076 3140 0010                  		move.w	d0,$10(a0)
0001707A 2428 0008                  		move.l	8(a0),d2
0001707E 2602                       		move.l	d2,d3
00017080 3028 0010                  		move.w	$10(a0),d0
00017084 0828 0000 0022             		btst	#0,$22(a0)
0001708A 6700                       		beq.s	loc_16C0C
0001708C 4440                       		neg.w	d0
0001708E                            
0001708E                            loc_16C0C:
0001708E 48C0                       		ext.l	d0
00017090 E180                       		asl.l	#8,d0
00017092 D480                       		add.l	d0,d2
00017094 2142 0008                  		move.l	d2,8(a0)
00017098 4843                       		swap	d3
0001709A B668 0008                  		cmp.w	8(a0),d3
0001709E 6700                       		beq.s	loc_16C64
000170A0 7000                       		moveq	#0,d0
000170A2 1028 003C                  		move.b	$3C(a0),d0
000170A6 1231 002C                  		move.b	$2C(a1,d0.w),d1
000170AA 0C01 0080                  		cmpi.b	#-$80,d1
000170AE 6600                       		bne.s	loc_16C50
000170B0 4843                       		swap	d3
000170B2 2143 0008                  		move.l	d3,8(a0)
000170B6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000170BA 0868 0000 0022             		bchg	#0,$22(a0)
000170C0 1168 0022 0001             		move.b	$22(a0),1(a0)
000170C6 5228 003C                  		addq.b	#1,$3C(a0)
000170CA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000170D0 6000                       		bra.s	loc_16C64
000170D2                            ; ===========================================================================
000170D2                            
000170D2                            loc_16C50:
000170D2 4881                       		ext.w	d1
000170D4 D368 000C                  		add.w	d1,$C(a0)
000170D8 5228 003C                  		addq.b	#1,$3C(a0)
000170DC 0228 000F 003C             		andi.b	#$F,$3C(a0)
000170E2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000170E6                            
000170E6                            loc_16C64:
000170E6 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000170EC 6700                       		beq.s	loc_16C90
000170EE 0C11 0027                  		cmpi.b	#$27,0(a1)
000170F2 6700                       		beq.s	loc_16C7C
000170F4 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000170FA 6600                       		bne.s	loc_16C82
000170FC                            
000170FC                            loc_16C7C:
000170FC 117C 000A 0024             		move.b	#$A,$24(a0)
00017102                            
00017102                            loc_16C82:
00017102 4EF9 0000 DA42             		jmp	DisplaySprite
00017108                            
00017108                            ; ===========================================================================
00017108 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017110                            ; ===========================================================================
00017110                            
00017110                            loc_16C90:
00017110 08E9 0007 0022             		bset	#7,$22(a1)
00017116                            
00017116                            loc_16C96:
00017116 7000                       		moveq	#0,d0
00017118 1028 0024                  		move.b	$24(a0),d0
0001711C 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017120 0828 0000 0022             		btst	#0,$22(a0)
00017126 6700                       		beq.s	loc_16CAA
00017128 4440                       		neg.w	d0
0001712A                            
0001712A                            loc_16CAA:
0001712A 3140 0010                  		move.w	d0,$10(a0)
0001712E 317C FC00 0012             		move.w	#-$400,$12(a0)
00017134 117C 000C 0024             		move.b	#$C,$24(a0)
0001713A 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017140                            
00017140                            loc_16CC0:				; XREF: Obj78_Index
00017140 4EB9 0000 D9F0             		jsr	ObjectFall
00017146 4A68 0012                  		tst.w	$12(a0)
0001714A 6B00                       		bmi.s	loc_16CE0
0001714C 4EBA E156                  		jsr	ObjHitFloor
00017150 4A41                       		tst.w	d1
00017152 6A00                       		bpl.s	loc_16CE0
00017154 D368 000C                  		add.w	d1,$C(a0)
00017158 317C FC00 0012             		move.w	#-$400,$12(a0)
0001715E                            
0001715E                            loc_16CE0:
0001715E 4A28 0001                  		tst.b	1(a0)
00017162 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017166 4EF9 0000 DA42             		jmp	DisplaySprite
0001716C                            ; ===========================================================================
0001716C                            Ani_obj78:
0001716C                            	include "_anim\obj78.asm"
0001716C                            ; ---------------------------------------------------------------------------
0001716C                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001716C                            ; ---------------------------------------------------------------------------
0001716C 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001717C 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001718C 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001719C 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000171AC 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000171BC 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000171CC 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000171DC 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000171EC                            	even
000171EC                            	even
000171EC                            
000171EC                            ; ---------------------------------------------------------------------------
000171EC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000171EC                            ; ---------------------------------------------------------------------------
000171EC                            Map_obj78:
000171EC                            	include "_maps\obj78.asm"
000171EC                            ; ---------------------------------------------------------------------------
000171EC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000171EC                            ; ---------------------------------------------------------------------------
000171EC 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000171F0 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000171F4 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000171F8 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000171FC 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017200 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017204 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017208 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001720C 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017210 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017214 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017218 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001721C 01                         byte_16D9E:	dc.b 1
0001721D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017222 01                         byte_16DA4:	dc.b 1
00017223 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017228 01                         byte_16DAA:	dc.b 1
00017229 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001722E 01                         byte_16DB0:	dc.b 1
0001722F EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017234 01                         byte_16DB6:	dc.b 1
00017235 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001723A 01                         byte_16DBC:	dc.b 1
0001723B ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017240 01                         byte_16DC2:	dc.b 1
00017241 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017246 01                         byte_16DC8:	dc.b 1
00017247 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001724C 01                         byte_16DCE:	dc.b 1
0001724D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017252 01                         byte_16DD4:	dc.b 1
00017253 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017258 01                         byte_16DDA:	dc.b 1
00017259 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001725E 01                         byte_16DE0:	dc.b 1
0001725F F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017264 01                         byte_16DE6:	dc.b 1
00017265 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001726A 01                         byte_16DEC:	dc.b 1
0001726B F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017270 01                         byte_16DF2:	dc.b 1
00017271 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017276 01                         byte_16DF8:	dc.b 1
00017277 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001727C 01                         byte_16DFE:	dc.b 1
0001727D F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017282 01                         byte_16E04:	dc.b 1
00017283 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017288 01                         byte_16E0A:	dc.b 1
00017289 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001728E 01                         byte_16E10:	dc.b 1
0001728F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017294 01                         byte_16E16:	dc.b 1
00017295 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001729A 01                         byte_16E1C:	dc.b 1
0001729B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000172A0 01                         byte_16E22:	dc.b 1
000172A1 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000172A6 01                         byte_16E28:	dc.b 1
000172A7 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000172AC                            		even
000172AC                            		even
000172AC                            
000172AC                            ; ===========================================================================
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            ; Object 79 - lamppost
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            
000172AC                            Obj79:					; XREF: Obj_Index
000172AC 7000                       		moveq	#0,d0
000172AE 1028 0024                  		move.b	$24(a0),d0
000172B2 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000172B6 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000172BA 4EFA 882E                  		jmp	MarkObjGone
000172BE                            ; ===========================================================================
000172BE 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000172C0 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000172C2 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000172C4 0000                       		dc.w Obj79_Twirl-Obj79_Index
000172C6                            ; ===========================================================================
000172C6                            
000172C6                            Obj79_Main:				; XREF: Obj79_Index
000172C6 5428 0024                  		addq.b	#2,$24(a0)
000172CA 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000172D2 317C 07A0 0002             		move.w	#$7A0,2(a0)
000172D8 117C 0004 0001             		move.b	#4,1(a0)
000172DE 117C 0008 0019             		move.b	#8,$19(a0)
000172E4 117C 0005 0018             		move.b	#5,$18(a0)
000172EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000172EE 7000                       		moveq	#0,d0
000172F0 1028 0023                  		move.b	$23(a0),d0
000172F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000172FA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017300 6600                       		bne.s	Obj79_RedLamp
00017302 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017306 0201 007F                  		andi.b	#$7F,d1
0001730A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001730E 0202 007F                  		andi.b	#$7F,d2
00017312 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017314 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017316                            
00017316                            Obj79_RedLamp:
00017316 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001731C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017322 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017328 4E75                       		rts	
0001732A                            ; ===========================================================================
0001732A                            
0001732A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001732A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001732E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017332 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017336 6B00 0000                  		bmi.w	locret_16F90
0001733A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001733E 0201 007F                  		andi.b	#$7F,d1
00017342 1428 0028                  		move.b	$28(a0),d2
00017346 0202 007F                  		andi.b	#$7F,d2
0001734A B202                       		cmp.b	d2,d1
0001734C 6500                       		bcs.s	Obj79_HitLamp
0001734E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017352 7000                       		moveq	#0,d0
00017354 1028 0023                  		move.b	$23(a0),d0
00017358 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001735E 117C 0004 0024             		move.b	#4,$24(a0)
00017364 117C 0003 001A             		move.b	#3,$1A(a0)
0001736A 6000 0000                  		bra.w	locret_16F90
0001736E                            ; ===========================================================================
0001736E                            
0001736E                            Obj79_HitLamp:
0001736E 3038 D008                  		move.w	($FFFFD008).w,d0
00017372 9068 0008                  		sub.w	8(a0),d0
00017376 5040                       		addq.w	#8,d0
00017378 0C40 0010                  		cmpi.w	#$10,d0
0001737C 6400 0000                  		bcc.w	locret_16F90
00017380 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017384 9068 000C                  		sub.w	$C(a0),d0
00017388 0640 0040                  		addi.w	#$40,d0
0001738C 0C40 0068                  		cmpi.w	#$68,d0
00017390 6400                       		bcc.s	locret_16F90
00017392 303C 00A1                  		move.w	#$A1,d0
00017396 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001739C 5428 0024                  		addq.b	#2,$24(a0)
000173A0 4EB9 0000 DEC8             		jsr	SingleObjLoad
000173A6 6600                       		bne.s	loc_16F76
000173A8 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000173AC 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000173B2 3368 0008 0030             		move.w	8(a0),$30(a1)
000173B8 3368 000C 0032             		move.w	$C(a0),$32(a1)
000173BE 0469 0018 0032             		subi.w	#$18,$32(a1)
000173C4 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000173CC 337C 07A0 0002             		move.w	#$7A0,2(a1)
000173D2 137C 0004 0001             		move.b	#4,1(a1)
000173D8 137C 0008 0019             		move.b	#8,$19(a1)
000173DE 137C 0004 0018             		move.b	#4,$18(a1)
000173E4 137C 0002 001A             		move.b	#2,$1A(a1)
000173EA 337C 0020 0036             		move.w	#$20,$36(a1)
000173F0                            
000173F0                            loc_16F76:
000173F0 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000173F6 6100 0000                  		bsr.w	Obj79_StoreInfo
000173FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000173FE 7000                       		moveq	#0,d0
00017400 1028 0023                  		move.b	$23(a0),d0
00017404 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001740A                            
0001740A                            locret_16F90:
0001740A 4E75                       		rts	
0001740C                            ; ===========================================================================
0001740C                            
0001740C                            Obj79_AfterHit:				; XREF: Obj79_Index
0001740C 4E75                       		rts	
0001740E                            ; ===========================================================================
0001740E                            
0001740E                            Obj79_Twirl:				; XREF: Obj79_Index
0001740E 5368 0036                  		subq.w	#1,$36(a0)
00017412 6A00                       		bpl.s	loc_16FA0
00017414 117C 0004 0024             		move.b	#4,$24(a0)
0001741A                            
0001741A                            loc_16FA0:
0001741A 1028 0026                  		move.b	$26(a0),d0
0001741E 0428 0010 0026             		subi.b	#$10,$26(a0)
00017424 0400 0040                  		subi.b	#$40,d0
00017428 4EB9 0000 2C22             		jsr	(CalcSine).l
0001742E C3FC 0C00                  		muls.w	#$C00,d1
00017432 4841                       		swap	d1
00017434 D268 0030                  		add.w	$30(a0),d1
00017438 3141 0008                  		move.w	d1,8(a0)
0001743C C1FC 0C00                  		muls.w	#$C00,d0
00017440 4840                       		swap	d0
00017442 D068 0032                  		add.w	$32(a0),d0
00017446 3140 000C                  		move.w	d0,$C(a0)
0001744A 4E75                       		rts	
0001744C                            ; ===========================================================================
0001744C                            ; ---------------------------------------------------------------------------
0001744C                            ; Subroutine to	store information when you hit a lamppost
0001744C                            ; ---------------------------------------------------------------------------
0001744C                            
0001744C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001744C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017452 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017458 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001745E 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017464 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001746A 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017470 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017476 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001747C 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017482 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017488 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001748E 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017494 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001749A 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000174A0 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000174A6 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000174AC 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000174B2 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000174B8 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000174BE 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000174C4 4E75                       		rts	
000174C6                            
000174C6                            ; ---------------------------------------------------------------------------
000174C6                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000174C6                            ; ---------------------------------------------------------------------------
000174C6                            
000174C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174C6                            
000174C6                            
000174C6                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000174C6 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000174CC 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000174D2 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000174D8 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000174DE 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000174E4 4278 FE20                  		clr.w	($FFFFFE20).w
000174E8 4238 FE1B                  		clr.b	($FFFFFE1B).w
000174EC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000174F2 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000174F8 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000174FC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017502 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017508 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001750E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017514 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001751A 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017520 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017526 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001752C 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017532 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017538 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001753E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017544 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001754A 6600                       		bne.s	loc_170E4
0001754C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017552 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017558 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001755E                            
0001755E                            loc_170E4:
0001755E 4A38 FE30                  		tst.b	($FFFFFE30).w
00017562 6A00                       		bpl.s	locret_170F6
00017564 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017568 0440 00A0                  		subi.w	#$A0,d0
0001756C 31C0 F728                  		move.w	d0,($FFFFF728).w
00017570                            
00017570                            locret_170F6:
00017570 4E75                       		rts	
00017572                            ; End of function Obj79_LoadInfo
00017572                            
00017572                            ; ===========================================================================
00017572                            ; ---------------------------------------------------------------------------
00017572                            ; Sprite mappings - lamppost
00017572                            ; ---------------------------------------------------------------------------
00017572                            Map_obj79:
00017572                            	include "_maps\obj79.asm"
00017572                            ; ---------------------------------------------------------------------------
00017572                            ; Sprite mappings - lamppost
00017572                            ; ---------------------------------------------------------------------------
00017572 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017576 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001757A 06                         byte_17100:	dc.b 6
0001757B E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017580 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017585 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001758A F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001758F D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017594 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017599 04                         byte_1711F:	dc.b 4
0001759A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001759F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000175A4 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000175A9 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000175AE 02                         byte_17134:	dc.b 2
000175AF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000175B4 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000175B9 06                         byte_1713F:	dc.b 6
000175BA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000175BF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000175C4 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000175C9 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000175CE D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000175D3 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000175D8                            		even
000175D8                            		even
000175D8                            
000175D8                            ; ===========================================================================
000175D8                            ; ---------------------------------------------------------------------------
000175D8                            ; Object 7D - hidden points at the end of a level
000175D8                            ; ---------------------------------------------------------------------------
000175D8                            
000175D8                            Obj7D:					; XREF: Obj_Index
000175D8 7000                       		moveq	#0,d0
000175DA 1028 0024                  		move.b	$24(a0),d0
000175DE 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000175E2 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000175E6                            ; ===========================================================================
000175E6 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000175E8 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000175EA                            ; ===========================================================================
000175EA                            
000175EA                            Obj7D_Main:				; XREF: Obj7D_Index
000175EA 7410                       		moveq	#$10,d2
000175EC 3602                       		move.w	d2,d3
000175EE D643                       		add.w	d3,d3
000175F0 43F8 D000                  		lea	($FFFFD000).w,a1
000175F4 3029 0008                  		move.w	8(a1),d0
000175F8 9068 0008                  		sub.w	8(a0),d0
000175FC D042                       		add.w	d2,d0
000175FE B043                       		cmp.w	d3,d0
00017600 6400                       		bcc.s	Obj7D_ChkDel
00017602 3229 000C                  		move.w	$C(a1),d1
00017606 9268 000C                  		sub.w	$C(a0),d1
0001760A D242                       		add.w	d2,d1
0001760C B243                       		cmp.w	d3,d1
0001760E 6400                       		bcc.s	Obj7D_ChkDel
00017610 4A78 FE08                  		tst.w	($FFFFFE08).w
00017614 6600                       		bne.s	Obj7D_ChkDel
00017616 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001761A 6600                       		bne.s	Obj7D_ChkDel
0001761C 5428 0024                  		addq.b	#2,$24(a0)
00017620 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017628 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001762E 0028 0004 0001             		ori.b	#4,1(a0)
00017634 117C 0000 0018             		move.b	#0,$18(a0)
0001763A 117C 0010 0019             		move.b	#$10,$19(a0)
00017640 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017646 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001764C 303C 00C9                  		move.w	#$C9,d0
00017650 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
00017656 7000                       		moveq	#0,d0
00017658 1028 0028                  		move.b	$28(a0),d0
0001765C D040                       		add.w	d0,d0
0001765E 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017662 4EB9 0000 0000             		jsr	AddPoints
00017668                            
00017668                            Obj7D_ChkDel:
00017668 3028 0008                  		move.w	8(a0),d0
0001766C 0240 FF80                  		andi.w	#$FF80,d0
00017670 3238 F700                  		move.w	($FFFFF700).w,d1
00017674 0441 0080                  		subi.w	#$80,d1
00017678 0241 FF80                  		andi.w	#$FF80,d1
0001767C 9041                       		sub.w	d1,d0
0001767E 0C40 0280                  		cmpi.w	#$280,d0
00017682 6200                       		bhi.s	Obj7D_Delete
00017684 4E75                       		rts	
00017686                            ; ===========================================================================
00017686                            
00017686                            Obj7D_Delete:
00017686 4EF9 0000 DA7E             		jmp	DeleteObject
0001768C                            ; ===========================================================================
0001768C 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001768E 03E8                       		dc.w 1000
00017690 0064                       		dc.w 100
00017692 0001                       		dc.w 1
00017694                            ; ===========================================================================
00017694                            
00017694                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017694 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017698 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001769A 3028 0008                  		move.w	8(a0),d0
0001769E 0240 FF80                  		andi.w	#-$80,d0
000176A2 3238 F700                  		move.w	($FFFFF700).w,d1
000176A6 0441 0080                  		subi.w	#$80,d1
000176AA 0241 FF80                  		andi.w	#-$80,d1
000176AE 9041                       		sub.w	d1,d0
000176B0 0C40 0280                  		cmpi.w	#$280,d0
000176B4 6200                       		bhi.s	Obj7D_Delete2
000176B6 4EF9 0000 DA42             		jmp	DisplaySprite
000176BC                            ; ===========================================================================
000176BC                            
000176BC                            Obj7D_Delete2:
000176BC 4EF9 0000 DA7E             		jmp	DeleteObject
000176C2                            ; ===========================================================================
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            ; Sprite mappings - hidden points at the end of	a level
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            Map_obj7D:
000176C2                            	include "_maps\obj7D.asm"
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            ; Sprite mappings - hidden points at the end of	a level
000176C2                            ; ---------------------------------------------------------------------------
000176C2 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000176C6 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000176CA 00                         byte_17250:	dc.b 0
000176CB 01                         byte_17251:	dc.b 1
000176CC F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000176D1 01                         byte_17257:	dc.b 1
000176D2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000176D7 01                         byte_1725D:	dc.b 1
000176D8 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000176DE 00                         		even
000176DE 00                         		even
000176DE                            
000176DE                            ; ===========================================================================
000176DE                            ; ---------------------------------------------------------------------------
000176DE                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000176DE                            ; ---------------------------------------------------------------------------
000176DE                            
000176DE                            Obj8A:					; XREF: Obj_Index
000176DE 7000                       		moveq	#0,d0
000176E0 1028 0024                  		move.b	$24(a0),d0
000176E4 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000176E8 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000176EC                            ; ===========================================================================
000176EC 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000176EE 0000                       		dc.w Obj8A_Display-Obj8A_Index
000176F0                            ; ===========================================================================
000176F0                            
000176F0                            Obj8A_Main:				; XREF: Obj8A_Index
000176F0 5428 0024                  		addq.b	#2,$24(a0)
000176F4 317C 0120 0008             		move.w	#$120,8(a0)
000176FA 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017700 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017708 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001770E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017712 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017716 117C 0000 0001             		move.b	#0,1(a0)
0001771C 117C 0000 0018             		move.b	#0,$18(a0)
00017722 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017728 6600                       		bne.s	Obj8A_Display	; if not, branch
0001772A 317C 00A6 0002             		move.w	#$A6,2(a0)
00017730 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017736 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001773A 6700                       		beq.s	Obj8A_Display	; if not, branch
0001773C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017742 6600                       		bne.s	Obj8A_Display	; if not, branch
00017744 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001774A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017750 4EF9 0000 DA7E             		jmp	DeleteObject
00017756                            ; ===========================================================================
00017756                            
00017756                            Obj8A_Display:				; XREF: Obj8A_Index
00017756 4EF9 0000 DA42             		jmp	DisplaySprite
0001775C                            ; ===========================================================================
0001775C                            ; ---------------------------------------------------------------------------
0001775C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001775C                            ; ---------------------------------------------------------------------------
0001775C                            Map_obj8A:
0001775C                            	include "_maps\obj8A.asm"
0001775C                            ; --------------------------------------------------------------------------------
0001775C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001775C                            ; --------------------------------------------------------------------------------
0001775C                            
0001775C                            SME_MD8yg:	
0001775C 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
00017760 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
00017764 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
00017768 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
0001776C 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
00017770 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
00017772 0E                         SME_MD8yg_16:	dc.b $E	
00017773 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
00017778 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
0001777D F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
00017782 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
00017787 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
0001778C F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017791 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
00017796 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
0001779B F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000177A0 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000177A5 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
000177AA F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
000177AF F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
000177B4 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
000177B9 10                         SME_MD8yg_5D:	dc.b $10	
000177BA D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
000177BF D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
000177C4 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
000177C9 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
000177CE D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
000177D3 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
000177D8 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
000177DD D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
000177E2 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
000177E7 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
000177EC 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
000177F1 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
000177F6 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
000177FB 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017800 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017805 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001780A 0A                         SME_MD8yg_AE:	dc.b $A	
0001780B D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017810 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017815 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001781A D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
0001781F D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017824 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017829 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
0001782E 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017833 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
00017838 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
0001783D 18                         SME_MD8yg_E1:	dc.b $18	
0001783E D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017843 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017848 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
0001784D D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017852 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017857 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
0001785C D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017861 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
00017866 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001786B D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017870 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017875 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
0001787A D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
0001787F D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017884 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017889 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
0001788E 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017893 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017898 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
0001789D 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
000178A2 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
000178A7 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
000178AC 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
000178B1 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
000178B6 14                         SME_MD8yg_15A:	dc.b $14	
000178B7 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
000178BC D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
000178C1 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
000178C6 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
000178CB D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
000178D0 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
000178D5 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
000178DA 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
000178DF 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
000178E4 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
000178E9 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
000178EE 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
000178F3 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
000178F8 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
000178FD 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017902 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017907 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
0001790C 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017911 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017916 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
0001791B 1A                         SME_MD8yg_1BF:	dc.b $1A	
0001791C D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017921 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017926 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
0001792B D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017930 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017935 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
0001793A D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001793F D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017944 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017949 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
0001794E D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017953 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017958 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
0001795D 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017962 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017967 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
0001796C 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017971 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017976 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
0001797B 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017980 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017985 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
0001798A 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
0001798F 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017994 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017999 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
0001799E 17                         SME_MD8yg_242:	dc.b $17	
0001799F D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
000179A4 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
000179A9 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
000179AE D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
000179B3 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
000179B8 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
000179BD D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
000179C2 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
000179C7 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
000179CC D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
000179D1 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
000179D6 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
000179DB 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
000179E0 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
000179E5 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
000179EA 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
000179EF 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
000179F4 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
000179F9 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
000179FE 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017A03 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017A08 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017A0D 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017A12 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017A13 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017A18 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017A1D D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017A22 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017A27 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017A2C D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017A31 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017A36 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017A3B D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017A40 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017A45 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017A4A D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017A4F D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017A54 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017A59 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017A5E 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017A63 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017A68 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017A6D 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017A72 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017A77 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017A7C 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017A81 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017A86 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017A8B 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017A90 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017A95 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017A9A 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017A9F 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017AA4 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017AA9 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017AAE 0F                         SME_MD8yg_352:	dc.b $F	
00017AAF F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017AB4 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017AB9 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017ABE F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017AC3 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017AC8 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017ACD F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017AD2 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017AD7 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017ADC F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017AE1 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017AE6 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017AEB F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017AF0 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017AF5 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017AFA 08                         SME_MD8yg_39E:	dc.b 8	
00017AFB 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017B00 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017B05 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017B0A 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017B0F 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017B14 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017B19 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017B1E 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017B23 17                         SME_MD8yg_3C7:	dc.b $17	
00017B24 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017B29 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017B2E E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017B33 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017B38 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017B3D D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017B42 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017B47 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017B4C D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017B51 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017B56 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017B5B D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017B60 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017B65 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017B6A E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017B6F E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017B74 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017B79 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017B7E F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017B83 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017B88 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017B8D D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017B92 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017B98 00                         		even
00017B98 00                         		even
00017B98                            
00017B98                            ; ===========================================================================
00017B98                            ; ---------------------------------------------------------------------------
00017B98                            ; Object 3D - Eggman (GHZ)
00017B98                            ; ---------------------------------------------------------------------------
00017B98                            
00017B98                            Obj3D:					; XREF: Obj_Index
00017B98 7000                       		moveq	#0,d0
00017B9A 1028 0024                  		move.b	$24(a0),d0
00017B9E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017BA2 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017BA6                            ; ===========================================================================
00017BA6 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017BA8 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017BAA 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017BAC 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017BAE                            
00017BAE 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017BB0 0401                       		dc.b 4,	1
00017BB2 0607                       		dc.b 6,	7
00017BB4                            ; ===========================================================================
00017BB4                            
00017BB4                            Obj3D_Main:				; XREF: Obj3D_Index
00017BB4 45F9 0001 7BAE             		lea	(Obj3D_ObjData).l,a2
00017BBA 2248                       		movea.l	a0,a1
00017BBC 7202                       		moveq	#2,d1
00017BBE 6000                       		bra.s	Obj3D_LoadBoss
00017BC0                            ; ===========================================================================
00017BC0                            
00017BC0                            Obj3D_Loop:
00017BC0 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00017BC6 6600                       		bne.s	loc_17772
00017BC8                            
00017BC8                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017BC8 135A 0024                  		move.b	(a2)+,$24(a1)
00017BCC 12BC 003D                  		move.b	#$3D,0(a1)
00017BD0 3368 0008 0008             		move.w	8(a0),8(a1)
00017BD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017BDC 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017BE4 337C 0400 0002             		move.w	#$400,2(a1)
00017BEA 137C 0004 0001             		move.b	#4,1(a1)
00017BF0 137C 0020 0019             		move.b	#$20,$19(a1)
00017BF6 137C 0003 0018             		move.b	#3,$18(a1)
00017BFC 135A 001C                  		move.b	(a2)+,$1C(a1)
00017C00 2348 0034                  		move.l	a0,$34(a1)
00017C04 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017C08                            
00017C08                            loc_17772:
00017C08 3168 0008 0030             		move.w	8(a0),$30(a0)
00017C0E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017C14 117C 000F 0020             		move.b	#$F,$20(a0)
00017C1A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017C20                            
00017C20                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017C20 7000                       		moveq	#0,d0
00017C22 1028 0025                  		move.b	$25(a0),d0
00017C26 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017C2A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017C2E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017C34 4EB9 0000 AAF4             		jsr	AnimateSprite
00017C3A 1028 0022                  		move.b	$22(a0),d0
00017C3E 0200 0003                  		andi.b	#3,d0
00017C42 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017C48 8128 0001                  		or.b	d0,1(a0)
00017C4C 4EF9 0000 DA42             		jmp	DisplaySprite
00017C52                            ; ===========================================================================
00017C52 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017C54 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017C56 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017C58 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017C5A 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017C5C 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017C5E 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017C60                            ; ===========================================================================
00017C60                            
00017C60                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017C60 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017C66 6100 0000                  		bsr.w	BossMove
00017C6A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017C70 6600                       		bne.s	loc_177E6
00017C72 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017C78 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017C7C                            
00017C7C                            loc_177E6:
00017C7C 1028 003F                  		move.b	$3F(a0),d0
00017C80 4EB9 0000 2C22             		jsr	(CalcSine).l
00017C86 EC40                       		asr.w	#6,d0
00017C88 D068 0038                  		add.w	$38(a0),d0
00017C8C 3140 000C                  		move.w	d0,$C(a0)
00017C90 3168 0030 0008             		move.w	$30(a0),8(a0)
00017C96 5428 003F                  		addq.b	#2,$3F(a0)
00017C9A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017CA0 6400                       		bcc.s	locret_1784A
00017CA2 4A28 0022                  		tst.b	$22(a0)
00017CA6 6B00                       		bmi.s	loc_1784C
00017CA8 4A28 0020                  		tst.b	$20(a0)
00017CAC 6600                       		bne.s	locret_1784A
00017CAE 4A28 003E                  		tst.b	$3E(a0)
00017CB2 6600                       		bne.s	Obj3D_ShipFlash
00017CB4 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017CBA 303C 00AC                  		move.w	#$AC,d0
00017CBE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017CC4                            
00017CC4                            Obj3D_ShipFlash:
00017CC4 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017CC8 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017CCA 4A51                       		tst.w	(a1)
00017CCC 6600                       		bne.s	loc_1783C
00017CCE 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017CD2                            
00017CD2                            loc_1783C:
00017CD2 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017CD4 5328 003E                  		subq.b	#1,$3E(a0)
00017CD8 6600                       		bne.s	locret_1784A
00017CDA 117C 000F 0020             		move.b	#$F,$20(a0)
00017CE0                            
00017CE0                            locret_1784A:
00017CE0 4E75                       		rts	
00017CE2                            ; ===========================================================================
00017CE2                            
00017CE2                            loc_1784C:				; XREF: loc_177E6
00017CE2 7064                       		moveq	#100,d0
00017CE4 6100 0000                  		bsr.w	AddPoints
00017CE8 117C 0008 0025             		move.b	#8,$25(a0)
00017CEE 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017CF4 4E75                       		rts	
00017CF6                            
00017CF6                            ; ---------------------------------------------------------------------------
00017CF6                            ; Defeated boss	subroutine
00017CF6                            ; ---------------------------------------------------------------------------
00017CF6                            
00017CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CF6                            
00017CF6                            
00017CF6                            BossDefeated:
00017CF6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017CFA 0200 0007                  		andi.b	#7,d0
00017CFE 6600                       		bne.s	locret_178A2
00017D00 4EB9 0000 DEC8             		jsr	SingleObjLoad
00017D06 6600                       		bne.s	locret_178A2
00017D08 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017D0C 3368 0008 0008             		move.w	8(a0),8(a1)
00017D12 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D18 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017D1E 3200                       		move.w	d0,d1
00017D20 7200                       		moveq	#0,d1
00017D22 1200                       		move.b	d0,d1
00017D24 E409                       		lsr.b	#2,d1
00017D26 0441 0020                  		subi.w	#$20,d1
00017D2A D369 0008                  		add.w	d1,8(a1)
00017D2E E048                       		lsr.w	#8,d0
00017D30 E608                       		lsr.b	#3,d0
00017D32 D169 000C                  		add.w	d0,$C(a1)
00017D36                            
00017D36                            locret_178A2:
00017D36 4E75                       		rts	
00017D38                            ; End of function BossDefeated
00017D38                            
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            ; Subroutine to	move a boss
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            
00017D38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D38                            
00017D38                            
00017D38                            BossMove:
00017D38 2428 0030                  		move.l	$30(a0),d2
00017D3C 2628 0038                  		move.l	$38(a0),d3
00017D40 3028 0010                  		move.w	$10(a0),d0
00017D44 48C0                       		ext.l	d0
00017D46 E180                       		asl.l	#8,d0
00017D48 D480                       		add.l	d0,d2
00017D4A 3028 0012                  		move.w	$12(a0),d0
00017D4E 48C0                       		ext.l	d0
00017D50 E180                       		asl.l	#8,d0
00017D52 D680                       		add.l	d0,d3
00017D54 2142 0030                  		move.l	d2,$30(a0)
00017D58 2143 0038                  		move.l	d3,$38(a0)
00017D5C 4E75                       		rts	
00017D5E                            ; End of function BossMove
00017D5E                            
00017D5E                            ; ===========================================================================
00017D5E                            
00017D5E                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017D5E 317C FF00 0010             		move.w	#-$100,$10(a0)
00017D64 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017D6A 6100 FFCC                  		bsr.w	BossMove
00017D6E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017D74 6600                       		bne.s	loc_17916
00017D76 317C 0000 0010             		move.w	#0,$10(a0)
00017D7C 317C 0000 0012             		move.w	#0,$12(a0)
00017D82 5428 0025                  		addq.b	#2,$25(a0)
00017D86 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00017D8C 6600                       		bne.s	loc_17910
00017D8E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017D92 3368 0030 0008             		move.w	$30(a0),8(a1)
00017D98 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017D9E 2348 0034                  		move.l	a0,$34(a1)
00017DA2                            
00017DA2                            loc_17910:
00017DA2 317C 0077 003C             		move.w	#$77,$3C(a0)
00017DA8                            
00017DA8                            loc_17916:
00017DA8 6000 FED2                  		bra.w	loc_177E6
00017DAC                            ; ===========================================================================
00017DAC                            
00017DAC                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017DAC 5368 003C                  		subq.w	#1,$3C(a0)
00017DB0 6A00                       		bpl.s	Obj3D_Reverse
00017DB2 5428 0025                  		addq.b	#2,$25(a0)
00017DB6 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017DBC 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017DC2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017DC8 6600                       		bne.s	Obj3D_Reverse
00017DCA 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017DD0 317C 0040 0010             		move.w	#$40,$10(a0)
00017DD6                            
00017DD6                            Obj3D_Reverse:
00017DD6 0828 0000 0022             		btst	#0,$22(a0)
00017DDC 6600                       		bne.s	loc_17950
00017DDE 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017DE2                            
00017DE2                            loc_17950:
00017DE2 6000 FE98                  		bra.w	loc_177E6
00017DE6                            ; ===========================================================================
00017DE6                            
00017DE6                            loc_17954:				; XREF: Obj3D_ShipIndex
00017DE6 5368 003C                  		subq.w	#1,$3C(a0)
00017DEA 6B00                       		bmi.s	loc_17960
00017DEC 6100 FF4A                  		bsr.w	BossMove
00017DF0 6000                       		bra.s	loc_17976
00017DF2                            ; ===========================================================================
00017DF2                            
00017DF2                            loc_17960:
00017DF2 0868 0000 0022             		bchg	#0,$22(a0)
00017DF8 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017DFE 5528 0025                  		subq.b	#2,$25(a0)
00017E02 317C 0000 0010             		move.w	#0,$10(a0)
00017E08                            
00017E08                            loc_17976:
00017E08 6000 FE72                  		bra.w	loc_177E6
00017E0C                            ; ===========================================================================
00017E0C                            
00017E0C                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017E0C 5368 003C                  		subq.w	#1,$3C(a0)
00017E10 6B00                       		bmi.s	loc_17984
00017E12 6000 FEE2                  		bra.w	BossDefeated
00017E16                            ; ===========================================================================
00017E16                            
00017E16                            loc_17984:
00017E16 08E8 0000 0022             		bset	#0,$22(a0)
00017E1C 08A8 0007 0022             		bclr	#7,$22(a0)
00017E22 4268 0010                  		clr.w	$10(a0)
00017E26 5428 0025                  		addq.b	#2,$25(a0)
00017E2A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017E30 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017E34 6600                       		bne.s	locret_179AA
00017E36 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017E3C                            
00017E3C                            locret_179AA:
00017E3C 4E75                       		rts	
00017E3E                            ; ===========================================================================
00017E3E                            
00017E3E                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017E3E 5268 003C                  		addq.w	#1,$3C(a0)
00017E42 6700                       		beq.s	loc_179BC
00017E44 6A00                       		bpl.s	loc_179C2
00017E46 0668 0018 0012             		addi.w	#$18,$12(a0)
00017E4C 6000                       		bra.s	loc_179EE
00017E4E                            ; ===========================================================================
00017E4E                            
00017E4E                            loc_179BC:
00017E4E 4268 0012                  		clr.w	$12(a0)
00017E52 6000                       		bra.s	loc_179EE
00017E54                            ; ===========================================================================
00017E54                            
00017E54                            loc_179C2:
00017E54 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017E5A 6500                       		bcs.s	loc_179DA
00017E5C 6700                       		beq.s	loc_179E0
00017E5E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017E64 6500                       		bcs.s	loc_179EE
00017E66 5428 0025                  		addq.b	#2,$25(a0)
00017E6A 6000                       		bra.s	loc_179EE
00017E6C                            ; ===========================================================================
00017E6C                            
00017E6C                            loc_179DA:
00017E6C 5168 0012                  		subq.w	#8,$12(a0)
00017E70 6000                       		bra.s	loc_179EE
00017E72                            ; ===========================================================================
00017E72                            
00017E72                            loc_179E0:
00017E72 4268 0012                  		clr.w	$12(a0)
00017E76 303C 0081                  		move.w	#$81,d0
00017E7A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00017E80                            
00017E80                            loc_179EE:
00017E80 6100 FEB6                  		bsr.w	BossMove
00017E84 6000 FDF6                  		bra.w	loc_177E6
00017E88                            ; ===========================================================================
00017E88                            
00017E88                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017E88 317C 0400 0010             		move.w	#$400,$10(a0)
00017E8E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017E94 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017E9A 6700                       		beq.s	loc_17A10
00017E9C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017EA0 6000                       		bra.s	loc_17A16
00017EA2                            ; ===========================================================================
00017EA2                            
00017EA2                            loc_17A10:
00017EA2 4A28 0001                  		tst.b	1(a0)
00017EA6 6A00                       		bpl.s	Obj3D_ShipDel
00017EA8                            
00017EA8                            loc_17A16:
00017EA8 6100 FE8E                  		bsr.w	BossMove
00017EAC 6000 FDCE                  		bra.w	loc_177E6
00017EB0                            ; ===========================================================================
00017EB0                            
00017EB0                            Obj3D_ShipDel:
00017EB0 4EF9 0000 DA7E             		jmp	DeleteObject
00017EB6                            ; ===========================================================================
00017EB6                            
00017EB6                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017EB6 7000                       		moveq	#0,d0
00017EB8 7201                       		moveq	#1,d1
00017EBA 2268 0034                  		movea.l	$34(a0),a1
00017EBE 1029 0025                  		move.b	$25(a1),d0
00017EC2 5900                       		subq.b	#4,d0
00017EC4 6600                       		bne.s	loc_17A3E
00017EC6 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017ECC 6600                       		bne.s	loc_17A46
00017ECE 7204                       		moveq	#4,d1
00017ED0                            
00017ED0                            loc_17A3E:
00017ED0 5D00                       		subq.b	#6,d0
00017ED2 6B00                       		bmi.s	loc_17A46
00017ED4 720A                       		moveq	#$A,d1
00017ED6 6000                       		bra.s	loc_17A5A
00017ED8                            ; ===========================================================================
00017ED8                            
00017ED8                            loc_17A46:
00017ED8 4A29 0020                  		tst.b	$20(a1)
00017EDC 6600                       		bne.s	loc_17A50
00017EDE 7205                       		moveq	#5,d1
00017EE0 6000                       		bra.s	loc_17A5A
00017EE2                            ; ===========================================================================
00017EE2                            
00017EE2                            loc_17A50:
00017EE2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017EE8 6500                       		bcs.s	loc_17A5A
00017EEA 7204                       		moveq	#4,d1
00017EEC                            
00017EEC                            loc_17A5A:
00017EEC 1141 001C                  		move.b	d1,$1C(a0)
00017EF0 5500                       		subq.b	#2,d0
00017EF2 6600                       		bne.s	Obj3D_FaceDisp
00017EF4 117C 0006 001C             		move.b	#6,$1C(a0)
00017EFA 4A28 0001                  		tst.b	1(a0)
00017EFE 6A00                       		bpl.s	Obj3D_FaceDel
00017F00                            
00017F00                            Obj3D_FaceDisp:
00017F00 6000                       		bra.s	Obj3D_Display
00017F02                            ; ===========================================================================
00017F02                            
00017F02                            Obj3D_FaceDel:
00017F02 4EF9 0000 DA7E             		jmp	DeleteObject
00017F08                            ; ===========================================================================
00017F08                            
00017F08                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017F08 117C 0007 001C             		move.b	#7,$1C(a0)
00017F0E 2268 0034                  		movea.l	$34(a0),a1
00017F12 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017F18 6600                       		bne.s	loc_17A96
00017F1A 117C 000B 001C             		move.b	#$B,$1C(a0)
00017F20 4A28 0001                  		tst.b	1(a0)
00017F24 6A00                       		bpl.s	Obj3D_FlameDel
00017F26 6000                       		bra.s	Obj3D_FlameDisp
00017F28                            ; ===========================================================================
00017F28                            
00017F28                            loc_17A96:
00017F28 3029 0010                  		move.w	$10(a1),d0
00017F2C 6700                       		beq.s	Obj3D_FlameDisp
00017F2E 117C 0008 001C             		move.b	#8,$1C(a0)
00017F34                            
00017F34                            Obj3D_FlameDisp:
00017F34 6000                       		bra.s	Obj3D_Display
00017F36                            ; ===========================================================================
00017F36                            
00017F36                            Obj3D_FlameDel:
00017F36 4EF9 0000 DA7E             		jmp	DeleteObject
00017F3C                            ; ===========================================================================
00017F3C                            
00017F3C                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017F3C 2268 0034                  		movea.l	$34(a0),a1
00017F40 3169 0008 0008             		move.w	8(a1),8(a0)
00017F46 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017F4C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017F52 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017F58 4EB9 0000 AAF4             		jsr	AnimateSprite
00017F5E 1028 0022                  		move.b	$22(a0),d0
00017F62 0200 0003                  		andi.b	#3,d0
00017F66 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017F6C 8128 0001                  		or.b	d0,1(a0)
00017F70 4EF9 0000 DA42             		jmp	DisplaySprite
00017F76                            ; ===========================================================================
00017F76                            ; ---------------------------------------------------------------------------
00017F76                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017F76                            ; ---------------------------------------------------------------------------
00017F76                            
00017F76                            Obj48:					; XREF: Obj_Index
00017F76 7000                       		moveq	#0,d0
00017F78 1028 0024                  		move.b	$24(a0),d0
00017F7C 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017F80 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017F84                            ; ===========================================================================
00017F84 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017F86 0000                       		dc.w Obj48_Base-Obj48_Index
00017F88 0000                       		dc.w Obj48_Display2-Obj48_Index
00017F8A 0000                       		dc.w loc_17C68-Obj48_Index
00017F8C 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017F8E                            ; ===========================================================================
00017F8E                            
00017F8E                            Obj48_Main:				; XREF: Obj48_Index
00017F8E 5428 0024                  		addq.b	#2,$24(a0)
00017F92 317C 4080 0026             		move.w	#$4080,$26(a0)
00017F98 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017F9E 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017FA6 317C 046C 0002             		move.w	#$46C,2(a0)
00017FAC 45E8 0028                  		lea	$28(a0),a2
00017FB0 14FC 0000                  		move.b	#0,(a2)+
00017FB4 7205                       		moveq	#5,d1
00017FB6 2248                       		movea.l	a0,a1
00017FB8 6000                       		bra.s	loc_17B60
00017FBA                            ; ===========================================================================
00017FBA                            
00017FBA                            Obj48_MakeLinks:
00017FBA 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00017FC0 6600                       		bne.s	Obj48_MakeBall
00017FC2 3368 0008 0008             		move.w	8(a0),8(a1)
00017FC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FCE 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017FD2 137C 0006 0024             		move.b	#6,$24(a1)
00017FD8 237C 0000 7FF2 0004        		move.l	#Map_obj15,4(a1)
00017FE0 337C 0380 0002             		move.w	#$380,2(a1)
00017FE6 137C 0001 001A             		move.b	#1,$1A(a1)
00017FEC 5228 0028                  		addq.b	#1,$28(a0)
00017FF0                            
00017FF0                            loc_17B60:				; XREF: Obj48_Main
00017FF0 3A09                       		move.w	a1,d5
00017FF2 0445 D000                  		subi.w	#$D000,d5
00017FF6 EC4D                       		lsr.w	#6,d5
00017FF8 0245 007F                  		andi.w	#$7F,d5
00017FFC 14C5                       		move.b	d5,(a2)+
00017FFE 137C 0004 0001             		move.b	#4,1(a1)
00018004 137C 0008 0019             		move.b	#8,$19(a1)
0001800A 137C 0006 0018             		move.b	#6,$18(a1)
00018010 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018016 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001801A                            
0001801A                            Obj48_MakeBall:
0001801A 137C 0008 0024             		move.b	#8,$24(a1)
00018020 237C 0000 8550 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018028 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001802E 137C 0001 001A             		move.b	#1,$1A(a1)
00018034 137C 0005 0018             		move.b	#5,$18(a1)
0001803A 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018040 4E75                       		rts	
00018042                            ; ===========================================================================
00018042                            
00018042 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018048                            
00018048                            ; ===========================================================================
00018048                            
00018048                            Obj48_Base:				; XREF: Obj48_Index
00018048 47F9 0001 8042             		lea	(Obj48_PosData).l,a3
0001804E 45E8 0028                  		lea	$28(a0),a2
00018052 7C00                       		moveq	#0,d6
00018054 1C1A                       		move.b	(a2)+,d6
00018056                            
00018056                            loc_17BC6:
00018056 7800                       		moveq	#0,d4
00018058 181A                       		move.b	(a2)+,d4
0001805A ED4C                       		lsl.w	#6,d4
0001805C 0684 00FF D000             		addi.l	#$FFD000,d4
00018062 2244                       		movea.l	d4,a1
00018064 101B                       		move.b	(a3)+,d0
00018066 B029 003C                  		cmp.b	$3C(a1),d0
0001806A 6700                       		beq.s	loc_17BE0
0001806C 5229 003C                  		addq.b	#1,$3C(a1)
00018070                            
00018070                            loc_17BE0:
00018070 51CE FFE4                  		dbf	d6,loc_17BC6
00018074                            
00018074 B029 003C                  		cmp.b	$3C(a1),d0
00018078 6600                       		bne.s	loc_17BFA
0001807A 2268 0034                  		movea.l	$34(a0),a1
0001807E 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018084 6600                       		bne.s	loc_17BFA
00018086 5428 0024                  		addq.b	#2,$24(a0)
0001808A                            
0001808A                            loc_17BFA:
0001808A 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018090 6700                       		beq.s	Obj48_Display
00018092 5268 0032                  		addq.w	#1,$32(a0)
00018096                            
00018096                            Obj48_Display:
00018096 6100 0000                  		bsr.w	sub_17C2A
0001809A 1028 0026                  		move.b	$26(a0),d0
0001809E 4EB9 0000 7F64             		jsr	(Obj15_Move2).l
000180A4 4EF9 0000 DA42             		jmp	DisplaySprite
000180AA                            ; ===========================================================================
000180AA                            
000180AA                            Obj48_Display2:				; XREF: Obj48_Index
000180AA 6100 0000                  		bsr.w	sub_17C2A
000180AE 4EB9 0000 7F24             		jsr	(Obj48_Move).l
000180B4 4EF9 0000 DA42             		jmp	DisplaySprite
000180BA                            
000180BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180BA                            
000180BA                            
000180BA                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000180BA 2268 0034                  		movea.l	$34(a0),a1
000180BE 0628 0020 001B             		addi.b	#$20,$1B(a0)
000180C4 6400                       		bcc.s	loc_17C3C
000180C6 0868 0000 001A             		bchg	#0,$1A(a0)
000180CC                            
000180CC                            loc_17C3C:
000180CC 3169 0008 003A             		move.w	8(a1),$3A(a0)
000180D2 3029 000C                  		move.w	$C(a1),d0
000180D6 D068 0032                  		add.w	$32(a0),d0
000180DA 3140 0038                  		move.w	d0,$38(a0)
000180DE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180E4 4A29 0022                  		tst.b	$22(a1)
000180E8 6A00                       		bpl.s	locret_17C66
000180EA 10BC 003F                  		move.b	#$3F,0(a0)
000180EE 117C 0000 0024             		move.b	#0,$24(a0)
000180F4                            
000180F4                            locret_17C66:
000180F4 4E75                       		rts	
000180F6                            ; End of function sub_17C2A
000180F6                            
000180F6                            ; ===========================================================================
000180F6                            
000180F6                            loc_17C68:				; XREF: Obj48_Index
000180F6 2268 0034                  		movea.l	$34(a0),a1
000180FA 4A29 0022                  		tst.b	$22(a1)
000180FE 6A00                       		bpl.s	Obj48_Display3
00018100 10BC 003F                  		move.b	#$3F,0(a0)
00018104 117C 0000 0024             		move.b	#0,$24(a0)
0001810A                            
0001810A                            Obj48_Display3:
0001810A 4EF9 0000 DA42             		jmp	DisplaySprite
00018110                            ; ===========================================================================
00018110                            
00018110                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018110 7000                       		moveq	#0,d0
00018112 4A28 001A                  		tst.b	$1A(a0)
00018116 6600                       		bne.s	Obj48_Vanish
00018118 5200                       		addq.b	#1,d0
0001811A                            
0001811A                            Obj48_Vanish:
0001811A 1140 001A                  		move.b	d0,$1A(a0)
0001811E 2268 0034                  		movea.l	$34(a0),a1
00018122 4A29 0022                  		tst.b	$22(a1)
00018126 6A00                       		bpl.s	Obj48_Display4
00018128 117C 0000 0020             		move.b	#0,$20(a0)
0001812E 6100 FBC6                  		bsr.w	BossDefeated
00018132 5328 003C                  		subq.b	#1,$3C(a0)
00018136 6A00                       		bpl.s	Obj48_Display4
00018138 10BC 003F                  		move.b	#$3F,(a0)
0001813C 117C 0000 0024             		move.b	#0,$24(a0)
00018142                            
00018142                            Obj48_Display4:
00018142 4EF9 0000 DA42             		jmp	DisplaySprite
00018148                            ; ===========================================================================
00018148                            Ani_Eggman:
00018148                            	include "_anim\Eggman.asm"
00018148                            ; ---------------------------------------------------------------------------
00018148                            ; Animation script - Eggman (bosses)
00018148                            ; ---------------------------------------------------------------------------
00018148 0000                       		dc.w byte_17CD4-Ani_Eggman
0001814A 0000                       		dc.w byte_17CD8-Ani_Eggman
0001814C 0000                       		dc.w byte_17CDC-Ani_Eggman
0001814E 0000                       		dc.w byte_17CE0-Ani_Eggman
00018150 0000                       		dc.w byte_17CE4-Ani_Eggman
00018152 0000                       		dc.w byte_17CE8-Ani_Eggman
00018154 0000                       		dc.w byte_17CEC-Ani_Eggman
00018156 0000                       		dc.w byte_17CF0-Ani_Eggman
00018158 0000                       		dc.w byte_17CF4-Ani_Eggman
0001815A 0000                       		dc.w byte_17CF8-Ani_Eggman
0001815C 0000                       		dc.w byte_17CFC-Ani_Eggman
0001815E 0000                       		dc.w byte_17D00-Ani_Eggman
00018160 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018164 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018168 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001816C 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018170 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018174 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018178 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001817C 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018180 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018184 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018188 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001818C 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018198                            		even
00018198                            		even
00018198                            
00018198                            ; ---------------------------------------------------------------------------
00018198                            ; Sprite mappings - Eggman (boss levels)
00018198                            ; ---------------------------------------------------------------------------
00018198                            Map_Eggman:
00018198                            	include "_maps\Eggman.asm"
00018198                            Map_dc7e:
00018198 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001819A 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001819C 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001819E 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000181A0 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000181A2 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000181A4 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000181A6 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000181A8 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000181AA 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000181AC 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000181AE 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000181B0 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000181B2 06                         Map_dc7e_1A: 	dc.b $6
000181B3 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000181B8 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000181BD FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000181C2 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000181C7 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000181CC 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000181D1 02                         Map_dc7e_39: 	dc.b $2
000181D2 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000181D7 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000181DC 02                         Map_dc7e_44: 	dc.b $2
000181DD E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000181E2 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000181E7 03                         Map_dc7e_4F: 	dc.b $3
000181E8 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000181ED EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000181F2 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000181F7 03                         Map_dc7e_5F: 	dc.b $3
000181F8 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000181FD EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018202 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018207 03                         Map_dc7e_6F: 	dc.b $3
00018208 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001820D EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018212 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018217 03                         Map_dc7e_7F: 	dc.b $3
00018218 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001821D E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018222 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018227 04                         Map_dc7e_8F: 	dc.b $4
00018228 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
0001822D E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018232 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018237 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001823C 01                         Map_dc7e_A4: 	dc.b $1
0001823D 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018242 01                         Map_dc7e_AA: 	dc.b $1
00018243 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018248 00                         Map_dc7e_B0: 	dc.b $0
00018249 02                         Map_dc7e_B1: 	dc.b $2
0001824A 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
0001824F 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018254 02                         Map_dc7e_BC: 	dc.b $2
00018255 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001825A 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018260 00                         	even
00018260 00                         	even
00018260                            
00018260                            ; ---------------------------------------------------------------------------
00018260                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018260                            ; ---------------------------------------------------------------------------
00018260                            Map_BossItems:
00018260                            	include "_maps\Boss items.asm"
00018260                            ; ---------------------------------------------------------------------------
00018260                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018260                            ; ---------------------------------------------------------------------------
00018260 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018264 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018268 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001826C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018270 01                         byte_17DE4:	dc.b 1
00018271 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018276 02                         byte_17DEA:	dc.b 2
00018277 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001827C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018281 00                         		dc.b 0
00018282 01                         byte_17DF6:	dc.b 1
00018283 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018288 01                         byte_17DFC:	dc.b 1
00018289 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001828E 01                         byte_17E02:	dc.b 1
0001828F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018294 04                         byte_17E08:	dc.b 4
00018295 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001829A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001829F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000182A4 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000182A9 00                         		dc.b 0
000182AA 02                         byte_17E1E:	dc.b 2
000182AB 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000182B0 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000182B5 00                         		dc.b 0
000182B6 02                         byte_17E2A:	dc.b 2
000182B7 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000182BC 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000182C2 00                         		even
000182C2 00                         		even
000182C2                            
000182C2                            ; ===========================================================================
000182C2                            ; ---------------------------------------------------------------------------
000182C2                            ; Object 77 - Eggman (LZ)
000182C2                            ; ---------------------------------------------------------------------------
000182C2                            
000182C2                            Obj77:					; XREF: Obj_Index
000182C2 7000                       		moveq	#0,d0
000182C4 1028 0024                  		move.b	$24(a0),d0
000182C8 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000182CC 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000182D0                            ; ===========================================================================
000182D0 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000182D2 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000182D4 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000182D6 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000182D8                            
000182D8 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000182DA 0401                       		dc.b 4,	1
000182DC 0607                       		dc.b 6,	7
000182DE                            ; ===========================================================================
000182DE                            
000182DE                            Obj77_Main:				; XREF: Obj77_Index
000182DE 317C 1E10 0008             		move.w	#$1E10,8(a0)
000182E4 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000182EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000182F0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000182F6 117C 000F 0020             		move.b	#$F,$20(a0)
000182FC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018302 117C 0004 0018             		move.b	#4,$18(a0)
00018308 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001830C 2248                       		movea.l	a0,a1
0001830E 7202                       		moveq	#2,d1
00018310 6000                       		bra.s	Obj77_LoadBoss
00018312                            ; ===========================================================================
00018312                            
00018312                            Obj77_Loop:
00018312 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00018318 6600                       		bne.s	Obj77_ShipMain
0001831A 12BC 0077                  		move.b	#$77,0(a1)
0001831E 3368 0008 0008             		move.w	8(a0),8(a1)
00018324 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001832A                            
0001832A                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001832A 08A8 0000 0022             		bclr	#0,$22(a0)
00018330 4229 0025                  		clr.b	$25(a1)
00018334 135A 0024                  		move.b	(a2)+,$24(a1)
00018338 135A 001C                  		move.b	(a2)+,$1C(a1)
0001833C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018342 237C 0001 8198 0004        		move.l	#Map_Eggman,4(a1)
0001834A 337C 0400 0002             		move.w	#$400,2(a1)
00018350 137C 0004 0001             		move.b	#4,1(a1)
00018356 137C 0020 0019             		move.b	#$20,$19(a1)
0001835C 2348 0034                  		move.l	a0,$34(a1)
00018360 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018364                            
00018364                            Obj77_ShipMain:
00018364 43F8 D000                  		lea	($FFFFD000).w,a1
00018368 7000                       		moveq	#0,d0
0001836A 1028 0025                  		move.b	$25(a0),d0
0001836E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018372 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018376 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
0001837C 4EB9 0000 AAF4             		jsr	AnimateSprite
00018382 7003                       		moveq	#3,d0
00018384 C028 0022                  		and.b	$22(a0),d0
00018388 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001838E 8128 0001                  		or.b	d0,1(a0)
00018392 4EF9 0000 DA42             		jmp	DisplaySprite
00018398                            ; ===========================================================================
00018398 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001839C 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000183A0 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000183A4 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000183A8                            ; ===========================================================================
000183A8                            
000183A8                            loc_17F1E:				; XREF: Obj77_ShipIndex
000183A8 3029 0008                  		move.w	8(a1),d0
000183AC 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000183B0 6500                       		bcs.s	loc_17F38
000183B2 317C FE80 0012             		move.w	#-$180,$12(a0)
000183B8 317C 0060 0010             		move.w	#$60,$10(a0)
000183BE 5428 0025                  		addq.b	#2,$25(a0)
000183C2                            
000183C2                            loc_17F38:
000183C2 6100 F974                  		bsr.w	BossMove
000183C6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000183CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000183D2                            
000183D2                            loc_17F48:
000183D2 4A28 003D                  		tst.b	$3D(a0)
000183D6 6600                       		bne.s	loc_17F8E
000183D8 4A28 0022                  		tst.b	$22(a0)
000183DC 6B00                       		bmi.s	loc_17F92
000183DE 4A28 0020                  		tst.b	$20(a0)
000183E2 6600                       		bne.s	locret_17F8C
000183E4 4A28 003E                  		tst.b	$3E(a0)
000183E8 6600                       		bne.s	loc_17F70
000183EA 117C 0020 003E             		move.b	#$20,$3E(a0)
000183F0 303C 00AC                  		move.w	#$AC,d0
000183F4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
000183FA                            
000183FA                            loc_17F70:
000183FA 43F8 FB22                  		lea	($FFFFFB22).w,a1
000183FE 7000                       		moveq	#0,d0
00018400 4A51                       		tst.w	(a1)
00018402 6600                       		bne.s	loc_17F7E
00018404 303C 0EEE                  		move.w	#$EEE,d0
00018408                            
00018408                            loc_17F7E:
00018408 3280                       		move.w	d0,(a1)
0001840A 5328 003E                  		subq.b	#1,$3E(a0)
0001840E 6600                       		bne.s	locret_17F8C
00018410 117C 000F 0020             		move.b	#$F,$20(a0)
00018416                            
00018416                            locret_17F8C:
00018416 4E75                       		rts	
00018418                            ; ===========================================================================
00018418                            
00018418                            loc_17F8E:				; XREF: loc_17F48
00018418 6000 F8DC                  		bra.w	BossDefeated
0001841C                            ; ===========================================================================
0001841C                            
0001841C                            loc_17F92:				; XREF: loc_17F48
0001841C 7064                       		moveq	#100,d0
0001841E 6100 0000                  		bsr.w	AddPoints
00018422 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018428 4E75                       		rts	
0001842A                            ; ===========================================================================
0001842A                            
0001842A                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001842A 70FE                       		moveq	#-2,d0
0001842C 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018432 6500                       		bcs.s	loc_17FB6
00018434 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001843A 4268 0010                  		clr.w	$10(a0)
0001843E 5240                       		addq.w	#1,d0
00018440                            
00018440                            loc_17FB6:
00018440 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018446 6E00                       		bgt.s	loc_17FCA
00018448 317C 0500 0038             		move.w	#$500,$38(a0)
0001844E 4268 0012                  		clr.w	$12(a0)
00018452 5240                       		addq.w	#1,d0
00018454                            
00018454                            loc_17FCA:
00018454 6600                       		bne.s	loc_17FDC
00018456 317C 0140 0010             		move.w	#$140,$10(a0)
0001845C 317C FE00 0012             		move.w	#-$200,$12(a0)
00018462 5428 0025                  		addq.b	#2,$25(a0)
00018466                            
00018466                            loc_17FDC:
00018466 6000 FF5A                  		bra.w	loc_17F38
0001846A                            ; ===========================================================================
0001846A                            
0001846A                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001846A 70FE                       		moveq	#-2,d0
0001846C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018472 6500                       		bcs.s	loc_17FF6
00018474 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001847A 4268 0010                  		clr.w	$10(a0)
0001847E 5240                       		addq.w	#1,d0
00018480                            
00018480                            loc_17FF6:
00018480 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018486 6E00                       		bgt.s	loc_1800A
00018488 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001848E 4268 0012                  		clr.w	$12(a0)
00018492 5240                       		addq.w	#1,d0
00018494                            
00018494                            loc_1800A:
00018494 6600                       		bne.s	loc_1801A
00018496 317C FE80 0012             		move.w	#-$180,$12(a0)
0001849C 5428 0025                  		addq.b	#2,$25(a0)
000184A0 4228 003F                  		clr.b	$3F(a0)
000184A4                            
000184A4                            loc_1801A:
000184A4 6000 FF1C                  		bra.w	loc_17F38
000184A8                            ; ===========================================================================
000184A8                            
000184A8                            loc_1801E:				; XREF: Obj77_ShipIndex
000184A8 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000184AE 6E00                       		bgt.s	loc_1804E
000184B0 317C 0100 0038             		move.w	#$100,$38(a0)
000184B6 317C 0140 0010             		move.w	#$140,$10(a0)
000184BC 317C FF80 0012             		move.w	#-$80,$12(a0)
000184C2 4A28 003D                  		tst.b	$3D(a0)
000184C6 6700                       		beq.s	loc_18046
000184C8 E1E8 0010                  		asl	$10(a0)
000184CC E1E8 0012                  		asl	$12(a0)
000184D0                            
000184D0                            loc_18046:
000184D0 5428 0025                  		addq.b	#2,$25(a0)
000184D4 6000 FEEC                  		bra.w	loc_17F38
000184D8                            ; ===========================================================================
000184D8                            
000184D8                            loc_1804E:
000184D8 08E8 0000 0022             		bset	#0,$22(a0)
000184DE 5428 003F                  		addq.b	#2,$3F(a0)
000184E2 1028 003F                  		move.b	$3F(a0),d0
000184E6 4EB9 0000 2C22             		jsr	(CalcSine).l
000184EC 4A41                       		tst.w	d1
000184EE 6A00                       		bpl.s	loc_1806C
000184F0 08A8 0000 0022             		bclr	#0,$22(a0)
000184F6                            
000184F6                            loc_1806C:
000184F6 E840                       		asr.w	#4,d0
000184F8 4840                       		swap	d0
000184FA 4240                       		clr.w	d0
000184FC D0A8 0030                  		add.l	$30(a0),d0
00018500 4840                       		swap	d0
00018502 3140 0008                  		move.w	d0,8(a0)
00018506 3028 0012                  		move.w	$12(a0),d0
0001850A 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001850E 9268 000C                  		sub.w	$C(a0),d1
00018512 6500                       		bcs.s	loc_180A2
00018514 0441 0048                  		subi.w	#$48,d1
00018518 6500                       		bcs.s	loc_180A2
0001851A E240                       		asr.w	#1,d0
0001851C 0441 0028                  		subi.w	#$28,d1
00018520 6500                       		bcs.s	loc_180A2
00018522 E240                       		asr.w	#1,d0
00018524 0441 0028                  		subi.w	#$28,d1
00018528 6500                       		bcs.s	loc_180A2
0001852A 7000                       		moveq	#0,d0
0001852C                            
0001852C                            loc_180A2:
0001852C 48C0                       		ext.l	d0
0001852E E180                       		asl.l	#8,d0
00018530 4A28 003D                  		tst.b	$3D(a0)
00018534 6700                       		beq.s	loc_180AE
00018536 D080                       		add.l	d0,d0
00018538                            
00018538                            loc_180AE:
00018538 D1A8 0038                  		add.l	d0,$38(a0)
0001853C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018542 6000 FE8E                  		bra.w	loc_17F48
00018546                            ; ===========================================================================
00018546                            
00018546                            loc_180BC:				; XREF: Obj77_ShipIndex
00018546 70FE                       		moveq	#-2,d0
00018548 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001854E 6500                       		bcs.s	loc_180D2
00018550 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018556 4268 0010                  		clr.w	$10(a0)
0001855A 5240                       		addq.w	#1,d0
0001855C                            
0001855C                            loc_180D2:
0001855C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018562 6E00                       		bgt.s	loc_180E6
00018564 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001856A 4268 0012                  		clr.w	$12(a0)
0001856E 5240                       		addq.w	#1,d0
00018570                            
00018570                            loc_180E6:
00018570 6600                       		bne.s	loc_180F2
00018572 5428 0025                  		addq.b	#2,$25(a0)
00018576 08A8 0000 0022             		bclr	#0,$22(a0)
0001857C                            
0001857C                            loc_180F2:
0001857C 6000 FE44                  		bra.w	loc_17F38
00018580                            ; ===========================================================================
00018580                            
00018580                            loc_180F6:				; XREF: Obj77_ShipIndex
00018580 4A28 003D                  		tst.b	$3D(a0)
00018584 6600                       		bne.s	loc_18112
00018586 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001858C 6D00                       		blt.s	loc_18126
0001858E 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018594 6E00                       		bgt.s	loc_18126
00018596 117C 0032 003C             		move.b	#$32,$3C(a0)
0001859C                            
0001859C                            loc_18112:
0001859C 303C 0082                  		move.w	#$82,d0
000185A0 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
000185A6 08E8 0000 0022             		bset	#0,$22(a0)
000185AC 5428 0025                  		addq.b	#2,$25(a0)
000185B0                            
000185B0                            loc_18126:
000185B0 6000 FE10                  		bra.w	loc_17F38
000185B4                            ; ===========================================================================
000185B4                            
000185B4                            loc_1812A:				; XREF: Obj77_ShipIndex
000185B4 4A28 003D                  		tst.b	$3D(a0)
000185B8 6600                       		bne.s	loc_18136
000185BA 5328 003C                  		subq.b	#1,$3C(a0)
000185BE 6600                       		bne.s	loc_1814E
000185C0                            
000185C0                            loc_18136:
000185C0 4228 003C                  		clr.b	$3C(a0)
000185C4 317C 0400 0010             		move.w	#$400,$10(a0)
000185CA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000185D0 4228 003D                  		clr.b	$3D(a0)
000185D4 5428 0025                  		addq.b	#2,$25(a0)
000185D8                            
000185D8                            loc_1814E:
000185D8 6000 FDE8                  		bra.w	loc_17F38
000185DC                            ; ===========================================================================
000185DC                            
000185DC                            loc_18152:				; XREF: Obj77_ShipIndex
000185DC 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
000185E2 6400                       		bcc.s	loc_18160
000185E4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000185E8 6000                       		bra.s	loc_18166
000185EA                            ; ===========================================================================
000185EA                            
000185EA                            loc_18160:
000185EA 4A28 0001                  		tst.b	1(a0)
000185EE 6A00                       		bpl.s	Obj77_ShipDel
000185F0                            
000185F0                            loc_18166:
000185F0 6000 FDD0                  		bra.w	loc_17F38
000185F4                            ; ===========================================================================
000185F4                            
000185F4                            Obj77_ShipDel:
000185F4 4EF9 0000 DA7E             		jmp	DeleteObject
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            Obj77_FaceMain:				; XREF: Obj77_Index
000185FA 2268 0034                  		movea.l	$34(a0),a1
000185FE 1011                       		move.b	(a1),d0
00018600 B010                       		cmp.b	(a0),d0
00018602 6600                       		bne.s	Obj77_FaceDel
00018604 7000                       		moveq	#0,d0
00018606 1029 0025                  		move.b	$25(a1),d0
0001860A 7201                       		moveq	#1,d1
0001860C 4A28 003D                  		tst.b	$3D(a0)
00018610 6700                       		beq.s	loc_1818C
00018612 720A                       		moveq	#$A,d1
00018614 6000                       		bra.s	loc_181A0
00018616                            ; ===========================================================================
00018616                            
00018616                            loc_1818C:
00018616 4A29 0020                  		tst.b	$20(a1)
0001861A 6600                       		bne.s	loc_18196
0001861C 7205                       		moveq	#5,d1
0001861E 6000                       		bra.s	loc_181A0
00018620                            ; ===========================================================================
00018620                            
00018620                            loc_18196:
00018620 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018626 6500                       		bcs.s	loc_181A0
00018628 7204                       		moveq	#4,d1
0001862A                            
0001862A                            loc_181A0:
0001862A 1141 001C                  		move.b	d1,$1C(a0)
0001862E 0C00 000E                  		cmpi.b	#$E,d0
00018632 6600                       		bne.s	loc_181B6
00018634 117C 0006 001C             		move.b	#6,$1C(a0)
0001863A 4A28 0001                  		tst.b	1(a0)
0001863E 6A00                       		bpl.s	Obj77_FaceDel
00018640                            
00018640                            loc_181B6:
00018640 6000                       		bra.s	Obj77_Display
00018642                            ; ===========================================================================
00018642                            
00018642                            Obj77_FaceDel:
00018642 4EF9 0000 DA7E             		jmp	DeleteObject
00018648                            ; ===========================================================================
00018648                            
00018648                            Obj77_FlameMain:			; XREF: Obj77_Index
00018648 117C 0007 001C             		move.b	#7,$1C(a0)
0001864E 2268 0034                  		movea.l	$34(a0),a1
00018652 1011                       		move.b	(a1),d0
00018654 B010                       		cmp.b	(a0),d0
00018656 6600                       		bne.s	Obj77_FlameDel
00018658 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001865E 6600                       		bne.s	loc_181F0
00018660 117C 000B 001C             		move.b	#$B,$1C(a0)
00018666 4A28 0001                  		tst.b	1(a0)
0001866A 6A00                       		bpl.s	Obj77_FlameDel
0001866C 6000                       		bra.s	loc_181F0
0001866E                            ; ===========================================================================
0001866E 4A69 0010                  		tst.w	$10(a1)
00018672 6700                       		beq.s	loc_181F0
00018674 117C 0008 001C             		move.b	#8,$1C(a0)
0001867A                            
0001867A                            loc_181F0:
0001867A 6000                       		bra.s	Obj77_Display
0001867C                            ; ===========================================================================
0001867C                            
0001867C                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001867C 4EF9 0000 DA7E             		jmp	DeleteObject
00018682                            ; ===========================================================================
00018682                            
00018682                            Obj77_Display:
00018682 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
00018688 4EB9 0000 AAF4             		jsr	AnimateSprite
0001868E 2268 0034                  		movea.l	$34(a0),a1
00018692 3169 0008 0008             		move.w	8(a1),8(a0)
00018698 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001869E 1169 0022 0022             		move.b	$22(a1),$22(a0)
000186A4 7003                       		moveq	#3,d0
000186A6 C028 0022                  		and.b	$22(a0),d0
000186AA 0228 00FC 0001             		andi.b	#-4,1(a0)
000186B0 8128 0001                  		or.b	d0,1(a0)
000186B4 4EF9 0000 DA42             		jmp	DisplaySprite
000186BA                            ; ===========================================================================
000186BA                            ; ---------------------------------------------------------------------------
000186BA                            ; Object 73 - Eggman (MZ)
000186BA                            ; ---------------------------------------------------------------------------
000186BA                            
000186BA                            Obj73:					; XREF: Obj_Index
000186BA 7000                       		moveq	#0,d0
000186BC 1028 0024                  		move.b	$24(a0),d0
000186C0 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000186C4 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000186C8                            ; ===========================================================================
000186C8 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000186CA 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000186CC 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000186CE 0000                       		dc.w Obj73_FlameMain-Obj73_Index
000186D0 0000                       		dc.w Obj73_TubeMain-Obj73_Index
000186D2                            
000186D2 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000186D5 0401 04                    		dc.b 4,	1, 4
000186D8 0607 04                    		dc.b 6,	7, 4
000186DB 0800 03                    		dc.b 8,	0, 3
000186DE                            ; ===========================================================================
000186DE                            
000186DE                            Obj73_Main:				; XREF: Obj73_Index
000186DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000186E4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000186EA 117C 000F 0020             		move.b	#$F,$20(a0)
000186F0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000186F6 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000186FA 2248                       		movea.l	a0,a1
000186FC 7203                       		moveq	#3,d1
000186FE 6000                       		bra.s	Obj73_LoadBoss
00018700                            ; ===========================================================================
00018700                            
00018700                            Obj73_Loop:
00018700 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00018706 6600                       		bne.s	Obj73_ShipMain
00018708 12BC 0073                  		move.b	#$73,0(a1)
0001870C 3368 0008 0008             		move.w	8(a0),8(a1)
00018712 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018718                            
00018718                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018718 08A8 0000 0022             		bclr	#0,$22(a0)
0001871E 4229 0025                  		clr.b	$25(a1)
00018722 135A 0024                  		move.b	(a2)+,$24(a1)
00018726 135A 001C                  		move.b	(a2)+,$1C(a1)
0001872A 135A 0018                  		move.b	(a2)+,$18(a1)
0001872E 237C 0001 8198 0004        		move.l	#Map_Eggman,4(a1)
00018736 337C 0400 0002             		move.w	#$400,2(a1)
0001873C 137C 0004 0001             		move.b	#4,1(a1)
00018742 137C 0020 0019             		move.b	#$20,$19(a1)
00018748 2348 0034                  		move.l	a0,$34(a1)
0001874C 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018750                            
00018750                            Obj73_ShipMain:
00018750 7000                       		moveq	#0,d0
00018752 1028 0025                  		move.b	$25(a0),d0
00018756 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001875A 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001875E 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
00018764 4EB9 0000 AAF4             		jsr	AnimateSprite
0001876A 7003                       		moveq	#3,d0
0001876C C028 0022                  		and.b	$22(a0),d0
00018770 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018776 8128 0001                  		or.b	d0,1(a0)
0001877A 4EF9 0000 DA42             		jmp	DisplaySprite
00018780                            ; ===========================================================================
00018780 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018782 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018784 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018786 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018788 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001878A                            ; ===========================================================================
0001878A                            
0001878A                            loc_18302:				; XREF: Obj73_ShipIndex
0001878A 1028 003F                  		move.b	$3F(a0),d0
0001878E 5428 003F                  		addq.b	#2,$3F(a0)
00018792 4EB9 0000 2C22             		jsr	(CalcSine).l
00018798 E440                       		asr.w	#2,d0
0001879A 3140 0012                  		move.w	d0,$12(a0)
0001879E 317C FF00 0010             		move.w	#-$100,$10(a0)
000187A4 6100 F592                  		bsr.w	BossMove
000187A8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000187AE 6600                       		bne.s	loc_18334
000187B0 5428 0025                  		addq.b	#2,$25(a0)
000187B4 4228 0028                  		clr.b	$28(a0)
000187B8 42A8 0010                  		clr.l	$10(a0)
000187BC                            
000187BC                            loc_18334:
000187BC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000187C2 1140 0034                  		move.b	d0,$34(a0)
000187C6                            
000187C6                            loc_1833E:
000187C6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000187CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000187D2 0C28 0004 0025             		cmpi.b	#4,$25(a0)
000187D8 6400                       		bcc.s	locret_18390
000187DA 4A28 0022                  		tst.b	$22(a0)
000187DE 6B00                       		bmi.s	loc_18392
000187E0 4A28 0020                  		tst.b	$20(a0)
000187E4 6600                       		bne.s	locret_18390
000187E6 4A28 003E                  		tst.b	$3E(a0)
000187EA 6600                       		bne.s	loc_18374
000187EC 117C 0028 003E             		move.b	#$28,$3E(a0)
000187F2 303C 00AC                  		move.w	#$AC,d0
000187F6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
000187FC                            
000187FC                            loc_18374:
000187FC 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018800 7000                       		moveq	#0,d0
00018802 4A51                       		tst.w	(a1)
00018804 6600                       		bne.s	loc_18382
00018806 303C 0EEE                  		move.w	#$EEE,d0
0001880A                            
0001880A                            loc_18382:
0001880A 3280                       		move.w	d0,(a1)
0001880C 5328 003E                  		subq.b	#1,$3E(a0)
00018810 6600                       		bne.s	locret_18390
00018812 117C 000F 0020             		move.b	#$F,$20(a0)
00018818                            
00018818                            locret_18390:
00018818 4E75                       		rts	
0001881A                            ; ===========================================================================
0001881A                            
0001881A                            loc_18392:				; XREF: loc_1833E
0001881A 7064                       		moveq	#100,d0
0001881C 6100 0000                  		bsr.w	AddPoints
00018820 117C 0004 0025             		move.b	#4,$25(a0)
00018826 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001882C 4268 0010                  		clr.w	$10(a0)
00018830 4E75                       		rts	
00018832                            ; ===========================================================================
00018832                            
00018832                            loc_183AA:				; XREF: Obj73_ShipIndex
00018832 7000                       		moveq	#0,d0
00018834 1028 0028                  		move.b	$28(a0),d0
00018838 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001883C 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018840 0228 0006 0028             		andi.b	#6,$28(a0)
00018846 6000 FF7E                  		bra.w	loc_1833E
0001884A                            ; ===========================================================================
0001884A 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001884C 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001884E 0000                       		dc.w loc_183CA-off_183C2
00018850 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018852                            ; ===========================================================================
00018852                            
00018852                            loc_183CA:				; XREF: off_183C2
00018852 4A68 0010                  		tst.w	$10(a0)
00018856 6600                       		bne.s	loc_183FE
00018858 7040                       		moveq	#$40,d0
0001885A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018860 6700                       		beq.s	loc_183E6
00018862 6500                       		bcs.s	loc_183DE
00018864 4440                       		neg.w	d0
00018866                            
00018866                            loc_183DE:
00018866 3140 0012                  		move.w	d0,$12(a0)
0001886A 6000 F4CC                  		bra.w	BossMove
0001886E                            ; ===========================================================================
0001886E                            
0001886E                            loc_183E6:
0001886E 317C 0200 0010             		move.w	#$200,$10(a0)
00018874 317C 0100 0012             		move.w	#$100,$12(a0)
0001887A 0828 0000 0022             		btst	#0,$22(a0)
00018880 6600                       		bne.s	loc_183FE
00018882 4468 0010                  		neg.w	$10(a0)
00018886                            
00018886                            loc_183FE:
00018886 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001888C 6400                       		bcc.s	Obj73_MakeLava
0001888E 6100 F4A8                  		bsr.w	BossMove
00018892 5968 0012                  		subq.w	#4,$12(a0)
00018896                            
00018896                            Obj73_MakeLava:
00018896 5328 0034                  		subq.b	#1,$34(a0)
0001889A 6400                       		bcc.s	loc_1845C
0001889C 4EB9 0000 DEC8             		jsr	SingleObjLoad
000188A2 6600                       		bne.s	loc_1844A
000188A4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000188A8 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000188AE 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000188B4 0280 0000 FFFF             		andi.l	#$FFFF,d0
000188BA 80FC 0050                  		divu.w	#$50,d0
000188BE 4840                       		swap	d0
000188C0 0640 1878                  		addi.w	#$1878,d0
000188C4 3340 0008                  		move.w	d0,8(a1)
000188C8 EE09                       		lsr.b	#7,d1
000188CA 337C 00FF 0028             		move.w	#$FF,$28(a1)
000188D0                            
000188D0                            loc_1844A:
000188D0 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000188D6 0200 001F                  		andi.b	#$1F,d0
000188DA 0600 0040                  		addi.b	#$40,d0
000188DE 1140 0034                  		move.b	d0,$34(a0)
000188E2                            
000188E2                            loc_1845C:
000188E2 0828 0000 0022             		btst	#0,$22(a0)
000188E8 6700                       		beq.s	loc_18474
000188EA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000188F0 6D00                       		blt.s	locret_1849C
000188F2 317C 1910 0030             		move.w	#$1910,$30(a0)
000188F8 6000                       		bra.s	loc_18482
000188FA                            ; ===========================================================================
000188FA                            
000188FA                            loc_18474:
000188FA 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018900 6E00                       		bgt.s	locret_1849C
00018902 317C 1830 0030             		move.w	#$1830,$30(a0)
00018908                            
00018908                            loc_18482:
00018908 4268 0010                  		clr.w	$10(a0)
0001890C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018912 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018918 6400                       		bcc.s	loc_18498
0001891A 4468 0012                  		neg.w	$12(a0)
0001891E                            
0001891E                            loc_18498:
0001891E 5428 0028                  		addq.b	#2,$28(a0)
00018922                            
00018922                            locret_1849C:
00018922 4E75                       		rts	
00018924                            ; ===========================================================================
00018924                            
00018924                            Obj73_MakeLava2:			; XREF: off_183C2
00018924 6100 F412                  		bsr.w	BossMove
00018928 3028 0038                  		move.w	$38(a0),d0
0001892C 0440 022C                  		subi.w	#$22C,d0
00018930 6E00                       		bgt.s	locret_184F4
00018932 303C 022C                  		move.w	#$22C,d0
00018936 4A68 0012                  		tst.w	$12(a0)
0001893A 6700                       		beq.s	loc_184EA
0001893C 4268 0012                  		clr.w	$12(a0)
00018940 317C 0050 003C             		move.w	#$50,$3C(a0)
00018946 0868 0000 0022             		bchg	#0,$22(a0)
0001894C 4EB9 0000 DEC8             		jsr	SingleObjLoad
00018952 6600                       		bne.s	loc_184EA
00018954 3368 0030 0008             		move.w	$30(a0),8(a1)
0001895A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018960 0669 0018 000C             		addi.w	#$18,$C(a1)
00018966 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001896A 137C 0001 0028             		move.b	#1,$28(a1)
00018970                            
00018970                            loc_184EA:
00018970 5368 003C                  		subq.w	#1,$3C(a0)
00018974 6600                       		bne.s	locret_184F4
00018976 5428 0028                  		addq.b	#2,$28(a0)
0001897A                            
0001897A                            locret_184F4:
0001897A 4E75                       		rts	
0001897C                            ; ===========================================================================
0001897C                            
0001897C                            loc_184F6:				; XREF: Obj73_ShipIndex
0001897C 5368 003C                  		subq.w	#1,$3C(a0)
00018980 6B00                       		bmi.s	loc_18500
00018982 6000 F372                  		bra.w	BossDefeated
00018986                            ; ===========================================================================
00018986                            
00018986                            loc_18500:
00018986 08E8 0000 0022             		bset	#0,$22(a0)
0001898C 08A8 0007 0022             		bclr	#7,$22(a0)
00018992 4268 0010                  		clr.w	$10(a0)
00018996 5428 0025                  		addq.b	#2,$25(a0)
0001899A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000189A0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000189A4 6600                       		bne.s	locret_1852A
000189A6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000189AC 4268 0012                  		clr.w	$12(a0)
000189B0                            
000189B0                            locret_1852A:
000189B0 4E75                       		rts	
000189B2                            ; ===========================================================================
000189B2                            
000189B2                            loc_1852C:				; XREF: Obj73_ShipIndex
000189B2 5268 003C                  		addq.w	#1,$3C(a0)
000189B6 6700                       		beq.s	loc_18544
000189B8 6A00                       		bpl.s	loc_1854E
000189BA 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
000189C0 6400                       		bcc.s	loc_18544
000189C2 0668 0018 0012             		addi.w	#$18,$12(a0)
000189C8 6000                       		bra.s	loc_1857A
000189CA                            ; ===========================================================================
000189CA                            
000189CA                            loc_18544:
000189CA 4268 0012                  		clr.w	$12(a0)
000189CE 4268 003C                  		clr.w	$3C(a0)
000189D2 6000                       		bra.s	loc_1857A
000189D4                            ; ===========================================================================
000189D4                            
000189D4                            loc_1854E:
000189D4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000189DA 6500                       		bcs.s	loc_18566
000189DC 6700                       		beq.s	loc_1856C
000189DE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000189E4 6500                       		bcs.s	loc_1857A
000189E6 5428 0025                  		addq.b	#2,$25(a0)
000189EA 6000                       		bra.s	loc_1857A
000189EC                            ; ===========================================================================
000189EC                            
000189EC                            loc_18566:
000189EC 5168 0012                  		subq.w	#8,$12(a0)
000189F0 6000                       		bra.s	loc_1857A
000189F2                            ; ===========================================================================
000189F2                            
000189F2                            loc_1856C:
000189F2 4268 0012                  		clr.w	$12(a0)
000189F6 303C 0083                  		move.w	#$83,d0
000189FA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018A00                            
00018A00                            loc_1857A:
00018A00 6100 F336                  		bsr.w	BossMove
00018A04 6000 FDC0                  		bra.w	loc_1833E
00018A08                            ; ===========================================================================
00018A08                            
00018A08                            loc_18582:				; XREF: Obj73_ShipIndex
00018A08 317C 0500 0010             		move.w	#$500,$10(a0)
00018A0E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018A14 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018A1A 6400                       		bcc.s	loc_1859C
00018A1C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A20 6000                       		bra.s	loc_185A2
00018A22                            ; ===========================================================================
00018A22                            
00018A22                            loc_1859C:
00018A22 4A28 0001                  		tst.b	1(a0)
00018A26 6A00                       		bpl.s	Obj73_ShipDel
00018A28                            
00018A28                            loc_185A2:
00018A28 6100 F30E                  		bsr.w	BossMove
00018A2C 6000 FD98                  		bra.w	loc_1833E
00018A30                            ; ===========================================================================
00018A30                            
00018A30                            Obj73_ShipDel:
00018A30 4EF9 0000 DA7E             		jmp	DeleteObject
00018A36                            ; ===========================================================================
00018A36                            
00018A36                            Obj73_FaceMain:				; XREF: Obj73_Index
00018A36 7000                       		moveq	#0,d0
00018A38 7201                       		moveq	#1,d1
00018A3A 2268 0034                  		movea.l	$34(a0),a1
00018A3E 1029 0025                  		move.b	$25(a1),d0
00018A42 5540                       		subq.w	#2,d0
00018A44 6600                       		bne.s	loc_185D2
00018A46 0829 0001 0028             		btst	#1,$28(a1)
00018A4C 6700                       		beq.s	loc_185DA
00018A4E 4A69 0012                  		tst.w	$12(a1)
00018A52 6600                       		bne.s	loc_185DA
00018A54 7204                       		moveq	#4,d1
00018A56 6000                       		bra.s	loc_185EE
00018A58                            ; ===========================================================================
00018A58                            
00018A58                            loc_185D2:
00018A58 5500                       		subq.b	#2,d0
00018A5A 6B00                       		bmi.s	loc_185DA
00018A5C 720A                       		moveq	#$A,d1
00018A5E 6000                       		bra.s	loc_185EE
00018A60                            ; ===========================================================================
00018A60                            
00018A60                            loc_185DA:
00018A60 4A29 0020                  		tst.b	$20(a1)
00018A64 6600                       		bne.s	loc_185E4
00018A66 7205                       		moveq	#5,d1
00018A68 6000                       		bra.s	loc_185EE
00018A6A                            ; ===========================================================================
00018A6A                            
00018A6A                            loc_185E4:
00018A6A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018A70 6500                       		bcs.s	loc_185EE
00018A72 7204                       		moveq	#4,d1
00018A74                            
00018A74                            loc_185EE:
00018A74 1141 001C                  		move.b	d1,$1C(a0)
00018A78 5900                       		subq.b	#4,d0
00018A7A 6600                       		bne.s	loc_18602
00018A7C 117C 0006 001C             		move.b	#6,$1C(a0)
00018A82 4A28 0001                  		tst.b	1(a0)
00018A86 6A00                       		bpl.s	Obj73_FaceDel
00018A88                            
00018A88                            loc_18602:
00018A88 6000                       		bra.s	Obj73_Display
00018A8A                            ; ===========================================================================
00018A8A                            
00018A8A                            Obj73_FaceDel:
00018A8A 4EF9 0000 DA7E             		jmp	DeleteObject
00018A90                            ; ===========================================================================
00018A90                            
00018A90                            Obj73_FlameMain:			; XREF: Obj73_Index
00018A90 117C 0007 001C             		move.b	#7,$1C(a0)
00018A96 2268 0034                  		movea.l	$34(a0),a1
00018A9A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018AA0 6D00                       		blt.s	loc_1862A
00018AA2 117C 000B 001C             		move.b	#$B,$1C(a0)
00018AA8 4A28 0001                  		tst.b	1(a0)
00018AAC 6A00                       		bpl.s	Obj73_FlameDel
00018AAE 6000                       		bra.s	loc_18636
00018AB0                            ; ===========================================================================
00018AB0                            
00018AB0                            loc_1862A:
00018AB0 4A69 0010                  		tst.w	$10(a1)
00018AB4 6700                       		beq.s	loc_18636
00018AB6 117C 0008 001C             		move.b	#8,$1C(a0)
00018ABC                            
00018ABC                            loc_18636:
00018ABC 6000                       		bra.s	Obj73_Display
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018ABE 4EF9 0000 DA7E             		jmp	DeleteObject
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            Obj73_Display:
00018AC4 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
00018ACA 4EB9 0000 AAF4             		jsr	AnimateSprite
00018AD0                            
00018AD0                            loc_1864A:
00018AD0 2268 0034                  		movea.l	$34(a0),a1
00018AD4 3169 0008 0008             		move.w	8(a1),8(a0)
00018ADA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018AE0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018AE6 7003                       		moveq	#3,d0
00018AE8 C028 0022                  		and.b	$22(a0),d0
00018AEC 0228 00FC 0001             		andi.b	#-4,1(a0)
00018AF2 8128 0001                  		or.b	d0,1(a0)
00018AF6 4EF9 0000 DA42             		jmp	DisplaySprite
00018AFC                            ; ===========================================================================
00018AFC                            
00018AFC                            Obj73_TubeMain:				; XREF: Obj73_Index
00018AFC 2268 0034                  		movea.l	$34(a0),a1
00018B00 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018B06 6600                       		bne.s	loc_18688
00018B08 4A28 0001                  		tst.b	1(a0)
00018B0C 6A00                       		bpl.s	Obj73_TubeDel
00018B0E                            
00018B0E                            loc_18688:
00018B0E 217C 0001 8260 0004        		move.l	#Map_BossItems,4(a0)
00018B16 317C 246C 0002             		move.w	#$246C,2(a0)
00018B1C 117C 0004 001A             		move.b	#4,$1A(a0)
00018B22 60AC                       		bra.s	loc_1864A
00018B24                            ; ===========================================================================
00018B24                            
00018B24                            Obj73_TubeDel:
00018B24 4EF9 0000 DA7E             		jmp	DeleteObject
00018B2A                            ; ===========================================================================
00018B2A                            ; ---------------------------------------------------------------------------
00018B2A                            ; Object 74 - lava that	Eggman drops (MZ)
00018B2A                            ; ---------------------------------------------------------------------------
00018B2A                            
00018B2A                            Obj74:					; XREF: Obj_Index
00018B2A 7000                       		moveq	#0,d0
00018B2C 1028 0024                  		move.b	$24(a0),d0
00018B30 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018B34 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018B38 4EF9 0000 DA42             		jmp	DisplaySprite
00018B3E                            ; ===========================================================================
00018B3E 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018B40 0000                       		dc.w Obj74_Action-Obj74_Index
00018B42 0000                       		dc.w loc_18886-Obj74_Index
00018B44 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018B46                            ; ===========================================================================
00018B46                            
00018B46                            Obj74_Main:				; XREF: Obj74_Index
00018B46 117C 0008 0016             		move.b	#8,$16(a0)
00018B4C 117C 0008 0017             		move.b	#8,$17(a0)
00018B52 217C 0000 B706 0004        		move.l	#Map_obj14,4(a0)
00018B5A 317C 0345 0002             		move.w	#$345,2(a0)
00018B60 117C 0004 0001             		move.b	#4,1(a0)
00018B66 117C 0005 0018             		move.b	#5,$18(a0)
00018B6C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B72 117C 0008 0019             		move.b	#8,$19(a0)
00018B78 5428 0024                  		addq.b	#2,$24(a0)
00018B7C 4A28 0028                  		tst.b	$28(a0)
00018B80 6600                       		bne.s	loc_1870A
00018B82 117C 008B 0020             		move.b	#$8B,$20(a0)
00018B88 5428 0024                  		addq.b	#2,$24(a0)
00018B8C 6000 0000                  		bra.w	loc_18886
00018B90                            ; ===========================================================================
00018B90                            
00018B90                            loc_1870A:
00018B90 117C 001E 0029             		move.b	#$1E,$29(a0)
00018B96 303C 00AE                  		move.w	#$AE,d0
00018B9A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018BA0                            
00018BA0                            Obj74_Action:				; XREF: Obj74_Index
00018BA0 7000                       		moveq	#0,d0
00018BA2 1028 0025                  		move.b	$25(a0),d0
00018BA6 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018BAA 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018BAE 4EB9 0000 DA1C             		jsr	SpeedToPos
00018BB4 43F9 0000 E8FC             		lea	(Ani_obj14).l,a1
00018BBA 4EB9 0000 AAF4             		jsr	AnimateSprite
00018BC0 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018BC6 6200                       		bhi.s	Obj74_Delete
00018BC8 4E75                       		rts	
00018BCA                            ; ===========================================================================
00018BCA                            
00018BCA                            Obj74_Delete:
00018BCA 4EF9 0000 DA7E             		jmp	DeleteObject
00018BD0                            ; ===========================================================================
00018BD0 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018BD2 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018BD4 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018BD6 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            Obj74_Drop:				; XREF: Obj74_Index2
00018BD8 08E8 0001 0022             		bset	#1,$22(a0)
00018BDE 5328 0029                  		subq.b	#1,$29(a0)
00018BE2 6A00                       		bpl.s	locret_18780
00018BE4 117C 008B 0020             		move.b	#$8B,$20(a0)
00018BEA 4228 0028                  		clr.b	$28(a0)
00018BEE 0668 0018 0012             		addi.w	#$18,$12(a0)
00018BF4 08A8 0001 0022             		bclr	#1,$22(a0)
00018BFA 6100 C6A8                  		bsr.w	ObjHitFloor
00018BFE 4A41                       		tst.w	d1
00018C00 6A00                       		bpl.s	locret_18780
00018C02 5428 0025                  		addq.b	#2,$25(a0)
00018C06                            
00018C06                            locret_18780:
00018C06 4E75                       		rts	
00018C08                            ; ===========================================================================
00018C08                            
00018C08                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018C08 5568 000C                  		subq.w	#2,$C(a0)
00018C0C 08E8 0007 0002             		bset	#7,2(a0)
00018C12 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018C18 4268 0012                  		clr.w	$12(a0)
00018C1C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C22 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C28 117C 0003 0029             		move.b	#3,$29(a0)
00018C2E 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00018C34 6600                       		bne.s	loc_187CA
00018C36 47D1                       		lea	(a1),a3
00018C38 45D0                       		lea	(a0),a2
00018C3A 7003                       		moveq	#3,d0
00018C3C                            
00018C3C                            Obj74_Loop:
00018C3C 26DA                       		move.l	(a2)+,(a3)+
00018C3E 26DA                       		move.l	(a2)+,(a3)+
00018C40 26DA                       		move.l	(a2)+,(a3)+
00018C42 26DA                       		move.l	(a2)+,(a3)+
00018C44 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018C48                            
00018C48 4469 0010                  		neg.w	$10(a1)
00018C4C 5429 0025                  		addq.b	#2,$25(a1)
00018C50                            
00018C50                            loc_187CA:
00018C50 5428 0025                  		addq.b	#2,$25(a0)
00018C54 4E75                       		rts	
00018C56                            
00018C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018C56                            
00018C56                            
00018C56                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018C56 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00018C5C 6600                       		bne.s	locret_187EE
00018C5E 3368 0008 0008             		move.w	8(a0),8(a1)
00018C64 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C6A 12BC 0074                  		move.b	#$74,(a1)
00018C6E 337C 0067 0028             		move.w	#$67,$28(a1)
00018C74                            
00018C74                            locret_187EE:
00018C74 4E75                       		rts	
00018C76                            ; End of function Obj74_Duplicate2
00018C76                            
00018C76                            ; ===========================================================================
00018C76                            
00018C76                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018C76 6100 C62C                  		bsr.w	ObjHitFloor
00018C7A 4A41                       		tst.w	d1
00018C7C 6A00                       		bpl.s	loc_18826
00018C7E 3028 0008                  		move.w	8(a0),d0
00018C82 0C40 1940                  		cmpi.w	#$1940,d0
00018C86 6E00                       		bgt.s	loc_1882C
00018C88 3228 0030                  		move.w	$30(a0),d1
00018C8C B240                       		cmp.w	d0,d1
00018C8E 6700                       		beq.s	loc_1881E
00018C90 0240 0010                  		andi.w	#$10,d0
00018C94 0241 0010                  		andi.w	#$10,d1
00018C98 B240                       		cmp.w	d0,d1
00018C9A 6700                       		beq.s	loc_1881E
00018C9C 61B8                       		bsr.s	Obj74_Duplicate2
00018C9E 3168 0008 0032             		move.w	8(a0),$32(a0)
00018CA4                            
00018CA4                            loc_1881E:
00018CA4 3168 0008 0030             		move.w	8(a0),$30(a0)
00018CAA 4E75                       		rts	
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            loc_18826:
00018CAC 5428 0025                  		addq.b	#2,$25(a0)
00018CB0 4E75                       		rts	
00018CB2                            ; ===========================================================================
00018CB2                            
00018CB2                            loc_1882C:
00018CB2 5428 0024                  		addq.b	#2,$24(a0)
00018CB6 4E75                       		rts	
00018CB8                            ; ===========================================================================
00018CB8                            
00018CB8                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018CB8 08A8 0001 0022             		bclr	#1,$22(a0)
00018CBE 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018CC4 3028 0008                  		move.w	8(a0),d0
00018CC8 9068 0032                  		sub.w	$32(a0),d0
00018CCC 6A00                       		bpl.s	loc_1884A
00018CCE 4440                       		neg.w	d0
00018CD0                            
00018CD0                            loc_1884A:
00018CD0 0C40 0012                  		cmpi.w	#$12,d0
00018CD4 6600                       		bne.s	loc_18856
00018CD6 08A8 0007 0002             		bclr	#7,2(a0)
00018CDC                            
00018CDC                            loc_18856:
00018CDC 6100 C5C6                  		bsr.w	ObjHitFloor
00018CE0 4A41                       		tst.w	d1
00018CE2 6A00                       		bpl.s	locret_1887E
00018CE4 5328 0029                  		subq.b	#1,$29(a0)
00018CE8 6700                       		beq.s	Obj74_Delete2
00018CEA 4268 0012                  		clr.w	$12(a0)
00018CEE 3168 0032 0008             		move.w	$32(a0),8(a0)
00018CF4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018CFA 08E8 0007 0002             		bset	#7,2(a0)
00018D00 5528 0025                  		subq.b	#2,$25(a0)
00018D04                            
00018D04                            locret_1887E:
00018D04 4E75                       		rts	
00018D06                            ; ===========================================================================
00018D06                            
00018D06                            Obj74_Delete2:
00018D06 4EF9 0000 DA7E             		jmp	DeleteObject
00018D0C                            ; ===========================================================================
00018D0C                            
00018D0C                            loc_18886:				; XREF: Obj74_Index
00018D0C 08E8 0007 0002             		bset	#7,2(a0)
00018D12 5328 0029                  		subq.b	#1,$29(a0)
00018D16 6600                       		bne.s	Obj74_Animate
00018D18 117C 0001 001C             		move.b	#1,$1C(a0)
00018D1E 5968 000C                  		subq.w	#4,$C(a0)
00018D22 4228 0020                  		clr.b	$20(a0)
00018D26                            
00018D26                            Obj74_Animate:
00018D26 43F9 0000 E8FC             		lea	(Ani_obj14).l,a1
00018D2C 4EF9 0000 AAF4             		jmp	AnimateSprite
00018D32                            ; ===========================================================================
00018D32                            
00018D32                            Obj74_Delete3:				; XREF: Obj74_Index
00018D32 4EF9 0000 DA7E             		jmp	DeleteObject
00018D38                            ; ===========================================================================
00018D38                            
00018D38                            Obj7A_Delete:
00018D38 4EF9 0000 DA7E             		jmp	DeleteObject
00018D3E                            ; ===========================================================================
00018D3E                            ; ---------------------------------------------------------------------------
00018D3E                            ; Object 7A - Eggman (SLZ)
00018D3E                            ; ---------------------------------------------------------------------------
00018D3E                            
00018D3E                            Obj7A:					; XREF: Obj_Index
00018D3E 7000                       		moveq	#0,d0
00018D40 1028 0024                  		move.b	$24(a0),d0
00018D44 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018D48 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018D4C                            ; ===========================================================================
00018D4C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018D4E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018D50 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018D52 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018D54 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018D56                            
00018D56 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D59 0401 04                    		dc.b 4,	1, 4
00018D5C 0607 04                    		dc.b 6,	7, 4
00018D5F 0800 03                    		dc.b 8,	0, 3
00018D62                            ; ===========================================================================
00018D62                            
00018D62                            Obj7A_Main:				; XREF: Obj7A_Index
00018D62 317C 2188 0008             		move.w	#$2188,8(a0)
00018D68 317C 0228 000C             		move.w	#$228,$C(a0)
00018D6E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D74 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D7A 117C 000F 0020             		move.b	#$F,$20(a0)
00018D80 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D86 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018D8A 2248                       		movea.l	a0,a1
00018D8C 7203                       		moveq	#3,d1
00018D8E 6000                       		bra.s	Obj7A_LoadBoss
00018D90                            ; ===========================================================================
00018D90                            
00018D90                            Obj7A_Loop:
00018D90 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00018D96 6600                       		bne.s	loc_1895C
00018D98 12BC 007A                  		move.b	#$7A,0(a1)
00018D9C 3368 0008 0008             		move.w	8(a0),8(a1)
00018DA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DA8                            
00018DA8                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018DA8 08A8 0000 0022             		bclr	#0,$22(a0)
00018DAE 4229 0025                  		clr.b	$25(a1)
00018DB2 135A 0024                  		move.b	(a2)+,$24(a1)
00018DB6 135A 001C                  		move.b	(a2)+,$1C(a1)
00018DBA 135A 0018                  		move.b	(a2)+,$18(a1)
00018DBE 237C 0001 8198 0004        		move.l	#Map_Eggman,4(a1)
00018DC6 337C 0400 0002             		move.w	#$400,2(a1)
00018DCC 137C 0004 0001             		move.b	#4,1(a1)
00018DD2 137C 0020 0019             		move.b	#$20,$19(a1)
00018DD8 2348 0034                  		move.l	a0,$34(a1)
00018DDC 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018DE0                            
00018DE0                            loc_1895C:
00018DE0 43F8 D040                  		lea	($FFFFD040).w,a1
00018DE4 45E8 002A                  		lea	$2A(a0),a2
00018DE8 705E                       		moveq	#$5E,d0
00018DEA 723E                       		moveq	#$3E,d1
00018DEC                            
00018DEC                            loc_18968:
00018DEC B011                       		cmp.b	(a1),d0
00018DEE 6600                       		bne.s	loc_18974
00018DF0 4A29 0028                  		tst.b	$28(a1)
00018DF4 6700                       		beq.s	loc_18974
00018DF6 34C9                       		move.w	a1,(a2)+
00018DF8                            
00018DF8                            loc_18974:
00018DF8 D2FC 0040                  		adda.w	#$40,a1
00018DFC 51C9 FFEE                  		dbf	d1,loc_18968
00018E00                            
00018E00                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018E00 7000                       		moveq	#0,d0
00018E02 1028 0025                  		move.b	$25(a0),d0
00018E06 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018E0A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018E0E 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
00018E14 4EB9 0000 AAF4             		jsr	AnimateSprite
00018E1A 7003                       		moveq	#3,d0
00018E1C C028 0022                  		and.b	$22(a0),d0
00018E20 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E26 8128 0001                  		or.b	d0,1(a0)
00018E2A 4EF9 0000 DA42             		jmp	DisplaySprite
00018E30                            ; ===========================================================================
00018E30 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018E32 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018E34 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018E36 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018E38 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018E3A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018E3C                            ; ===========================================================================
00018E3C                            
00018E3C                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018E3C 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E42 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018E48 6400                       		bcc.s	loc_189CA
00018E4A 5428 0025                  		addq.b	#2,$25(a0)
00018E4E                            
00018E4E                            loc_189CA:
00018E4E 6100 EEE8                  		bsr.w	BossMove
00018E52 1028 003F                  		move.b	$3F(a0),d0
00018E56 5428 003F                  		addq.b	#2,$3F(a0)
00018E5A 4EB9 0000 2C22             		jsr	(CalcSine).l
00018E60 EC40                       		asr.w	#6,d0
00018E62 D068 0038                  		add.w	$38(a0),d0
00018E66 3140 000C                  		move.w	d0,$C(a0)
00018E6A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E70 6000                       		bra.s	loc_189FE
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            loc_189EE:
00018E72 6100 EEC4                  		bsr.w	BossMove
00018E76 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E7C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E82                            
00018E82                            loc_189FE:
00018E82 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018E88 6400                       		bcc.s	locret_18A44
00018E8A 4A28 0022                  		tst.b	$22(a0)
00018E8E 6B00                       		bmi.s	loc_18A46
00018E90 4A28 0020                  		tst.b	$20(a0)
00018E94 6600                       		bne.s	locret_18A44
00018E96 4A28 003E                  		tst.b	$3E(a0)
00018E9A 6600                       		bne.s	loc_18A28
00018E9C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018EA2 303C 00AC                  		move.w	#$AC,d0
00018EA6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018EAC                            
00018EAC                            loc_18A28:
00018EAC 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018EB0 7000                       		moveq	#0,d0
00018EB2 4A51                       		tst.w	(a1)
00018EB4 6600                       		bne.s	loc_18A36
00018EB6 303C 0EEE                  		move.w	#$EEE,d0
00018EBA                            
00018EBA                            loc_18A36:
00018EBA 3280                       		move.w	d0,(a1)
00018EBC 5328 003E                  		subq.b	#1,$3E(a0)
00018EC0 6600                       		bne.s	locret_18A44
00018EC2 117C 000F 0020             		move.b	#$F,$20(a0)
00018EC8                            
00018EC8                            locret_18A44:
00018EC8 4E75                       		rts	
00018ECA                            ; ===========================================================================
00018ECA                            
00018ECA                            loc_18A46:
00018ECA 7064                       		moveq	#100,d0
00018ECC 6100 0000                  		bsr.w	AddPoints
00018ED0 117C 0006 0025             		move.b	#6,$25(a0)
00018ED6 117C 0078 003C             		move.b	#$78,$3C(a0)
00018EDC 4268 0010                  		clr.w	$10(a0)
00018EE0 4E75                       		rts	
00018EE2                            ; ===========================================================================
00018EE2                            
00018EE2                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018EE2 3028 0030                  		move.w	$30(a0),d0
00018EE6 317C 0200 0010             		move.w	#$200,$10(a0)
00018EEC 0828 0000 0022             		btst	#0,$22(a0)
00018EF2 6600                       		bne.s	loc_18A7C
00018EF4 4468 0010                  		neg.w	$10(a0)
00018EF8 0C40 2008                  		cmpi.w	#$2008,d0
00018EFC 6E00                       		bgt.s	loc_18A88
00018EFE 6000                       		bra.s	loc_18A82
00018F00                            ; ===========================================================================
00018F00                            
00018F00                            loc_18A7C:
00018F00 0C40 2138                  		cmpi.w	#$2138,d0
00018F04 6D00                       		blt.s	loc_18A88
00018F06                            
00018F06                            loc_18A82:
00018F06 0868 0000 0022             		bchg	#0,$22(a0)
00018F0C                            
00018F0C                            loc_18A88:
00018F0C 3028 0008                  		move.w	8(a0),d0
00018F10 72FF                       		moveq	#-1,d1
00018F12 7402                       		moveq	#2,d2
00018F14 45E8 002A                  		lea	$2A(a0),a2
00018F18 7828                       		moveq	#$28,d4
00018F1A 4A68 0010                  		tst.w	$10(a0)
00018F1E 6A00                       		bpl.s	loc_18A9E
00018F20 4444                       		neg.w	d4
00018F22                            
00018F22                            loc_18A9E:
00018F22 321A                       		move.w	(a2)+,d1
00018F24 2641                       		movea.l	d1,a3
00018F26 082B 0003 0022             		btst	#3,$22(a3)
00018F2C 6600                       		bne.s	loc_18AB4
00018F2E 362B 0008                  		move.w	8(a3),d3
00018F32 D644                       		add.w	d4,d3
00018F34 9640                       		sub.w	d0,d3
00018F36 6700                       		beq.s	loc_18AC0
00018F38                            
00018F38                            loc_18AB4:
00018F38 51CA FFE8                  		dbf	d2,loc_18A9E
00018F3C                            
00018F3C 1142 0028                  		move.b	d2,$28(a0)
00018F40 6000 FF0C                  		bra.w	loc_189CA
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            loc_18AC0:
00018F44 1142 0028                  		move.b	d2,$28(a0)
00018F48 5428 0025                  		addq.b	#2,$25(a0)
00018F4C 117C 0028 003C             		move.b	#$28,$3C(a0)
00018F52 6000 FEFA                  		bra.w	loc_189CA
00018F56                            ; ===========================================================================
00018F56                            
00018F56                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018F56 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018F5C 6600                       		bne.s	loc_18B36
00018F5E 70FF                       		moveq	#-1,d0
00018F60 1028 0028                  		move.b	$28(a0),d0
00018F64 4880                       		ext.w	d0
00018F66 6B00                       		bmi.s	loc_18B40
00018F68 5540                       		subq.w	#2,d0
00018F6A 4440                       		neg.w	d0
00018F6C D040                       		add.w	d0,d0
00018F6E 43E8 002A                  		lea	$2A(a0),a1
00018F72 3031 0000                  		move.w	(a1,d0.w),d0
00018F76 2440                       		movea.l	d0,a2
00018F78 43F8 D040                  		lea	($FFFFD040).w,a1
00018F7C 723E                       		moveq	#$3E,d1
00018F7E                            
00018F7E                            loc_18AFA:
00018F7E B0A9 003C                  		cmp.l	$3C(a1),d0
00018F82 6700                       		beq.s	loc_18B40
00018F84 D2FC 0040                  		adda.w	#$40,a1
00018F88 51C9 FFF4                  		dbf	d1,loc_18AFA
00018F8C                            
00018F8C 2F08                       		move.l	a0,-(sp)
00018F8E 41D2                       		lea	(a2),a0
00018F90 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00018F96 205F                       		movea.l	(sp)+,a0
00018F98 6600                       		bne.s	loc_18B40
00018F9A 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018F9E 3368 0008 0008             		move.w	8(a0),8(a1)
00018FA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018FAA 0669 0020 000C             		addi.w	#$20,$C(a1)
00018FB0 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018FB6 234A 003C                  		move.l	a2,$3C(a1)
00018FBA                            
00018FBA                            loc_18B36:
00018FBA 5328 003C                  		subq.b	#1,$3C(a0)
00018FBE 6700                       		beq.s	loc_18B40
00018FC0 6000 FEC0                  		bra.w	loc_189FE
00018FC4                            ; ===========================================================================
00018FC4                            
00018FC4                            loc_18B40:
00018FC4 5528 0025                  		subq.b	#2,$25(a0)
00018FC8 6000 FE84                  		bra.w	loc_189CA
00018FCC                            ; ===========================================================================
00018FCC                            
00018FCC                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018FCC 5328 003C                  		subq.b	#1,$3C(a0)
00018FD0 6B00                       		bmi.s	loc_18B52
00018FD2 6000 ED22                  		bra.w	BossDefeated
00018FD6                            ; ===========================================================================
00018FD6                            
00018FD6                            loc_18B52:
00018FD6 5428 0025                  		addq.b	#2,$25(a0)
00018FDA 4268 0012                  		clr.w	$12(a0)
00018FDE 08E8 0000 0022             		bset	#0,$22(a0)
00018FE4 08A8 0007 0022             		bclr	#7,$22(a0)
00018FEA 4268 0010                  		clr.w	$10(a0)
00018FEE 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018FF4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018FF8 6600                       		bne.s	loc_18B7C
00018FFA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019000                            
00019000                            loc_18B7C:
00019000 6000 FE80                  		bra.w	loc_189FE
00019004                            ; ===========================================================================
00019004                            
00019004                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019004 5228 003C                  		addq.b	#1,$3C(a0)
00019008 6700                       		beq.s	loc_18B90
0001900A 6A00                       		bpl.s	loc_18B96
0001900C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019012 6000                       		bra.s	loc_18BC2
00019014                            ; ===========================================================================
00019014                            
00019014                            loc_18B90:
00019014 4268 0012                  		clr.w	$12(a0)
00019018 6000                       		bra.s	loc_18BC2
0001901A                            ; ===========================================================================
0001901A                            
0001901A                            loc_18B96:
0001901A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019020 6500                       		bcs.s	loc_18BAE
00019022 6700                       		beq.s	loc_18BB4
00019024 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001902A 6500                       		bcs.s	loc_18BC2
0001902C 5428 0025                  		addq.b	#2,$25(a0)
00019030 6000                       		bra.s	loc_18BC2
00019032                            ; ===========================================================================
00019032                            
00019032                            loc_18BAE:
00019032 5168 0012                  		subq.w	#8,$12(a0)
00019036 6000                       		bra.s	loc_18BC2
00019038                            ; ===========================================================================
00019038                            
00019038                            loc_18BB4:
00019038 4268 0012                  		clr.w	$12(a0)
0001903C 303C 0084                  		move.w	#$84,d0
00019040 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
00019046                            
00019046                            loc_18BC2:
00019046 6000 FE2A                  		bra.w	loc_189EE
0001904A                            ; ===========================================================================
0001904A                            
0001904A                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001904A 317C 0400 0010             		move.w	#$400,$10(a0)
00019050 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019056 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001905C 6400                       		bcc.s	loc_18BE0
0001905E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019062 6000                       		bra.s	loc_18BE8
00019064                            ; ===========================================================================
00019064                            
00019064                            loc_18BE0:
00019064 4A28 0001                  		tst.b	1(a0)
00019068 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001906C                            
0001906C                            loc_18BE8:
0001906C 6100 ECCA                  		bsr.w	BossMove
00019070 6000 FDDC                  		bra.w	loc_189CA
00019074                            ; ===========================================================================
00019074                            
00019074                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019074 7000                       		moveq	#0,d0
00019076 7201                       		moveq	#1,d1
00019078 2268 0034                  		movea.l	$34(a0),a1
0001907C 1029 0025                  		move.b	$25(a1),d0
00019080 0C00 0006                  		cmpi.b	#6,d0
00019084 6B00                       		bmi.s	loc_18C06
00019086 720A                       		moveq	#$A,d1
00019088 6000                       		bra.s	loc_18C1A
0001908A                            ; ===========================================================================
0001908A                            
0001908A                            loc_18C06:
0001908A 4A29 0020                  		tst.b	$20(a1)
0001908E 6600                       		bne.s	loc_18C10
00019090 7205                       		moveq	#5,d1
00019092 6000                       		bra.s	loc_18C1A
00019094                            ; ===========================================================================
00019094                            
00019094                            loc_18C10:
00019094 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001909A 6500                       		bcs.s	loc_18C1A
0001909C 7204                       		moveq	#4,d1
0001909E                            
0001909E                            loc_18C1A:
0001909E 1141 001C                  		move.b	d1,$1C(a0)
000190A2 0C00 000A                  		cmpi.b	#$A,d0
000190A6 6600                       		bne.s	loc_18C32
000190A8 117C 0006 001C             		move.b	#6,$1C(a0)
000190AE 4A28 0001                  		tst.b	1(a0)
000190B2 6A00 FC84                  		bpl.w	Obj7A_Delete
000190B6                            
000190B6                            loc_18C32:
000190B6 6000                       		bra.s	loc_18C6C
000190B8                            ; ===========================================================================
000190B8                            
000190B8                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000190B8 117C 0008 001C             		move.b	#8,$1C(a0)
000190BE 2268 0034                  		movea.l	$34(a0),a1
000190C2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000190C8 6600                       		bne.s	loc_18C56
000190CA 4A28 0001                  		tst.b	1(a0)
000190CE 6A00 FC68                  		bpl.w	Obj7A_Delete
000190D2 117C 000B 001C             		move.b	#$B,$1C(a0)
000190D8 6000                       		bra.s	loc_18C6C
000190DA                            ; ===========================================================================
000190DA                            
000190DA                            loc_18C56:
000190DA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000190E0 6E00                       		bgt.s	loc_18C6C
000190E2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000190E8 6D00                       		blt.s	loc_18C6C
000190EA 117C 0007 001C             		move.b	#7,$1C(a0)
000190F0                            
000190F0                            loc_18C6C:
000190F0 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
000190F6 4EB9 0000 AAF4             		jsr	AnimateSprite
000190FC                            
000190FC                            loc_18C78:
000190FC 2268 0034                  		movea.l	$34(a0),a1
00019100 3169 0008 0008             		move.w	8(a1),8(a0)
00019106 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001910C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019112 7003                       		moveq	#3,d0
00019114 C028 0022                  		and.b	$22(a0),d0
00019118 0228 00FC 0001             		andi.b	#-4,1(a0)
0001911E 8128 0001                  		or.b	d0,1(a0)
00019122 4EF9 0000 DA42             		jmp	DisplaySprite
00019128                            ; ===========================================================================
00019128                            
00019128                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019128 2268 0034                  		movea.l	$34(a0),a1
0001912C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019132 6600                       		bne.s	loc_18CB8
00019134 4A28 0001                  		tst.b	1(a0)
00019138 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001913C                            
0001913C                            loc_18CB8:
0001913C 217C 0001 8260 0004        		move.l	#Map_BossItems,4(a0)
00019144 317C 246C 0002             		move.w	#$246C,2(a0)
0001914A 117C 0003 001A             		move.b	#3,$1A(a0)
00019150 60AA                       		bra.s	loc_18C78
00019152                            ; ===========================================================================
00019152                            ; ---------------------------------------------------------------------------
00019152                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019152                            ; ---------------------------------------------------------------------------
00019152                            
00019152                            Obj7B:					; XREF: Obj_Index
00019152 7000                       		moveq	#0,d0
00019154 1028 0024                  		move.b	$24(a0),d0
00019158 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001915C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019160 3028 0030                  		move.w	$30(a0),d0
00019164 0240 FF80                  		andi.w	#$FF80,d0
00019168 3238 F700                  		move.w	($FFFFF700).w,d1
0001916C 0441 0080                  		subi.w	#$80,d1
00019170 0241 FF80                  		andi.w	#$FF80,d1
00019174 9041                       		sub.w	d1,d0
00019176 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001917A 0C40 0280                  		cmpi.w	#$280,d0
0001917E 6200 FBB8                  		bhi.w	Obj7A_Delete
00019182 4EF9 0000 DA42             		jmp	DisplaySprite
00019188                            ; ===========================================================================
00019188 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001918A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001918C 0000                       		dc.w loc_18DC6-Obj7B_Index
0001918E 0000                       		dc.w loc_18EAA-Obj7B_Index
00019190 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019192 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019194                            ; ===========================================================================
00019194                            
00019194                            Obj7B_Main:				; XREF: Obj7B_Index
00019194 217C 0001 1E10 0004        		move.l	#Map_obj5Ea,4(a0)
0001919C 317C 0518 0002             		move.w	#$518,2(a0)
000191A2 117C 0001 001A             		move.b	#1,$1A(a0)
000191A8 0028 0004 0001             		ori.b	#4,1(a0)
000191AE 117C 0004 0018             		move.b	#4,$18(a0)
000191B4 117C 008B 0020             		move.b	#$8B,$20(a0)
000191BA 117C 000C 0019             		move.b	#$C,$19(a0)
000191C0 2268 003C                  		movea.l	$3C(a0),a1
000191C4 3169 0008 0030             		move.w	8(a1),$30(a0)
000191CA 3169 000C 0034             		move.w	$C(a1),$34(a0)
000191D0 08E8 0000 0022             		bset	#0,$22(a0)
000191D6 3028 0008                  		move.w	8(a0),d0
000191DA B069 0008                  		cmp.w	8(a1),d0
000191DE 6E00                       		bgt.s	loc_18D68
000191E0 08A8 0000 0022             		bclr	#0,$22(a0)
000191E6 117C 0002 003A             		move.b	#2,$3A(a0)
000191EC                            
000191EC                            loc_18D68:
000191EC 5428 0024                  		addq.b	#2,$24(a0)
000191F0                            
000191F0                            Obj7B_Fall:				; XREF: Obj7B_Index
000191F0 4EB9 0000 D9F0             		jsr	ObjectFall
000191F6 2268 003C                  		movea.l	$3C(a0),a1
000191FA 45F9 0000 0000             		lea	(word_19018).l,a2
00019200 7000                       		moveq	#0,d0
00019202 1029 001A                  		move.b	$1A(a1),d0
00019206 3228 0008                  		move.w	8(a0),d1
0001920A 9268 0030                  		sub.w	$30(a0),d1
0001920E 6400                       		bcc.s	loc_18D8E
00019210 5440                       		addq.w	#2,d0
00019212                            
00019212                            loc_18D8E:
00019212 D040                       		add.w	d0,d0
00019214 3228 0034                  		move.w	$34(a0),d1
00019218 D272 0000                  		add.w	(a2,d0.w),d1
0001921C B268 000C                  		cmp.w	$C(a0),d1
00019220 6E00                       		bgt.s	locret_18DC4
00019222 2268 003C                  		movea.l	$3C(a0),a1
00019226 7202                       		moveq	#2,d1
00019228 0828 0000 0022             		btst	#0,$22(a0)
0001922E 6700                       		beq.s	loc_18DAE
00019230 7200                       		moveq	#0,d1
00019232                            
00019232                            loc_18DAE:
00019232 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019238 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001923E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019244 6000 0000                  		bra.w	loc_18FA2
00019248                            ; ===========================================================================
00019248                            
00019248                            locret_18DC4:
00019248 4E75                       		rts	
0001924A                            ; ===========================================================================
0001924A                            
0001924A                            loc_18DC6:				; XREF: Obj7B_Index
0001924A 2268 003C                  		movea.l	$3C(a0),a1
0001924E 7000                       		moveq	#0,d0
00019250 1028 003A                  		move.b	$3A(a0),d0
00019254 9029 003A                  		sub.b	$3A(a1),d0
00019258 6700                       		beq.s	loc_18E2A
0001925A 6400                       		bcc.s	loc_18DDA
0001925C 4400                       		neg.b	d0
0001925E                            
0001925E                            loc_18DDA:
0001925E 323C F7E8                  		move.w	#-$818,d1
00019262 343C FEEC                  		move.w	#-$114,d2
00019266 0C00 0001                  		cmpi.b	#1,d0
0001926A 6700                       		beq.s	loc_18E00
0001926C 323C F6A0                  		move.w	#-$960,d1
00019270 343C FF0C                  		move.w	#-$F4,d2
00019274 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001927A 6D00                       		blt.s	loc_18E00
0001927C 323C F5E0                  		move.w	#-$A20,d1
00019280 343C FF80                  		move.w	#-$80,d2
00019284                            
00019284                            loc_18E00:
00019284 3141 0012                  		move.w	d1,$12(a0)
00019288 3142 0010                  		move.w	d2,$10(a0)
0001928C 3028 0008                  		move.w	8(a0),d0
00019290 9068 0030                  		sub.w	$30(a0),d0
00019294 6400                       		bcc.s	loc_18E16
00019296 4468 0010                  		neg.w	$10(a0)
0001929A                            
0001929A                            loc_18E16:
0001929A 117C 0001 001A             		move.b	#1,$1A(a0)
000192A0 317C 0020 0028             		move.w	#$20,$28(a0)
000192A6 5428 0024                  		addq.b	#2,$24(a0)
000192AA 6000 0000                  		bra.w	loc_18EAA
000192AE                            ; ===========================================================================
000192AE                            
000192AE                            loc_18E2A:				; XREF: loc_18DC6
000192AE 45F9 0000 0000             		lea	(word_19018).l,a2
000192B4 7000                       		moveq	#0,d0
000192B6 1029 001A                  		move.b	$1A(a1),d0
000192BA 343C 0028                  		move.w	#$28,d2
000192BE 3228 0008                  		move.w	8(a0),d1
000192C2 9268 0030                  		sub.w	$30(a0),d1
000192C6 6400                       		bcc.s	loc_18E48
000192C8 4442                       		neg.w	d2
000192CA 5440                       		addq.w	#2,d0
000192CC                            
000192CC                            loc_18E48:
000192CC D040                       		add.w	d0,d0
000192CE 3228 0034                  		move.w	$34(a0),d1
000192D2 D272 0000                  		add.w	(a2,d0.w),d1
000192D6 3141 000C                  		move.w	d1,$C(a0)
000192DA D468 0030                  		add.w	$30(a0),d2
000192DE 3142 0008                  		move.w	d2,8(a0)
000192E2 4268 000E                  		clr.w	$E(a0)
000192E6 4268 000A                  		clr.w	$A(a0)
000192EA 5368 0028                  		subq.w	#1,$28(a0)
000192EE 6600                       		bne.s	loc_18E7A
000192F0 317C 0020 0028             		move.w	#$20,$28(a0)
000192F6 117C 0008 0024             		move.b	#8,$24(a0)
000192FC 4E75                       		rts	
000192FE                            ; ===========================================================================
000192FE                            
000192FE                            loc_18E7A:
000192FE 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019304 6600                       		bne.s	loc_18E88
00019306 117C 0005 001F             		move.b	#5,$1F(a0)
0001930C                            
0001930C                            loc_18E88:
0001930C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019312 6600                       		bne.s	loc_18E96
00019314 117C 0002 001F             		move.b	#2,$1F(a0)
0001931A                            
0001931A                            loc_18E96:
0001931A 5328 001E                  		subq.b	#1,$1E(a0)
0001931E 6E00                       		bgt.s	locret_18EA8
00019320 0868 0000 001A             		bchg	#0,$1A(a0)
00019326 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001932C                            
0001932C                            locret_18EA8:
0001932C 4E75                       		rts	
0001932E                            ; ===========================================================================
0001932E                            
0001932E                            loc_18EAA:				; XREF: Obj7B_Index
0001932E 43F8 D040                  		lea	($FFFFD040).w,a1
00019332 707A                       		moveq	#$7A,d0
00019334 7240                       		moveq	#$40,d1
00019336 743E                       		moveq	#$3E,d2
00019338                            
00019338                            loc_18EB4:
00019338 B011                       		cmp.b	(a1),d0
0001933A 6700                       		beq.s	loc_18EC0
0001933C D2C1                       		adda.w	d1,a1
0001933E 51CA FFF8                  		dbf	d2,loc_18EB4
00019342                            
00019342 6000                       		bra.s	loc_18F38
00019344                            ; ===========================================================================
00019344                            
00019344                            loc_18EC0:
00019344 3029 0008                  		move.w	8(a1),d0
00019348 3229 000C                  		move.w	$C(a1),d1
0001934C 3428 0008                  		move.w	8(a0),d2
00019350 3628 000C                  		move.w	$C(a0),d3
00019354 45FA 0000                  		lea	byte_19022(pc),a2
00019358 47FA 0000                  		lea	byte_19026(pc),a3
0001935C 181A                       		move.b	(a2)+,d4
0001935E 4884                       		ext.w	d4
00019360 D044                       		add.w	d4,d0
00019362 181B                       		move.b	(a3)+,d4
00019364 4884                       		ext.w	d4
00019366 D444                       		add.w	d4,d2
00019368 B440                       		cmp.w	d0,d2
0001936A 6500                       		bcs.s	loc_18F38
0001936C 181A                       		move.b	(a2)+,d4
0001936E 4884                       		ext.w	d4
00019370 D044                       		add.w	d4,d0
00019372 181B                       		move.b	(a3)+,d4
00019374 4884                       		ext.w	d4
00019376 D444                       		add.w	d4,d2
00019378 B042                       		cmp.w	d2,d0
0001937A 6500                       		bcs.s	loc_18F38
0001937C 181A                       		move.b	(a2)+,d4
0001937E 4884                       		ext.w	d4
00019380 D244                       		add.w	d4,d1
00019382 181B                       		move.b	(a3)+,d4
00019384 4884                       		ext.w	d4
00019386 D644                       		add.w	d4,d3
00019388 B641                       		cmp.w	d1,d3
0001938A 6500                       		bcs.s	loc_18F38
0001938C 181A                       		move.b	(a2)+,d4
0001938E 4884                       		ext.w	d4
00019390 D244                       		add.w	d4,d1
00019392 181B                       		move.b	(a3)+,d4
00019394 4884                       		ext.w	d4
00019396 D644                       		add.w	d4,d3
00019398 B243                       		cmp.w	d3,d1
0001939A 6500                       		bcs.s	loc_18F38
0001939C 5428 0024                  		addq.b	#2,$24(a0)
000193A0 4268 0028                  		clr.w	$28(a0)
000193A4 4229 0020                  		clr.b	$20(a1)
000193A8 5329 0021                  		subq.b	#1,$21(a1)
000193AC 6600                       		bne.s	loc_18F38
000193AE 08E9 0007 0022             		bset	#7,$22(a1)
000193B4 4268 0010                  		clr.w	$10(a0)
000193B8 4268 0012                  		clr.w	$12(a0)
000193BC                            
000193BC                            loc_18F38:
000193BC 4A68 0012                  		tst.w	$12(a0)
000193C0 6A00                       		bpl.s	loc_18F5C
000193C2 4EB9 0000 D9F0             		jsr	ObjectFall
000193C8 3028 0034                  		move.w	$34(a0),d0
000193CC 0440 002F                  		subi.w	#$2F,d0
000193D0 B068 000C                  		cmp.w	$C(a0),d0
000193D4 6E00                       		bgt.s	loc_18F58
000193D6 4EB9 0000 D9F0             		jsr	ObjectFall
000193DC                            
000193DC                            loc_18F58:
000193DC 6000 FF20                  		bra.w	loc_18E7A
000193E0                            ; ===========================================================================
000193E0                            
000193E0                            loc_18F5C:
000193E0 4EB9 0000 D9F0             		jsr	ObjectFall
000193E6 2268 003C                  		movea.l	$3C(a0),a1
000193EA 45F9 0000 0000             		lea	(word_19018).l,a2
000193F0 7000                       		moveq	#0,d0
000193F2 1029 001A                  		move.b	$1A(a1),d0
000193F6 3228 0008                  		move.w	8(a0),d1
000193FA 9268 0030                  		sub.w	$30(a0),d1
000193FE 6400                       		bcc.s	loc_18F7E
00019400 5440                       		addq.w	#2,d0
00019402                            
00019402                            loc_18F7E:
00019402 D040                       		add.w	d0,d0
00019404 3228 0034                  		move.w	$34(a0),d1
00019408 D272 0000                  		add.w	(a2,d0.w),d1
0001940C B268 000C                  		cmp.w	$C(a0),d1
00019410 6ECA                       		bgt.s	loc_18F58
00019412 2268 003C                  		movea.l	$3C(a0),a1
00019416 7202                       		moveq	#2,d1
00019418 4A68 0010                  		tst.w	$10(a0)
0001941C 6B00                       		bmi.s	loc_18F9C
0001941E 7200                       		moveq	#0,d1
00019420                            
00019420                            loc_18F9C:
00019420 317C 0000 0028             		move.w	#0,$28(a0)
00019426                            
00019426                            loc_18FA2:
00019426 1341 003A                  		move.b	d1,$3A(a1)
0001942A 1141 003A                  		move.b	d1,$3A(a0)
0001942E B229 001A                  		cmp.b	$1A(a1),d1
00019432 6700                       		beq.s	loc_19008
00019434 08A9 0003 0022             		bclr	#3,$22(a1)
0001943A 6700                       		beq.s	loc_19008
0001943C 4229 0025                  		clr.b	$25(a1)
00019440 137C 0002 0024             		move.b	#2,$24(a1)
00019446 45F8 D000                  		lea	($FFFFD000).w,a2
0001944A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019450 446A 0012                  		neg.w	$12(a2)
00019454 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001945A 6600                       		bne.s	loc_18FDC
0001945C E0EA 0012                  		asr	$12(a2)
00019460                            
00019460                            loc_18FDC:
00019460 08EA 0001 0022             		bset	#1,$22(a2)
00019466 08AA 0003 0022             		bclr	#3,$22(a2)
0001946C 422A 003C                  		clr.b	$3C(a2)
00019470 2F08                       		move.l	a0,-(sp)
00019472 41D2                       		lea	(a2),a0
00019474 4EBA A3BA                  		jsr	Obj01_ChkRoll
00019478 205F                       		movea.l	(sp)+,a0
0001947A 157C 0002 0024             		move.b	#2,$24(a2)
00019480 303C 00CC                  		move.w	#$CC,d0
00019484 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001948A                            
0001948A                            loc_19008:
0001948A 4268 0010                  		clr.w	$10(a0)
0001948E 4268 0012                  		clr.w	$12(a0)
00019492 5428 0024                  		addq.b	#2,$24(a0)
00019496 6000 FE66                  		bra.w	loc_18E7A
0001949A                            ; ===========================================================================
0001949A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000194A4                            		even
000194A4 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000194A8                            		even
000194A8 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000194AC                            		even
000194AC                            ; ===========================================================================
000194AC                            
000194AC                            Obj7B_Explode:				; XREF: Obj7B_Index
000194AC 10BC 003F                  		move.b	#$3F,(a0)
000194B0 4228 0024                  		clr.b	$24(a0)
000194B4 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000194BA 6700                       		beq.s	Obj7B_MakeFrag
000194BC 4E75                       		rts	
000194BE                            ; ===========================================================================
000194BE                            
000194BE                            Obj7B_MakeFrag:
000194BE 3168 0034 000C             		move.w	$34(a0),$C(a0)
000194C4 7203                       		moveq	#3,d1
000194C6 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000194CA                            
000194CA                            Obj7B_Loop:
000194CA 4EB9 0000 DEC8             		jsr	SingleObjLoad
000194D0 6600                       		bne.s	loc_1909A
000194D2 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000194D6 137C 000A 0024             		move.b	#$A,$24(a1)
000194DC 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000194E4 137C 0003 0018             		move.b	#3,$18(a1)
000194EA 337C 0518 0002             		move.w	#$518,2(a1)
000194F0 3368 0008 0008             		move.w	8(a0),8(a1)
000194F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194FC 335A 0010                  		move.w	(a2)+,$10(a1)
00019500 335A 0012                  		move.w	(a2)+,$12(a1)
00019504 137C 0098 0020             		move.b	#$98,$20(a1)
0001950A 0029 0004 0001             		ori.b	#4,1(a1)
00019510 08E9 0007 0001             		bset	#7,1(a1)
00019516 137C 000C 0019             		move.b	#$C,$19(a1)
0001951C                            
0001951C                            loc_1909A:
0001951C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019520                            
00019520 4E75                       		rts	
00019522                            ; ===========================================================================
00019522 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019526 FF60 FDC0                  		dc.w $FF60, $FDC0
0001952A 0100 FCC0                  		dc.w $100, $FCC0
0001952E 00A0 FDC0                  		dc.w $A0, $FDC0
00019532                            ; ===========================================================================
00019532                            
00019532                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019532 4EB9 0000 DA1C             		jsr	SpeedToPos
00019538 3168 0008 0030             		move.w	8(a0),$30(a0)
0001953E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019544 0668 0018 0012             		addi.w	#$18,$12(a0)
0001954A 7004                       		moveq	#4,d0
0001954C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019550 E448                       		lsr.w	#2,d0
00019552 1140 001A                  		move.b	d0,$1A(a0)
00019556 4A28 0001                  		tst.b	1(a0)
0001955A 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001955E 4E75                       		rts	
00019560                            ; ===========================================================================
00019560                            ; ---------------------------------------------------------------------------
00019560                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019560                            ; ---------------------------------------------------------------------------
00019560                            Map_obj7B:
00019560                            	include "_maps\obj7B.asm"
00019560                            ; ---------------------------------------------------------------------------
00019560                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019560                            ; ---------------------------------------------------------------------------
00019560 0000                       		dc.w byte_190E2-Map_obj7B
00019562 0000                       		dc.w byte_190E8-Map_obj7B
00019564 01                         byte_190E2:	dc.b 1
00019565 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001956A 01                         byte_190E8:	dc.b 1
0001956B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019570                            		even
00019570                            		even
00019570                            
00019570                            ; ===========================================================================
00019570                            ; ---------------------------------------------------------------------------
00019570                            ; Object 75 - Eggman (SYZ)
00019570                            ; ---------------------------------------------------------------------------
00019570                            
00019570                            Obj75:					; XREF: Obj_Index
00019570 7000                       		moveq	#0,d0
00019572 1028 0024                  		move.b	$24(a0),d0
00019576 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001957A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001957E                            ; ===========================================================================
0001957E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019580 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019582 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019584 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019586 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019588                            
00019588 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001958B 0401 05                    		dc.b 4,	1, 5
0001958E 0607 05                    		dc.b 6,	7, 5
00019591 0800 05                    		dc.b 8,	0, 5
00019594                            ; ===========================================================================
00019594                            
00019594                            Obj75_Main:				; XREF: Obj75_Index
00019594 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001959A 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000195A0 3168 0008 0030             		move.w	8(a0),$30(a0)
000195A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000195AC 117C 000F 0020             		move.b	#$F,$20(a0)
000195B2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000195B8 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000195BC 2248                       		movea.l	a0,a1
000195BE 7203                       		moveq	#3,d1
000195C0 6000                       		bra.s	Obj75_LoadBoss
000195C2                            ; ===========================================================================
000195C2                            
000195C2                            Obj75_Loop:
000195C2 4EB9 0000 DEDE             		jsr	SingleObjLoad2
000195C8 6600                       		bne.s	Obj75_ShipMain
000195CA 12BC 0075                  		move.b	#$75,(a1)
000195CE 3368 0008 0008             		move.w	8(a0),8(a1)
000195D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000195DA                            
000195DA                            Obj75_LoadBoss:				; XREF: Obj75_Main
000195DA 08A8 0000 0022             		bclr	#0,$22(a0)
000195E0 4229 0025                  		clr.b	$25(a1)
000195E4 135A 0024                  		move.b	(a2)+,$24(a1)
000195E8 135A 001C                  		move.b	(a2)+,$1C(a1)
000195EC 135A 0018                  		move.b	(a2)+,$18(a1)
000195F0 237C 0001 8198 0004        		move.l	#Map_Eggman,4(a1)
000195F8 337C 0400 0002             		move.w	#$400,2(a1)
000195FE 137C 0004 0001             		move.b	#4,1(a1)
00019604 137C 0020 0019             		move.b	#$20,$19(a1)
0001960A 2348 0034                  		move.l	a0,$34(a1)
0001960E 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019612                            
00019612                            Obj75_ShipMain:				; XREF: Obj75_Index
00019612 7000                       		moveq	#0,d0
00019614 1028 0025                  		move.b	$25(a0),d0
00019618 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001961C 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019620 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
00019626 4EB9 0000 AAF4             		jsr	AnimateSprite
0001962C 7003                       		moveq	#3,d0
0001962E C028 0022                  		and.b	$22(a0),d0
00019632 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019638 8128 0001                  		or.b	d0,1(a0)
0001963C 4EF9 0000 DA42             		jmp	DisplaySprite
00019642                            ; ===========================================================================
00019642 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019646 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001964A 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001964E                            ; ===========================================================================
0001964E                            
0001964E                            loc_191CC:				; XREF: Obj75_ShipIndex
0001964E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019654 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001965A 6400                       		bcc.s	loc_191DE
0001965C 5428 0025                  		addq.b	#2,$25(a0)
00019660                            
00019660                            loc_191DE:
00019660 1028 003F                  		move.b	$3F(a0),d0
00019664 5428 003F                  		addq.b	#2,$3F(a0)
00019668 4EB9 0000 2C22             		jsr	(CalcSine).l
0001966E E440                       		asr.w	#2,d0
00019670 3140 0012                  		move.w	d0,$12(a0)
00019674                            
00019674                            loc_191F2:
00019674 6100 E6C2                  		bsr.w	BossMove
00019678 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001967E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019684                            
00019684                            loc_19202:
00019684 3028 0008                  		move.w	8(a0),d0
00019688 0440 2C00                  		subi.w	#$2C00,d0
0001968C EA48                       		lsr.w	#5,d0
0001968E 1140 0034                  		move.b	d0,$34(a0)
00019692 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019698 6400                       		bcc.s	locret_19256
0001969A 4A28 0022                  		tst.b	$22(a0)
0001969E 6B00                       		bmi.s	loc_19258
000196A0 4A28 0020                  		tst.b	$20(a0)
000196A4 6600                       		bne.s	locret_19256
000196A6 4A28 003E                  		tst.b	$3E(a0)
000196AA 6600                       		bne.s	loc_1923A
000196AC 117C 0020 003E             		move.b	#$20,$3E(a0)
000196B2 303C 00AC                  		move.w	#$AC,d0
000196B6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
000196BC                            
000196BC                            loc_1923A:
000196BC 43F8 FB22                  		lea	($FFFFFB22).w,a1
000196C0 7000                       		moveq	#0,d0
000196C2 4A51                       		tst.w	(a1)
000196C4 6600                       		bne.s	loc_19248
000196C6 303C 0EEE                  		move.w	#$EEE,d0
000196CA                            
000196CA                            loc_19248:
000196CA 3280                       		move.w	d0,(a1)
000196CC 5328 003E                  		subq.b	#1,$3E(a0)
000196D0 6600                       		bne.s	locret_19256
000196D2 117C 000F 0020             		move.b	#$F,$20(a0)
000196D8                            
000196D8                            locret_19256:
000196D8 4E75                       		rts	
000196DA                            ; ===========================================================================
000196DA                            
000196DA                            loc_19258:				; XREF: loc_19202
000196DA 7064                       		moveq	#100,d0
000196DC 6100 0000                  		bsr.w	AddPoints
000196E0 117C 0006 0025             		move.b	#6,$25(a0)
000196E6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000196EC 4268 0010                  		clr.w	$10(a0)
000196F0 4E75                       		rts	
000196F2                            ; ===========================================================================
000196F2                            
000196F2                            loc_19270:				; XREF: Obj75_ShipIndex
000196F2 3028 0030                  		move.w	$30(a0),d0
000196F6 317C 0140 0010             		move.w	#$140,$10(a0)
000196FC 0828 0000 0022             		btst	#0,$22(a0)
00019702 6600                       		bne.s	loc_1928E
00019704 4468 0010                  		neg.w	$10(a0)
00019708 0C40 2C08                  		cmpi.w	#$2C08,d0
0001970C 6E00                       		bgt.s	loc_1929E
0001970E 6000                       		bra.s	loc_19294
00019710                            ; ===========================================================================
00019710                            
00019710                            loc_1928E:
00019710 0C40 2D38                  		cmpi.w	#$2D38,d0
00019714 6D00                       		blt.s	loc_1929E
00019716                            
00019716                            loc_19294:
00019716 0868 0000 0022             		bchg	#0,$22(a0)
0001971C 4228 003D                  		clr.b	$3D(a0)
00019720                            
00019720                            loc_1929E:
00019720 0440 2C10                  		subi.w	#$2C10,d0
00019724 0240 001F                  		andi.w	#$1F,d0
00019728 0440 001F                  		subi.w	#$1F,d0
0001972C 6A00                       		bpl.s	loc_192AE
0001972E 4440                       		neg.w	d0
00019730                            
00019730                            loc_192AE:
00019730 5340                       		subq.w	#1,d0
00019732 6E00                       		bgt.s	loc_192E8
00019734 4A28 003D                  		tst.b	$3D(a0)
00019738 6600                       		bne.s	loc_192E8
0001973A 3238 D008                  		move.w	($FFFFD008).w,d1
0001973E 0441 2C00                  		subi.w	#$2C00,d1
00019742 EA41                       		asr.w	#5,d1
00019744 B228 0034                  		cmp.b	$34(a0),d1
00019748 6600                       		bne.s	loc_192E8
0001974A 7000                       		moveq	#0,d0
0001974C 1028 0034                  		move.b	$34(a0),d0
00019750 EB40                       		asl.w	#5,d0
00019752 0640 2C10                  		addi.w	#$2C10,d0
00019756 3140 0030                  		move.w	d0,$30(a0)
0001975A 6100 0000                  		bsr.w	Obj75_FindBlocks
0001975E 5428 0025                  		addq.b	#2,$25(a0)
00019762 4268 0028                  		clr.w	$28(a0)
00019766 4268 0010                  		clr.w	$10(a0)
0001976A                            
0001976A                            loc_192E8:
0001976A 6000 FEF4                  		bra.w	loc_191DE
0001976E                            ; ===========================================================================
0001976E                            
0001976E                            loc_192EC:				; XREF: Obj75_ShipIndex
0001976E 7000                       		moveq	#0,d0
00019770 1028 0028                  		move.b	$28(a0),d0
00019774 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019778 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001977C                            ; ===========================================================================
0001977C 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001977E 0000                       		dc.w loc_19348-off_192FA
00019780 0000                       		dc.w loc_1938E-off_192FA
00019782 0000                       		dc.w loc_193D0-off_192FA
00019784                            ; ===========================================================================
00019784                            
00019784                            loc_19302:				; XREF: off_192FA
00019784 317C 0180 0012             		move.w	#$180,$12(a0)
0001978A 3028 0038                  		move.w	$38(a0),d0
0001978E 0C40 0556                  		cmpi.w	#$556,d0
00019792 6500                       		bcs.s	loc_19344
00019794 317C 0556 0038             		move.w	#$556,$38(a0)
0001979A 4268 003C                  		clr.w	$3C(a0)
0001979E 70FF                       		moveq	#-1,d0
000197A0 3028 0036                  		move.w	$36(a0),d0
000197A4 6700                       		beq.s	loc_1933C
000197A6 2240                       		movea.l	d0,a1
000197A8 137C 00FF 0029             		move.b	#-1,$29(a1)
000197AE 117C 00FF 0029             		move.b	#-1,$29(a0)
000197B4 2348 0034                  		move.l	a0,$34(a1)
000197B8 317C 0032 003C             		move.w	#$32,$3C(a0)
000197BE                            
000197BE                            loc_1933C:
000197BE 4268 0012                  		clr.w	$12(a0)
000197C2 5428 0028                  		addq.b	#2,$28(a0)
000197C6                            
000197C6                            loc_19344:
000197C6 6000 FEAC                  		bra.w	loc_191F2
000197CA                            ; ===========================================================================
000197CA                            
000197CA                            loc_19348:				; XREF: off_192FA
000197CA 5368 003C                  		subq.w	#1,$3C(a0)
000197CE 6A00                       		bpl.s	loc_19366
000197D0 5428 0028                  		addq.b	#2,$28(a0)
000197D4 317C F800 0012             		move.w	#-$800,$12(a0)
000197DA 4A68 0036                  		tst.w	$36(a0)
000197DE 6600                       		bne.s	loc_19362
000197E0 E0E8 0012                  		asr	$12(a0)
000197E4                            
000197E4                            loc_19362:
000197E4 7000                       		moveq	#0,d0
000197E6 6000                       		bra.s	loc_1937C
000197E8                            ; ===========================================================================
000197E8                            
000197E8                            loc_19366:
000197E8 7000                       		moveq	#0,d0
000197EA 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
000197F0 6E00                       		bgt.s	loc_1937C
000197F2 7002                       		moveq	#2,d0
000197F4 0828 0001 003D             		btst	#1,$3D(a0)
000197FA 6700                       		beq.s	loc_1937C
000197FC 4440                       		neg.w	d0
000197FE                            
000197FE                            loc_1937C:
000197FE D068 0038                  		add.w	$38(a0),d0
00019802 3140 000C                  		move.w	d0,$C(a0)
00019806 3168 0030 0008             		move.w	$30(a0),8(a0)
0001980C 6000 FE76                  		bra.w	loc_19202
00019810                            ; ===========================================================================
00019810                            
00019810                            loc_1938E:				; XREF: off_192FA
00019810 303C 04DA                  		move.w	#$4DA,d0
00019814 4A68 0036                  		tst.w	$36(a0)
00019818 6700                       		beq.s	loc_1939C
0001981A 0440 0018                  		subi.w	#$18,d0
0001981E                            
0001981E                            loc_1939C:
0001981E B068 0038                  		cmp.w	$38(a0),d0
00019822 6D00                       		blt.s	loc_193BE
00019824 317C 0008 003C             		move.w	#8,$3C(a0)
0001982A 4A68 0036                  		tst.w	$36(a0)
0001982E 6700                       		beq.s	loc_193B4
00019830 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019836                            
00019836                            loc_193B4:
00019836 5428 0028                  		addq.b	#2,$28(a0)
0001983A 4268 0012                  		clr.w	$12(a0)
0001983E 6000                       		bra.s	loc_193CC
00019840                            ; ===========================================================================
00019840                            
00019840                            loc_193BE:
00019840 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019846 6C00                       		bge.s	loc_193CC
00019848 0668 000C 0012             		addi.w	#$C,$12(a0)
0001984E                            
0001984E                            loc_193CC:
0001984E 6000 FE24                  		bra.w	loc_191F2
00019852                            ; ===========================================================================
00019852                            
00019852                            loc_193D0:				; XREF: off_192FA
00019852 5368 003C                  		subq.w	#1,$3C(a0)
00019856 6E00                       		bgt.s	loc_19406
00019858 6B00                       		bmi.s	loc_193EE
0001985A 70FF                       		moveq	#-1,d0
0001985C 3028 0036                  		move.w	$36(a0),d0
00019860 6700                       		beq.s	loc_193E8
00019862 2240                       		movea.l	d0,a1
00019864 137C 000A 0029             		move.b	#$A,$29(a1)
0001986A                            
0001986A                            loc_193E8:
0001986A 4268 0036                  		clr.w	$36(a0)
0001986E 6000                       		bra.s	loc_19406
00019870                            ; ===========================================================================
00019870                            
00019870                            loc_193EE:
00019870 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019876 6600                       		bne.s	loc_19406
00019878 4228 0029                  		clr.b	$29(a0)
0001987C 5528 0025                  		subq.b	#2,$25(a0)
00019880 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019886 6000                       		bra.s	loc_19446
00019888                            ; ===========================================================================
00019888                            
00019888                            loc_19406:
00019888 7001                       		moveq	#1,d0
0001988A 4A68 0036                  		tst.w	$36(a0)
0001988E 6700                       		beq.s	loc_19410
00019890 7002                       		moveq	#2,d0
00019892                            
00019892                            loc_19410:
00019892 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019898 6700                       		beq.s	loc_19424
0001989A 6D00                       		blt.s	loc_1941C
0001989C 4440                       		neg.w	d0
0001989E                            
0001989E                            loc_1941C:
0001989E 4A68 0036                  		tst.w	$36(a0)
000198A2 D168 0038                  		add.w	d0,$38(a0)
000198A6                            
000198A6                            loc_19424:
000198A6 7000                       		moveq	#0,d0
000198A8 4A68 0036                  		tst.w	$36(a0)
000198AC 6700                       		beq.s	loc_19438
000198AE 7002                       		moveq	#2,d0
000198B0 0828 0000 003D             		btst	#0,$3D(a0)
000198B6 6700                       		beq.s	loc_19438
000198B8 4440                       		neg.w	d0
000198BA                            
000198BA                            loc_19438:
000198BA D068 0038                  		add.w	$38(a0),d0
000198BE 3140 000C                  		move.w	d0,$C(a0)
000198C2 3168 0030 0008             		move.w	$30(a0),8(a0)
000198C8                            
000198C8                            loc_19446:
000198C8 6000 FDBA                  		bra.w	loc_19202
000198CC                            
000198CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198CC                            
000198CC                            
000198CC                            Obj75_FindBlocks:			; XREF: loc_192AE
000198CC 4268 0036                  		clr.w	$36(a0)
000198D0 43F8 D040                  		lea	($FFFFD040).w,a1
000198D4 703E                       		moveq	#$3E,d0
000198D6 7276                       		moveq	#$76,d1
000198D8 1428 0034                  		move.b	$34(a0),d2
000198DC                            
000198DC                            Obj75_FindLoop:
000198DC B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
000198DE 6600                       		bne.s	loc_1946A	; if not, branch
000198E0 B429 0028                  		cmp.b	$28(a1),d2
000198E4 6600                       		bne.s	loc_1946A
000198E6 3149 0036                  		move.w	a1,$36(a0)
000198EA 6000                       		bra.s	locret_19472
000198EC                            ; ===========================================================================
000198EC                            
000198EC                            loc_1946A:
000198EC 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
000198F0 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
000198F4                            
000198F4                            locret_19472:
000198F4 4E75                       		rts	
000198F6                            ; End of function Obj75_FindBlocks
000198F6                            
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            loc_19474:				; XREF: Obj75_ShipIndex
000198F6 5368 003C                  		subq.w	#1,$3C(a0)
000198FA 6B00                       		bmi.s	loc_1947E
000198FC 6000 E3F8                  		bra.w	BossDefeated
00019900                            ; ===========================================================================
00019900                            
00019900                            loc_1947E:
00019900 5428 0025                  		addq.b	#2,$25(a0)
00019904 4268 0012                  		clr.w	$12(a0)
00019908 08E8 0000 0022             		bset	#0,$22(a0)
0001990E 08A8 0007 0022             		bclr	#7,$22(a0)
00019914 4268 0010                  		clr.w	$10(a0)
00019918 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001991E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019922 6600                       		bne.s	loc_194A8
00019924 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001992A                            
0001992A                            loc_194A8:
0001992A 6000 FD58                  		bra.w	loc_19202
0001992E                            ; ===========================================================================
0001992E                            
0001992E                            loc_194AC:				; XREF: Obj75_ShipIndex
0001992E 5268 003C                  		addq.w	#1,$3C(a0)
00019932 6700                       		beq.s	loc_194BC
00019934 6A00                       		bpl.s	loc_194C2
00019936 0668 0018 0012             		addi.w	#$18,$12(a0)
0001993C 6000                       		bra.s	loc_194EE
0001993E                            ; ===========================================================================
0001993E                            
0001993E                            loc_194BC:
0001993E 4268 0012                  		clr.w	$12(a0)
00019942 6000                       		bra.s	loc_194EE
00019944                            ; ===========================================================================
00019944                            
00019944                            loc_194C2:
00019944 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001994A 6500                       		bcs.s	loc_194DA
0001994C 6700                       		beq.s	loc_194E0
0001994E 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019954 6500                       		bcs.s	loc_194EE
00019956 5428 0025                  		addq.b	#2,$25(a0)
0001995A 6000                       		bra.s	loc_194EE
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_194DA:
0001995C 5168 0012                  		subq.w	#8,$12(a0)
00019960 6000                       		bra.s	loc_194EE
00019962                            ; ===========================================================================
00019962                            
00019962                            loc_194E0:
00019962 4268 0012                  		clr.w	$12(a0)
00019966 303C 0085                  		move.w	#$85,d0
0001996A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019970                            
00019970                            loc_194EE:
00019970 6000 FD02                  		bra.w	loc_191F2
00019974                            ; ===========================================================================
00019974                            
00019974                            loc_194F2:				; XREF: Obj75_ShipIndex
00019974 317C 0400 0010             		move.w	#$400,$10(a0)
0001997A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019980 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019986 6400                       		bcc.s	loc_1950C
00019988 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001998C 6000                       		bra.s	loc_19512
0001998E                            ; ===========================================================================
0001998E                            
0001998E                            loc_1950C:
0001998E 4A28 0001                  		tst.b	1(a0)
00019992 6A00                       		bpl.s	Obj75_ShipDelete
00019994                            
00019994                            loc_19512:
00019994 6100 E3A2                  		bsr.w	BossMove
00019998 6000 FCC6                  		bra.w	loc_191DE
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            Obj75_ShipDelete:
0001999C 4EF9 0000 DA7E             		jmp	DeleteObject
000199A2                            ; ===========================================================================
000199A2                            
000199A2                            Obj75_FaceMain:				; XREF: Obj75_Index
000199A2 7201                       		moveq	#1,d1
000199A4 2268 0034                  		movea.l	$34(a0),a1
000199A8 7000                       		moveq	#0,d0
000199AA 1029 0025                  		move.b	$25(a1),d0
000199AE 303B 0000                  		move.w	off_19546(pc,d0.w),d0
000199B2 4EBB 0000                  		jsr	off_19546(pc,d0.w)
000199B6 1141 001C                  		move.b	d1,$1C(a0)
000199BA 1010                       		move.b	(a0),d0
000199BC B011                       		cmp.b	(a1),d0
000199BE 6600                       		bne.s	Obj75_FaceDelete
000199C0 6000                       		bra.s	loc_195BE
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            Obj75_FaceDelete:
000199C2 4EF9 0000 DA7E             		jmp	DeleteObject
000199C8                            ; ===========================================================================
000199C8 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
000199CC 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
000199D0 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
000199D4                            ; ===========================================================================
000199D4                            
000199D4                            loc_19552:				; XREF: off_19546
000199D4 720A                       		moveq	#$A,d1
000199D6 4E75                       		rts	
000199D8                            ; ===========================================================================
000199D8                            
000199D8                            loc_19556:				; XREF: off_19546
000199D8 7206                       		moveq	#6,d1
000199DA 4E75                       		rts	
000199DC                            ; ===========================================================================
000199DC                            
000199DC                            loc_1955A:				; XREF: off_19546
000199DC 7000                       		moveq	#0,d0
000199DE 1029 0028                  		move.b	$28(a1),d0
000199E2 303B 0000                  		move.w	off_19568(pc,d0.w),d0
000199E6 4EFB 0000                  		jmp	off_19568(pc,d0.w)
000199EA                            ; ===========================================================================
000199EA 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
000199EE 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            loc_19570:				; XREF: off_19568
000199F2 6000                       		bra.s	loc_19574
000199F4                            ; ===========================================================================
000199F4                            
000199F4                            loc_19572:				; XREF: off_19568
000199F4 7206                       		moveq	#6,d1
000199F6                            
000199F6                            loc_19574:				; XREF: off_19546
000199F6 4A29 0020                  		tst.b	$20(a1)
000199FA 6600                       		bne.s	loc_1957E
000199FC 7205                       		moveq	#5,d1
000199FE 4E75                       		rts	
00019A00                            ; ===========================================================================
00019A00                            
00019A00                            loc_1957E:
00019A00 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019A06 6500                       		bcs.s	locret_19588
00019A08 7204                       		moveq	#4,d1
00019A0A                            
00019A0A                            locret_19588:
00019A0A 4E75                       		rts	
00019A0C                            ; ===========================================================================
00019A0C                            
00019A0C                            Obj75_FlameMain:			; XREF: Obj75_Index
00019A0C 117C 0007 001C             		move.b	#7,$1C(a0)
00019A12 2268 0034                  		movea.l	$34(a0),a1
00019A16 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A1C 6600                       		bne.s	loc_195AA
00019A1E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019A24 4A28 0001                  		tst.b	1(a0)
00019A28 6A00                       		bpl.s	Obj75_FlameDelete
00019A2A 6000                       		bra.s	loc_195B6
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            loc_195AA:
00019A2C 4A69 0010                  		tst.w	$10(a1)
00019A30 6700                       		beq.s	loc_195B6
00019A32 117C 0008 001C             		move.b	#8,$1C(a0)
00019A38                            
00019A38                            loc_195B6:
00019A38 6000                       		bra.s	loc_195BE
00019A3A                            ; ===========================================================================
00019A3A                            
00019A3A                            Obj75_FlameDelete:
00019A3A 4EF9 0000 DA7E             		jmp	DeleteObject
00019A40                            ; ===========================================================================
00019A40                            
00019A40                            loc_195BE:
00019A40 43F9 0001 8148             		lea	(Ani_Eggman).l,a1
00019A46 4EB9 0000 AAF4             		jsr	AnimateSprite
00019A4C 2268 0034                  		movea.l	$34(a0),a1
00019A50 3169 0008 0008             		move.w	8(a1),8(a0)
00019A56 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A5C                            
00019A5C                            loc_195DA:
00019A5C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A62 7003                       		moveq	#3,d0
00019A64 C028 0022                  		and.b	$22(a0),d0
00019A68 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A6E 8128 0001                  		or.b	d0,1(a0)
00019A72 4EF9 0000 DA42             		jmp	DisplaySprite
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019A78 217C 0001 8260 0004        		move.l	#Map_BossItems,4(a0)
00019A80 317C 246C 0002             		move.w	#$246C,2(a0)
00019A86 117C 0005 001A             		move.b	#5,$1A(a0)
00019A8C 2268 0034                  		movea.l	$34(a0),a1
00019A90 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A96 6600                       		bne.s	loc_1961C
00019A98 4A28 0001                  		tst.b	1(a0)
00019A9C 6A00                       		bpl.s	Obj75_SpikeDelete
00019A9E                            
00019A9E                            loc_1961C:
00019A9E 3169 0008 0008             		move.w	8(a1),8(a0)
00019AA4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019AAA 3028 003C                  		move.w	$3C(a0),d0
00019AAE 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019AB4 6600                       		bne.s	loc_19652
00019AB6 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019ABC 6700                       		beq.s	loc_1964C
00019ABE 4A29 0028                  		tst.b	$28(a1)
00019AC2 6600                       		bne.s	loc_19658
00019AC4 0C40 0094                  		cmpi.w	#$94,d0
00019AC8 6C00                       		bge.s	loc_19658
00019ACA 5E40                       		addq.w	#7,d0
00019ACC 6000                       		bra.s	loc_19658
00019ACE                            ; ===========================================================================
00019ACE                            
00019ACE                            loc_1964C:
00019ACE 4A69 003C                  		tst.w	$3C(a1)
00019AD2 6A00                       		bpl.s	loc_19658
00019AD4                            
00019AD4                            loc_19652:
00019AD4 4A40                       		tst.w	d0
00019AD6 6F00                       		ble.s	loc_19658
00019AD8 5B40                       		subq.w	#5,d0
00019ADA                            
00019ADA                            loc_19658:
00019ADA 3140 003C                  		move.w	d0,$3C(a0)
00019ADE E440                       		asr.w	#2,d0
00019AE0 D168 000C                  		add.w	d0,$C(a0)
00019AE4 117C 0008 0019             		move.b	#8,$19(a0)
00019AEA 117C 000C 0016             		move.b	#$C,$16(a0)
00019AF0 4228 0020                  		clr.b	$20(a0)
00019AF4 2268 0034                  		movea.l	$34(a0),a1
00019AF8 4A29 0020                  		tst.b	$20(a1)
00019AFC 6700                       		beq.s	loc_19688
00019AFE 4A29 0029                  		tst.b	$29(a1)
00019B02 6600                       		bne.s	loc_19688
00019B04 117C 0084 0020             		move.b	#$84,$20(a0)
00019B0A                            
00019B0A                            loc_19688:
00019B0A 6000 FF50                  		bra.w	loc_195DA
00019B0E                            ; ===========================================================================
00019B0E                            
00019B0E                            Obj75_SpikeDelete:
00019B0E 4EF9 0000 DA7E             		jmp	DeleteObject
00019B14                            ; ===========================================================================
00019B14                            ; ---------------------------------------------------------------------------
00019B14                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019B14                            ; ---------------------------------------------------------------------------
00019B14                            
00019B14                            Obj76:					; XREF: Obj_Index
00019B14 7000                       		moveq	#0,d0
00019B16 1028 0024                  		move.b	$24(a0),d0
00019B1A 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019B1E 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019B22                            ; ===========================================================================
00019B22 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019B24 0000                       		dc.w Obj76_Action-Obj76_Index
00019B26 0000                       		dc.w loc_19762-Obj76_Index
00019B28                            ; ===========================================================================
00019B28                            
00019B28                            Obj76_Main:				; XREF: Obj76_Index
00019B28 7800                       		moveq	#0,d4
00019B2A 3A3C 2C10                  		move.w	#$2C10,d5
00019B2E 7C09                       		moveq	#9,d6
00019B30 43D0                       		lea	(a0),a1
00019B32 6000                       		bra.s	Obj76_MakeBlock
00019B34                            ; ===========================================================================
00019B34                            
00019B34                            Obj76_Loop:
00019B34 4EB9 0000 DEC8             		jsr	SingleObjLoad
00019B3A 6600                       		bne.s	Obj76_ExitLoop
00019B3C                            
00019B3C                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019B3C 12BC 0076                  		move.b	#$76,(a1)
00019B40 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019B48 337C 4000 0002             		move.w	#$4000,2(a1)
00019B4E 137C 0004 0001             		move.b	#4,1(a1)
00019B54 137C 0010 0019             		move.b	#$10,$19(a1)
00019B5A 137C 0010 0016             		move.b	#$10,$16(a1)
00019B60 137C 0003 0018             		move.b	#3,$18(a1)
00019B66 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019B6A 337C 0582 000C             		move.w	#$582,$C(a1)
00019B70 3344 0028                  		move.w	d4,$28(a1)
00019B74 0644 0101                  		addi.w	#$101,d4
00019B78 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019B7C 5429 0024                  		addq.b	#2,$24(a1)
00019B80 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019B84                            
00019B84                            Obj76_ExitLoop:
00019B84 4E75                       		rts	
00019B86                            ; ===========================================================================
00019B86                            
00019B86                            Obj76_Action:				; XREF: Obj76_Index
00019B86 1028 0029                  		move.b	$29(a0),d0
00019B8A B028 0028                  		cmp.b	$28(a0),d0
00019B8E 6700                       		beq.s	Obj76_Solid
00019B90 4A00                       		tst.b	d0
00019B92 6B00                       		bmi.s	loc_19718
00019B94                            
00019B94                            loc_19712:
00019B94 6100 0000                  		bsr.w	Obj76_Break
00019B98 6000                       		bra.s	Obj76_Display
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            loc_19718:
00019B9A 2268 0034                  		movea.l	$34(a0),a1
00019B9E 4A29 0021                  		tst.b	$21(a1)
00019BA2 67F0                       		beq.s	loc_19712
00019BA4 3169 0008 0008             		move.w	8(a1),8(a0)
00019BAA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BB0 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019BB6 B2C8                       		cmpa.w	a0,a1
00019BB8 6500                       		bcs.s	Obj76_Display
00019BBA 3029 0012                  		move.w	$12(a1),d0
00019BBE 48C0                       		ext.l	d0
00019BC0 E080                       		asr.l	#8,d0
00019BC2 D168 000C                  		add.w	d0,$C(a0)
00019BC6 6000                       		bra.s	Obj76_Display
00019BC8                            ; ===========================================================================
00019BC8                            
00019BC8                            Obj76_Solid:				; XREF: Obj76_Action
00019BC8 323C 001B                  		move.w	#$1B,d1
00019BCC 343C 0010                  		move.w	#$10,d2
00019BD0 363C 0011                  		move.w	#$11,d3
00019BD4 3828 0008                  		move.w	8(a0),d4
00019BD8 4EB9 0000 FE12             		jsr	SolidObject
00019BDE                            
00019BDE                            Obj76_Display:				; XREF: Obj76_Action
00019BDE 4EF9 0000 DA42             		jmp	DisplaySprite
00019BE4                            ; ===========================================================================
00019BE4                            
00019BE4                            loc_19762:				; XREF: Obj76_Index
00019BE4 4A28 0001                  		tst.b	1(a0)
00019BE8 6A00                       		bpl.s	Obj76_Delete
00019BEA 4EB9 0000 D9F0             		jsr	ObjectFall
00019BF0 4EF9 0000 DA42             		jmp	DisplaySprite
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            Obj76_Delete:
00019BF6 4EF9 0000 DA7E             		jmp	DeleteObject
00019BFC                            
00019BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BFC                            
00019BFC                            
00019BFC                            Obj76_Break:				; XREF: Obj76_Action
00019BFC 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019C00 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019C04 7801                       		moveq	#1,d4
00019C06 7203                       		moveq	#3,d1
00019C08 7438                       		moveq	#$38,d2
00019C0A 5428 0024                  		addq.b	#2,$24(a0)
00019C0E 117C 0008 0019             		move.b	#8,$19(a0)
00019C14 117C 0008 0016             		move.b	#8,$16(a0)
00019C1A 43D0                       		lea	(a0),a1
00019C1C 6000                       		bra.s	Obj76_MakeFrag
00019C1E                            ; ===========================================================================
00019C1E                            
00019C1E                            Obj76_LoopFrag:
00019C1E 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00019C24 6600                       		bne.s	loc_197D4
00019C26                            
00019C26                            Obj76_MakeFrag:
00019C26 45D0                       		lea	(a0),a2
00019C28 47D1                       		lea	(a1),a3
00019C2A 7603                       		moveq	#3,d3
00019C2C                            
00019C2C                            loc_197AA:
00019C2C 26DA                       		move.l	(a2)+,(a3)+
00019C2E 26DA                       		move.l	(a2)+,(a3)+
00019C30 26DA                       		move.l	(a2)+,(a3)+
00019C32 26DA                       		move.l	(a2)+,(a3)+
00019C34 51CB FFF6                  		dbf	d3,loc_197AA
00019C38                            
00019C38 335C 0010                  		move.w	(a4)+,$10(a1)
00019C3C 335C 0012                  		move.w	(a4)+,$12(a1)
00019C40 361D                       		move.w	(a5)+,d3
00019C42 D769 0008                  		add.w	d3,8(a1)
00019C46 361D                       		move.w	(a5)+,d3
00019C48 D769 000C                  		add.w	d3,$C(a1)
00019C4C 1344 001A                  		move.b	d4,$1A(a1)
00019C50 5244                       		addq.w	#1,d4
00019C52 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019C56                            
00019C56                            loc_197D4:
00019C56 303C 00CB                  		move.w	#$CB,d0
00019C5A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019C60                            ; End of function Obj76_Break
00019C60                            
00019C60                            ; ===========================================================================
00019C60 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019C64 0180 FE00                  		dc.w $180, $FE00
00019C68 FF00 FF00                  		dc.w $FF00, $FF00
00019C6C 0100 FF00                  		dc.w $100, $FF00
00019C70 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019C74 0010 0000                  		dc.w $10, 0
00019C78 0000 0010                  		dc.w 0,	$10
00019C7C 0010 0010                  		dc.w $10, $10
00019C80                            ; ---------------------------------------------------------------------------
00019C80                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019C80                            ; ---------------------------------------------------------------------------
00019C80                            Map_obj76:
00019C80                            	include "_maps\obj76.asm"
00019C80                            ; ---------------------------------------------------------------------------
00019C80                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019C80                            ; ---------------------------------------------------------------------------
00019C80 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019C84 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019C88 0000                       		dc.w byte_19826-Map_obj76
00019C8A 02                         byte_19808:	dc.b 2
00019C8B F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019C90 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019C95 00                         		dc.b 0
00019C96 01                         byte_19814:	dc.b 1
00019C97 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019C9C 01                         byte_1981A:	dc.b 1
00019C9D F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019CA2 01                         byte_19820:	dc.b 1
00019CA3 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019CA8 01                         byte_19826:	dc.b 1
00019CA9 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019CAE                            		even
00019CAE                            		even
00019CAE                            
00019CAE                            ; ===========================================================================
00019CAE                            
00019CAE                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019CAE 4EF9 0000 DA7E             		jmp	DeleteObject
00019CB4                            ; ===========================================================================
00019CB4                            ; ---------------------------------------------------------------------------
00019CB4                            ; Object 82 - Eggman (SBZ2)
00019CB4                            ; ---------------------------------------------------------------------------
00019CB4                            
00019CB4                            Obj82:					; XREF: Obj_Index
00019CB4 7000                       		moveq	#0,d0
00019CB6 1028 0024                  		move.b	$24(a0),d0
00019CBA 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019CBE 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019CC2                            ; ===========================================================================
00019CC2 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019CC4 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019CC6 0000                       		dc.w Obj82_Switch-Obj82_Index
00019CC8                            
00019CC8 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019CCB 0400 03                    		dc.b 4,	0, 3
00019CCE                            ; ===========================================================================
00019CCE                            
00019CCE                            Obj82_Main:				; XREF: Obj82_Index
00019CCE 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019CD2 317C 2160 0008             		move.w	#$2160,8(a0)
00019CD8 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019CDE 117C 000F 0020             		move.b	#$F,$20(a0)
00019CE4 117C 0010 0021             		move.b	#$10,$21(a0)
00019CEA 08A8 0000 0022             		bclr	#0,$22(a0)
00019CF0 4228 0025                  		clr.b	$25(a0)
00019CF4 115A 0024                  		move.b	(a2)+,$24(a0)
00019CF8 115A 001C                  		move.b	(a2)+,$1C(a0)
00019CFC 115A 0018                  		move.b	(a2)+,$18(a0)
00019D00 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019D08 317C 0400 0002             		move.w	#$400,2(a0)
00019D0E 117C 0004 0001             		move.b	#4,1(a0)
00019D14 08E8 0007 0001             		bset	#7,1(a0)
00019D1A 117C 0020 0019             		move.b	#$20,$19(a0)
00019D20 4EB9 0000 DEDE             		jsr	SingleObjLoad2
00019D26 6600                       		bne.s	Obj82_Eggman
00019D28 2348 0034                  		move.l	a0,$34(a1)
00019D2C 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019D30 337C 2130 0008             		move.w	#$2130,8(a1)
00019D36 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019D3C 4228 0025                  		clr.b	$25(a0)
00019D40 135A 0024                  		move.b	(a2)+,$24(a1)
00019D44 135A 001C                  		move.b	(a2)+,$1C(a1)
00019D48 135A 0018                  		move.b	(a2)+,$18(a1)
00019D4C 237C 0000 C236 0004        		move.l	#Map_obj32,4(a1)
00019D54 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019D5A 137C 0004 0001             		move.b	#4,1(a1)
00019D60 08E9 0007 0001             		bset	#7,1(a1)
00019D66 137C 0010 0019             		move.b	#$10,$19(a1)
00019D6C 137C 0000 001A             		move.b	#0,$1A(a1)
00019D72                            
00019D72                            Obj82_Eggman:				; XREF: Obj82_Index
00019D72 7000                       		moveq	#0,d0
00019D74 1028 0025                  		move.b	$25(a0),d0
00019D78 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019D7C 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019D80 43FA 0000                  		lea	Ani_obj82(pc),a1
00019D84 4EB9 0000 AAF4             		jsr	AnimateSprite
00019D8A 4EF9 0000 DA42             		jmp	DisplaySprite
00019D90                            ; ===========================================================================
00019D90 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019D92 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019D94 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019D96 0000                       		dc.w loc_19934-Obj82_EggIndex
00019D98                            ; ===========================================================================
00019D98                            
00019D98                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019D98 3028 0008                  		move.w	8(a0),d0
00019D9C 9078 D008                  		sub.w	($FFFFD008).w,d0
00019DA0 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019DA4 6400                       		bcc.s	loc_19934	; if not, branch
00019DA6 5428 0025                  		addq.b	#2,$25(a0)
00019DAA 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019DB0 117C 0001 001C             		move.b	#1,$1C(a0)
00019DB6                            
00019DB6                            loc_19934:				; XREF: Obj82_EggIndex
00019DB6 4EF9 0000 DA1C             		jmp	SpeedToPos
00019DBC                            ; ===========================================================================
00019DBC                            
00019DBC                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019DBC 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019DC0 6600                       		bne.s	loc_19954	; if time remains, branch
00019DC2 5428 0025                  		addq.b	#2,$25(a0)
00019DC6 117C 0002 001C             		move.b	#2,$1C(a0)
00019DCC 5868 000C                  		addq.w	#4,$C(a0)
00019DD0 317C 000F 003C             		move.w	#15,$3C(a0)
00019DD6                            
00019DD6                            loc_19954:
00019DD6 60DE                       		bra.s	loc_19934
00019DD8                            ; ===========================================================================
00019DD8                            
00019DD8                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019DD8 5368 003C                  		subq.w	#1,$3C(a0)
00019DDC 6E00                       		bgt.s	loc_199D0
00019DDE 6600                       		bne.s	loc_1996A
00019DE0 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019DE6 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019DEC                            
00019DEC                            loc_1996A:
00019DEC 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019DF2 6E00                       		bgt.s	loc_19976
00019DF4 4268 0010                  		clr.w	$10(a0)
00019DF8                            
00019DF8                            loc_19976:
00019DF8 0668 0024 0012             		addi.w	#$24,$12(a0)
00019DFE 4A68 0012                  		tst.w	$12(a0)
00019E02 6B00                       		bmi.s	Obj82_FindBlocks
00019E04 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019E0A 6500                       		bcs.s	Obj82_FindBlocks
00019E0C 317C 5357 0028             		move.w	#$5357,$28(a0)
00019E12 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019E18 6500                       		bcs.s	Obj82_FindBlocks
00019E1A 317C 059B 000C             		move.w	#$59B,$C(a0)
00019E20 4268 0012                  		clr.w	$12(a0)
00019E24                            
00019E24                            Obj82_FindBlocks:
00019E24 3028 0010                  		move.w	$10(a0),d0
00019E28 8068 0012                  		or.w	$12(a0),d0
00019E2C 6600                       		bne.s	loc_199D0
00019E2E 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019E32 703E                       		moveq	#$3E,d0
00019E34 7240                       		moveq	#$40,d1
00019E36                            
00019E36                            Obj82_FindLoop:	
00019E36 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019E38 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019E3C 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019E40                            
00019E40 6600                       		bne.s	loc_199D0
00019E42 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019E48 5428 0025                  		addq.b	#2,$25(a0)
00019E4C 117C 0001 001C             		move.b	#1,$1C(a0)
00019E52                            
00019E52                            loc_199D0:
00019E52 6000 FF62                  		bra.w	loc_19934
00019E56                            ; ===========================================================================
00019E56                            
00019E56                            Obj82_Switch:				; XREF: Obj82_Index
00019E56 7000                       		moveq	#0,d0
00019E58 1028 0025                  		move.b	$25(a0),d0
00019E5C 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019E60 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019E64                            ; ===========================================================================
00019E64 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019E66 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019E68                            ; ===========================================================================
00019E68                            
00019E68                            loc_199E6:				; XREF: Obj82_SwIndex
00019E68 2268 0034                  		movea.l	$34(a0),a1
00019E6C 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019E72 6600                       		bne.s	Obj82_SwDisplay
00019E74 117C 0001 001A             		move.b	#1,$1A(a0)
00019E7A 5428 0025                  		addq.b	#2,$25(a0)
00019E7E                            
00019E7E                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019E7E 4EF9 0000 DA42             		jmp	DisplaySprite
00019E84                            ; ===========================================================================
00019E84                            Ani_obj82:
00019E84                            	include "_anim\obj82.asm"
00019E84                            ; ---------------------------------------------------------------------------
00019E84                            ; Animation script - Eggman (SBZ2)
00019E84                            ; ---------------------------------------------------------------------------
00019E84 0000                       		dc.w byte_19A10-Ani_obj82
00019E86 0000                       		dc.w byte_19A14-Ani_obj82
00019E88 0000                       		dc.w byte_19A18-Ani_obj82
00019E8A 0000                       		dc.w byte_19A20-Ani_obj82
00019E8C 0000                       		dc.w byte_19A24-Ani_obj82
00019E8E 0000                       		dc.w byte_19A2A-Ani_obj82
00019E90 0000                       		dc.w byte_19A30-Ani_obj82
00019E92 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019E96 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019E9A 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019EA2 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019EA6 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019EAC 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019EB2 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019EB6                            		even
00019EB6                            		even
00019EB6                            
00019EB6                            ; ---------------------------------------------------------------------------
00019EB6                            ; Sprite mappings - Eggman (SBZ2)
00019EB6                            ; ---------------------------------------------------------------------------
00019EB6                            Map_obj82:
00019EB6                            	include "_maps\obj82.asm"
00019EB6                            ; ================================================================================
00019EB6                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
00019EB6                            ; ================================================================================
00019EB6                            
00019EB6                            DATAA16Z12RYSAF:
00019EB6 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
00019EBA 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
00019EBE 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
00019EC2 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
00019EC6 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
00019ECA 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
00019ECC 03                         DATAA16Z12RYSAF_0: dc.b $3
00019ECD FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
00019ED2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
00019ED7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
00019EDC 04                         DATAA16Z12RYSAF_1: dc.b $4
00019EDD E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
00019EE2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
00019EE7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
00019EEC FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
00019EF1 04                         DATAA16Z12RYSAF_2: dc.b $4
00019EF2 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
00019EF7 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
00019EFC 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
00019F01 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
00019F06 03                         DATAA16Z12RYSAF_3: dc.b $3
00019F07 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
00019F0C 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
00019F11 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
00019F16 04                         DATAA16Z12RYSAF_4: dc.b $4
00019F17 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
00019F1C 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
00019F21 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
00019F26 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
00019F2B 04                         DATAA16Z12RYSAF_5: dc.b $4
00019F2C E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
00019F31 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
00019F36 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
00019F3B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
00019F40 07                         DATAA16Z12RYSAF_6: dc.b $7
00019F41 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
00019F46 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
00019F4B 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
00019F50 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
00019F55 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
00019F5A F104 0838 10               	dc.b $F1, $4, $8, $38, $10
00019F5F F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
00019F64 04                         DATAA16Z12RYSAF_7: dc.b $4
00019F65 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
00019F6A E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
00019F6F 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
00019F74 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
00019F79 05                         DATAA16Z12RYSAF_8: dc.b $5
00019F7A 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
00019F7F E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
00019F84 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
00019F89 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
00019F8E EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
00019F93 08                         DATAA16Z12RYSAF_9: dc.b $8
00019F94 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
00019F99 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
00019F9E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
00019FA3 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
00019FA8 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
00019FAD F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
00019FB2 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
00019FB7 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
00019FBC 03                         DATAA16Z12RYSAF_A: dc.b $3
00019FBD EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
00019FC2 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
00019FC7 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
00019FCC                            	even
00019FCC                            	even
00019FCC                            
00019FCC                            ; ===========================================================================
00019FCC                            ; ---------------------------------------------------------------------------
00019FCC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019FCC                            ; ---------------------------------------------------------------------------
00019FCC                            
00019FCC                            Obj83:					; XREF: Obj_Index
00019FCC 7000                       		moveq	#0,d0
00019FCE 1028 0024                  		move.b	$24(a0),d0
00019FD2 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019FD6 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019FDA                            ; ===========================================================================
00019FDA 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019FDC 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019FDE 0000                       		dc.w loc_19C36-Obj83_Index
00019FE0 0000                       		dc.w loc_19C62-Obj83_Index
00019FE2 0000                       		dc.w loc_19C72-Obj83_Index
00019FE4 0000                       		dc.w loc_19C80-Obj83_Index
00019FE6                            ; ===========================================================================
00019FE6                            
00019FE6                            Obj83_Main:				; XREF: Obj83_Index
00019FE6 317C 2080 0008             		move.w	#$2080,8(a0)
00019FEC 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019FF2 117C 0080 0019             		move.b	#$80,$19(a0)
00019FF8 117C 0010 0016             		move.b	#$10,$16(a0)
00019FFE 117C 0004 0001             		move.b	#4,1(a0)
0001A004 08E8 0007 0001             		bset	#7,1(a0)
0001A00A 7800                       		moveq	#0,d4
0001A00C 3A3C 2010                  		move.w	#$2010,d5
0001A010 7C07                       		moveq	#7,d6
0001A012 45E8 0030                  		lea	$30(a0),a2
0001A016                            
0001A016                            Obj83_MakeBlock:
0001A016 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001A01C 6600                       		bne.s	Obj83_ExitMake
0001A01E 34C9                       		move.w	a1,(a2)+
0001A020 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A024 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A02C 337C 4518 0002             		move.w	#$4518,2(a1)
0001A032 137C 0004 0001             		move.b	#4,1(a1)
0001A038 137C 0010 0019             		move.b	#$10,$19(a1)
0001A03E 137C 0010 0016             		move.b	#$10,$16(a1)
0001A044 137C 0003 0018             		move.b	#3,$18(a1)
0001A04A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A04E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A054 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A058 137C 0008 0024             		move.b	#8,$24(a1)
0001A05E 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A062                            
0001A062                            Obj83_ExitMake:
0001A062 5428 0024                  		addq.b	#2,$24(a0)
0001A066 4E75                       		rts	
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A068 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A06E 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A070 4228 001A                  		clr.b	$1A(a0)
0001A074 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A078                            
0001A078                            Obj83_Solid:
0001A078 7000                       		moveq	#0,d0
0001A07A 1028 001A                  		move.b	$1A(a0),d0
0001A07E 4400                       		neg.b	d0
0001A080 4880                       		ext.w	d0
0001A082 5040                       		addq.w	#8,d0
0001A084 E940                       		asl.w	#4,d0
0001A086 383C 2100                  		move.w	#$2100,d4
0001A08A 9840                       		sub.w	d0,d4
0001A08C 1140 0019                  		move.b	d0,$19(a0)
0001A090 3144 0008                  		move.w	d4,8(a0)
0001A094 720B                       		moveq	#$B,d1
0001A096 D240                       		add.w	d0,d1
0001A098 7410                       		moveq	#$10,d2
0001A09A 7611                       		moveq	#$11,d3
0001A09C 4EF9 0000 FE12             		jmp	SolidObject
0001A0A2                            ; ===========================================================================
0001A0A2                            
0001A0A2                            loc_19C36:				; XREF: Obj83_Index
0001A0A2 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A0A8 6400                       		bcc.s	Obj83_Solid2
0001A0AA 70FF                       		moveq	#-1,d0
0001A0AC 1028 001A                  		move.b	$1A(a0),d0
0001A0B0 4880                       		ext.w	d0
0001A0B2 D040                       		add.w	d0,d0
0001A0B4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A0B8 2240                       		movea.l	d0,a1
0001A0BA 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A0C0 5228 001A                  		addq.b	#1,$1A(a0)
0001A0C4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A0CA 6700                       		beq.s	loc_19C62
0001A0CC                            
0001A0CC                            Obj83_Solid2:
0001A0CC 60AA                       		bra.s	Obj83_Solid
0001A0CE                            ; ===========================================================================
0001A0CE                            
0001A0CE                            loc_19C62:				; XREF: Obj83_Index
0001A0CE 08A8 0003 0022             		bclr	#3,$22(a0)
0001A0D4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A0DA 6000 FBD2                  		bra.w	loc_1982C
0001A0DE                            ; ===========================================================================
0001A0DE                            
0001A0DE                            loc_19C72:				; XREF: Obj83_Index
0001A0DE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A0E4 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A0E6 4EF9 0000 DA42             		jmp	DisplaySprite
0001A0EC                            ; ===========================================================================
0001A0EC                            
0001A0EC                            loc_19C80:				; XREF: Obj83_Index
0001A0EC 4A28 0001                  		tst.b	1(a0)
0001A0F0 6A00 FBBC                  		bpl.w	loc_1982C
0001A0F4 4EB9 0000 D9F0             		jsr	ObjectFall
0001A0FA 4EF9 0000 DA42             		jmp	DisplaySprite
0001A100                            ; ===========================================================================
0001A100                            
0001A100                            Obj83_Break:				; XREF: loc_19C72
0001A100 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A104 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A108 7801                       		moveq	#1,d4
0001A10A 7203                       		moveq	#3,d1
0001A10C 7438                       		moveq	#$38,d2
0001A10E 5428 0024                  		addq.b	#2,$24(a0)
0001A112 117C 0008 0019             		move.b	#8,$19(a0)
0001A118 117C 0008 0016             		move.b	#8,$16(a0)
0001A11E 43D0                       		lea	(a0),a1
0001A120 6000                       		bra.s	Obj83_MakeFrag
0001A122                            ; ===========================================================================
0001A122                            
0001A122                            Obj83_LoopFrag:
0001A122 4EB9 0000 DEDE             		jsr	SingleObjLoad2
0001A128 6600                       		bne.s	Obj83_BreakSnd
0001A12A                            
0001A12A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A12A 45D0                       		lea	(a0),a2
0001A12C 47D1                       		lea	(a1),a3
0001A12E 7603                       		moveq	#3,d3
0001A130                            
0001A130                            loc_19CC4:
0001A130 26DA                       		move.l	(a2)+,(a3)+
0001A132 26DA                       		move.l	(a2)+,(a3)+
0001A134 26DA                       		move.l	(a2)+,(a3)+
0001A136 26DA                       		move.l	(a2)+,(a3)+
0001A138 51CB FFF6                  		dbf	d3,loc_19CC4
0001A13C                            
0001A13C 335C 0012                  		move.w	(a4)+,$12(a1)
0001A140 361D                       		move.w	(a5)+,d3
0001A142 D769 0008                  		add.w	d3,8(a1)
0001A146 361D                       		move.w	(a5)+,d3
0001A148 D769 000C                  		add.w	d3,$C(a1)
0001A14C 1344 001A                  		move.b	d4,$1A(a1)
0001A150 5244                       		addq.w	#1,d4
0001A152 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A156                            
0001A156                            Obj83_BreakSnd:
0001A156 303C 00CB                  		move.w	#$CB,d0
0001A15A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A160 4EF9 0000 DA42             		jmp	DisplaySprite
0001A166                            ; ===========================================================================
0001A166 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A16A 0120 00C0                  		dc.w $120, $C0
0001A16E FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A172 0010 0000                  		dc.w $10, 0
0001A176 0000 0010                  		dc.w 0,	$10
0001A17A 0010 0010                  		dc.w $10, $10
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            Map_obj83:
0001A17E                            	include "_maps\obj83.asm"
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A182 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A186 0000                       		dc.w byte_19D46-Map_obj83
0001A188 01                         byte_19D1C:	dc.b 1
0001A189 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A18E 02                         byte_19D22:	dc.b 2
0001A18F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A194 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A199 00                         		dc.b 0
0001A19A 02                         byte_19D2E:	dc.b 2
0001A19B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A1A0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A1A5 00                         		dc.b 0
0001A1A6 02                         byte_19D3A:	dc.b 2
0001A1A7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A1AC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A1B1 00                         		dc.b 0
0001A1B2 02                         byte_19D46:	dc.b 2
0001A1B3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A1B8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A1BE 00                         		even
0001A1BE 00                         		even
0001A1BE                            
0001A1BE                            ; ===========================================================================
0001A1BE                            ; ---------------------------------------------------------------------------
0001A1BE                            ; Object 85 - Eggman (FZ)
0001A1BE                            ; ---------------------------------------------------------------------------
0001A1BE                            
0001A1BE                            Obj85_Delete:
0001A1BE 4EF9 0000 DA7E             		jmp	DeleteObject
0001A1C4                            ; ===========================================================================
0001A1C4                            
0001A1C4                            Obj85:					; XREF: Obj_Index
0001A1C4 7000                       		moveq	#0,d0
0001A1C6 1028 0024                  		move.b	$24(a0),d0
0001A1CA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A1CE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A1D2                            ; ===========================================================================
0001A1D2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A1D4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A1D6 0000                       		dc.w loc_1A38E-Obj85_Index
0001A1D8 0000                       		dc.w loc_1A346-Obj85_Index
0001A1DA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A1DC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A1DE 0000                       		dc.w loc_1A264-Obj85_Index
0001A1E0                            
0001A1E0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A1E6 0001 9EB6                  		dc.l Map_obj82		; mappings pointer
0001A1EA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A1F0 0000 0000                  		dc.l Map_obj84
0001A1F4 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A1FA 0000 0000                  		dc.l Map_FZBoss
0001A1FE 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A204 0001 9EB6                  		dc.l Map_obj82
0001A208 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A20E 0001 8198                  		dc.l Map_Eggman
0001A212 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A218 0001 8198                  		dc.l Map_Eggman
0001A21C                            
0001A21C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A221 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A226 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A22B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A230 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A235 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A23A                            ; ===========================================================================
0001A23A                            
0001A23A                            Obj85_Main:				; XREF: Obj85_Index
0001A23A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A23E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A242 2248                       		movea.l	a0,a1
0001A244 7205                       		moveq	#5,d1
0001A246 6000                       		bra.s	Obj85_LoadBoss
0001A248                            ; ===========================================================================
0001A248                            
0001A248                            Obj85_Loop:
0001A248 4EB9 0000 DEDE             		jsr	SingleObjLoad2
0001A24E 6600                       		bne.s	loc_19E20
0001A250                            
0001A250                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A250 12BC 0085                  		move.b	#$85,(a1)
0001A254 335A 0008                  		move.w	(a2)+,8(a1)
0001A258 335A 000C                  		move.w	(a2)+,$C(a1)
0001A25C 335A 0002                  		move.w	(a2)+,2(a1)
0001A260 235A 0004                  		move.l	(a2)+,4(a1)
0001A264 135B 0024                  		move.b	(a3)+,$24(a1)
0001A268 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A26C 135B 0018                  		move.b	(a3)+,$18(a1)
0001A270 135B 0017                  		move.b	(a3)+,$17(a1)
0001A274 135B 0016                  		move.b	(a3)+,$16(a1)
0001A278 137C 0004 0001             		move.b	#4,1(a1)
0001A27E 08E8 0007 0001             		bset	#7,1(a0)
0001A284 2348 0034                  		move.l	a0,$34(a1)
0001A288 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A28C                            
0001A28C                            loc_19E20:
0001A28C 45E8 0036                  		lea	$36(a0),a2
0001A290 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001A296 6600                       		bne.s	loc_19E5A
0001A298 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A29C 3489                       		move.w	a1,(a2)
0001A29E 2348 0034                  		move.l	a0,$34(a1)
0001A2A2 45E8 0038                  		lea	$38(a0),a2
0001A2A6 7400                       		moveq	#0,d2
0001A2A8 7203                       		moveq	#3,d1
0001A2AA                            
0001A2AA                            loc_19E3E:
0001A2AA 4EB9 0000 DEDE             		jsr	SingleObjLoad2
0001A2B0 6600                       		bne.s	loc_19E5A
0001A2B2 34C9                       		move.w	a1,(a2)+
0001A2B4 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A2B8 2348 0034                  		move.l	a0,$34(a1)
0001A2BC 1342 0028                  		move.b	d2,$28(a1)
0001A2C0 5442                       		addq.w	#2,d2
0001A2C2 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A2C6                            
0001A2C6                            loc_19E5A:
0001A2C6 317C 0000 0034             		move.w	#0,$34(a0)
0001A2CC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A2D2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A2D8                            
0001A2D8                            Obj85_Eggman:				; XREF: Obj85_Index
0001A2D8 7000                       		moveq	#0,d0
0001A2DA 1028 0034                  		move.b	$34(a0),d0
0001A2DE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A2E2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A2E6 4EF9 0000 DA42             		jmp	DisplaySprite
0001A2EC                            ; ===========================================================================
0001A2EC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A2F0 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A2F4 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A2F8 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A2FC                            ; ===========================================================================
0001A2FC                            
0001A2FC                            loc_19E90:				; XREF: off_19E80
0001A2FC 4AB8 F680                  		tst.l	($FFFFF680).w
0001A300 6600                       		bne.s	loc_19EA2
0001A302 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A308 6500                       		bcs.s	loc_19EA2
0001A30A 5428 0034                  		addq.b	#2,$34(a0)
0001A30E                            
0001A30E                            loc_19EA2:
0001A30E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A312 4E75                       		rts	
0001A314                            ; ===========================================================================
0001A314                            
0001A314                            loc_19EA8:				; XREF: off_19E80
0001A314 4A68 0030                  		tst.w	$30(a0)
0001A318 6A00                       		bpl.s	loc_19F10
0001A31A 4268 0030                  		clr.w	$30(a0)
0001A31E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A324 0240 000C                  		andi.w	#$C,d0
0001A328 3200                       		move.w	d0,d1
0001A32A 5441                       		addq.w	#2,d1
0001A32C 4A80                       		tst.l	d0
0001A32E 6A00                       		bpl.s	loc_19EC6
0001A330 C141                       		exg	d1,d0
0001A332                            
0001A332                            loc_19EC6:
0001A332 43FA 0000                  		lea	word_19FD6(pc),a1
0001A336 3031 0000                  		move.w	(a1,d0.w),d0
0001A33A 3231 1000                  		move.w	(a1,d1.w),d1
0001A33E 3140 0030                  		move.w	d0,$30(a0)
0001A342 74FF                       		moveq	#-1,d2
0001A344 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A348 2242                       		movea.l	d2,a1
0001A34A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A350 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A356 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A35A 2242                       		movea.l	d2,a1
0001A35C 137C 0001 0029             		move.b	#1,$29(a1)
0001A362 337C 0000 0030             		move.w	#0,$30(a1)
0001A368 317C 0001 0032             		move.w	#1,$32(a0)
0001A36E 4228 0035                  		clr.b	$35(a0)
0001A372 303C 00B7                  		move.w	#$B7,d0
0001A376 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A37C                            
0001A37C                            loc_19F10:
0001A37C 4A68 0032                  		tst.w	$32(a0)
0001A380 6B00 0000                  		bmi.w	loc_19FA6
0001A384 08A8 0000 0022             		bclr	#0,$22(a0)
0001A38A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A38E 9068 0008                  		sub.w	8(a0),d0
0001A392 6500                       		bcs.s	loc_19F2E
0001A394 08E8 0000 0022             		bset	#0,$22(a0)
0001A39A                            
0001A39A                            loc_19F2E:
0001A39A 323C 002B                  		move.w	#$2B,d1
0001A39E 343C 0014                  		move.w	#$14,d2
0001A3A2 363C 0014                  		move.w	#$14,d3
0001A3A6 3828 0008                  		move.w	8(a0),d4
0001A3AA 4EB9 0000 FE12             		jsr	SolidObject
0001A3B0 4A44                       		tst.w	d4
0001A3B2 6E00                       		bgt.s	loc_19F50
0001A3B4                            
0001A3B4                            loc_19F48:
0001A3B4 4A28 0035                  		tst.b	$35(a0)
0001A3B8 6600                       		bne.s	loc_19F88
0001A3BA 6000                       		bra.s	loc_19F96
0001A3BC                            ; ===========================================================================
0001A3BC                            
0001A3BC                            loc_19F50:
0001A3BC 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A3C0 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A3C6 66EC                       		bne.s	loc_19F48
0001A3C8 303C 0300                  		move.w	#$300,d0
0001A3CC 0828 0000 0022             		btst	#0,$22(a0)
0001A3D2 6600                       		bne.s	loc_19F6A
0001A3D4 4440                       		neg.w	d0
0001A3D6                            
0001A3D6                            loc_19F6A:
0001A3D6 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A3DA 4A28 0035                  		tst.b	$35(a0)
0001A3DE 6600                       		bne.s	loc_19F88
0001A3E0 5328 0021                  		subq.b	#1,$21(a0)
0001A3E4 117C 0064 0035             		move.b	#$64,$35(a0)
0001A3EA 303C 00AC                  		move.w	#$AC,d0
0001A3EE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3F4                            
0001A3F4                            loc_19F88:
0001A3F4 5328 0035                  		subq.b	#1,$35(a0)
0001A3F8 6700                       		beq.s	loc_19F96
0001A3FA 117C 0003 001C             		move.b	#3,$1C(a0)
0001A400 6000                       		bra.s	loc_19F9C
0001A402                            ; ===========================================================================
0001A402                            
0001A402                            loc_19F96:
0001A402 117C 0001 001C             		move.b	#1,$1C(a0)
0001A408                            
0001A408                            loc_19F9C:
0001A408 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A40C 4EF9 0000 AAF4             		jmp	AnimateSprite
0001A412                            ; ===========================================================================
0001A412                            
0001A412                            loc_19FA6:
0001A412 4A28 0021                  		tst.b	$21(a0)
0001A416 6700                       		beq.s	loc_19FBC
0001A418 5428 0034                  		addq.b	#2,$34(a0)
0001A41C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A422 4268 0032                  		clr.w	$32(a0)
0001A426 4E75                       		rts	
0001A428                            ; ===========================================================================
0001A428                            
0001A428                            loc_19FBC:
0001A428 117C 0006 0034             		move.b	#6,$34(a0)
0001A42E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A434 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A43A 117C 0014 0016             		move.b	#$14,$16(a0)
0001A440 4E75                       		rts	
0001A442                            ; ===========================================================================
0001A442 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A452                            ; ===========================================================================
0001A452                            
0001A452                            loc_19FE6:				; XREF: off_19E80
0001A452 70FF                       		moveq	#-1,d0
0001A454 3028 0036                  		move.w	$36(a0),d0
0001A458 2240                       		movea.l	d0,a1
0001A45A 4A68 0030                  		tst.w	$30(a0)
0001A45E 6A00                       		bpl.s	loc_1A000
0001A460 4268 0030                  		clr.w	$30(a0)
0001A464 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A46A 6100                       		bsr.s	loc_1A020
0001A46C                            
0001A46C                            loc_1A000:
0001A46C 700F                       		moveq	#$F,d0
0001A46E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A472 6600                       		bne.s	loc_1A00A
0001A474 6100                       		bsr.s	loc_1A020
0001A476                            
0001A476                            loc_1A00A:
0001A476 4A68 0032                  		tst.w	$32(a0)
0001A47A 6700                       		beq.s	locret_1A01E
0001A47C 5528 0034                  		subq.b	#2,$34(a0)
0001A480 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A486 4268 0032                  		clr.w	$32(a0)
0001A48A                            
0001A48A                            locret_1A01E:
0001A48A 4E75                       		rts	
0001A48C                            ; ===========================================================================
0001A48C                            
0001A48C                            loc_1A020:
0001A48C 303C 00B1                  		move.w	#$B1,d0
0001A490 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A496                            ; ===========================================================================
0001A496                            
0001A496                            loc_1A02A:				; XREF: off_19E80
0001A496 117C 0030 0017             		move.b	#$30,$17(a0)
0001A49C 08E8 0000 0022             		bset	#0,$22(a0)
0001A4A2 4EB9 0000 DA1C             		jsr	SpeedToPos
0001A4A8 117C 0006 001A             		move.b	#6,$1A(a0)
0001A4AE 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A4B4 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A4BA 6500                       		bcs.s	loc_1A070
0001A4BC 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A4C2 5428 0034                  		addq.b	#2,$34(a0)
0001A4C6 117C 0020 0017             		move.b	#$20,$17(a0)
0001A4CC 317C 0100 0010             		move.w	#$100,$10(a0)
0001A4D2 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A4D8 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A4DC                            
0001A4DC                            loc_1A070:
0001A4DC 6000 0000                  		bra.w	loc_1A166
0001A4E0                            ; ===========================================================================
0001A4E0                            
0001A4E0                            loc_1A074:				; XREF: off_19E80
0001A4E0 08E8 0000 0022             		bset	#0,$22(a0)
0001A4E6 117C 0004 001C             		move.b	#4,$1C(a0)
0001A4EC 4EB9 0000 DA1C             		jsr	SpeedToPos
0001A4F2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A4F8 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A4FE 6500                       		bcs.s	loc_1A09A
0001A500 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A506                            
0001A506                            loc_1A09A:
0001A506 317C 0400 0010             		move.w	#$400,$10(a0)
0001A50C 3028 0008                  		move.w	8(a0),d0
0001A510 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A514 6A00                       		bpl.s	loc_1A0B4
0001A516 317C 0500 0010             		move.w	#$500,$10(a0)
0001A51C 6000 0000                  		bra.w	loc_1A0F2
0001A520                            ; ===========================================================================
0001A520                            
0001A520                            loc_1A0B4:
0001A520 0440 0070                  		subi.w	#$70,d0
0001A524 6500                       		bcs.s	loc_1A0F2
0001A526 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A52C 5140                       		subq.w	#8,d0
0001A52E 6500                       		bcs.s	loc_1A0F2
0001A530 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A536 5140                       		subq.w	#8,d0
0001A538 6500                       		bcs.s	loc_1A0F2
0001A53A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A540 5140                       		subq.w	#8,d0
0001A542 6500                       		bcs.s	loc_1A0F2
0001A544 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A54A 5140                       		subq.w	#8,d0
0001A54C 6500                       		bcs.s	loc_1A0F2
0001A54E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A554 0440 0038                  		subi.w	#$38,d0
0001A558 6500                       		bcs.s	loc_1A0F2
0001A55A 4268 0010                  		clr.w	$10(a0)
0001A55E                            
0001A55E                            loc_1A0F2:
0001A55E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A564 6500                       		bcs.s	loc_1A110
0001A566 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A56C 317C 0240 0010             		move.w	#$240,$10(a0)
0001A572 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A578 5428 0034                  		addq.b	#2,$34(a0)
0001A57C                            
0001A57C                            loc_1A110:
0001A57C 6000                       		bra.s	loc_1A15C
0001A57E                            ; ===========================================================================
0001A57E                            
0001A57E                            loc_1A112:				; XREF: off_19E80
0001A57E 4EB9 0000 DA1C             		jsr	SpeedToPos
0001A584 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A58A 6500                       		bcs.s	loc_1A124
0001A58C 4268 0010                  		clr.w	$10(a0)
0001A590                            
0001A590                            loc_1A124:
0001A590 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A596 4A68 0012                  		tst.w	$12(a0)
0001A59A 6B00                       		bmi.s	loc_1A142
0001A59C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A5A2 6500                       		bcs.s	loc_1A142
0001A5A4 317C 0592 000C             		move.w	#$592,$C(a0)
0001A5AA 4268 0012                  		clr.w	$12(a0)
0001A5AE                            
0001A5AE                            loc_1A142:
0001A5AE 3028 0010                  		move.w	$10(a0),d0
0001A5B2 8068 0012                  		or.w	$12(a0),d0
0001A5B6 6600                       		bne.s	loc_1A15C
0001A5B8 5428 0034                  		addq.b	#2,$34(a0)
0001A5BC 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A5C2 117C 0001 0021             		move.b	#1,$21(a0)
0001A5C8                            
0001A5C8                            loc_1A15C:
0001A5C8 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A5CC 4EB9 0000 AAF4             		jsr	AnimateSprite
0001A5D2                            
0001A5D2                            loc_1A166:
0001A5D2 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A5D8 6C00                       		bge.s	loc_1A172
0001A5DA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A5DE                            
0001A5DE                            loc_1A172:
0001A5DE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A5E4 6C00                       		bge.s	locret_1A190
0001A5E6 323C 001B                  		move.w	#$1B,d1
0001A5EA 343C 0070                  		move.w	#$70,d2
0001A5EE 363C 0071                  		move.w	#$71,d3
0001A5F2 3828 0008                  		move.w	8(a0),d4
0001A5F6 4EF9 0000 FE12             		jmp	SolidObject
0001A5FC                            ; ===========================================================================
0001A5FC                            
0001A5FC                            locret_1A190:
0001A5FC 4E75                       		rts	
0001A5FE                            ; ===========================================================================
0001A5FE                            
0001A5FE                            loc_1A192:				; XREF: off_19E80
0001A5FE 217C 0001 8198 0004        		move.l	#Map_Eggman,4(a0)
0001A606 317C 0400 0002             		move.w	#$400,2(a0)
0001A60C 117C 0000 001C             		move.b	#0,$1C(a0)
0001A612 08E8 0000 0022             		bset	#0,$22(a0)
0001A618 4EB9 0000 DA1C             		jsr	SpeedToPos
0001A61E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A624 6400                       		bcc.s	loc_1A1D0
0001A626 317C 0180 0010             		move.w	#$180,$10(a0)
0001A62C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A632 117C 000F 0020             		move.b	#$F,$20(a0)
0001A638 5428 0034                  		addq.b	#2,$34(a0)
0001A63C                            
0001A63C                            loc_1A1D0:
0001A63C 6000 FF8A                  		bra.w	loc_1A15C
0001A640                            ; ===========================================================================
0001A640                            
0001A640                            loc_1A1D4:				; XREF: off_19E80
0001A640 08E8 0000 0022             		bset	#0,$22(a0)
0001A646 4EB9 0000 DA1C             		jsr	SpeedToPos
0001A64C 4A68 0030                  		tst.w	$30(a0)
0001A650 6600                       		bne.s	loc_1A1FC
0001A652 4A28 0020                  		tst.b	$20(a0)
0001A656 6600                       		bne.s	loc_1A216
0001A658 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A65E 303C 00AC                  		move.w	#$AC,d0
0001A662 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A668                            
0001A668                            loc_1A1FC:
0001A668 5368 0030                  		subq.w	#1,$30(a0)
0001A66C 6600                       		bne.s	loc_1A216
0001A66E 4A28 0022                  		tst.b	$22(a0)
0001A672 6A00                       		bpl.s	loc_1A210
0001A674 317C 0060 0012             		move.w	#$60,$12(a0)
0001A67A 6000                       		bra.s	loc_1A216
0001A67C                            ; ===========================================================================
0001A67C                            
0001A67C                            loc_1A210:
0001A67C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A682                            
0001A682                            loc_1A216:
0001A682 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A688 6D00                       		blt.s	loc_1A23A
0001A68A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A690 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A696 4278 D014                  		clr.w	($FFFFD014).w
0001A69A 4A68 0012                  		tst.w	$12(a0)
0001A69E 6A00                       		bpl.s	loc_1A248
0001A6A0 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A6A6                            
0001A6A6                            loc_1A23A:
0001A6A6 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A6AC 6D00                       		blt.s	loc_1A248
0001A6AE 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A6B4                            
0001A6B4                            loc_1A248:
0001A6B4 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A6BA 6500                       		bcs.s	loc_1A260
0001A6BC 4A28 0001                  		tst.b	1(a0)
0001A6C0 6B00                       		bmi.s	loc_1A260
0001A6C2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A6C8 6000 FAF4                  		bra.w	Obj85_Delete
0001A6CC                            ; ===========================================================================
0001A6CC                            
0001A6CC                            loc_1A260:
0001A6CC 6000 FEFA                  		bra.w	loc_1A15C
0001A6D0                            ; ===========================================================================
0001A6D0                            
0001A6D0                            loc_1A264:				; XREF: Obj85_Index
0001A6D0 2268 0034                  		movea.l	$34(a0),a1
0001A6D4 1011                       		move.b	(a1),d0
0001A6D6 B010                       		cmp.b	(a0),d0
0001A6D8 6600 FAE4                  		bne.w	Obj85_Delete
0001A6DC 117C 0007 001C             		move.b	#7,$1C(a0)
0001A6E2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A6E8 6C00                       		bge.s	loc_1A280
0001A6EA 6000                       		bra.s	loc_1A2A6
0001A6EC                            ; ===========================================================================
0001A6EC                            
0001A6EC                            loc_1A280:
0001A6EC 4A69 0010                  		tst.w	$10(a1)
0001A6F0 6700                       		beq.s	loc_1A28C
0001A6F2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A6F8                            
0001A6F8                            loc_1A28C:
0001A6F8 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A6FC 4EB9 0000 AAF4             		jsr	AnimateSprite
0001A702                            
0001A702                            loc_1A296:
0001A702 2268 0034                  		movea.l	$34(a0),a1
0001A706 3169 0008 0008             		move.w	8(a1),8(a0)
0001A70C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A712                            
0001A712                            loc_1A2A6:
0001A712 2268 0034                  		movea.l	$34(a0),a1
0001A716 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A71C 7003                       		moveq	#3,d0
0001A71E C028 0022                  		and.b	$22(a0),d0
0001A722 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A728 8128 0001                  		or.b	d0,1(a0)
0001A72C 4EF9 0000 DA42             		jmp	DisplaySprite
0001A732                            ; ===========================================================================
0001A732                            
0001A732                            loc_1A2C6:				; XREF: Obj85_Index
0001A732 2268 0034                  		movea.l	$34(a0),a1
0001A736 1011                       		move.b	(a1),d0
0001A738 B010                       		cmp.b	(a0),d0
0001A73A 6600 FA82                  		bne.w	Obj85_Delete
0001A73E 0CA9 0001 8198 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A746 6700                       		beq.s	loc_1A2E4
0001A748 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A74E 60C2                       		bra.s	loc_1A2A6
0001A750                            ; ===========================================================================
0001A750                            
0001A750                            loc_1A2E4:
0001A750 117C 0001 001C             		move.b	#1,$1C(a0)
0001A756 4A29 0021                  		tst.b	$21(a1)
0001A75A 6F00                       		ble.s	loc_1A312
0001A75C 117C 0006 001C             		move.b	#6,$1C(a0)
0001A762 217C 0001 8198 0004        		move.l	#Map_Eggman,4(a0)
0001A76A 317C 0400 0002             		move.w	#$400,2(a0)
0001A770 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A774 4EB9 0000 AAF4             		jsr	AnimateSprite
0001A77A 6000 FF86                  		bra.w	loc_1A296
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            loc_1A312:
0001A77E 4A28 0001                  		tst.b	1(a0)
0001A782 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A786 6100 D56E                  		bsr.w	BossDefeated
0001A78A 117C 0002 0018             		move.b	#2,$18(a0)
0001A790 117C 0000 001C             		move.b	#0,$1C(a0)
0001A796 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A79E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A7A4 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A7A8 4EB9 0000 AAF4             		jsr	AnimateSprite
0001A7AE 6000 FF52                  		bra.w	loc_1A296
0001A7B2                            ; ===========================================================================
0001A7B2                            
0001A7B2                            loc_1A346:				; XREF: Obj85_Index
0001A7B2 08E8 0000 0022             		bset	#0,$22(a0)
0001A7B8 2268 0034                  		movea.l	$34(a0),a1
0001A7BC 0CA9 0001 8198 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A7C4 6700                       		beq.s	loc_1A35E
0001A7C6 6000 FF4A                  		bra.w	loc_1A2A6
0001A7CA                            ; ===========================================================================
0001A7CA                            
0001A7CA                            loc_1A35E:
0001A7CA 3169 0008 0008             		move.w	8(a1),8(a0)
0001A7D0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A7D6 4A28 001E                  		tst.b	$1E(a0)
0001A7DA 6600                       		bne.s	loc_1A376
0001A7DC 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A7E2                            
0001A7E2                            loc_1A376:
0001A7E2 5328 001E                  		subq.b	#1,$1E(a0)
0001A7E6 6E00                       		bgt.s	loc_1A38A
0001A7E8 5228 001A                  		addq.b	#1,$1A(a0)
0001A7EC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A7F2 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A7F6                            
0001A7F6                            loc_1A38A:
0001A7F6 6000 FF0A                  		bra.w	loc_1A296
0001A7FA                            ; ===========================================================================
0001A7FA                            
0001A7FA                            loc_1A38E:				; XREF: Obj85_Index
0001A7FA 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A800 3038 D008                  		move.w	($FFFFD008).w,d0
0001A804 9068 0008                  		sub.w	8(a0),d0
0001A808 6500                       		bcs.s	loc_1A3A6
0001A80A 4A28 0001                  		tst.b	1(a0)
0001A80E 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A812                            
0001A812                            loc_1A3A6:
0001A812 4EF9 0000 DA42             		jmp	DisplaySprite
0001A818                            ; ===========================================================================
0001A818                            
0001A818                            loc_1A3AC:				; XREF: Obj85_Index
0001A818 117C 0000 001A             		move.b	#0,$1A(a0)
0001A81E 08E8 0000 0022             		bset	#0,$22(a0)
0001A824 2268 0034                  		movea.l	$34(a0),a1
0001A828 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A82E 6600                       		bne.s	loc_1A3D0
0001A830 0CA9 0001 8198 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A838 6700 F984                  		beq.w	Obj85_Delete
0001A83C                            
0001A83C                            loc_1A3D0:
0001A83C 6000 FED4                  		bra.w	loc_1A2A6
0001A840                            ; ===========================================================================
0001A840                            Ani_obj85:
0001A840                            	include "_anim\obj85.asm"
0001A840                            ; ---------------------------------------------------------------------------
0001A840                            ; Animation script - Eggman (FZ)
0001A840                            ; ---------------------------------------------------------------------------
0001A840 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A842 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A846                            		even
0001A846                            		even
0001A846                            
0001A846                            Map_Eggman2:
0001A846                            	include "_maps\Eggman2.asm"
0001A846                            ; ---------------------------------------------------------------------------
0001A846                            ; Sprite mappings - Eggman (FZ)
0001A846                            ; ---------------------------------------------------------------------------
0001A846 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A848 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A84A 06                         byte_1A3DE:	dc.b 6
0001A84B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A850 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A855 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A85A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A85F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A864 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A869 06                         byte_1A3FD:	dc.b 6
0001A86A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A86F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A874 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A879 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A87E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A883 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A888                            		even
0001A888                            		even
0001A888                            
0001A888                            Map_FZBoss:
0001A888                            	include "_maps\FZ boss.asm"
0001A888                            ; ---------------------------------------------------------------------------
0001A888                            ; Sprite mappings - boss (FZ)
0001A888                            ; ---------------------------------------------------------------------------
0001A888 0000                       		dc.w byte_1A422-Map_FZBoss
0001A88A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A88C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A88E 02                         byte_1A422:	dc.b 2
0001A88F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A894 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A899 03                         byte_1A42D:	dc.b 3
0001A89A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A89F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A8A4 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A8A9 02                         byte_1A43D:	dc.b 2
0001A8AA 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A8AF 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A8B4                            		even
0001A8B4                            		even
0001A8B4                            
0001A8B4                            ; ===========================================================================
0001A8B4                            
0001A8B4                            Obj84_Delete:
0001A8B4 4EF9 0000 DA7E             		jmp	DeleteObject
0001A8BA                            ; ===========================================================================
0001A8BA                            ; ---------------------------------------------------------------------------
0001A8BA                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A8BA                            ; ---------------------------------------------------------------------------
0001A8BA                            
0001A8BA                            Obj84:					; XREF: Obj_Index
0001A8BA 7000                       		moveq	#0,d0
0001A8BC 1028 0024                  		move.b	$24(a0),d0
0001A8C0 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A8C4 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A8C8                            ; ===========================================================================
0001A8C8 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A8CA 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A8CC 0000                       		dc.w loc_1A57E-Obj84_Index
0001A8CE                            
0001A8CE 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A8D2 2550 0620                  		dc.w $2550, $620
0001A8D6 2490 04C0                  		dc.w $2490, $4C0
0001A8DA 2510 04C0                  		dc.w $2510, $4C0
0001A8DE                            ; ===========================================================================
0001A8DE                            
0001A8DE                            Obj84_Main:				; XREF: Obj84_Index
0001A8DE 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A8E2 7000                       		moveq	#0,d0
0001A8E4 1028 0028                  		move.b	$28(a0),d0
0001A8E8 D040                       		add.w	d0,d0
0001A8EA D2C0                       		adda.w	d0,a1
0001A8EC 117C 0004 0001             		move.b	#4,1(a0)
0001A8F2 08E8 0007 0001             		bset	#7,1(a0)
0001A8F8 08E8 0004 0001             		bset	#4,1(a0)
0001A8FE 317C 0300 0002             		move.w	#$300,2(a0)
0001A904 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A90C 3159 0008                  		move.w	(a1)+,8(a0)
0001A910 3151 000C                  		move.w	(a1),$C(a0)
0001A914 3159 0038                  		move.w	(a1)+,$38(a0)
0001A918 117C 0020 0016             		move.b	#$20,$16(a0)
0001A91E 117C 0060 0017             		move.b	#$60,$17(a0)
0001A924 117C 0020 0019             		move.b	#$20,$19(a0)
0001A92A 117C 0060 0016             		move.b	#$60,$16(a0)
0001A930 117C 0003 0018             		move.b	#3,$18(a0)
0001A936 5428 0024                  		addq.b	#2,$24(a0)
0001A93A                            
0001A93A                            loc_1A4CE:				; XREF: Obj84_Index
0001A93A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A940 6F00                       		ble.s	loc_1A4DC
0001A942 08E8 0001 0001             		bset	#1,1(a0)
0001A948                            
0001A948                            loc_1A4DC:
0001A948 42A8 003C                  		clr.l	$3C(a0)
0001A94C 4A28 0029                  		tst.b	$29(a0)
0001A950 6700                       		beq.s	loc_1A4EA
0001A952 5428 0024                  		addq.b	#2,$24(a0)
0001A956                            
0001A956                            loc_1A4EA:
0001A956 2028 003C                  		move.l	$3C(a0),d0
0001A95A 2228 0038                  		move.l	$38(a0),d1
0001A95E D280                       		add.l	d0,d1
0001A960 4841                       		swap	d1
0001A962 3141 000C                  		move.w	d1,$C(a0)
0001A966 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A96C 6600                       		bne.s	loc_1A524
0001A96E 4A68 0030                  		tst.w	$30(a0)
0001A972 6A00                       		bpl.s	loc_1A524
0001A974 70F6                       		moveq	#-$A,d0
0001A976 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A97C 6F00                       		ble.s	loc_1A514
0001A97E 700E                       		moveq	#$E,d0
0001A980                            
0001A980                            loc_1A514:
0001A980 D240                       		add.w	d0,d1
0001A982 2268 0034                  		movea.l	$34(a0),a1
0001A986 3341 000C                  		move.w	d1,$C(a1)
0001A98A 3368 0008 0008             		move.w	8(a0),8(a1)
0001A990                            
0001A990                            loc_1A524:
0001A990 323C 002B                  		move.w	#$2B,d1
0001A994 343C 0060                  		move.w	#$60,d2
0001A998 363C 0061                  		move.w	#$61,d3
0001A99C 3828 0008                  		move.w	8(a0),d4
0001A9A0 4EB9 0000 FE12             		jsr	SolidObject
0001A9A6 7000                       		moveq	#0,d0
0001A9A8 3228 003C                  		move.w	$3C(a0),d1
0001A9AC 6A00                       		bpl.s	loc_1A550
0001A9AE 4441                       		neg.w	d1
0001A9B0 5141                       		subq.w	#8,d1
0001A9B2 6500                       		bcs.s	loc_1A55C
0001A9B4 5200                       		addq.b	#1,d0
0001A9B6 E841                       		asr.w	#4,d1
0001A9B8 D041                       		add.w	d1,d0
0001A9BA 6000                       		bra.s	loc_1A55C
0001A9BC                            ; ===========================================================================
0001A9BC                            
0001A9BC                            loc_1A550:
0001A9BC 0441 0027                  		subi.w	#$27,d1
0001A9C0 6500                       		bcs.s	loc_1A55C
0001A9C2 5200                       		addq.b	#1,d0
0001A9C4 E841                       		asr.w	#4,d1
0001A9C6 D041                       		add.w	d1,d0
0001A9C8                            
0001A9C8                            loc_1A55C:
0001A9C8 1140 001A                  		move.b	d0,$1A(a0)
0001A9CC 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9D0 9068 0008                  		sub.w	8(a0),d0
0001A9D4 6B00                       		bmi.s	loc_1A578
0001A9D6 0440 0140                  		subi.w	#$140,d0
0001A9DA 6B00                       		bmi.s	loc_1A578
0001A9DC 4A28 0001                  		tst.b	1(a0)
0001A9E0 6A00 FED2                  		bpl.w	Obj84_Delete
0001A9E4                            
0001A9E4                            loc_1A578:
0001A9E4 4EF9 0000 DA42             		jmp	DisplaySprite
0001A9EA                            ; ===========================================================================
0001A9EA                            
0001A9EA                            loc_1A57E:				; XREF: Obj84_Index
0001A9EA 7000                       		moveq	#0,d0
0001A9EC 1028 0028                  		move.b	$28(a0),d0
0001A9F0 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A9F4 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A9F8 6000 FF5C                  		bra.w	loc_1A4EA
0001A9FC                            ; ===========================================================================
0001A9FC 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A9FE 0000                       		dc.w loc_1A598-off_1A590
0001AA00 0000                       		dc.w loc_1A604-off_1A590
0001AA02 0000                       		dc.w loc_1A604-off_1A590
0001AA04                            ; ===========================================================================
0001AA04                            
0001AA04                            loc_1A598:				; XREF: off_1A590
0001AA04 4A28 0029                  		tst.b	$29(a0)
0001AA08 6600                       		bne.s	loc_1A5D4
0001AA0A 2268 0034                  		movea.l	$34(a0),a1
0001AA0E 4A29 0021                  		tst.b	$21(a1)
0001AA12 6600                       		bne.s	loc_1A5B4
0001AA14 6100 D2E0                  		bsr.w	BossDefeated
0001AA18 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AA20                            
0001AA20                            loc_1A5B4:
0001AA20 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AA28 6400                       		bcc.s	locret_1A602
0001AA2A 42A8 003C                  		clr.l	$3C(a0)
0001AA2E 2268 0034                  		movea.l	$34(a0),a1
0001AA32 5369 0032                  		subq.w	#1,$32(a1)
0001AA36 4269 0030                  		clr.w	$30(a1)
0001AA3A 5528 0024                  		subq.b	#2,$24(a0)
0001AA3E 4E75                       		rts	
0001AA40                            ; ===========================================================================
0001AA40                            
0001AA40                            loc_1A5D4:
0001AA40 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AA46 6C00                       		bge.s	loc_1A5E4
0001AA48 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AA50                            
0001AA50                            loc_1A5E4:
0001AA50 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AA58 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AA5E 6E00                       		bgt.s	locret_1A602
0001AA60 4268 003E                  		clr.w	$3E(a0)
0001AA64 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AA6A 4228 0029                  		clr.b	$29(a0)
0001AA6E                            
0001AA6E                            locret_1A602:
0001AA6E 4E75                       		rts	
0001AA70                            ; ===========================================================================
0001AA70                            
0001AA70                            loc_1A604:				; XREF: off_1A590
0001AA70 08E8 0001 0001             		bset	#1,1(a0)
0001AA76 4A28 0029                  		tst.b	$29(a0)
0001AA7A 6600                       		bne.s	loc_1A646
0001AA7C 2268 0034                  		movea.l	$34(a0),a1
0001AA80 4A29 0021                  		tst.b	$21(a1)
0001AA84 6600                       		bne.s	loc_1A626
0001AA86 6100 D26E                  		bsr.w	BossDefeated
0001AA8A 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AA92                            
0001AA92                            loc_1A626:
0001AA92 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AA9A 6400                       		bcc.s	locret_1A674
0001AA9C 42A8 003C                  		clr.l	$3C(a0)
0001AAA0 2268 0034                  		movea.l	$34(a0),a1
0001AAA4 5369 0032                  		subq.w	#1,$32(a1)
0001AAA8 4269 0030                  		clr.w	$30(a1)
0001AAAC 5528 0024                  		subq.b	#2,$24(a0)
0001AAB0 4E75                       		rts	
0001AAB2                            ; ===========================================================================
0001AAB2                            
0001AAB2                            loc_1A646:
0001AAB2 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AAB8 6D00                       		blt.s	loc_1A656
0001AABA 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AAC2                            
0001AAC2                            loc_1A656:
0001AAC2 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AACA 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AAD0 6D00                       		blt.s	locret_1A674
0001AAD2 4268 003E                  		clr.w	$3E(a0)
0001AAD6 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AADC 4228 0029                  		clr.b	$29(a0)
0001AAE0                            
0001AAE0                            locret_1A674:
0001AAE0 4E75                       		rts	
0001AAE2                            ; ===========================================================================
0001AAE2                            ; ---------------------------------------------------------------------------
0001AAE2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AAE2                            ; ---------------------------------------------------------------------------
0001AAE2                            Map_obj84:
0001AAE2                            	include "_maps\obj84.asm"
0001AAE2                            ; ---------------------------------------------------------------------------
0001AAE2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AAE2                            ; ---------------------------------------------------------------------------
0001AAE2 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AAE6 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AAEA 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AAEE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AAF2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AAF6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AAFA 06                         byte_1A68E:	dc.b 6
0001AAFB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB00 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB05 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB0A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB0F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB14 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB19 08                         byte_1A6AD:	dc.b 8
0001AB1A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB1F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB24 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB29 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB2E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB33 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB38 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB3D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB42 0A                         byte_1A6D6:	dc.b $A
0001AB43 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB48 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB4D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB52 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB57 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB5C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB61 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB66 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB6B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB70 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB75 0C                         byte_1A709:	dc.b $C
0001AB76 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB7B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB80 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB85 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB8A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB8F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB94 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB99 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB9E F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ABA3 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ABA8 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ABAD 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ABB2 0D                         byte_1A746:	dc.b $D
0001ABB3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ABB8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ABBD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ABC2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ABC7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ABCC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ABD1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ABD6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ABDB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ABE0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ABE5 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ABEA 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ABEF 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ABF4 0E                         byte_1A788:	dc.b $E
0001ABF5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ABFA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ABFF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC04 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC09 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC0E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC13 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AC18 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AC1D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AC22 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AC27 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AC2C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AC31 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AC36 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AC3B 02                         byte_1A7CF:	dc.b 2
0001AC3C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AC41 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AC46                            		even
0001AC46                            		even
0001AC46                            
0001AC46                            ; ===========================================================================
0001AC46                            ; ---------------------------------------------------------------------------
0001AC46                            ; Object 86 - energy balls (FZ)
0001AC46                            ; ---------------------------------------------------------------------------
0001AC46                            
0001AC46                            Obj86:					; XREF: Obj_Index
0001AC46 7000                       		moveq	#0,d0
0001AC48 1028 0024                  		move.b	$24(a0),d0
0001AC4C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AC50 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AC54                            ; ===========================================================================
0001AC54 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AC56 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AC58 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AC5A 0000                       		dc.w loc_1A962-Obj86_Index
0001AC5C 0000                       		dc.w loc_1A982-Obj86_Index
0001AC5E                            ; ===========================================================================
0001AC5E                            
0001AC5E                            Obj86_Main:				; XREF: Obj86_Index
0001AC5E 317C 2588 0008             		move.w	#$2588,8(a0)
0001AC64 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AC6A 317C 0300 0002             		move.w	#$300,2(a0)
0001AC70 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AC78 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC7E 117C 0003 0018             		move.b	#3,$18(a0)
0001AC84 117C 0008 0017             		move.b	#8,$17(a0)
0001AC8A 117C 0008 0016             		move.b	#8,$16(a0)
0001AC90 117C 0004 0001             		move.b	#4,1(a0)
0001AC96 08E8 0007 0001             		bset	#7,1(a0)
0001AC9C 5428 0024                  		addq.b	#2,$24(a0)
0001ACA0                            
0001ACA0                            Obj86_Generator:			; XREF: Obj86_Index
0001ACA0 2268 0034                  		movea.l	$34(a0),a1
0001ACA4 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001ACAA 6600                       		bne.s	loc_1A850
0001ACAC 10BC 003F                  		move.b	#$3F,(a0)
0001ACB0 117C 0000 0024             		move.b	#0,$24(a0)
0001ACB6 4EF9 0000 DA42             		jmp	DisplaySprite
0001ACBC                            ; ===========================================================================
0001ACBC                            
0001ACBC                            loc_1A850:
0001ACBC 117C 0000 001C             		move.b	#0,$1C(a0)
0001ACC2 4A28 0029                  		tst.b	$29(a0)
0001ACC6 6700                       		beq.s	loc_1A86C
0001ACC8 5428 0024                  		addq.b	#2,$24(a0)
0001ACCC 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACD2 117C 003E 0028             		move.b	#$3E,$28(a0)
0001ACD8                            
0001ACD8                            loc_1A86C:
0001ACD8 323C 0013                  		move.w	#$13,d1
0001ACDC 343C 0008                  		move.w	#8,d2
0001ACE0 363C 0011                  		move.w	#$11,d3
0001ACE4 3828 0008                  		move.w	8(a0),d4
0001ACE8 4EB9 0000 FE12             		jsr	SolidObject
0001ACEE 3038 D008                  		move.w	($FFFFD008).w,d0
0001ACF2 9068 0008                  		sub.w	8(a0),d0
0001ACF6 6B00                       		bmi.s	loc_1A89A
0001ACF8 0440 0140                  		subi.w	#$140,d0
0001ACFC 6B00                       		bmi.s	loc_1A89A
0001ACFE 4A28 0001                  		tst.b	1(a0)
0001AD02 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AD06                            
0001AD06                            loc_1A89A:
0001AD06 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AD0A 4EB9 0000 AAF4             		jsr	AnimateSprite
0001AD10 4EF9 0000 DA42             		jmp	DisplaySprite
0001AD16                            ; ===========================================================================
0001AD16                            
0001AD16                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AD16 4A28 0029                  		tst.b	$29(a0)
0001AD1A 6700 0000                  		beq.w	loc_1A954
0001AD1E 4228 0029                  		clr.b	$29(a0)
0001AD22 D068 0030                  		add.w	$30(a0),d0
0001AD26 0240 001E                  		andi.w	#$1E,d0
0001AD2A D4C0                       		adda.w	d0,a2
0001AD2C 5868 0030                  		addq.w	#4,$30(a0)
0001AD30 4268 0032                  		clr.w	$32(a0)
0001AD34 7403                       		moveq	#3,d2
0001AD36                            
0001AD36                            Obj86_Loop:
0001AD36 4EB9 0000 DEDE             		jsr	SingleObjLoad2
0001AD3C 6600 0000                  		bne.w	loc_1A954
0001AD40 12BC 0086                  		move.b	#$86,(a1)
0001AD44 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD4A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AD50 137C 0008 0024             		move.b	#8,$24(a1)
0001AD56 337C 2300 0002             		move.w	#$2300,2(a1)
0001AD5C 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AD64 137C 000C 0016             		move.b	#$C,$16(a1)
0001AD6A 137C 000C 0017             		move.b	#$C,$17(a1)
0001AD70 137C 0000 0020             		move.b	#0,$20(a1)
0001AD76 137C 0003 0018             		move.b	#3,$18(a1)
0001AD7C 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AD82 137C 0004 0001             		move.b	#4,1(a1)
0001AD88 08E9 0007 0001             		bset	#7,1(a1)
0001AD8E 2348 0034                  		move.l	a0,$34(a1)
0001AD92 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AD98 3228 0032                  		move.w	$32(a0),d1
0001AD9C C3FC FFB1                  		muls.w	#-$4F,d1
0001ADA0 0641 2578                  		addi.w	#$2578,d1
0001ADA4 0240 001F                  		andi.w	#$1F,d0
0001ADA8 0440 0010                  		subi.w	#$10,d0
0001ADAC D041                       		add.w	d1,d0
0001ADAE 3340 0030                  		move.w	d0,$30(a1)
0001ADB2 5268 0032                  		addq.w	#1,$32(a0)
0001ADB6 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001ADBC 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001ADC0                            
0001ADC0                            loc_1A954:
0001ADC0 4A68 0032                  		tst.w	$32(a0)
0001ADC4 6600                       		bne.s	loc_1A95E
0001ADC6 5428 0024                  		addq.b	#2,$24(a0)
0001ADCA                            
0001ADCA                            loc_1A95E:
0001ADCA 6000 FF0C                  		bra.w	loc_1A86C
0001ADCE                            ; ===========================================================================
0001ADCE                            
0001ADCE                            loc_1A962:				; XREF: Obj86_Index
0001ADCE 117C 0002 001C             		move.b	#2,$1C(a0)
0001ADD4 4A68 0038                  		tst.w	$38(a0)
0001ADD8 6600                       		bne.s	loc_1A97E
0001ADDA 117C 0002 0024             		move.b	#2,$24(a0)
0001ADE0 2268 0034                  		movea.l	$34(a0),a1
0001ADE4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001ADEA                            
0001ADEA                            loc_1A97E:
0001ADEA 6000 FEEC                  		bra.w	loc_1A86C
0001ADEE                            ; ===========================================================================
0001ADEE                            
0001ADEE                            loc_1A982:				; XREF: Obj86_Index
0001ADEE 7000                       		moveq	#0,d0
0001ADF0 1028 0025                  		move.b	$25(a0),d0
0001ADF4 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001ADF8 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001ADFC 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AE00 4EB9 0000 AAF4             		jsr	AnimateSprite
0001AE06 4EF9 0000 DA42             		jmp	DisplaySprite
0001AE0C                            ; ===========================================================================
0001AE0C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AE0E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AE10 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AE12                            ; ===========================================================================
0001AE12                            
0001AE12                            loc_1A9A6:				; XREF: Obj86_Index2
0001AE12 3028 0030                  		move.w	$30(a0),d0
0001AE16 9068 0008                  		sub.w	8(a0),d0
0001AE1A E940                       		asl.w	#4,d0
0001AE1C 3140 0010                  		move.w	d0,$10(a0)
0001AE20 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AE26 5428 0025                  		addq.b	#2,$25(a0)
0001AE2A 4E75                       		rts	
0001AE2C                            ; ===========================================================================
0001AE2C                            
0001AE2C                            loc_1A9C0:				; XREF: Obj86_Index2
0001AE2C 4A68 0010                  		tst.w	$10(a0)
0001AE30 6700                       		beq.s	loc_1A9E6
0001AE32 4EB9 0000 DA1C             		jsr	SpeedToPos
0001AE38 3028 0008                  		move.w	8(a0),d0
0001AE3C 9068 0030                  		sub.w	$30(a0),d0
0001AE40 6400                       		bcc.s	loc_1A9E6
0001AE42 4268 0010                  		clr.w	$10(a0)
0001AE46 D168 0008                  		add.w	d0,8(a0)
0001AE4A 2268 0034                  		movea.l	$34(a0),a1
0001AE4E 5369 0032                  		subq.w	#1,$32(a1)
0001AE52                            
0001AE52                            loc_1A9E6:
0001AE52 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE58 5368 0028                  		subq.w	#1,$28(a0)
0001AE5C 6600                       		bne.s	locret_1AA1C
0001AE5E 5428 0025                  		addq.b	#2,$25(a0)
0001AE62 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE68 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AE6E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AE74 7000                       		moveq	#0,d0
0001AE76 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE7A 9068 0008                  		sub.w	8(a0),d0
0001AE7E 3140 0010                  		move.w	d0,$10(a0)
0001AE82 317C 0140 0012             		move.w	#$140,$12(a0)
0001AE88                            
0001AE88                            locret_1AA1C:
0001AE88 4E75                       		rts	
0001AE8A                            ; ===========================================================================
0001AE8A                            
0001AE8A                            loc_1AA1E:				; XREF: Obj86_Index2
0001AE8A 4EB9 0000 DA1C             		jsr	SpeedToPos
0001AE90 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AE96 6400                       		bcc.s	loc_1AA34
0001AE98 5368 0028                  		subq.w	#1,$28(a0)
0001AE9C 6700                       		beq.s	loc_1AA34
0001AE9E 4E75                       		rts	
0001AEA0                            ; ===========================================================================
0001AEA0                            
0001AEA0                            loc_1AA34:
0001AEA0 2268 0034                  		movea.l	$34(a0),a1
0001AEA4 5369 0038                  		subq.w	#1,$38(a1)
0001AEA8 6000 FA0A                  		bra.w	Obj84_Delete
0001AEAC                            ; ===========================================================================
0001AEAC                            Ani_obj86:
0001AEAC                            	include "_anim\obj86.asm"
0001AEAC                            ; ---------------------------------------------------------------------------
0001AEAC                            ; Animation script - energy ball launcher (FZ)
0001AEAC                            ; ---------------------------------------------------------------------------
0001AEAC 0000                       		dc.w byte_1AA46-Ani_obj86
0001AEAE 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AEB0 0000                       		dc.w byte_1AA50-Ani_obj86
0001AEB2 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AEB6 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AEBC 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AEC2                            		even
0001AEC2                            		even
0001AEC2                            
0001AEC2                            ; ---------------------------------------------------------------------------
0001AEC2                            ; Sprite mappings - energy ball	launcher (FZ)
0001AEC2                            ; ---------------------------------------------------------------------------
0001AEC2                            Map_obj86:
0001AEC2                            	include "_maps\obj86.asm"
0001AEC2                            ; ---------------------------------------------------------------------------
0001AEC2                            ; Sprite mappings - energy ball	launcher (FZ)
0001AEC2                            ; ---------------------------------------------------------------------------
0001AEC2 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AEC6 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AECA 01                         byte_1AA5E:	dc.b 1
0001AECB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AED0 01                         byte_1AA64:	dc.b 1
0001AED1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AED6 01                         byte_1AA6A:	dc.b 1
0001AED7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AEDC 01                         byte_1AA70:	dc.b 1
0001AEDD F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AEE2                            		even
0001AEE2                            		even
0001AEE2                            
0001AEE2                            Ani_obj86a:
0001AEE2                            	include "_anim\obj86a.asm"
0001AEE2                            ; ---------------------------------------------------------------------------
0001AEE2                            ; Animation script - energy balls (FZ)
0001AEE2                            ; ---------------------------------------------------------------------------
0001AEE2 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AEE4 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AEE6 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AEF5 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AF04 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AF08 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AF12                            		even
0001AF12                            		even
0001AF12                            
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            ; Sprite mappings - energy balls (FZ)
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            Map_obj86a:
0001AF12                            	include "_maps\obj86a.asm"
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            ; Sprite mappings - energy balls (FZ)
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AF16 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AF1A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AF1E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AF22 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AF26 0000                       		dc.w byte_1AB20-Map_obj86a
0001AF28 02                         byte_1AABC:	dc.b 2
0001AF29 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AF2E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AF33 02                         byte_1AAC7:	dc.b 2
0001AF34 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AF39 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AF3E 02                         byte_1AAD2:	dc.b 2
0001AF3F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AF44 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AF49 02                         byte_1AADD:	dc.b 2
0001AF4A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AF4F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AF54 02                         byte_1AAE8:	dc.b 2
0001AF55 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AF5A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AF5F 02                         byte_1AAF3:	dc.b 2
0001AF60 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AF65 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AF6A 01                         byte_1AAFE:	dc.b 1
0001AF6B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AF70 01                         byte_1AB04:	dc.b 1
0001AF71 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AF76 02                         byte_1AB0A:	dc.b 2
0001AF77 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AF7C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AF81 02                         byte_1AB15:	dc.b 2
0001AF82 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AF87 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AF8C 00                         byte_1AB20:	dc.b 0
0001AF8E 00                         		even
0001AF8E 00                         		even
0001AF8E                            
0001AF8E                            ; ===========================================================================
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E                            ; Object 3E - prison capsule
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E                            
0001AF8E                            Obj3E:					; XREF: Obj_Index
0001AF8E 7000                       		moveq	#0,d0
0001AF90 1028 0024                  		move.b	$24(a0),d0
0001AF94 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AF98 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AF9C 3028 0008                  		move.w	8(a0),d0
0001AFA0 0240 FF80                  		andi.w	#$FF80,d0
0001AFA4 3238 F700                  		move.w	($FFFFF700).w,d1
0001AFA8 0441 0080                  		subi.w	#$80,d1
0001AFAC 0241 FF80                  		andi.w	#$FF80,d1
0001AFB0 9041                       		sub.w	d1,d0
0001AFB2 0C40 0280                  		cmpi.w	#$280,d0
0001AFB6 6200                       		bhi.s	Obj3E_Delete
0001AFB8 4EF9 0000 DA42             		jmp	DisplaySprite
0001AFBE                            ; ===========================================================================
0001AFBE                            
0001AFBE                            Obj3E_Delete:
0001AFBE 4EF9 0000 DA7E             		jmp	DeleteObject
0001AFC4                            ; ===========================================================================
0001AFC4 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AFC6 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AFC8 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AFCA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AFCC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AFCE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AFD0 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AFD2 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AFD4                            
0001AFD4 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AFD8 040C 0501                  		dc.b 4,	$C, 5, 1
0001AFDC 0610 0403                  		dc.b 6,	$10, 4,	3
0001AFE0 0810 0305                  		dc.b 8,	$10, 3,	5
0001AFE4                            ; ===========================================================================
0001AFE4                            
0001AFE4                            Obj3E_Main:				; XREF: Obj3E_Index
0001AFE4 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AFEC 317C 049D 0002             		move.w	#$49D,2(a0)
0001AFF2 117C 0004 0001             		move.b	#4,1(a0)
0001AFF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AFFE 7000                       		moveq	#0,d0
0001B000 1028 0028                  		move.b	$28(a0),d0
0001B004 E548                       		lsl.w	#2,d0
0001B006 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B00A 1159 0024                  		move.b	(a1)+,$24(a0)
0001B00E 1159 0019                  		move.b	(a1)+,$19(a0)
0001B012 1159 0018                  		move.b	(a1)+,$18(a0)
0001B016 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B01A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B01E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B020 117C 0006 0020             		move.b	#6,$20(a0)
0001B026 117C 0008 0021             		move.b	#8,$21(a0)
0001B02C                            
0001B02C                            Obj3E_Not02:
0001B02C 4E75                       		rts	
0001B02E                            ; ===========================================================================
0001B02E                            
0001B02E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B02E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B034 6700                       		beq.s	Obj3E_ChkOpened
0001B036 323C 002B                  		move.w	#$2B,d1
0001B03A 343C 0018                  		move.w	#$18,d2
0001B03E 363C 0018                  		move.w	#$18,d3
0001B042 3828 0008                  		move.w	8(a0),d4
0001B046 4EF9 0000 FE12             		jmp	SolidObject
0001B04C                            ; ===========================================================================
0001B04C                            
0001B04C                            Obj3E_ChkOpened:
0001B04C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B050 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B052 4228 0025                  		clr.b	$25(a0)
0001B056 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B05C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B062                            
0001B062                            Obj3E_DoOpen:
0001B062 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B068 4E75                       		rts	
0001B06A                            ; ===========================================================================
0001B06A                            
0001B06A                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B06A 323C 0017                  		move.w	#$17,d1
0001B06E 343C 0008                  		move.w	#8,d2
0001B072 363C 0008                  		move.w	#8,d3
0001B076 3828 0008                  		move.w	8(a0),d4
0001B07A 4EB9 0000 FE12             		jsr	SolidObject
0001B080 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B086 4EB9 0000 AAF4             		jsr	AnimateSprite
0001B08C 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B092 4A28 0025                  		tst.b	$25(a0)
0001B096 6700                       		beq.s	locret_1AC60
0001B098 5068 000C                  		addq.w	#8,$C(a0)
0001B09C 117C 000A 0024             		move.b	#$A,$24(a0)
0001B0A2 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B0A8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B0AC 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B0B0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B0B6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B0BC 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B0BE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B0C4 6000                       		bra.s	Obj3E_ContinueCode
0001B0C6                            
0001B0C6                            Obj3E_MoveLeft:
0001B0C6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B0CC                            
0001B0CC                            Obj3E_ContinueCode:
0001B0CC 4228 0025                  		clr.b	$25(a0)
0001B0D0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B0D6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B0DC                            
0001B0DC                            locret_1AC60:
0001B0DC 4E75                       		rts	
0001B0DE                            ; ===========================================================================
0001B0DE                            
0001B0DE                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B0DE 7007                       		moveq	#7,d0
0001B0E0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B0E4 6600                       		bne.s	loc_1ACA0
0001B0E6 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001B0EC 6600                       		bne.s	loc_1ACA0
0001B0EE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B0F2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0FE 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B104 7200                       		moveq	#0,d1
0001B106 1200                       		move.b	d0,d1
0001B108 E409                       		lsr.b	#2,d1
0001B10A 0441 0020                  		subi.w	#$20,d1
0001B10E D369 0008                  		add.w	d1,8(a1)
0001B112 E048                       		lsr.w	#8,d0
0001B114 E608                       		lsr.b	#3,d0
0001B116 D169 000C                  		add.w	d0,$C(a1)
0001B11A                            
0001B11A                            loc_1ACA0:
0001B11A 5368 001E                  		subq.w	#1,$1E(a0)
0001B11E 6700                       		beq.s	Obj3E_MakeAnimal
0001B120 4E75                       		rts	
0001B122                            ; ===========================================================================
0001B122                            
0001B122                            Obj3E_MakeAnimal:
0001B122 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B128 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B12E 117C 0006 001A             		move.b	#6,$1A(a0)
0001B134 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B13A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B140 7C07                       		moveq	#7,d6
0001B142 3A3C 009A                  		move.w	#$9A,d5
0001B146 78E4                       		moveq	#-$1C,d4
0001B148                            
0001B148                            Obj3E_Loop:
0001B148 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001B14E 6600                       		bne.s	locret_1ACF8
0001B150 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B154 3368 0008 0008             		move.w	8(a0),8(a1)
0001B15A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B160 D969 0008                  		add.w	d4,8(a1)
0001B164 5E44                       		addq.w	#7,d4
0001B166 3345 0036                  		move.w	d5,$36(a1)
0001B16A 5145                       		subq.w	#8,d5
0001B16C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B170                            
0001B170                            locret_1ACF8:
0001B170 4E75                       		rts	
0001B172                            ; ===========================================================================
0001B172                            
0001B172                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B172 7007                       		moveq	#7,d0
0001B174 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B178 6600                       		bne.s	loc_1AD38
0001B17A 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001B180 6600                       		bne.s	loc_1AD38
0001B182 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B186 3368 0008 0008             		move.w	8(a0),8(a1)
0001B18C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B192 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B198 0240 001F                  		andi.w	#$1F,d0
0001B19C 5D40                       		subq.w	#6,d0
0001B19E 4A41                       		tst.w	d1
0001B1A0 6A00                       		bpl.s	loc_1AD2E
0001B1A2 4440                       		neg.w	d0
0001B1A4                            
0001B1A4                            loc_1AD2E:
0001B1A4 D169 0008                  		add.w	d0,8(a1)
0001B1A8 337C 000C 0036             		move.w	#$C,$36(a1)
0001B1AE                            
0001B1AE                            loc_1AD38:
0001B1AE 5368 001E                  		subq.w	#1,$1E(a0)
0001B1B2 6600                       		bne.s	locret_1AD48
0001B1B4 5428 0024                  		addq.b	#2,$24(a0)
0001B1B8 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B1BE                            
0001B1BE                            locret_1AD48:
0001B1BE 4E75                       		rts	
0001B1C0                            ; ===========================================================================
0001B1C0                            
0001B1C0                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B1C0 703E                       		moveq	#$3E,d0
0001B1C2 7228                       		moveq	#$28,d1
0001B1C4 7440                       		moveq	#$40,d2
0001B1C6 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B1CA                            
0001B1CA                            Obj3E_FindObj28:
0001B1CA B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B1CC 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B1CE D2C2                       		adda.w	d2,a1		; next object RAM
0001B1D0 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B1D4                            
0001B1D4 4EB9 0000 F0CE             		jsr	GotThroughAct
0001B1DA 4EF9 0000 DA7E             		jmp	DeleteObject
0001B1E0                            ; ===========================================================================
0001B1E0                            
0001B1E0                            Obj3E_Obj28Found:
0001B1E0 4E75                       		rts	
0001B1E2                            ; ===========================================================================
0001B1E2                            Ani_obj3E:
0001B1E2                            	include "_anim\obj3E.asm"
0001B1E2                            ; ---------------------------------------------------------------------------
0001B1E2                            ; Animation script - prison capsule
0001B1E2                            ; ---------------------------------------------------------------------------
0001B1E2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B1E4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B1E6 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B1EA                            		even
0001B1EA                            		even
0001B1EA                            
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA                            ; Sprite mappings - prison capsule
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA                            Map_obj3E:
0001B1EA                            	include "_maps\obj3E.asm"
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA                            ; Sprite mappings - prison capsule
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B1EE 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B1F2 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B1F6 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B1F8 07                         byte_1AD82:	dc.b 7
0001B1F9 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B1FE E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B203 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B208 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B20D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B212 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B217 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B21C 01                         byte_1ADA6:	dc.b 1
0001B21D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B222 06                         byte_1ADAC:	dc.b 6
0001B223 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B228 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B22D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B232 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B237 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B23C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B241 01                         byte_1ADCB:	dc.b 1
0001B242 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B247 02                         byte_1ADD1:	dc.b 2
0001B248 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B24D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B252 01                         byte_1ADDC:	dc.b 1
0001B253 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B258 00                         byte_1ADE2:	dc.b 0
0001B25A 00                         		even
0001B25A 00                         		even
0001B25A                            
0001B25A                            ; ---------------------------------------------------------------------------
0001B25A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B25A                            ; ---------------------------------------------------------------------------
0001B25A                            
0001B25A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B25A                            
0001B25A                            
0001B25A                            TouchResponse:				; XREF: Obj01
0001B25A 4E71                       		nop	
0001B25C 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B260 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B264 5142                       		subq.w	#8,d2
0001B266 7A00                       		moveq	#0,d5
0001B268 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B26C 5705                       		subq.b	#3,d5
0001B26E 9645                       		sub.w	d5,d3
0001B270 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B276 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B278 0643 000C                  		addi.w	#$C,d3
0001B27C 7A0A                       		moveq	#$A,d5
0001B27E                            
0001B27E                            Touch_NoDuck:
0001B27E 383C 0010                  		move.w	#$10,d4
0001B282 DA45                       		add.w	d5,d5
0001B284 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B288 3C3C 005F                  		move.w	#$5F,d6
0001B28C                            
0001B28C                            Touch_Loop:
0001B28C 4A29 0001                  		tst.b	1(a1)
0001B290 6A00                       		bpl.s	Touch_NextObj
0001B292 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B296 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B298                            
0001B298                            Touch_NextObj:
0001B298 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B29C 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B2A0                            
0001B2A0 7000                       		moveq	#0,d0
0001B2A2 4E75                       		rts	
0001B2A4                            ; ===========================================================================
0001B2A4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B2A6 0C14                       		dc.b   $C, $14
0001B2A8 140C                       		dc.b  $14,  $C
0001B2AA 0410                       		dc.b	4, $10
0001B2AC 0C12                       		dc.b   $C, $12
0001B2AE 1010                       		dc.b  $10, $10
0001B2B0 0606                       		dc.b	6,   6
0001B2B2 180C                       		dc.b  $18,  $C
0001B2B4 0C10                       		dc.b   $C, $10
0001B2B6 100C                       		dc.b  $10,  $C
0001B2B8 0808                       		dc.b	8,   8
0001B2BA 1410                       		dc.b  $14, $10
0001B2BC 1408                       		dc.b  $14,   8
0001B2BE 0E0E                       		dc.b   $E,  $E
0001B2C0 1818                       		dc.b  $18, $18
0001B2C2 2810                       		dc.b  $28, $10
0001B2C4 1018                       		dc.b  $10, $18
0001B2C6 0810                       		dc.b	8, $10
0001B2C8 2070                       		dc.b  $20, $70
0001B2CA 4020                       		dc.b  $40, $20
0001B2CC 8020                       		dc.b  $80, $20
0001B2CE 2020                       		dc.b  $20, $20
0001B2D0 0808                       		dc.b	8,   8
0001B2D2 0404                       		dc.b	4,   4
0001B2D4 2008                       		dc.b  $20,   8
0001B2D6 0C0C                       		dc.b   $C,  $C
0001B2D8 0804                       		dc.b	8,   4
0001B2DA 1804                       		dc.b  $18,   4
0001B2DC 2804                       		dc.b  $28,   4
0001B2DE 0408                       		dc.b	4,   8
0001B2E0 0418                       		dc.b	4, $18
0001B2E2 0428                       		dc.b	4, $28
0001B2E4 0420                       		dc.b	4, $20
0001B2E6 1818                       		dc.b  $18, $18
0001B2E8 0C18                       		dc.b   $C, $18
0001B2EA 4808                       		dc.b  $48,   8
0001B2EC                            ; ===========================================================================
0001B2EC                            
0001B2EC                            Touch_Height:				; XREF: TouchResponse
0001B2EC 0240 003F                  		andi.w	#$3F,d0
0001B2F0 D040                       		add.w	d0,d0
0001B2F2 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B2F6 7200                       		moveq	#0,d1
0001B2F8 121A                       		move.b	(a2)+,d1
0001B2FA 3029 0008                  		move.w	8(a1),d0
0001B2FE 9041                       		sub.w	d1,d0
0001B300 9042                       		sub.w	d2,d0
0001B302 6400                       		bcc.s	loc_1AE98
0001B304 D241                       		add.w	d1,d1
0001B306 D041                       		add.w	d1,d0
0001B308 6500                       		bcs.s	Touch_Width
0001B30A 6000 FF8C                  		bra.w	Touch_NextObj
0001B30E                            ; ===========================================================================
0001B30E                            
0001B30E                            loc_1AE98:
0001B30E B044                       		cmp.w	d4,d0
0001B310 6200 FF86                  		bhi.w	Touch_NextObj
0001B314                            
0001B314                            Touch_Width:
0001B314 7200                       		moveq	#0,d1
0001B316 121A                       		move.b	(a2)+,d1
0001B318 3029 000C                  		move.w	$C(a1),d0
0001B31C 9041                       		sub.w	d1,d0
0001B31E 9043                       		sub.w	d3,d0
0001B320 6400                       		bcc.s	loc_1AEB6
0001B322 D241                       		add.w	d1,d1
0001B324 D240                       		add.w	d0,d1
0001B326 6500                       		bcs.s	Touch_ChkValue
0001B328 6000 FF6E                  		bra.w	Touch_NextObj
0001B32C                            ; ===========================================================================
0001B32C                            
0001B32C                            loc_1AEB6:
0001B32C B045                       		cmp.w	d5,d0
0001B32E 6200 FF68                  		bhi.w	Touch_NextObj
0001B332                            
0001B332                            Touch_ChkValue:
0001B332 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B336 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B33A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B33E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B342 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B346 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B348 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B34C                            
0001B34C                            ; touch	response is $40-$7F
0001B34C                            
0001B34C 1029 0020                  		move.b	$20(a1),d0
0001B350 0200 003F                  		andi.b	#$3F,d0
0001B354 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B358 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B35A 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B360 6400 0000                  		bcc.w	locret_1AEF2
0001B364 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B368                            
0001B368                            locret_1AEF2:
0001B368 4E75                       		rts	
0001B36A                            ; ===========================================================================
0001B36A                            
0001B36A                            Touch_Monitor:
0001B36A 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B36E 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B370 3028 000C                  		move.w	$C(a0),d0
0001B374 0440 0010                  		subi.w	#$10,d0
0001B378 B069 000C                  		cmp.w	$C(a1),d0
0001B37C 6500                       		bcs.s	locret_1AF2E
0001B37E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B382 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B388 4A29 0025                  		tst.b	$25(a1)
0001B38C 6600                       		bne.s	locret_1AF2E
0001B38E 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B392 4E75                       		rts	
0001B394                            ; ===========================================================================
0001B394                            
0001B394                            loc_1AF1E:
0001B394 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B39A 6600                       		bne.s	locret_1AF2E
0001B39C 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B3A0 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B3A4                            
0001B3A4                            locret_1AF2E:
0001B3A4 4E75                       		rts	
0001B3A6                            ; ===========================================================================
0001B3A6                            
0001B3A6                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B3A6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B3AA 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B3AC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B3B2 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B3B6                            
0001B3B6                            loc_1AF40:
0001B3B6 4A29 0021                  		tst.b	$21(a1)
0001B3BA 6700                       		beq.s	Touch_KillEnemy
0001B3BC 4468 0010                  		neg.w	$10(a0)
0001B3C0 4468 0012                  		neg.w	$12(a0)
0001B3C4 E0E8 0010                  		asr	$10(a0)
0001B3C8 E0E8 0012                  		asr	$12(a0)
0001B3CC 137C 0000 0020             		move.b	#0,$20(a1)
0001B3D2 5329 0021                  		subq.b	#1,$21(a1)
0001B3D6 6600                       		bne.s	locret_1AF68
0001B3D8 08E9 0007 0022             		bset	#7,$22(a1)
0001B3DE                            
0001B3DE                            locret_1AF68:
0001B3DE 4E75                       		rts	
0001B3E0                            ; ===========================================================================
0001B3E0                            
0001B3E0                            Touch_KillEnemy:
0001B3E0 08E9 0007 0022             		bset	#7,$22(a1)
0001B3E6 7000                       		moveq	#0,d0
0001B3E8 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B3EC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B3F0 0C40 0006                  		cmpi.w	#6,d0
0001B3F4 6500                       		bcs.s	loc_1AF82
0001B3F6 7006                       		moveq	#6,d0
0001B3F8                            
0001B3F8                            loc_1AF82:
0001B3F8 3340 003E                  		move.w	d0,$3E(a1)
0001B3FC 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B400 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B406 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B408 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B40C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B412                            
0001B412                            loc_1AF9C:
0001B412 6100 0000                  		bsr.w	AddPoints
0001B416 7400                       		moveq	#0,d2	; GMZ
0001B418 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B41A 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B41C                            
0001B41C                            TouchKE_Explode:
0001B41C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B420 137C 0000 0024             		move.b	#0,$24(a1)
0001B426 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B42A                            
0001B42A                            TouchKE_NextExplosion:
0001B42A 5802                       		addq.b	#4,d2
0001B42C 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001B432 66F6                       		bne.s	TouchKE_NextExplosion
0001B434 336A 0008 0008             		move.w	8(a2),8(a1)
0001B43A 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B440 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B444                            
0001B444 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B446 4A68 0012                  		tst.w	$12(a0)
0001B44A 6B00                       		bmi.s	loc_1AFC2
0001B44C 3028 000C                  		move.w	$C(a0),d0
0001B450 B069 000C                  		cmp.w	$C(a1),d0
0001B454 6400                       		bcc.s	loc_1AFCA
0001B456 4468 0012                  		neg.w	$12(a0)
0001B45A 4E75                       		rts	
0001B45C                            ; ===========================================================================
0001B45C                            
0001B45C                            loc_1AFC2:
0001B45C 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B462 4E75                       		rts	
0001B464                            ; ===========================================================================
0001B464                            
0001B464                            loc_1AFCA:
0001B464 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B46A 4E75                       		rts	
0001B46C                            ; ===========================================================================
0001B46C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B474                            ; ===========================================================================
0001B474                            
0001B474                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B474 08E9 0007 0022             		bset	#7,$22(a1)
0001B47A                            
0001B47A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B47A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B47E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B480                            
0001B480                            loc_1AFE6:				; XREF: Touch_Hurt
0001B480 70FF                       		moveq	#-1,d0
0001B482 4E75                       		rts	
0001B484                            ; ===========================================================================
0001B484                            
0001B484                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B484 4E71                       		nop	
0001B486 4A68 0030                  		tst.w	$30(a0)
0001B48A 66F4                       		bne.s	loc_1AFE6
0001B48C 2449                       		movea.l	a1,a2
0001B48E                            
0001B48E                            ; End of function TouchResponse
0001B48E                            ; continue straight to HurtSonic
0001B48E                            
0001B48E                            ; ---------------------------------------------------------------------------
0001B48E                            ; Hurting Sonic	subroutine
0001B48E                            ; ---------------------------------------------------------------------------
0001B48E                            
0001B48E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B48E                            
0001B48E                            
0001B48E                            HurtSonic:
0001B48E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B492 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B494 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B498 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B49C 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001B4A2 6600                       		bne.s	Hurt_Shield
0001B4A4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B4A8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4B4                            
0001B4B4                            Hurt_Shield:
0001B4B4 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B4BA 117C 0004 0024             		move.b	#4,$24(a0)
0001B4C0 6100 8762                  		bsr.w	Sonic_ResetOnFloor
0001B4C4 08E8 0001 0022             		bset	#1,$22(a0)
0001B4CA 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B4D0 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B4D6 0828 0006 0022             		btst	#6,$22(a0)
0001B4DC 6700                       		beq.s	Hurt_Reverse
0001B4DE 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B4E4 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B4EA                            
0001B4EA                            Hurt_Reverse:
0001B4EA 3028 0008                  		move.w	8(a0),d0
0001B4EE B06A 0008                  		cmp.w	8(a2),d0
0001B4F2 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B4F4 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B4F8                            
0001B4F8                            Hurt_ChkSpikes:
0001B4F8 317C 0000 0014             		move.w	#0,$14(a0)
0001B4FE 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B504 317C 0078 0030             		move.w	#$78,$30(a0)
0001B50A 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B50E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B512 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B514 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B518 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B51A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B51E                            
0001B51E                            Hurt_Sound:
0001B51E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B524 70FF                       		moveq	#-1,d0
0001B526 4E75                       		rts	
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Hurt_NoRings:
0001B528 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B52C 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B530                            ; End of function HurtSonic
0001B530                            
0001B530                            ; ---------------------------------------------------------------------------
0001B530                            ; Subroutine to	kill Sonic
0001B530                            ; ---------------------------------------------------------------------------
0001B530                            
0001B530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B530                            
0001B530                            
0001B530                            KillSonic:
0001B530 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B534 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B536 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B53C 117C 0006 0024             		move.b	#6,$24(a0)
0001B542 6100 86E0                  		bsr.w	Sonic_ResetOnFloor
0001B546 08E8 0001 0022             		bset	#1,$22(a0)
0001B54C 317C F900 0012             		move.w	#-$700,$12(a0)
0001B552 317C 0000 0010             		move.w	#0,$10(a0)
0001B558 317C 0000 0014             		move.w	#0,$14(a0)
0001B55E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B564 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B56A 08E8 0007 0002             		bset	#7,2(a0)
0001B570 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B574 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B578 6600                       		bne.s	Kill_Sound
0001B57A 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B57E                            
0001B57E                            Kill_Sound:
0001B57E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B584                            
0001B584                            Kill_NoDeath:
0001B584 70FF                       		moveq	#-1,d0
0001B586 4E75                       		rts	
0001B588                            ; End of function KillSonic
0001B588                            
0001B588                            
0001B588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B588                            
0001B588                            
0001B588                            Touch_Special:				; XREF: Touch_ChkValue
0001B588 1229 0020                  		move.b	$20(a1),d1
0001B58C 0201 003F                  		andi.b	#$3F,d1
0001B590 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B594 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B596 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B59A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B59C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B5A0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B5A2 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B5A6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B5A8 4E75                       		rts	
0001B5AA                            ; ===========================================================================
0001B5AA                            
0001B5AA                            Touch_CatKiller:			; XREF: Touch_Special
0001B5AA 6000 FEC8                  		bra.w	loc_1AFDA
0001B5AE                            ; ===========================================================================
0001B5AE                            
0001B5AE                            Touch_Yadrin:				; XREF: Touch_Special
0001B5AE 9A40                       		sub.w	d0,d5
0001B5B0 0C45 0008                  		cmpi.w	#8,d5
0001B5B4 6400                       		bcc.s	loc_1B144
0001B5B6 3029 0008                  		move.w	8(a1),d0
0001B5BA 5940                       		subq.w	#4,d0
0001B5BC 0829 0000 0022             		btst	#0,$22(a1)
0001B5C2 6700                       		beq.s	loc_1B130
0001B5C4 0440 0010                  		subi.w	#$10,d0
0001B5C8                            
0001B5C8                            loc_1B130:
0001B5C8 9042                       		sub.w	d2,d0
0001B5CA 6400                       		bcc.s	loc_1B13C
0001B5CC 0640 0018                  		addi.w	#$18,d0
0001B5D0 6500                       		bcs.s	loc_1B140
0001B5D2 6000                       		bra.s	loc_1B144
0001B5D4                            ; ===========================================================================
0001B5D4                            
0001B5D4                            loc_1B13C:
0001B5D4 B044                       		cmp.w	d4,d0
0001B5D6 6200                       		bhi.s	loc_1B144
0001B5D8                            
0001B5D8                            loc_1B140:
0001B5D8 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B5DC                            ; ===========================================================================
0001B5DC                            
0001B5DC                            loc_1B144:
0001B5DC 6000 FDC8                  		bra.w	Touch_Enemy
0001B5E0                            ; ===========================================================================
0001B5E0                            
0001B5E0                            Touch_D7orE1:				; XREF: Touch_Special
0001B5E0 5229 0021                  		addq.b	#1,$21(a1)
0001B5E4 4E75                       		rts	
0001B5E6                            ; End of function Touch_Special
0001B5E6                            
0001B5E6                            ; ---------------------------------------------------------------------------
0001B5E6                            ; Subroutine to	show the special stage layout
0001B5E6                            ; ---------------------------------------------------------------------------
0001B5E6                            
0001B5E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5E6                            
0001B5E6                            
0001B5E6                            SS_ShowLayout:				; XREF: SpecialStage
0001B5E6 6100 0000                  		bsr.w	SS_AniWallsRings
0001B5EA 6100 0000                  		bsr.w	SS_AniItems
0001B5EE 3F05                       		move.w	d5,-(sp)
0001B5F0 43F8 8000                  		lea	($FFFF8000).w,a1
0001B5F4 1038 F780                  		move.b	($FFFFF780).w,d0
0001B5F8 0200 00FC                  		andi.b	#$FC,d0
0001B5FC 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B602 3800                       		move.w	d0,d4
0001B604 3A01                       		move.w	d1,d5
0001B606 C9FC 0018                  		muls.w	#$18,d4
0001B60A CBFC 0018                  		muls.w	#$18,d5
0001B60E 7400                       		moveq	#0,d2
0001B610 3438 F700                  		move.w	($FFFFF700).w,d2
0001B614 84FC 0018                  		divu.w	#$18,d2
0001B618 4842                       		swap	d2
0001B61A 4442                       		neg.w	d2
0001B61C 0642 FF4C                  		addi.w	#-$B4,d2
0001B620 7600                       		moveq	#0,d3
0001B622 3638 F704                  		move.w	($FFFFF704).w,d3
0001B626 86FC 0018                  		divu.w	#$18,d3
0001B62A 4843                       		swap	d3
0001B62C 4443                       		neg.w	d3
0001B62E 0643 FF4C                  		addi.w	#-$B4,d3
0001B632 3E3C 000F                  		move.w	#$F,d7
0001B636                            
0001B636                            loc_1B19E:
0001B636 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B63A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B63E 4440                       		neg.w	d0
0001B640 C3C2                       		muls.w	d2,d1
0001B642 C1C3                       		muls.w	d3,d0
0001B644 2C00                       		move.l	d0,d6
0001B646 DC81                       		add.l	d1,d6
0001B648 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B64C C1C2                       		muls.w	d2,d0
0001B64E C3C3                       		muls.w	d3,d1
0001B650 D280                       		add.l	d0,d1
0001B652 2406                       		move.l	d6,d2
0001B654 3C3C 000F                  		move.w	#$F,d6
0001B658                            
0001B658                            loc_1B1C0:
0001B658 2002                       		move.l	d2,d0
0001B65A E080                       		asr.l	#8,d0
0001B65C 32C0                       		move.w	d0,(a1)+
0001B65E 2001                       		move.l	d1,d0
0001B660 E080                       		asr.l	#8,d0
0001B662 32C0                       		move.w	d0,(a1)+
0001B664 D485                       		add.l	d5,d2
0001B666 D284                       		add.l	d4,d1
0001B668 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B66C                            
0001B66C 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B670 0643 0018                  		addi.w	#$18,d3
0001B674 51CF FFC0                  		dbf	d7,loc_1B19E
0001B678                            
0001B678 3A1F                       		move.w	(sp)+,d5
0001B67A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B680 7000                       		moveq	#0,d0
0001B682 3038 F704                  		move.w	($FFFFF704).w,d0
0001B686 80FC 0018                  		divu.w	#$18,d0
0001B68A C0FC 0080                  		mulu.w	#$80,d0
0001B68E D1C0                       		adda.l	d0,a0
0001B690 7000                       		moveq	#0,d0
0001B692 3038 F700                  		move.w	($FFFFF700).w,d0
0001B696 80FC 0018                  		divu.w	#$18,d0
0001B69A D0C0                       		adda.w	d0,a0
0001B69C 49F8 8000                  		lea	($FFFF8000).w,a4
0001B6A0 3E3C 000F                  		move.w	#$F,d7
0001B6A4                            
0001B6A4                            loc_1B20C:
0001B6A4 3C3C 000F                  		move.w	#$F,d6
0001B6A8                            
0001B6A8                            loc_1B210:
0001B6A8 7000                       		moveq	#0,d0
0001B6AA 1018                       		move.b	(a0)+,d0
0001B6AC 6700                       		beq.s	loc_1B268
0001B6AE 0C00 004E                  		cmpi.b	#$4E,d0
0001B6B2 6200                       		bhi.s	loc_1B268
0001B6B4 3614                       		move.w	(a4),d3
0001B6B6 0643 0120                  		addi.w	#$120,d3
0001B6BA 0C43 0070                  		cmpi.w	#$70,d3
0001B6BE 6500                       		bcs.s	loc_1B268
0001B6C0 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B6C4 6400                       		bcc.s	loc_1B268
0001B6C6 342C 0002                  		move.w	2(a4),d2
0001B6CA 0642 00F0                  		addi.w	#$F0,d2
0001B6CE 0C42 0070                  		cmpi.w	#$70,d2
0001B6D2 6500                       		bcs.s	loc_1B268
0001B6D4 0C42 0170                  		cmpi.w	#$170,d2
0001B6D8 6400                       		bcc.s	loc_1B268
0001B6DA 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B6E0 E748                       		lsl.w	#3,d0
0001B6E2 4BF5 0000                  		lea	(a5,d0.w),a5
0001B6E6 225D                       		movea.l	(a5)+,a1
0001B6E8 321D                       		move.w	(a5)+,d1
0001B6EA D241                       		add.w	d1,d1
0001B6EC D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B6F0 365D                       		movea.w	(a5)+,a3
0001B6F2 7200                       		moveq	#0,d1
0001B6F4 1219                       		move.b	(a1)+,d1
0001B6F6 5301                       		subq.b	#1,d1
0001B6F8 6B00                       		bmi.s	loc_1B268
0001B6FA 4EB9 0000 DBA0             		jsr	sub_D762
0001B700                            
0001B700                            loc_1B268:
0001B700 584C                       		addq.w	#4,a4
0001B702 51CE FFA4                  		dbf	d6,loc_1B210
0001B706                            
0001B706 41E8 0070                  		lea	$70(a0),a0
0001B70A 51CF FF98                  		dbf	d7,loc_1B20C
0001B70E                            
0001B70E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B712 0C05 0050                  		cmpi.b	#$50,d5
0001B716 6700                       		beq.s	loc_1B288
0001B718 24BC 0000 0000             		move.l	#0,(a2)
0001B71E 4E75                       		rts	
0001B720                            ; ===========================================================================
0001B720                            
0001B720                            loc_1B288:
0001B720 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B726 4E75                       		rts	
0001B728                            ; End of function SS_ShowLayout
0001B728                            
0001B728                            ; ---------------------------------------------------------------------------
0001B728                            ; Subroutine to	animate	walls and rings	in the special stage
0001B728                            ; ---------------------------------------------------------------------------
0001B728                            
0001B728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B728                            
0001B728                            
0001B728                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B728 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B72E 7000                       		moveq	#0,d0
0001B730 1038 F780                  		move.b	($FFFFF780).w,d0
0001B734 E408                       		lsr.b	#2,d0
0001B736 0240 000F                  		andi.w	#$F,d0
0001B73A 7223                       		moveq	#$23,d1
0001B73C                            
0001B73C                            loc_1B2A4:
0001B73C 3280                       		move.w	d0,(a1)
0001B73E 5049                       		addq.w	#8,a1
0001B740 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B744                            
0001B744 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B74A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B74E 6A00                       		bpl.s	loc_1B2C8
0001B750 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B756 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B75A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B760                            
0001B760                            loc_1B2C8:
0001B760 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B766 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B76A 6A00                       		bpl.s	loc_1B2E4
0001B76C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B772 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B776 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B77C                            
0001B77C                            loc_1B2E4:
0001B77C 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B780 1340 0138                  		move.b	d0,$138(a1)
0001B784 1340 0160                  		move.b	d0,$160(a1)
0001B788 1340 0148                  		move.b	d0,$148(a1)
0001B78C 1340 0150                  		move.b	d0,$150(a1)
0001B790 1340 01D8                  		move.b	d0,$1D8(a1)
0001B794 1340 01E0                  		move.b	d0,$1E0(a1)
0001B798 1340 01E8                  		move.b	d0,$1E8(a1)
0001B79C 1340 01F0                  		move.b	d0,$1F0(a1)
0001B7A0 1340 01F8                  		move.b	d0,$1F8(a1)
0001B7A4 1340 0200                  		move.b	d0,$200(a1)
0001B7A8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B7AC 6A00                       		bpl.s	loc_1B326
0001B7AE 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B7B4 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B7B8 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B7BE                            
0001B7BE                            loc_1B326:
0001B7BE 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B7C2 1340 0168                  		move.b	d0,$168(a1)
0001B7C6 1340 0170                  		move.b	d0,$170(a1)
0001B7CA 1340 0178                  		move.b	d0,$178(a1)
0001B7CE 1340 0180                  		move.b	d0,$180(a1)
0001B7D2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B7D6 6A00                       		bpl.s	loc_1B350
0001B7D8 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B7DE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B7E2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B7E8                            
0001B7E8                            loc_1B350:
0001B7E8 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B7EE 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B7F4 7000                       		moveq	#0,d0
0001B7F6 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B7FA D040                       		add.w	d0,d0
0001B7FC 41F0 0000                  		lea	(a0,d0.w),a0
0001B800 3290                       		move.w	(a0),(a1)
0001B802 3368 0002 0008             		move.w	2(a0),8(a1)
0001B808 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B80E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B814 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B81A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B820 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B826 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B82C D0FC 0020                  		adda.w	#$20,a0
0001B830 D2FC 0048                  		adda.w	#$48,a1
0001B834 3290                       		move.w	(a0),(a1)
0001B836 3368 0002 0008             		move.w	2(a0),8(a1)
0001B83C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B842 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B848 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B84E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B854 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B85A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B860 D0FC 0020                  		adda.w	#$20,a0
0001B864 D2FC 0048                  		adda.w	#$48,a1
0001B868 3290                       		move.w	(a0),(a1)
0001B86A 3368 0002 0008             		move.w	2(a0),8(a1)
0001B870 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B876 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B87C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B882 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B888 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B88E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B894 D0FC 0020                  		adda.w	#$20,a0
0001B898 D2FC 0048                  		adda.w	#$48,a1
0001B89C 3290                       		move.w	(a0),(a1)
0001B89E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B8A4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B8AA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B8B0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B8B6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B8BC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B8C2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B8C8 D0FC 0020                  		adda.w	#$20,a0
0001B8CC D2FC 0048                  		adda.w	#$48,a1
0001B8D0 4E75                       		rts	
0001B8D2                            ; End of function SS_AniWallsRings
0001B8D2                            
0001B8D2                            ; ===========================================================================
0001B8D2 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B8E2 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B8F2 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B902 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B912 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B922 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B932 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B942 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B952                            ; ---------------------------------------------------------------------------
0001B952                            ; Subroutine to	remove items when you collect them in the special stage
0001B952                            ; ---------------------------------------------------------------------------
0001B952                            
0001B952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B952                            
0001B952                            
0001B952                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B952 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B958 303C 001F                  		move.w	#$1F,d0
0001B95C                            
0001B95C                            loc_1B4C4:
0001B95C 4A12                       		tst.b	(a2)
0001B95E 6700                       		beq.s	locret_1B4CE
0001B960 504A                       		addq.w	#8,a2
0001B962 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B966                            
0001B966                            locret_1B4CE:
0001B966 4E75                       		rts	
0001B968                            ; End of function SS_RemoveCollectedItem
0001B968                            
0001B968                            ; ---------------------------------------------------------------------------
0001B968                            ; Subroutine to	animate	special	stage items when you touch them
0001B968                            ; ---------------------------------------------------------------------------
0001B968                            
0001B968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B968                            
0001B968                            
0001B968                            SS_AniItems:				; XREF: SS_ShowLayout
0001B968 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B96E 3E3C 001F                  		move.w	#$1F,d7
0001B972                            
0001B972                            loc_1B4DA:
0001B972 7000                       		moveq	#0,d0
0001B974 1010                       		move.b	(a0),d0
0001B976 6700                       		beq.s	loc_1B4E8
0001B978 E548                       		lsl.w	#2,d0
0001B97A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B97E 4E91                       		jsr	(a1)
0001B980                            
0001B980                            loc_1B4E8:
0001B980 5048                       		addq.w	#8,a0
0001B982                            
0001B982                            loc_1B4EA:
0001B982 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B986                            
0001B986 4E75                       		rts	
0001B988                            ; End of function SS_AniItems
0001B988                            
0001B988                            ; ===========================================================================
0001B988 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B98C 0000 0000                  		dc.l SS_AniBumper
0001B990 0000 0000                  		dc.l SS_Ani1Up
0001B994 0000 0000                  		dc.l SS_AniReverse
0001B998 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B99C 0000 0000                  		dc.l SS_AniGlassBlock
0001B9A0                            ; ===========================================================================
0001B9A0                            
0001B9A0                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B9A0 5328 0002                  		subq.b	#1,2(a0)
0001B9A4 6A00                       		bpl.s	locret_1B530
0001B9A6 117C 0005 0002             		move.b	#5,2(a0)
0001B9AC 7000                       		moveq	#0,d0
0001B9AE 1028 0003                  		move.b	3(a0),d0
0001B9B2 5228 0003                  		addq.b	#1,3(a0)
0001B9B6 2268 0004                  		movea.l	4(a0),a1
0001B9BA 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B9BE 1280                       		move.b	d0,(a1)
0001B9C0 6600                       		bne.s	locret_1B530
0001B9C2 4290                       		clr.l	(a0)
0001B9C4 42A8 0004                  		clr.l	4(a0)
0001B9C8                            
0001B9C8                            locret_1B530:
0001B9C8 4E75                       		rts	
0001B9CA                            ; ===========================================================================
0001B9CA 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B9D0                            ; ===========================================================================
0001B9D0                            
0001B9D0                            SS_AniBumper:				; XREF: SS_AniIndex
0001B9D0 5328 0002                  		subq.b	#1,2(a0)
0001B9D4 6A00                       		bpl.s	locret_1B566
0001B9D6 117C 0007 0002             		move.b	#7,2(a0)
0001B9DC 7000                       		moveq	#0,d0
0001B9DE 1028 0003                  		move.b	3(a0),d0
0001B9E2 5228 0003                  		addq.b	#1,3(a0)
0001B9E6 2268 0004                  		movea.l	4(a0),a1
0001B9EA 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B9EE 6600                       		bne.s	loc_1B564
0001B9F0 4290                       		clr.l	(a0)
0001B9F2 42A8 0004                  		clr.l	4(a0)
0001B9F6 12BC 0025                  		move.b	#$25,(a1)
0001B9FA 4E75                       		rts	
0001B9FC                            ; ===========================================================================
0001B9FC                            
0001B9FC                            loc_1B564:
0001B9FC 1280                       		move.b	d0,(a1)
0001B9FE                            
0001B9FE                            locret_1B566:
0001B9FE 4E75                       		rts	
0001BA00                            ; ===========================================================================
0001BA00 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BA06                            ; ===========================================================================
0001BA06                            
0001BA06                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BA06 5328 0002                  		subq.b	#1,2(a0)
0001BA0A 6A00                       		bpl.s	locret_1B596
0001BA0C 117C 0005 0002             		move.b	#5,2(a0)
0001BA12 7000                       		moveq	#0,d0
0001BA14 1028 0003                  		move.b	3(a0),d0
0001BA18 5228 0003                  		addq.b	#1,3(a0)
0001BA1C 2268 0004                  		movea.l	4(a0),a1
0001BA20 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BA24 1280                       		move.b	d0,(a1)
0001BA26 6600                       		bne.s	locret_1B596
0001BA28 4290                       		clr.l	(a0)
0001BA2A 42A8 0004                  		clr.l	4(a0)
0001BA2E                            
0001BA2E                            locret_1B596:
0001BA2E 4E75                       		rts	
0001BA30                            ; ===========================================================================
0001BA30 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BA36                            ; ===========================================================================
0001BA36                            
0001BA36                            SS_AniReverse:				; XREF: SS_AniIndex
0001BA36 5328 0002                  		subq.b	#1,2(a0)
0001BA3A 6A00                       		bpl.s	locret_1B5CC
0001BA3C 117C 0007 0002             		move.b	#7,2(a0)
0001BA42 7000                       		moveq	#0,d0
0001BA44 1028 0003                  		move.b	3(a0),d0
0001BA48 5228 0003                  		addq.b	#1,3(a0)
0001BA4C 2268 0004                  		movea.l	4(a0),a1
0001BA50 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BA54 6600                       		bne.s	loc_1B5CA
0001BA56 4290                       		clr.l	(a0)
0001BA58 42A8 0004                  		clr.l	4(a0)
0001BA5C 12BC 002B                  		move.b	#$2B,(a1)
0001BA60 4E75                       		rts	
0001BA62                            ; ===========================================================================
0001BA62                            
0001BA62                            loc_1B5CA:
0001BA62 1280                       		move.b	d0,(a1)
0001BA64                            
0001BA64                            locret_1B5CC:
0001BA64 4E75                       		rts	
0001BA66                            ; ===========================================================================
0001BA66 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BA6C                            ; ===========================================================================
0001BA6C                            
0001BA6C                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BA6C 5328 0002                  		subq.b	#1,2(a0)
0001BA70 6A00                       		bpl.s	locret_1B60C
0001BA72 117C 0005 0002             		move.b	#5,2(a0)
0001BA78 7000                       		moveq	#0,d0
0001BA7A 1028 0003                  		move.b	3(a0),d0
0001BA7E 5228 0003                  		addq.b	#1,3(a0)
0001BA82 2268 0004                  		movea.l	4(a0),a1
0001BA86 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BA8A 1280                       		move.b	d0,(a1)
0001BA8C 6600                       		bne.s	locret_1B60C
0001BA8E 4290                       		clr.l	(a0)
0001BA90 42A8 0004                  		clr.l	4(a0)
0001BA94 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BA9A 303C 00A8                  		move.w	#$A8,d0
0001BA9E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BAA4                            
0001BAA4                            locret_1B60C:
0001BAA4 4E75                       		rts	
0001BAA6                            ; ===========================================================================
0001BAA6 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BAAC                            ; ===========================================================================
0001BAAC                            
0001BAAC                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BAAC 5328 0002                  		subq.b	#1,2(a0)
0001BAB0 6A00                       		bpl.s	locret_1B640
0001BAB2 117C 0001 0002             		move.b	#1,2(a0)
0001BAB8 7000                       		moveq	#0,d0
0001BABA 1028 0003                  		move.b	3(a0),d0
0001BABE 5228 0003                  		addq.b	#1,3(a0)
0001BAC2 2268 0004                  		movea.l	4(a0),a1
0001BAC6 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BACA 1280                       		move.b	d0,(a1)
0001BACC 6600                       		bne.s	locret_1B640
0001BACE 12A8 0004                  		move.b	4(a0),(a1)
0001BAD2 4290                       		clr.l	(a0)
0001BAD4 42A8 0004                  		clr.l	4(a0)
0001BAD8                            
0001BAD8                            locret_1B640:
0001BAD8 4E75                       		rts	
0001BADA                            ; ===========================================================================
0001BADA 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BAE4                            ; ---------------------------------------------------------------------------
0001BAE4                            ; Special stage	layout pointers
0001BAE4                            ; ---------------------------------------------------------------------------
0001BAE4                            SS_LayoutIndex:
0001BAE4                            	include "_inc\Special stage layout pointers.asm"
0001BAE4                            ; ---------------------------------------------------------------------------
0001BAE4                            ; Special stage	layout pointers
0001BAE4                            ; ---------------------------------------------------------------------------
0001BAE4 0000 0000                  	dc.l SS_1
0001BAE8 0000 0000                  	dc.l SS_2
0001BAEC 0000 0000                  	dc.l SS_3
0001BAF0 0000 0000                  	dc.l SS_4
0001BAF4 0000 0000                  	dc.l SS_5
0001BAF8 0000 0000                  	dc.l SS_6
0001BAFC                            	even
0001BAFC                            	even
0001BAFC                            
0001BAFC                            ; ---------------------------------------------------------------------------
0001BAFC                            ; Special stage	start locations
0001BAFC                            ; ---------------------------------------------------------------------------
0001BAFC                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BB14                            		even
0001BB14                            
0001BB14                            ; ---------------------------------------------------------------------------
0001BB14                            ; Subroutine to	load special stage layout
0001BB14                            ; ---------------------------------------------------------------------------
0001BB14                            
0001BB14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB14                            
0001BB14                            
0001BB14                            SS_Load:				; XREF: SpecialStage
0001BB14 7000                       		moveq	#0,d0
0001BB16 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BB1A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BB1E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BB24 6500                       		bcs.s	SS_ChkEmldNum
0001BB26 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BB2C                            
0001BB2C                            SS_ChkEmldNum:
0001BB2C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BB32 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BB34 7200                       		moveq	#0,d1
0001BB36 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BB3A 5301                       		subq.b	#1,d1
0001BB3C 6500                       		bcs.s	SS_LoadData
0001BB3E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BB42                            
0001BB42                            SS_ChkEmldLoop:	
0001BB42 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BB46 6600                       		bne.s	SS_ChkEmldRepeat
0001BB48 60CA                       		bra.s	SS_Load
0001BB4A                            ; ===========================================================================
0001BB4A                            
0001BB4A                            SS_ChkEmldRepeat:
0001BB4A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BB4E                            
0001BB4E                            SS_LoadData:
0001BB4E E548                       		lsl.w	#2,d0
0001BB50 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BB54 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BB58 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BB5C 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BB60 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BB66 303C 0000                  		move.w	#0,d0
0001BB6A 4EB9 0000 193E             		jsr	(EniDec).l
0001BB70 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BB76 303C 0FFF                  		move.w	#$FFF,d0
0001BB7A                            
0001BB7A                            SS_ClrRAM3:
0001BB7A 4299                       		clr.l	(a1)+
0001BB7C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BB80                            
0001BB80 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BB86 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BB8C 723F                       		moveq	#$3F,d1
0001BB8E                            
0001BB8E                            loc_1B6F6:
0001BB8E 743F                       		moveq	#$3F,d2
0001BB90                            
0001BB90                            loc_1B6F8:
0001BB90 12D8                       		move.b	(a0)+,(a1)+
0001BB92 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BB96                            
0001BB96 43E9 0040                  		lea	$40(a1),a1
0001BB9A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BB9E                            
0001BB9E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BBA4 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BBAA 724D                       		moveq	#$4D,d1
0001BBAC                            
0001BBAC                            loc_1B714:
0001BBAC 22D8                       		move.l	(a0)+,(a1)+
0001BBAE 32FC 0000                  		move.w	#0,(a1)+
0001BBB2 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BBB8 32D8                       		move.w	(a0)+,(a1)+
0001BBBA 51C9 FFF0                  		dbf	d1,loc_1B714
0001BBBE                            
0001BBBE 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BBC4 323C 003F                  		move.w	#$3F,d1
0001BBC8                            
0001BBC8                            loc_1B730:
0001BBC8                            
0001BBC8 4299                       		clr.l	(a1)+
0001BBCA 51C9 FFFC                  		dbf	d1,loc_1B730
0001BBCE                            
0001BBCE 4E75                       		rts	
0001BBD0                            ; End of function SS_Load
0001BBD0                            
0001BBD0                            ; ===========================================================================
0001BBD0                            ; ---------------------------------------------------------------------------
0001BBD0                            ; Special stage	mappings and VRAM pointers
0001BBD0                            ; ---------------------------------------------------------------------------
0001BBD0                            SS_MapIndex:
0001BBD0                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BBD0                            ; ---------------------------------------------------------------------------
0001BBD0                            ; Special stage	mappings and VRAM pointers
0001BBD0                            ; ---------------------------------------------------------------------------
0001BBD0 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BBD4 0142                       	dc.w $142		; VRAM setting
0001BBD6 0000 0000                  	dc.l Map_SSWalls
0001BBDA 0142                       	dc.w $142
0001BBDC 0000 0000                  	dc.l Map_SSWalls
0001BBE0 0142                       	dc.w $142
0001BBE2 0000 0000                  	dc.l Map_SSWalls
0001BBE6 0142                       	dc.w $142
0001BBE8 0000 0000                  	dc.l Map_SSWalls
0001BBEC 0142                       	dc.w $142
0001BBEE 0000 0000                  	dc.l Map_SSWalls
0001BBF2 0142                       	dc.w $142
0001BBF4 0000 0000                  	dc.l Map_SSWalls
0001BBF8 0142                       	dc.w $142
0001BBFA 0000 0000                  	dc.l Map_SSWalls
0001BBFE 0142                       	dc.w $142
0001BC00 0000 0000                  	dc.l Map_SSWalls
0001BC04 0142                       	dc.w $142
0001BC06 0000 0000                  	dc.l Map_SSWalls
0001BC0A 2142                       	dc.w $2142
0001BC0C 0000 0000                  	dc.l Map_SSWalls
0001BC10 2142                       	dc.w $2142
0001BC12 0000 0000                  	dc.l Map_SSWalls
0001BC16 2142                       	dc.w $2142
0001BC18 0000 0000                  	dc.l Map_SSWalls
0001BC1C 2142                       	dc.w $2142
0001BC1E 0000 0000                  	dc.l Map_SSWalls
0001BC22 2142                       	dc.w $2142
0001BC24 0000 0000                  	dc.l Map_SSWalls
0001BC28 2142                       	dc.w $2142
0001BC2A 0000 0000                  	dc.l Map_SSWalls
0001BC2E 2142                       	dc.w $2142
0001BC30 0000 0000                  	dc.l Map_SSWalls
0001BC34 2142                       	dc.w $2142
0001BC36 0000 0000                  	dc.l Map_SSWalls
0001BC3A 2142                       	dc.w $2142
0001BC3C 0000 0000                  	dc.l Map_SSWalls
0001BC40 4142                       	dc.w $4142
0001BC42 0000 0000                  	dc.l Map_SSWalls
0001BC46 4142                       	dc.w $4142
0001BC48 0000 0000                  	dc.l Map_SSWalls
0001BC4C 4142                       	dc.w $4142
0001BC4E 0000 0000                  	dc.l Map_SSWalls
0001BC52 4142                       	dc.w $4142
0001BC54 0000 0000                  	dc.l Map_SSWalls
0001BC58 4142                       	dc.w $4142
0001BC5A 0000 0000                  	dc.l Map_SSWalls
0001BC5E 4142                       	dc.w $4142
0001BC60 0000 0000                  	dc.l Map_SSWalls
0001BC64 4142                       	dc.w $4142
0001BC66 0000 0000                  	dc.l Map_SSWalls
0001BC6A 4142                       	dc.w $4142
0001BC6C 0000 0000                  	dc.l Map_SSWalls
0001BC70 4142                       	dc.w $4142
0001BC72 0000 0000                  	dc.l Map_SSWalls
0001BC76 6142                       	dc.w $6142
0001BC78 0000 0000                  	dc.l Map_SSWalls
0001BC7C 6142                       	dc.w $6142
0001BC7E 0000 0000                  	dc.l Map_SSWalls
0001BC82 6142                       	dc.w $6142
0001BC84 0000 0000                  	dc.l Map_SSWalls
0001BC88 6142                       	dc.w $6142
0001BC8A 0000 0000                  	dc.l Map_SSWalls
0001BC8E 6142                       	dc.w $6142
0001BC90 0000 0000                  	dc.l Map_SSWalls
0001BC94 6142                       	dc.w $6142
0001BC96 0000 0000                  	dc.l Map_SSWalls
0001BC9A 6142                       	dc.w $6142
0001BC9C 0000 0000                  	dc.l Map_SSWalls
0001BCA0 6142                       	dc.w $6142
0001BCA2 0000 0000                  	dc.l Map_SSWalls
0001BCA6 6142                       	dc.w $6142
0001BCA8 0000 EF36                  	dc.l Map_obj47
0001BCAC 023B                       	dc.w $23B
0001BCAE 0000 0000                  	dc.l Map_SS_R
0001BCB2 0570                       	dc.w $570
0001BCB4 0000 0000                  	dc.l Map_SS_R
0001BCB8 0251                       	dc.w $251
0001BCBA 0000 0000                  	dc.l Map_SS_R
0001BCBE 0370                       	dc.w $370
0001BCC0 0000 0000                  	dc.l Map_SS_Up
0001BCC4 0263                       	dc.w $263
0001BCC6 0000 0000                  	dc.l Map_SS_Down
0001BCCA 0263                       	dc.w $263
0001BCCC 0000 0000                  	dc.l Map_SS_R
0001BCD0 22F0                       	dc.w $22F0
0001BCD2 0000 0000                  	dc.l Map_SS_Glass
0001BCD6 0470                       	dc.w $470
0001BCD8 0000 0000                  	dc.l Map_SS_Glass
0001BCDC 05F0                       	dc.w $5F0
0001BCDE 0000 0000                  	dc.l Map_SS_Glass
0001BCE2 65F0                       	dc.w $65F0
0001BCE4 0000 0000                  	dc.l Map_SS_Glass
0001BCE8 25F0                       	dc.w $25F0
0001BCEA 0000 0000                  	dc.l Map_SS_Glass
0001BCEE 45F0                       	dc.w $45F0
0001BCF0 0000 0000                  	dc.l Map_SS_R
0001BCF4 02F0                       	dc.w $2F0
0001BCF6 0100 EF36                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BCFA 023B                       	dc.w $23B
0001BCFC 0200 EF36                  	dc.l Map_obj47+$2000000
0001BD00 023B                       	dc.w $23B
0001BD02 0000 0000                  	dc.l Map_SS_R
0001BD06 0797                       	dc.w $797
0001BD08 0000 0000                  	dc.l Map_SS_R
0001BD0C 07A0                       	dc.w $7A0
0001BD0E 0000 0000                  	dc.l Map_SS_R
0001BD12 07A9                       	dc.w $7A9
0001BD14 0000 0000                  	dc.l Map_SS_R
0001BD18 0797                       	dc.w $797
0001BD1A 0000 0000                  	dc.l Map_SS_R
0001BD1E 07A0                       	dc.w $7A0
0001BD20 0000 0000                  	dc.l Map_SS_R
0001BD24 07A9                       	dc.w $7A9
0001BD26 0000 A360                  	dc.l Map_obj25
0001BD2A 27B2                       	dc.w $27B2
0001BD2C 0000 0000                  	dc.l Map_SS_Chaos3
0001BD30 0770                       	dc.w $770
0001BD32 0000 0000                  	dc.l Map_SS_Chaos3
0001BD36 2770                       	dc.w $2770
0001BD38 0000 0000                  	dc.l Map_SS_Chaos3
0001BD3C 4770                       	dc.w $4770
0001BD3E 0000 0000                  	dc.l Map_SS_Chaos3
0001BD42 6770                       	dc.w $6770
0001BD44 0000 0000                  	dc.l Map_SS_Chaos1
0001BD48 0770                       	dc.w $770
0001BD4A 0000 0000                  	dc.l Map_SS_Chaos2
0001BD4E 0770                       	dc.w $770
0001BD50 0000 0000                  	dc.l Map_SS_R
0001BD54 04F0                       	dc.w $4F0
0001BD56 0400 A360                  	dc.l Map_obj25+$4000000
0001BD5A 27B2                       	dc.w $27B2
0001BD5C 0500 A360                  	dc.l Map_obj25+$5000000
0001BD60 27B2                       	dc.w $27B2
0001BD62 0600 A360                  	dc.l Map_obj25+$6000000
0001BD66 27B2                       	dc.w $27B2
0001BD68 0700 A360                  	dc.l Map_obj25+$7000000
0001BD6C 27B2                       	dc.w $27B2
0001BD6E 0000 0000                  	dc.l Map_SS_Glass
0001BD72 23F0                       	dc.w $23F0
0001BD74 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BD78 23F0                       	dc.w $23F0
0001BD7A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BD7E 23F0                       	dc.w $23F0
0001BD80 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BD84 23F0                       	dc.w $23F0
0001BD86 0000 0000                  	dc.l Map_SS_R+$2000000
0001BD8A 04F0                       	dc.w $4F0
0001BD8C 0000 0000                  	dc.l Map_SS_Glass
0001BD90 05F0                       	dc.w $5F0
0001BD92 0000 0000                  	dc.l Map_SS_Glass
0001BD96 65F0                       	dc.w $65F0
0001BD98 0000 0000                  	dc.l Map_SS_Glass
0001BD9C 25F0                       	dc.w $25F0
0001BD9E 0000 0000                  	dc.l Map_SS_Glass
0001BDA2 45F0                       	dc.w $45F0
0001BDA2 45F0                       	dc.w $45F0
0001BDA4                            
0001BDA4                            ; ---------------------------------------------------------------------------
0001BDA4                            ; Sprite mappings - special stage "R" block
0001BDA4                            ; ---------------------------------------------------------------------------
0001BDA4                            Map_SS_R:
0001BDA4                            	include "_maps\SSRblock.asm"
0001BDA4                            ; ---------------------------------------------------------------------------
0001BDA4                            ; Sprite mappings - special stage "R" block
0001BDA4                            ; ---------------------------------------------------------------------------
0001BDA4 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BDA8 0000                       		dc.w byte_1B91E-Map_SS_R
0001BDAA 01                         byte_1B912:	dc.b 1
0001BDAB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BDB0 01                         byte_1B918:	dc.b 1
0001BDB1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BDB6 00                         byte_1B91E:	dc.b 0
0001BDB8 00                         		even
0001BDB8 00                         		even
0001BDB8                            
0001BDB8                            ; ---------------------------------------------------------------------------
0001BDB8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BDB8                            ; ---------------------------------------------------------------------------
0001BDB8                            Map_SS_Glass:
0001BDB8                            	include "_maps\SSglassblock.asm"
0001BDB8                            ; ---------------------------------------------------------------------------
0001BDB8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BDB8                            ; ---------------------------------------------------------------------------
0001BDB8 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BDBC 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BDC0 01                         byte_1B928:	dc.b 1
0001BDC1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BDC6 01                         byte_1B92E:	dc.b 1
0001BDC7 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BDCC 01                         byte_1B934:	dc.b 1
0001BDCD F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BDD2 01                         byte_1B93A:	dc.b 1
0001BDD3 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BDD8                            		even
0001BDD8                            		even
0001BDD8                            
0001BDD8                            ; ---------------------------------------------------------------------------
0001BDD8                            ; Sprite mappings - special stage "UP" block
0001BDD8                            ; ---------------------------------------------------------------------------
0001BDD8                            Map_SS_Up:
0001BDD8                            	include "_maps\SSUPblock.asm"
0001BDD8                            ; ---------------------------------------------------------------------------
0001BDD8                            ; Sprite mappings - special stage "UP" block
0001BDD8                            ; ---------------------------------------------------------------------------
0001BDD8 0000                       		dc.w byte_1B944-Map_SS_Up
0001BDDA 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BDDC 01                         byte_1B944:	dc.b 1
0001BDDD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BDE2 01                         byte_1B94A:	dc.b 1
0001BDE3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BDE8                            		even
0001BDE8                            		even
0001BDE8                            
0001BDE8                            ; ---------------------------------------------------------------------------
0001BDE8                            ; Sprite mappings - special stage "DOWN" block
0001BDE8                            ; ---------------------------------------------------------------------------
0001BDE8                            Map_SS_Down:
0001BDE8                            	include "_maps\SSDOWNblock.asm"
0001BDE8                            ; ---------------------------------------------------------------------------
0001BDE8                            ; Sprite mappings - special stage "DOWN" block
0001BDE8                            ; ---------------------------------------------------------------------------
0001BDE8 0000                       		dc.w byte_1B954-Map_SS_Down
0001BDEA 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BDEC 01                         byte_1B954:	dc.b 1
0001BDED F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BDF2 01                         byte_1B95A:	dc.b 1
0001BDF3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BDF8                            		even
0001BDF8                            		even
0001BDF8                            
0001BDF8                            ; ---------------------------------------------------------------------------
0001BDF8                            ; Sprite mappings - special stage chaos	emeralds
0001BDF8                            ; ---------------------------------------------------------------------------
0001BDF8 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BDFA 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BDFC 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BDFE 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BE00 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BE02 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BE04 01                         byte_1B96C:	dc.b 1
0001BE05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BE0A 01                         byte_1B972:	dc.b 1
0001BE0B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BE10 01                         byte_1B978:	dc.b 1
0001BE11 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BE16 01                         byte_1B97E:	dc.b 1
0001BE17 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BE1C                            		even
0001BE1C                            ; ===========================================================================
0001BE1C                            ; ---------------------------------------------------------------------------
0001BE1C                            ; Object 09 - Sonic (special stage)
0001BE1C                            ; ---------------------------------------------------------------------------
0001BE1C                            
0001BE1C                            Obj09:					; XREF: Obj_Index
0001BE1C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BE20 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BE22 6100 0000                  		bsr.w	SS_FixCamera
0001BE26 6000 0000                  		bra.w	DebugMode
0001BE2A                            ; ===========================================================================
0001BE2A                            
0001BE2A                            Obj09_Normal:
0001BE2A 7000                       		moveq	#0,d0
0001BE2C 1028 0024                  		move.b	$24(a0),d0
0001BE30 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BE34 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BE38                            ; ===========================================================================
0001BE38 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BE3A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BE3C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BE3E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            Obj09_Main:				; XREF: Obj09_Index
0001BE40 5428 0024                  		addq.b	#2,$24(a0)
0001BE44 117C 000E 0016             		move.b	#$E,$16(a0)
0001BE4A 117C 0007 0017             		move.b	#7,$17(a0)
0001BE50 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BE58 317C 0780 0002             		move.w	#$780,2(a0)
0001BE5E 117C 0004 0001             		move.b	#4,1(a0)
0001BE64 117C 0000 0018             		move.b	#0,$18(a0)
0001BE6A 117C 0002 001C             		move.b	#2,$1C(a0)
0001BE70 08E8 0002 0022             		bset	#2,$22(a0)
0001BE76 08E8 0001 0022             		bset	#1,$22(a0)
0001BE7C                            
0001BE7C                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BE7C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BE80 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BE82 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BE88 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BE8A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BE90                            
0001BE90                            Obj09_NoDebug:
0001BE90 117C 0000 0030             		move.b	#0,$30(a0)
0001BE96 7000                       		moveq	#0,d0
0001BE98 1028 0022                  		move.b	$22(a0),d0
0001BE9C 0240 0002                  		andi.w	#2,d0
0001BEA0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BEA4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BEA8 4EBA 8210                  		jsr	LoadSonicDynPLC
0001BEAC 4EF9 0000 DA42             		jmp	DisplaySprite
0001BEB2                            ; ===========================================================================
0001BEB2 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BEB4 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BEB6                            ; ===========================================================================
0001BEB6                            
0001BEB6                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BEB6 6100 0000                  		bsr.w	Obj09_Jump
0001BEBA 6100 0000                  		bsr.w	Obj09_Move
0001BEBE 6100 0000                  		bsr.w	Obj09_Fall
0001BEC2 6000                       		bra.s	Obj09_Display
0001BEC4                            ; ===========================================================================
0001BEC4                            
0001BEC4                            Obj09_InAir:				; XREF: Obj09_Modes
0001BEC4 6100 0000                  		bsr.w	nullsub_2
0001BEC8 6100 0000                  		bsr.w	Obj09_Move
0001BECC 6100 0000                  		bsr.w	Obj09_Fall
0001BED0                            
0001BED0                            Obj09_Display:				; XREF: Obj09_OnWall
0001BED0 6100 0000                  		bsr.w	Obj09_ChkItems
0001BED4 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BED8 4EB9 0000 DA1C             		jsr	SpeedToPos
0001BEDE 6100 0000                  		bsr.w	SS_FixCamera
0001BEE2 3038 F780                  		move.w	($FFFFF780).w,d0
0001BEE6 D078 F782                  		add.w	($FFFFF782).w,d0
0001BEEA 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BEEE 4EB9 0001 3E40             		jsr	Sonic_Animate
0001BEF4 4E75                       		rts	
0001BEF6                            
0001BEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEF6                            
0001BEF6                            
0001BEF6                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BEF6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BEFC 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BEFE 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BF02                            
0001BF02                            Obj09_ChkRight:
0001BF02 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BF08 6700                       		beq.s	loc_1BA78	; if not, branch
0001BF0A 6100 0000                  		bsr.w	Obj09_MoveRight
0001BF0E                            
0001BF0E                            loc_1BA78:
0001BF0E 1038 F602                  		move.b	($FFFFF602).w,d0
0001BF12 0200 000C                  		andi.b	#$C,d0
0001BF16 6600                       		bne.s	loc_1BAA8
0001BF18 3028 0014                  		move.w	$14(a0),d0
0001BF1C 6700                       		beq.s	loc_1BAA8
0001BF1E 6B00                       		bmi.s	loc_1BA9A
0001BF20 0440 000C                  		subi.w	#$C,d0
0001BF24 6400                       		bcc.s	loc_1BA94
0001BF26 303C 0000                  		move.w	#0,d0
0001BF2A                            
0001BF2A                            loc_1BA94:
0001BF2A 3140 0014                  		move.w	d0,$14(a0)
0001BF2E 6000                       		bra.s	loc_1BAA8
0001BF30                            ; ===========================================================================
0001BF30                            
0001BF30                            loc_1BA9A:
0001BF30 0640 000C                  		addi.w	#$C,d0
0001BF34 6400                       		bcc.s	loc_1BAA4
0001BF36 303C 0000                  		move.w	#0,d0
0001BF3A                            
0001BF3A                            loc_1BAA4:
0001BF3A 3140 0014                  		move.w	d0,$14(a0)
0001BF3E                            
0001BF3E                            loc_1BAA8:
0001BF3E 1038 F780                  		move.b	($FFFFF780).w,d0
0001BF42 0600 0020                  		addi.b	#$20,d0
0001BF46 0200 00C0                  		andi.b	#$C0,d0
0001BF4A 4400                       		neg.b	d0
0001BF4C 4EB9 0000 2C22             		jsr	(CalcSine).l
0001BF52 C3E8 0014                  		muls.w	$14(a0),d1
0001BF56 D3A8 0008                  		add.l	d1,8(a0)
0001BF5A C1E8 0014                  		muls.w	$14(a0),d0
0001BF5E D1A8 000C                  		add.l	d0,$C(a0)
0001BF62 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BF66 2428 000C                  		move.l	$C(a0),d2
0001BF6A 2628 0008                  		move.l	8(a0),d3
0001BF6E 6100 0000                  		bsr.w	sub_1BCE8
0001BF72 6700                       		beq.s	loc_1BAF2
0001BF74 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BF78 93A8 0008                  		sub.l	d1,8(a0)
0001BF7C 91A8 000C                  		sub.l	d0,$C(a0)
0001BF80 317C 0000 0014             		move.w	#0,$14(a0)
0001BF86 4E75                       		rts	
0001BF88                            ; ===========================================================================
0001BF88                            
0001BF88                            loc_1BAF2:
0001BF88 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BF8C 4E75                       		rts	
0001BF8E                            ; End of function Obj09_Move
0001BF8E                            
0001BF8E                            
0001BF8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF8E                            
0001BF8E                            
0001BF8E                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BF8E 08E8 0000 0022             		bset	#0,$22(a0)
0001BF94 3028 0014                  		move.w	$14(a0),d0
0001BF98 6700                       		beq.s	loc_1BB06
0001BF9A 6A00                       		bpl.s	loc_1BB1A
0001BF9C                            
0001BF9C                            loc_1BB06:
0001BF9C 0440 000C                  		subi.w	#$C,d0
0001BFA0 0C40 F800                  		cmpi.w	#-$800,d0
0001BFA4 6E00                       		bgt.s	loc_1BB14
0001BFA6 303C F800                  		move.w	#-$800,d0
0001BFAA                            
0001BFAA                            loc_1BB14:
0001BFAA 3140 0014                  		move.w	d0,$14(a0)
0001BFAE 4E75                       		rts	
0001BFB0                            ; ===========================================================================
0001BFB0                            
0001BFB0                            loc_1BB1A:
0001BFB0 0440 0040                  		subi.w	#$40,d0
0001BFB4 6400                       		bcc.s	loc_1BB22
0001BFB6 4E71                       		nop	
0001BFB8                            
0001BFB8                            loc_1BB22:
0001BFB8 3140 0014                  		move.w	d0,$14(a0)
0001BFBC 4E75                       		rts	
0001BFBE                            ; End of function Obj09_MoveLeft
0001BFBE                            
0001BFBE                            
0001BFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFBE                            
0001BFBE                            
0001BFBE                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BFBE 08A8 0000 0022             		bclr	#0,$22(a0)
0001BFC4 3028 0014                  		move.w	$14(a0),d0
0001BFC8 6B00                       		bmi.s	loc_1BB48
0001BFCA 0640 000C                  		addi.w	#$C,d0
0001BFCE 0C40 0800                  		cmpi.w	#$800,d0
0001BFD2 6D00                       		blt.s	loc_1BB42
0001BFD4 303C 0800                  		move.w	#$800,d0
0001BFD8                            
0001BFD8                            loc_1BB42:
0001BFD8 3140 0014                  		move.w	d0,$14(a0)
0001BFDC 6000                       		bra.s	locret_1BB54
0001BFDE                            ; ===========================================================================
0001BFDE                            
0001BFDE                            loc_1BB48:
0001BFDE 0640 0040                  		addi.w	#$40,d0
0001BFE2 6400                       		bcc.s	loc_1BB50
0001BFE4 4E71                       		nop	
0001BFE6                            
0001BFE6                            loc_1BB50:
0001BFE6 3140 0014                  		move.w	d0,$14(a0)
0001BFEA                            
0001BFEA                            locret_1BB54:
0001BFEA 4E75                       		rts	
0001BFEC                            ; End of function Obj09_MoveRight
0001BFEC                            
0001BFEC                            
0001BFEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFEC                            
0001BFEC                            
0001BFEC                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BFEC 1038 F603                  		move.b	($FFFFF603).w,d0
0001BFF0 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BFF4 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BFF6 1038 F780                  		move.b	($FFFFF780).w,d0
0001BFFA 0200 00FC                  		andi.b	#$FC,d0
0001BFFE 4400                       		neg.b	d0
0001C000 0400 0040                  		subi.b	#$40,d0
0001C004 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C00A C3FC 0680                  		muls.w	#$680,d1
0001C00E E081                       		asr.l	#8,d1
0001C010 3141 0010                  		move.w	d1,$10(a0)
0001C014 C1FC 0680                  		muls.w	#$680,d0
0001C018 E080                       		asr.l	#8,d0
0001C01A 3140 0012                  		move.w	d0,$12(a0)
0001C01E 08E8 0001 0022             		bset	#1,$22(a0)
0001C024 303C 00A0                  		move.w	#$A0,d0
0001C028 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C02E                            
0001C02E                            Obj09_NoJump:
0001C02E 4E75                       		rts	
0001C030                            ; End of function Obj09_Jump
0001C030                            
0001C030                            
0001C030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C030                            
0001C030                            
0001C030                            nullsub_2:				; XREF: Obj09_InAir
0001C030 4E75                       		rts	
0001C032                            ; End of function nullsub_2
0001C032                            
0001C032                            ; ===========================================================================
0001C032                            ; ---------------------------------------------------------------------------
0001C032                            ; unused subroutine to limit Sonic's upward vertical speed
0001C032                            ; ---------------------------------------------------------------------------
0001C032 323C FC00                  		move.w	#-$400,d1
0001C036 B268 0012                  		cmp.w	$12(a0),d1
0001C03A 6F00                       		ble.s	locret_1BBB4
0001C03C 1038 F602                  		move.b	($FFFFF602).w,d0
0001C040 0200 0070                  		andi.b	#$70,d0
0001C044 6600                       		bne.s	locret_1BBB4
0001C046 3141 0012                  		move.w	d1,$12(a0)
0001C04A                            
0001C04A                            locret_1BBB4:
0001C04A 4E75                       		rts	
0001C04C                            ; ---------------------------------------------------------------------------
0001C04C                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C04C                            ; ---------------------------------------------------------------------------
0001C04C                            
0001C04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C04C                            
0001C04C                            
0001C04C                            SS_FixCamera:				; XREF: Obj09
0001C04C 3428 000C                  		move.w	$C(a0),d2
0001C050 3628 0008                  		move.w	8(a0),d3
0001C054 3038 F700                  		move.w	($FFFFF700).w,d0
0001C058 0443 00A0                  		subi.w	#$A0,d3
0001C05C 6500                       		bcs.s	loc_1BBCE
0001C05E 9043                       		sub.w	d3,d0
0001C060 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C064                            
0001C064                            loc_1BBCE:
0001C064 3038 F704                  		move.w	($FFFFF704).w,d0
0001C068 0442 0070                  		subi.w	#$70,d2
0001C06C 6500                       		bcs.s	locret_1BBDE
0001C06E 9042                       		sub.w	d2,d0
0001C070 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C074                            
0001C074                            locret_1BBDE:
0001C074 4E75                       		rts	
0001C076                            ; End of function SS_FixCamera
0001C076                            
0001C076                            ; ===========================================================================
0001C076                            
0001C076                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C076 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C07C 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C082 6600                       		bne.s	loc_1BBF4
0001C084 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C08A                            
0001C08A                            loc_1BBF4:
0001C08A 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C090 6D00                       		blt.s	loc_1BC12
0001C092 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C098 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C09E 5428 0024                  		addq.b	#2,$24(a0)
0001C0A2 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C0A8                            
0001C0A8                            loc_1BC12:
0001C0A8 3038 F780                  		move.w	($FFFFF780).w,d0
0001C0AC D078 F782                  		add.w	($FFFFF782).w,d0
0001C0B0 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C0B4 4EB9 0001 3E40             		jsr	Sonic_Animate
0001C0BA 4EB9 0001 40BA             		jsr	LoadSonicDynPLC
0001C0C0 6100 FF8A                  		bsr.w	SS_FixCamera
0001C0C4 4EF9 0000 DA42             		jmp	DisplaySprite
0001C0CA                            ; ===========================================================================
0001C0CA                            
0001C0CA                            Obj09_Exit2:				; XREF: Obj09_Index
0001C0CA 5368 0038                  		subq.w	#1,$38(a0)
0001C0CE 6600                       		bne.s	loc_1BC40
0001C0D0 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C0D6                            
0001C0D6                            loc_1BC40:
0001C0D6 4EB9 0001 3E40             		jsr	Sonic_Animate
0001C0DC 4EB9 0001 40BA             		jsr	LoadSonicDynPLC
0001C0E2 6100 FF68                  		bsr.w	SS_FixCamera
0001C0E6 4EF9 0000 DA42             		jmp	DisplaySprite
0001C0EC                            
0001C0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0EC                            
0001C0EC                            
0001C0EC                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C0EC 2428 000C                  		move.l	$C(a0),d2
0001C0F0 2628 0008                  		move.l	8(a0),d3
0001C0F4 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0F8 0200 00FC                  		andi.b	#$FC,d0
0001C0FC 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C102 3828 0010                  		move.w	$10(a0),d4
0001C106 48C4                       		ext.l	d4
0001C108 E184                       		asl.l	#8,d4
0001C10A C1FC 002A                  		muls.w	#$2A,d0
0001C10E D084                       		add.l	d4,d0
0001C110 3828 0012                  		move.w	$12(a0),d4
0001C114 48C4                       		ext.l	d4
0001C116 E184                       		asl.l	#8,d4
0001C118 C3FC 002A                  		muls.w	#$2A,d1
0001C11C D284                       		add.l	d4,d1
0001C11E D680                       		add.l	d0,d3
0001C120 6100 0000                  		bsr.w	sub_1BCE8
0001C124 6700                       		beq.s	loc_1BCB0
0001C126 9680                       		sub.l	d0,d3
0001C128 7000                       		moveq	#0,d0
0001C12A 3140 0010                  		move.w	d0,$10(a0)
0001C12E 08A8 0001 0022             		bclr	#1,$22(a0)
0001C134 D481                       		add.l	d1,d2
0001C136 6100 0000                  		bsr.w	sub_1BCE8
0001C13A 6700                       		beq.s	loc_1BCC6
0001C13C 9481                       		sub.l	d1,d2
0001C13E 7200                       		moveq	#0,d1
0001C140 3141 0012                  		move.w	d1,$12(a0)
0001C144 4E75                       		rts	
0001C146                            ; ===========================================================================
0001C146                            
0001C146                            loc_1BCB0:
0001C146 D481                       		add.l	d1,d2
0001C148 6100 0000                  		bsr.w	sub_1BCE8
0001C14C 6700                       		beq.s	loc_1BCD4
0001C14E 9481                       		sub.l	d1,d2
0001C150 7200                       		moveq	#0,d1
0001C152 3141 0012                  		move.w	d1,$12(a0)
0001C156 08A8 0001 0022             		bclr	#1,$22(a0)
0001C15C                            
0001C15C                            loc_1BCC6:
0001C15C E080                       		asr.l	#8,d0
0001C15E E081                       		asr.l	#8,d1
0001C160 3140 0010                  		move.w	d0,$10(a0)
0001C164 3141 0012                  		move.w	d1,$12(a0)
0001C168 4E75                       		rts	
0001C16A                            ; ===========================================================================
0001C16A                            
0001C16A                            loc_1BCD4:
0001C16A E080                       		asr.l	#8,d0
0001C16C E081                       		asr.l	#8,d1
0001C16E 3140 0010                  		move.w	d0,$10(a0)
0001C172 3141 0012                  		move.w	d1,$12(a0)
0001C176 08E8 0001 0022             		bset	#1,$22(a0)
0001C17C 4E75                       		rts	
0001C17E                            ; End of function Obj09_Fall
0001C17E                            
0001C17E                            
0001C17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C17E                            
0001C17E                            
0001C17E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C17E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C184 7800                       		moveq	#0,d4
0001C186 4842                       		swap	d2
0001C188 3802                       		move.w	d2,d4
0001C18A 4842                       		swap	d2
0001C18C 0644 0044                  		addi.w	#$44,d4
0001C190 88FC 0018                  		divu.w	#$18,d4
0001C194 C8FC 0080                  		mulu.w	#$80,d4
0001C198 D3C4                       		adda.l	d4,a1
0001C19A 7800                       		moveq	#0,d4
0001C19C 4843                       		swap	d3
0001C19E 3803                       		move.w	d3,d4
0001C1A0 4843                       		swap	d3
0001C1A2 0644 0014                  		addi.w	#$14,d4
0001C1A6 88FC 0018                  		divu.w	#$18,d4
0001C1AA D2C4                       		adda.w	d4,a1
0001C1AC 7A00                       		moveq	#0,d5
0001C1AE 1819                       		move.b	(a1)+,d4
0001C1B0 6100                       		bsr.s	sub_1BD30
0001C1B2 1819                       		move.b	(a1)+,d4
0001C1B4 6100                       		bsr.s	sub_1BD30
0001C1B6 D2FC 007E                  		adda.w	#$7E,a1
0001C1BA 1819                       		move.b	(a1)+,d4
0001C1BC 6100                       		bsr.s	sub_1BD30
0001C1BE 1819                       		move.b	(a1)+,d4
0001C1C0 6100                       		bsr.s	sub_1BD30
0001C1C2 4A05                       		tst.b	d5
0001C1C4 4E75                       		rts	
0001C1C6                            ; End of function sub_1BCE8
0001C1C6                            
0001C1C6                            
0001C1C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1C6                            
0001C1C6                            
0001C1C6                            sub_1BD30:				; XREF: sub_1BCE8
0001C1C6 6700                       		beq.s	locret_1BD44
0001C1C8 0C04 0028                  		cmpi.b	#$28,d4
0001C1CC 6700                       		beq.s	locret_1BD44
0001C1CE 0C04 003A                  		cmpi.b	#$3A,d4
0001C1D2 6500                       		bcs.s	loc_1BD46
0001C1D4 0C04 004B                  		cmpi.b	#$4B,d4
0001C1D8 6400                       		bcc.s	loc_1BD46
0001C1DA                            
0001C1DA                            locret_1BD44:
0001C1DA 4E75                       		rts	
0001C1DC                            ; ===========================================================================
0001C1DC                            
0001C1DC                            loc_1BD46:
0001C1DC 1144 0030                  		move.b	d4,$30(a0)
0001C1E0 2149 0032                  		move.l	a1,$32(a0)
0001C1E4 7AFF                       		moveq	#-1,d5
0001C1E6 4E75                       		rts	
0001C1E8                            ; End of function sub_1BD30
0001C1E8                            
0001C1E8                            
0001C1E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1E8                            
0001C1E8                            
0001C1E8                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C1E8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C1EE 7800                       		moveq	#0,d4
0001C1F0 3828 000C                  		move.w	$C(a0),d4
0001C1F4 0644 0050                  		addi.w	#$50,d4
0001C1F8 88FC 0018                  		divu.w	#$18,d4
0001C1FC C8FC 0080                  		mulu.w	#$80,d4
0001C200 D3C4                       		adda.l	d4,a1
0001C202 7800                       		moveq	#0,d4
0001C204 3828 0008                  		move.w	8(a0),d4
0001C208 0644 0020                  		addi.w	#$20,d4
0001C20C 88FC 0018                  		divu.w	#$18,d4
0001C210 D2C4                       		adda.w	d4,a1
0001C212 1811                       		move.b	(a1),d4
0001C214 6600                       		bne.s	Obj09_ChkCont
0001C216 4A28 003A                  		tst.b	$3A(a0)
0001C21A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C21E 7800                       		moveq	#0,d4
0001C220 4E75                       		rts	
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            Obj09_ChkCont:
0001C222 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C226 6600                       		bne.s	Obj09_Chk1Up
0001C228 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C22C 6600                       		bne.s	Obj09_GetCont
0001C22E 14BC 0001                  		move.b	#1,(a2)
0001C232 2549 0004                  		move.l	a1,4(a2)
0001C236                            
0001C236                            Obj09_GetCont:
0001C236 4EB9 0000 A048             		jsr	CollectRing
0001C23C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C242 6500                       		bcs.s	Obj09_NoCont
0001C244 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C24A 6600                       		bne.s	Obj09_NoCont
0001C24C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C250 303C 00BF                  		move.w	#$BF,d0
0001C254 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C25A                            
0001C25A                            Obj09_NoCont:
0001C25A 7800                       		moveq	#0,d4
0001C25C 4E75                       		rts	
0001C25E                            ; ===========================================================================
0001C25E                            
0001C25E                            Obj09_Chk1Up:
0001C25E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C262 6600                       		bne.s	Obj09_ChkEmer
0001C264 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C268 6600                       		bne.s	Obj09_Get1Up
0001C26A 14BC 0003                  		move.b	#3,(a2)
0001C26E 2549 0004                  		move.l	a1,4(a2)
0001C272                            
0001C272                            Obj09_Get1Up:
0001C272 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C276 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C27A 303C 0088                  		move.w	#$88,d0
0001C27E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C284 7800                       		moveq	#0,d4
0001C286 4E75                       		rts	
0001C288                            ; ===========================================================================
0001C288                            
0001C288                            Obj09_ChkEmer:
0001C288 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C28C 6500                       		bcs.s	Obj09_ChkGhost
0001C28E 0C04 0040                  		cmpi.b	#$40,d4
0001C292 6200                       		bhi.s	Obj09_ChkGhost
0001C294 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C298 6600                       		bne.s	Obj09_GetEmer
0001C29A 14BC 0005                  		move.b	#5,(a2)
0001C29E 2549 0004                  		move.l	a1,4(a2)
0001C2A2                            
0001C2A2                            Obj09_GetEmer:
0001C2A2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C2A8 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C2AA 0404 003B                  		subi.b	#$3B,d4
0001C2AE 7000                       		moveq	#0,d0
0001C2B0 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C2B4 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C2B8 1584 0000                  		move.b	d4,(a2,d0.w)
0001C2BC 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C2C0                            
0001C2C0                            Obj09_NoEmer:
0001C2C0 303C 0093                  		move.w	#$93,d0
0001C2C4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C2CA 7800                       		moveq	#0,d4
0001C2CC 4E75                       		rts	
0001C2CE                            ; ===========================================================================
0001C2CE                            
0001C2CE                            Obj09_ChkGhost:
0001C2CE 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C2D2 6600                       		bne.s	Obj09_ChkGhostTag
0001C2D4 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C2DA                            
0001C2DA                            Obj09_ChkGhostTag:
0001C2DA 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C2DE 6600                       		bne.s	Obj09_NoGhost
0001C2E0 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C2E6 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C2E8 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C2EE                            
0001C2EE                            Obj09_NoGhost:
0001C2EE 78FF                       		moveq	#-1,d4
0001C2F0 4E75                       		rts	
0001C2F2                            ; ===========================================================================
0001C2F2                            
0001C2F2                            Obj09_MakeGhostSolid:
0001C2F2 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C2F8 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C2FA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C300 723F                       		moveq	#$3F,d1
0001C302                            
0001C302                            Obj09_GhostLoop2:
0001C302 743F                       		moveq	#$3F,d2
0001C304                            
0001C304                            Obj09_GhostLoop:
0001C304 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C308 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C30A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C30E                            
0001C30E                            Obj09_NoReplace:
0001C30E 5249                       		addq.w	#1,a1
0001C310 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C314 43E9 0040                  		lea	$40(a1),a1
0001C318 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C31C                            
0001C31C                            Obj09_GhostNotSolid:
0001C31C 4228 003A                  		clr.b	$3A(a0)
0001C320 7800                       		moveq	#0,d4
0001C322 4E75                       		rts	
0001C324                            ; End of function Obj09_ChkItems
0001C324                            
0001C324                            
0001C324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C324                            
0001C324                            
0001C324                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C324 1028 0030                  		move.b	$30(a0),d0
0001C328 6600                       		bne.s	Obj09_ChkBumper
0001C32A 5328 0036                  		subq.b	#1,$36(a0)
0001C32E 6A00                       		bpl.s	loc_1BEA0
0001C330 117C 0000 0036             		move.b	#0,$36(a0)
0001C336                            
0001C336                            loc_1BEA0:
0001C336 5328 0037                  		subq.b	#1,$37(a0)
0001C33A 6A00                       		bpl.s	locret_1BEAC
0001C33C 117C 0000 0037             		move.b	#0,$37(a0)
0001C342                            
0001C342                            locret_1BEAC:
0001C342 4E75                       		rts	
0001C344                            ; ===========================================================================
0001C344                            
0001C344                            Obj09_ChkBumper:
0001C344 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C348 6600                       		bne.s	Obj09_GOAL
0001C34A 2228 0032                  		move.l	$32(a0),d1
0001C34E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C354 3401                       		move.w	d1,d2
0001C356 0241 007F                  		andi.w	#$7F,d1
0001C35A C2FC 0018                  		mulu.w	#$18,d1
0001C35E 0441 0014                  		subi.w	#$14,d1
0001C362 EE4A                       		lsr.w	#7,d2
0001C364 0242 007F                  		andi.w	#$7F,d2
0001C368 C4FC 0018                  		mulu.w	#$18,d2
0001C36C 0442 0044                  		subi.w	#$44,d2
0001C370 9268 0008                  		sub.w	8(a0),d1
0001C374 9468 000C                  		sub.w	$C(a0),d2
0001C378 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C37E 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C384 C3FC F900                  		muls.w	#-$700,d1
0001C388 E081                       		asr.l	#8,d1
0001C38A 3141 0010                  		move.w	d1,$10(a0)
0001C38E C1FC F900                  		muls.w	#-$700,d0
0001C392 E080                       		asr.l	#8,d0
0001C394 3140 0012                  		move.w	d0,$12(a0)
0001C398 08E8 0001 0022             		bset	#1,$22(a0)
0001C39E 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C3A2 6600                       		bne.s	Obj09_BumpSnd
0001C3A4 14BC 0002                  		move.b	#2,(a2)
0001C3A8 2028 0032                  		move.l	$32(a0),d0
0001C3AC 5380                       		subq.l	#1,d0
0001C3AE 2540 0004                  		move.l	d0,4(a2)
0001C3B2                            
0001C3B2                            Obj09_BumpSnd:
0001C3B2 303C 00B4                  		move.w	#$B4,d0
0001C3B6 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C3BC                            ; ===========================================================================
0001C3BC                            
0001C3BC                            Obj09_GOAL:
0001C3BC 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C3C0 6600                       		bne.s	Obj09_UPblock
0001C3C2 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C3C6 303C 00A8                  		move.w	#$A8,d0		; change item
0001C3CA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C3D0 4E75                       		rts	
0001C3D2                            ; ===========================================================================
0001C3D2                            
0001C3D2                            Obj09_UPblock:
0001C3D2 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C3D6 6600                       		bne.s	Obj09_DOWNblock
0001C3D8 4A28 0036                  		tst.b	$36(a0)
0001C3DC 6600 0000                  		bne.w	Obj09_NoGlass
0001C3E0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C3E6 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C3EC 6700                       		beq.s	Obj09_UPsnd
0001C3EE E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C3F2 2268 0032                  		movea.l	$32(a0),a1
0001C3F6 5389                       		subq.l	#1,a1
0001C3F8 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C3FC                            
0001C3FC                            Obj09_UPsnd:
0001C3FC 303C 00A9                  		move.w	#$A9,d0
0001C400 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C406                            ; ===========================================================================
0001C406                            
0001C406                            Obj09_DOWNblock:
0001C406 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C40A 6600                       		bne.s	Obj09_Rblock
0001C40C 4A28 0036                  		tst.b	$36(a0)
0001C410 6600 0000                  		bne.w	Obj09_NoGlass
0001C414 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C41A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C420 6600                       		bne.s	Obj09_DOWNsnd
0001C422 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C426 2268 0032                  		movea.l	$32(a0),a1
0001C42A 5389                       		subq.l	#1,a1
0001C42C 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C430                            
0001C430                            Obj09_DOWNsnd:
0001C430 303C 00A9                  		move.w	#$A9,d0
0001C434 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C43A                            ; ===========================================================================
0001C43A                            
0001C43A                            Obj09_Rblock:
0001C43A 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C43E 6600                       		bne.s	Obj09_ChkGlass
0001C440 4A28 0037                  		tst.b	$37(a0)
0001C444 6600 0000                  		bne.w	Obj09_NoGlass
0001C448 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C44E 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C452 6600                       		bne.s	Obj09_RevStage
0001C454 14BC 0004                  		move.b	#4,(a2)
0001C458 2028 0032                  		move.l	$32(a0),d0
0001C45C 5380                       		subq.l	#1,d0
0001C45E 2540 0004                  		move.l	d0,4(a2)
0001C462                            
0001C462                            Obj09_RevStage:
0001C462 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C466 303C 00A9                  		move.w	#$A9,d0
0001C46A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C470                            ; ===========================================================================
0001C470                            
0001C470                            Obj09_ChkGlass:
0001C470 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C474 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C476 0C00 002E                  		cmpi.b	#$2E,d0
0001C47A 6700                       		beq.s	Obj09_Glass
0001C47C 0C00 002F                  		cmpi.b	#$2F,d0
0001C480 6700                       		beq.s	Obj09_Glass
0001C482 0C00 0030                  		cmpi.b	#$30,d0
0001C486 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C488                            
0001C488                            Obj09_Glass:
0001C488 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C48C 6600                       		bne.s	Obj09_GlassSnd
0001C48E 14BC 0006                  		move.b	#6,(a2)
0001C492 2268 0032                  		movea.l	$32(a0),a1
0001C496 5389                       		subq.l	#1,a1
0001C498 2549 0004                  		move.l	a1,4(a2)
0001C49C 1011                       		move.b	(a1),d0
0001C49E 5200                       		addq.b	#1,d0		; change glass type when touched
0001C4A0 0C00 0030                  		cmpi.b	#$30,d0
0001C4A4 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C4A6 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C4A8                            
0001C4A8                            Obj09_GlassUpdate:
0001C4A8 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C4AC                            
0001C4AC                            Obj09_GlassSnd:
0001C4AC 303C 00BA                  		move.w	#$BA,d0
0001C4B0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C4B6                            ; ===========================================================================
0001C4B6                            
0001C4B6                            Obj09_NoGlass:
0001C4B6 4E75                       		rts	
0001C4B8                            ; End of function Obj09_ChkItems2
0001C4B8                            
0001C4B8                            ; ===========================================================================
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            ; Object 10 - blank
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            
0001C4B8                            Obj10:					; XREF: Obj_Index
0001C4B8 4E75                       		rts	
0001C4BA                            ; ---------------------------------------------------------------------------
0001C4BA                            ; Subroutine to	animate	level graphics
0001C4BA                            ; ---------------------------------------------------------------------------
0001C4BA                            
0001C4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4BA                            
0001C4BA                            
0001C4BA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C4BA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C4BE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C4C0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C4C6 6100 0000                  		bsr.w	AniArt_GiantRing
0001C4CA 7000                       		moveq	#0,d0
0001C4CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C4D0 D040                       		add.w	d0,d0
0001C4D2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C4D6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C4DA                            ; ===========================================================================
0001C4DA                            
0001C4DA                            AniArt_Pause:
0001C4DA 4E75                       		rts	
0001C4DC                            ; End of function AniArt_Load
0001C4DC                            
0001C4DC                            ; ===========================================================================
0001C4DC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C4E0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C4E4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C4E8 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C4EA                            ; ===========================================================================
0001C4EA                            ; ---------------------------------------------------------------------------
0001C4EA                            ; Animated pattern routine - Green Hill
0001C4EA                            ; ---------------------------------------------------------------------------
0001C4EA                            
0001C4EA                            AniArt_GHZ:				; XREF: AniArt_Index
0001C4EA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C4EE 6A00                       		bpl.s	loc_1C08A
0001C4F0 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C4F6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C4FC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C500 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C504 0240 0001                  		andi.w	#1,d0
0001C508 6700                       		beq.s	loc_1C078
0001C50A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C50E                            
0001C50E                            loc_1C078:
0001C50E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C518 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C51C 6000 0000                  		bra.w	LoadTiles
0001C520                            ; ===========================================================================
0001C520                            
0001C520                            loc_1C08A:
0001C520 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C524 6A00                       		bpl.s	loc_1C0C0
0001C526 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C52C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C532 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C536 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C53A 0240 0001                  		andi.w	#1,d0
0001C53E 6700                       		beq.s	loc_1C0AE
0001C540 43E9 0200                  		lea	$200(a1),a1
0001C544                            
0001C544                            loc_1C0AE:
0001C544 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C54E 323C 000F                  		move.w	#$F,d1
0001C552 6000 0000                  		bra.w	LoadTiles
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            loc_1C0C0:
0001C556 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C55A 6A00                       		bpl.s	locret_1C10C
0001C55C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C562 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C566 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C56A 0240 0003                  		andi.w	#3,d0
0001C56E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C572 0800 0000                  		btst	#0,d0
0001C576 6600                       		bne.s	loc_1C0E8
0001C578 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C57E                            
0001C57E                            loc_1C0E8:
0001C57E EF48                       		lsl.w	#7,d0
0001C580 3200                       		move.w	d0,d1
0001C582 D040                       		add.w	d0,d0
0001C584 D041                       		add.w	d1,d0
0001C586 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C590 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C596 43F1 0000                  		lea	(a1,d0.w),a1
0001C59A 323C 000B                  		move.w	#$B,d1
0001C59E 6100 0000                  		bsr.w	LoadTiles
0001C5A2                            
0001C5A2                            locret_1C10C:
0001C5A2 4E75                       		rts	
0001C5A4                            ; ===========================================================================
0001C5A4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C5A8                            ; ===========================================================================
0001C5A8                            ; ---------------------------------------------------------------------------
0001C5A8                            ; Animated pattern routine - Marble
0001C5A8                            ; ---------------------------------------------------------------------------
0001C5A8                            
0001C5A8                            AniArt_MZ:				; XREF: AniArt_Index
0001C5A8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C5AC 6A00                       		bpl.s	loc_1C150
0001C5AE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C5B4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C5BA 7000                       		moveq	#0,d0
0001C5BC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C5C0 5200                       		addq.b	#1,d0
0001C5C2 0C00 0003                  		cmpi.b	#3,d0
0001C5C6 6600                       		bne.s	loc_1C134
0001C5C8 7000                       		moveq	#0,d0
0001C5CA                            
0001C5CA                            loc_1C134:
0001C5CA 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C5CE C0FC 0100                  		mulu.w	#$100,d0
0001C5D2 D2C0                       		adda.w	d0,a1
0001C5D4 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C5DE 323C 0007                  		move.w	#7,d1
0001C5E2 6100 0000                  		bsr.w	LoadTiles
0001C5E6                            
0001C5E6                            loc_1C150:
0001C5E6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C5EA 6A00                       		bpl.s	loc_1C1AE
0001C5EC 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C5F2 7000                       		moveq	#0,d0
0001C5F4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C5F8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C5FE EE58                       		ror.w	#7,d0
0001C600 D8C0                       		adda.w	d0,a4
0001C602 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C60C 7600                       		moveq	#0,d3
0001C60E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C612 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C616 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C61A 343C 0003                  		move.w	#3,d2
0001C61E                            
0001C61E                            loc_1C188:
0001C61E 3003                       		move.w	d3,d0
0001C620 D040                       		add.w	d0,d0
0001C622 0240 001E                  		andi.w	#$1E,d0
0001C626 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C62C 3033 0000                  		move.w	(a3,d0.w),d0
0001C630 47F3 0000                  		lea	(a3,d0.w),a3
0001C634 224C                       		movea.l	a4,a1
0001C636 323C 001F                  		move.w	#$1F,d1
0001C63A 4E93                       		jsr	(a3)
0001C63C 5843                       		addq.w	#4,d3
0001C63E 51CA FFDE                  		dbf	d2,loc_1C188
0001C642 4E75                       		rts	
0001C644                            ; ===========================================================================
0001C644                            
0001C644                            loc_1C1AE:
0001C644 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C648 6A00 0000                  		bpl.w	locret_1C1EA
0001C64C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C652 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C658 7000                       		moveq	#0,d0
0001C65A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C65E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C662 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C668 C0FC 00C0                  		mulu.w	#$C0,d0
0001C66C D2C0                       		adda.w	d0,a1
0001C66E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C678 323C 0005                  		move.w	#5,d1
0001C67C 6000 0000                  		bra.w	LoadTiles
0001C680                            ; ===========================================================================
0001C680                            
0001C680                            locret_1C1EA:
0001C680 4E75                       		rts	
0001C682                            ; ===========================================================================
0001C682                            ; ---------------------------------------------------------------------------
0001C682                            ; Animated pattern routine - Scrap Brain
0001C682                            ; ---------------------------------------------------------------------------
0001C682                            
0001C682                            AniArt_SBZ:				; XREF: AniArt_Index
0001C682 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C686 6700                       		beq.s	loc_1C1F8
0001C688 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C68C 6000                       		bra.s	loc_1C250
0001C68E                            ; ===========================================================================
0001C68E                            
0001C68E                            loc_1C1F8:
0001C68E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C692 6A00                       		bpl.s	loc_1C250
0001C694 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C69A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C6A0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C6AA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C6AE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C6B2 0240 0007                  		andi.w	#7,d0
0001C6B6 6700                       		beq.s	loc_1C234
0001C6B8 5340                       		subq.w	#1,d0
0001C6BA C0FC 0180                  		mulu.w	#$180,d0
0001C6BE 43F1 0000                  		lea	(a1,d0.w),a1
0001C6C2 323C 000B                  		move.w	#$B,d1
0001C6C6 6000 0000                  		bra.w	LoadTiles
0001C6CA                            ; ===========================================================================
0001C6CA                            
0001C6CA                            loc_1C234:
0001C6CA 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C6D0                            
0001C6D0                            loc_1C23A:
0001C6D0 323C 0005                  		move.w	#5,d1
0001C6D4 6100 0000                  		bsr.w	LoadTiles
0001C6D8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C6DE 323C 0005                  		move.w	#5,d1
0001C6E2 6000 0000                  		bra.w	LoadTiles
0001C6E6                            ; ===========================================================================
0001C6E6                            
0001C6E6                            loc_1C250:
0001C6E6 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C6EA 6700                       		beq.s	loc_1C25C
0001C6EC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6F0 6000                       		bra.s	locret_1C2A0
0001C6F2                            ; ===========================================================================
0001C6F2                            
0001C6F2                            loc_1C25C:
0001C6F2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6F6 6A00                       		bpl.s	locret_1C2A0
0001C6F8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C6FE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C704 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C70E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C712 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C716 0240 0007                  		andi.w	#7,d0
0001C71A 6700                       		beq.s	loc_1C298
0001C71C 5340                       		subq.w	#1,d0
0001C71E C0FC 0180                  		mulu.w	#$180,d0
0001C722 43F1 0000                  		lea	(a1,d0.w),a1
0001C726 323C 000B                  		move.w	#$B,d1
0001C72A 6000 0000                  		bra.w	LoadTiles
0001C72E                            ; ===========================================================================
0001C72E                            
0001C72E                            loc_1C298:
0001C72E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C734 609A                       		bra.s	loc_1C23A
0001C736                            ; ===========================================================================
0001C736                            
0001C736                            locret_1C2A0:
0001C736 4E75                       		rts	
0001C738                            ; ===========================================================================
0001C738                            ; ---------------------------------------------------------------------------
0001C738                            ; Animated pattern routine - ending sequence
0001C738                            ; ---------------------------------------------------------------------------
0001C738                            
0001C738                            AniArt_Ending:				; XREF: AniArt_Index
0001C738 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C73C 6A00                       		bpl.s	loc_1C2F4
0001C73E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C744 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C74A 45F8 9400                  		lea	($FFFF9400).w,a2
0001C74E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C752 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C756 0240 0001                  		andi.w	#1,d0
0001C75A 6700                       		beq.s	loc_1C2CE
0001C75C 43E9 0200                  		lea	$200(a1),a1
0001C760 45EA 0200                  		lea	$200(a2),a2
0001C764                            
0001C764                            loc_1C2CE:
0001C764 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C76E 323C 000F                  		move.w	#$F,d1
0001C772 6100 0000                  		bsr.w	LoadTiles
0001C776 224A                       		movea.l	a2,a1
0001C778 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C782 323C 000F                  		move.w	#$F,d1
0001C786 6000 0000                  		bra.w	LoadTiles
0001C78A                            ; ===========================================================================
0001C78A                            
0001C78A                            loc_1C2F4:
0001C78A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C78E 6A00                       		bpl.s	loc_1C33C
0001C790 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C796 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C79A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C79E 0240 0007                  		andi.w	#7,d0
0001C7A2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C7A6 EF48                       		lsl.w	#7,d0
0001C7A8 3200                       		move.w	d0,d1
0001C7AA D040                       		add.w	d0,d0
0001C7AC D041                       		add.w	d1,d0
0001C7AE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C7B8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C7BE 43F1 0000                  		lea	(a1,d0.w),a1
0001C7C2 323C 000B                  		move.w	#$B,d1
0001C7C6 6000 0000                  		bra.w	LoadTiles
0001C7CA                            ; ===========================================================================
0001C7CA 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C7D2                            ; ===========================================================================
0001C7D2                            
0001C7D2                            loc_1C33C:
0001C7D2 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C7D6 6A00                       		bpl.s	loc_1C37A
0001C7D8 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C7DE 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C7E2 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C7E6 0240 0003                  		andi.w	#3,d0
0001C7EA 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C7EE E148                       		lsl.w	#8,d0
0001C7F0 D040                       		add.w	d0,d0
0001C7F2 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C7FC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C800 43F1 0000                  		lea	(a1,d0.w),a1
0001C804 323C 000F                  		move.w	#$F,d1
0001C808 6000 0000                  		bra.w	LoadTiles
0001C80C                            ; ===========================================================================
0001C80C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C810                            ; ===========================================================================
0001C810                            
0001C810                            loc_1C37A:
0001C810 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C814 6A00                       		bpl.s	locret_1C3B4
0001C816 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C81C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C820 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C824 0240 0003                  		andi.w	#3,d0
0001C828 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C82C E148                       		lsl.w	#8,d0
0001C82E D040                       		add.w	d0,d0
0001C830 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C83A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C83E 43F1 0000                  		lea	(a1,d0.w),a1
0001C842 323C 000F                  		move.w	#$F,d1
0001C846 6000 0000                  		bra.w	LoadTiles
0001C84A                            ; ===========================================================================
0001C84A                            
0001C84A                            locret_1C3B4:
0001C84A 4E75                       		rts	
0001C84C                            ; ===========================================================================
0001C84C                            
0001C84C                            AniArt_none:				; XREF: AniArt_Index
0001C84C 4E75                       		rts	
0001C84E                            
0001C84E                            ; ---------------------------------------------------------------------------
0001C84E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C84E                            ; ---------------------------------------------------------------------------
0001C84E                            
0001C84E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C84E                            
0001C84E                            
0001C84E                            LoadTiles:
0001C84E 2C99                       		move.l	(a1)+,(a6)
0001C850 2C99                       		move.l	(a1)+,(a6)
0001C852 2C99                       		move.l	(a1)+,(a6)
0001C854 2C99                       		move.l	(a1)+,(a6)
0001C856 2C99                       		move.l	(a1)+,(a6)
0001C858 2C99                       		move.l	(a1)+,(a6)
0001C85A 2C99                       		move.l	(a1)+,(a6)
0001C85C 2C99                       		move.l	(a1)+,(a6)
0001C85E 51C9 FFEE                  		dbf	d1,LoadTiles
0001C862 4E75                       		rts	
0001C864                            ; End of function LoadTiles
0001C864                            
0001C864                            ; ===========================================================================
0001C864                            ; ---------------------------------------------------------------------------
0001C864                            ; Animated pattern routine - more Marble Zone
0001C864                            ; ---------------------------------------------------------------------------
0001C864 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C868 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C86C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C870 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C874 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C878 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C87C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C880 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C884                            ; ===========================================================================
0001C884                            
0001C884                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C884 2C91                       		move.l	(a1),(a6)
0001C886 43E9 0010                  		lea	$10(a1),a1
0001C88A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C88E 4E75                       		rts	
0001C890                            ; ===========================================================================
0001C890                            
0001C890                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C890 2029 0002                  		move.l	2(a1),d0
0001C894 1029 0001                  		move.b	1(a1),d0
0001C898 E098                       		ror.l	#8,d0
0001C89A 2C80                       		move.l	d0,(a6)
0001C89C 43E9 0010                  		lea	$10(a1),a1
0001C8A0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C8A4 4E75                       		rts	
0001C8A6                            ; ===========================================================================
0001C8A6                            
0001C8A6                            loc_1C410:				; XREF: AniArt_MZextra
0001C8A6 2CA9 0002                  		move.l	2(a1),(a6)
0001C8AA 43E9 0010                  		lea	$10(a1),a1
0001C8AE 51C9 FFF6                  		dbf	d1,loc_1C410
0001C8B2 4E75                       		rts	
0001C8B4                            ; ===========================================================================
0001C8B4                            
0001C8B4                            loc_1C41E:				; XREF: AniArt_MZextra
0001C8B4 2029 0004                  		move.l	4(a1),d0
0001C8B8 1029 0003                  		move.b	3(a1),d0
0001C8BC E098                       		ror.l	#8,d0
0001C8BE 2C80                       		move.l	d0,(a6)
0001C8C0 43E9 0010                  		lea	$10(a1),a1
0001C8C4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C8C8 4E75                       		rts	
0001C8CA                            ; ===========================================================================
0001C8CA                            
0001C8CA                            loc_1C434:				; XREF: AniArt_MZextra
0001C8CA 2CA9 0004                  		move.l	4(a1),(a6)
0001C8CE 43E9 0010                  		lea	$10(a1),a1
0001C8D2 51C9 FFF6                  		dbf	d1,loc_1C434
0001C8D6 4E75                       		rts	
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            loc_1C442:				; XREF: AniArt_MZextra
0001C8D8 2029 0006                  		move.l	6(a1),d0
0001C8DC 1029 0005                  		move.b	5(a1),d0
0001C8E0 E098                       		ror.l	#8,d0
0001C8E2 2C80                       		move.l	d0,(a6)
0001C8E4 43E9 0010                  		lea	$10(a1),a1
0001C8E8 51C9 FFEE                  		dbf	d1,loc_1C442
0001C8EC 4E75                       		rts	
0001C8EE                            ; ===========================================================================
0001C8EE                            
0001C8EE                            loc_1C458:				; XREF: AniArt_MZextra
0001C8EE 2CA9 0006                  		move.l	6(a1),(a6)
0001C8F2 43E9 0010                  		lea	$10(a1),a1
0001C8F6 51C9 FFF6                  		dbf	d1,loc_1C458
0001C8FA 4E75                       		rts	
0001C8FC                            ; ===========================================================================
0001C8FC                            
0001C8FC                            loc_1C466:				; XREF: AniArt_MZextra
0001C8FC 2029 0008                  		move.l	8(a1),d0
0001C900 1029 0007                  		move.b	7(a1),d0
0001C904 E098                       		ror.l	#8,d0
0001C906 2C80                       		move.l	d0,(a6)
0001C908 43E9 0010                  		lea	$10(a1),a1
0001C90C 51C9 FFEE                  		dbf	d1,loc_1C466
0001C910 4E75                       		rts	
0001C912                            ; ===========================================================================
0001C912                            
0001C912                            loc_1C47C:				; XREF: AniArt_MZextra
0001C912 2CA9 0008                  		move.l	8(a1),(a6)
0001C916 43E9 0010                  		lea	$10(a1),a1
0001C91A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C91E 4E75                       		rts	
0001C920                            ; ===========================================================================
0001C920                            
0001C920                            loc_1C48A:				; XREF: AniArt_MZextra
0001C920 2029 000A                  		move.l	$A(a1),d0
0001C924 1029 0009                  		move.b	9(a1),d0
0001C928 E098                       		ror.l	#8,d0
0001C92A 2C80                       		move.l	d0,(a6)
0001C92C 43E9 0010                  		lea	$10(a1),a1
0001C930 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C934 4E75                       		rts	
0001C936                            ; ===========================================================================
0001C936                            
0001C936                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C936 2CA9 000A                  		move.l	$A(a1),(a6)
0001C93A 43E9 0010                  		lea	$10(a1),a1
0001C93E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C942 4E75                       		rts	
0001C944                            ; ===========================================================================
0001C944                            
0001C944                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C944 2029 000C                  		move.l	$C(a1),d0
0001C948 1029 000B                  		move.b	$B(a1),d0
0001C94C E098                       		ror.l	#8,d0
0001C94E 2C80                       		move.l	d0,(a6)
0001C950 43E9 0010                  		lea	$10(a1),a1
0001C954 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C958 4E75                       		rts	
0001C95A                            ; ===========================================================================
0001C95A                            
0001C95A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C95A 2CA9 000C                  		move.l	$C(a1),(a6)
0001C95E 43E9 0010                  		lea	$10(a1),a1
0001C962 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C966 4E75                       		rts	
0001C968                            ; ===========================================================================
0001C968                            
0001C968                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C968 2029 000C                  		move.l	$C(a1),d0
0001C96C E198                       		rol.l	#8,d0
0001C96E 1011                       		move.b	0(a1),d0
0001C970 2C80                       		move.l	d0,(a6)
0001C972 43E9 0010                  		lea	$10(a1),a1
0001C976 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C97A 4E75                       		rts	
0001C97C                            ; ===========================================================================
0001C97C                            
0001C97C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C97C 3CA9 000E                  		move.w	$E(a1),(a6)
0001C980 3C91                       		move.w	0(a1),(a6)
0001C982 43E9 0010                  		lea	$10(a1),a1
0001C986 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C98A 4E75                       		rts	
0001C98C                            ; ===========================================================================
0001C98C                            
0001C98C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C98C 2011                       		move.l	0(a1),d0
0001C98E 1029 000F                  		move.b	$F(a1),d0
0001C992 E098                       		ror.l	#8,d0
0001C994 2C80                       		move.l	d0,(a6)
0001C996 43E9 0010                  		lea	$10(a1),a1
0001C99A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C99E 4E75                       		rts	
0001C9A0                            
0001C9A0                            ; ---------------------------------------------------------------------------
0001C9A0                            ; Animated pattern routine - giant ring
0001C9A0                            ; ---------------------------------------------------------------------------
0001C9A0                            
0001C9A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9A0                            
0001C9A0                            
0001C9A0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C9A0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C9A4 6600                       		bne.s	loc_1C518
0001C9A6 4E75                       		rts	
0001C9A8                            ; ===========================================================================
0001C9A8                            
0001C9A8                            loc_1C518:
0001C9A8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C9AE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C9B4 7000                       		moveq	#0,d0
0001C9B6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C9BA 43F1 0000                  		lea	(a1,d0.w),a1
0001C9BE 0640 8000                  		addi.w	#$8000,d0
0001C9C2 E588                       		lsl.l	#2,d0
0001C9C4 E448                       		lsr.w	#2,d0
0001C9C6 0040 4000                  		ori.w	#$4000,d0
0001C9CA 4840                       		swap	d0
0001C9CC 2D40 0004                  		move.l	d0,4(a6)
0001C9D0 323C 000D                  		move.w	#$D,d1
0001C9D4 6000 FE78                  		bra.w	LoadTiles
0001C9D8                            ; End of function AniArt_GiantRing
0001C9D8                            
0001C9D8                            ; ===========================================================================
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            ; Object 21 - SCORE, TIME, RINGS
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            
0001C9D8                            Obj21:					; XREF: Obj_Index
0001C9D8 7000                       		moveq	#0,d0
0001C9DA 1028 0024                  		move.b	$24(a0),d0
0001C9DE 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C9E2 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C9E6                            ; ===========================================================================
0001C9E6 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C9E8 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C9EA                            ; ===========================================================================
0001C9EA                            
0001C9EA                            Obj21_Main:				; XREF: Obj21_Main
0001C9EA 5428 0024                  		addq.b	#2,$24(a0)
0001C9EE 317C 0090 0008             		move.w	#$90,8(a0)
0001C9F4 317C 0108 000A             		move.w	#$108,$A(a0)
0001C9FA 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CA02 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CA08 117C 0000 0001             		move.b	#0,1(a0)
0001CA0E 117C 0000 0018             		move.b	#0,$18(a0)
0001CA14                            
0001CA14                            Obj21_Flash:				; XREF: Obj21_Main
0001CA14 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CA18 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CA1A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CA1E 4EF9 0000 DA42             		jmp	DisplaySprite
0001CA24                            ; ===========================================================================
0001CA24                            
0001CA24                            Obj21_Flash2:
0001CA24 7000                       		moveq	#0,d0
0001CA26 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CA2C 6600                       		bne.s	Obj21_Display
0001CA2E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CA30 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CA36 6600                       		bne.s	Obj21_Display	; if not, branch
0001CA38 5440                       		addq.w	#2,d0		; make time counter flash red
0001CA3A                            
0001CA3A                            Obj21_Display:
0001CA3A 1140 001A                  		move.b	d0,$1A(a0)
0001CA3E 4EF9 0000 DA42             		jmp	DisplaySprite
0001CA44                            ; ===========================================================================
0001CA44                            ; ---------------------------------------------------------------------------
0001CA44                            ; Sprite mappings - SCORE, TIME, RINGS
0001CA44                            ; ---------------------------------------------------------------------------
0001CA44                            Map_obj21:
0001CA44                            	include "_maps\obj21.asm"
0001CA44                            ; ---------------------------------------------------------------------------
0001CA44                            ; Sprite mappings - SCORE, TIME, RINGS
0001CA44                            ; ---------------------------------------------------------------------------
0001CA44 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CA48 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CA4C 0A                         byte_1C5BC:	dc.b $A
0001CA4D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CA52 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CA57 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CA5C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CA61 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CA66 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CA6B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CA70 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CA75 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CA7A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CA7F 00                         		dc.b 0
0001CA80 0A                         byte_1C5F0:	dc.b $A
0001CA81 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CA86 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CA8B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CA90 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CA95 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CA9A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CA9F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CAA4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CAA9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CAAE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CAB3 00                         		dc.b 0
0001CAB4 0A                         byte_1C624:	dc.b $A
0001CAB5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CABA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CABF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CAC4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CAC9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CACE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CAD3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CAD8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CADD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CAE2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CAE7 00                         		dc.b 0
0001CAE8 0A                         byte_1C658:	dc.b $A
0001CAE9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CAEE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CAF3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CAF8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CAFD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CB02 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CB07 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CB0C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CB11 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CB16 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CB1C 00                         		even
0001CB1C 00                         		even
0001CB1C                            
0001CB1C                            ; ---------------------------------------------------------------------------
0001CB1C                            ; Add points subroutine
0001CB1C                            ; ---------------------------------------------------------------------------
0001CB1C                            
0001CB1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB1C                            
0001CB1C                            
0001CB1C                            AddPoints:
0001CB1C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CB22 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CB26 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CB2A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CB2C 223C 000F 423F             		move.l	#999999,d1
0001CB32 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CB34 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CB38 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CB3A 2481                       		move.l	d1,(a2)
0001CB3C                            
0001CB3C                            loc_1C6AC:
0001CB3C 2013                       		move.l	(a3),d0
0001CB3E B092                       		cmp.l	(a2),d0
0001CB40 6500 0000                  		bcs.w	locret_1C6B6
0001CB44 2480                       		move.l	d0,(a2)
0001CB46                            
0001CB46                            locret_1C6B6:
0001CB46 4E75                       		rts	
0001CB48                            ; End of function AddPoints
0001CB48                            
0001CB48                            ; ---------------------------------------------------------------------------
0001CB48                            ; Subroutine to	update the HUD
0001CB48                            ; ---------------------------------------------------------------------------
0001CB48                            
0001CB48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB48                            
0001CB48                            
0001CB48                            HudUpdate:
0001CB48 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CB4C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CB50 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CB54 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CB56 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CB5A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CB60 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CB64 6100 0000                  		bsr.w	Hud_Score
0001CB68                            
0001CB68                            Hud_ChkRings:
0001CB68 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CB6C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CB6E 6A00                       		bpl.s	loc_1C6E4
0001CB70 6100 0000                  		bsr.w	Hud_LoadZero
0001CB74                            
0001CB74                            loc_1C6E4:
0001CB74 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CB78 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CB7E 7200                       		moveq	#0,d1
0001CB80 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CB84 6100 0000                  		bsr.w	Hud_Rings
0001CB88                            
0001CB88                            Hud_ChkTime:
0001CB88 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CB8C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CB8E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CB92 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CB94 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CB98 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CB9E 6700                       		beq.s	TimeOver	; if yes, branch
0001CBA0 5221                       		addq.b	#1,-(a1)
0001CBA2 0C11 003C                  		cmpi.b	#60,(a1)
0001CBA6 6500                       		bcs.s	Hud_ChkLives
0001CBA8 12BC 0000                  		move.b	#0,(a1)
0001CBAC 5221                       		addq.b	#1,-(a1)
0001CBAE 0C11 003C                  		cmpi.b	#60,(a1)
0001CBB2 6500                       		bcs.s	loc_1C734
0001CBB4 12BC 0000                  		move.b	#0,(a1)
0001CBB8 5221                       		addq.b	#1,-(a1)
0001CBBA 0C11 0009                  		cmpi.b	#9,(a1)
0001CBBE 6500                       		bcs.s	loc_1C734
0001CBC0 12BC 0009                  		move.b	#9,(a1)
0001CBC4                            
0001CBC4                            loc_1C734:
0001CBC4 203C 5E40 0003             		move.l	#$5E400003,d0
0001CBCA 7200                       		moveq	#0,d1
0001CBCC 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CBD0 6100 0000                  		bsr.w	Hud_Mins
0001CBD4 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CBDA 7200                       		moveq	#0,d1
0001CBDC 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CBE0 6100 0000                  		bsr.w	Hud_Secs
0001CBE4                            
0001CBE4                            Hud_ChkLives:
0001CBE4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CBE8 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CBEA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CBEE 6100 0000                  		bsr.w	Hud_Lives
0001CBF2                            
0001CBF2                            Hud_ChkBonus:
0001CBF2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CBF6 6700                       		beq.s	Hud_End		; if not, branch
0001CBF8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CBFC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CC06 7200                       		moveq	#0,d1
0001CC08 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CC0C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC10 7200                       		moveq	#0,d1
0001CC12 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CC16 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC1A                            
0001CC1A                            Hud_End:
0001CC1A 4E75                       		rts	
0001CC1C                            ; ===========================================================================
0001CC1C                            
0001CC1C                            TimeOver:				; XREF: Hud_ChkTime
0001CC1C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CC20 41F8 D000                  		lea	($FFFFD000).w,a0
0001CC24 2448                       		movea.l	a0,a2
0001CC26 6100 E908                  		bsr.w	KillSonic
0001CC2A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CC30 4E75                       		rts	
0001CC32                            ; ===========================================================================
0001CC32                            
0001CC32                            HudDebug:				; XREF: HudUpdate
0001CC32 6100 0000                  		bsr.w	HudDb_XY
0001CC36 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CC3A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CC3C 6A00                       		bpl.s	HudDb_Rings
0001CC3E 6100 0000                  		bsr.w	Hud_LoadZero
0001CC42                            
0001CC42                            HudDb_Rings:
0001CC42 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CC46 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CC4C 7200                       		moveq	#0,d1
0001CC4E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CC52 6100 0000                  		bsr.w	Hud_Rings
0001CC56                            
0001CC56                            HudDb_ObjCount:
0001CC56 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CC5C 7200                       		moveq	#0,d1
0001CC5E 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CC62 6100 0000                  		bsr.w	Hud_Secs
0001CC66 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CC6A 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CC6C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CC70 6100 0000                  		bsr.w	Hud_Lives
0001CC74                            
0001CC74                            HudDb_ChkBonus:
0001CC74 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CC78 6700                       		beq.s	HudDb_End	; if not, branch
0001CC7A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CC7E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CC88 7200                       		moveq	#0,d1
0001CC8A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CC8E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC92 7200                       		moveq	#0,d1
0001CC94 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CC98 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC9C                            
0001CC9C                            HudDb_End:
0001CC9C 4E75                       		rts	
0001CC9E                            ; End of function HudUpdate
0001CC9E                            
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            ; Subroutine to	load "0" on the	HUD
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            
0001CC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC9E                            
0001CC9E                            
0001CC9E                            Hud_LoadZero:				; XREF: HudUpdate
0001CC9E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CCA8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CCAC 343C 0002                  		move.w	#2,d2
0001CCB0 6000                       		bra.s	loc_1C83E
0001CCB2                            ; End of function Hud_LoadZero
0001CCB2                            
0001CCB2                            ; ---------------------------------------------------------------------------
0001CCB2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CCB2                            ; ---------------------------------------------------------------------------
0001CCB2                            
0001CCB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCB2                            
0001CCB2                            
0001CCB2                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CCB2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CCB8 6100 0000                  		bsr.w	Hud_Lives
0001CCBC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CCC6 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CCCA 343C 000E                  		move.w	#$E,d2
0001CCCE                            
0001CCCE                            loc_1C83E:				; XREF: Hud_LoadZero
0001CCCE 43FA 0000                  		lea	Art_Hud(pc),a1
0001CCD2                            
0001CCD2                            loc_1C842:
0001CCD2 323C 000F                  		move.w	#$F,d1
0001CCD6 101A                       		move.b	(a2)+,d0
0001CCD8 6B00                       		bmi.s	loc_1C85E
0001CCDA 4880                       		ext.w	d0
0001CCDC EB48                       		lsl.w	#5,d0
0001CCDE 47F1 0000                  		lea	(a1,d0.w),a3
0001CCE2                            
0001CCE2                            loc_1C852:
0001CCE2 2C9B                       		move.l	(a3)+,(a6)
0001CCE4 51C9 FFFC                  		dbf	d1,loc_1C852
0001CCE8                            
0001CCE8                            loc_1C858:
0001CCE8 51CA FFE8                  		dbf	d2,loc_1C842
0001CCEC                            
0001CCEC 4E75                       		rts	
0001CCEE                            ; ===========================================================================
0001CCEE                            
0001CCEE                            loc_1C85E:
0001CCEE 2CBC 0000 0000             		move.l	#0,(a6)
0001CCF4 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CCF8                            
0001CCF8 60EE                       		bra.s	loc_1C858
0001CCFA                            ; End of function Hud_Base
0001CCFA                            
0001CCFA                            ; ===========================================================================
0001CCFA 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CD06 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CD0A                            ; ---------------------------------------------------------------------------
0001CD0A                            ; Subroutine to	load debug mode	numbers	patterns
0001CD0A                            ; ---------------------------------------------------------------------------
0001CD0A                            
0001CD0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD0A                            
0001CD0A                            
0001CD0A                            HudDb_XY:				; XREF: HudDebug
0001CD0A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CD14 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CD18 4841                       		swap	d1
0001CD1A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CD1E 6100                       		bsr.s	HudDb_XY2
0001CD20 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CD24 4841                       		swap	d1
0001CD26 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CD2A                            ; End of function HudDb_XY
0001CD2A                            
0001CD2A                            
0001CD2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD2A                            
0001CD2A                            
0001CD2A                            HudDb_XY2:
0001CD2A 7C07                       		moveq	#7,d6
0001CD2C 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CD32                            
0001CD32                            HudDb_XYLoop:
0001CD32 E959                       		rol.w	#4,d1
0001CD34 3401                       		move.w	d1,d2
0001CD36 0242 000F                  		andi.w	#$F,d2
0001CD3A 0C42 000A                  		cmpi.w	#$A,d2
0001CD3E 6500                       		bcs.s	loc_1C8B2
0001CD40 5E42                       		addq.w	#7,d2
0001CD42                            
0001CD42                            loc_1C8B2:
0001CD42 EB4A                       		lsl.w	#5,d2
0001CD44 47F1 2000                  		lea	(a1,d2.w),a3
0001CD48 2C9B                       		move.l	(a3)+,(a6)
0001CD4A 2C9B                       		move.l	(a3)+,(a6)
0001CD4C 2C9B                       		move.l	(a3)+,(a6)
0001CD4E 2C9B                       		move.l	(a3)+,(a6)
0001CD50 2C9B                       		move.l	(a3)+,(a6)
0001CD52 2C9B                       		move.l	(a3)+,(a6)
0001CD54 2C9B                       		move.l	(a3)+,(a6)
0001CD56 2C9B                       		move.l	(a3)+,(a6)
0001CD58 4841                       		swap	d1
0001CD5A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CD5E                            
0001CD5E 4E75                       		rts	
0001CD60                            ; End of function HudDb_XY2
0001CD60                            
0001CD60                            ; ---------------------------------------------------------------------------
0001CD60                            ; Subroutine to	load rings numbers patterns
0001CD60                            ; ---------------------------------------------------------------------------
0001CD60                            
0001CD60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD60                            
0001CD60                            
0001CD60                            Hud_Rings:				; XREF: HudUpdate
0001CD60 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CD66 7C02                       		moveq	#2,d6
0001CD68 6000                       		bra.s	Hud_LoadArt
0001CD6A                            ; End of function Hud_Rings
0001CD6A                            
0001CD6A                            ; ---------------------------------------------------------------------------
0001CD6A                            ; Subroutine to	load score numbers patterns
0001CD6A                            ; ---------------------------------------------------------------------------
0001CD6A                            
0001CD6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD6A                            
0001CD6A                            
0001CD6A                            Hud_Score:				; XREF: HudUpdate
0001CD6A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CD70 7C05                       		moveq	#5,d6
0001CD72                            
0001CD72                            Hud_LoadArt:
0001CD72 7800                       		moveq	#0,d4
0001CD74 43FA 0000                  		lea	Art_Hud(pc),a1
0001CD78                            
0001CD78                            Hud_ScoreLoop:
0001CD78 7400                       		moveq	#0,d2
0001CD7A 261A                       		move.l	(a2)+,d3
0001CD7C                            
0001CD7C                            loc_1C8EC:
0001CD7C 9283                       		sub.l	d3,d1
0001CD7E 6500                       		bcs.s	loc_1C8F4
0001CD80 5242                       		addq.w	#1,d2
0001CD82 60F8                       		bra.s	loc_1C8EC
0001CD84                            ; ===========================================================================
0001CD84                            
0001CD84                            loc_1C8F4:
0001CD84 D283                       		add.l	d3,d1
0001CD86 4A42                       		tst.w	d2
0001CD88 6700                       		beq.s	loc_1C8FE
0001CD8A 383C 0001                  		move.w	#1,d4
0001CD8E                            
0001CD8E                            loc_1C8FE:
0001CD8E 4A44                       		tst.w	d4
0001CD90 6700                       		beq.s	loc_1C92C
0001CD92 ED4A                       		lsl.w	#6,d2
0001CD94 2D40 0004                  		move.l	d0,4(a6)
0001CD98 47F1 2000                  		lea	(a1,d2.w),a3
0001CD9C 2C9B                       		move.l	(a3)+,(a6)
0001CD9E 2C9B                       		move.l	(a3)+,(a6)
0001CDA0 2C9B                       		move.l	(a3)+,(a6)
0001CDA2 2C9B                       		move.l	(a3)+,(a6)
0001CDA4 2C9B                       		move.l	(a3)+,(a6)
0001CDA6 2C9B                       		move.l	(a3)+,(a6)
0001CDA8 2C9B                       		move.l	(a3)+,(a6)
0001CDAA 2C9B                       		move.l	(a3)+,(a6)
0001CDAC 2C9B                       		move.l	(a3)+,(a6)
0001CDAE 2C9B                       		move.l	(a3)+,(a6)
0001CDB0 2C9B                       		move.l	(a3)+,(a6)
0001CDB2 2C9B                       		move.l	(a3)+,(a6)
0001CDB4 2C9B                       		move.l	(a3)+,(a6)
0001CDB6 2C9B                       		move.l	(a3)+,(a6)
0001CDB8 2C9B                       		move.l	(a3)+,(a6)
0001CDBA 2C9B                       		move.l	(a3)+,(a6)
0001CDBC                            
0001CDBC                            loc_1C92C:
0001CDBC 0680 0040 0000             		addi.l	#$400000,d0
0001CDC2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CDC6                            
0001CDC6 4E75                       		rts	
0001CDC8                            ; End of function Hud_Score
0001CDC8                            
0001CDC8                            ; ---------------------------------------------------------------------------
0001CDC8                            ; Subroutine to	load countdown numbers on the continue screen
0001CDC8                            ; ---------------------------------------------------------------------------
0001CDC8                            
0001CDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDC8                            
0001CDC8                            
0001CDC8                            ContScrCounter:				; XREF: ContinueScreen
0001CDC8 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CDD2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CDD8 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CDDE 7C01                       		moveq	#1,d6
0001CDE0 7800                       		moveq	#0,d4
0001CDE2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CDE6                            
0001CDE6                            ContScr_Loop:
0001CDE6 7400                       		moveq	#0,d2
0001CDE8 261A                       		move.l	(a2)+,d3
0001CDEA                            
0001CDEA                            loc_1C95A:
0001CDEA 9283                       		sub.l	d3,d1
0001CDEC 6500                       		bcs.s	loc_1C962
0001CDEE 5242                       		addq.w	#1,d2
0001CDF0 60F8                       		bra.s	loc_1C95A
0001CDF2                            ; ===========================================================================
0001CDF2                            
0001CDF2                            loc_1C962:
0001CDF2 D283                       		add.l	d3,d1
0001CDF4 ED4A                       		lsl.w	#6,d2
0001CDF6 47F1 2000                  		lea	(a1,d2.w),a3
0001CDFA 2C9B                       		move.l	(a3)+,(a6)
0001CDFC 2C9B                       		move.l	(a3)+,(a6)
0001CDFE 2C9B                       		move.l	(a3)+,(a6)
0001CE00 2C9B                       		move.l	(a3)+,(a6)
0001CE02 2C9B                       		move.l	(a3)+,(a6)
0001CE04 2C9B                       		move.l	(a3)+,(a6)
0001CE06 2C9B                       		move.l	(a3)+,(a6)
0001CE08 2C9B                       		move.l	(a3)+,(a6)
0001CE0A 2C9B                       		move.l	(a3)+,(a6)
0001CE0C 2C9B                       		move.l	(a3)+,(a6)
0001CE0E 2C9B                       		move.l	(a3)+,(a6)
0001CE10 2C9B                       		move.l	(a3)+,(a6)
0001CE12 2C9B                       		move.l	(a3)+,(a6)
0001CE14 2C9B                       		move.l	(a3)+,(a6)
0001CE16 2C9B                       		move.l	(a3)+,(a6)
0001CE18 2C9B                       		move.l	(a3)+,(a6)
0001CE1A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CE1E                            
0001CE1E 4E75                       		rts	
0001CE20                            ; End of function ContScrCounter
0001CE20                            
0001CE20                            ; ===========================================================================
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            ; HUD counter sizes
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CE24 0000 2710                  Hud_10000:	dc.l 10000
0001CE28 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CE2C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CE30 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CE34 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CE38                            
0001CE38                            ; ---------------------------------------------------------------------------
0001CE38                            ; Subroutine to	load time numbers patterns
0001CE38                            ; ---------------------------------------------------------------------------
0001CE38                            
0001CE38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE38                            
0001CE38                            
0001CE38                            Hud_Mins:				; XREF: Hud_ChkTime
0001CE38 45F9 0001 CE34             		lea	(Hud_1).l,a2
0001CE3E 7C00                       		moveq	#0,d6
0001CE40 6000                       		bra.s	loc_1C9BA
0001CE42                            ; End of function Hud_Mins
0001CE42                            
0001CE42                            
0001CE42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE42                            
0001CE42                            
0001CE42                            Hud_Secs:				; XREF: Hud_ChkTime
0001CE42 45F9 0001 CE30             		lea	(Hud_10).l,a2
0001CE48 7C01                       		moveq	#1,d6
0001CE4A                            
0001CE4A                            loc_1C9BA:
0001CE4A 7800                       		moveq	#0,d4
0001CE4C 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE50                            
0001CE50                            Hud_TimeLoop:
0001CE50 7400                       		moveq	#0,d2
0001CE52 261A                       		move.l	(a2)+,d3
0001CE54                            
0001CE54                            loc_1C9C4:
0001CE54 9283                       		sub.l	d3,d1
0001CE56 6500                       		bcs.s	loc_1C9CC
0001CE58 5242                       		addq.w	#1,d2
0001CE5A 60F8                       		bra.s	loc_1C9C4
0001CE5C                            ; ===========================================================================
0001CE5C                            
0001CE5C                            loc_1C9CC:
0001CE5C D283                       		add.l	d3,d1
0001CE5E 4A42                       		tst.w	d2
0001CE60 6700                       		beq.s	loc_1C9D6
0001CE62 383C 0001                  		move.w	#1,d4
0001CE66                            
0001CE66                            loc_1C9D6:
0001CE66 ED4A                       		lsl.w	#6,d2
0001CE68 2D40 0004                  		move.l	d0,4(a6)
0001CE6C 47F1 2000                  		lea	(a1,d2.w),a3
0001CE70 2C9B                       		move.l	(a3)+,(a6)
0001CE72 2C9B                       		move.l	(a3)+,(a6)
0001CE74 2C9B                       		move.l	(a3)+,(a6)
0001CE76 2C9B                       		move.l	(a3)+,(a6)
0001CE78 2C9B                       		move.l	(a3)+,(a6)
0001CE7A 2C9B                       		move.l	(a3)+,(a6)
0001CE7C 2C9B                       		move.l	(a3)+,(a6)
0001CE7E 2C9B                       		move.l	(a3)+,(a6)
0001CE80 2C9B                       		move.l	(a3)+,(a6)
0001CE82 2C9B                       		move.l	(a3)+,(a6)
0001CE84 2C9B                       		move.l	(a3)+,(a6)
0001CE86 2C9B                       		move.l	(a3)+,(a6)
0001CE88 2C9B                       		move.l	(a3)+,(a6)
0001CE8A 2C9B                       		move.l	(a3)+,(a6)
0001CE8C 2C9B                       		move.l	(a3)+,(a6)
0001CE8E 2C9B                       		move.l	(a3)+,(a6)
0001CE90 0680 0040 0000             		addi.l	#$400000,d0
0001CE96 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CE9A                            
0001CE9A 4E75                       		rts	
0001CE9C                            ; End of function Hud_Secs
0001CE9C                            
0001CE9C                            ; ---------------------------------------------------------------------------
0001CE9C                            ; Subroutine to	load time/ring bonus numbers patterns
0001CE9C                            ; ---------------------------------------------------------------------------
0001CE9C                            
0001CE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE9C                            
0001CE9C                            
0001CE9C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CE9C 45F9 0001 CE28             		lea	(Hud_1000).l,a2
0001CEA2 7C03                       		moveq	#3,d6
0001CEA4 7800                       		moveq	#0,d4
0001CEA6 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEAA                            
0001CEAA                            Hud_BonusLoop:
0001CEAA 7400                       		moveq	#0,d2
0001CEAC 261A                       		move.l	(a2)+,d3
0001CEAE                            
0001CEAE                            loc_1CA1E:
0001CEAE 9283                       		sub.l	d3,d1
0001CEB0 6500                       		bcs.s	loc_1CA26
0001CEB2 5242                       		addq.w	#1,d2
0001CEB4 60F8                       		bra.s	loc_1CA1E
0001CEB6                            ; ===========================================================================
0001CEB6                            
0001CEB6                            loc_1CA26:
0001CEB6 D283                       		add.l	d3,d1
0001CEB8 4A42                       		tst.w	d2
0001CEBA 6700                       		beq.s	loc_1CA30
0001CEBC 383C 0001                  		move.w	#1,d4
0001CEC0                            
0001CEC0                            loc_1CA30:
0001CEC0 4A44                       		tst.w	d4
0001CEC2 6700                       		beq.s	Hud_ClrBonus
0001CEC4 ED4A                       		lsl.w	#6,d2
0001CEC6 47F1 2000                  		lea	(a1,d2.w),a3
0001CECA 2C9B                       		move.l	(a3)+,(a6)
0001CECC 2C9B                       		move.l	(a3)+,(a6)
0001CECE 2C9B                       		move.l	(a3)+,(a6)
0001CED0 2C9B                       		move.l	(a3)+,(a6)
0001CED2 2C9B                       		move.l	(a3)+,(a6)
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 2C9B                       		move.l	(a3)+,(a6)
0001CEDC 2C9B                       		move.l	(a3)+,(a6)
0001CEDE 2C9B                       		move.l	(a3)+,(a6)
0001CEE0 2C9B                       		move.l	(a3)+,(a6)
0001CEE2 2C9B                       		move.l	(a3)+,(a6)
0001CEE4 2C9B                       		move.l	(a3)+,(a6)
0001CEE6 2C9B                       		move.l	(a3)+,(a6)
0001CEE8 2C9B                       		move.l	(a3)+,(a6)
0001CEEA                            
0001CEEA                            loc_1CA5A:
0001CEEA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CEEE                            
0001CEEE 4E75                       		rts	
0001CEF0                            ; ===========================================================================
0001CEF0                            
0001CEF0                            Hud_ClrBonus:
0001CEF0 7A0F                       		moveq	#$F,d5
0001CEF2                            
0001CEF2                            Hud_ClrBonusLoop:
0001CEF2 2CBC 0000 0000             		move.l	#0,(a6)
0001CEF8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CEFC                            
0001CEFC 60EC                       		bra.s	loc_1CA5A
0001CEFE                            ; End of function Hud_TimeRingBonus
0001CEFE                            
0001CEFE                            ; ---------------------------------------------------------------------------
0001CEFE                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CEFE                            ; ---------------------------------------------------------------------------
0001CEFE                            
0001CEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEFE                            
0001CEFE                            
0001CEFE                            Hud_Lives:				; XREF: Hud_ChkLives
0001CEFE 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CF04 7200                       		moveq	#0,d1
0001CF06 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CF0A 45F9 0001 CE30             		lea	(Hud_10).l,a2
0001CF10 7C01                       		moveq	#1,d6
0001CF12 7800                       		moveq	#0,d4
0001CF14 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CF18                            
0001CF18                            Hud_LivesLoop:
0001CF18 2D40 0004                  		move.l	d0,4(a6)
0001CF1C 7400                       		moveq	#0,d2
0001CF1E 261A                       		move.l	(a2)+,d3
0001CF20                            
0001CF20                            loc_1CA90:
0001CF20 9283                       		sub.l	d3,d1
0001CF22 6500                       		bcs.s	loc_1CA98
0001CF24 5242                       		addq.w	#1,d2
0001CF26 60F8                       		bra.s	loc_1CA90
0001CF28                            ; ===========================================================================
0001CF28                            
0001CF28                            loc_1CA98:
0001CF28 D283                       		add.l	d3,d1
0001CF2A 4A42                       		tst.w	d2
0001CF2C 6700                       		beq.s	loc_1CAA2
0001CF2E 383C 0001                  		move.w	#1,d4
0001CF32                            
0001CF32                            loc_1CAA2:
0001CF32 4A44                       		tst.w	d4
0001CF34 6700                       		beq.s	Hud_ClrLives
0001CF36                            
0001CF36                            loc_1CAA6:
0001CF36 EB4A                       		lsl.w	#5,d2
0001CF38 47F1 2000                  		lea	(a1,d2.w),a3
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E 2C9B                       		move.l	(a3)+,(a6)
0001CF40 2C9B                       		move.l	(a3)+,(a6)
0001CF42 2C9B                       		move.l	(a3)+,(a6)
0001CF44 2C9B                       		move.l	(a3)+,(a6)
0001CF46 2C9B                       		move.l	(a3)+,(a6)
0001CF48 2C9B                       		move.l	(a3)+,(a6)
0001CF4A 2C9B                       		move.l	(a3)+,(a6)
0001CF4C                            
0001CF4C                            loc_1CABC:
0001CF4C 0680 0040 0000             		addi.l	#$400000,d0
0001CF52 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CF56                            
0001CF56 4E75                       		rts	
0001CF58                            ; ===========================================================================
0001CF58                            
0001CF58                            Hud_ClrLives:
0001CF58 4A46                       		tst.w	d6
0001CF5A 67DA                       		beq.s	loc_1CAA6
0001CF5C 7A07                       		moveq	#7,d5
0001CF5E                            
0001CF5E                            Hud_ClrLivesLoop:
0001CF5E 2CBC 0000 0000             		move.l	#0,(a6)
0001CF64 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CF68 60E2                       		bra.s	loc_1CABC
0001CF6A                            ; End of function Hud_Lives
0001CF6A                            
0001CF6A                            ; ===========================================================================
0001CF6A                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D26A                            		even
0001D26A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D3AA                            		even
0001D3AA                            ; ===========================================================================
0001D3AA                            ; ---------------------------------------------------------------------------
0001D3AA                            ; When debug mode is currently in use
0001D3AA                            ; ---------------------------------------------------------------------------
0001D3AA                            
0001D3AA                            DebugMode:				; XREF: Obj01; Obj09
0001D3AA 7000                       		moveq	#0,d0
0001D3AC 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D3B0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D3B4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D3B8                            ; ===========================================================================
0001D3B8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D3BA 0000                       		dc.w Debug_Skip-Debug_Index
0001D3BC                            ; ===========================================================================
0001D3BC                            
0001D3BC                            Debug_Main:				; XREF: Debug_Index
0001D3BC 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D3C0 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D3C6 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D3CC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D3D2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D3D8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D3DE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D3E4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D3EA 117C 0000 001A             		move.b	#0,$1A(a0)
0001D3F0 117C 0000 001C             		move.b	#0,$1C(a0)
0001D3F6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D3FC 6600                       		bne.s	Debug_Zone	; if not, branch
0001D3FE 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D404 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D40A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D40C 6000                       		bra.s	Debug_UseList
0001D40E                            ; ===========================================================================
0001D40E                            
0001D40E                            Debug_Zone:
0001D40E 7000                       		moveq	#0,d0
0001D410 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D414                            
0001D414                            Debug_UseList:
0001D414 45F9 0000 0000             		lea	(DebugList).l,a2
0001D41A D040                       		add.w	d0,d0
0001D41C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D420 3C1A                       		move.w	(a2)+,d6
0001D422 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D426 6200                       		bhi.s	loc_1CF9E
0001D428 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D42E                            
0001D42E                            loc_1CF9E:
0001D42E 6100 0000                  		bsr.w	Debug_ShowItem
0001D432 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D438 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D43E                            
0001D43E                            Debug_Skip:				; XREF: Debug_Index
0001D43E 7006                       		moveq	#6,d0
0001D440 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D446 6700                       		beq.s	loc_1CFBE
0001D448 7000                       		moveq	#0,d0
0001D44A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D44E                            
0001D44E                            loc_1CFBE:
0001D44E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D454 D040                       		add.w	d0,d0
0001D456 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D45A 3C1A                       		move.w	(a2)+,d6
0001D45C 6100 0000                  		bsr.w	Debug_Control
0001D460 4EF9 0000 DA42             		jmp	DisplaySprite
0001D466                            
0001D466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D466                            
0001D466                            
0001D466                            Debug_Control:
0001D466 7800                       		moveq	#0,d4
0001D468 323C 0001                  		move.w	#1,d1
0001D46C 1838 F605                  		move.b	($FFFFF605).w,d4
0001D470 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D474 6600                       		bne.s	loc_1D018	; if yes, branch
0001D476 1038 F604                  		move.b	($FFFFF604).w,d0
0001D47A 0240 000F                  		andi.w	#$F,d0
0001D47E 6600                       		bne.s	loc_1D000
0001D480 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D486 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D48C 6000 0000                  		bra.w	Debug_BackItem
0001D490                            ; ===========================================================================
0001D490                            
0001D490                            loc_1D000:
0001D490 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D494 6600                       		bne.s	loc_1D01C
0001D496 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D49C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D4A0 6600                       		bne.s	loc_1D018
0001D4A2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D4A8                            
0001D4A8                            loc_1D018:
0001D4A8 1838 F604                  		move.b	($FFFFF604).w,d4
0001D4AC                            
0001D4AC                            loc_1D01C:
0001D4AC 7200                       		moveq	#0,d1
0001D4AE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D4B2 5241                       		addq.w	#1,d1
0001D4B4 4841                       		swap	d1
0001D4B6 E881                       		asr.l	#4,d1
0001D4B8 2428 000C                  		move.l	$C(a0),d2
0001D4BC 2628 0008                  		move.l	8(a0),d3
0001D4C0 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D4C4 6700                       		beq.s	loc_1D03C	; if not, branch
0001D4C6 9481                       		sub.l	d1,d2
0001D4C8 6400                       		bcc.s	loc_1D03C
0001D4CA 7400                       		moveq	#0,d2
0001D4CC                            
0001D4CC                            loc_1D03C:
0001D4CC 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D4D0 6700                       		beq.s	loc_1D052	; if not, branch
0001D4D2 D481                       		add.l	d1,d2
0001D4D4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D4DA 6500                       		bcs.s	loc_1D052
0001D4DC 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D4E2                            
0001D4E2                            loc_1D052:
0001D4E2 0804 0002                  		btst	#2,d4
0001D4E6 6700                       		beq.s	loc_1D05E
0001D4E8 9681                       		sub.l	d1,d3
0001D4EA 6400                       		bcc.s	loc_1D05E
0001D4EC 7600                       		moveq	#0,d3
0001D4EE                            
0001D4EE                            loc_1D05E:
0001D4EE 0804 0003                  		btst	#3,d4
0001D4F2 6700                       		beq.s	loc_1D066
0001D4F4 D681                       		add.l	d1,d3
0001D4F6                            
0001D4F6                            loc_1D066:
0001D4F6 2142 000C                  		move.l	d2,$C(a0)
0001D4FA 2143 0008                  		move.l	d3,8(a0)
0001D4FE                            
0001D4FE                            Debug_BackItem:
0001D4FE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D504 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D506 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D50C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D50E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D512 6400                       		bcc.s	Debug_NoLoop
0001D514 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D518 6000                       		bra.s	Debug_NoLoop
0001D51A                            ; ===========================================================================
0001D51A                            
0001D51A                            Debug_NextItem:
0001D51A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D520 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D522 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D526 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D52A 6200                       		bhi.s	Debug_NoLoop
0001D52C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D532                            
0001D532                            Debug_NoLoop:
0001D532 6000 0000                  		bra.w	Debug_ShowItem
0001D536                            ; ===========================================================================
0001D536                            
0001D536                            Debug_MakeItem:
0001D536 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D53C 6700                       		beq.s	Debug_Exit	; if not, branch
0001D53E 4EB9 0000 DEC8             		jsr	SingleObjLoad
0001D544 6600                       		bne.s	Debug_Exit
0001D546 3368 0008 0008             		move.w	8(a0),8(a1)
0001D54C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D552 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D556 1368 0001 0001             		move.b	1(a0),1(a1)
0001D55C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D562 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D568 7000                       		moveq	#0,d0
0001D56A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D56E E748                       		lsl.w	#3,d0
0001D570 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D576 4E75                       		rts	
0001D578                            ; ===========================================================================
0001D578                            
0001D578                            Debug_Exit:
0001D578 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D57E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D580 7000                       		moveq	#0,d0
0001D582 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D586 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D58E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D594 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D598 3140 000A                  		move.w	d0,$A(a0)
0001D59C 3140 000E                  		move.w	d0,$E(a0)
0001D5A0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D5A6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D5AC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D5B2 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D5B4 4278 F780                  		clr.w	($FFFFF780).w
0001D5B8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D5BE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D5C6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D5CC 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D5D2 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D5D8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D5DE                            
0001D5DE                            Debug_DoNothing:
0001D5DE 4E75                       		rts	
0001D5E0                            ; End of function Debug_Control
0001D5E0                            
0001D5E0                            
0001D5E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5E0                            
0001D5E0                            
0001D5E0                            Debug_ShowItem:				; XREF: Debug_Main
0001D5E0 7000                       		moveq	#0,d0
0001D5E2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D5E6 E748                       		lsl.w	#3,d0
0001D5E8 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D5EE 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D5F4 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D5FA 4E75                       		rts	
0001D5FC                            ; End of function Debug_ShowItem
0001D5FC                            
0001D5FC                            ; ===========================================================================
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            ; Debug	list pointers
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            DebugList:
0001D5FC                            	include "_inc\Debug list pointers.asm"
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            ; Debug	list pointers
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC 0000                       	dc.w Debug_GHZ-DebugList
0001D5FE 0000                       	dc.w Debug_LZ-DebugList
0001D600 0000                       	dc.w Debug_MZ-DebugList
0001D602 0000                       	dc.w Debug_SLZ-DebugList
0001D604 0000                       	dc.w Debug_SYZ-DebugList
0001D606 0000                       	dc.w Debug_SBZ-DebugList
0001D608 0000                       	dc.w Debug_Ending-DebugList
0001D608 0000                       	dc.w Debug_Ending-DebugList
0001D60A                            
0001D60A                            ; ---------------------------------------------------------------------------
0001D60A                            ; Debug	list - Green Hill
0001D60A                            ; ---------------------------------------------------------------------------
0001D60A                            Debug_GHZ:
0001D60A                            	include "_inc\Debug list - GHZ.asm"
0001D60A                            ; ---------------------------------------------------------------------------
0001D60A                            ; Debug	list - Green Hill
0001D60A                            ; ---------------------------------------------------------------------------
0001D60A 0010                       	dc.w $10			; number of items in list
0001D60C 2500 A360                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D610 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D614 2600 A966                  	dc.l Map_obj26+$26000000
0001D618 0000 0680                  	dc.b 0,	0, 6, $80
0001D61C 1F00 9B34                  	dc.l Map_obj1F+$1F000000
0001D620 0000 0400                  	dc.b 0,	0, 4, 0
0001D624 2200 9E14                  	dc.l Map_obj22+$22000000
0001D628 0000 0444                  	dc.b 0,	0, 4, $44
0001D62C 2B00 AF66                  	dc.l Map_obj2B+$2B000000
0001D630 0000 047B                  	dc.b 0,	0, 4, $7B
0001D634 3600 D42A                  	dc.l Map_obj36+$36000000
0001D638 0000 051B                  	dc.b 0,	0, 5, $1B
0001D63C 1800 84E2                  	dc.l Map_obj18+$18000000
0001D640 0000 4000                  	dc.b 0,	0, $40,	0
0001D644 3B00 D550                  	dc.l Map_obj3B+$3B000000
0001D648 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D64C 4000 FBDC                  	dc.l Map_obj40+$40000000
0001D650 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D654 4100 E156                  	dc.l Map_obj41+$41000000
0001D658 0000 0523                  	dc.b 0,	0, 5, $23
0001D65C 4200 E37C                  	dc.l Map_obj42+$42000000
0001D660 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D664 4400 E68A                  	dc.l Map_obj44+$44000000
0001D668 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D66C 1900 8550                  	dc.l Map_obj48+$19000000
0001D670 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D674 7901 7572                  	dc.l Map_obj79+$79000000
0001D678 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D67C 4B00 A3A0                  	dc.l Map_obj4B+$4B000000
0001D680 0000 2400                  	dc.b 0,	0, $24,	0
0001D684 7D01 76C2                  	dc.l Map_obj7D+$7D000000
0001D688 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D68C                            	even
0001D68C                            	even
0001D68C                            
0001D68C                            ; ---------------------------------------------------------------------------
0001D68C                            ; Debug	list - Labyrinth
0001D68C                            ; ---------------------------------------------------------------------------
0001D68C                            Debug_LZ:
0001D68C                            	include "_inc\Debug list - LZ.asm"
0001D68C                            ; ---------------------------------------------------------------------------
0001D68C                            ; Debug	list - Labyrinth
0001D68C                            ; ---------------------------------------------------------------------------
0001D68C 0019                       	dc.w $19
0001D68E 2500 A360                  	dc.l Map_obj25+$25000000
0001D692 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D696 2600 A966                  	dc.l Map_obj26+$26000000
0001D69A 0000 0680                  	dc.b 0,	0, 6, $80
0001D69E 4100 E156                  	dc.l Map_obj41+$41000000
0001D6A2 0000 0523                  	dc.b 0,	0, 5, $23
0001D6A6 2C00 B00C                  	dc.l Map_obj2C+$2C000000
0001D6AA 0800 2486                  	dc.b 8,	0, $24,	$86
0001D6AE 2D00 B1F8                  	dc.l Map_obj2D+$2D000000
0001D6B2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D6B6 1601 23B8                  	dc.l Map_obj16+$16000000
0001D6BA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D6BE 1601 23B8                  	dc.l Map_obj16+$16000000
0001D6C2 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D6C6 3300 C676                  	dc.l Map_obj33+$33000000
0001D6CA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D6CE 3200 C236                  	dc.l Map_obj32+$32000000
0001D6D2 0000 0513                  	dc.b 0,	0, 5, $13
0001D6D6 3600 D42A                  	dc.l Map_obj36+$36000000
0001D6DA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D6DE 5201 04DA                  	dc.l Map_obj52a+$52000000
0001D6E2 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D6E6 6101 25E0                  	dc.l Map_obj61+$61000000
0001D6EA 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D6EE 6101 25E0                  	dc.l Map_obj61+$61000000
0001D6F2 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D6F6 6101 25E0                  	dc.l Map_obj61+$61000000
0001D6FA 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D6FE 6201 2734                  	dc.l Map_obj62+$62000000
0001D702 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D706 6101 25E0                  	dc.l Map_obj61+$61000000
0001D70A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D70E 6101 25E0                  	dc.l Map_obj61+$61000000
0001D712 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D716 6301 2A96                  	dc.l Map_obj63+$63000000
0001D71A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D71E 6001 2302                  	dc.l Map_obj60+$60000000
0001D722 0000 0467                  	dc.b 0,	0, 4, $67
0001D726 6401 2DDC                  	dc.l Map_obj64+$64000000
0001D72A 8413 8348                  	dc.b $84, $13, $83, $48
0001D72E 6501 2F64                  	dc.l Map_obj65+$65000000
0001D732 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D736 6501 2F64                  	dc.l Map_obj65+$65000000
0001D73A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D73E 0B01 1752                  	dc.l Map_obj0B+$B000000
0001D742 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D746 0C01 1822                  	dc.l Map_obj0C+$C000000
0001D74A 0200 4328                  	dc.b 2,	0, $43,	$28
0001D74E 7901 7572                  	dc.l Map_obj79+$79000000
0001D752 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D756                            	even
0001D756                            	even
0001D756                            
0001D756                            ; ---------------------------------------------------------------------------
0001D756                            ; Debug	list - Marble
0001D756                            ; ---------------------------------------------------------------------------
0001D756                            Debug_MZ:
0001D756                            	include "_inc\Debug list - MZ.asm"
0001D756                            ; ---------------------------------------------------------------------------
0001D756                            ; Debug	list - Marble
0001D756                            ; ---------------------------------------------------------------------------
0001D756 0012                       	dc.w $12
0001D758 2500 A360                  	dc.l Map_obj25+$25000000
0001D75C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D760 2600 A966                  	dc.l Map_obj26+$26000000
0001D764 0000 0680                  	dc.b 0,	0, 6, $80
0001D768 2200 9E14                  	dc.l Map_obj22+$22000000
0001D76C 0000 0444                  	dc.b 0,	0, 4, $44
0001D770 3600 D42A                  	dc.l Map_obj36+$36000000
0001D774 0000 051B                  	dc.b 0,	0, 5, $1B
0001D778 4100 E156                  	dc.l Map_obj41+$41000000
0001D77C 0000 0523                  	dc.b 0,	0, 5, $23
0001D780 1300 B706                  	dc.l Map_obj14+$13000000
0001D784 0000 0345                  	dc.b 0,	0, 3, $45
0001D788 4600 ED3C                  	dc.l Map_obj46+$46000000
0001D78C 0000 4000                  	dc.b 0,	0, $40,	0
0001D790 4C00 F688                  	dc.l Map_obj4C+$4C000000
0001D794 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D798 4E00 F96C                  	dc.l Map_obj4E+$4E000000
0001D79C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D7A0 3300 C676                  	dc.l Map_obj33+$33000000
0001D7A4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D7A8 5000 FD6A                  	dc.l Map_obj50+$50000000
0001D7AC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D7B0 5101 020E                  	dc.l Map_obj51+$51000000
0001D7B4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D7B8 5201 0484                  	dc.l Map_obj52+$52000000
0001D7BC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D7C0 5300 8AE8                  	dc.l Map_obj53+$53000000
0001D7C4 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D7C8 5400 F64E                  	dc.l Map_obj54+$54000000
0001D7CC 0000 8680                  	dc.b 0,	0, $86,	$80
0001D7D0 5501 0678                  	dc.l Map_obj55+$55000000
0001D7D4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D7D8 7801 71EC                  	dc.l Map_obj78+$78000000
0001D7DC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D7E0 7901 7572                  	dc.l Map_obj79+$79000000
0001D7E4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7E8                            	even
0001D7E8                            	even
0001D7E8                            
0001D7E8                            ; ---------------------------------------------------------------------------
0001D7E8                            ; Debug	list - Star Light
0001D7E8                            ; ---------------------------------------------------------------------------
0001D7E8                            Debug_SLZ:
0001D7E8                            	include "_inc\Debug list - SLZ.asm"
0001D7E8                            ; ---------------------------------------------------------------------------
0001D7E8                            ; Debug	list - Star Light
0001D7E8                            ; ---------------------------------------------------------------------------
0001D7E8 000F                       	dc.w $F
0001D7EA 2500 A360                  	dc.l Map_obj25+$25000000
0001D7EE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D7F2 2600 A966                  	dc.l Map_obj26+$26000000
0001D7F6 0000 0680                  	dc.b 0,	0, 6, $80
0001D7FA 5901 117A                  	dc.l Map_obj59+$59000000
0001D7FE 0000 4000                  	dc.b 0,	0, $40,	0
0001D802 5300 8AE8                  	dc.l Map_obj53+$53000000
0001D806 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D80A 1800 8540                  	dc.l Map_obj18b+$18000000
0001D80E 0000 4000                  	dc.b 0,	0, $40,	0
0001D812 5A01 12B4                  	dc.l Map_obj5A+$5A000000
0001D816 0000 4000                  	dc.b 0,	0, $40,	0
0001D81A 5B01 146C                  	dc.l Map_obj5B+$5B000000
0001D81E 0000 4000                  	dc.b 0,	0, $40,	0
0001D822 5D01 1A3C                  	dc.l Map_obj5D+$5D000000
0001D826 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D82A 5E01 1DCE                  	dc.l Map_obj5E+$5E000000
0001D82E 0000 0374                  	dc.b 0,	0, 3, $74
0001D832 4100 E156                  	dc.l Map_obj41+$41000000
0001D836 0000 0523                  	dc.b 0,	0, 5, $23
0001D83A 1300 B706                  	dc.l Map_obj14+$13000000
0001D83E 0000 0480                  	dc.b 0,	0, 4, $80
0001D842 1C00 8BF8                  	dc.l Map_obj1C+$1C000000
0001D846 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D84A 5F01 204C                  	dc.l Map_obj5F+$5F000000
0001D84E 0000 0400                  	dc.b 0,	0, 4, 0
0001D852 6001 2302                  	dc.l Map_obj60+$60000000
0001D856 0000 2429                  	dc.b 0,	0, $24,	$29
0001D85A 7901 7572                  	dc.l Map_obj79+$79000000
0001D85E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D862                            	even
0001D862                            	even
0001D862                            
0001D862                            ; ---------------------------------------------------------------------------
0001D862                            ; Debug	list - Spring Yard
0001D862                            ; ---------------------------------------------------------------------------
0001D862                            Debug_SYZ:
0001D862                            	include "_inc\Debug list - SYZ.asm"
0001D862                            ; ---------------------------------------------------------------------------
0001D862                            ; Debug	list - Spring Yard
0001D862                            ; ---------------------------------------------------------------------------
0001D862 000F                       	dc.w $F
0001D864 2500 A360                  	dc.l Map_obj25+$25000000
0001D868 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D86C 2600 A966                  	dc.l Map_obj26+$26000000
0001D870 0000 0680                  	dc.b 0,	0, 6, $80
0001D874 3600 D42A                  	dc.l Map_obj36+$36000000
0001D878 0000 051B                  	dc.b 0,	0, 5, $1B
0001D87C 4100 E156                  	dc.l Map_obj41+$41000000
0001D880 0000 0523                  	dc.b 0,	0, 5, $23
0001D884 4300 E5DC                  	dc.l Map_obj43+$43000000
0001D888 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D88C 1200 EDBA                  	dc.l Map_obj12+$12000000
0001D890 0000 0000                  	dc.b 0,	0, 0, 0
0001D894 4700 EF36                  	dc.l Map_obj47+$47000000
0001D898 0000 0380                  	dc.b 0,	0, 3, $80
0001D89C 1F00 9B34                  	dc.l Map_obj1F+$1F000000
0001D8A0 0000 0400                  	dc.b 0,	0, 4, 0
0001D8A4 2200 9E14                  	dc.l Map_obj22+$22000000
0001D8A8 0000 0444                  	dc.b 0,	0, 4, $44
0001D8AC 5000 FD6A                  	dc.l Map_obj50+$50000000
0001D8B0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D8B4 1800 852E                  	dc.l Map_obj18a+$18000000
0001D8B8 0000 4000                  	dc.b 0,	0, $40,	0
0001D8BC 5601 0B3A                  	dc.l Map_obj56+$56000000
0001D8C0 0000 4000                  	dc.b 0,	0, $40,	0
0001D8C4 3200 C236                  	dc.l Map_obj32+$32000000
0001D8C8 0000 0513                  	dc.b 0,	0, 5, $13
0001D8CC 7801 71EC                  	dc.l Map_obj78+$78000000
0001D8D0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D8D4 7901 7572                  	dc.l Map_obj79+$79000000
0001D8D8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8DC                            	even
0001D8DC                            	even
0001D8DC                            
0001D8DC                            ; ---------------------------------------------------------------------------
0001D8DC                            ; Debug	list - Scrap Brain
0001D8DC                            ; ---------------------------------------------------------------------------
0001D8DC                            Debug_SBZ:
0001D8DC                            	include "_inc\Debug list - SBZ.asm"
0001D8DC                            ; ---------------------------------------------------------------------------
0001D8DC                            ; Debug	list - Scrap Brain
0001D8DC                            ; ---------------------------------------------------------------------------
0001D8DC 001D                       	dc.w $1D
0001D8DE 2500 A360                  	dc.l Map_obj25+$25000000
0001D8E2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8E6 2600 A966                  	dc.l Map_obj26+$26000000
0001D8EA 0000 0680                  	dc.b 0,	0, 6, $80
0001D8EE 5F01 204C                  	dc.l Map_obj5F+$5F000000
0001D8F2 0000 0400                  	dc.b 0,	0, 4, 0
0001D8F6 6001 2302                  	dc.l Map_obj60+$60000000
0001D8FA 0000 0429                  	dc.b 0,	0, 4, $29
0001D8FE 7801 71EC                  	dc.l Map_obj78+$78000000
0001D902 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D906 1501 0ED6                  	dc.l Map_obj15b+$15000000
0001D90A 0702 4391                  	dc.b 7,	2, $43,	$91
0001D90E 6701 5B10                  	dc.l Map_obj67+$67000000
0001D912 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D916 5201 0484                  	dc.l Map_obj52+$52000000
0001D91A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D91E 3200 C236                  	dc.l Map_obj32+$32000000
0001D922 0000 0513                  	dc.b 0,	0, 5, $13
0001D926 6901 5D6A                  	dc.l Map_obj69+$69000000
0001D92A 0300 4492                  	dc.b 3,	0, $44,	$92
0001D92E 6901 5DC4                  	dc.l Map_obj69a+$69000000
0001D932 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D936 6A01 6022                  	dc.l Map_obj6A+$6A000000
0001D93A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D93E 5300 8AE8                  	dc.l Map_obj53+$53000000
0001D942 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D946 5201 0484                  	dc.l Map_obj52+$52000000
0001D94A 3903 4460                  	dc.b $39, 3, $44, $60
0001D94E 6B01 63F2                  	dc.l Map_obj6B+$6B000000
0001D952 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D956 2A00 8D8E                  	dc.l Map_obj2A+$2A000000
0001D95A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D95E 6B01 63F2                  	dc.l Map_obj6B+$6B000000
0001D962 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D966 6A01 6022                  	dc.l Map_obj6A+$6A000000
0001D96A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D96E 6B01 63F2                  	dc.l Map_obj6B+$6B000000
0001D972 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D976 6A01 6022                  	dc.l Map_obj6A+$6A000000
0001D97A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D97E 6B01 63F2                  	dc.l Map_obj6B+$6B000000
0001D982 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D986 6C01 65B4                  	dc.l Map_obj6C+$6C000000
0001D98A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D98E 6D00 EA2C                  	dc.l Map_obj6D+$6D000000
0001D992 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D996 6D00 EA2C                  	dc.l Map_obj6D+$6D000000
0001D99A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D99E 6E01 666A                  	dc.l Map_obj6E+$6E000000
0001D9A2 0400 047E                  	dc.b 4,	0, 4, $7E
0001D9A6 7001 6AB0                  	dc.l Map_obj70+$70000000
0001D9AA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D9AE 7101 18E2                  	dc.l Map_obj71+$71000000
0001D9B2 1100 8680                  	dc.b $11, 0, $86, $80
0001D9B6 1E00 924C                  	dc.l Map_obj1E+$1E000000
0001D9BA 0400 2302                  	dc.b 4,	0, $23,	2
0001D9BE 7901 7572                  	dc.l Map_obj79+$79000000
0001D9C2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9C6                            	even
0001D9C6                            	even
0001D9C6                            
0001D9C6                            ; ---------------------------------------------------------------------------
0001D9C6                            ; Debug	list - ending sequence / special stage
0001D9C6                            ; ---------------------------------------------------------------------------
0001D9C6                            Debug_Ending:
0001D9C6                            	include "_inc\Debug list - Ending and SS.asm"
0001D9C6                            ; ---------------------------------------------------------------------------
0001D9C6                            ; Debug	list - ending sequence / special stage
0001D9C6                            ; ---------------------------------------------------------------------------
0001D9C6 000D                       	dc.w $D
0001D9C8 2500 A360                  	dc.l Map_obj25+$25000000
0001D9CC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9D0 4700 EF36                  	dc.l Map_obj47+$47000000
0001D9D4 0000 0380                  	dc.b 0,	0, 3, $80
0001D9D8 2800 9866                  	dc.l Map_obj28a+$28000000
0001D9DC 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D9E0 2800 9866                  	dc.l Map_obj28a+$28000000
0001D9E4 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D9E8 2800 9866                  	dc.l Map_obj28a+$28000000
0001D9EC 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D9F0 2800 984E                  	dc.l Map_obj28+$28000000
0001D9F4 0D00 0553                  	dc.b $D, 0, 5, $53
0001D9F8 2800 984E                  	dc.l Map_obj28+$28000000
0001D9FC 0E00 0553                  	dc.b $E, 0, 5, $53
0001DA00 2800 984E                  	dc.l Map_obj28+$28000000
0001DA04 0F00 0573                  	dc.b $F, 0, 5, $73
0001DA08 2800 984E                  	dc.l Map_obj28+$28000000
0001DA0C 1000 0573                  	dc.b $10, 0, 5,	$73
0001DA10 2800 9866                  	dc.l Map_obj28a+$28000000
0001DA14 1100 0585                  	dc.b $11, 0, 5,	$85
0001DA18 2800 987E                  	dc.l Map_obj28b+$28000000
0001DA1C 1200 0593                  	dc.b $12, 0, 5,	$93
0001DA20 2800 9866                  	dc.l Map_obj28a+$28000000
0001DA24 1300 0565                  	dc.b $13, 0, 5,	$65
0001DA28 2800 987E                  	dc.l Map_obj28b+$28000000
0001DA2C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DA30                            	even
0001DA30                            	even
0001DA30                            
0001DA30                            ; ---------------------------------------------------------------------------
0001DA30                            ; Main level load blocks
0001DA30                            ; ---------------------------------------------------------------------------
0001DA30                            MainLoadBlocks:
0001DA30                            	include "_inc\Main level load blocks.asm"
0001DA30                            ; ---------------------------------------------------------------------------
0001DA30                            ; Main level load blocks
0001DA30                            ;
0001DA30                            ; ===FORMAT===
0001DA30                            ; level	patterns + (1st	PLC num	* 10^6)
0001DA30                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DA30                            ; 256x256 mappings
0001DA30                            ; blank, music (unused), pal index (unused), pal index
0001DA30                            ; ---------------------------------------------------------------------------
0001DA30 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DA34 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DA38 0000 0000                  	dc.l Blk256_GHZ
0001DA3C 0081 0404                  	dc.b 0,	$81, 4,	4
0001DA40 0000 0000                  	dc.l Nem_LZ+$6000000
0001DA44 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DA48 0000 0000                  	dc.l Blk256_LZ
0001DA4C 0082 0505                  	dc.b 0,	$82, 5,	5
0001DA50 0000 0000                  	dc.l Nem_MZ+$8000000
0001DA54 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DA58 0000 0000                  	dc.l Blk256_MZ
0001DA5C 0083 0606                  	dc.b 0,	$83, 6,	6
0001DA60 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DA64 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DA68 0000 0000                  	dc.l Blk256_SLZ
0001DA6C 0084 0707                  	dc.b 0,	$84, 7,	7
0001DA70 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DA74 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DA78 0000 0000                  	dc.l Blk256_SYZ
0001DA7C 0085 0808                  	dc.b 0,	$85, 8,	8
0001DA80 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DA84 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DA88 0000 0000                  	dc.l Blk256_SBZ
0001DA8C 0086 0909                  	dc.b 0,	$86, 9,	9
0001DA90 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DA94 0000 0000                  	dc.l Blk16_GHZ
0001DA98 0000 0000                  	dc.l Blk256_GHZ
0001DA9C 0086 1313                  	dc.b 0,	$86, $13, $13
0001DAA0                            	even
0001DAA0                            	even
0001DAA0                            
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            ; Pattern load cues
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            ArtLoadCues:
0001DAA0                            	include "_inc\Pattern load cues.asm"
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            ; Pattern load cues - index
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DAA4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DAA8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DAAC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DAB0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DAB4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DAB8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DABC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DAC0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DAC4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DAC8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DACC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DAD0 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DAD4 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DAD8 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DADC 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DAE0                            ; ---------------------------------------------------------------------------
0001DAE0                            ; Pattern load cues - standard block 1
0001DAE0                            ; ---------------------------------------------------------------------------
0001DAE0 0004                       PLC_Main:	dc.w 4
0001DAE2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DAE6 F400                       		dc.w $F400
0001DAE8 0000 0000                  		dc.l Nem_Hud		; HUD
0001DAEC D940                       		dc.w $D940
0001DAEE 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DAF2 FA80                       		dc.w $FA80
0001DAF4 0000 0000                  		dc.l Nem_Ring		; rings
0001DAF8 F640                       		dc.w $F640
0001DAFA 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DAFE F2E0                       		dc.w $F2E0
0001DB00                            ; ---------------------------------------------------------------------------
0001DB00                            ; Pattern load cues - standard block 2
0001DB00                            ; ---------------------------------------------------------------------------
0001DB00 0002                       PLC_Main2:	dc.w 2
0001DB02 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DB06 D000                       		dc.w $D000
0001DB08 0000 0000                  		dc.l Nem_Shield		; shield
0001DB0C A820                       		dc.w $A820
0001DB0E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DB12 AB80                       		dc.w $AB80
0001DB14                            ; ---------------------------------------------------------------------------
0001DB14                            ; Pattern load cues - explosion
0001DB14                            ; ---------------------------------------------------------------------------
0001DB14 0000                       PLC_Explode:	dc.w 0
0001DB16 0000 0000                  		dc.l Nem_Explode	; explosion
0001DB1A B400                       		dc.w $B400
0001DB1C                            ; ---------------------------------------------------------------------------
0001DB1C                            ; Pattern load cues - game/time	over
0001DB1C                            ; ---------------------------------------------------------------------------
0001DB1C 0000                       PLC_GameOver:	dc.w 0
0001DB1E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DB22 ABC0                       		dc.w $ABC0
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            ; Pattern load cues - Green Hill
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24 000B                       PLC_GHZ:	dc.w $B
0001DB26 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DB2A 0000                       		dc.w 0
0001DB2C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DB30 39A0                       		dc.w $39A0
0001DB32 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DB36 6B00                       		dc.w $6B00
0001DB38 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DB3C 7A00                       		dc.w $7A00
0001DB3E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DB42 8000                       		dc.w $8000
0001DB44 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DB48 8880                       		dc.w $8880
0001DB4A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DB4E 8F60                       		dc.w $8F60
0001DB50 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DB54 9360                       		dc.w $9360
0001DB56 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DB5A 9E00                       		dc.w $9E00
0001DB5C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DB60 A360                       		dc.w $A360
0001DB62 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DB66 A460                       		dc.w $A460
0001DB68 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DB6C A660                       		dc.w $A660
0001DB6E 0005                       PLC_GHZ2:	dc.w 5
0001DB70 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DB74 7000                       		dc.w $7000
0001DB76 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DB7A 71C0                       		dc.w $71C0
0001DB7C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DB80 7300                       		dc.w $7300
0001DB82 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DB86 7540                       		dc.w $7540
0001DB88 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DB8C A1E0                       		dc.w $A1E0
0001DB8E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DB92 6980                       		dc.w $6980
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            ; Pattern load cues - Labyrinth
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94 000B                       PLC_LZ:		dc.w $B
0001DB96 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DB9A 0000                       		dc.w 0
0001DB9C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DBA0 3C00                       		dc.w $3C00
0001DBA2 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DBA6 3E00                       		dc.w $3E00
0001DBA8 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DBAC 4B20                       		dc.w $4B20
0001DBAE 0000 0000                  		dc.l Nem_Water		; water	surface
0001DBB2 6000                       		dc.w $6000
0001DBB4 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DBB8 6200                       		dc.w $6200
0001DBBA 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DBBE 6500                       		dc.w $6500
0001DBC0 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DBC4 6900                       		dc.w $6900
0001DBC6 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DBCA 7780                       		dc.w $7780
0001DBCC 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DBD0 7880                       		dc.w $7880
0001DBD2 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DBD6 7980                       		dc.w $7980
0001DBD8 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DBDC 94C0                       		dc.w $94C0
0001DBDE 000C                       PLC_LZ2:	dc.w $C
0001DBE0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DBE4 7BC0                       		dc.w $7BC0
0001DBE6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DBEA 7CC0                       		dc.w $7CC0
0001DBEC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DBF0 7EC0                       		dc.w $7EC0
0001DBF2 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DBF6 5D20                       		dc.w $5D20
0001DBF8 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DBFC 8800                       		dc.w $8800
0001DBFE 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DC02 89E0                       		dc.w $89E0
0001DC04 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DC08 8CE0                       		dc.w $8CE0
0001DC0A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DC0E 90C0                       		dc.w $90C0
0001DC10 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DC14 A1E0                       		dc.w $A1E0
0001DC16 0000 0000                  		dc.l Nem_Cork		; cork block
0001DC1A A000                       		dc.w $A000
0001DC1C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DC20 A360                       		dc.w $A360
0001DC22 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DC26 A460                       		dc.w $A460
0001DC28 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DC2C A660                       		dc.w $A660
0001DC2E                            ; ---------------------------------------------------------------------------
0001DC2E                            ; Pattern load cues - Marble
0001DC2E                            ; ---------------------------------------------------------------------------
0001DC2E 0009                       PLC_MZ:		dc.w 9
0001DC30 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DC34 0000                       		dc.w 0
0001DC36 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DC3A 6000                       		dc.w $6000
0001DC3C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DC40 68A0                       		dc.w $68A0
0001DC42 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DC46 7000                       		dc.w $7000
0001DC48 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DC4C 71C0                       		dc.w $71C0
0001DC4E 0000 0000                  		dc.l Nem_Lava		; lava
0001DC52 7500                       		dc.w $7500
0001DC54 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DC58 8880                       		dc.w $8880
0001DC5A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DC5E 8F60                       		dc.w $8F60
0001DC60 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DC64 9700                       		dc.w $9700
0001DC66 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DC6A 9FE0                       		dc.w $9FE0
0001DC6C 0004                       PLC_MZ2:	dc.w 4
0001DC6E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DC72 A260                       		dc.w $A260
0001DC74 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DC78 A360                       		dc.w $A360
0001DC7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DC7E A460                       		dc.w $A460
0001DC80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DC84 A660                       		dc.w $A660
0001DC86 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DC8A 5700                       		dc.w $5700
0001DC8C                            ; ---------------------------------------------------------------------------
0001DC8C                            ; Pattern load cues - Star Light
0001DC8C                            ; ---------------------------------------------------------------------------
0001DC8C 0008                       PLC_SLZ:	dc.w 8
0001DC8E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DC92 0000                       		dc.w 0
0001DC94 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DC98 8000                       		dc.w $8000
0001DC9A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DC9E 8520                       		dc.w $8520
0001DCA0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DCA4 9000                       		dc.w $9000
0001DCA6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DCAA 9C00                       		dc.w $9C00
0001DCAC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DCB0 A260                       		dc.w $A260
0001DCB2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCB6 A360                       		dc.w $A360
0001DCB8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCBC A460                       		dc.w $A460
0001DCBE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCC2 A660                       		dc.w $A660
0001DCC4 0005                       PLC_SLZ2:	dc.w 5
0001DCC6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DCCA 6E80                       		dc.w $6E80
0001DCCC 0000 0000                  		dc.l Nem_Fan		; fan
0001DCD0 7400                       		dc.w $7400
0001DCD2 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DCD6 7980                       		dc.w $7980
0001DCD8 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DCDC 7B80                       		dc.w $7B80
0001DCDE 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DCE2 9B00                       		dc.w $9B00
0001DCE4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DCE8 9E00                       		dc.w $9E00
0001DCEA                            ; ---------------------------------------------------------------------------
0001DCEA                            ; Pattern load cues - Spring Yard
0001DCEA                            ; ---------------------------------------------------------------------------
0001DCEA 0004                       PLC_SYZ:	dc.w 4
0001DCEC 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DCF0 0000                       		dc.w 0
0001DCF2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCF6 8000                       		dc.w $8000
0001DCF8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCFC 8880                       		dc.w $8880
0001DCFE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DD02 8F60                       		dc.w $8F60
0001DD04 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DD08 9700                       		dc.w $9700
0001DD0A 0007                       PLC_SYZ2:	dc.w 7
0001DD0C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DD10 7000                       		dc.w $7000
0001DD12 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DD16 72C0                       		dc.w $72C0
0001DD18 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DD1C 7740                       		dc.w $7740
0001DD1E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DD22 9FE0                       		dc.w $9FE0
0001DD24 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD28 A1E0                       		dc.w $A1E0
0001DD2A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD2E A360                       		dc.w $A360
0001DD30 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD34 A460                       		dc.w $A460
0001DD36 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD3A A660                       		dc.w $A660
0001DD3C                            ; ---------------------------------------------------------------------------
0001DD3C                            ; Pattern load cues - Scrap Brain
0001DD3C                            ; ---------------------------------------------------------------------------
0001DD3C 000B                       PLC_SBZ:	dc.w $B
0001DD3E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DD42 0000                       		dc.w 0
0001DD44 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DD48 5800                       		dc.w $5800
0001DD4A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DD4E 5D00                       		dc.w $5D00
0001DD50 0000 0000                  		dc.l Nem_Girder		; girder
0001DD54 5E00                       		dc.w $5E00
0001DD56 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DD5A 6040                       		dc.w $6040
0001DD5C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DD60 6880                       		dc.w $6880
0001DD62 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DD66 6900                       		dc.w $6900
0001DD68 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DD6C 7220                       		dc.w $7220
0001DD6E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DD72 76A0                       		dc.w $76A0
0001DD74 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DD78 7B20                       		dc.w $7B20
0001DD7A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DD7E 7EA0                       		dc.w $7EA0
0001DD80 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DD84 9860                       		dc.w $9860
0001DD86 000C                       PLC_SBZ2:	dc.w $C
0001DD88 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DD8C 5600                       		dc.w $5600
0001DD8E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DD92 8000                       		dc.w $8000
0001DD94 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD98 8520                       		dc.w $8520
0001DD9A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DD9E 8C00                       		dc.w $8C00
0001DDA0 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DDA4 8DE0                       		dc.w $8DE0
0001DDA6 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DDAA 8FC0                       		dc.w $8FC0
0001DDAC 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DDB0 9240                       		dc.w $9240
0001DDB2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DDB6 7F20                       		dc.w $7F20
0001DDB8 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DDBC 9BE0                       		dc.w $9BE0
0001DDBE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DDC2 A1E0                       		dc.w $A1E0
0001DDC4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDC8 A360                       		dc.w $A360
0001DDCA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDCE A460                       		dc.w $A460
0001DDD0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDD4 A660                       		dc.w $A660
0001DDD6                            ; ---------------------------------------------------------------------------
0001DDD6                            ; Pattern load cues - title card
0001DDD6                            ; ---------------------------------------------------------------------------
0001DDD6 0000                       PLC_TitleCard:	dc.w 0
0001DDD8 0000 0000                  		dc.l Nem_TitleCard
0001DDDC B000                       		dc.w $B000
0001DDDE                            ; ---------------------------------------------------------------------------
0001DDDE                            ; Pattern load cues - act 3 boss
0001DDDE                            ; ---------------------------------------------------------------------------
0001DDDE 0005                       PLC_Boss:	dc.w 5
0001DDE0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DDE4 8000                       		dc.w $8000
0001DDE6 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DDEA 8D80                       		dc.w $8D80
0001DDEC 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DDF0 93A0                       		dc.w $93A0
0001DDF2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DDF6 A300                       		dc.w $A300
0001DDF8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DDFC A300                       		dc.w $A300
0001DDFE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DE02 A540                       		dc.w $A540
0001DE04                            ; ---------------------------------------------------------------------------
0001DE04                            ; Pattern load cues - act 1/2 signpost
0001DE04                            ; ---------------------------------------------------------------------------
0001DE04 0002                       PLC_Signpost:	dc.w 2
0001DE06 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DE0A D000                       		dc.w $D000
0001DE0C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DE10 96C0                       		dc.w $96C0
0001DE12 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DE16 8C40                       		dc.w $8C40
0001DE18                            ; ---------------------------------------------------------------------------
0001DE18                            ; Pattern load cues - beta special stage warp effect
0001DE18                            ; ---------------------------------------------------------------------------
0001DE18 0000                       PLC_Warp:	dc.w 0
0001DE1A 0000 0000                  		dc.l Nem_Warp
0001DE1E A820                       		dc.w $A820
0001DE20                            ; ---------------------------------------------------------------------------
0001DE20                            ; Pattern load cues - special stage
0001DE20                            ; ---------------------------------------------------------------------------
0001DE20 0010                       PLC_SpeStage:	dc.w $10
0001DE22 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DE26 0000                       		dc.w 0
0001DE28 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DE2C 0A20                       		dc.w $A20
0001DE2E 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DE32 2840                       		dc.w $2840
0001DE34 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE38 4760                       		dc.w $4760
0001DE3A 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DE3E 4A20                       		dc.w $4A20
0001DE40 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DE44 4C60                       		dc.w $4C60
0001DE46 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DE4A 5E00                       		dc.w $5E00
0001DE4C 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DE50 6E00                       		dc.w $6E00
0001DE52 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DE56 7E00                       		dc.w $7E00
0001DE58 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DE5C 8E00                       		dc.w $8E00
0001DE5E 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DE62 9E00                       		dc.w $9E00
0001DE64 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DE68 AE00                       		dc.w $AE00
0001DE6A 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DE6E BE00                       		dc.w $BE00
0001DE70 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DE74 EE00                       		dc.w $EE00
0001DE76 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DE7A F2E0                       		dc.w $F2E0
0001DE7C 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DE80 F400                       		dc.w $F400
0001DE82 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DE86 F520                       		dc.w $F520
0001DE88 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DE8C F2E0                       		dc.w $F2E0
0001DE8E 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DE92 F400                       		dc.w $F400
0001DE94 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DE98 F520                       		dc.w $F520
0001DE9A                            ; ---------------------------------------------------------------------------
0001DE9A                            ; Pattern load cues - GHZ animals
0001DE9A                            ; ---------------------------------------------------------------------------
0001DE9A 0001                       PLC_GHZAnimals:	dc.w 1
0001DE9C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DEA0 B000                       		dc.w $B000
0001DEA2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DEA6 B240                       		dc.w $B240
0001DEA8                            ; ---------------------------------------------------------------------------
0001DEA8                            ; Pattern load cues - LZ animals
0001DEA8                            ; ---------------------------------------------------------------------------
0001DEA8 0001                       PLC_LZAnimals:	dc.w 1
0001DEAA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DEAE B000                       		dc.w $B000
0001DEB0 0000 0000                  		dc.l Nem_Seal		; seal
0001DEB4 B240                       		dc.w $B240
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6                            ; Pattern load cues - MZ animals
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6 0001                       PLC_MZAnimals:	dc.w 1
0001DEB8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DEBC B000                       		dc.w $B000
0001DEBE 0000 0000                  		dc.l Nem_Seal		; seal
0001DEC2 B240                       		dc.w $B240
0001DEC4                            ; ---------------------------------------------------------------------------
0001DEC4                            ; Pattern load cues - SLZ animals
0001DEC4                            ; ---------------------------------------------------------------------------
0001DEC4 0001                       PLC_SLZAnimals:	dc.w 1
0001DEC6 0000 0000                  		dc.l Nem_Pig		; pig
0001DECA B000                       		dc.w $B000
0001DECC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DED0 B240                       		dc.w $B240
0001DED2                            ; ---------------------------------------------------------------------------
0001DED2                            ; Pattern load cues - SYZ animals
0001DED2                            ; ---------------------------------------------------------------------------
0001DED2 0001                       PLC_SYZAnimals:	dc.w 1
0001DED4 0000 0000                  		dc.l Nem_Pig		; pig
0001DED8 B000                       		dc.w $B000
0001DEDA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DEDE B240                       		dc.w $B240
0001DEE0                            ; ---------------------------------------------------------------------------
0001DEE0                            ; Pattern load cues - SBZ animals
0001DEE0                            ; ---------------------------------------------------------------------------
0001DEE0 0001                       PLC_SBZAnimals:	dc.w 1
0001DEE2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DEE6 B000                       		dc.w $B000
0001DEE8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DEEC B240                       		dc.w $B240
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE                            ; Pattern load cues - special stage results screen
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE 0001                       PLC_SpeStResult:dc.w 1
0001DEF0 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DEF4 A820                       		dc.w $A820
0001DEF6 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DEFA AA20                       		dc.w $AA20
0001DEFC                            ; ---------------------------------------------------------------------------
0001DEFC                            ; Pattern load cues - ending sequence
0001DEFC                            ; ---------------------------------------------------------------------------
0001DEFC 000E                       PLC_Ending:	dc.w $E
0001DEFE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF02 0000                       		dc.w 0
0001DF04 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF08 39A0                       		dc.w $39A0
0001DF0A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF0E 6B00                       		dc.w $6B00
0001DF10 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DF14 7400                       		dc.w $7400
0001DF16 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DF1A 78A0                       		dc.w $78A0
0001DF1C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DF20 7C20                       		dc.w $7C20
0001DF22 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DF26 A480                       		dc.w $A480
0001DF28 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DF2C AA60                       		dc.w $AA60
0001DF2E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DF32 ACA0                       		dc.w $ACA0
0001DF34 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DF38 AE60                       		dc.w $AE60
0001DF3A 0000 0000                  		dc.l Nem_Seal		; seal
0001DF3E B0A0                       		dc.w $B0A0
0001DF40 0000 0000                  		dc.l Nem_Pig		; pig
0001DF44 B260                       		dc.w $B260
0001DF46 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DF4A B4A0                       		dc.w $B4A0
0001DF4C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DF50 B660                       		dc.w $B660
0001DF52 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DF56 B8A0                       		dc.w $B8A0
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58 0002                       PLC_TryAgain:	dc.w 2
0001DF5A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DF5E 78A0                       		dc.w $78A0
0001DF60 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DF64 7C20                       		dc.w $7C20
0001DF66 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DF6A B400                       		dc.w $B400
0001DF6C                            ; ---------------------------------------------------------------------------
0001DF6C                            ; Pattern load cues - Eggman on SBZ 2
0001DF6C                            ; ---------------------------------------------------------------------------
0001DF6C 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DF6E 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DF72 A300                       		dc.w $A300
0001DF74 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DF78 8000                       		dc.w $8000
0001DF7A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF7E 9400                       		dc.w $9400
0001DF80                            ; ---------------------------------------------------------------------------
0001DF80                            ; Pattern load cues - final boss
0001DF80                            ; ---------------------------------------------------------------------------
0001DF80 0004                       PLC_FZBoss:	dc.w 4
0001DF82 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DF86 7400                       		dc.w $7400
0001DF88 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DF8C 6000                       		dc.w $6000
0001DF8E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF92 8000                       		dc.w $8000
0001DF94 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DF98 8E00                       		dc.w $8E00
0001DF9A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF9E A540                       		dc.w $A540
0001DFA0                            		even
0001DFA0                            		even
0001DFA0                            
0001DFA0                            		incbin	misc\padding.bin
0001E08E                            		even
0001E08E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E4F0                            		even
0001E4F0                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E5E8                            		even
0001E5E8                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E6FC                            		even
0001E6FC                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F708                            		even
0001F708                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022864                            		even
00022864                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022898                            		even
00022898                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022956                            		even
00022956                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022DFE                            		even
00022DFE                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00022E5C                            		even
00022E5C                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023A62                            		even
00023A62                            ; ---------------------------------------------------------------------------
00023A62                            ; Sprite mappings - Sonic
00023A62                            ; ---------------------------------------------------------------------------
00023A62                            Map_Sonic:
00023A62                            	include "_maps\Sonic.asm"
00023A62                            Mappings:
00023A62 0000                       Mappings_0: 	dc.w Mappings_B2-Mappings
00023A64 0000                       Mappings_2: 	dc.w Mappings_B3-Mappings
00023A66 0000                       Mappings_4: 	dc.w Mappings_BE-Mappings
00023A68 0000                       Mappings_6: 	dc.w Mappings_CE-Mappings
00023A6A 0000                       Mappings_8: 	dc.w Mappings_DE-Mappings
00023A6C 0000                       Mappings_A: 	dc.w Mappings_EE-Mappings
00023A6E 0000                       Mappings_C: 	dc.w Mappings_FE-Mappings
00023A70 0000                       Mappings_E: 	dc.w Mappings_113-Mappings
00023A72 0000                       Mappings_10: 	dc.w Mappings_11E-Mappings
00023A74 0000                       Mappings_12: 	dc.w Mappings_129-Mappings
00023A76 0000                       Mappings_14: 	dc.w Mappings_13E-Mappings
00023A78 0000                       Mappings_16: 	dc.w Mappings_149-Mappings
00023A7A 0000                       Mappings_18: 	dc.w Mappings_159-Mappings
00023A7C 0000                       Mappings_1A: 	dc.w Mappings_173-Mappings
00023A7E 0000                       Mappings_1C: 	dc.w Mappings_192-Mappings
00023A80 0000                       Mappings_1E: 	dc.w Mappings_1A7-Mappings
00023A82 0000                       Mappings_20: 	dc.w Mappings_1C1-Mappings
00023A84 0000                       Mappings_22: 	dc.w Mappings_1D6-Mappings
00023A86 0000                       Mappings_24: 	dc.w Mappings_1F0-Mappings
00023A88 0000                       Mappings_26: 	dc.w Mappings_205-Mappings
00023A8A 0000                       Mappings_28: 	dc.w Mappings_210-Mappings
00023A8C 0000                       Mappings_2A: 	dc.w Mappings_21B-Mappings
00023A8E 0000                       Mappings_2C: 	dc.w Mappings_230-Mappings
00023A90 0000                       Mappings_2E: 	dc.w Mappings_23B-Mappings
00023A92 0000                       Mappings_30: 	dc.w Mappings_24B-Mappings
00023A94 0000                       Mappings_32: 	dc.w Mappings_26A-Mappings
00023A96 0000                       Mappings_34: 	dc.w Mappings_289-Mappings
00023A98 0000                       Mappings_36: 	dc.w Mappings_29E-Mappings
00023A9A 0000                       Mappings_38: 	dc.w Mappings_2B8-Mappings
00023A9C 0000                       Mappings_3A: 	dc.w Mappings_2CD-Mappings
00023A9E 0000                       Mappings_3C: 	dc.w Mappings_2E7-Mappings
00023AA0 0000                       Mappings_3E: 	dc.w Mappings_2F2-Mappings
00023AA2 0000                       Mappings_40: 	dc.w Mappings_2FD-Mappings
00023AA4 0000                       Mappings_42: 	dc.w Mappings_308-Mappings
00023AA6 0000                       Mappings_44: 	dc.w Mappings_313-Mappings
00023AA8 0000                       Mappings_46: 	dc.w Mappings_328-Mappings
00023AAA 0000                       Mappings_48: 	dc.w Mappings_338-Mappings
00023AAC 0000                       Mappings_4A: 	dc.w Mappings_34D-Mappings
00023AAE 0000                       Mappings_4C: 	dc.w Mappings_35D-Mappings
00023AB0 0000                       Mappings_4E: 	dc.w Mappings_368-Mappings
00023AB2 0000                       Mappings_50: 	dc.w Mappings_373-Mappings
00023AB4 0000                       Mappings_52: 	dc.w Mappings_37E-Mappings
00023AB6 0000                       Mappings_54: 	dc.w Mappings_389-Mappings
00023AB8 0000                       Mappings_56: 	dc.w Mappings_39E-Mappings
00023ABA 0000                       Mappings_58: 	dc.w Mappings_3A9-Mappings
00023ABC 0000                       Mappings_5A: 	dc.w Mappings_3BE-Mappings
00023ABE 0000                       Mappings_5C: 	dc.w Mappings_3C9-Mappings
00023AC0 0000                       Mappings_5E: 	dc.w Mappings_3CF-Mappings
00023AC2 0000                       Mappings_60: 	dc.w Mappings_3D5-Mappings
00023AC4 0000                       Mappings_62: 	dc.w Mappings_3DB-Mappings
00023AC6 0000                       Mappings_64: 	dc.w Mappings_3E1-Mappings
00023AC8 0000                       Mappings_66: 	dc.w Mappings_3E7-Mappings
00023ACA 0000                       Mappings_68: 	dc.w Mappings_3F2-Mappings
00023ACC 0000                       Mappings_6A: 	dc.w Mappings_3F8-Mappings
00023ACE 0000                       Mappings_6C: 	dc.w Mappings_403-Mappings
00023AD0 0000                       Mappings_6E: 	dc.w Mappings_409-Mappings
00023AD2 0000                       Mappings_70: 	dc.w Mappings_414-Mappings
00023AD4 0000                       Mappings_72: 	dc.w Mappings_429-Mappings
00023AD6 0000                       Mappings_74: 	dc.w Mappings_43E-Mappings
00023AD8 0000                       Mappings_76: 	dc.w Mappings_44E-Mappings
00023ADA 0000                       Mappings_78: 	dc.w Mappings_45E-Mappings
00023ADC 0000                       Mappings_7A: 	dc.w Mappings_46E-Mappings
00023ADE 0000                       Mappings_7C: 	dc.w Mappings_479-Mappings
00023AE0 0000                       Mappings_7E: 	dc.w Mappings_489-Mappings
00023AE2 0000                       Mappings_80: 	dc.w Mappings_499-Mappings
00023AE4 0000                       Mappings_82: 	dc.w Mappings_4A9-Mappings
00023AE6 0000                       Mappings_84: 	dc.w Mappings_4BE-Mappings
00023AE8 0000                       Mappings_86: 	dc.w Mappings_4D3-Mappings
00023AEA 0000                       Mappings_88: 	dc.w Mappings_4ED-Mappings
00023AEC 0000                       Mappings_8A: 	dc.w Mappings_507-Mappings
00023AEE 0000                       Mappings_8C: 	dc.w Mappings_512-Mappings
00023AF0 0000                       Mappings_8E: 	dc.w Mappings_522-Mappings
00023AF2 0000                       Mappings_90: 	dc.w Mappings_52D-Mappings
00023AF4 0000                       Mappings_92: 	dc.w Mappings_53D-Mappings
00023AF6 0000                       Mappings_94: 	dc.w Mappings_548-Mappings
00023AF8 0000                       Mappings_96: 	dc.w Mappings_558-Mappings
00023AFA 0000                       Mappings_98: 	dc.w Mappings_568-Mappings
00023AFC 0000                       Mappings_9A: 	dc.w Mappings_582-Mappings
00023AFE 0000                       Mappings_9C: 	dc.w Mappings_59C-Mappings
00023B00 0000                       Mappings_9E: 	dc.w Mappings_5A7-Mappings
00023B02 0000                       Mappings_A0: 	dc.w Mappings_5B7-Mappings
00023B04 0000                       Mappings_A2: 	dc.w Mappings_5BD-Mappings
00023B06 0000                       Mappings_A4: 	dc.w Mappings_5C3-Mappings
00023B08 0000                       Mappings_A6: 	dc.w Mappings_5C9-Mappings
00023B0A 0000                       Mappings_A8: 	dc.w Mappings_5D9-Mappings
00023B0C 0000                       Mappings_AA: 	dc.w Mappings_5E9-Mappings
00023B0E 0000                       Mappings_AC: 	dc.w Mappings_5F9-Mappings
00023B10 0000                       Mappings_AE: 	dc.w Mappings_609-Mappings
00023B12 0000                       Mappings_B0: 	dc.w Mappings_614-Mappings
00023B14 00                         Mappings_B2: 	dc.b $0
00023B15 02                         Mappings_B3: 	dc.b $2
00023B16 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023B1B 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023B20 03                         Mappings_BE: 	dc.b $3
00023B21 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023B26 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023B2B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023B30 03                         Mappings_CE: 	dc.b $3
00023B31 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023B36 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023B3B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023B40 03                         Mappings_DE: 	dc.b $3
00023B41 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023B46 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023B4B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023B50 03                         Mappings_EE: 	dc.b $3
00023B51 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023B56 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023B5B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023B60 04                         Mappings_FE: 	dc.b $4
00023B61 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023B66 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023B6B FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023B70 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023B75 02                         Mappings_113: 	dc.b $2
00023B76 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023B7B FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023B80 02                         Mappings_11E: 	dc.b $2
00023B81 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023B86 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023B8B 04                         Mappings_129: 	dc.b $4
00023B8C EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023B91 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023B96 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023B9B 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023BA0 02                         Mappings_13E: 	dc.b $2
00023BA1 EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00023BA6 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00023BAB 03                         Mappings_149: 	dc.b $3
00023BAC ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023BB1 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023BB6 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023BBB 05                         Mappings_159: 	dc.b $5
00023BBC EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023BC1 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023BC6 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023BCB 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023BD0 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023BD5 06                         Mappings_173: 	dc.b $6
00023BD6 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023BDB EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023BE0 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023BE5 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023BEA FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023BEF F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023BF4 04                         Mappings_192: 	dc.b $4
00023BF5 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023BFA ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023BFF FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023C04 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023C09 05                         Mappings_1A7: 	dc.b $5
00023C0A EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023C0F EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023C14 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023C19 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023C1E 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023C23 04                         Mappings_1C1: 	dc.b $4
00023C24 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023C29 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023C2E FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023C33 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023C38 05                         Mappings_1D6: 	dc.b $5
00023C39 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023C3E ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023C43 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023C48 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023C4D 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023C52 04                         Mappings_1F0: 	dc.b $4
00023C53 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023C58 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023C5D FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023C62 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023C67 02                         Mappings_205: 	dc.b $2
00023C68 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023C6D EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023C72 02                         Mappings_210: 	dc.b $2
00023C73 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023C78 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023C7D 04                         Mappings_21B: 	dc.b $4
00023C7E F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023C83 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023C88 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023C8D 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023C92 02                         Mappings_230: 	dc.b $2
00023C93 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023C98 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023C9D 03                         Mappings_23B: 	dc.b $3
00023C9E F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023CA3 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023CA8 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023CAD 06                         Mappings_24B: 	dc.b $6
00023CAE FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023CB3 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023CB8 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023CBD F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023CC2 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023CC7 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023CCC 06                         Mappings_26A: 	dc.b $6
00023CCD FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023CD2 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023CD7 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023CDC F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023CE1 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023CE6 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023CEB 04                         Mappings_289: 	dc.b $4
00023CEC FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023CF1 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023CF6 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023CFB 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023D00 05                         Mappings_29E: 	dc.b $5
00023D01 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023D06 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023D0B F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023D10 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023D15 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023D1A 04                         Mappings_2B8: 	dc.b $4
00023D1B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023D20 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023D25 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023D2A 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023D2F 05                         Mappings_2CD: 	dc.b $5
00023D30 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023D35 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023D3A F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023D3F 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023D44 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00023D49 02                         Mappings_2E7: 	dc.b $2
00023D4A EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023D4F FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023D54 02                         Mappings_2F2: 	dc.b $2
00023D55 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023D5A FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023D5F 02                         Mappings_2FD: 	dc.b $2
00023D60 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023D65 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023D6A 02                         Mappings_308: 	dc.b $2
00023D6B EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023D70 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023D75 04                         Mappings_313: 	dc.b $4
00023D76 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023D7B EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023D80 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023D85 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023D8A 03                         Mappings_328: 	dc.b $3
00023D8B EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023D90 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023D95 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023D9A 04                         Mappings_338: 	dc.b $4
00023D9B EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023DA0 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023DA5 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023DAA FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023DAF 03                         Mappings_34D: 	dc.b $3
00023DB0 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023DB5 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023DBA FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023DBF 02                         Mappings_35D: 	dc.b $2
00023DC0 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023DC5 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023DCA 02                         Mappings_368: 	dc.b $2
00023DCB F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023DD0 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023DD5 02                         Mappings_373: 	dc.b $2
00023DD6 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023DDB F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023DE0 02                         Mappings_37E: 	dc.b $2
00023DE1 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023DE6 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023DEB 04                         Mappings_389: 	dc.b $4
00023DEC FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00023DF1 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00023DF6 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023DFB 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00023E00 02                         Mappings_39E: 	dc.b $2
00023E01 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00023E06 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023E0B 04                         Mappings_3A9: 	dc.b $4
00023E0C FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00023E11 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00023E16 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023E1B 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00023E20 02                         Mappings_3BE: 	dc.b $2
00023E21 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00023E26 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023E2B 01                         Mappings_3C9: 	dc.b $1
00023E2C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E31 01                         Mappings_3CF: 	dc.b $1
00023E32 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E37 01                         Mappings_3D5: 	dc.b $1
00023E38 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E3D 01                         Mappings_3DB: 	dc.b $1
00023E3E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E43 01                         Mappings_3E1: 	dc.b $1
00023E44 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E49 02                         Mappings_3E7: 	dc.b $2
00023E4A F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00023E4F F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00023E54 01                         Mappings_3F2: 	dc.b $1
00023E55 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E5A 02                         Mappings_3F8: 	dc.b $2
00023E5B EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00023E60 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00023E65 01                         Mappings_403: 	dc.b $1
00023E66 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023E6B 02                         Mappings_409: 	dc.b $2
00023E6C ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00023E71 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00023E76 04                         Mappings_414: 	dc.b $4
00023E77 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00023E7C FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00023E81 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00023E86 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00023E8B 04                         Mappings_429: 	dc.b $4
00023E8C F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00023E91 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00023E96 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00023E9B 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00023EA0 03                         Mappings_43E: 	dc.b $3
00023EA1 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00023EA6 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00023EAB F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00023EB0 03                         Mappings_44E: 	dc.b $3
00023EB1 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00023EB6 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00023EBB 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00023EC0 03                         Mappings_45E: 	dc.b $3
00023EC1 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00023EC6 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00023ECB 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00023ED0 02                         Mappings_46E: 	dc.b $2
00023ED1 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00023ED6 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00023EDB 03                         Mappings_479: 	dc.b $3
00023EDC F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00023EE1 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00023EE6 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00023EEB 03                         Mappings_489: 	dc.b $3
00023EEC F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00023EF1 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00023EF6 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00023EFB 03                         Mappings_499: 	dc.b $3
00023EFC E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00023F01 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00023F06 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00023F0B 04                         Mappings_4A9: 	dc.b $4
00023F0C F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00023F11 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00023F16 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00023F1B F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00023F20 04                         Mappings_4BE: 	dc.b $4
00023F21 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00023F26 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00023F2B F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00023F30 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00023F35 05                         Mappings_4D3: 	dc.b $5
00023F36 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00023F3B F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00023F40 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00023F45 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00023F4A 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00023F4F 05                         Mappings_4ED: 	dc.b $5
00023F50 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00023F55 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00023F5A 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00023F5F 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00023F64 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00023F69 02                         Mappings_507: 	dc.b $2
00023F6A ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00023F6F 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00023F74 03                         Mappings_512: 	dc.b $3
00023F75 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00023F7A 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00023F7F 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00023F84 02                         Mappings_522: 	dc.b $2
00023F85 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00023F8A 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00023F8F 03                         Mappings_52D: 	dc.b $3
00023F90 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00023F95 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00023F9A 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00023F9F 02                         Mappings_53D: 	dc.b $2
00023FA0 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023FA5 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00023FAA 03                         Mappings_548: 	dc.b $3
00023FAB EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023FB0 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00023FB5 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00023FBA 03                         Mappings_558: 	dc.b $3
00023FBB E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023FC0 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023FC5 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00023FCA 05                         Mappings_568: 	dc.b $5
00023FCB E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023FD0 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023FD5 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00023FDA 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00023FDF 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00023FE4 05                         Mappings_582: 	dc.b $5
00023FE5 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023FEA E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023FEF F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00023FF4 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00023FF9 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00023FFE 02                         Mappings_59C: 	dc.b $2
00023FFF EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00024004 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00024009 03                         Mappings_5A7: 	dc.b $3
0002400A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002400F F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00024014 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00024019 01                         Mappings_5B7: 	dc.b $1
0002401A F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002401F 01                         Mappings_5BD: 	dc.b $1
00024020 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00024025 01                         Mappings_5C3: 	dc.b $1
00024026 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002402B 03                         Mappings_5C9: 	dc.b $3
0002402C F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00024031 FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00024036 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
0002403B 03                         Mappings_5D9: 	dc.b $3
0002403C F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
00024041 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00024046 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002404B 03                         Mappings_5E9: 	dc.b $3
0002404C F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00024051 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00024056 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002405B 03                         Mappings_5F9: 	dc.b $3
0002405C EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024061 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00024066 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002406B 02                         Mappings_609: 	dc.b $2
0002406C F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00024071 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00024076 02                         Mappings_614: 	dc.b $2
00024077 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002407C EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00024082 00                         	even
00024082 00                         	even
00024082                            
00024082                            ; ---------------------------------------------------------------------------
00024082                            ; Uncompressed graphics	loading	array for Sonic
00024082                            ; ---------------------------------------------------------------------------
00024082                            SonicDynPLC:
00024082                            	include "_inc\Sonic dynamic pattern load cues.asm"
00024082                            DPLCS:
00024082 0000                       DPLCS_0: 	dc.w DPLCS_B2-DPLCS
00024084 0000                       DPLCS_2: 	dc.w DPLCS_B3-DPLCS
00024086 0000                       DPLCS_4: 	dc.w DPLCS_B8-DPLCS
00024088 0000                       DPLCS_6: 	dc.w DPLCS_BF-DPLCS
0002408A 0000                       DPLCS_8: 	dc.w DPLCS_C6-DPLCS
0002408C 0000                       DPLCS_A: 	dc.w DPLCS_CD-DPLCS
0002408E 0000                       DPLCS_C: 	dc.w DPLCS_D4-DPLCS
00024090 0000                       DPLCS_E: 	dc.w DPLCS_DD-DPLCS
00024092 0000                       DPLCS_10: 	dc.w DPLCS_E2-DPLCS
00024094 0000                       DPLCS_12: 	dc.w DPLCS_E7-DPLCS
00024096 0000                       DPLCS_14: 	dc.w DPLCS_F0-DPLCS
00024098 0000                       DPLCS_16: 	dc.w DPLCS_F5-DPLCS
0002409A 0000                       DPLCS_18: 	dc.w DPLCS_FC-DPLCS
0002409C 0000                       DPLCS_1A: 	dc.w DPLCS_107-DPLCS
0002409E 0000                       DPLCS_1C: 	dc.w DPLCS_114-DPLCS
000240A0 0000                       DPLCS_1E: 	dc.w DPLCS_11D-DPLCS
000240A2 0000                       DPLCS_20: 	dc.w DPLCS_128-DPLCS
000240A4 0000                       DPLCS_22: 	dc.w DPLCS_131-DPLCS
000240A6 0000                       DPLCS_24: 	dc.w DPLCS_13C-DPLCS
000240A8 0000                       DPLCS_26: 	dc.w DPLCS_145-DPLCS
000240AA 0000                       DPLCS_28: 	dc.w DPLCS_14A-DPLCS
000240AC 0000                       DPLCS_2A: 	dc.w DPLCS_14F-DPLCS
000240AE 0000                       DPLCS_2C: 	dc.w DPLCS_158-DPLCS
000240B0 0000                       DPLCS_2E: 	dc.w DPLCS_15D-DPLCS
000240B2 0000                       DPLCS_30: 	dc.w DPLCS_164-DPLCS
000240B4 0000                       DPLCS_32: 	dc.w DPLCS_171-DPLCS
000240B6 0000                       DPLCS_34: 	dc.w DPLCS_17E-DPLCS
000240B8 0000                       DPLCS_36: 	dc.w DPLCS_187-DPLCS
000240BA 0000                       DPLCS_38: 	dc.w DPLCS_192-DPLCS
000240BC 0000                       DPLCS_3A: 	dc.w DPLCS_19B-DPLCS
000240BE 0000                       DPLCS_3C: 	dc.w DPLCS_1A6-DPLCS
000240C0 0000                       DPLCS_3E: 	dc.w DPLCS_1AB-DPLCS
000240C2 0000                       DPLCS_40: 	dc.w DPLCS_1B0-DPLCS
000240C4 0000                       DPLCS_42: 	dc.w DPLCS_1B5-DPLCS
000240C6 0000                       DPLCS_44: 	dc.w DPLCS_1BA-DPLCS
000240C8 0000                       DPLCS_46: 	dc.w DPLCS_1C3-DPLCS
000240CA 0000                       DPLCS_48: 	dc.w DPLCS_1CA-DPLCS
000240CC 0000                       DPLCS_4A: 	dc.w DPLCS_1D3-DPLCS
000240CE 0000                       DPLCS_4C: 	dc.w DPLCS_1DA-DPLCS
000240D0 0000                       DPLCS_4E: 	dc.w DPLCS_1DF-DPLCS
000240D2 0000                       DPLCS_50: 	dc.w DPLCS_1E4-DPLCS
000240D4 0000                       DPLCS_52: 	dc.w DPLCS_1E9-DPLCS
000240D6 0000                       DPLCS_54: 	dc.w DPLCS_1EE-DPLCS
000240D8 0000                       DPLCS_56: 	dc.w DPLCS_1F7-DPLCS
000240DA 0000                       DPLCS_58: 	dc.w DPLCS_1FC-DPLCS
000240DC 0000                       DPLCS_5A: 	dc.w DPLCS_205-DPLCS
000240DE 0000                       DPLCS_5C: 	dc.w DPLCS_20A-DPLCS
000240E0 0000                       DPLCS_5E: 	dc.w DPLCS_20D-DPLCS
000240E2 0000                       DPLCS_60: 	dc.w DPLCS_210-DPLCS
000240E4 0000                       DPLCS_62: 	dc.w DPLCS_213-DPLCS
000240E6 0000                       DPLCS_64: 	dc.w DPLCS_216-DPLCS
000240E8 0000                       DPLCS_66: 	dc.w DPLCS_219-DPLCS
000240EA 0000                       DPLCS_68: 	dc.w DPLCS_21E-DPLCS
000240EC 0000                       DPLCS_6A: 	dc.w DPLCS_221-DPLCS
000240EE 0000                       DPLCS_6C: 	dc.w DPLCS_226-DPLCS
000240F0 0000                       DPLCS_6E: 	dc.w DPLCS_229-DPLCS
000240F2 0000                       DPLCS_70: 	dc.w DPLCS_22E-DPLCS
000240F4 0000                       DPLCS_72: 	dc.w DPLCS_237-DPLCS
000240F6 0000                       DPLCS_74: 	dc.w DPLCS_240-DPLCS
000240F8 0000                       DPLCS_76: 	dc.w DPLCS_247-DPLCS
000240FA 0000                       DPLCS_78: 	dc.w DPLCS_24E-DPLCS
000240FC 0000                       DPLCS_7A: 	dc.w DPLCS_255-DPLCS
000240FE 0000                       DPLCS_7C: 	dc.w DPLCS_258-DPLCS
00024100 0000                       DPLCS_7E: 	dc.w DPLCS_25F-DPLCS
00024102 0000                       DPLCS_80: 	dc.w DPLCS_266-DPLCS
00024104 0000                       DPLCS_82: 	dc.w DPLCS_26D-DPLCS
00024106 0000                       DPLCS_84: 	dc.w DPLCS_276-DPLCS
00024108 0000                       DPLCS_86: 	dc.w DPLCS_27F-DPLCS
0002410A 0000                       DPLCS_88: 	dc.w DPLCS_28A-DPLCS
0002410C 0000                       DPLCS_8A: 	dc.w DPLCS_295-DPLCS
0002410E 0000                       DPLCS_8C: 	dc.w DPLCS_29A-DPLCS
00024110 0000                       DPLCS_8E: 	dc.w DPLCS_2A1-DPLCS
00024112 0000                       DPLCS_90: 	dc.w DPLCS_2A6-DPLCS
00024114 0000                       DPLCS_92: 	dc.w DPLCS_2AD-DPLCS
00024116 0000                       DPLCS_94: 	dc.w DPLCS_2B2-DPLCS
00024118 0000                       DPLCS_96: 	dc.w DPLCS_2B9-DPLCS
0002411A 0000                       DPLCS_98: 	dc.w DPLCS_2C0-DPLCS
0002411C 0000                       DPLCS_9A: 	dc.w DPLCS_2CB-DPLCS
0002411E 0000                       DPLCS_9C: 	dc.w DPLCS_2D6-DPLCS
00024120 0000                       DPLCS_9E: 	dc.w DPLCS_2DB-DPLCS
00024122 0000                       DPLCS_A0: 	dc.w DPLCS_2E2-DPLCS
00024124 0000                       DPLCS_A2: 	dc.w DPLCS_2E5-DPLCS
00024126 0000                       DPLCS_A4: 	dc.w DPLCS_2E8-DPLCS
00024128 0000                       DPLCS_A6: 	dc.w DPLCS_2EB-DPLCS
0002412A 0000                       DPLCS_A8: 	dc.w DPLCS_2F2-DPLCS
0002412C 0000                       DPLCS_AA: 	dc.w DPLCS_2F9-DPLCS
0002412E 0000                       DPLCS_AC: 	dc.w DPLCS_300-DPLCS
00024130 0000                       DPLCS_AE: 	dc.w DPLCS_307-DPLCS
00024132 0000                       DPLCS_B0: 	dc.w DPLCS_30C-DPLCS
00024134 00                         DPLCS_B2: 	dc.b $0
00024135 02                         DPLCS_B3: 	dc.b $2
00024136 F000                       	dc.b $F0, $0
00024138 1010                       	dc.b $10, $10
0002413A 03                         DPLCS_B8: 	dc.b $3
0002413B 5012                       	dc.b $50, $12
0002413D 5018                       	dc.b $50, $18
0002413F 201E                       	dc.b $20, $1E
00024141 03                         DPLCS_BF: 	dc.b $3
00024142 5021                       	dc.b $50, $21
00024144 5018                       	dc.b $50, $18
00024146 201E                       	dc.b $20, $1E
00024148 03                         DPLCS_C6: 	dc.b $3
00024149 5021                       	dc.b $50, $21
0002414B 5018                       	dc.b $50, $18
0002414D 2027                       	dc.b $20, $27
0002414F 03                         DPLCS_CD: 	dc.b $3
00024150 802A                       	dc.b $80, $2A
00024152 2033                       	dc.b $20, $33
00024154 2036                       	dc.b $20, $36
00024156 04                         DPLCS_D4: 	dc.b $4
00024157 7039                       	dc.b $70, $39
00024159 5041                       	dc.b $50, $41
0002415B 5047                       	dc.b $50, $47
0002415D 104D                       	dc.b $10, $4D
0002415F 02                         DPLCS_DD: 	dc.b $2
00024160 7039                       	dc.b $70, $39
00024162 B04F                       	dc.b $B0, $4F
00024164 02                         DPLCS_E2: 	dc.b $2
00024165 505B                       	dc.b $50, $5B
00024167 8061                       	dc.b $80, $61
00024169 04                         DPLCS_E7: 	dc.b $4
0002416A 505B                       	dc.b $50, $5B
0002416C 506A                       	dc.b $50, $6A
0002416E 5070                       	dc.b $50, $70
00024170 1076                       	dc.b $10, $76
00024172 02                         DPLCS_F0: 	dc.b $2
00024173 505B                       	dc.b $50, $5B
00024175 B078                       	dc.b $B0, $78
00024177 03                         DPLCS_F5: 	dc.b $3
00024178 7039                       	dc.b $70, $39
0002417A 3084                       	dc.b $30, $84
0002417C 5088                       	dc.b $50, $88
0002417E 05                         DPLCS_FC: 	dc.b $5
0002417F 508E                       	dc.b $50, $8E
00024181 5094                       	dc.b $50, $94
00024183 209A                       	dc.b $20, $9A
00024185 509D                       	dc.b $50, $9D
00024187 00A3                       	dc.b $0, $A3
00024189 06                         DPLCS_107: 	dc.b $6
0002418A 508E                       	dc.b $50, $8E
0002418C 10A4                       	dc.b $10, $A4
0002418E 30A6                       	dc.b $30, $A6
00024190 50AA                       	dc.b $50, $AA
00024192 30B0                       	dc.b $30, $B0
00024194 00B4                       	dc.b $0, $B4
00024196 04                         DPLCS_114: 	dc.b $4
00024197 50B5                       	dc.b $50, $B5
00024199 10BB                       	dc.b $10, $BB
0002419B 70BD                       	dc.b $70, $BD
0002419D 20C5                       	dc.b $20, $C5
0002419F 05                         DPLCS_11D: 	dc.b $5
000241A0 50C8                       	dc.b $50, $C8
000241A2 30CE                       	dc.b $30, $CE
000241A4 70D2                       	dc.b $70, $D2
000241A6 20DA                       	dc.b $20, $DA
000241A8 10DD                       	dc.b $10, $DD
000241AA 04                         DPLCS_128: 	dc.b $4
000241AB 50C8                       	dc.b $50, $C8
000241AD 10DF                       	dc.b $10, $DF
000241AF 70E1                       	dc.b $70, $E1
000241B1 20E9                       	dc.b $20, $E9
000241B3 05                         DPLCS_131: 	dc.b $5
000241B4 508E                       	dc.b $50, $8E
000241B6 10A4                       	dc.b $10, $A4
000241B8 009A                       	dc.b $0, $9A
000241BA 70EC                       	dc.b $70, $EC
000241BC 20F4                       	dc.b $20, $F4
000241BE 04                         DPLCS_13C: 	dc.b $4
000241BF 70F7                       	dc.b $70, $F7
000241C1 50FF                       	dc.b $50, $FF
000241C3 1105                       	dc.b $11, $5
000241C5 5107                       	dc.b $51, $7
000241C7 02                         DPLCS_145: 	dc.b $2
000241C8 70F7                       	dc.b $70, $F7
000241CA B10D                       	dc.b $B1, $D
000241CC 02                         DPLCS_14A: 	dc.b $2
000241CD 5119                       	dc.b $51, $19
000241CF 811F                       	dc.b $81, $1F
000241D1 04                         DPLCS_14F: 	dc.b $4
000241D2 5119                       	dc.b $51, $19
000241D4 5128                       	dc.b $51, $28
000241D6 112E                       	dc.b $11, $2E
000241D8 5130                       	dc.b $51, $30
000241DA 02                         DPLCS_158: 	dc.b $2
000241DB 5119                       	dc.b $51, $19
000241DD B136                       	dc.b $B1, $36
000241DF 03                         DPLCS_15D: 	dc.b $3
000241E0 70F7                       	dc.b $70, $F7
000241E2 010D                       	dc.b $1, $D
000241E4 8142                       	dc.b $81, $42
000241E6 06                         DPLCS_164: 	dc.b $6
000241E7 514B                       	dc.b $51, $4B
000241E9 1151                       	dc.b $11, $51
000241EB 1153                       	dc.b $11, $53
000241ED 8155                       	dc.b $81, $55
000241EF 015E                       	dc.b $1, $5E
000241F1 015F                       	dc.b $1, $5F
000241F3 06                         DPLCS_171: 	dc.b $6
000241F4 514B                       	dc.b $51, $4B
000241F6 2160                       	dc.b $21, $60
000241F8 1163                       	dc.b $11, $63
000241FA 1165                       	dc.b $11, $65
000241FC 8167                       	dc.b $81, $67
000241FE 015E                       	dc.b $1, $5E
00024200 04                         DPLCS_17E: 	dc.b $4
00024201 5170                       	dc.b $51, $70
00024203 1176                       	dc.b $11, $76
00024205 8178                       	dc.b $81, $78
00024207 1181                       	dc.b $11, $81
00024209 05                         DPLCS_187: 	dc.b $5
0002420A 5183                       	dc.b $51, $83
0002420C 2189                       	dc.b $21, $89
0002420E 118C                       	dc.b $11, $8C
00024210 718E                       	dc.b $71, $8E
00024212 2196                       	dc.b $21, $96
00024214 04                         DPLCS_192: 	dc.b $4
00024215 5183                       	dc.b $51, $83
00024217 1199                       	dc.b $11, $99
00024219 819B                       	dc.b $81, $9B
0002421B 11A4                       	dc.b $11, $A4
0002421D 05                         DPLCS_19B: 	dc.b $5
0002421E 514B                       	dc.b $51, $4B
00024220 81A6                       	dc.b $81, $A6
00024222 1165                       	dc.b $11, $65
00024224 11AF                       	dc.b $11, $AF
00024226 015E                       	dc.b $1, $5E
00024228 02                         DPLCS_1A6: 	dc.b $2
00024229 51B1                       	dc.b $51, $B1
0002422B B1B7                       	dc.b $B1, $B7
0002422D 02                         DPLCS_1AB: 	dc.b $2
0002422E 505B                       	dc.b $50, $5B
00024230 B1C3                       	dc.b $B1, $C3
00024232 02                         DPLCS_1B0: 	dc.b $2
00024233 51B1                       	dc.b $51, $B1
00024235 B1CF                       	dc.b $B1, $CF
00024237 02                         DPLCS_1B5: 	dc.b $2
00024238 505B                       	dc.b $50, $5B
0002423A B1DB                       	dc.b $B1, $DB
0002423C 04                         DPLCS_1BA: 	dc.b $4
0002423D 51E7                       	dc.b $51, $E7
0002423F 11ED                       	dc.b $11, $ED
00024241 B1EF                       	dc.b $B1, $EF
00024243 01FB                       	dc.b $1, $FB
00024245 03                         DPLCS_1C3: 	dc.b $3
00024246 51FC                       	dc.b $51, $FC
00024248 1202                       	dc.b $12, $2
0002424A B204                       	dc.b $B2, $4
0002424C 04                         DPLCS_1CA: 	dc.b $4
0002424D 51E7                       	dc.b $51, $E7
0002424F 1210                       	dc.b $12, $10
00024251 B212                       	dc.b $B2, $12
00024253 01FB                       	dc.b $1, $FB
00024255 03                         DPLCS_1D3: 	dc.b $3
00024256 51FC                       	dc.b $51, $FC
00024258 1202                       	dc.b $12, $2
0002425A B21E                       	dc.b $B2, $1E
0002425C 02                         DPLCS_1DA: 	dc.b $2
0002425D 522A                       	dc.b $52, $2A
0002425F B230                       	dc.b $B2, $30
00024261 02                         DPLCS_1DF: 	dc.b $2
00024262 5119                       	dc.b $51, $19
00024264 B23C                       	dc.b $B2, $3C
00024266 02                         DPLCS_1E4: 	dc.b $2
00024267 522A                       	dc.b $52, $2A
00024269 B248                       	dc.b $B2, $48
0002426B 02                         DPLCS_1E9: 	dc.b $2
0002426C 5119                       	dc.b $51, $19
0002426E B254                       	dc.b $B2, $54
00024270 04                         DPLCS_1EE: 	dc.b $4
00024271 5260                       	dc.b $52, $60
00024273 1266                       	dc.b $12, $66
00024275 B268                       	dc.b $B2, $68
00024277 0274                       	dc.b $2, $74
00024279 02                         DPLCS_1F7: 	dc.b $2
0002427A 7275                       	dc.b $72, $75
0002427C B27D                       	dc.b $B2, $7D
0002427E 04                         DPLCS_1FC: 	dc.b $4
0002427F 5260                       	dc.b $52, $60
00024281 1289                       	dc.b $12, $89
00024283 B28B                       	dc.b $B2, $8B
00024285 0274                       	dc.b $2, $74
00024287 02                         DPLCS_205: 	dc.b $2
00024288 7275                       	dc.b $72, $75
0002428A B297                       	dc.b $B2, $97
0002428C 01                         DPLCS_20A: 	dc.b $1
0002428D F2A3                       	dc.b $F2, $A3
0002428F 01                         DPLCS_20D: 	dc.b $1
00024290 F2B3                       	dc.b $F2, $B3
00024292 01                         DPLCS_210: 	dc.b $1
00024293 F2C3                       	dc.b $F2, $C3
00024295 01                         DPLCS_213: 	dc.b $1
00024296 F2D3                       	dc.b $F2, $D3
00024298 01                         DPLCS_216: 	dc.b $1
00024299 F2E3                       	dc.b $F2, $E3
0002429B 02                         DPLCS_219: 	dc.b $2
0002429C B2F3                       	dc.b $B2, $F3
0002429E 22FF                       	dc.b $22, $FF
000242A0 01                         DPLCS_21E: 	dc.b $1
000242A1 F302                       	dc.b $F3, $2
000242A3 02                         DPLCS_221: 	dc.b $2
000242A4 B312                       	dc.b $B3, $12
000242A6 231E                       	dc.b $23, $1E
000242A8 01                         DPLCS_226: 	dc.b $1
000242A9 F321                       	dc.b $F3, $21
000242AB 02                         DPLCS_229: 	dc.b $2
000242AC 5331                       	dc.b $53, $31
000242AE B337                       	dc.b $B3, $37
000242B0 04                         DPLCS_22E: 	dc.b $4
000242B1 5343                       	dc.b $53, $43
000242B3 7349                       	dc.b $73, $49
000242B5 1351                       	dc.b $13, $51
000242B7 0353                       	dc.b $3, $53
000242B9 04                         DPLCS_237: 	dc.b $4
000242BA 1354                       	dc.b $13, $54
000242BC 7356                       	dc.b $73, $56
000242BE 235E                       	dc.b $23, $5E
000242C0 0361                       	dc.b $3, $61
000242C2 03                         DPLCS_240: 	dc.b $3
000242C3 2362                       	dc.b $23, $62
000242C5 2365                       	dc.b $23, $65
000242C7 F368                       	dc.b $F3, $68
000242C9 03                         DPLCS_247: 	dc.b $3
000242CA B378                       	dc.b $B3, $78
000242CC 7384                       	dc.b $73, $84
000242CE 0078                       	dc.b $0, $78
000242D0 03                         DPLCS_24E: 	dc.b $3
000242D1 738C                       	dc.b $73, $8C
000242D3 3394                       	dc.b $33, $94
000242D5 2398                       	dc.b $23, $98
000242D7 01                         DPLCS_255: 	dc.b $1
000242D8 839B                       	dc.b $83, $9B
000242DA 03                         DPLCS_258: 	dc.b $3
000242DB 73A4                       	dc.b $73, $A4
000242DD 03AC                       	dc.b $3, $AC
000242DF 33AD                       	dc.b $33, $AD
000242E1 03                         DPLCS_25F: 	dc.b $3
000242E2 73B1                       	dc.b $73, $B1
000242E4 33B9                       	dc.b $33, $B9
000242E6 23BD                       	dc.b $23, $BD
000242E8 03                         DPLCS_266: 	dc.b $3
000242E9 B3C0                       	dc.b $B3, $C0
000242EB 13CC                       	dc.b $13, $CC
000242ED 03CE                       	dc.b $3, $CE
000242EF 04                         DPLCS_26D: 	dc.b $4
000242F0 B3CF                       	dc.b $B3, $CF
000242F2 33DB                       	dc.b $33, $DB
000242F4 03DF                       	dc.b $3, $DF
000242F6 03E0                       	dc.b $3, $E0
000242F8 04                         DPLCS_276: 	dc.b $4
000242F9 B3E1                       	dc.b $B3, $E1
000242FB 33ED                       	dc.b $33, $ED
000242FD 03F1                       	dc.b $3, $F1
000242FF 03F2                       	dc.b $3, $F2
00024301 05                         DPLCS_27F: 	dc.b $5
00024302 83F3                       	dc.b $83, $F3
00024304 13FC                       	dc.b $13, $FC
00024306 53FE                       	dc.b $53, $FE
00024308 1404                       	dc.b $14, $4
0002430A 0406                       	dc.b $4, $6
0002430C 05                         DPLCS_28A: 	dc.b $5
0002430D 8407                       	dc.b $84, $7
0002430F 1410                       	dc.b $14, $10
00024311 53FE                       	dc.b $53, $FE
00024313 1404                       	dc.b $14, $4
00024315 0406                       	dc.b $4, $6
00024317 02                         DPLCS_295: 	dc.b $2
00024318 8412                       	dc.b $84, $12
0002431A 741B                       	dc.b $74, $1B
0002431C 03                         DPLCS_29A: 	dc.b $3
0002431D 8423                       	dc.b $84, $23
0002431F 242C                       	dc.b $24, $2C
00024321 142F                       	dc.b $14, $2F
00024323 02                         DPLCS_2A1: 	dc.b $2
00024324 8431                       	dc.b $84, $31
00024326 743A                       	dc.b $74, $3A
00024328 03                         DPLCS_2A6: 	dc.b $3
00024329 8423                       	dc.b $84, $23
0002432B 2442                       	dc.b $24, $42
0002432D 1445                       	dc.b $14, $45
0002432F 02                         DPLCS_2AD: 	dc.b $2
00024330 5447                       	dc.b $54, $47
00024332 B44D                       	dc.b $B4, $4D
00024334 03                         DPLCS_2B2: 	dc.b $3
00024335 8459                       	dc.b $84, $59
00024337 3462                       	dc.b $34, $62
00024339 0466                       	dc.b $4, $66
0002433B 03                         DPLCS_2B9: 	dc.b $3
0002433C 7467                       	dc.b $74, $67
0002433E 146F                       	dc.b $14, $6F
00024340 B471                       	dc.b $B4, $71
00024342 05                         DPLCS_2C0: 	dc.b $5
00024343 747D                       	dc.b $74, $7D
00024345 1485                       	dc.b $14, $85
00024347 5487                       	dc.b $54, $87
00024349 348D                       	dc.b $34, $8D
0002434B 0491                       	dc.b $4, $91
0002434D 05                         DPLCS_2CB: 	dc.b $5
0002434E 7492                       	dc.b $74, $92
00024350 1485                       	dc.b $14, $85
00024352 549A                       	dc.b $54, $9A
00024354 348D                       	dc.b $34, $8D
00024356 0491                       	dc.b $4, $91
00024358 02                         DPLCS_2D6: 	dc.b $2
00024359 24A0                       	dc.b $24, $A0
0002435B F4A3                       	dc.b $F4, $A3
0002435D 03                         DPLCS_2DB: 	dc.b $3
0002435E 24B3                       	dc.b $24, $B3
00024360 B4B6                       	dc.b $B4, $B6
00024362 24C2                       	dc.b $24, $C2
00024364 01                         DPLCS_2E2: 	dc.b $1
00024365 B4C5                       	dc.b $B4, $C5
00024367 01                         DPLCS_2E5: 	dc.b $1
00024368 54D1                       	dc.b $54, $D1
0002436A 01                         DPLCS_2E8: 	dc.b $1
0002436B 14D7                       	dc.b $14, $D7
0002436D 03                         DPLCS_2EB: 	dc.b $3
0002436E 738C                       	dc.b $73, $8C
00024370 3394                       	dc.b $33, $94
00024372 2398                       	dc.b $23, $98
00024374 03                         DPLCS_2F2: 	dc.b $3
00024375 73A4                       	dc.b $73, $A4
00024377 03AC                       	dc.b $3, $AC
00024379 33AD                       	dc.b $33, $AD
0002437B 03                         DPLCS_2F9: 	dc.b $3
0002437C B4D9                       	dc.b $B4, $D9
0002437E 14E5                       	dc.b $14, $E5
00024380 34E7                       	dc.b $34, $E7
00024382 03                         DPLCS_300: 	dc.b $3
00024383 54EB                       	dc.b $54, $EB
00024385 B4F1                       	dc.b $B4, $F1
00024387 1074                       	dc.b $10, $74
00024389 02                         DPLCS_307: 	dc.b $2
0002438A F4FD                       	dc.b $F4, $FD
0002438C 250D                       	dc.b $25, $D
0002438E 02                         DPLCS_30C: 	dc.b $2
0002438F F510                       	dc.b $F5, $10
00024391 1520                       	dc.b $15, $20
00024394 00                         	even
00024394 00                         	even
00024394                            
00024394                            ; ---------------------------------------------------------------------------
00024394                            ; Uncompressed graphics	- Sonic
00024394                            ; ---------------------------------------------------------------------------
00024394                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002E7D4                            		even
0002E7D4                            ; ---------------------------------------------------------------------------
0002E7D4                            ; Compressed graphics - various
0002E7D4                            ; ---------------------------------------------------------------------------
0002E7D4                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002E8D8                            		even
0002E8D8                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002E912                            		even
0002E912                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002EAA8                            		even
0002EAA8                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002EBF0                            		even
0002EBF0                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002ECFA                            		even
0002ECFA                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002ED4C                            		even
0002ED4C                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002EF94                            		even
0002EF94                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F11A                            		even
0002F11A                            ; ---------------------------------------------------------------------------
0002F11A                            ; Sprite mappings - walls of the special stage
0002F11A                            ; ---------------------------------------------------------------------------
0002F11A                            Map_SSWalls:
0002F11A                            	include "_maps\SSwalls.asm"
0002F11A                            ; ---------------------------------------------------------------------------
0002F11A                            ; Sprite mappings - walls of the special stage
0002F11A                            ; ---------------------------------------------------------------------------
0002F11A 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002F11E 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002F122 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002F126 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002F12A 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002F12E 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002F132 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002F136 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002F13A 01                         byte_2C584:	dc.b 1
0002F13B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002F140 01                         byte_2C58A:	dc.b 1
0002F141 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002F146 01                         byte_2C590:	dc.b 1
0002F147 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002F14C 01                         byte_2C596:	dc.b 1
0002F14D F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002F152 01                         byte_2C59C:	dc.b 1
0002F153 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002F158 01                         byte_2C5A2:	dc.b 1
0002F159 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002F15E 01                         byte_2C5A8:	dc.b 1
0002F15F F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002F164 01                         byte_2C5AE:	dc.b 1
0002F165 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002F16A 01                         byte_2C5B4:	dc.b 1
0002F16B F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002F170 01                         byte_2C5BA:	dc.b 1
0002F171 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002F176 01                         byte_2C5C0:	dc.b 1
0002F177 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002F17C 01                         byte_2C5C6:	dc.b 1
0002F17D F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002F182 01                         byte_2C5CC:	dc.b 1
0002F183 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002F188 01                         byte_2C5D2:	dc.b 1
0002F189 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002F18E 01                         byte_2C5D8:	dc.b 1
0002F18F F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002F194 01                         byte_2C5DE:	dc.b 1
0002F195 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002F19A                            		even
0002F19A                            		even
0002F19A                            ; ---------------------------------------------------------------------------
0002F19A                            ; Compressed graphics - special stage
0002F19A                            ; ---------------------------------------------------------------------------
0002F19A                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002FAD2                            		even
0002FAD2                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002FC06                            		even
0002FC06                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00030896                            		even
00030896                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00030B96                            		even
00030B96                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003108A                            		even
0003108A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031178                            		even
00031178                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031248                            		even
00031248                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003133E                            		even
0003133E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003139C                            		even
0003139C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003142E                            		even
0003142E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000314F0                            		even
000314F0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000315BE                            		even
000315BE                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003168A                            		even
0003168A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00031752                            		even
00031752                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003181C                            		even
0003181C                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000318EC                            		even
000318EC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00031AE0                            		even
00031AE0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00031C48                            		even
00031C48                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00031CF8                            		even
00031CF8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00031DD2                            		even
00031DD2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00031E56                            		even
00031E56                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00031FD4                            		even
00031FD4                            ; ---------------------------------------------------------------------------
00031FD4                            ; Compressed graphics - GHZ stuff
00031FD4                            ; ---------------------------------------------------------------------------
00031FD4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003201E                            		even
0003201E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00032138                            		even
00032138                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032224                            		even
00032224                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003226C                            		even
0003226C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003240A                            		even
0003240A                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032486                            		even
00032486                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003269A                            		even
0003269A                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000327C6                            		even
000327C6                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000328F4                            		even
000328F4                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00032992                            		even
00032992                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000329F2                            		even
000329F2                            ; ---------------------------------------------------------------------------
000329F2                            ; Compressed graphics - LZ stuff
000329F2                            ; ---------------------------------------------------------------------------
000329F2                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00032B16                            		even
00032B16                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003330A                            		even
0003330A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003348A                            		even
0003348A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000335F4                            		even
000335F4                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00033C4A                            		even
00033C4A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00033D00                            		even
00033D00                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00033DA2                            		even
00033DA2                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00033EFE                            		even
00033EFE                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00033F62                            		even
00033F62                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000340B4                            		even
000340B4                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034596                            		even
00034596                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00034706                            		even
00034706                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000349BE                            		even
000349BE                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00034AF6                            		even
00034AF6                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00034C20                            		even
00034C20                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00034D30                            		even
00034D30                            ; ---------------------------------------------------------------------------
00034D30                            ; Compressed graphics - MZ stuff
00034D30                            ; ---------------------------------------------------------------------------
00034D30                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00034FBE                            		even
00034FBE                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003507C                            		even
0003507C                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00035134                            		even
00035134                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035188                            		even
00035188                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035466                            		even
00035466                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00035D7C                            		even
00035D7C                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00035EE0                            		even
00035EE0                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00035F68                            		even
00035F68                            ; ---------------------------------------------------------------------------
00035F68                            ; Compressed graphics - SLZ stuff
00035F68                            ; ---------------------------------------------------------------------------
00035F68                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000361A4                            		even
000361A4                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000362EA                            		even
000362EA                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003652E                            		even
0003652E                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036590                            		even
00036590                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00036672                            		even
00036672                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00036854                            		even
00036854                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00036960                            		even
00036960                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00036A04                            		even
00036A04                            ; ---------------------------------------------------------------------------
00036A04                            ; Compressed graphics - SYZ stuff
00036A04                            ; ---------------------------------------------------------------------------
00036A04                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00036B6E                            		even
00036B6E                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00036BD0                            		even
00036BD0                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00036CB2                            		even
00036CB2                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00036F40                            		even
00036F40                            ; ---------------------------------------------------------------------------
00036F40                            ; Compressed graphics - SBZ stuff
00036F40                            ; ---------------------------------------------------------------------------
00036F40                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00036F94                            		even
00036F94                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037230                            		even
00037230                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037434                            		even
00037434                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000375D2                            		even
000375D2                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00037902                            		even
00037902                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00037AE0                            		even
00037AE0                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00037B38                            		even
00037B38                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00037CB8                            		even
00037CB8                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00037DB6                            		even
00037DB6                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00037F42                            		even
00037F42                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00037F92                            		even
00037F92                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00037FEA                            		even
00037FEA                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000380E6                            		even
000380E6                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000381FC                            		even
000381FC                            ; ---------------------------------------------------------------------------
000381FC                            ; Compressed graphics - enemies
000381FC                            ; ---------------------------------------------------------------------------
000381FC                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000385BC                            		even
000385BC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00038AAA                            		even
00038AAA                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00038E6C 00                         		even
00038E6C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00039054                            		even
00039054                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003973E                            		even
0003973E                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
000399A6                            		even
000399A6                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039C30                            		even
00039C30                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A154                            		even
0003A154                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A34A                            		even
0003A34A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003A968                            		even
0003A968                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003AD50                            		even
0003AD50                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B04C                            		even
0003B04C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B294                            		even
0003B294                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003B52C                            		even
0003B52C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003B70A                            		even
0003B70A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003B898                            		even
0003B898                            ; ---------------------------------------------------------------------------
0003B898                            ; Compressed graphics - various
0003B898                            ; ---------------------------------------------------------------------------
0003B898                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003BEA6                            		even
0003BEA6                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003BF9C                            		even
0003BF9C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C0A2                            		even
0003C0A2                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C196                            		even
0003C196                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003C5EE                            		even
0003C5EE                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003CC54                            		even
0003CC54                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003CD04                            		even
0003CD04                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003CE96                            		even
0003CE96                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003CF98                            		even
0003CF98                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D074                            		even
0003D074                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003D4F0                            		even
0003D4F0                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003D5B0                            		even
0003D5B0                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003D724                            		even
0003D724                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003DA26                            		even
0003DA26                            ; ---------------------------------------------------------------------------
0003DA26                            ; Compressed graphics - continue screen
0003DA26                            ; ---------------------------------------------------------------------------
0003DA26                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003DCD6                            		even
0003DCD6                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003DF10                            		even
0003DF10                            ; ---------------------------------------------------------------------------
0003DF10                            ; Compressed graphics - animals
0003DF10                            ; ---------------------------------------------------------------------------
0003DF10                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E068                            		even
0003E068                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E1C4                            		even
0003E1C4                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E340                            		even
0003E340                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003E45C                            		even
0003E45C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003E592                            		even
0003E592                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003E6CC                            		even
0003E6CC                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003E828                            		even
0003E828                            ; ---------------------------------------------------------------------------
0003E828                            ; Compressed graphics - primary patterns and block mappings
0003E828                            ; ---------------------------------------------------------------------------
0003E828                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F13C                            		even
0003F13C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00040A4A                            		even
00040A4A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00041DCA                            		even
00041DCA                            Blk256_GHZ:	incbin	map256\ghz.bin
000440C8                            		even
000440C8                            Blk16_LZ:	incbin	map16\lz.bin
00044392                            		even
00044392                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00045E1E                            		even
00045E1E                            Blk256_LZ:	incbin	map256\lz.bin
00048602                            		even
00048602                            Blk16_MZ:	incbin	map16\mz.bin
00048E0C                            		even
00048E0C                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004B650                            		even
0004B650                            Blk256_MZ:	incbin	map256\mz.bin
0004CE10                            		even
0004CE10                            Blk16_SLZ:	incbin	map16\slz.bin
0004D0F6                            		even
0004D0F6                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E218                            		even
0004E218                            Blk256_SLZ:	incbin	map256\slz.bin
0004E3D2                            		even
0004E3D2                            Blk16_SYZ:	incbin	map16\syz.bin
0004EC66                            		even
0004EC66                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000522D4                            		even
000522D4                            Blk256_SYZ:	incbin	map256\syz.bin
00054656                            		even
00054656                            Blk16_SBZ:	incbin	map16\sbz.bin
000554F0                            		even
000554F0                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00057C9C                            		even
00057C9C                            Blk256_SBZ:	incbin	map256\sbz.bin
0005A6EC                            		even
0005A6EC                            ; ---------------------------------------------------------------------------
0005A6EC                            ; Compressed graphics - bosses and ending sequence
0005A6EC                            ; ---------------------------------------------------------------------------
0005A6EC                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005AF06 00                         		even
0005AF06                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005B1F0                            		even
0005B1F0                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005BA74                            		even
0005BA74                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005C7CA 00                         		even
0005C7CA                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005CF32                            		even
0005CF32                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005D4B2                            		even
0005D4B2                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005D5D2                            		even
0005D5D2                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005D7D0                            		even
0005D7D0                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005E9AE                            		even
0005E9AE                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005F2F2                            		even
0005F2F2                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005F6C8                            		even
0005F6C8                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005FC58                            		even
0005FC58                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005FEE0                            		even
0005FEE0                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000604DE                            		even
000604DE                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00060766                            		even
00060766                            		incbin	misc\padding2.bin
0006086A                            		even
0006086A                            ; ---------------------------------------------------------------------------
0006086A                            ; Collision data
0006086A                            ; ---------------------------------------------------------------------------
0006086A                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006096A                            		even
0006096A                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006196A                            		even
0006196A                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006296A                            		even
0006296A                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00062B22 00                         		even
00062B22                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00062BEA                            		even
00062BEA                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00062D7A                            		even
00062D7A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00062F6E                            		even
00062F6E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00063162                            		even
00063162                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000633BA                            		even
000633BA                            ; ---------------------------------------------------------------------------
000633BA                            ; Special layouts
000633BA                            ; ---------------------------------------------------------------------------
000633BA                            SS_1:		incbin	sslayout\1.bin
00063634                            		even
00063634                            SS_2:		incbin	sslayout\2.bin
00063A46                            		even
00063A46                            SS_3:		incbin	sslayout\3.bin
00063DA2                            		even
00063DA2                            SS_4:		incbin	sslayout\4.bin
0006427C                            		even
0006427C                            SS_5:		incbin	sslayout\5.bin
0006474E                            		even
0006474E                            SS_6:		incbin	sslayout\6.bin
00064A5E                            		even
00064A5E                            ; ---------------------------------------------------------------------------
00064A5E                            ; Animated uncompressed graphics
00064A5E                            ; ---------------------------------------------------------------------------
00064A5E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00064C5E                            		even
00064C5E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006505E                            		even
0006505E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000654DE                            		even
000654DE                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000657DE                            		even
000657DE                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00065DDE                            		even
00065DDE                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000660DE                            		even
000660DE                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00066B5E                            		even
00066B5E                            
00066B5E                            ; ---------------------------------------------------------------------------
00066B5E                            ; Level	layout index
00066B5E                            ; ---------------------------------------------------------------------------
00066B5E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00066B64 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00066B6A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00066B70 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00066B76 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00066B7C 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00066B82 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00066B88 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00066B8E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00066B94 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00066B9A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00066BA0 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00066BA6 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00066BAC 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00066BB2 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00066BB8 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00066BBE 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00066BC4 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00066BCA 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00066BD0 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00066BD6 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00066BDC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00066BE2 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00066BE8 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00066BEE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00066BF4 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00066BFA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00066C00 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00066C06                            
00066C06                            Level_GHZ1:	incbin	levels\ghz1.bin
00066CF8                            		even
00066CF8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00066CFC                            Level_GHZ2:	incbin	levels\ghz2.bin
00066DC4                            		even
00066DC4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00066DC8                            Level_GHZ3:	incbin	levels\ghz3.bin
00066EEA                            		even
00066EEA                            Level_GHZbg:	incbin	levels\ghzbg.bin
00066F0C                            		even
00066F0C 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00066F10 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00066F14                            
00066F14                            Level_LZ1:	incbin	levels\lz1.bin
00067016                            		even
00067016                            Level_LZbg:	incbin	levels\lzbg.bin
00067118                            		even
00067118 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006711C                            Level_LZ2:	incbin	levels\lz2.bin
000671B6                            		even
000671B6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000671BA                            Level_LZ3:	incbin	levels\lz3.bin
000672D4                            		even
000672D4 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000672D8                            Level_SBZ3:	incbin	levels\sbz3.bin
00067392                            		even
00067392 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00067396                            
00067396                            Level_MZ1:	incbin	levels\mz1.bin
00067434                            		even
00067434                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000674AE                            		even
000674AE                            Level_MZ2:	incbin	levels\mz2.bin
00067552                            		even
00067552                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000675E4                            		even
000675E4 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000675E8                            Level_MZ3:	incbin	levels\mz3.bin
000676CA                            		even
000676CA                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006776E                            		even
0006776E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00067772 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00067776                            
00067776                            Level_SLZ1:	incbin	levels\slz1.bin
00067888                            		even
00067888                            Level_SLZbg:	incbin	levels\slzbg.bin
000678A2                            		even
000678A2                            Level_SLZ2:	incbin	levels\slz2.bin
00067992                            		even
00067992                            Level_SLZ3:	incbin	levels\slz3.bin
00067AAC                            		even
00067AAC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00067AB0                            
00067AB0                            Level_SYZ1:	incbin	levels\syz1.bin
00067B6C 00                         		even
00067B6C                            Level_SYZbg:	incbin	levels\syzbg.bin
00067BA6                            		even
00067BA6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00067BAA                            Level_SYZ2:	incbin	levels\syz2.bin
00067CAE                            		even
00067CAE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00067CB2                            Level_SYZ3:	incbin	levels\syz3.bin
00067E0C 00                         		even
00067E0C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00067E10 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00067E14                            
00067E14                            Level_SBZ1:	incbin	levels\sbz1.bin
00067F36                            		even
00067F36                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00067F74                            		even
00067F74                            Level_SBZ2:	incbin	levels\sbz2.bin
000680B6                            		even
000680B6                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00068220                            		even
00068220 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00068224 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00068228                            Level_End:	incbin	levels\ending.bin
00068258 00                         		even
00068258 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006825C                            
0006825C                            ; ---------------------------------------------------------------------------
0006825C                            ; Animated uncompressed giant ring graphics
0006825C                            ; ---------------------------------------------------------------------------
0006825C                            Art_BigRing:	incbin	artunc\bigring.bin
00068E9C                            		even
00068E9C                            
00068E9C                            		incbin	misc\padding3.bin
00068F38                            		even
00068F38                            
00068F38                            ; ---------------------------------------------------------------------------
00068F38                            ; Sprite locations index
00068F38                            ; ---------------------------------------------------------------------------
00068F38 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F3C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F40 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F44 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F48 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F4C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F50 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F54 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F58 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F5C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F60 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F64 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F68 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F6C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F70 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F74 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F78 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F7C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F80 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F84 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F88 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F8C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F90 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F94 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F98 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068F9C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068FA0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068FA4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00068FA8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00068FAC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00068FB0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00068FB4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00068FB8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00068FBC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00068FC0 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00068FC4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00068FC8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00068FCE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000697F0                            		even
000697F0                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000698A4                            		even
000698A4                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006A2E8                            		even
0006A2E8                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006A690                            		even
0006A690                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006A9C6                            		even
0006A9C6                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006AF12                            		even
0006AF12                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006B3AA                            		even
0006B3AA                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006B3DC                            		even
0006B3DC                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006B40E                            		even
0006B40E                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006B440                            		even
0006B440                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006B472                            		even
0006B472                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006B4BC                            		even
0006B4BC                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006B4FA                            		even
0006B4FA                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006B866                            		even
0006B866                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006BD10                            		even
0006BD10                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006C286                            		even
0006C286                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006C7C6                            		even
0006C7C6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006CC2E                            		even
0006CC2E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006D210                            		even
0006D210                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006D87C                            		even
0006D87C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006DDE6                            		even
0006DDE6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006E3EC                            		even
0006E3EC                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006EB2A                            		even
0006EB2A                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006F208                            		even
0006F208                            ObjPos_FZ:	incbin	objpos\fz.bin
0006F21A                            		even
0006F21A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006F24C                            		even
0006F24C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006F27E                            		even
0006F27E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006F2B0                            		even
0006F2B0                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006F2E2                            		even
0006F2E2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006F314                            		even
0006F314                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006F34C                            		even
0006F34C                            ObjPos_End:	incbin	objpos\ending.bin
0006F4A8                            		even
0006F4A8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006F4AE                            ; ---------------------------------------------------------------------------
0006F4AE                            		incbin	misc\padding4.bin
0006FAD8                            		even
0006FAD8                            
0006FAD8 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006FADC 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006FAE0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006FAE4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006FAE8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006FAEC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006FAF0                            ; ---------------------------------------------------------------------------
0006FAF0                            ; PSG instruments used in music
0006FAF0                            ; ---------------------------------------------------------------------------
0006FAF0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006FAFC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006FB08 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006FB14                            PSG1:		incbin	sound\psg1.bin
0006FB2B                            PSG2:		incbin	sound\psg2.bin
0006FB32                            PSG3:		incbin	sound\psg3.bin
0006FB43                            PSG4:		incbin	sound\psg4.bin
0006FB4E                            PSG6:		incbin	sound\psg6.bin
0006FB5D                            PSG5:		incbin	sound\psg5.bin
0006FB87                            PSG7:		incbin	sound\psg7.bin
0006FBA3                            PSG8:		incbin	sound\psg8.bin
0006FBCB                            PSG9:		incbin	sound\psg9.bin
0006FBDC                            
0006FBDC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006FBE4                            ; ---------------------------------------------------------------------------
0006FBE4                            ; Music	Pointers
0006FBE4                            ; ---------------------------------------------------------------------------
0006FBE4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006FBEC 0000 0000 0000 0000        		dc.l Music83, Music84
0006FBF4 0000 0000 0000 0000        		dc.l Music85, Music86
0006FBFC 0000 0000 0000 0000        		dc.l Music87, Music88
0006FC04 0000 0000 0000 0000        		dc.l Music89, Music8A
0006FC0C 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006FC14 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006FC1C 0000 0000 0000 0000        		dc.l Music8F, Music90
0006FC24 0000 0000 0000 0000        		dc.l Music91, Music92
0006FC2C 0000 0000 0000 0000        		dc.l Music93, Music94
0006FC34 0000 0000 0000 0000        		dc.l Music95, Music96
0006FC3C 0000 0000 0000 0000        		dc.l Music97, Music98
0006FC44 0000 0000 0000 0000        		dc.l Music99, Music9A
0006FC4C 0000 0000 0000 0000        		dc.l Music9B, Music9C
0006FC54 0000 0000 0000 0000        		dc.l Music9D, Music9E
0006FC5C 0000 0000                  		dc.l Music9F
0006FC60                            ; ---------------------------------------------------------------------------
0006FC60                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006FC60                            ; ---------------------------------------------------------------------------
0006FC60 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006FC70 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006FC80 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006FC90 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006FCA0 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006FCB0 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006FCC0 9090 9090                  		dc.b $90, $90, $90, $90
0006FCC4                            
0006FCC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FCC4                            
0006FCC4                            
0006FCC4                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006FCC4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006FCCC 4E71                       		nop	
0006FCCE 4E71                       		nop	
0006FCD0 4E71                       		nop	
0006FCD2                            
0006FCD2                            loc_71B5A:
0006FCD2 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006FCDA 66F6                       		bne.s	loc_71B5A
0006FCDC                            
0006FCDC 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006FCE4 6700                       		beq.s	loc_71B82
0006FCE6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006FCEE 4E71                       		nop	
0006FCF0 4E71                       		nop	
0006FCF2 4E71                       		nop	
0006FCF4 4E71                       		nop	
0006FCF6 4E71                       		nop	
0006FCF8 60CA                       		bra.s	sub_71B4C
0006FCFA                            ; ===========================================================================
0006FCFA                            
0006FCFA                            loc_71B82:
0006FCFA 4DF9 00FF F000             		lea	($FFF000).l,a6
0006FD00 422E 000E                  		clr.b	$E(a6)
0006FD04 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006FD08 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006FD0C 532E 0001                  		subq.b	#1,1(a6)
0006FD10 6600                       		bne.s	loc_71B9E
0006FD12 4EBA 0000                  		jsr	sub_7260C(pc)
0006FD16                            
0006FD16                            loc_71B9E:
0006FD16 102E 0004                  		move.b	4(a6),d0
0006FD1A 6700                       		beq.s	loc_71BA8
0006FD1C 4EBA 0000                  		jsr	sub_72504(pc)
0006FD20                            
0006FD20                            loc_71BA8:
0006FD20 4A2E 0024                  		tst.b	$24(a6)
0006FD24 6700                       		beq.s	loc_71BB2
0006FD26 4EBA 0000                  		jsr	sub_7267C(pc)
0006FD2A                            
0006FD2A                            loc_71BB2:
0006FD2A 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006FD2E 6700                       		beq.s	loc_71BBC	; if not, branch
0006FD30 4EBA 0000                  		jsr	Sound_Play(pc)
0006FD34                            
0006FD34                            loc_71BBC:
0006FD34 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006FD3A 6700                       		beq.s	loc_71BC8
0006FD3C 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006FD40                            
0006FD40                            loc_71BC8:
0006FD40 4BEE 0040                  		lea	$40(a6),a5
0006FD44 4A15                       		tst.b	(a5)
0006FD46 6A00                       		bpl.s	loc_71BD4
0006FD48 4EBA 0000                  		jsr	sub_71C4E(pc)
0006FD4C                            
0006FD4C                            loc_71BD4:
0006FD4C 422E 0008                  		clr.b	8(a6)
0006FD50 7E05                       		moveq	#5,d7
0006FD52                            
0006FD52                            loc_71BDA:
0006FD52 DAFC 0030                  		adda.w	#$30,a5
0006FD56 4A15                       		tst.b	(a5)
0006FD58 6A00                       		bpl.s	loc_71BE6
0006FD5A 4EBA 0000                  		jsr	sub_71CCA(pc)
0006FD5E                            
0006FD5E                            loc_71BE6:
0006FD5E 51CF FFF2                  		dbf	d7,loc_71BDA
0006FD62                            
0006FD62 7E02                       		moveq	#2,d7
0006FD64                            
0006FD64                            loc_71BEC:
0006FD64 DAFC 0030                  		adda.w	#$30,a5
0006FD68 4A15                       		tst.b	(a5)
0006FD6A 6A00                       		bpl.s	loc_71BF8
0006FD6C 4EBA 0000                  		jsr	sub_72850(pc)
0006FD70                            
0006FD70                            loc_71BF8:
0006FD70 51CF FFF2                  		dbf	d7,loc_71BEC
0006FD74                            
0006FD74 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006FD7A 7E02                       		moveq	#2,d7
0006FD7C                            
0006FD7C                            loc_71C04:
0006FD7C DAFC 0030                  		adda.w	#$30,a5
0006FD80 4A15                       		tst.b	(a5)
0006FD82 6A00                       		bpl.s	loc_71C10
0006FD84 4EBA 0000                  		jsr	sub_71CCA(pc)
0006FD88                            
0006FD88                            loc_71C10:
0006FD88 51CF FFF2                  		dbf	d7,loc_71C04
0006FD8C                            
0006FD8C 7E02                       		moveq	#2,d7
0006FD8E                            
0006FD8E                            loc_71C16:
0006FD8E DAFC 0030                  		adda.w	#$30,a5
0006FD92 4A15                       		tst.b	(a5)
0006FD94 6A00                       		bpl.s	loc_71C22
0006FD96 4EBA 0000                  		jsr	sub_72850(pc)
0006FD9A                            
0006FD9A                            loc_71C22:
0006FD9A 51CF FFF2                  		dbf	d7,loc_71C16
0006FD9E 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006FDA4 DAFC 0030                  		adda.w	#$30,a5
0006FDA8 4A15                       		tst.b	(a5)
0006FDAA 6A00                       		bpl.s	loc_71C38
0006FDAC 4EBA 0000                  		jsr	sub_71CCA(pc)
0006FDB0                            
0006FDB0                            loc_71C38:
0006FDB0 DAFC 0030                  		adda.w	#$30,a5
0006FDB4 4A15                       		tst.b	(a5)
0006FDB6 6A00                       		bpl.s	loc_71C44
0006FDB8 4EBA 0000                  		jsr	sub_72850(pc)
0006FDBC                            
0006FDBC                            loc_71C44:
0006FDBC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006FDC4 4E75                       		rts	
0006FDC6                            ; End of function sub_71B4C
0006FDC6                            
0006FDC6                            
0006FDC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FDC6                            
0006FDC6                            
0006FDC6                            sub_71C4E:				; XREF: sub_71B4C
0006FDC6 532D 000E                  		subq.b	#1,$E(a5)
0006FDCA 6600                       		bne.s	locret_71CAA
0006FDCC 1D7C 0080 0008             		move.b	#$80,8(a6)
0006FDD2 286D 0004                  		movea.l	4(a5),a4
0006FDD6                            
0006FDD6                            loc_71C5E:
0006FDD6 7A00                       		moveq	#0,d5
0006FDD8 1A1C                       		move.b	(a4)+,d5
0006FDDA 0C05 00E0                  		cmpi.b	#-$20,d5
0006FDDE 6500                       		bcs.s	loc_71C6E
0006FDE0 4EBA 0000                  		jsr	sub_72A5A(pc)
0006FDE4 60F0                       		bra.s	loc_71C5E
0006FDE6                            ; ===========================================================================
0006FDE6                            
0006FDE6                            loc_71C6E:
0006FDE6 4A05                       		tst.b	d5
0006FDE8 6A00                       		bpl.s	loc_71C84
0006FDEA 1B45 0010                  		move.b	d5,$10(a5)
0006FDEE 1A1C                       		move.b	(a4)+,d5
0006FDF0 6A00                       		bpl.s	loc_71C84
0006FDF2 534C                       		subq.w	#1,a4
0006FDF4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006FDFA 6000                       		bra.s	loc_71C88
0006FDFC                            ; ===========================================================================
0006FDFC                            
0006FDFC                            loc_71C84:
0006FDFC 4EBA 0000                  		jsr	sub_71D40(pc)
0006FE00                            
0006FE00                            loc_71C88:
0006FE00 2B4C 0004                  		move.l	a4,4(a5)
0006FE04 0815 0002                  		btst	#2,(a5)
0006FE08 6600                       		bne.s	locret_71CAA
0006FE0A 7000                       		moveq	#0,d0
0006FE0C 102D 0010                  		move.b	$10(a5),d0
0006FE10 0C00 0080                  		cmpi.b	#$80,d0
0006FE14 6700                       		beq.s	locret_71CAA
0006FE16 0800 0003                  		btst	#3,d0
0006FE1A 6600                       		bne.s	loc_71CAC
0006FE1C 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006FE22                            
0006FE22                            locret_71CAA:
0006FE22 4E75                       		rts	
0006FE24                            ; ===========================================================================
0006FE24                            
0006FE24                            loc_71CAC:
0006FE24 0400 0088                  		subi.b	#$88,d0
0006FE28 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006FE2C 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006FE32 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006FE3A 4E75                       		rts	
0006FE3C                            ; End of function sub_71C4E
0006FE3C                            
0006FE3C                            ; ===========================================================================
0006FE3C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006FE42                            
0006FE42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FE42                            
0006FE42                            
0006FE42                            sub_71CCA:				; XREF: sub_71B4C
0006FE42 532D 000E                  		subq.b	#1,$E(a5)
0006FE46 6600                       		bne.s	loc_71CE0
0006FE48 0895 0004                  		bclr	#4,(a5)
0006FE4C 4EBA 0000                  		jsr	sub_71CEC(pc)
0006FE50 4EBA 0000                  		jsr	sub_71E18(pc)
0006FE54 6000 0000                  		bra.w	loc_726E2
0006FE58                            ; ===========================================================================
0006FE58                            
0006FE58                            loc_71CE0:
0006FE58 4EBA 0000                  		jsr	sub_71D9E(pc)
0006FE5C 4EBA 0000                  		jsr	sub_71DC6(pc)
0006FE60 6000 0000                  		bra.w	loc_71E24
0006FE64                            ; End of function sub_71CCA
0006FE64                            
0006FE64                            
0006FE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FE64                            
0006FE64                            
0006FE64                            sub_71CEC:				; XREF: sub_71CCA
0006FE64 286D 0004                  		movea.l	4(a5),a4
0006FE68 0895 0001                  		bclr	#1,(a5)
0006FE6C                            
0006FE6C                            loc_71CF4:
0006FE6C 7A00                       		moveq	#0,d5
0006FE6E 1A1C                       		move.b	(a4)+,d5
0006FE70 0C05 00E0                  		cmpi.b	#-$20,d5
0006FE74 6500                       		bcs.s	loc_71D04
0006FE76 4EBA 0000                  		jsr	sub_72A5A(pc)
0006FE7A 60F0                       		bra.s	loc_71CF4
0006FE7C                            ; ===========================================================================
0006FE7C                            
0006FE7C                            loc_71D04:
0006FE7C 4EBA 0000                  		jsr	sub_726FE(pc)
0006FE80 4A05                       		tst.b	d5
0006FE82 6A00                       		bpl.s	loc_71D1A
0006FE84 4EBA 0000                  		jsr	sub_71D22(pc)
0006FE88 1A1C                       		move.b	(a4)+,d5
0006FE8A 6A00                       		bpl.s	loc_71D1A
0006FE8C 534C                       		subq.w	#1,a4
0006FE8E 6000 0000                  		bra.w	sub_71D60
0006FE92                            ; ===========================================================================
0006FE92                            
0006FE92                            loc_71D1A:
0006FE92 4EBA 0000                  		jsr	sub_71D40(pc)
0006FE96 6000 0000                  		bra.w	sub_71D60
0006FE9A                            ; End of function sub_71CEC
0006FE9A                            
0006FE9A                            
0006FE9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FE9A                            
0006FE9A                            
0006FE9A                            sub_71D22:				; XREF: sub_71CEC
0006FE9A 0405 0080                  		subi.b	#$80,d5
0006FE9E 6700                       		beq.s	loc_71D58
0006FEA0 DA2D 0008                  		add.b	8(a5),d5
0006FEA4 0245 007F                  		andi.w	#$7F,d5
0006FEA8 E34D                       		lsl.w	#1,d5
0006FEAA 41FA 0000                  		lea	word_72790(pc),a0
0006FEAE 3C30 5000                  		move.w	(a0,d5.w),d6
0006FEB2 3B46 0010                  		move.w	d6,$10(a5)
0006FEB6 4E75                       		rts	
0006FEB8                            ; End of function sub_71D22
0006FEB8                            
0006FEB8                            
0006FEB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FEB8                            
0006FEB8                            
0006FEB8                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006FEB8 1005                       		move.b	d5,d0
0006FEBA 122D 0002                  		move.b	2(a5),d1
0006FEBE                            
0006FEBE                            loc_71D46:
0006FEBE 5301                       		subq.b	#1,d1
0006FEC0 6700                       		beq.s	loc_71D4E
0006FEC2 D005                       		add.b	d5,d0
0006FEC4 60F8                       		bra.s	loc_71D46
0006FEC6                            ; ===========================================================================
0006FEC6                            
0006FEC6                            loc_71D4E:
0006FEC6 1B40 000F                  		move.b	d0,$F(a5)
0006FECA 1B40 000E                  		move.b	d0,$E(a5)
0006FECE 4E75                       		rts	
0006FED0                            ; End of function sub_71D40
0006FED0                            
0006FED0                            ; ===========================================================================
0006FED0                            
0006FED0                            loc_71D58:				; XREF: sub_71D22
0006FED0 08D5 0001                  		bset	#1,(a5)
0006FED4 426D 0010                  		clr.w	$10(a5)
0006FED8                            
0006FED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FED8                            
0006FED8                            
0006FED8                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006FED8 2B4C 0004                  		move.l	a4,4(a5)
0006FEDC 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006FEE2 0815 0004                  		btst	#4,(a5)
0006FEE6 6600                       		bne.s	locret_71D9C
0006FEE8 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006FEEE 422D 000C                  		clr.b	$C(a5)
0006FEF2 0815 0003                  		btst	#3,(a5)
0006FEF6 6700                       		beq.s	locret_71D9C
0006FEF8 206D 0014                  		movea.l	$14(a5),a0
0006FEFC 1B58 0018                  		move.b	(a0)+,$18(a5)
0006FF00 1B58 0019                  		move.b	(a0)+,$19(a5)
0006FF04 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006FF08 1018                       		move.b	(a0)+,d0
0006FF0A E208                       		lsr.b	#1,d0
0006FF0C 1B40 001B                  		move.b	d0,$1B(a5)
0006FF10 426D 001C                  		clr.w	$1C(a5)
0006FF14                            
0006FF14                            locret_71D9C:
0006FF14 4E75                       		rts	
0006FF16                            ; End of function sub_71D60
0006FF16                            
0006FF16                            
0006FF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FF16                            
0006FF16                            
0006FF16                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006FF16 4A2D 0012                  		tst.b	$12(a5)
0006FF1A 6700                       		beq.s	locret_71DC4
0006FF1C 532D 0012                  		subq.b	#1,$12(a5)
0006FF20 6600                       		bne.s	locret_71DC4
0006FF22 08D5 0001                  		bset	#1,(a5)
0006FF26 4A2D 0001                  		tst.b	1(a5)
0006FF2A 6B00 0000                  		bmi.w	loc_71DBE
0006FF2E 4EBA 0000                  		jsr	sub_726FE(pc)
0006FF32 584F                       		addq.w	#4,sp
0006FF34 4E75                       		rts	
0006FF36                            ; ===========================================================================
0006FF36                            
0006FF36                            loc_71DBE:
0006FF36 4EBA 0000                  		jsr	sub_729A0(pc)
0006FF3A 584F                       		addq.w	#4,sp
0006FF3C                            
0006FF3C                            locret_71DC4:
0006FF3C 4E75                       		rts	
0006FF3E                            ; End of function sub_71D9E
0006FF3E                            
0006FF3E                            
0006FF3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FF3E                            
0006FF3E                            
0006FF3E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006FF3E 584F                       		addq.w	#4,sp
0006FF40 0815 0003                  		btst	#3,(a5)
0006FF44 6700                       		beq.s	locret_71E16
0006FF46 4A2D 0018                  		tst.b	$18(a5)
0006FF4A 6700                       		beq.s	loc_71DDA
0006FF4C 532D 0018                  		subq.b	#1,$18(a5)
0006FF50 4E75                       		rts	
0006FF52                            ; ===========================================================================
0006FF52                            
0006FF52                            loc_71DDA:
0006FF52 532D 0019                  		subq.b	#1,$19(a5)
0006FF56 6700                       		beq.s	loc_71DE2
0006FF58 4E75                       		rts	
0006FF5A                            ; ===========================================================================
0006FF5A                            
0006FF5A                            loc_71DE2:
0006FF5A 206D 0014                  		movea.l	$14(a5),a0
0006FF5E 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006FF64 4A2D 001B                  		tst.b	$1B(a5)
0006FF68 6600                       		bne.s	loc_71DFE
0006FF6A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006FF70 442D 001A                  		neg.b	$1A(a5)
0006FF74 4E75                       		rts	
0006FF76                            ; ===========================================================================
0006FF76                            
0006FF76                            loc_71DFE:
0006FF76 532D 001B                  		subq.b	#1,$1B(a5)
0006FF7A 1C2D 001A                  		move.b	$1A(a5),d6
0006FF7E 4886                       		ext.w	d6
0006FF80 DC6D 001C                  		add.w	$1C(a5),d6
0006FF84 3B46 001C                  		move.w	d6,$1C(a5)
0006FF88 DC6D 0010                  		add.w	$10(a5),d6
0006FF8C 594F                       		subq.w	#4,sp
0006FF8E                            
0006FF8E                            locret_71E16:
0006FF8E 4E75                       		rts	
0006FF90                            ; End of function sub_71DC6
0006FF90                            
0006FF90                            
0006FF90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FF90                            
0006FF90                            
0006FF90                            sub_71E18:				; XREF: sub_71CCA
0006FF90 0815 0001                  		btst	#1,(a5)
0006FF94 6600                       		bne.s	locret_71E48
0006FF96 3C2D 0010                  		move.w	$10(a5),d6
0006FF9A 6700                       		beq.s	loc_71E4A
0006FF9C                            
0006FF9C                            loc_71E24:				; XREF: sub_71CCA
0006FF9C 102D 001E                  		move.b	$1E(a5),d0
0006FFA0 4880                       		ext.w	d0
0006FFA2 DC40                       		add.w	d0,d6
0006FFA4 0815 0002                  		btst	#2,(a5)
0006FFA8 6600                       		bne.s	locret_71E48
0006FFAA 3206                       		move.w	d6,d1
0006FFAC E049                       		lsr.w	#8,d1
0006FFAE 103C 00A4                  		move.b	#-$5C,d0
0006FFB2 4EBA 0000                  		jsr	sub_72722(pc)
0006FFB6 1206                       		move.b	d6,d1
0006FFB8 103C 00A0                  		move.b	#-$60,d0
0006FFBC 4EBA 0000                  		jsr	sub_72722(pc)
0006FFC0                            
0006FFC0                            locret_71E48:
0006FFC0 4E75                       		rts	
0006FFC2                            ; ===========================================================================
0006FFC2                            
0006FFC2                            loc_71E4A:
0006FFC2 08D5 0001                  		bset	#1,(a5)
0006FFC6 4E75                       		rts	
0006FFC8                            ; End of function sub_71E18
0006FFC8                            
0006FFC8                            ; ===========================================================================
0006FFC8                            
0006FFC8                            loc_71E50:				; XREF: sub_71B4C
0006FFC8 6B00                       		bmi.s	loc_71E94
0006FFCA 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006FFD0 6700 0000                  		beq.w	loc_71EFE
0006FFD4 1D7C 0002 0003             		move.b	#2,3(a6)
0006FFDA 7602                       		moveq	#2,d3
0006FFDC 103C 00B4                  		move.b	#-$4C,d0
0006FFE0 7200                       		moveq	#0,d1
0006FFE2                            
0006FFE2                            loc_71E6A:
0006FFE2 4EBA 0000                  		jsr	sub_7272E(pc)
0006FFE6 4EBA 0000                  		jsr	sub_72764(pc)
0006FFEA 5200                       		addq.b	#1,d0
0006FFEC 51CB FFF4                  		dbf	d3,loc_71E6A
0006FFF0                            
0006FFF0 7602                       		moveq	#2,d3
0006FFF2 7028                       		moveq	#$28,d0
0006FFF4                            
0006FFF4                            loc_71E7C:
0006FFF4 1203                       		move.b	d3,d1
0006FFF6 4EBA 0000                  		jsr	sub_7272E(pc)
0006FFFA 5801                       		addq.b	#4,d1
0006FFFC 4EBA 0000                  		jsr	sub_7272E(pc)
00070000 51CB FFF2                  		dbf	d3,loc_71E7C
00070004                            
00070004 4EBA 0000                  		jsr	sub_729B6(pc)
00070008 6000 FDB2                  		bra.w	loc_71C44
0007000C                            ; ===========================================================================
0007000C                            
0007000C                            loc_71E94:				; XREF: loc_71E50
0007000C 422E 0003                  		clr.b	3(a6)
00070010 7630                       		moveq	#$30,d3
00070012 4BEE 0040                  		lea	$40(a6),a5
00070016 7806                       		moveq	#6,d4
00070018                            
00070018                            loc_71EA0:
00070018 0815 0007                  		btst	#7,(a5)
0007001C 6700                       		beq.s	loc_71EB8
0007001E 0815 0002                  		btst	#2,(a5)
00070022 6600                       		bne.s	loc_71EB8
00070024 103C 00B4                  		move.b	#-$4C,d0
00070028 122D 000A                  		move.b	$A(a5),d1
0007002C 4EBA 0000                  		jsr	sub_72722(pc)
00070030                            
00070030                            loc_71EB8:
00070030 DAC3                       		adda.w	d3,a5
00070032 51CC FFE4                  		dbf	d4,loc_71EA0
00070036                            
00070036 4BEE 0220                  		lea	$220(a6),a5
0007003A 7802                       		moveq	#2,d4
0007003C                            
0007003C                            loc_71EC4:
0007003C 0815 0007                  		btst	#7,(a5)
00070040 6700                       		beq.s	loc_71EDC
00070042 0815 0002                  		btst	#2,(a5)
00070046 6600                       		bne.s	loc_71EDC
00070048 103C 00B4                  		move.b	#-$4C,d0
0007004C 122D 000A                  		move.b	$A(a5),d1
00070050 4EBA 0000                  		jsr	sub_72722(pc)
00070054                            
00070054                            loc_71EDC:
00070054 DAC3                       		adda.w	d3,a5
00070056 51CC FFE4                  		dbf	d4,loc_71EC4
0007005A                            
0007005A 4BEE 0340                  		lea	$340(a6),a5
0007005E 0815 0007                  		btst	#7,(a5)
00070062 6700                       		beq.s	loc_71EFE
00070064 0815 0002                  		btst	#2,(a5)
00070068 6600                       		bne.s	loc_71EFE
0007006A 103C 00B4                  		move.b	#-$4C,d0
0007006E 122D 000A                  		move.b	$A(a5),d1
00070072 4EBA 0000                  		jsr	sub_72722(pc)
00070076                            
00070076                            loc_71EFE:
00070076 6000 FD44                  		bra.w	loc_71C44
0007007A                            
0007007A                            ; ---------------------------------------------------------------------------
0007007A                            ; Subroutine to	play a sound or	music track
0007007A                            ; ---------------------------------------------------------------------------
0007007A                            
0007007A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007007A                            
0007007A                            
0007007A                            Sound_Play:				; XREF: sub_71B4C
0007007A 2079 0006 FAD8             		movea.l	(Go_SoundTypes).l,a0
00070080 43EE 000A                  		lea	$A(a6),a1	; load music track number
00070084 1616                       		move.b	0(a6),d3
00070086 7802                       		moveq	#2,d4
00070088                            
00070088                            loc_71F12:
00070088 1011                       		move.b	(a1),d0		; move track number to d0
0007008A 1200                       		move.b	d0,d1
0007008C 4219                       		clr.b	(a1)+
0007008E 0400 0081                  		subi.b	#$81,d0
00070092 6500                       		bcs.s	loc_71F3E
00070094 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007009A 6700                       		beq.s	loc_71F2C
0007009C 1D41 000A                  		move.b	d1,$A(a6)
000700A0 6000                       		bra.s	loc_71F3E
000700A2                            ; ===========================================================================
000700A2                            
000700A2                            loc_71F2C:
000700A2 0240 007F                  		andi.w	#$7F,d0
000700A6 1430 0000                  		move.b	(a0,d0.w),d2
000700AA B403                       		cmp.b	d3,d2
000700AC 6500                       		bcs.s	loc_71F3E
000700AE 1602                       		move.b	d2,d3
000700B0 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000700B4                            
000700B4                            loc_71F3E:
000700B4 51CC FFD2                  		dbf	d4,loc_71F12
000700B8                            
000700B8 4A03                       		tst.b	d3
000700BA 6B00                       		bmi.s	locret_71F4A
000700BC 1C83                       		move.b	d3,0(a6)
000700BE                            
000700BE                            locret_71F4A:
000700BE 4E75                       		rts	
000700C0                            ; End of function Sound_Play
000700C0                            
000700C0                            
000700C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000700C0                            
000700C0                            
000700C0                            Sound_ChkValue:				; XREF: sub_71B4C
000700C0 7E00                       		moveq	#0,d7
000700C2 1E2E 0009                  		move.b	9(a6),d7
000700C6 6700 0000                  		beq.w	Sound_E4
000700CA 6A00                       		bpl.s	locret_71F8C
000700CC 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000700D2 0C07 009F                  		cmpi.b	#$9F,d7
000700D6 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000700DA 0C07 00A0                  		cmpi.b	#$A0,d7
000700DE 6500 0000                  		bcs.w	locret_71F8C
000700E2 0C07 00CF                  		cmpi.b	#$CF,d7
000700E6 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000700EA 0C07 00D0                  		cmpi.b	#$D0,d7
000700EE 6500 0000                  		bcs.w	locret_71F8C
000700F2 0C07 00E0                  		cmpi.b	#$E0,d7
000700F6 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000700FA 0C07 00E5                  		cmpi.b	#$E5,d7
000700FE 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00070100                            
00070100                            locret_71F8C:
00070100 4E75                       		rts	
00070102                            ; ===========================================================================
00070102                            
00070102                            Sound_E0toE5				; XREF: Sound_ChkValue
00070102 0407 00E0                  		subi.b	#$E0,d7
00070106 E54F                       		lsl.w	#2,d7
00070108 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007010C                            ; ===========================================================================
0007010C                            
0007010C                            Sound_ExIndex:
0007010C 6000 0000                  		bra.w	Sound_E0
00070110                            ; ===========================================================================
00070110 6000 0000                  		bra.w	Sound_E1
00070114                            ; ===========================================================================
00070114 6000 0000                  		bra.w	Sound_E2
00070118                            ; ===========================================================================
00070118 6000 0000                  		bra.w	Sound_E3
0007011C                            ; ===========================================================================
0007011C 6000 0000                  		bra.w	Sound_E4
00070120                            ; ===========================================================================
00070120 6000 0000                  		bra.w	Sound_E5
00070124                            ; ===========================================================================
00070124                            ; ---------------------------------------------------------------------------
00070124                            ; Play "Say-gaa" PCM sound
00070124                            ; ---------------------------------------------------------------------------
00070124                            
00070124                            Sound_E1:				  
00070124 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007012A 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00070130 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00070138                            PlayPCM_Loop:	  
00070138 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007013E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00070142 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00070146 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00070148 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007014A 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007014E 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00070154 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00070158 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007015E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00070160 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00070162                            return_PlayPCM: 
00070162 584F                       		addq.w	#4,sp 
00070164 4E75                       		rts
00070166                            		
00070166                            ; ---------------------------------------------------------------------------
00070166                            ; Play you are an idiot pcm sound
00070166                            ; ---------------------------------------------------------------------------
00070166                            
00070166                            Sound_E5:  
00070166 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007016C 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00070172 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007017A                            PlayPCM_LoopE5:	  
0007017A                            
0007017A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00070180                            		
00070180 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00070184                            		
00070184 1038 FE24                  		move.b	($FFFFFE24).w,d0
00070188 0200 000F                  		andi.b	#$F,d0
0007018C 6700                       		beq.s	SfxE5SwapPalette
0007018E                            		
0007018E 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00070192 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00070196 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00070198 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007019A 60DE                       		bra.s	PlayPCM_LoopE5
0007019C                            		
0007019C                            SfxE5SwapPalette:
0007019C                            		
0007019C                            		
0007019C                            		
0007019C 4BF9 00C0 0004             		lea	($C00004).l,a5
000701A2 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000701A8                            		
000701A8                            		
000701A8 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000701AE 6700                       		beq.s	@not_black
000701B0 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000701B6 6000                       		bra.s	@merge
000701B8                            	@not_black:
000701B8 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000701BE                            	@merge:
000701BE 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000701C2 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000701C6 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000701CC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000701D0                            		
000701D0 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000701D4 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000701D8 60A0                       		bra.s	PlayPCM_LoopE5
000701DA                            		
000701DA                            ; ===========================================================================
000701DA                            ; ---------------------------------------------------------------------------
000701DA                            ; Play music track $81-$9F
000701DA                            ; ---------------------------------------------------------------------------
000701DA                            
000701DA                            Sound_81to9F:				; XREF: Sound_ChkValue
000701DA 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000701DE 6600                       		bne.s	loc_72024	; if not, branch
000701E0 4A2E 0027                  		tst.b	$27(a6)
000701E4 6600 0000                  		bne.w	loc_721B6
000701E8 4BEE 0040                  		lea	$40(a6),a5
000701EC 7009                       		moveq	#9,d0
000701EE                            
000701EE                            loc_71FE6:
000701EE 0895 0002                  		bclr	#2,(a5)
000701F2 DAFC 0030                  		adda.w	#$30,a5
000701F6 51C8 FFF6                  		dbf	d0,loc_71FE6
000701FA                            
000701FA 4BEE 0220                  		lea	$220(a6),a5
000701FE 7005                       		moveq	#5,d0
00070200                            
00070200                            loc_71FF8:
00070200 0895 0007                  		bclr	#7,(a5)
00070204 DAFC 0030                  		adda.w	#$30,a5
00070208 51C8 FFF6                  		dbf	d0,loc_71FF8
0007020C 4216                       		clr.b	0(a6)
0007020E 204E                       		movea.l	a6,a0
00070210 43EE 03A0                  		lea	$3A0(a6),a1
00070214 303C 0087                  		move.w	#$87,d0
00070218                            
00070218                            loc_72012:
00070218 22D8                       		move.l	(a0)+,(a1)+
0007021A 51C8 FFFC                  		dbf	d0,loc_72012
0007021E                            
0007021E 1D7C 0080 0027             		move.b	#$80,$27(a6)
00070224 4216                       		clr.b	0(a6)
00070226 6000                       		bra.s	loc_7202C
00070228                            ; ===========================================================================
00070228                            
00070228                            loc_72024:
00070228 422E 0027                  		clr.b	$27(a6)
0007022C 422E 0026                  		clr.b	$26(a6)
00070230                            
00070230                            loc_7202C:
00070230 4EBA 0000                  		jsr	sub_725CA(pc)
00070234 2879 0006 FAE8             		movea.l	(off_719A0).l,a4
0007023A 0407 0081                  		subi.b	#$81,d7
0007023E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00070244 2879 0006 FAE0             		movea.l	(Go_MusicIndex).l,a4
0007024A E54F                       		lsl.w	#2,d7
0007024C 2874 7000                  		movea.l	(a4,d7.w),a4
00070250 7000                       		moveq	#0,d0
00070252 3014                       		move.w	(a4),d0
00070254 D08C                       		add.l	a4,d0
00070256 2D40 0018                  		move.l	d0,$18(a6)
0007025A 102C 0005                  		move.b	5(a4),d0
0007025E 1D40 0028                  		move.b	d0,$28(a6)
00070262 4A2E 002A                  		tst.b	$2A(a6)
00070266 6700                       		beq.s	loc_72068
00070268 102E 0029                  		move.b	$29(a6),d0
0007026C                            
0007026C                            loc_72068:
0007026C 1D40 0002                  		move.b	d0,2(a6)
00070270 1D40 0001                  		move.b	d0,1(a6)
00070274 7200                       		moveq	#0,d1
00070276 264C                       		movea.l	a4,a3
00070278 5C4C                       		addq.w	#6,a4
0007027A 7E00                       		moveq	#0,d7
0007027C 1E2B 0002                  		move.b	2(a3),d7
00070280 6700 0000                  		beq.w	loc_72114
00070284 5307                       		subq.b	#1,d7
00070286 123C 00C0                  		move.b	#-$40,d1
0007028A 182B 0004                  		move.b	4(a3),d4
0007028E 7C30                       		moveq	#$30,d6
00070290 1A3C 0001                  		move.b	#1,d5
00070294 43EE 0040                  		lea	$40(a6),a1
00070298 45FA 0000                  		lea	byte_721BA(pc),a2
0007029C                            
0007029C                            loc_72098:
0007029C 08D1 0007                  		bset	#7,(a1)
000702A0 135A 0001                  		move.b	(a2)+,1(a1)
000702A4 1344 0002                  		move.b	d4,2(a1)
000702A8 1346 000D                  		move.b	d6,$D(a1)
000702AC 1341 000A                  		move.b	d1,$A(a1)
000702B0 1345 000E                  		move.b	d5,$E(a1)
000702B4 7000                       		moveq	#0,d0
000702B6 301C                       		move.w	(a4)+,d0
000702B8 D08B                       		add.l	a3,d0
000702BA 2340 0004                  		move.l	d0,4(a1)
000702BE 335C 0008                  		move.w	(a4)+,8(a1)
000702C2 D2C6                       		adda.w	d6,a1
000702C4 51CF FFD6                  		dbf	d7,loc_72098
000702C8 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000702CE 6600                       		bne.s	loc_720D8
000702D0 702B                       		moveq	#$2B,d0
000702D2 7200                       		moveq	#0,d1
000702D4 4EBA 0000                  		jsr	sub_7272E(pc)
000702D8 6000 0000                  		bra.w	loc_72114
000702DC                            ; ===========================================================================
000702DC                            
000702DC                            loc_720D8:
000702DC 7028                       		moveq	#$28,d0
000702DE 7206                       		moveq	#6,d1
000702E0 4EBA 0000                  		jsr	sub_7272E(pc)
000702E4 103C 0042                  		move.b	#$42,d0
000702E8 727F                       		moveq	#$7F,d1
000702EA 4EBA 0000                  		jsr	sub_72764(pc)
000702EE 103C 004A                  		move.b	#$4A,d0
000702F2 727F                       		moveq	#$7F,d1
000702F4 4EBA 0000                  		jsr	sub_72764(pc)
000702F8 103C 0046                  		move.b	#$46,d0
000702FC 727F                       		moveq	#$7F,d1
000702FE 4EBA 0000                  		jsr	sub_72764(pc)
00070302 103C 004E                  		move.b	#$4E,d0
00070306 727F                       		moveq	#$7F,d1
00070308 4EBA 0000                  		jsr	sub_72764(pc)
0007030C 103C 00B6                  		move.b	#-$4A,d0
00070310 123C 00C0                  		move.b	#-$40,d1
00070314 4EBA 0000                  		jsr	sub_72764(pc)
00070318                            
00070318                            loc_72114:
00070318 7E00                       		moveq	#0,d7
0007031A 1E2B 0003                  		move.b	3(a3),d7
0007031E 6700                       		beq.s	loc_72154
00070320 5307                       		subq.b	#1,d7
00070322 43EE 0190                  		lea	$190(a6),a1
00070326 45FA 0000                  		lea	byte_721C2(pc),a2
0007032A                            
0007032A                            loc_72126:
0007032A 08D1 0007                  		bset	#7,(a1)
0007032E 135A 0001                  		move.b	(a2)+,1(a1)
00070332 1344 0002                  		move.b	d4,2(a1)
00070336 1346 000D                  		move.b	d6,$D(a1)
0007033A 1345 000E                  		move.b	d5,$E(a1)
0007033E 7000                       		moveq	#0,d0
00070340 301C                       		move.w	(a4)+,d0
00070342 D08B                       		add.l	a3,d0
00070344 2340 0004                  		move.l	d0,4(a1)
00070348 335C 0008                  		move.w	(a4)+,8(a1)
0007034C 101C                       		move.b	(a4)+,d0
0007034E 135C 000B                  		move.b	(a4)+,$B(a1)
00070352 D2C6                       		adda.w	d6,a1
00070354 51CF FFD4                  		dbf	d7,loc_72126
00070358                            
00070358                            loc_72154:
00070358 43EE 0220                  		lea	$220(a6),a1
0007035C 7E05                       		moveq	#5,d7
0007035E                            
0007035E                            loc_7215A:
0007035E 4A11                       		tst.b	(a1)
00070360 6A00 0000                  		bpl.w	loc_7217C
00070364 7000                       		moveq	#0,d0
00070366 1029 0001                  		move.b	1(a1),d0
0007036A 6B00                       		bmi.s	loc_7216E
0007036C 5500                       		subq.b	#2,d0
0007036E E508                       		lsl.b	#2,d0
00070370 6000                       		bra.s	loc_72170
00070372                            ; ===========================================================================
00070372                            
00070372                            loc_7216E:
00070372 E608                       		lsr.b	#3,d0
00070374                            
00070374                            loc_72170:
00070374 41FA 0000                  		lea	dword_722CC(pc),a0
00070378 2070 0000                  		movea.l	(a0,d0.w),a0
0007037C 08D0 0002                  		bset	#2,(a0)
00070380                            
00070380                            loc_7217C:
00070380 D2C6                       		adda.w	d6,a1
00070382 51CF FFDA                  		dbf	d7,loc_7215A
00070386                            
00070386 4A6E 0340                  		tst.w	$340(a6)
0007038A 6A00                       		bpl.s	loc_7218E
0007038C 08EE 0002 0100             		bset	#2,$100(a6)
00070392                            
00070392                            loc_7218E:
00070392 4A6E 0370                  		tst.w	$370(a6)
00070396 6A00                       		bpl.s	loc_7219A
00070398 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007039E                            
0007039E                            loc_7219A:
0007039E 4BEE 0070                  		lea	$70(a6),a5
000703A2 7805                       		moveq	#5,d4
000703A4                            
000703A4                            loc_721A0:
000703A4 4EBA 0000                  		jsr	sub_726FE(pc)
000703A8 DAC6                       		adda.w	d6,a5
000703AA 51CC FFF8                  		dbf	d4,loc_721A0
000703AE 7802                       		moveq	#2,d4
000703B0                            
000703B0                            loc_721AC:
000703B0 4EBA 0000                  		jsr	sub_729A0(pc)
000703B4 DAC6                       		adda.w	d6,a5
000703B6 51CC FFF8                  		dbf	d4,loc_721AC
000703BA                            
000703BA                            loc_721B6:
000703BA 584F                       		addq.w	#4,sp
000703BC 4E75                       		rts	
000703BE                            ; ===========================================================================
000703BE 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000703C6                            		even
000703C6 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000703CA                            		even
000703CA                            ; ===========================================================================
000703CA                            ; ---------------------------------------------------------------------------
000703CA                            ; Play normal sound effect
000703CA                            ; ---------------------------------------------------------------------------
000703CA                            
000703CA                            Sound_A0toCF:				; XREF: Sound_ChkValue
000703CA 4A2E 0027                  		tst.b	$27(a6)
000703CE 6600 0000                  		bne.w	loc_722C6
000703D2 4A2E 0004                  		tst.b	4(a6)
000703D6 6600 0000                  		bne.w	loc_722C6
000703DA 4A2E 0024                  		tst.b	$24(a6)
000703DE 6600 0000                  		bne.w	loc_722C6
000703E2 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000703E6 6600                       		bne.s	Sound_notB5	; if not, branch
000703E8 4A2E 002B                  		tst.b	$2B(a6)
000703EC 6600                       		bne.s	loc_721EE
000703EE 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000703F2                            
000703F2                            loc_721EE:
000703F2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000703F8                            
000703F8                            Sound_notB5:
000703F8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000703FC 6600                       		bne.s	Sound_notA7	; if not, branch
000703FE 4A2E 002C                  		tst.b	$2C(a6)
00070402 6600 0000                  		bne.w	locret_722C4
00070406 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007040C                            
0007040C                            Sound_notA7:
0007040C 2079 0006 FAE4             		movea.l	(Go_SoundIndex).l,a0
00070412 0407 00A0                  		subi.b	#$A0,d7
00070416 E54F                       		lsl.w	#2,d7
00070418 2670 7000                  		movea.l	(a0,d7.w),a3
0007041C 224B                       		movea.l	a3,a1
0007041E 7200                       		moveq	#0,d1
00070420 3219                       		move.w	(a1)+,d1
00070422 D28B                       		add.l	a3,d1
00070424 1A19                       		move.b	(a1)+,d5
00070426 1E19                       		move.b	(a1)+,d7
00070428 5307                       		subq.b	#1,d7
0007042A 7C30                       		moveq	#$30,d6
0007042C                            
0007042C                            loc_72228:
0007042C 7600                       		moveq	#0,d3
0007042E 1629 0001                  		move.b	1(a1),d3
00070432 1803                       		move.b	d3,d4
00070434 6B00                       		bmi.s	loc_72244
00070436 5543                       		subq.w	#2,d3
00070438 E54B                       		lsl.w	#2,d3
0007043A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007043E 2A75 3000                  		movea.l	(a5,d3.w),a5
00070442 08D5 0002                  		bset	#2,(a5)
00070446 6000                       		bra.s	loc_7226E
00070448                            ; ===========================================================================
00070448                            
00070448                            loc_72244:
00070448 E64B                       		lsr.w	#3,d3
0007044A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007044E 2A75 3000                  		movea.l	(a5,d3.w),a5
00070452 08D5 0002                  		bset	#2,(a5)
00070456 0C04 00C0                  		cmpi.b	#$C0,d4
0007045A 6600                       		bne.s	loc_7226E
0007045C 1004                       		move.b	d4,d0
0007045E 0000 001F                  		ori.b	#$1F,d0
00070462 13C0 00C0 0011             		move.b	d0,($C00011).l
00070468 0840 0005                  		bchg	#5,d0
0007046C 13C0 00C0 0011             		move.b	d0,($C00011).l
00070472                            
00070472                            loc_7226E:
00070472 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00070476 244D                       		movea.l	a5,a2
00070478 700B                       		moveq	#$B,d0
0007047A                            
0007047A                            loc_72276:
0007047A 429A                       		clr.l	(a2)+
0007047C 51C8 FFFC                  		dbf	d0,loc_72276
00070480                            
00070480 3A99                       		move.w	(a1)+,(a5)
00070482 1B45 0002                  		move.b	d5,2(a5)
00070486 7000                       		moveq	#0,d0
00070488 3019                       		move.w	(a1)+,d0
0007048A D08B                       		add.l	a3,d0
0007048C 2B40 0004                  		move.l	d0,4(a5)
00070490 3B59 0008                  		move.w	(a1)+,8(a5)
00070494 1B7C 0001 000E             		move.b	#1,$E(a5)
0007049A 1B46 000D                  		move.b	d6,$D(a5)
0007049E 4A04                       		tst.b	d4
000704A0 6B00                       		bmi.s	loc_722A8
000704A2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000704A8 2B41 0020                  		move.l	d1,$20(a5)
000704AC                            
000704AC                            loc_722A8:
000704AC 51CF FF7E                  		dbf	d7,loc_72228
000704B0                            
000704B0 4A2E 0250                  		tst.b	$250(a6)
000704B4 6A00                       		bpl.s	loc_722B8
000704B6 08EE 0002 0340             		bset	#2,$340(a6)
000704BC                            
000704BC                            loc_722B8:
000704BC 4A2E 0310                  		tst.b	$310(a6)
000704C0 6A00                       		bpl.s	locret_722C4
000704C2 08EE 0002 0370             		bset	#2,$370(a6)
000704C8                            
000704C8                            locret_722C4:
000704C8 4E75                       		rts	
000704CA                            ; ===========================================================================
000704CA                            
000704CA                            loc_722C6:
000704CA 4216                       		clr.b	0(a6)
000704CC 4E75                       		rts	
000704CE                            ; ===========================================================================
000704CE 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000704D2 0000 0000                  		dc.l 0
000704D6 00FF F100                  		dc.l $FFF100
000704DA 00FF F130                  		dc.l $FFF130
000704DE 00FF F190                  		dc.l $FFF190
000704E2 00FF F1C0                  		dc.l $FFF1C0
000704E6 00FF F1F0                  		dc.l $FFF1F0
000704EA 00FF F1F0                  		dc.l $FFF1F0
000704EE 00FF F220                  dword_722EC:	dc.l $FFF220
000704F2 0000 0000                  		dc.l 0
000704F6 00FF F250                  		dc.l $FFF250
000704FA 00FF F280                  		dc.l $FFF280
000704FE 00FF F2B0                  		dc.l $FFF2B0
00070502 00FF F2E0                  		dc.l $FFF2E0
00070506 00FF F310                  		dc.l $FFF310
0007050A 00FF F310                  		dc.l $FFF310
0007050E                            ; ===========================================================================
0007050E                            ; ---------------------------------------------------------------------------
0007050E                            ; Play GHZ waterfall sound
0007050E                            ; ---------------------------------------------------------------------------
0007050E                            
0007050E                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007050E 4A2E 0027                  		tst.b	$27(a6)
00070512 6600 0000                  		bne.w	locret_723C6
00070516 4A2E 0004                  		tst.b	4(a6)
0007051A 6600 0000                  		bne.w	locret_723C6
0007051E 4A2E 0024                  		tst.b	$24(a6)
00070522 6600 0000                  		bne.w	locret_723C6
00070526 2079 0006 FADC             		movea.l	(Go_SoundD0).l,a0
0007052C 0407 00D0                  		subi.b	#$D0,d7
00070530 E54F                       		lsl.w	#2,d7
00070532 2670 7000                  		movea.l	(a0,d7.w),a3
00070536 224B                       		movea.l	a3,a1
00070538 7000                       		moveq	#0,d0
0007053A 3019                       		move.w	(a1)+,d0
0007053C D08B                       		add.l	a3,d0
0007053E 2D40 0020                  		move.l	d0,$20(a6)
00070542 1A19                       		move.b	(a1)+,d5
00070544 1E19                       		move.b	(a1)+,d7
00070546 5307                       		subq.b	#1,d7
00070548 7C30                       		moveq	#$30,d6
0007054A                            
0007054A                            loc_72348:
0007054A 1829 0001                  		move.b	1(a1),d4
0007054E 6B00                       		bmi.s	loc_7235A
00070550 08EE 0002 0100             		bset	#2,$100(a6)
00070556 4BEE 0340                  		lea	$340(a6),a5
0007055A 6000                       		bra.s	loc_72364
0007055C                            ; ===========================================================================
0007055C                            
0007055C                            loc_7235A:
0007055C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00070562 4BEE 0370                  		lea	$370(a6),a5
00070566                            
00070566                            loc_72364:
00070566 244D                       		movea.l	a5,a2
00070568 700B                       		moveq	#$B,d0
0007056A                            
0007056A                            loc_72368:
0007056A 429A                       		clr.l	(a2)+
0007056C 51C8 FFFC                  		dbf	d0,loc_72368
00070570                            
00070570 3A99                       		move.w	(a1)+,(a5)
00070572 1B45 0002                  		move.b	d5,2(a5)
00070576 7000                       		moveq	#0,d0
00070578 3019                       		move.w	(a1)+,d0
0007057A D08B                       		add.l	a3,d0
0007057C 2B40 0004                  		move.l	d0,4(a5)
00070580 3B59 0008                  		move.w	(a1)+,8(a5)
00070584 1B7C 0001 000E             		move.b	#1,$E(a5)
0007058A 1B46 000D                  		move.b	d6,$D(a5)
0007058E 4A04                       		tst.b	d4
00070590 6B00                       		bmi.s	loc_72396
00070592 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00070598                            
00070598                            loc_72396:
00070598 51CF FFB0                  		dbf	d7,loc_72348
0007059C                            
0007059C 4A2E 0250                  		tst.b	$250(a6)
000705A0 6A00                       		bpl.s	loc_723A6
000705A2 08EE 0002 0340             		bset	#2,$340(a6)
000705A8                            
000705A8                            loc_723A6:
000705A8 4A2E 0310                  		tst.b	$310(a6)
000705AC 6A00                       		bpl.s	locret_723C6
000705AE 08EE 0002 0370             		bset	#2,$370(a6)
000705B4 0004 001F                  		ori.b	#$1F,d4
000705B8 13C4 00C0 0011             		move.b	d4,($C00011).l
000705BE 0844 0005                  		bchg	#5,d4
000705C2 13C4 00C0 0011             		move.b	d4,($C00011).l
000705C8                            
000705C8                            locret_723C6:
000705C8 4E75                       		rts	
000705CA                            ; End of function Sound_ChkValue
000705CA                            
000705CA                            ; ===========================================================================
000705CA 00FF F100                  		dc.l $FFF100
000705CE 00FF F1F0                  		dc.l $FFF1F0
000705D2 00FF F250                  		dc.l $FFF250
000705D6 00FF F310                  		dc.l $FFF310
000705DA 00FF F340                  		dc.l $FFF340
000705DE 00FF F370                  		dc.l $FFF370
000705E2                            
000705E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000705E2                            
000705E2                            
000705E2                            Snd_FadeOut1:				; XREF: Sound_E0
000705E2 4216                       		clr.b	0(a6)
000705E4 4BEE 0220                  		lea	$220(a6),a5
000705E8 7E05                       		moveq	#5,d7
000705EA                            
000705EA                            loc_723EA:
000705EA 4A15                       		tst.b	(a5)
000705EC 6A00 0000                  		bpl.w	loc_72472
000705F0 0895 0007                  		bclr	#7,(a5)
000705F4 7600                       		moveq	#0,d3
000705F6 162D 0001                  		move.b	1(a5),d3
000705FA 6B00                       		bmi.s	loc_7243C
000705FC 4EBA 0000                  		jsr	sub_726FE(pc)
00070600 0C03 0004                  		cmpi.b	#4,d3
00070604 6600                       		bne.s	loc_72416
00070606 4A2E 0340                  		tst.b	$340(a6)
0007060A 6A00                       		bpl.s	loc_72416
0007060C 4BEE 0340                  		lea	$340(a6),a5
00070610 226E 0020                  		movea.l	$20(a6),a1
00070614 6000                       		bra.s	loc_72428
00070616                            ; ===========================================================================
00070616                            
00070616                            loc_72416:
00070616 5503                       		subq.b	#2,d3
00070618 E50B                       		lsl.b	#2,d3
0007061A 41FA FEB2                  		lea	dword_722CC(pc),a0
0007061E 264D                       		movea.l	a5,a3
00070620 2A70 3000                  		movea.l	(a0,d3.w),a5
00070624 226E 0018                  		movea.l	$18(a6),a1
00070628                            
00070628                            loc_72428:
00070628 0895 0002                  		bclr	#2,(a5)
0007062C 08D5 0001                  		bset	#1,(a5)
00070630 102D 000B                  		move.b	$B(a5),d0
00070634 4EBA 0000                  		jsr	sub_72C4E(pc)
00070638 2A4B                       		movea.l	a3,a5
0007063A 6000                       		bra.s	loc_72472
0007063C                            ; ===========================================================================
0007063C                            
0007063C                            loc_7243C:
0007063C 4EBA 0000                  		jsr	sub_729A0(pc)
00070640 41EE 0370                  		lea	$370(a6),a0
00070644 0C03 00E0                  		cmpi.b	#$E0,d3
00070648 6700                       		beq.s	loc_7245A
0007064A 0C03 00C0                  		cmpi.b	#$C0,d3
0007064E 6700                       		beq.s	loc_7245A
00070650 E60B                       		lsr.b	#3,d3
00070652 41FA FE7A                  		lea	dword_722CC(pc),a0
00070656 2070 3000                  		movea.l	(a0,d3.w),a0
0007065A                            
0007065A                            loc_7245A:
0007065A 0890 0002                  		bclr	#2,(a0)
0007065E 08D0 0001                  		bset	#1,(a0)
00070662 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00070668 6600                       		bne.s	loc_72472
0007066A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00070672                            
00070672                            loc_72472:
00070672 DAFC 0030                  		adda.w	#$30,a5
00070676 51CF FF72                  		dbf	d7,loc_723EA
0007067A                            
0007067A 4E75                       		rts	
0007067C                            ; End of function Snd_FadeOut1
0007067C                            
0007067C                            
0007067C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007067C                            
0007067C                            
0007067C                            Snd_FadeOut2:				; XREF: Sound_E0
0007067C 4BEE 0340                  		lea	$340(a6),a5
00070680 4A15                       		tst.b	(a5)
00070682 6A00                       		bpl.s	loc_724AE
00070684 0895 0007                  		bclr	#7,(a5)
00070688 0815 0002                  		btst	#2,(a5)
0007068C 6600                       		bne.s	loc_724AE
0007068E 4EBA 0000                  		jsr	loc_7270A(pc)
00070692 4BEE 0100                  		lea	$100(a6),a5
00070696 0895 0002                  		bclr	#2,(a5)
0007069A 08D5 0001                  		bset	#1,(a5)
0007069E 4A15                       		tst.b	(a5)
000706A0 6A00                       		bpl.s	loc_724AE
000706A2 226E 0018                  		movea.l	$18(a6),a1
000706A6 102D 000B                  		move.b	$B(a5),d0
000706AA 4EBA 0000                  		jsr	sub_72C4E(pc)
000706AE                            
000706AE                            loc_724AE:
000706AE 4BEE 0370                  		lea	$370(a6),a5
000706B2 4A15                       		tst.b	(a5)
000706B4 6A00                       		bpl.s	locret_724E4
000706B6 0895 0007                  		bclr	#7,(a5)
000706BA 0815 0002                  		btst	#2,(a5)
000706BE 6600                       		bne.s	locret_724E4
000706C0 4EBA 0000                  		jsr	loc_729A6(pc)
000706C4 4BEE 01F0                  		lea	$1F0(a6),a5
000706C8 0895 0002                  		bclr	#2,(a5)
000706CC 08D5 0001                  		bset	#1,(a5)
000706D0 4A15                       		tst.b	(a5)
000706D2 6A00                       		bpl.s	locret_724E4
000706D4 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000706DA 6600                       		bne.s	locret_724E4
000706DC 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000706E4                            
000706E4                            locret_724E4:
000706E4 4E75                       		rts	
000706E6                            ; End of function Snd_FadeOut2
000706E6                            
000706E6                            ; ===========================================================================
000706E6                            ; ---------------------------------------------------------------------------
000706E6                            ; Fade out music
000706E6                            ; ---------------------------------------------------------------------------
000706E6                            
000706E6                            Sound_E0:				; XREF: Sound_ExIndex
000706E6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000706EA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000706EE 1D7C 0003 0006             		move.b	#3,6(a6)
000706F4 1D7C 0028 0004             		move.b	#$28,4(a6)
000706FA 422E 0040                  		clr.b	$40(a6)
000706FE 422E 002A                  		clr.b	$2A(a6)
00070702 4E75                       		rts	
00070704                            
00070704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070704                            
00070704                            
00070704                            sub_72504:				; XREF: sub_71B4C
00070704 102E 0006                  		move.b	6(a6),d0
00070708 6700                       		beq.s	loc_72510
0007070A 532E 0006                  		subq.b	#1,6(a6)
0007070E 4E75                       		rts	
00070710                            ; ===========================================================================
00070710                            
00070710                            loc_72510:
00070710 532E 0004                  		subq.b	#1,4(a6)
00070714 6700 0000                  		beq.w	Sound_E4
00070718 1D7C 0003 0006             		move.b	#3,6(a6)
0007071E 4BEE 0070                  		lea	$70(a6),a5
00070722 7E05                       		moveq	#5,d7
00070724                            
00070724                            loc_72524:
00070724 4A15                       		tst.b	(a5)
00070726 6A00                       		bpl.s	loc_72538
00070728 522D 0009                  		addq.b	#1,9(a5)
0007072C 6A00                       		bpl.s	loc_72534
0007072E 0895 0007                  		bclr	#7,(a5)
00070732 6000                       		bra.s	loc_72538
00070734                            ; ===========================================================================
00070734                            
00070734                            loc_72534:
00070734 4EBA 0000                  		jsr	sub_72CB4(pc)
00070738                            
00070738                            loc_72538:
00070738 DAFC 0030                  		adda.w	#$30,a5
0007073C 51CF FFE6                  		dbf	d7,loc_72524
00070740                            
00070740 7E02                       		moveq	#2,d7
00070742                            
00070742                            loc_72542:
00070742 4A15                       		tst.b	(a5)
00070744 6A00                       		bpl.s	loc_72560
00070746 522D 0009                  		addq.b	#1,9(a5)
0007074A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00070750 6500                       		bcs.s	loc_72558
00070752 0895 0007                  		bclr	#7,(a5)
00070756 6000                       		bra.s	loc_72560
00070758                            ; ===========================================================================
00070758                            
00070758                            loc_72558:
00070758 1C2D 0009                  		move.b	9(a5),d6
0007075C 4EBA 0000                  		jsr	sub_7296A(pc)
00070760                            
00070760                            loc_72560:
00070760 DAFC 0030                  		adda.w	#$30,a5
00070764 51CF FFDC                  		dbf	d7,loc_72542
00070768                            
00070768 4E75                       		rts	
0007076A                            ; End of function sub_72504
0007076A                            
0007076A                            
0007076A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007076A                            
0007076A                            
0007076A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007076A 7602                       		moveq	#2,d3
0007076C 7028                       		moveq	#$28,d0
0007076E                            
0007076E                            loc_7256E:
0007076E 1203                       		move.b	d3,d1
00070770 4EBA 0000                  		jsr	sub_7272E(pc)
00070774 5801                       		addq.b	#4,d1
00070776 4EBA 0000                  		jsr	sub_7272E(pc)
0007077A 51CB FFF2                  		dbf	d3,loc_7256E
0007077E                            
0007077E 7040                       		moveq	#$40,d0
00070780 727F                       		moveq	#$7F,d1
00070782 7802                       		moveq	#2,d4
00070784                            
00070784                            loc_72584:
00070784 7603                       		moveq	#3,d3
00070786                            
00070786                            loc_72586:
00070786 4EBA 0000                  		jsr	sub_7272E(pc)
0007078A 4EBA 0000                  		jsr	sub_72764(pc)
0007078E 5840                       		addq.w	#4,d0
00070790 51CB FFF4                  		dbf	d3,loc_72586
00070794                            
00070794 0400 000F                  		subi.b	#$F,d0
00070798 51CC FFEA                  		dbf	d4,loc_72584
0007079C                            
0007079C 4E75                       		rts	
0007079E                            ; End of function sub_7256A
0007079E                            
0007079E                            ; ===========================================================================
0007079E                            ; ---------------------------------------------------------------------------
0007079E                            ; Stop music
0007079E                            ; ---------------------------------------------------------------------------
0007079E                            
0007079E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007079E 702B                       		moveq	#$2B,d0
000707A0 123C 0080                  		move.b	#$80,d1
000707A4 4EBA 0000                  		jsr	sub_7272E(pc)
000707A8 7027                       		moveq	#$27,d0
000707AA 7200                       		moveq	#0,d1
000707AC 4EBA 0000                  		jsr	sub_7272E(pc)
000707B0 204E                       		movea.l	a6,a0
000707B2 303C 00E3                  		move.w	#$E3,d0
000707B6                            
000707B6                            loc_725B6:
000707B6 4298                       		clr.l	(a0)+
000707B8 51C8 FFFC                  		dbf	d0,loc_725B6
000707BC                            
000707BC 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000707C2 4EBA FFA6                  		jsr	sub_7256A(pc)
000707C6 6000 0000                  		bra.w	sub_729B6
000707CA                            
000707CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000707CA                            
000707CA                            
000707CA                            sub_725CA:				; XREF: Sound_ChkValue
000707CA 204E                       		movea.l	a6,a0
000707CC 1216                       		move.b	0(a6),d1
000707CE 142E 0027                  		move.b	$27(a6),d2
000707D2 162E 002A                  		move.b	$2A(a6),d3
000707D6 182E 0026                  		move.b	$26(a6),d4
000707DA 3A2E 000A                  		move.w	$A(a6),d5
000707DE 303C 0087                  		move.w	#$87,d0
000707E2                            
000707E2                            loc_725E4:
000707E2 4298                       		clr.l	(a0)+
000707E4 51C8 FFFC                  		dbf	d0,loc_725E4
000707E8                            
000707E8 1C81                       		move.b	d1,0(a6)
000707EA 1D42 0027                  		move.b	d2,$27(a6)
000707EE 1D43 002A                  		move.b	d3,$2A(a6)
000707F2 1D44 0026                  		move.b	d4,$26(a6)
000707F6 3D45 000A                  		move.w	d5,$A(a6)
000707FA 1D7C 0080 0009             		move.b	#$80,9(a6)
00070800 4EBA FF68                  		jsr	sub_7256A(pc)
00070804 6000 0000                  		bra.w	sub_729B6
00070808                            ; End of function sub_725CA
00070808                            
00070808                            
00070808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070808                            
00070808                            
00070808                            sub_7260C:				; XREF: sub_71B4C
00070808 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007080E 41EE 004E                  		lea	$4E(a6),a0
00070812 7030                       		moveq	#$30,d0
00070814 7209                       		moveq	#9,d1
00070816                            
00070816                            loc_7261A:
00070816 5210                       		addq.b	#1,(a0)
00070818 D0C0                       		adda.w	d0,a0
0007081A 51C9 FFFA                  		dbf	d1,loc_7261A
0007081E                            
0007081E 4E75                       		rts	
00070820                            ; End of function sub_7260C
00070820                            
00070820                            ; ===========================================================================
00070820                            ; ---------------------------------------------------------------------------
00070820                            ; Speed	up music
00070820                            ; ---------------------------------------------------------------------------
00070820                            
00070820                            Sound_E2:				; XREF: Sound_ExIndex
00070820 4A2E 0027                  		tst.b	$27(a6)
00070824 6600                       		bne.s	loc_7263E
00070826 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007082C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00070832 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00070838 4E75                       		rts	
0007083A                            ; ===========================================================================
0007083A                            
0007083A                            loc_7263E:
0007083A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00070840 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00070846 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007084C 4E75                       		rts	
0007084E                            ; ===========================================================================
0007084E                            ; ---------------------------------------------------------------------------
0007084E                            ; Change music back to normal speed
0007084E                            ; ---------------------------------------------------------------------------
0007084E                            
0007084E                            Sound_E3:				; XREF: Sound_ExIndex
0007084E 4A2E 0027                  		tst.b	$27(a6)
00070852 6600                       		bne.s	loc_7266A
00070854 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007085A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00070860 422E 002A                  		clr.b	$2A(a6)
00070864 4E75                       		rts	
00070866                            ; ===========================================================================
00070866                            
00070866                            loc_7266A:
00070866 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007086C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00070872 422E 03CA                  		clr.b	$3CA(a6)
00070876 4E75                       		rts	
00070878                            
00070878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070878                            
00070878                            
00070878                            sub_7267C:				; XREF: sub_71B4C
00070878 4A2E 0025                  		tst.b	$25(a6)
0007087C 6700                       		beq.s	loc_72688
0007087E 532E 0025                  		subq.b	#1,$25(a6)
00070882 4E75                       		rts	
00070884                            ; ===========================================================================
00070884                            
00070884                            loc_72688:
00070884 4A2E 0026                  		tst.b	$26(a6)
00070888 6700                       		beq.s	loc_726D6
0007088A 532E 0026                  		subq.b	#1,$26(a6)
0007088E 1D7C 0002 0025             		move.b	#2,$25(a6)
00070894 4BEE 0070                  		lea	$70(a6),a5
00070898 7E05                       		moveq	#5,d7
0007089A                            
0007089A                            loc_7269E:
0007089A 4A15                       		tst.b	(a5)
0007089C 6A00                       		bpl.s	loc_726AA
0007089E 532D 0009                  		subq.b	#1,9(a5)
000708A2 4EBA 0000                  		jsr	sub_72CB4(pc)
000708A6                            
000708A6                            loc_726AA:
000708A6 DAFC 0030                  		adda.w	#$30,a5
000708AA 51CF FFEE                  		dbf	d7,loc_7269E
000708AE 7E02                       		moveq	#2,d7
000708B0                            
000708B0                            loc_726B4:
000708B0 4A15                       		tst.b	(a5)
000708B2 6A00                       		bpl.s	loc_726CC
000708B4 532D 0009                  		subq.b	#1,9(a5)
000708B8 1C2D 0009                  		move.b	9(a5),d6
000708BC 0C06 0010                  		cmpi.b	#$10,d6
000708C0 6500                       		bcs.s	loc_726C8
000708C2 7C0F                       		moveq	#$F,d6
000708C4                            
000708C4                            loc_726C8:
000708C4 4EBA 0000                  		jsr	sub_7296A(pc)
000708C8                            
000708C8                            loc_726CC:
000708C8 DAFC 0030                  		adda.w	#$30,a5
000708CC 51CF FFE2                  		dbf	d7,loc_726B4
000708D0 4E75                       		rts	
000708D2                            ; ===========================================================================
000708D2                            
000708D2                            loc_726D6:
000708D2 08AE 0002 0040             		bclr	#2,$40(a6)
000708D8 422E 0024                  		clr.b	$24(a6)
000708DC 4E75                       		rts	
000708DE                            ; End of function sub_7267C
000708DE                            
000708DE                            ; ===========================================================================
000708DE                            
000708DE                            loc_726E2:				; XREF: sub_71CCA
000708DE 0815 0001                  		btst	#1,(a5)
000708E2 6600                       		bne.s	locret_726FC
000708E4 0815 0002                  		btst	#2,(a5)
000708E8 6600                       		bne.s	locret_726FC
000708EA 7028                       		moveq	#$28,d0
000708EC 122D 0001                  		move.b	1(a5),d1
000708F0 0001 00F0                  		ori.b	#-$10,d1
000708F4 6000 0000                  		bra.w	sub_7272E
000708F8                            ; ===========================================================================
000708F8                            
000708F8                            locret_726FC:
000708F8 4E75                       		rts	
000708FA                            
000708FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000708FA                            
000708FA                            
000708FA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000708FA 0815 0004                  		btst	#4,(a5)
000708FE 6600                       		bne.s	locret_72714
00070900 0815 0002                  		btst	#2,(a5)
00070904 6600                       		bne.s	locret_72714
00070906                            
00070906                            loc_7270A:				; XREF: Snd_FadeOut2
00070906 7028                       		moveq	#$28,d0
00070908 122D 0001                  		move.b	1(a5),d1
0007090C 6000 0000                  		bra.w	sub_7272E
00070910                            ; ===========================================================================
00070910                            
00070910                            locret_72714:
00070910 4E75                       		rts	
00070912                            ; End of function sub_726FE
00070912                            
00070912                            ; ===========================================================================
00070912                            
00070912                            loc_72716:				; XREF: sub_72A5A
00070912 0815 0002                  		btst	#2,(a5)
00070916 6600                       		bne.s	locret_72720
00070918 6000 0000                  		bra.w	sub_72722
0007091C                            ; ===========================================================================
0007091C                            
0007091C                            locret_72720:
0007091C 4E75                       		rts	
0007091E                            
0007091E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007091E                            
0007091E                            
0007091E                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007091E 082D 0002 0001             		btst	#2,1(a5)
00070924 6600                       		bne.s	loc_7275A
00070926 D02D 0001                  		add.b	1(a5),d0
0007092A                            ; End of function sub_72722
0007092A                            
0007092A                            
0007092A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007092A                            
0007092A                            
0007092A                            sub_7272E:				; XREF: loc_71E6A
0007092A 1439 00A0 4000             		move.b	($A04000).l,d2
00070930 0802 0007                  		btst	#7,d2
00070934 66F4                       		bne.s	sub_7272E
00070936 13C0 00A0 4000             		move.b	d0,($A04000).l
0007093C 4E71                       		nop	
0007093E 4E71                       		nop	
00070940 4E71                       		nop	
00070942                            
00070942                            loc_72746:
00070942 1439 00A0 4000             		move.b	($A04000).l,d2
00070948 0802 0007                  		btst	#7,d2
0007094C 66F4                       		bne.s	loc_72746
0007094E                            
0007094E 13C1 00A0 4001             		move.b	d1,($A04001).l
00070954 4E75                       		rts	
00070956                            ; End of function sub_7272E
00070956                            
00070956                            ; ===========================================================================
00070956                            
00070956                            loc_7275A:				; XREF: sub_72722
00070956 142D 0001                  		move.b	1(a5),d2
0007095A 0882 0002                  		bclr	#2,d2
0007095E D002                       		add.b	d2,d0
00070960                            
00070960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070960                            
00070960                            
00070960                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00070960 1439 00A0 4000             		move.b	($A04000).l,d2
00070966 0802 0007                  		btst	#7,d2
0007096A 66F4                       		bne.s	sub_72764
0007096C 13C0 00A0 4002             		move.b	d0,($A04002).l
00070972 4E71                       		nop	
00070974 4E71                       		nop	
00070976 4E71                       		nop	
00070978                            
00070978                            loc_7277C:
00070978 1439 00A0 4000             		move.b	($A04000).l,d2
0007097E 0802 0007                  		btst	#7,d2
00070982 66F4                       		bne.s	loc_7277C
00070984                            
00070984 13C1 00A0 4003             		move.b	d1,($A04003).l
0007098A 4E75                       		rts	
0007098C                            ; End of function sub_72764
0007098C                            
0007098C                            ; ===========================================================================
0007098C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007099E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000709B0 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000709C0 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000709D0 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000709E0 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000709F0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00070A00 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00070A10 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00070A20 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00070A30 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00070A40 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00070A4C                            
00070A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070A4C                            
00070A4C                            
00070A4C                            sub_72850:				; XREF: sub_71B4C
00070A4C 532D 000E                  		subq.b	#1,$E(a5)
00070A50 6600                       		bne.s	loc_72866
00070A52 0895 0004                  		bclr	#4,(a5)
00070A56 4EBA 0000                  		jsr	sub_72878(pc)
00070A5A 4EBA 0000                  		jsr	sub_728DC(pc)
00070A5E 6000 0000                  		bra.w	loc_7292E
00070A62                            ; ===========================================================================
00070A62                            
00070A62                            loc_72866:
00070A62 4EBA F4B2                  		jsr	sub_71D9E(pc)
00070A66 4EBA 0000                  		jsr	sub_72926(pc)
00070A6A 4EBA F4D2                  		jsr	sub_71DC6(pc)
00070A6E 4EBA 0000                  		jsr	sub_728E2(pc)
00070A72 4E75                       		rts	
00070A74                            ; End of function sub_72850
00070A74                            
00070A74                            
00070A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070A74                            
00070A74                            
00070A74                            sub_72878:				; XREF: sub_72850
00070A74 0895 0001                  		bclr	#1,(a5)
00070A78 286D 0004                  		movea.l	4(a5),a4
00070A7C                            
00070A7C                            loc_72880:
00070A7C 7A00                       		moveq	#0,d5
00070A7E 1A1C                       		move.b	(a4)+,d5
00070A80 0C05 00E0                  		cmpi.b	#$E0,d5
00070A84 6500                       		bcs.s	loc_72890
00070A86 4EBA 0000                  		jsr	sub_72A5A(pc)
00070A8A 60F0                       		bra.s	loc_72880
00070A8C                            ; ===========================================================================
00070A8C                            
00070A8C                            loc_72890:
00070A8C 4A05                       		tst.b	d5
00070A8E 6A00                       		bpl.s	loc_728A4
00070A90 4EBA 0000                  		jsr	sub_728AC(pc)
00070A94 1A1C                       		move.b	(a4)+,d5
00070A96 4A05                       		tst.b	d5
00070A98 6A00                       		bpl.s	loc_728A4
00070A9A 534C                       		subq.w	#1,a4
00070A9C 6000 F43A                  		bra.w	sub_71D60
00070AA0                            ; ===========================================================================
00070AA0                            
00070AA0                            loc_728A4:
00070AA0 4EBA F416                  		jsr	sub_71D40(pc)
00070AA4 6000 F432                  		bra.w	sub_71D60
00070AA8                            ; End of function sub_72878
00070AA8                            
00070AA8                            
00070AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070AA8                            
00070AA8                            
00070AA8                            sub_728AC:				; XREF: sub_72878
00070AA8 0405 0081                  		subi.b	#$81,d5
00070AAC 6500                       		bcs.s	loc_728CA
00070AAE DA2D 0008                  		add.b	8(a5),d5
00070AB2 0245 007F                  		andi.w	#$7F,d5
00070AB6 E34D                       		lsl.w	#1,d5
00070AB8 41FA 0000                  		lea	word_729CE(pc),a0
00070ABC 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00070AC2 6000 F414                  		bra.w	sub_71D60
00070AC6                            ; ===========================================================================
00070AC6                            
00070AC6                            loc_728CA:
00070AC6 08D5 0001                  		bset	#1,(a5)
00070ACA 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00070AD0 4EBA F406                  		jsr	sub_71D60(pc)
00070AD4 6000 0000                  		bra.w	sub_729A0
00070AD8                            ; End of function sub_728AC
00070AD8                            
00070AD8                            
00070AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070AD8                            
00070AD8                            
00070AD8                            sub_728DC:				; XREF: sub_72850
00070AD8 3C2D 0010                  		move.w	$10(a5),d6
00070ADC 6B00                       		bmi.s	loc_72920
00070ADE                            ; End of function sub_728DC
00070ADE                            
00070ADE                            
00070ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070ADE                            
00070ADE                            
00070ADE                            sub_728E2:				; XREF: sub_72850
00070ADE 102D 001E                  		move.b	$1E(a5),d0
00070AE2 4880                       		ext.w	d0
00070AE4 DC40                       		add.w	d0,d6
00070AE6 0815 0002                  		btst	#2,(a5)
00070AEA 6600                       		bne.s	locret_7291E
00070AEC 0815 0001                  		btst	#1,(a5)
00070AF0 6600                       		bne.s	locret_7291E
00070AF2 102D 0001                  		move.b	1(a5),d0
00070AF6 0C00 00E0                  		cmpi.b	#$E0,d0
00070AFA 6600                       		bne.s	loc_72904
00070AFC 103C 00C0                  		move.b	#$C0,d0
00070B00                            
00070B00                            loc_72904:
00070B00 3206                       		move.w	d6,d1
00070B02 0201 000F                  		andi.b	#$F,d1
00070B06 8001                       		or.b	d1,d0
00070B08 E84E                       		lsr.w	#4,d6
00070B0A 0206 003F                  		andi.b	#$3F,d6
00070B0E 13C0 00C0 0011             		move.b	d0,($C00011).l
00070B14 13C6 00C0 0011             		move.b	d6,($C00011).l
00070B1A                            
00070B1A                            locret_7291E:
00070B1A 4E75                       		rts	
00070B1C                            ; End of function sub_728E2
00070B1C                            
00070B1C                            ; ===========================================================================
00070B1C                            
00070B1C                            loc_72920:				; XREF: sub_728DC
00070B1C 08D5 0001                  		bset	#1,(a5)
00070B20 4E75                       		rts	
00070B22                            
00070B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070B22                            
00070B22                            
00070B22                            sub_72926:				; XREF: sub_72850
00070B22 4A2D 000B                  		tst.b	$B(a5)
00070B26 6700 0000                  		beq.w	locret_7298A
00070B2A                            
00070B2A                            loc_7292E:				; XREF: sub_72850
00070B2A 1C2D 0009                  		move.b	9(a5),d6
00070B2E 7000                       		moveq	#0,d0
00070B30 102D 000B                  		move.b	$B(a5),d0
00070B34 6700                       		beq.s	sub_7296A
00070B36 2079 0006 FAEC             		movea.l	(Go_PSGIndex).l,a0
00070B3C 5340                       		subq.w	#1,d0
00070B3E E548                       		lsl.w	#2,d0
00070B40 2070 0000                  		movea.l	(a0,d0.w),a0
00070B44 102D 000C                  		move.b	$C(a5),d0
00070B48 1030 0000                  		move.b	(a0,d0.w),d0
00070B4C 522D 000C                  		addq.b	#1,$C(a5)
00070B50 0800 0007                  		btst	#7,d0
00070B54 6700                       		beq.s	loc_72960
00070B56 0C00 0080                  		cmpi.b	#$80,d0
00070B5A 6700                       		beq.s	loc_7299A
00070B5C                            
00070B5C                            loc_72960:
00070B5C DC40                       		add.w	d0,d6
00070B5E 0C06 0010                  		cmpi.b	#$10,d6
00070B62 6500                       		bcs.s	sub_7296A
00070B64 7C0F                       		moveq	#$F,d6
00070B66                            ; End of function sub_72926
00070B66                            
00070B66                            
00070B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070B66                            
00070B66                            
00070B66                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00070B66 0815 0001                  		btst	#1,(a5)
00070B6A 6600                       		bne.s	locret_7298A
00070B6C 0815 0002                  		btst	#2,(a5)
00070B70 6600                       		bne.s	locret_7298A
00070B72 0815 0004                  		btst	#4,(a5)
00070B76 6600                       		bne.s	loc_7298C
00070B78                            
00070B78                            loc_7297C:
00070B78 8C2D 0001                  		or.b	1(a5),d6
00070B7C 0606 0010                  		addi.b	#$10,d6
00070B80 13C6 00C0 0011             		move.b	d6,($C00011).l
00070B86                            
00070B86                            locret_7298A:
00070B86 4E75                       		rts	
00070B88                            ; ===========================================================================
00070B88                            
00070B88                            loc_7298C:
00070B88 4A2D 0013                  		tst.b	$13(a5)
00070B8C 67EA                       		beq.s	loc_7297C
00070B8E 4A2D 0012                  		tst.b	$12(a5)
00070B92 66E4                       		bne.s	loc_7297C
00070B94 4E75                       		rts	
00070B96                            ; End of function sub_7296A
00070B96                            
00070B96                            ; ===========================================================================
00070B96                            
00070B96                            loc_7299A:				; XREF: sub_72926
00070B96 532D 000C                  		subq.b	#1,$C(a5)
00070B9A 4E75                       		rts	
00070B9C                            
00070B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070B9C                            
00070B9C                            
00070B9C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00070B9C 0815 0002                  		btst	#2,(a5)
00070BA0 6600                       		bne.s	locret_729B4
00070BA2                            
00070BA2                            loc_729A6:				; XREF: Snd_FadeOut2
00070BA2 102D 0001                  		move.b	1(a5),d0
00070BA6 0000 001F                  		ori.b	#$1F,d0
00070BAA 13C0 00C0 0011             		move.b	d0,($C00011).l
00070BB0                            
00070BB0                            locret_729B4:
00070BB0 4E75                       		rts	
00070BB2                            ; End of function sub_729A0
00070BB2                            
00070BB2                            
00070BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070BB2                            
00070BB2                            
00070BB2                            sub_729B6:				; XREF: loc_71E7C
00070BB2 41F9 00C0 0011             		lea	($C00011).l,a0
00070BB8 10BC 009F                  		move.b	#$9F,(a0)
00070BBC 10BC 00BF                  		move.b	#$BF,(a0)
00070BC0 10BC 00DF                  		move.b	#$DF,(a0)
00070BC4 10BC 00FF                  		move.b	#$FF,(a0)
00070BC8 4E75                       		rts	
00070BCA                            ; End of function sub_729B6
00070BCA                            
00070BCA                            ; ===========================================================================
00070BCA 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00070BDC 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00070BEE 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00070C02 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00070C16 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00070C2A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00070C3E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00070C52 0011 0000                  		dc.w $11, 0
00070C56                            
00070C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070C56                            
00070C56                            
00070C56                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00070C56 0445 00E0                  		subi.w	#$E0,d5
00070C5A E54D                       		lsl.w	#2,d5
00070C5C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00070C60                            ; End of function sub_72A5A
00070C60                            
00070C60                            ; ===========================================================================
00070C60                            
00070C60                            loc_72A64:
00070C60 6000 0000                  		bra.w	loc_72ACC
00070C64                            ; ===========================================================================
00070C64 6000 0000                  		bra.w	loc_72AEC
00070C68                            ; ===========================================================================
00070C68 6000 0000                  		bra.w	loc_72AF2
00070C6C                            ; ===========================================================================
00070C6C 6000 0000                  		bra.w	loc_72AF8
00070C70                            ; ===========================================================================
00070C70 6000 0000                  		bra.w	loc_72B14
00070C74                            ; ===========================================================================
00070C74 6000 0000                  		bra.w	loc_72B9E
00070C78                            ; ===========================================================================
00070C78 6000 0000                  		bra.w	loc_72BA4
00070C7C                            ; ===========================================================================
00070C7C 6000 0000                  		bra.w	loc_72BAE
00070C80                            ; ===========================================================================
00070C80 6000 0000                  		bra.w	loc_72BB4
00070C84                            ; ===========================================================================
00070C84 6000 0000                  		bra.w	loc_72BBE
00070C88                            ; ===========================================================================
00070C88 6000 0000                  		bra.w	loc_72BC6
00070C8C                            ; ===========================================================================
00070C8C 6000 0000                  		bra.w	loc_72BD0
00070C90                            ; ===========================================================================
00070C90 6000 0000                  		bra.w	loc_72BE6
00070C94                            ; ===========================================================================
00070C94 6000 0000                  		bra.w	loc_72BEE
00070C98                            ; ===========================================================================
00070C98 6000 0000                  		bra.w	loc_72BF4
00070C9C                            ; ===========================================================================
00070C9C 6000 0000                  		bra.w	loc_72C26
00070CA0                            ; ===========================================================================
00070CA0 6000 0000                  		bra.w	loc_72D30
00070CA4                            ; ===========================================================================
00070CA4 6000 0000                  		bra.w	loc_72D52
00070CA8                            ; ===========================================================================
00070CA8 6000 0000                  		bra.w	loc_72D58
00070CAC                            ; ===========================================================================
00070CAC 6000 0000                  		bra.w	loc_72E06
00070CB0                            ; ===========================================================================
00070CB0 6000 0000                  		bra.w	loc_72E20
00070CB4                            ; ===========================================================================
00070CB4 6000 0000                  		bra.w	loc_72E26
00070CB8                            ; ===========================================================================
00070CB8 6000 0000                  		bra.w	loc_72E2C
00070CBC                            ; ===========================================================================
00070CBC 6000 0000                  		bra.w	loc_72E38
00070CC0                            ; ===========================================================================
00070CC0 6000 0000                  		bra.w	loc_72E52
00070CC4                            ; ===========================================================================
00070CC4 6000 0000                  		bra.w	loc_72E64
00070CC8                            ; ===========================================================================
00070CC8                            
00070CC8                            loc_72ACC:				; XREF: loc_72A64
00070CC8 121C                       		move.b	(a4)+,d1
00070CCA 4A2D 0001                  		tst.b	1(a5)
00070CCE 6B00                       		bmi.s	locret_72AEA
00070CD0 102D 000A                  		move.b	$A(a5),d0
00070CD4 0200 0037                  		andi.b	#$37,d0
00070CD8 8200                       		or.b	d0,d1
00070CDA 1B41 000A                  		move.b	d1,$A(a5)
00070CDE 103C 00B4                  		move.b	#$B4,d0
00070CE2 6000 FC2E                  		bra.w	loc_72716
00070CE6                            ; ===========================================================================
00070CE6                            
00070CE6                            locret_72AEA:
00070CE6 4E75                       		rts	
00070CE8                            ; ===========================================================================
00070CE8                            
00070CE8                            loc_72AEC:				; XREF: loc_72A64
00070CE8 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00070CEC 4E75                       		rts	
00070CEE                            ; ===========================================================================
00070CEE                            
00070CEE                            loc_72AF2:				; XREF: loc_72A64
00070CEE 1D5C 0007                  		move.b	(a4)+,7(a6)
00070CF2 4E75                       		rts	
00070CF4                            ; ===========================================================================
00070CF4                            
00070CF4                            loc_72AF8:				; XREF: loc_72A64
00070CF4 7000                       		moveq	#0,d0
00070CF6 102D 000D                  		move.b	$D(a5),d0
00070CFA 2875 0000                  		movea.l	(a5,d0.w),a4
00070CFE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00070D06 544C                       		addq.w	#2,a4
00070D08 5800                       		addq.b	#4,d0
00070D0A 1B40 000D                  		move.b	d0,$D(a5)
00070D0E 4E75                       		rts	
00070D10                            ; ===========================================================================
00070D10                            
00070D10                            loc_72B14:				; XREF: loc_72A64
00070D10 204E                       		movea.l	a6,a0
00070D12 43EE 03A0                  		lea	$3A0(a6),a1
00070D16 303C 0087                  		move.w	#$87,d0
00070D1A                            
00070D1A                            loc_72B1E:
00070D1A 20D9                       		move.l	(a1)+,(a0)+
00070D1C 51C8 FFFC                  		dbf	d0,loc_72B1E
00070D20                            
00070D20 08EE 0002 0040             		bset	#2,$40(a6)
00070D26 264D                       		movea.l	a5,a3
00070D28 1C3C 0028                  		move.b	#$28,d6
00070D2C 9C2E 0026                  		sub.b	$26(a6),d6
00070D30 7E05                       		moveq	#5,d7
00070D32 4BEE 0070                  		lea	$70(a6),a5
00070D36                            
00070D36                            loc_72B3A:
00070D36 0815 0007                  		btst	#7,(a5)
00070D3A 6700                       		beq.s	loc_72B5C
00070D3C 08D5 0001                  		bset	#1,(a5)
00070D40 DD2D 0009                  		add.b	d6,9(a5)
00070D44 0815 0002                  		btst	#2,(a5)
00070D48 6600                       		bne.s	loc_72B5C
00070D4A 7000                       		moveq	#0,d0
00070D4C 102D 000B                  		move.b	$B(a5),d0
00070D50 226E 0018                  		movea.l	$18(a6),a1
00070D54 4EBA 0000                  		jsr	sub_72C4E(pc)
00070D58                            
00070D58                            loc_72B5C:
00070D58 DAFC 0030                  		adda.w	#$30,a5
00070D5C 51CF FFD8                  		dbf	d7,loc_72B3A
00070D60                            
00070D60 7E02                       		moveq	#2,d7
00070D62                            
00070D62                            loc_72B66:
00070D62 0815 0007                  		btst	#7,(a5)
00070D66 6700                       		beq.s	loc_72B78
00070D68 08D5 0001                  		bset	#1,(a5)
00070D6C 4EBA FE2E                  		jsr	sub_729A0(pc)
00070D70 DD2D 0009                  		add.b	d6,9(a5)
00070D74                            
00070D74                            loc_72B78:
00070D74 DAFC 0030                  		adda.w	#$30,a5
00070D78 51CF FFE8                  		dbf	d7,loc_72B66
00070D7C 2A4B                       		movea.l	a3,a5
00070D7E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00070D84 1D7C 0028 0026             		move.b	#$28,$26(a6)
00070D8A 422E 0027                  		clr.b	$27(a6)
00070D8E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00070D96 504F                       		addq.w	#8,sp
00070D98 4E75                       		rts	
00070D9A                            ; ===========================================================================
00070D9A                            
00070D9A                            loc_72B9E:				; XREF: loc_72A64
00070D9A 1B5C 0002                  		move.b	(a4)+,2(a5)
00070D9E 4E75                       		rts	
00070DA0                            ; ===========================================================================
00070DA0                            
00070DA0                            loc_72BA4:				; XREF: loc_72A64
00070DA0 101C                       		move.b	(a4)+,d0
00070DA2 D12D 0009                  		add.b	d0,9(a5)
00070DA6 6000 0000                  		bra.w	sub_72CB4
00070DAA                            ; ===========================================================================
00070DAA                            
00070DAA                            loc_72BAE:				; XREF: loc_72A64
00070DAA 08D5 0004                  		bset	#4,(a5)
00070DAE 4E75                       		rts	
00070DB0                            ; ===========================================================================
00070DB0                            
00070DB0                            loc_72BB4:				; XREF: loc_72A64
00070DB0 1B54 0012                  		move.b	(a4),$12(a5)
00070DB4 1B5C 0013                  		move.b	(a4)+,$13(a5)
00070DB8 4E75                       		rts	
00070DBA                            ; ===========================================================================
00070DBA                            
00070DBA                            loc_72BBE:				; XREF: loc_72A64
00070DBA 101C                       		move.b	(a4)+,d0
00070DBC D12D 0008                  		add.b	d0,8(a5)
00070DC0 4E75                       		rts	
00070DC2                            ; ===========================================================================
00070DC2                            
00070DC2                            loc_72BC6:				; XREF: loc_72A64
00070DC2 1D54 0002                  		move.b	(a4),2(a6)
00070DC6 1D5C 0001                  		move.b	(a4)+,1(a6)
00070DCA 4E75                       		rts	
00070DCC                            ; ===========================================================================
00070DCC                            
00070DCC                            loc_72BD0:				; XREF: loc_72A64
00070DCC 41EE 0040                  		lea	$40(a6),a0
00070DD0 101C                       		move.b	(a4)+,d0
00070DD2 7230                       		moveq	#$30,d1
00070DD4 7409                       		moveq	#9,d2
00070DD6                            
00070DD6                            loc_72BDA:
00070DD6 1140 0002                  		move.b	d0,2(a0)
00070DDA D0C1                       		adda.w	d1,a0
00070DDC 51CA FFF8                  		dbf	d2,loc_72BDA
00070DE0                            
00070DE0 4E75                       		rts	
00070DE2                            ; ===========================================================================
00070DE2                            
00070DE2                            loc_72BE6:				; XREF: loc_72A64
00070DE2 101C                       		move.b	(a4)+,d0
00070DE4 D12D 0009                  		add.b	d0,9(a5)
00070DE8 4E75                       		rts	
00070DEA                            ; ===========================================================================
00070DEA                            
00070DEA                            loc_72BEE:				; XREF: loc_72A64
00070DEA 422E 002C                  		clr.b	$2C(a6)
00070DEE 4E75                       		rts	
00070DF0                            ; ===========================================================================
00070DF0                            
00070DF0                            loc_72BF4:				; XREF: loc_72A64
00070DF0 0895 0007                  		bclr	#7,(a5)
00070DF4 0895 0004                  		bclr	#4,(a5)
00070DF8 4EBA FB00                  		jsr	sub_726FE(pc)
00070DFC 4A2E 0250                  		tst.b	$250(a6)
00070E00 6B00                       		bmi.s	loc_72C22
00070E02 264D                       		movea.l	a5,a3
00070E04 4BEE 0100                  		lea	$100(a6),a5
00070E08 226E 0018                  		movea.l	$18(a6),a1
00070E0C 0895 0002                  		bclr	#2,(a5)
00070E10 08D5 0001                  		bset	#1,(a5)
00070E14 102D 000B                  		move.b	$B(a5),d0
00070E18 4EBA 0000                  		jsr	sub_72C4E(pc)
00070E1C 2A4B                       		movea.l	a3,a5
00070E1E                            
00070E1E                            loc_72C22:
00070E1E 504F                       		addq.w	#8,sp
00070E20 4E75                       		rts	
00070E22                            ; ===========================================================================
00070E22                            
00070E22                            loc_72C26:				; XREF: loc_72A64
00070E22 7000                       		moveq	#0,d0
00070E24 101C                       		move.b	(a4)+,d0
00070E26 1B40 000B                  		move.b	d0,$B(a5)
00070E2A 0815 0002                  		btst	#2,(a5)
00070E2E 6600 0000                  		bne.w	locret_72CAA
00070E32 226E 0018                  		movea.l	$18(a6),a1
00070E36 4A2E 000E                  		tst.b	$E(a6)
00070E3A 6700                       		beq.s	sub_72C4E
00070E3C 226D 0020                  		movea.l	$20(a5),a1
00070E40 4A2E 000E                  		tst.b	$E(a6)
00070E44 6B00                       		bmi.s	sub_72C4E
00070E46 226E 0020                  		movea.l	$20(a6),a1
00070E4A                            
00070E4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070E4A                            
00070E4A                            
00070E4A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00070E4A 5340                       		subq.w	#1,d0
00070E4C 6B00                       		bmi.s	loc_72C5C
00070E4E 323C 0019                  		move.w	#$19,d1
00070E52                            
00070E52                            loc_72C56:
00070E52 D2C1                       		adda.w	d1,a1
00070E54 51C8 FFFC                  		dbf	d0,loc_72C56
00070E58                            
00070E58                            loc_72C5C:
00070E58 1219                       		move.b	(a1)+,d1
00070E5A 1B41 001F                  		move.b	d1,$1F(a5)
00070E5E 1801                       		move.b	d1,d4
00070E60 103C 00B0                  		move.b	#$B0,d0
00070E64 4EBA FAB8                  		jsr	sub_72722(pc)
00070E68 45FA 0000                  		lea	byte_72D18(pc),a2
00070E6C 7613                       		moveq	#$13,d3
00070E6E                            
00070E6E                            loc_72C72:
00070E6E 101A                       		move.b	(a2)+,d0
00070E70 1219                       		move.b	(a1)+,d1
00070E72 4EBA FAAA                  		jsr	sub_72722(pc)
00070E76 51CB FFF6                  		dbf	d3,loc_72C72
00070E7A 7A03                       		moveq	#3,d5
00070E7C 0244 0007                  		andi.w	#7,d4
00070E80 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00070E84 162D 0009                  		move.b	9(a5),d3
00070E88                            
00070E88                            loc_72C8C:
00070E88 101A                       		move.b	(a2)+,d0
00070E8A 1219                       		move.b	(a1)+,d1
00070E8C E20C                       		lsr.b	#1,d4
00070E8E 6400                       		bcc.s	loc_72C96
00070E90 D203                       		add.b	d3,d1
00070E92                            
00070E92                            loc_72C96:
00070E92 4EBA FA8A                  		jsr	sub_72722(pc)
00070E96 51CD FFF0                  		dbf	d5,loc_72C8C
00070E9A 103C 00B4                  		move.b	#$B4,d0
00070E9E 122D 000A                  		move.b	$A(a5),d1
00070EA2 4EBA FA7A                  		jsr	sub_72722(pc)
00070EA6                            
00070EA6                            locret_72CAA:
00070EA6 4E75                       		rts	
00070EA8                            ; End of function sub_72C4E
00070EA8                            
00070EA8                            ; ===========================================================================
00070EA8 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00070EB0                            
00070EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070EB0                            
00070EB0                            
00070EB0                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00070EB0 0815 0002                  		btst	#2,(a5)
00070EB4 6600                       		bne.s	locret_72D16
00070EB6 7000                       		moveq	#0,d0
00070EB8 102D 000B                  		move.b	$B(a5),d0
00070EBC 226E 0018                  		movea.l	$18(a6),a1
00070EC0 4A2E 000E                  		tst.b	$E(a6)
00070EC4 6700                       		beq.s	loc_72CD8
00070EC6 226E 0020                  		movea.l	$20(a6),a1
00070ECA 4A2E 000E                  		tst.b	$E(a6)
00070ECE 6B00                       		bmi.s	loc_72CD8
00070ED0 226E 0020                  		movea.l	$20(a6),a1
00070ED4                            
00070ED4                            loc_72CD8:
00070ED4 5340                       		subq.w	#1,d0
00070ED6 6B00                       		bmi.s	loc_72CE6
00070ED8 323C 0019                  		move.w	#$19,d1
00070EDC                            
00070EDC                            loc_72CE0:
00070EDC D2C1                       		adda.w	d1,a1
00070EDE 51C8 FFFC                  		dbf	d0,loc_72CE0
00070EE2                            
00070EE2                            loc_72CE6:
00070EE2 D2FC 0015                  		adda.w	#$15,a1
00070EE6 45FA 0000                  		lea	byte_72D2C(pc),a2
00070EEA 102D 001F                  		move.b	$1F(a5),d0
00070EEE 0240 0007                  		andi.w	#7,d0
00070EF2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00070EF6 162D 0009                  		move.b	9(a5),d3
00070EFA 6B00                       		bmi.s	locret_72D16
00070EFC 7A03                       		moveq	#3,d5
00070EFE                            
00070EFE                            loc_72D02:
00070EFE 101A                       		move.b	(a2)+,d0
00070F00 1219                       		move.b	(a1)+,d1
00070F02 E20C                       		lsr.b	#1,d4
00070F04 6400                       		bcc.s	loc_72D12
00070F06 D203                       		add.b	d3,d1
00070F08 6500                       		bcs.s	loc_72D12
00070F0A 4EBA FA12                  		jsr	sub_72722(pc)
00070F0E                            
00070F0E                            loc_72D12:
00070F0E 51CD FFEE                  		dbf	d5,loc_72D02
00070F12                            
00070F12                            locret_72D16:
00070F12 4E75                       		rts	
00070F14                            ; End of function sub_72CB4
00070F14                            
00070F14                            ; ===========================================================================
00070F14 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00070F1E 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00070F28 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00070F2C                            ; ===========================================================================
00070F2C                            
00070F2C                            loc_72D30:				; XREF: loc_72A64
00070F2C 08D5 0003                  		bset	#3,(a5)
00070F30 2B4C 0014                  		move.l	a4,$14(a5)
00070F34 1B5C 0018                  		move.b	(a4)+,$18(a5)
00070F38 1B5C 0019                  		move.b	(a4)+,$19(a5)
00070F3C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00070F40 101C                       		move.b	(a4)+,d0
00070F42 E208                       		lsr.b	#1,d0
00070F44 1B40 001B                  		move.b	d0,$1B(a5)
00070F48 426D 001C                  		clr.w	$1C(a5)
00070F4C 4E75                       		rts	
00070F4E                            ; ===========================================================================
00070F4E                            
00070F4E                            loc_72D52:				; XREF: loc_72A64
00070F4E 08D5 0003                  		bset	#3,(a5)
00070F52 4E75                       		rts	
00070F54                            ; ===========================================================================
00070F54                            
00070F54                            loc_72D58:				; XREF: loc_72A64
00070F54 0895 0007                  		bclr	#7,(a5)
00070F58 0895 0004                  		bclr	#4,(a5)
00070F5C 4A2D 0001                  		tst.b	1(a5)
00070F60 6B00                       		bmi.s	loc_72D74
00070F62 4A2E 0008                  		tst.b	8(a6)
00070F66 6B00 0000                  		bmi.w	loc_72E02
00070F6A 4EBA F98E                  		jsr	sub_726FE(pc)
00070F6E 6000                       		bra.s	loc_72D78
00070F70                            ; ===========================================================================
00070F70                            
00070F70                            loc_72D74:
00070F70 4EBA FC2A                  		jsr	sub_729A0(pc)
00070F74                            
00070F74                            loc_72D78:
00070F74 4A2E 000E                  		tst.b	$E(a6)
00070F78 6A00 0000                  		bpl.w	loc_72E02
00070F7C 4216                       		clr.b	0(a6)
00070F7E 7000                       		moveq	#0,d0
00070F80 102D 0001                  		move.b	1(a5),d0
00070F84 6B00                       		bmi.s	loc_72DCC
00070F86 41FA F546                  		lea	dword_722CC(pc),a0
00070F8A 264D                       		movea.l	a5,a3
00070F8C 0C00 0004                  		cmpi.b	#4,d0
00070F90 6600                       		bne.s	loc_72DA8
00070F92 4A2E 0340                  		tst.b	$340(a6)
00070F96 6A00                       		bpl.s	loc_72DA8
00070F98 4BEE 0340                  		lea	$340(a6),a5
00070F9C 226E 0020                  		movea.l	$20(a6),a1
00070FA0 6000                       		bra.s	loc_72DB8
00070FA2                            ; ===========================================================================
00070FA2                            
00070FA2                            loc_72DA8:
00070FA2 5500                       		subq.b	#2,d0
00070FA4 E508                       		lsl.b	#2,d0
00070FA6 2A70 0000                  		movea.l	(a0,d0.w),a5
00070FAA 4A15                       		tst.b	(a5)
00070FAC 6A00                       		bpl.s	loc_72DC8
00070FAE 226E 0018                  		movea.l	$18(a6),a1
00070FB2                            
00070FB2                            loc_72DB8:
00070FB2 0895 0002                  		bclr	#2,(a5)
00070FB6 08D5 0001                  		bset	#1,(a5)
00070FBA 102D 000B                  		move.b	$B(a5),d0
00070FBE 4EBA FE8A                  		jsr	sub_72C4E(pc)
00070FC2                            
00070FC2                            loc_72DC8:
00070FC2 2A4B                       		movea.l	a3,a5
00070FC4 6000                       		bra.s	loc_72E02
00070FC6                            ; ===========================================================================
00070FC6                            
00070FC6                            loc_72DCC:
00070FC6 41EE 0370                  		lea	$370(a6),a0
00070FCA 4A10                       		tst.b	(a0)
00070FCC 6A00                       		bpl.s	loc_72DE0
00070FCE 0C00 00E0                  		cmpi.b	#$E0,d0
00070FD2 6700                       		beq.s	loc_72DEA
00070FD4 0C00 00C0                  		cmpi.b	#$C0,d0
00070FD8 6700                       		beq.s	loc_72DEA
00070FDA                            
00070FDA                            loc_72DE0:
00070FDA 41FA F4F2                  		lea	dword_722CC(pc),a0
00070FDE E608                       		lsr.b	#3,d0
00070FE0 2070 0000                  		movea.l	(a0,d0.w),a0
00070FE4                            
00070FE4                            loc_72DEA:
00070FE4 0890 0002                  		bclr	#2,(a0)
00070FE8 08D0 0001                  		bset	#1,(a0)
00070FEC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00070FF2 6600                       		bne.s	loc_72E02
00070FF4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00070FFC                            
00070FFC                            loc_72E02:
00070FFC 504F                       		addq.w	#8,sp
00070FFE 4E75                       		rts	
00071000                            ; ===========================================================================
00071000                            
00071000                            loc_72E06:				; XREF: loc_72A64
00071000 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00071006 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007100A 0815 0002                  		btst	#2,(a5)
0007100E 6600                       		bne.s	locret_72E1E
00071010 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00071018                            
00071018                            locret_72E1E:
00071018 4E75                       		rts	
0007101A                            ; ===========================================================================
0007101A                            
0007101A                            loc_72E20:				; XREF: loc_72A64
0007101A 0895 0003                  		bclr	#3,(a5)
0007101E 4E75                       		rts	
00071020                            ; ===========================================================================
00071020                            
00071020                            loc_72E26:				; XREF: loc_72A64
00071020 1B5C 000B                  		move.b	(a4)+,$B(a5)
00071024 4E75                       		rts	
00071026                            ; ===========================================================================
00071026                            
00071026                            loc_72E2C:				; XREF: loc_72A64
00071026 101C                       		move.b	(a4)+,d0
00071028 E148                       		lsl.w	#8,d0
0007102A 101C                       		move.b	(a4)+,d0
0007102C D8C0                       		adda.w	d0,a4
0007102E 534C                       		subq.w	#1,a4
00071030 4E75                       		rts	
00071032                            ; ===========================================================================
00071032                            
00071032                            loc_72E38:				; XREF: loc_72A64
00071032 7000                       		moveq	#0,d0
00071034 101C                       		move.b	(a4)+,d0
00071036 121C                       		move.b	(a4)+,d1
00071038 4A35 0024                  		tst.b	$24(a5,d0.w)
0007103C 6600                       		bne.s	loc_72E48
0007103E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00071042                            
00071042                            loc_72E48:
00071042 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00071046 66DE                       		bne.s	loc_72E2C
00071048 544C                       		addq.w	#2,a4
0007104A 4E75                       		rts	
0007104C                            ; ===========================================================================
0007104C                            
0007104C                            loc_72E52:				; XREF: loc_72A64
0007104C 7000                       		moveq	#0,d0
0007104E 102D 000D                  		move.b	$D(a5),d0
00071052 5900                       		subq.b	#4,d0
00071054 2B8C 0000                  		move.l	a4,(a5,d0.w)
00071058 1B40 000D                  		move.b	d0,$D(a5)
0007105C 60C8                       		bra.s	loc_72E2C
0007105E                            ; ===========================================================================
0007105E                            
0007105E                            loc_72E64:				; XREF: loc_72A64
0007105E 103C 0088                  		move.b	#$88,d0
00071062 123C 000F                  		move.b	#$F,d1
00071066 4EBA F8C2                  		jsr	sub_7272E(pc)
0007106A 103C 008C                  		move.b	#$8C,d0
0007106E 123C 000F                  		move.b	#$F,d1
00071072 6000 F8B6                  		bra.w	sub_7272E
00071076                            ; ===========================================================================
00071076                            Kos_Z80:	incbin	sound\z80_1.bin
00071126 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00071128 21                         		dc.b $21
00071129 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007112B                            		incbin	sound\z80_2.bin
000727D6                            		even
000727D6                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00078FD6                            		even
00078FD6                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00082874                            		even
00082874                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00082E02                            		even
00082E02                            Music84:	include	sound\music84.asm ; Star Light Act 1
00082E02                            music84_Header:
00082E02 =00000001                  smpsHeaderStartSong = 1
00082E02 0000                       	smpsHeaderVoice     music84_Voices
00082E04 0603                       	smpsHeaderChan      $06, $03
00082E06 0205                       	smpsHeaderTempo     $02, $05
00082E08                            
00082E0C 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00082E10 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00082E14 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00082E18 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00082E1C 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00082E20 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00082E26 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00082E2C 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00082E32                            
00082E32                            ; FM1 Data
00082E32                            music84_FM1:
00082E32 E0C0                       	smpsPan             panCenter, $00
00082E36 E107                       	smpsAlterNote       $07
00082E38 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00082E3C E106                       	smpsAlterNote       $06
00082E3E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00082E42 E10B                       	smpsAlterNote       $0B
00082E44 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00082E4A E10C                       	smpsAlterNote       $0C
00082E4C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00082E4F E10B                       	smpsAlterNote       $0B
00082E51 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00082E54 E109                       	smpsAlterNote       $09
00082E56 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00082E5B E108                       	smpsAlterNote       $08
00082E5D 8001                       	dc.b	nRst, $01
00082E5F E10B                       	smpsAlterNote       $0B
00082E61 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00082E67 E107                       	smpsAlterNote       $07
00082E69 9B03                       	dc.b	nD2, $03
00082E6B                            
00082E6B                            music84_Jump04:
00082E6B E107                       	smpsAlterNote       $07
00082E6D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082E71 E10B                       	smpsAlterNote       $0B
00082E73 A202 8001                  	dc.b	nA2, $02, nRst, $01
00082E77 E107                       	smpsAlterNote       $07
00082E79 9B03                       	dc.b	nD2, $03
00082E7B E11A                       	smpsAlterNote       $1A
00082E7D A301                       	dc.b	nBb2, $01
00082E7F E1F2                       	smpsAlterNote       $F2
00082E81 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00082E84 E1FF                       	smpsAlterNote       $FF
00082E86 E701                       	dc.b	smpsNoAttack, $01
00082E88 E111                       	smpsAlterNote       $11
00082E8A E701                       	dc.b	smpsNoAttack, $01
00082E8C E106                       	smpsAlterNote       $06
00082E8E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00082E91 E107                       	smpsAlterNote       $07
00082E93 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082E97 E108                       	smpsAlterNote       $08
00082E99 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00082EA1 E109                       	smpsAlterNote       $09
00082EA3 A003                       	dc.b	nG2, $03
00082EA5 E10C                       	smpsAlterNote       $0C
00082EA7 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00082EAB E1FD                       	smpsAlterNote       $FD
00082EAD A401                       	dc.b	nB2, $01
00082EAF E109                       	smpsAlterNote       $09
00082EB1 E701                       	dc.b	smpsNoAttack, $01
00082EB3 E106                       	smpsAlterNote       $06
00082EB5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082EB8 E109                       	smpsAlterNote       $09
00082EBA A007                       	dc.b	nG2, $07
00082EBC E108                       	smpsAlterNote       $08
00082EBE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00082EC2 E107                       	smpsAlterNote       $07
00082EC4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00082ECA E10B                       	smpsAlterNote       $0B
00082ECC A203 8001                  	dc.b	nA2, $03, nRst, $01
00082ED0 E107                       	smpsAlterNote       $07
00082ED2 9B03                       	dc.b	nD2, $03
00082ED4 E11A                       	smpsAlterNote       $1A
00082ED6 A301                       	dc.b	nBb2, $01
00082ED8 E1F9                       	smpsAlterNote       $F9
00082EDA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00082EDD E107                       	smpsAlterNote       $07
00082EDF E701                       	dc.b	smpsNoAttack, $01
00082EE1 E111                       	smpsAlterNote       $11
00082EE3 E701                       	dc.b	smpsNoAttack, $01
00082EE5 E106                       	smpsAlterNote       $06
00082EE7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00082EEC E107                       	smpsAlterNote       $07
00082EEE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00082EF6 E1EC                       	smpsAlterNote       $EC
00082EF8 A101                       	dc.b	nAb2, $01
00082EFA E108                       	smpsAlterNote       $08
00082EFC E701                       	dc.b	smpsNoAttack, $01
00082EFE E116                       	smpsAlterNote       $16
00082F00 E701                       	dc.b	smpsNoAttack, $01
00082F02 E1F5                       	smpsAlterNote       $F5
00082F04 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00082F07 E10B                       	smpsAlterNote       $0B
00082F09 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082F0D E107                       	smpsAlterNote       $07
00082F0F 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00082F15 E109                       	smpsAlterNote       $09
00082F17 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00082F1B E10B                       	smpsAlterNote       $0B
00082F1D 9603                       	dc.b	nA1, $03
00082F1F E107                       	smpsAlterNote       $07
00082F21 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00082F27 E10B                       	smpsAlterNote       $0B
00082F29 A203 8001                  	dc.b	nA2, $03, nRst, $01
00082F2D E107                       	smpsAlterNote       $07
00082F2F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00082F33 E11A                       	smpsAlterNote       $1A
00082F35 A301                       	dc.b	nBb2, $01
00082F37 E1F9                       	smpsAlterNote       $F9
00082F39 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00082F3C E107                       	smpsAlterNote       $07
00082F3E E701                       	dc.b	smpsNoAttack, $01
00082F40 E1FB                       	smpsAlterNote       $FB
00082F42 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082F45 E106                       	smpsAlterNote       $06
00082F47 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082F4B E107                       	smpsAlterNote       $07
00082F4D 9B03                       	dc.b	nD2, $03
00082F4F E108                       	smpsAlterNote       $08
00082F51 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00082F57 E109                       	smpsAlterNote       $09
00082F59 A002 8001                  	dc.b	nG2, $02, nRst, $01
00082F5D E10C                       	smpsAlterNote       $0C
00082F5F A303                       	dc.b	nBb2, $03
00082F61 E1F0                       	smpsAlterNote       $F0
00082F63 A401                       	dc.b	nB2, $01
00082F65 E1FD                       	smpsAlterNote       $FD
00082F67 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00082F6C E106                       	smpsAlterNote       $06
00082F6E 8001                       	dc.b	nRst, $01
00082F70 E109                       	smpsAlterNote       $09
00082F72 A006 8001                  	dc.b	nG2, $06, nRst, $01
00082F76 E108                       	smpsAlterNote       $08
00082F78 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00082F7C E107                       	smpsAlterNote       $07
00082F7E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00082F84 E10B                       	smpsAlterNote       $0B
00082F86 A203                       	dc.b	nA2, $03
00082F88 E107                       	smpsAlterNote       $07
00082F8A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082F8E E1F2                       	smpsAlterNote       $F2
00082F90 A401                       	dc.b	nB2, $01
00082F92 E1FF                       	smpsAlterNote       $FF
00082F94 E701                       	dc.b	smpsNoAttack, $01
00082F96 E107                       	smpsAlterNote       $07
00082F98 E701                       	dc.b	smpsNoAttack, $01
00082F9A E1FB                       	smpsAlterNote       $FB
00082F9C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082F9F E106                       	smpsAlterNote       $06
00082FA1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082FA5 E107                       	smpsAlterNote       $07
00082FA7 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00082FB1 E117                       	smpsAlterNote       $17
00082FB3 A001                       	dc.b	nG2, $01
00082FB5 E1FA                       	smpsAlterNote       $FA
00082FB7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00082FBA E108                       	smpsAlterNote       $08
00082FBC E701                       	dc.b	smpsNoAttack, $01
00082FBE E1E7                       	smpsAlterNote       $E7
00082FC0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00082FC3 E103                       	smpsAlterNote       $03
00082FC5 E701                       	dc.b	smpsNoAttack, $01
00082FC7 E10B                       	smpsAlterNote       $0B
00082FC9 E702                       	dc.b	smpsNoAttack, $02
00082FCB E107                       	smpsAlterNote       $07
00082FCD 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00082FD5 E106                       	smpsAlterNote       $06
00082FD7 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00082FDD E10C                       	smpsAlterNote       $0C
00082FDF 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00082FE5 E109                       	smpsAlterNote       $09
00082FE7 9E03                       	dc.b	nF2, $03
00082FE9 E10C                       	smpsAlterNote       $0C
00082FEB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00082FEF E1EA                       	smpsAlterNote       $EA
00082FF1 A201                       	dc.b	nA2, $01
00082FF3 E106                       	smpsAlterNote       $06
00082FF5 E701                       	dc.b	smpsNoAttack, $01
00082FF7 E1E2                       	smpsAlterNote       $E2
00082FF9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00082FFC E1F0                       	smpsAlterNote       $F0
00082FFE E701                       	dc.b	smpsNoAttack, $01
00083000 E10C                       	smpsAlterNote       $0C
00083002 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008300E E116                       	smpsAlterNote       $16
00083010 9C01                       	dc.b	nEb2, $01
00083012 E105                       	smpsAlterNote       $05
00083014 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00083017 E1F1                       	smpsAlterNote       $F1
00083019 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008301C E1FF                       	smpsAlterNote       $FF
0008301E E701                       	dc.b	smpsNoAttack, $01
00083020 E109                       	smpsAlterNote       $09
00083022 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083026 E10C                       	smpsAlterNote       $0C
00083028 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00083034 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008303A E109                       	smpsAlterNote       $09
0008303C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00083040 E10C                       	smpsAlterNote       $0C
00083042 9703                       	dc.b	nBb1, $03
00083044 E11A                       	smpsAlterNote       $1A
00083046 A101                       	dc.b	nAb2, $01
00083048 E1FB                       	smpsAlterNote       $FB
0008304A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008304D E10A                       	smpsAlterNote       $0A
0008304F E701                       	dc.b	smpsNoAttack, $01
00083051 E1E8                       	smpsAlterNote       $E8
00083053 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083056 E106                       	smpsAlterNote       $06
00083058 E701                       	dc.b	smpsNoAttack, $01
0008305A E10C                       	smpsAlterNote       $0C
0008305C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00083068 E1F9                       	smpsAlterNote       $F9
0008306A 9D01                       	dc.b	nE2, $01
0008306C E108                       	smpsAlterNote       $08
0008306E E701                       	dc.b	smpsNoAttack, $01
00083070 E1F6                       	smpsAlterNote       $F6
00083072 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00083075 E109                       	smpsAlterNote       $09
00083077 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008307B E10C                       	smpsAlterNote       $0C
0008307D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00083089 E108                       	smpsAlterNote       $08
0008308B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00083091 E106                       	smpsAlterNote       $06
00083093 A403 8001                  	dc.b	nB2, $03, nRst, $01
00083097 E108                       	smpsAlterNote       $08
00083099 9D03                       	dc.b	nE2, $03
0008309B E1EB                       	smpsAlterNote       $EB
0008309D A801                       	dc.b	nEb3, $01
0008309F E109                       	smpsAlterNote       $09
000830A1 E701                       	dc.b	smpsNoAttack, $01
000830A3 E1FA                       	smpsAlterNote       $FA
000830A5 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000830A8 E108                       	smpsAlterNote       $08
000830AA E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000830B6 E1E9                       	smpsAlterNote       $E9
000830B8 A301                       	dc.b	nBb2, $01
000830BA E107                       	smpsAlterNote       $07
000830BC E701                       	dc.b	smpsNoAttack, $01
000830BE E1F0                       	smpsAlterNote       $F0
000830C0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000830C3 E1F7                       	smpsAlterNote       $F7
000830C5 E701                       	dc.b	smpsNoAttack, $01
000830C7 E107                       	smpsAlterNote       $07
000830C9 E701                       	dc.b	smpsNoAttack, $01
000830CB E106                       	smpsAlterNote       $06
000830CD E701                       	dc.b	smpsNoAttack, $01
000830CF E108                       	smpsAlterNote       $08
000830D1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000830D7 E106                       	smpsAlterNote       $06
000830D9 A403 8001                  	dc.b	nB2, $03, nRst, $01
000830DD E108                       	smpsAlterNote       $08
000830DF 9D03                       	dc.b	nE2, $03
000830E1 E10B                       	smpsAlterNote       $0B
000830E3 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000830EB E108                       	smpsAlterNote       $08
000830ED 9D03                       	dc.b	nE2, $03
000830EF E10B                       	smpsAlterNote       $0B
000830F1 9603 8001                  	dc.b	nA1, $03, nRst, $01
000830F5 E113                       	smpsAlterNote       $13
000830F7 A001                       	dc.b	nG2, $01
000830F9 E118                       	smpsAlterNote       $18
000830FB E701                       	dc.b	smpsNoAttack, $01
000830FD E1E9                       	smpsAlterNote       $E9
000830FF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00083102 E1F3                       	smpsAlterNote       $F3
00083104 E701                       	dc.b	smpsNoAttack, $01
00083106 E1FD                       	smpsAlterNote       $FD
00083108 E701                       	dc.b	smpsNoAttack, $01
0008310A E102                       	smpsAlterNote       $02
0008310C E701                       	dc.b	smpsNoAttack, $01
0008310E E107                       	smpsAlterNote       $07
00083110 8001                       	dc.b	nRst, $01
00083112 E10B                       	smpsAlterNote       $0B
00083114 9603                       	dc.b	nA1, $03
00083116 E10C                       	smpsAlterNote       $0C
00083118 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008311E E10B                       	smpsAlterNote       $0B
00083120 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008312C 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00083132 E107                       	smpsAlterNote       $07
00083134 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008313A E10B                       	smpsAlterNote       $0B
0008313C A203                       	dc.b	nA2, $03
0008313E E107                       	smpsAlterNote       $07
00083140 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083144 E1F2                       	smpsAlterNote       $F2
00083146 A401                       	dc.b	nB2, $01
00083148 E1FF                       	smpsAlterNote       $FF
0008314A E701                       	dc.b	smpsNoAttack, $01
0008314C E107                       	smpsAlterNote       $07
0008314E E701                       	dc.b	smpsNoAttack, $01
00083150 E1FB                       	smpsAlterNote       $FB
00083152 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083155 E106                       	smpsAlterNote       $06
00083157 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008315B E107                       	smpsAlterNote       $07
0008315D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083161 E108                       	smpsAlterNote       $08
00083163 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00083169 E109                       	smpsAlterNote       $09
0008316B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008316F E10C                       	smpsAlterNote       $0C
00083171 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00083175 E1F0                       	smpsAlterNote       $F0
00083177 A401                       	dc.b	nB2, $01
00083179 E109                       	smpsAlterNote       $09
0008317B E701                       	dc.b	smpsNoAttack, $01
0008317D E106                       	smpsAlterNote       $06
0008317F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083182 E109                       	smpsAlterNote       $09
00083184 A007                       	dc.b	nG2, $07
00083186 E108                       	smpsAlterNote       $08
00083188 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008318C E107                       	smpsAlterNote       $07
0008318E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083194 E10B                       	smpsAlterNote       $0B
00083196 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008319A E107                       	smpsAlterNote       $07
0008319C 9B03                       	dc.b	nD2, $03
0008319E E11A                       	smpsAlterNote       $1A
000831A0 A301                       	dc.b	nBb2, $01
000831A2 E1F2                       	smpsAlterNote       $F2
000831A4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000831A7 E1FF                       	smpsAlterNote       $FF
000831A9 E701                       	dc.b	smpsNoAttack, $01
000831AB E111                       	smpsAlterNote       $11
000831AD E701                       	dc.b	smpsNoAttack, $01
000831AF E106                       	smpsAlterNote       $06
000831B1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000831B4 E107                       	smpsAlterNote       $07
000831B6 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000831C2 E117                       	smpsAlterNote       $17
000831C4 A001                       	dc.b	nG2, $01
000831C6 E1FA                       	smpsAlterNote       $FA
000831C8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000831CB E116                       	smpsAlterNote       $16
000831CD E701                       	dc.b	smpsNoAttack, $01
000831CF E1F5                       	smpsAlterNote       $F5
000831D1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000831D4 E103                       	smpsAlterNote       $03
000831D6 E701                       	dc.b	smpsNoAttack, $01
000831D8 E10B                       	smpsAlterNote       $0B
000831DA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000831DE E107                       	smpsAlterNote       $07
000831E0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000831E6 E109                       	smpsAlterNote       $09
000831E8 9E03                       	dc.b	nF2, $03
000831EA E10B                       	smpsAlterNote       $0B
000831EC 9603 8001                  	dc.b	nA1, $03, nRst, $01
000831F0 E107                       	smpsAlterNote       $07
000831F2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000831F8 E10B                       	smpsAlterNote       $0B
000831FA A203 8001                  	dc.b	nA2, $03, nRst, $01
000831FE E107                       	smpsAlterNote       $07
00083200 9B03                       	dc.b	nD2, $03
00083202 E11A                       	smpsAlterNote       $1A
00083204 A301                       	dc.b	nBb2, $01
00083206 E1F9                       	smpsAlterNote       $F9
00083208 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008320B E107                       	smpsAlterNote       $07
0008320D E701                       	dc.b	smpsNoAttack, $01
0008320F E111                       	smpsAlterNote       $11
00083211 E701                       	dc.b	smpsNoAttack, $01
00083213 E106                       	smpsAlterNote       $06
00083215 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008321A E107                       	smpsAlterNote       $07
0008321C 9B03                       	dc.b	nD2, $03
0008321E E108                       	smpsAlterNote       $08
00083220 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083226 E109                       	smpsAlterNote       $09
00083228 A003                       	dc.b	nG2, $03
0008322A E10C                       	smpsAlterNote       $0C
0008322C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083230 E1FD                       	smpsAlterNote       $FD
00083232 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00083237 E106                       	smpsAlterNote       $06
00083239 8001                       	dc.b	nRst, $01
0008323B E109                       	smpsAlterNote       $09
0008323D A006 8001                  	dc.b	nG2, $06, nRst, $01
00083241 E108                       	smpsAlterNote       $08
00083243 9C03                       	dc.b	nEb2, $03
00083245 E107                       	smpsAlterNote       $07
00083247 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008324D E10B                       	smpsAlterNote       $0B
0008324F A203 8001                  	dc.b	nA2, $03, nRst, $01
00083253 E107                       	smpsAlterNote       $07
00083255 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083259 E11A                       	smpsAlterNote       $1A
0008325B A301                       	dc.b	nBb2, $01
0008325D E1F9                       	smpsAlterNote       $F9
0008325F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083262 E107                       	smpsAlterNote       $07
00083264 E701                       	dc.b	smpsNoAttack, $01
00083266 E1FB                       	smpsAlterNote       $FB
00083268 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008326B E106                       	smpsAlterNote       $06
0008326D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083271 E107                       	smpsAlterNote       $07
00083273 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008327B E1EC                       	smpsAlterNote       $EC
0008327D A101                       	dc.b	nAb2, $01
0008327F E108                       	smpsAlterNote       $08
00083281 E701                       	dc.b	smpsNoAttack, $01
00083283 E1E7                       	smpsAlterNote       $E7
00083285 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083288 E1F5                       	smpsAlterNote       $F5
0008328A E701                       	dc.b	smpsNoAttack, $01
0008328C E10B                       	smpsAlterNote       $0B
0008328E E702                       	dc.b	smpsNoAttack, $02
00083290 E107                       	smpsAlterNote       $07
00083292 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00083298 E106                       	smpsAlterNote       $06
0008329A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000832A0 E10C                       	smpsAlterNote       $0C
000832A2 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000832AA E109                       	smpsAlterNote       $09
000832AC 9E03                       	dc.b	nF2, $03
000832AE E10C                       	smpsAlterNote       $0C
000832B0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000832B4 E1EA                       	smpsAlterNote       $EA
000832B6 A201                       	dc.b	nA2, $01
000832B8 E106                       	smpsAlterNote       $06
000832BA E701                       	dc.b	smpsNoAttack, $01
000832BC E114                       	smpsAlterNote       $14
000832BE E701                       	dc.b	smpsNoAttack, $01
000832C0 E1F0                       	smpsAlterNote       $F0
000832C2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000832C5 E10C                       	smpsAlterNote       $0C
000832C7 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000832D3 9703                       	dc.b	nBb1, $03
000832D5 E116                       	smpsAlterNote       $16
000832D7 9C01                       	dc.b	nEb2, $01
000832D9 E105                       	smpsAlterNote       $05
000832DB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000832DE E113                       	smpsAlterNote       $13
000832E0 E701                       	dc.b	smpsNoAttack, $01
000832E2 E1FF                       	smpsAlterNote       $FF
000832E4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000832E7 E109                       	smpsAlterNote       $09
000832E9 E703                       	dc.b	smpsNoAttack, $03
000832EB E10C                       	smpsAlterNote       $0C
000832ED 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000832F9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083301 E109                       	smpsAlterNote       $09
00083303 9E03                       	dc.b	nF2, $03
00083305 E10C                       	smpsAlterNote       $0C
00083307 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008330B E1EC                       	smpsAlterNote       $EC
0008330D A201                       	dc.b	nA2, $01
0008330F E10A                       	smpsAlterNote       $0A
00083311 E701                       	dc.b	smpsNoAttack, $01
00083313 E1E8                       	smpsAlterNote       $E8
00083315 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083318 E1F7                       	smpsAlterNote       $F7
0008331A E701                       	dc.b	smpsNoAttack, $01
0008331C E10C                       	smpsAlterNote       $0C
0008331E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008332A E1EA                       	smpsAlterNote       $EA
0008332C 9D01                       	dc.b	nE2, $01
0008332E E108                       	smpsAlterNote       $08
00083330 E701                       	dc.b	smpsNoAttack, $01
00083332 E1F6                       	smpsAlterNote       $F6
00083334 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00083337 E105                       	smpsAlterNote       $05
00083339 E701                       	dc.b	smpsNoAttack, $01
0008333B E109                       	smpsAlterNote       $09
0008333D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083341 E10C                       	smpsAlterNote       $0C
00083343 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008334F E108                       	smpsAlterNote       $08
00083351 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00083357 E106                       	smpsAlterNote       $06
00083359 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008335D E108                       	smpsAlterNote       $08
0008335F 9D03                       	dc.b	nE2, $03
00083361 E1EB                       	smpsAlterNote       $EB
00083363 A801                       	dc.b	nEb3, $01
00083365 E109                       	smpsAlterNote       $09
00083367 E701                       	dc.b	smpsNoAttack, $01
00083369 E1EB                       	smpsAlterNote       $EB
0008336B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008336E E108                       	smpsAlterNote       $08
00083370 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008337C E1E9                       	smpsAlterNote       $E9
0008337E A301                       	dc.b	nBb2, $01
00083380 E1F8                       	smpsAlterNote       $F8
00083382 E701                       	dc.b	smpsNoAttack, $01
00083384 E116                       	smpsAlterNote       $16
00083386 E701                       	dc.b	smpsNoAttack, $01
00083388 E1F7                       	smpsAlterNote       $F7
0008338A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008338D E107                       	smpsAlterNote       $07
0008338F E701                       	dc.b	smpsNoAttack, $01
00083391 E1EE                       	smpsAlterNote       $EE
00083393 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083396 E106                       	smpsAlterNote       $06
00083398 8001                       	dc.b	nRst, $01
0008339A E108                       	smpsAlterNote       $08
0008339C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000833A2 E106                       	smpsAlterNote       $06
000833A4 A402 8001                  	dc.b	nB2, $02, nRst, $01
000833A8 E108                       	smpsAlterNote       $08
000833AA 9D03                       	dc.b	nE2, $03
000833AC E10B                       	smpsAlterNote       $0B
000833AE 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000833B4 E108                       	smpsAlterNote       $08
000833B6 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000833BA E10B                       	smpsAlterNote       $0B
000833BC 9603                       	dc.b	nA1, $03
000833BE E10E                       	smpsAlterNote       $0E
000833C0 A001                       	dc.b	nG2, $01
000833C2 E118                       	smpsAlterNote       $18
000833C4 E701                       	dc.b	smpsNoAttack, $01
000833C6 E1E9                       	smpsAlterNote       $E9
000833C8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000833CB E1EE                       	smpsAlterNote       $EE
000833CD E701                       	dc.b	smpsNoAttack, $01
000833CF E1F8                       	smpsAlterNote       $F8
000833D1 E701                       	dc.b	smpsNoAttack, $01
000833D3 E102                       	smpsAlterNote       $02
000833D5 E701                       	dc.b	smpsNoAttack, $01
000833D7 E107                       	smpsAlterNote       $07
000833D9 8001                       	dc.b	nRst, $01
000833DB E10B                       	smpsAlterNote       $0B
000833DD 9603                       	dc.b	nA1, $03
000833DF E10C                       	smpsAlterNote       $0C
000833E1 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000833E7 E10B                       	smpsAlterNote       $0B
000833E9 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000833F5 8001 9603                  	dc.b	nRst, $01, nA1, $03
000833F9 E10C                       	smpsAlterNote       $0C
000833FB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00083407 8001                       	dc.b	nRst, $01
00083409 E10B                       	smpsAlterNote       $0B
0008340B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00083413 E107                       	smpsAlterNote       $07
00083415 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00083419 E10B                       	smpsAlterNote       $0B
0008341B 9603                       	dc.b	nA1, $03
0008341D E109                       	smpsAlterNote       $09
0008341F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00083423 E108                       	smpsAlterNote       $08
00083425 9D06                       	dc.b	nE2, $06
00083427 E107                       	smpsAlterNote       $07
00083429 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008342D E106                       	smpsAlterNote       $06
0008342F 9903                       	dc.b	nC2, $03
00083431 E10C                       	smpsAlterNote       $0C
00083433 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083437 E10B                       	smpsAlterNote       $0B
00083439 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00083445 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008344F E10C                       	smpsAlterNote       $0C
00083451 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008345D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00083469 8001                       	dc.b	nRst, $01
0008346B E10B                       	smpsAlterNote       $0B
0008346D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00083479 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00083485 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00083491 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008349B E10C                       	smpsAlterNote       $0C
0008349D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000834A9 E10B                       	smpsAlterNote       $0B
000834AB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000834B3 E107                       	smpsAlterNote       $07
000834B5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000834B9 E10B                       	smpsAlterNote       $0B
000834BB 9603                       	dc.b	nA1, $03
000834BD E109                       	smpsAlterNote       $09
000834BF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000834C3 E108                       	smpsAlterNote       $08
000834C5 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000834C9 E107                       	smpsAlterNote       $07
000834CB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000834CF E106                       	smpsAlterNote       $06
000834D1 9903                       	dc.b	nC2, $03
000834D3 E10C                       	smpsAlterNote       $0C
000834D5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000834D9 E10B                       	smpsAlterNote       $0B
000834DB 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000834E7 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000834F1 E10C                       	smpsAlterNote       $0C
000834F3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000834FF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008350B 8001                       	dc.b	nRst, $01
0008350D E10B                       	smpsAlterNote       $0B
0008350F 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008351B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00083525 E10C                       	smpsAlterNote       $0C
00083527 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083533 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008353F E10B                       	smpsAlterNote       $0B
00083541 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008354D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00083557 E10C                       	smpsAlterNote       $0C
00083559 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083565 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00083571 E10B                       	smpsAlterNote       $0B
00083573 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008357F 8001                       	dc.b	nRst, $01
00083581 E1EC                       	smpsAlterNote       $EC
00083583 A101                       	dc.b	nAb2, $01
00083585 E1FA                       	smpsAlterNote       $FA
00083587 E701                       	dc.b	smpsNoAttack, $01
00083589 E116                       	smpsAlterNote       $16
0008358B E701                       	dc.b	smpsNoAttack, $01
0008358D E1F5                       	smpsAlterNote       $F5
0008358F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083592 E10B                       	smpsAlterNote       $0B
00083594 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000835A0 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000835AC E107                       	smpsAlterNote       $07
000835AE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000835B4 E10B                       	smpsAlterNote       $0B
000835B6 A203                       	dc.b	nA2, $03
000835B8 E107                       	smpsAlterNote       $07
000835BA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000835BE E1F3                       	smpsAlterNote       $F3
000835C0 A401                       	dc.b	nB2, $01
000835C2 E102                       	smpsAlterNote       $02
000835C4 E701                       	dc.b	smpsNoAttack, $01
000835C6 E109                       	smpsAlterNote       $09
000835C8 E701                       	dc.b	smpsNoAttack, $01
000835CA E102                       	smpsAlterNote       $02
000835CC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000835CF E106                       	smpsAlterNote       $06
000835D1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000835D5 E107                       	smpsAlterNote       $07
000835D7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000835DB E108                       	smpsAlterNote       $08
000835DD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000835E3 E109                       	smpsAlterNote       $09
000835E5 A003 8001                  	dc.b	nG2, $03, nRst, $01
000835E9 E1F2                       	smpsAlterNote       $F2
000835EB A401                       	dc.b	nB2, $01
000835ED E1FF                       	smpsAlterNote       $FF
000835EF E701                       	dc.b	smpsNoAttack, $01
000835F1 E111                       	smpsAlterNote       $11
000835F3 E701                       	dc.b	smpsNoAttack, $01
000835F5 E1FB                       	smpsAlterNote       $FB
000835F7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000835FA E106                       	smpsAlterNote       $06
000835FC E702                       	dc.b	smpsNoAttack, $02
000835FE E109                       	smpsAlterNote       $09
00083600 A007                       	dc.b	nG2, $07
00083602 E108                       	smpsAlterNote       $08
00083604 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00083608 E107                       	smpsAlterNote       $07
0008360A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083610 E10B                       	smpsAlterNote       $0B
00083612 A202 8001                  	dc.b	nA2, $02, nRst, $01
00083616 E107                       	smpsAlterNote       $07
00083618 9B03                       	dc.b	nD2, $03
0008361A E11A                       	smpsAlterNote       $1A
0008361C A301                       	dc.b	nBb2, $01
0008361E E1F2                       	smpsAlterNote       $F2
00083620 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083623 E1FF                       	smpsAlterNote       $FF
00083625 E701                       	dc.b	smpsNoAttack, $01
00083627 E111                       	smpsAlterNote       $11
00083629 E701                       	dc.b	smpsNoAttack, $01
0008362B E106                       	smpsAlterNote       $06
0008362D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083630 E107                       	smpsAlterNote       $07
00083632 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008363E E117                       	smpsAlterNote       $17
00083640 A001                       	dc.b	nG2, $01
00083642 E1FA                       	smpsAlterNote       $FA
00083644 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00083647 E116                       	smpsAlterNote       $16
00083649 E701                       	dc.b	smpsNoAttack, $01
0008364B E1F5                       	smpsAlterNote       $F5
0008364D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083650 E103                       	smpsAlterNote       $03
00083652 E701                       	dc.b	smpsNoAttack, $01
00083654 E10B                       	smpsAlterNote       $0B
00083656 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008365A E107                       	smpsAlterNote       $07
0008365C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083662 E109                       	smpsAlterNote       $09
00083664 9E03                       	dc.b	nF2, $03
00083666 E10B                       	smpsAlterNote       $0B
00083668 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008366C E107                       	smpsAlterNote       $07
0008366E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00083674 E10B                       	smpsAlterNote       $0B
00083676 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008367A E107                       	smpsAlterNote       $07
0008367C 9B03                       	dc.b	nD2, $03
0008367E E11A                       	smpsAlterNote       $1A
00083680 A301                       	dc.b	nBb2, $01
00083682 E1F9                       	smpsAlterNote       $F9
00083684 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083687 E1FF                       	smpsAlterNote       $FF
00083689 E701                       	dc.b	smpsNoAttack, $01
0008368B E111                       	smpsAlterNote       $11
0008368D E701                       	dc.b	smpsNoAttack, $01
0008368F E106                       	smpsAlterNote       $06
00083691 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083694 E107                       	smpsAlterNote       $07
00083696 9B03                       	dc.b	nD2, $03
00083698 E108                       	smpsAlterNote       $08
0008369A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000836A0 E109                       	smpsAlterNote       $09
000836A2 A003                       	dc.b	nG2, $03
000836A4 E1F0                       	smpsAlterNote       $F0
000836A6 A501                       	dc.b	nC3, $01
000836A8 E106                       	smpsAlterNote       $06
000836AA E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000836AE E109                       	smpsAlterNote       $09
000836B0 A006 8001                  	dc.b	nG2, $06, nRst, $01
000836B4 E108                       	smpsAlterNote       $08
000836B6 9C03                       	dc.b	nEb2, $03
000836B8 E107                       	smpsAlterNote       $07
000836BA 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000836C0 E10B                       	smpsAlterNote       $0B
000836C2 A203 8001                  	dc.b	nA2, $03, nRst, $01
000836C6 E107                       	smpsAlterNote       $07
000836C8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000836CC E11A                       	smpsAlterNote       $1A
000836CE A301                       	dc.b	nBb2, $01
000836D0 E1F9                       	smpsAlterNote       $F9
000836D2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000836D5 E107                       	smpsAlterNote       $07
000836D7 E701                       	dc.b	smpsNoAttack, $01
000836D9 E1FB                       	smpsAlterNote       $FB
000836DB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000836DE E106                       	smpsAlterNote       $06
000836E0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000836E4 E107                       	smpsAlterNote       $07
000836E6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000836EE E1EC                       	smpsAlterNote       $EC
000836F0 A101                       	dc.b	nAb2, $01
000836F2 E108                       	smpsAlterNote       $08
000836F4 E701                       	dc.b	smpsNoAttack, $01
000836F6 E1E7                       	smpsAlterNote       $E7
000836F8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000836FB E1F5                       	smpsAlterNote       $F5
000836FD E701                       	dc.b	smpsNoAttack, $01
000836FF E10B                       	smpsAlterNote       $0B
00083701 E702                       	dc.b	smpsNoAttack, $02
00083703 E107                       	smpsAlterNote       $07
00083705 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008370B E106                       	smpsAlterNote       $06
0008370D 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00083713 E10C                       	smpsAlterNote       $0C
00083715 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008371D E109                       	smpsAlterNote       $09
0008371F 9E03                       	dc.b	nF2, $03
00083721 E10C                       	smpsAlterNote       $0C
00083723 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083727 E1EA                       	smpsAlterNote       $EA
00083729 A201                       	dc.b	nA2, $01
0008372B E106                       	smpsAlterNote       $06
0008372D E701                       	dc.b	smpsNoAttack, $01
0008372F E114                       	smpsAlterNote       $14
00083731 E701                       	dc.b	smpsNoAttack, $01
00083733 E1F0                       	smpsAlterNote       $F0
00083735 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083738 E10C                       	smpsAlterNote       $0C
0008373A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00083746 9703                       	dc.b	nBb1, $03
00083748 E116                       	smpsAlterNote       $16
0008374A 9C01                       	dc.b	nEb2, $01
0008374C E105                       	smpsAlterNote       $05
0008374E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00083751 E113                       	smpsAlterNote       $13
00083753 E701                       	dc.b	smpsNoAttack, $01
00083755 E1FF                       	smpsAlterNote       $FF
00083757 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008375A E109                       	smpsAlterNote       $09
0008375C E703                       	dc.b	smpsNoAttack, $03
0008375E E10C                       	smpsAlterNote       $0C
00083760 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008376C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083774 E109                       	smpsAlterNote       $09
00083776 9E03                       	dc.b	nF2, $03
00083778 E10C                       	smpsAlterNote       $0C
0008377A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008377E E1EA                       	smpsAlterNote       $EA
00083780 A201                       	dc.b	nA2, $01
00083782 E106                       	smpsAlterNote       $06
00083784 E701                       	dc.b	smpsNoAttack, $01
00083786 E1E2                       	smpsAlterNote       $E2
00083788 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008378B E1F0                       	smpsAlterNote       $F0
0008378D E701                       	dc.b	smpsNoAttack, $01
0008378F E10C                       	smpsAlterNote       $0C
00083791 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008379D E116                       	smpsAlterNote       $16
0008379F 9C01                       	dc.b	nEb2, $01
000837A1 E105                       	smpsAlterNote       $05
000837A3 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000837A6 E1F1                       	smpsAlterNote       $F1
000837A8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000837AB E1FF                       	smpsAlterNote       $FF
000837AD E701                       	dc.b	smpsNoAttack, $01
000837AF E109                       	smpsAlterNote       $09
000837B1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000837B5 E10C                       	smpsAlterNote       $0C
000837B7 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000837C3 E106                       	smpsAlterNote       $06
000837C5 9903                       	dc.b	nC2, $03
000837C7 E107                       	smpsAlterNote       $07
000837C9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000837CD E109                       	smpsAlterNote       $09
000837CF 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000837D5 E107                       	smpsAlterNote       $07
000837D7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000837DB E108                       	smpsAlterNote       $08
000837DD 9D03                       	dc.b	nE2, $03
000837DF E10B                       	smpsAlterNote       $0B
000837E1 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000837E7 E109                       	smpsAlterNote       $09
000837E9 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000837EF E10C                       	smpsAlterNote       $0C
000837F1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000837F7 E106                       	smpsAlterNote       $06
000837F9 9903                       	dc.b	nC2, $03
000837FB E11A                       	smpsAlterNote       $1A
000837FD A301                       	dc.b	nBb2, $01
000837FF E1F9                       	smpsAlterNote       $F9
00083801 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083804 E1FF                       	smpsAlterNote       $FF
00083806 E701                       	dc.b	smpsNoAttack, $01
00083808 E111                       	smpsAlterNote       $11
0008380A E701                       	dc.b	smpsNoAttack, $01
0008380C E106                       	smpsAlterNote       $06
0008380E E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00083815 E109                       	smpsAlterNote       $09
00083817 A003                       	dc.b	nG2, $03
00083819 E106                       	smpsAlterNote       $06
0008381B 9907                       	dc.b	nC2, $07
0008381D E107                       	smpsAlterNote       $07
0008381F 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00083827 E10B                       	smpsAlterNote       $0B
00083829 A203                       	dc.b	nA2, $03
0008382B E107                       	smpsAlterNote       $07
0008382D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083831 E1F2                       	smpsAlterNote       $F2
00083833 A401                       	dc.b	nB2, $01
00083835 E1F9                       	smpsAlterNote       $F9
00083837 E701                       	dc.b	smpsNoAttack, $01
00083839 E107                       	smpsAlterNote       $07
0008383B E701                       	dc.b	smpsNoAttack, $01
0008383D E1FB                       	smpsAlterNote       $FB
0008383F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083842 E106                       	smpsAlterNote       $06
00083844 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083848 E107                       	smpsAlterNote       $07
0008384A 9B03                       	dc.b	nD2, $03
0008384C E108                       	smpsAlterNote       $08
0008384E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00083854 E109                       	smpsAlterNote       $09
00083856 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008385A E1F2                       	smpsAlterNote       $F2
0008385C A401                       	dc.b	nB2, $01
0008385E E1F9                       	smpsAlterNote       $F9
00083860 E701                       	dc.b	smpsNoAttack, $01
00083862 E107                       	smpsAlterNote       $07
00083864 E701                       	dc.b	smpsNoAttack, $01
00083866 E1FB                       	smpsAlterNote       $FB
00083868 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008386B E106                       	smpsAlterNote       $06
0008386D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083871 E108                       	smpsAlterNote       $08
00083873 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00083877 E10C                       	smpsAlterNote       $0C
00083879 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008387D E107                       	smpsAlterNote       $07
0008387F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083885 E10B                       	smpsAlterNote       $0B
00083887 A203                       	dc.b	nA2, $03
00083889 E107                       	smpsAlterNote       $07
0008388B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008388F E1F2                       	smpsAlterNote       $F2
00083891 A401                       	dc.b	nB2, $01
00083893 E1FF                       	smpsAlterNote       $FF
00083895 E701                       	dc.b	smpsNoAttack, $01
00083897 E107                       	smpsAlterNote       $07
00083899 E701                       	dc.b	smpsNoAttack, $01
0008389B E1FB                       	smpsAlterNote       $FB
0008389D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000838A0 E106                       	smpsAlterNote       $06
000838A2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000838A6 E107                       	smpsAlterNote       $07
000838A8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000838AC E108                       	smpsAlterNote       $08
000838AE 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000838B4 E109                       	smpsAlterNote       $09
000838B6 A003 8001                  	dc.b	nG2, $03, nRst, $01
000838BA E1F2                       	smpsAlterNote       $F2
000838BC A401                       	dc.b	nB2, $01
000838BE E1FF                       	smpsAlterNote       $FF
000838C0 E701                       	dc.b	smpsNoAttack, $01
000838C2 E111                       	smpsAlterNote       $11
000838C4 E701                       	dc.b	smpsNoAttack, $01
000838C6 E1FB                       	smpsAlterNote       $FB
000838C8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000838CB E106                       	smpsAlterNote       $06
000838CD E702                       	dc.b	smpsNoAttack, $02
000838CF E108                       	smpsAlterNote       $08
000838D1 9C07                       	dc.b	nEb2, $07
000838D3 E10C                       	smpsAlterNote       $0C
000838D5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000838D9 E107                       	smpsAlterNote       $07
000838DB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000838E1 E10B                       	smpsAlterNote       $0B
000838E3 A202 8001                  	dc.b	nA2, $02, nRst, $01
000838E7 E107                       	smpsAlterNote       $07
000838E9 9B03                       	dc.b	nD2, $03
000838EB E11A                       	smpsAlterNote       $1A
000838ED A301                       	dc.b	nBb2, $01
000838EF E1F2                       	smpsAlterNote       $F2
000838F1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000838F4 E1FF                       	smpsAlterNote       $FF
000838F6 E701                       	dc.b	smpsNoAttack, $01
000838F8 E111                       	smpsAlterNote       $11
000838FA E701                       	dc.b	smpsNoAttack, $01
000838FC E106                       	smpsAlterNote       $06
000838FE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083901 E107                       	smpsAlterNote       $07
00083903 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083907 E108                       	smpsAlterNote       $08
00083909 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00083911 E109                       	smpsAlterNote       $09
00083913 A003                       	dc.b	nG2, $03
00083915 E11A                       	smpsAlterNote       $1A
00083917 A301                       	dc.b	nBb2, $01
00083919 E1F2                       	smpsAlterNote       $F2
0008391B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008391E E1FF                       	smpsAlterNote       $FF
00083920 E701                       	dc.b	smpsNoAttack, $01
00083922 E111                       	smpsAlterNote       $11
00083924 E701                       	dc.b	smpsNoAttack, $01
00083926 E106                       	smpsAlterNote       $06
00083928 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008392B E108                       	smpsAlterNote       $08
0008392D 9C07                       	dc.b	nEb2, $07
0008392F E10C                       	smpsAlterNote       $0C
00083931 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083935 E107                       	smpsAlterNote       $07
00083937 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00083943 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008394D E108                       	smpsAlterNote       $08
0008394F 9C06                       	dc.b	nEb2, $06
00083951 E10C                       	smpsAlterNote       $0C
00083953 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083957 E108                       	smpsAlterNote       $08
00083959 9C03                       	dc.b	nEb2, $03
0008395B E109                       	smpsAlterNote       $09
0008395D A003 8001                  	dc.b	nG2, $03, nRst, $01
00083961 E10C                       	smpsAlterNote       $0C
00083963 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008396B E107                       	smpsAlterNote       $07
0008396D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083971 F6F4 F8                    	smpsJump            music84_Jump04
00083974                            
00083974                            ; FM2 Data
00083974                            music84_FM2:
00083974 E0C0                       	smpsPan             panCenter, $00
00083978 E10B                       	smpsAlterNote       $0B
0008397A C603 8007                  	dc.b	nA5, $03, nRst, $07
0008397E E109                       	smpsAlterNote       $09
00083980 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00083984 E108                       	smpsAlterNote       $08
00083986 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008398C E080                       	smpsPan             panLeft, $00
0008398E E10C                       	smpsAlterNote       $0C
00083990 E6F9                       	smpsAlterVol        $F9
00083992 C703                       	dc.b	nBb5, $03
00083994 E10B                       	smpsAlterNote       $0B
00083996 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008399A E109                       	smpsAlterNote       $09
0008399C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000839A2 E108                       	smpsAlterNote       $08
000839A4 C103 8001                  	dc.b	nE5, $03, nRst, $01
000839A8 E106                       	smpsAlterNote       $06
000839AA BD03                       	dc.b	nC5, $03
000839AC E10B                       	smpsAlterNote       $0B
000839AE BA03 8001                  	dc.b	nA4, $03, nRst, $01
000839B4 E0C0                       	smpsPan             panCenter, $00
000839B6 E107                       	smpsAlterNote       $07
000839B8 E606                       	smpsAlterVol        $06
000839BA BF03                       	dc.b	nD5, $03
000839BC                            
000839BC                            music84_Jump03:
000839BC E108                       	smpsAlterNote       $08
000839BE C103 8001                  	dc.b	nE5, $03, nRst, $01
000839C2 E109                       	smpsAlterNote       $09
000839C4 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000839CA E10B                       	smpsAlterNote       $0B
000839CC C607                       	dc.b	nA5, $07
000839CE E107                       	smpsAlterNote       $07
000839D0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000839D4 E106                       	smpsAlterNote       $06
000839D6 C90D                       	dc.b	nC6, $0D
000839D8 E100                       	smpsAlterNote       $00
000839DA E701                       	dc.b	smpsNoAttack, $01
000839DC E1FF                       	smpsAlterNote       $FF
000839DE E701                       	dc.b	smpsNoAttack, $01
000839E0 E103                       	smpsAlterNote       $03
000839E2 E701                       	dc.b	smpsNoAttack, $01
000839E4 E109                       	smpsAlterNote       $09
000839E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000839EA E106                       	smpsAlterNote       $06
000839EC E701                       	dc.b	smpsNoAttack, $01
000839EE E100                       	smpsAlterNote       $00
000839F0 E701                       	dc.b	smpsNoAttack, $01
000839F2 E10C                       	smpsAlterNote       $0C
000839F4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000839F8 E10B                       	smpsAlterNote       $0B
000839FA C603                       	dc.b	nA5, $03
000839FC E109                       	smpsAlterNote       $09
000839FE C403 8001                  	dc.b	nG5, $03, nRst, $01
00083A02 E10B                       	smpsAlterNote       $0B
00083A04 C60D                       	dc.b	nA5, $0D
00083A06 E105                       	smpsAlterNote       $05
00083A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A0C E10B                       	smpsAlterNote       $0B
00083A0E E701                       	dc.b	smpsNoAttack, $01
00083A10 E10E                       	smpsAlterNote       $0E
00083A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A16 E108                       	smpsAlterNote       $08
00083A18 E701                       	dc.b	smpsNoAttack, $01
00083A1A E104                       	smpsAlterNote       $04
00083A1C E701                       	dc.b	smpsNoAttack, $01
00083A1E E105                       	smpsAlterNote       $05
00083A20 E701                       	dc.b	smpsNoAttack, $01
00083A22 E10B                       	smpsAlterNote       $0B
00083A24 E701                       	dc.b	smpsNoAttack, $01
00083A26 E10F                       	smpsAlterNote       $0F
00083A28 E701                       	dc.b	smpsNoAttack, $01
00083A2A E10B                       	smpsAlterNote       $0B
00083A2C E701                       	dc.b	smpsNoAttack, $01
00083A2E E108                       	smpsAlterNote       $08
00083A30 E701                       	dc.b	smpsNoAttack, $01
00083A32 E104                       	smpsAlterNote       $04
00083A34 E701                       	dc.b	smpsNoAttack, $01
00083A36 E108                       	smpsAlterNote       $08
00083A38 E701                       	dc.b	smpsNoAttack, $01
00083A3A E10E                       	smpsAlterNote       $0E
00083A3C E701                       	dc.b	smpsNoAttack, $01
00083A3E E10F                       	smpsAlterNote       $0F
00083A40 E701                       	dc.b	smpsNoAttack, $01
00083A42 E10B                       	smpsAlterNote       $0B
00083A44 E701                       	dc.b	smpsNoAttack, $01
00083A46 E105                       	smpsAlterNote       $05
00083A48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A4C E108                       	smpsAlterNote       $08
00083A4E E701                       	dc.b	smpsNoAttack, $01
00083A50 E10E                       	smpsAlterNote       $0E
00083A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A56 E108                       	smpsAlterNote       $08
00083A58 E701                       	dc.b	smpsNoAttack, $01
00083A5A E105                       	smpsAlterNote       $05
00083A5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A60 E10B                       	smpsAlterNote       $0B
00083A62 E701                       	dc.b	smpsNoAttack, $01
00083A64 E10F                       	smpsAlterNote       $0F
00083A66 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00083A6A E107                       	smpsAlterNote       $07
00083A6C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00083A70 E108                       	smpsAlterNote       $08
00083A72 C103                       	dc.b	nE5, $03
00083A74 E109                       	smpsAlterNote       $09
00083A76 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00083A7E E10B                       	smpsAlterNote       $0B
00083A80 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083A84 E107                       	smpsAlterNote       $07
00083A86 BF03                       	dc.b	nD5, $03
00083A88 E106                       	smpsAlterNote       $06
00083A8A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00083A8E E107                       	smpsAlterNote       $07
00083A90 CB03                       	dc.b	nD6, $03
00083A92 E10C                       	smpsAlterNote       $0C
00083A94 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00083A98 E10B                       	smpsAlterNote       $0B
00083A9A C604 8001                  	dc.b	nA5, $04, nRst, $01
00083A9E E109                       	smpsAlterNote       $09
00083AA0 C404                       	dc.b	nG5, $04
00083AA2 E10B                       	smpsAlterNote       $0B
00083AA4 C60D                       	dc.b	nA5, $0D
00083AA6 E108                       	smpsAlterNote       $08
00083AA8 E701                       	dc.b	smpsNoAttack, $01
00083AAA E104                       	smpsAlterNote       $04
00083AAC E701                       	dc.b	smpsNoAttack, $01
00083AAE E108                       	smpsAlterNote       $08
00083AB0 E701                       	dc.b	smpsNoAttack, $01
00083AB2 E10B                       	smpsAlterNote       $0B
00083AB4 E701                       	dc.b	smpsNoAttack, $01
00083AB6 E10F                       	smpsAlterNote       $0F
00083AB8 E701                       	dc.b	smpsNoAttack, $01
00083ABA E10B                       	smpsAlterNote       $0B
00083ABC E701                       	dc.b	smpsNoAttack, $01
00083ABE E105                       	smpsAlterNote       $05
00083AC0 E701                       	dc.b	smpsNoAttack, $01
00083AC2 E104                       	smpsAlterNote       $04
00083AC4 E701                       	dc.b	smpsNoAttack, $01
00083AC6 E108                       	smpsAlterNote       $08
00083AC8 E701                       	dc.b	smpsNoAttack, $01
00083ACA E10E                       	smpsAlterNote       $0E
00083ACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AD0 E10B                       	smpsAlterNote       $0B
00083AD2 E701                       	dc.b	smpsNoAttack, $01
00083AD4 E105                       	smpsAlterNote       $05
00083AD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083ADA E10B                       	smpsAlterNote       $0B
00083ADC E701                       	dc.b	smpsNoAttack, $01
00083ADE E10E                       	smpsAlterNote       $0E
00083AE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AE4 E108                       	smpsAlterNote       $08
00083AE6 E701                       	dc.b	smpsNoAttack, $01
00083AE8 E104                       	smpsAlterNote       $04
00083AEA E701                       	dc.b	smpsNoAttack, $01
00083AEC E105                       	smpsAlterNote       $05
00083AEE E701                       	dc.b	smpsNoAttack, $01
00083AF0 E10B                       	smpsAlterNote       $0B
00083AF2 E701                       	dc.b	smpsNoAttack, $01
00083AF4 E10F                       	smpsAlterNote       $0F
00083AF6 E701                       	dc.b	smpsNoAttack, $01
00083AF8 E10B                       	smpsAlterNote       $0B
00083AFA E701                       	dc.b	smpsNoAttack, $01
00083AFC E108                       	smpsAlterNote       $08
00083AFE E701                       	dc.b	smpsNoAttack, $01
00083B00 E105                       	smpsAlterNote       $05
00083B02 8001                       	dc.b	nRst, $01
00083B04 E109                       	smpsAlterNote       $09
00083B06 C401                       	dc.b	nG5, $01
00083B08 E10B                       	smpsAlterNote       $0B
00083B0A E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00083B13 E109                       	smpsAlterNote       $09
00083B15 C404 8001                  	dc.b	nG5, $04, nRst, $01
00083B19 E10B                       	smpsAlterNote       $0B
00083B1B C604 8001                  	dc.b	nA5, $04, nRst, $01
00083B1F E107                       	smpsAlterNote       $07
00083B21 BF0D                       	dc.b	nD5, $0D
00083B23 E101                       	smpsAlterNote       $01
00083B25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B29 E104                       	smpsAlterNote       $04
00083B2B E701                       	dc.b	smpsNoAttack, $01
00083B2D E10A                       	smpsAlterNote       $0A
00083B2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B33 E104                       	smpsAlterNote       $04
00083B35 E701                       	dc.b	smpsNoAttack, $01
00083B37 E101                       	smpsAlterNote       $01
00083B39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B3D E107                       	smpsAlterNote       $07
00083B3F E701                       	dc.b	smpsNoAttack, $01
00083B41 E10B                       	smpsAlterNote       $0B
00083B43 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083B47 E108                       	smpsAlterNote       $08
00083B49 C101                       	dc.b	nE5, $01
00083B4B E109                       	smpsAlterNote       $09
00083B4D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00083B52 E10B                       	smpsAlterNote       $0B
00083B54 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00083B5C E108                       	smpsAlterNote       $08
00083B5E CD06                       	dc.b	nE6, $06
00083B60 E109                       	smpsAlterNote       $09
00083B62 CE07                       	dc.b	nF6, $07
00083B64 E108                       	smpsAlterNote       $08
00083B66 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00083B6A E106                       	smpsAlterNote       $06
00083B6C C903                       	dc.b	nC6, $03
00083B6E E109                       	smpsAlterNote       $09
00083B70 C403 8001                  	dc.b	nG5, $03, nRst, $01
00083B74 E10C                       	smpsAlterNote       $0C
00083B76 C70D                       	dc.b	nBb5, $0D
00083B78 E106                       	smpsAlterNote       $06
00083B7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B7E E109                       	smpsAlterNote       $09
00083B80 E701                       	dc.b	smpsNoAttack, $01
00083B82 E10F                       	smpsAlterNote       $0F
00083B84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B88 E109                       	smpsAlterNote       $09
00083B8A E701                       	dc.b	smpsNoAttack, $01
00083B8C E106                       	smpsAlterNote       $06
00083B8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B92 E10C                       	smpsAlterNote       $0C
00083B94 E701                       	dc.b	smpsNoAttack, $01
00083B96 E110                       	smpsAlterNote       $10
00083B98 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083B9C E10B                       	smpsAlterNote       $0B
00083B9E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00083BA2 E105                       	smpsAlterNote       $05
00083BA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BA8 E10B                       	smpsAlterNote       $0B
00083BAA E701                       	dc.b	smpsNoAttack, $01
00083BAC E10E                       	smpsAlterNote       $0E
00083BAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BB2 E108                       	smpsAlterNote       $08
00083BB4 E701                       	dc.b	smpsNoAttack, $01
00083BB6 E104                       	smpsAlterNote       $04
00083BB8 E701                       	dc.b	smpsNoAttack, $01
00083BBA E105                       	smpsAlterNote       $05
00083BBC E701                       	dc.b	smpsNoAttack, $01
00083BBE E10B                       	smpsAlterNote       $0B
00083BC0 E701                       	dc.b	smpsNoAttack, $01
00083BC2 E10F                       	smpsAlterNote       $0F
00083BC4 E701                       	dc.b	smpsNoAttack, $01
00083BC6 E10B                       	smpsAlterNote       $0B
00083BC8 E701                       	dc.b	smpsNoAttack, $01
00083BCA E108                       	smpsAlterNote       $08
00083BCC E701                       	dc.b	smpsNoAttack, $01
00083BCE E104                       	smpsAlterNote       $04
00083BD0 E701                       	dc.b	smpsNoAttack, $01
00083BD2 E108                       	smpsAlterNote       $08
00083BD4 E701                       	dc.b	smpsNoAttack, $01
00083BD6 E10E                       	smpsAlterNote       $0E
00083BD8 E701                       	dc.b	smpsNoAttack, $01
00083BDA E10F                       	smpsAlterNote       $0F
00083BDC E701                       	dc.b	smpsNoAttack, $01
00083BDE E10B                       	smpsAlterNote       $0B
00083BE0 E701                       	dc.b	smpsNoAttack, $01
00083BE2 E105                       	smpsAlterNote       $05
00083BE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BE8 E108                       	smpsAlterNote       $08
00083BEA E701                       	dc.b	smpsNoAttack, $01
00083BEC E10E                       	smpsAlterNote       $0E
00083BEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BF2 E108                       	smpsAlterNote       $08
00083BF4 E701                       	dc.b	smpsNoAttack, $01
00083BF6 E105                       	smpsAlterNote       $05
00083BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BFC E10B                       	smpsAlterNote       $0B
00083BFE E701                       	dc.b	smpsNoAttack, $01
00083C00 E10F                       	smpsAlterNote       $0F
00083C02 E701                       	dc.b	smpsNoAttack, $01
00083C04 E10E                       	smpsAlterNote       $0E
00083C06 E701                       	dc.b	smpsNoAttack, $01
00083C08 E108                       	smpsAlterNote       $08
00083C0A E701                       	dc.b	smpsNoAttack, $01
00083C0C E104                       	smpsAlterNote       $04
00083C0E E701                       	dc.b	smpsNoAttack, $01
00083C10 E108                       	smpsAlterNote       $08
00083C12 E701                       	dc.b	smpsNoAttack, $01
00083C14 E10E                       	smpsAlterNote       $0E
00083C16 E701                       	dc.b	smpsNoAttack, $01
00083C18 E10F                       	smpsAlterNote       $0F
00083C1A E701                       	dc.b	smpsNoAttack, $01
00083C1C E10B                       	smpsAlterNote       $0B
00083C1E E701                       	dc.b	smpsNoAttack, $01
00083C20 E105                       	smpsAlterNote       $05
00083C22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C26 E108                       	smpsAlterNote       $08
00083C28 E701                       	dc.b	smpsNoAttack, $01
00083C2A E10E                       	smpsAlterNote       $0E
00083C2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C30 E108                       	smpsAlterNote       $08
00083C32 E701                       	dc.b	smpsNoAttack, $01
00083C34 E105                       	smpsAlterNote       $05
00083C36 E701                       	dc.b	smpsNoAttack, $01
00083C38 E10B                       	smpsAlterNote       $0B
00083C3A C60D                       	dc.b	nA5, $0D
00083C3C E108                       	smpsAlterNote       $08
00083C3E E701                       	dc.b	smpsNoAttack, $01
00083C40 E104                       	smpsAlterNote       $04
00083C42 E701                       	dc.b	smpsNoAttack, $01
00083C44 E105                       	smpsAlterNote       $05
00083C46 E701                       	dc.b	smpsNoAttack, $01
00083C48 E10B                       	smpsAlterNote       $0B
00083C4A E701                       	dc.b	smpsNoAttack, $01
00083C4C E10F                       	smpsAlterNote       $0F
00083C4E E701                       	dc.b	smpsNoAttack, $01
00083C50 E10B                       	smpsAlterNote       $0B
00083C52 E701                       	dc.b	smpsNoAttack, $01
00083C54 E108                       	smpsAlterNote       $08
00083C56 E701                       	dc.b	smpsNoAttack, $01
00083C58 E104                       	smpsAlterNote       $04
00083C5A E701                       	dc.b	smpsNoAttack, $01
00083C5C E108                       	smpsAlterNote       $08
00083C5E E701                       	dc.b	smpsNoAttack, $01
00083C60 E10E                       	smpsAlterNote       $0E
00083C62 E701                       	dc.b	smpsNoAttack, $01
00083C64 E10F                       	smpsAlterNote       $0F
00083C66 E701                       	dc.b	smpsNoAttack, $01
00083C6A E109                       	smpsAlterNote       $09
00083C6C E6FF                       	smpsAlterVol        $FF
00083C6E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00083C78 E108                       	smpsAlterNote       $08
00083C7A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00083C80 E107                       	smpsAlterNote       $07
00083C82 E601                       	smpsAlterVol        $01
00083C84 BF03                       	dc.b	nD5, $03
00083C86 E108                       	smpsAlterNote       $08
00083C88 C103 8001                  	dc.b	nE5, $03, nRst, $01
00083C8C E109                       	smpsAlterNote       $09
00083C8E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00083C94 E10B                       	smpsAlterNote       $0B
00083C96 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083C9A E107                       	smpsAlterNote       $07
00083C9C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083CA0 E106                       	smpsAlterNote       $06
00083CA2 C90D                       	dc.b	nC6, $0D
00083CA4 E103                       	smpsAlterNote       $03
00083CA6 E701                       	dc.b	smpsNoAttack, $01
00083CA8 E1FF                       	smpsAlterNote       $FF
00083CAA E701                       	dc.b	smpsNoAttack, $01
00083CAC E103                       	smpsAlterNote       $03
00083CAE E701                       	dc.b	smpsNoAttack, $01
00083CB0 E109                       	smpsAlterNote       $09
00083CB2 E701                       	dc.b	smpsNoAttack, $01
00083CB4 E10A                       	smpsAlterNote       $0A
00083CB6 E701                       	dc.b	smpsNoAttack, $01
00083CB8 E106                       	smpsAlterNote       $06
00083CBA E701                       	dc.b	smpsNoAttack, $01
00083CBC E100                       	smpsAlterNote       $00
00083CBE E701                       	dc.b	smpsNoAttack, $01
00083CC0 E10C                       	smpsAlterNote       $0C
00083CC2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00083CC6 E10B                       	smpsAlterNote       $0B
00083CC8 C603                       	dc.b	nA5, $03
00083CCA E109                       	smpsAlterNote       $09
00083CCC C403 8001                  	dc.b	nG5, $03, nRst, $01
00083CD0 E10B                       	smpsAlterNote       $0B
00083CD2 C60D                       	dc.b	nA5, $0D
00083CD4 E105                       	smpsAlterNote       $05
00083CD6 E701                       	dc.b	smpsNoAttack, $01
00083CD8 E104                       	smpsAlterNote       $04
00083CDA E701                       	dc.b	smpsNoAttack, $01
00083CDC E108                       	smpsAlterNote       $08
00083CDE E701                       	dc.b	smpsNoAttack, $01
00083CE0 E10E                       	smpsAlterNote       $0E
00083CE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CE6 E10B                       	smpsAlterNote       $0B
00083CE8 E701                       	dc.b	smpsNoAttack, $01
00083CEA E105                       	smpsAlterNote       $05
00083CEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CF0 E10B                       	smpsAlterNote       $0B
00083CF2 E701                       	dc.b	smpsNoAttack, $01
00083CF4 E10E                       	smpsAlterNote       $0E
00083CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CFA E108                       	smpsAlterNote       $08
00083CFC E701                       	dc.b	smpsNoAttack, $01
00083CFE E104                       	smpsAlterNote       $04
00083D00 E701                       	dc.b	smpsNoAttack, $01
00083D02 E105                       	smpsAlterNote       $05
00083D04 E701                       	dc.b	smpsNoAttack, $01
00083D06 E10B                       	smpsAlterNote       $0B
00083D08 E701                       	dc.b	smpsNoAttack, $01
00083D0A E10F                       	smpsAlterNote       $0F
00083D0C E701                       	dc.b	smpsNoAttack, $01
00083D0E E10B                       	smpsAlterNote       $0B
00083D10 E701                       	dc.b	smpsNoAttack, $01
00083D12 E108                       	smpsAlterNote       $08
00083D14 E701                       	dc.b	smpsNoAttack, $01
00083D16 E104                       	smpsAlterNote       $04
00083D18 E701                       	dc.b	smpsNoAttack, $01
00083D1A E108                       	smpsAlterNote       $08
00083D1C E701                       	dc.b	smpsNoAttack, $01
00083D1E E10E                       	smpsAlterNote       $0E
00083D20 E701                       	dc.b	smpsNoAttack, $01
00083D22 E10F                       	smpsAlterNote       $0F
00083D24 E701                       	dc.b	smpsNoAttack, $01
00083D26 E10B                       	smpsAlterNote       $0B
00083D28 E701                       	dc.b	smpsNoAttack, $01
00083D2A E105                       	smpsAlterNote       $05
00083D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D30 E108                       	smpsAlterNote       $08
00083D32 E701                       	dc.b	smpsNoAttack, $01
00083D34 E10E                       	smpsAlterNote       $0E
00083D36 E701                       	dc.b	smpsNoAttack, $01
00083D38 E10F                       	smpsAlterNote       $0F
00083D3A 800F                       	dc.b	nRst, $0F
00083D3C E107                       	smpsAlterNote       $07
00083D3E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083D42 E108                       	smpsAlterNote       $08
00083D44 C103                       	dc.b	nE5, $03
00083D46 E109                       	smpsAlterNote       $09
00083D48 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00083D4E E10B                       	smpsAlterNote       $0B
00083D50 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083D54 E107                       	smpsAlterNote       $07
00083D56 BF03                       	dc.b	nD5, $03
00083D58 E106                       	smpsAlterNote       $06
00083D5A C90E                       	dc.b	nC6, $0E
00083D5C E107                       	smpsAlterNote       $07
00083D5E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00083D62 E10C                       	smpsAlterNote       $0C
00083D64 C704                       	dc.b	nBb5, $04
00083D66 E10B                       	smpsAlterNote       $0B
00083D68 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083D6C E109                       	smpsAlterNote       $09
00083D6E C404                       	dc.b	nG5, $04
00083D70 E10B                       	smpsAlterNote       $0B
00083D72 C60D                       	dc.b	nA5, $0D
00083D74 E108                       	smpsAlterNote       $08
00083D76 E701                       	dc.b	smpsNoAttack, $01
00083D78 E105                       	smpsAlterNote       $05
00083D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D7E E10B                       	smpsAlterNote       $0B
00083D80 E701                       	dc.b	smpsNoAttack, $01
00083D82 E10F                       	smpsAlterNote       $0F
00083D84 E701                       	dc.b	smpsNoAttack, $01
00083D86 E10E                       	smpsAlterNote       $0E
00083D88 E701                       	dc.b	smpsNoAttack, $01
00083D8A E108                       	smpsAlterNote       $08
00083D8C E701                       	dc.b	smpsNoAttack, $01
00083D8E E104                       	smpsAlterNote       $04
00083D90 E701                       	dc.b	smpsNoAttack, $01
00083D92 E108                       	smpsAlterNote       $08
00083D94 E701                       	dc.b	smpsNoAttack, $01
00083D96 E10B                       	smpsAlterNote       $0B
00083D98 E701                       	dc.b	smpsNoAttack, $01
00083D9A E10F                       	smpsAlterNote       $0F
00083D9C E701                       	dc.b	smpsNoAttack, $01
00083D9E E10B                       	smpsAlterNote       $0B
00083DA0 E701                       	dc.b	smpsNoAttack, $01
00083DA2 E105                       	smpsAlterNote       $05
00083DA4 E701                       	dc.b	smpsNoAttack, $01
00083DA6 E104                       	smpsAlterNote       $04
00083DA8 E701                       	dc.b	smpsNoAttack, $01
00083DAA E108                       	smpsAlterNote       $08
00083DAC E701                       	dc.b	smpsNoAttack, $01
00083DAE E10E                       	smpsAlterNote       $0E
00083DB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DB4 E10B                       	smpsAlterNote       $0B
00083DB6 E701                       	dc.b	smpsNoAttack, $01
00083DB8 E105                       	smpsAlterNote       $05
00083DBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DBE E10B                       	smpsAlterNote       $0B
00083DC0 E701                       	dc.b	smpsNoAttack, $01
00083DC2 E10E                       	smpsAlterNote       $0E
00083DC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DC8 E108                       	smpsAlterNote       $08
00083DCA E701                       	dc.b	smpsNoAttack, $01
00083DCC E105                       	smpsAlterNote       $05
00083DCE 8001                       	dc.b	nRst, $01
00083DD0 E109                       	smpsAlterNote       $09
00083DD2 C402                       	dc.b	nG5, $02
00083DD4 E10B                       	smpsAlterNote       $0B
00083DD6 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00083DDF E109                       	smpsAlterNote       $09
00083DE1 C404                       	dc.b	nG5, $04
00083DE3 E10B                       	smpsAlterNote       $0B
00083DE5 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083DE9 E107                       	smpsAlterNote       $07
00083DEB BF0D                       	dc.b	nD5, $0D
00083DED E101                       	smpsAlterNote       $01
00083DEF E701                       	dc.b	smpsNoAttack, $01
00083DF1 E100                       	smpsAlterNote       $00
00083DF3 E701                       	dc.b	smpsNoAttack, $01
00083DF5 E104                       	smpsAlterNote       $04
00083DF7 E701                       	dc.b	smpsNoAttack, $01
00083DF9 E10A                       	smpsAlterNote       $0A
00083DFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DFF E107                       	smpsAlterNote       $07
00083E01 E701                       	dc.b	smpsNoAttack, $01
00083E03 E101                       	smpsAlterNote       $01
00083E05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E09 E107                       	smpsAlterNote       $07
00083E0B E701                       	dc.b	smpsNoAttack, $01
00083E0D E10A                       	smpsAlterNote       $0A
00083E0F E701                       	dc.b	smpsNoAttack, $01
00083E11 E10B                       	smpsAlterNote       $0B
00083E13 8001                       	dc.b	nRst, $01
00083E15 E108                       	smpsAlterNote       $08
00083E17 C101                       	dc.b	nE5, $01
00083E19 E109                       	smpsAlterNote       $09
00083E1B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00083E20 E10B                       	smpsAlterNote       $0B
00083E22 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00083E2A E108                       	smpsAlterNote       $08
00083E2C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00083E30 E109                       	smpsAlterNote       $09
00083E32 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00083E36 E108                       	smpsAlterNote       $08
00083E38 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00083E3C E106                       	smpsAlterNote       $06
00083E3E C903                       	dc.b	nC6, $03
00083E40 E109                       	smpsAlterNote       $09
00083E42 C403 8001                  	dc.b	nG5, $03, nRst, $01
00083E46 E10C                       	smpsAlterNote       $0C
00083E48 C70D                       	dc.b	nBb5, $0D
00083E4A E109                       	smpsAlterNote       $09
00083E4C E701                       	dc.b	smpsNoAttack, $01
00083E4E E105                       	smpsAlterNote       $05
00083E50 E701                       	dc.b	smpsNoAttack, $01
00083E52 E109                       	smpsAlterNote       $09
00083E54 E701                       	dc.b	smpsNoAttack, $01
00083E56 E10F                       	smpsAlterNote       $0F
00083E58 E701                       	dc.b	smpsNoAttack, $01
00083E5A E110                       	smpsAlterNote       $10
00083E5C E701                       	dc.b	smpsNoAttack, $01
00083E5E E10C                       	smpsAlterNote       $0C
00083E60 E701                       	dc.b	smpsNoAttack, $01
00083E62 E106                       	smpsAlterNote       $06
00083E64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E68 E109                       	smpsAlterNote       $09
00083E6A E701                       	dc.b	smpsNoAttack, $01
00083E6C E10F                       	smpsAlterNote       $0F
00083E6E E701                       	dc.b	smpsNoAttack, $01
00083E70 E110                       	smpsAlterNote       $10
00083E72 8001                       	dc.b	nRst, $01
00083E74 E10B                       	smpsAlterNote       $0B
00083E76 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00083E7C E105                       	smpsAlterNote       $05
00083E7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E82 E108                       	smpsAlterNote       $08
00083E84 E701                       	dc.b	smpsNoAttack, $01
00083E86 E10E                       	smpsAlterNote       $0E
00083E88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E8C E108                       	smpsAlterNote       $08
00083E8E E701                       	dc.b	smpsNoAttack, $01
00083E90 E105                       	smpsAlterNote       $05
00083E92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E96 E10B                       	smpsAlterNote       $0B
00083E98 E701                       	dc.b	smpsNoAttack, $01
00083E9A E10F                       	smpsAlterNote       $0F
00083E9C E701                       	dc.b	smpsNoAttack, $01
00083E9E E10E                       	smpsAlterNote       $0E
00083EA0 E701                       	dc.b	smpsNoAttack, $01
00083EA2 E108                       	smpsAlterNote       $08
00083EA4 E701                       	dc.b	smpsNoAttack, $01
00083EA6 E104                       	smpsAlterNote       $04
00083EA8 E701                       	dc.b	smpsNoAttack, $01
00083EAA E108                       	smpsAlterNote       $08
00083EAC E701                       	dc.b	smpsNoAttack, $01
00083EAE E10B                       	smpsAlterNote       $0B
00083EB0 E701                       	dc.b	smpsNoAttack, $01
00083EB2 E10F                       	smpsAlterNote       $0F
00083EB4 E701                       	dc.b	smpsNoAttack, $01
00083EB6 E10B                       	smpsAlterNote       $0B
00083EB8 E701                       	dc.b	smpsNoAttack, $01
00083EBA E105                       	smpsAlterNote       $05
00083EBC E701                       	dc.b	smpsNoAttack, $01
00083EBE E104                       	smpsAlterNote       $04
00083EC0 E701                       	dc.b	smpsNoAttack, $01
00083EC2 E108                       	smpsAlterNote       $08
00083EC4 E701                       	dc.b	smpsNoAttack, $01
00083EC6 E10E                       	smpsAlterNote       $0E
00083EC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083ECC E10B                       	smpsAlterNote       $0B
00083ECE E701                       	dc.b	smpsNoAttack, $01
00083ED0 E105                       	smpsAlterNote       $05
00083ED2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083ED6 E10B                       	smpsAlterNote       $0B
00083ED8 E701                       	dc.b	smpsNoAttack, $01
00083EDA E10E                       	smpsAlterNote       $0E
00083EDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EE0 E108                       	smpsAlterNote       $08
00083EE2 E701                       	dc.b	smpsNoAttack, $01
00083EE4 E104                       	smpsAlterNote       $04
00083EE6 E701                       	dc.b	smpsNoAttack, $01
00083EE8 E105                       	smpsAlterNote       $05
00083EEA E701                       	dc.b	smpsNoAttack, $01
00083EEC E10B                       	smpsAlterNote       $0B
00083EEE E701                       	dc.b	smpsNoAttack, $01
00083EF0 E10F                       	smpsAlterNote       $0F
00083EF2 E701                       	dc.b	smpsNoAttack, $01
00083EF4 E10B                       	smpsAlterNote       $0B
00083EF6 E701                       	dc.b	smpsNoAttack, $01
00083EF8 E108                       	smpsAlterNote       $08
00083EFA E701                       	dc.b	smpsNoAttack, $01
00083EFC E104                       	smpsAlterNote       $04
00083EFE E701                       	dc.b	smpsNoAttack, $01
00083F00 E108                       	smpsAlterNote       $08
00083F02 E701                       	dc.b	smpsNoAttack, $01
00083F04 E10E                       	smpsAlterNote       $0E
00083F06 E701                       	dc.b	smpsNoAttack, $01
00083F08 E10F                       	smpsAlterNote       $0F
00083F0A E701                       	dc.b	smpsNoAttack, $01
00083F0C E10B                       	smpsAlterNote       $0B
00083F0E E701                       	dc.b	smpsNoAttack, $01
00083F10 E105                       	smpsAlterNote       $05
00083F12 E701                       	dc.b	smpsNoAttack, $01
00083F14 E10B                       	smpsAlterNote       $0B
00083F16 C60E                       	dc.b	nA5, $0E
00083F18 E105                       	smpsAlterNote       $05
00083F1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F1E E10B                       	smpsAlterNote       $0B
00083F20 E701                       	dc.b	smpsNoAttack, $01
00083F22 E10E                       	smpsAlterNote       $0E
00083F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F28 E108                       	smpsAlterNote       $08
00083F2A E701                       	dc.b	smpsNoAttack, $01
00083F2C E104                       	smpsAlterNote       $04
00083F2E E701                       	dc.b	smpsNoAttack, $01
00083F30 E105                       	smpsAlterNote       $05
00083F32 E701                       	dc.b	smpsNoAttack, $01
00083F34 E10B                       	smpsAlterNote       $0B
00083F36 E701                       	dc.b	smpsNoAttack, $01
00083F38 E10F                       	smpsAlterNote       $0F
00083F3A E701                       	dc.b	smpsNoAttack, $01
00083F3C E10B                       	smpsAlterNote       $0B
00083F3E E701                       	dc.b	smpsNoAttack, $01
00083F40 E108                       	smpsAlterNote       $08
00083F42 E701                       	dc.b	smpsNoAttack, $01
00083F44 E104                       	smpsAlterNote       $04
00083F46 E701                       	dc.b	smpsNoAttack, $01
00083F48 E108                       	smpsAlterNote       $08
00083F4A E701                       	dc.b	smpsNoAttack, $01
00083F4C E10E                       	smpsAlterNote       $0E
00083F4E E701                       	dc.b	smpsNoAttack, $01
00083F50 E10F                       	smpsAlterNote       $0F
00083F52 E701                       	dc.b	smpsNoAttack, $01
00083F54 E10B                       	smpsAlterNote       $0B
00083F56 E701                       	dc.b	smpsNoAttack, $01
00083F58 E105                       	smpsAlterNote       $05
00083F5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F5E E108                       	smpsAlterNote       $08
00083F60 E701                       	dc.b	smpsNoAttack, $01
00083F62 E10E                       	smpsAlterNote       $0E
00083F64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F68 E108                       	smpsAlterNote       $08
00083F6A E701                       	dc.b	smpsNoAttack, $01
00083F6C E105                       	smpsAlterNote       $05
00083F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F72 E10B                       	smpsAlterNote       $0B
00083F74 E701                       	dc.b	smpsNoAttack, $01
00083F76 E10F                       	smpsAlterNote       $0F
00083F78 E701                       	dc.b	smpsNoAttack, $01
00083F7A E10E                       	smpsAlterNote       $0E
00083F7C E701                       	dc.b	smpsNoAttack, $01
00083F7E E108                       	smpsAlterNote       $08
00083F80 E701                       	dc.b	smpsNoAttack, $01
00083F82 E104                       	smpsAlterNote       $04
00083F84 E701                       	dc.b	smpsNoAttack, $01
00083F86 E108                       	smpsAlterNote       $08
00083F88 E701                       	dc.b	smpsNoAttack, $01
00083F8A E10E                       	smpsAlterNote       $0E
00083F8C E701                       	dc.b	smpsNoAttack, $01
00083F8E E10F                       	smpsAlterNote       $0F
00083F90 E701                       	dc.b	smpsNoAttack, $01
00083F92 E10B                       	smpsAlterNote       $0B
00083F94 E701                       	dc.b	smpsNoAttack, $01
00083F96 E105                       	smpsAlterNote       $05
00083F98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F9C E108                       	smpsAlterNote       $08
00083F9E E701                       	dc.b	smpsNoAttack, $01
00083FA0 E10E                       	smpsAlterNote       $0E
00083FA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FA6 E108                       	smpsAlterNote       $08
00083FA8 E701                       	dc.b	smpsNoAttack, $01
00083FAA E105                       	smpsAlterNote       $05
00083FAC E701                       	dc.b	smpsNoAttack, $01
00083FB0 E10B                       	smpsAlterNote       $0B
00083FB2 E6FD                       	smpsAlterVol        $FD
00083FB4 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083FB8 E109                       	smpsAlterNote       $09
00083FBA C404                       	dc.b	nG5, $04
00083FBC E10B                       	smpsAlterNote       $0B
00083FBE C604 8001                  	dc.b	nA5, $04, nRst, $01
00083FC2 E107                       	smpsAlterNote       $07
00083FC4 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00083FCA E10B                       	smpsAlterNote       $0B
00083FCC C604                       	dc.b	nA5, $04
00083FCE E109                       	smpsAlterNote       $09
00083FD0 C404 8001                  	dc.b	nG5, $04, nRst, $01
00083FD4 E10B                       	smpsAlterNote       $0B
00083FD6 C604                       	dc.b	nA5, $04
00083FD8 E108                       	smpsAlterNote       $08
00083FDA C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00083FE2 E106                       	smpsAlterNote       $06
00083FE4 C904 8001                  	dc.b	nC6, $04, nRst, $01
00083FE8 E10C                       	smpsAlterNote       $0C
00083FEA C704                       	dc.b	nBb5, $04
00083FEC E10B                       	smpsAlterNote       $0B
00083FEE C604 8001                  	dc.b	nA5, $04, nRst, $01
00083FF2 E109                       	smpsAlterNote       $09
00083FF4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00083FFE E10B                       	smpsAlterNote       $0B
00084000 C60D                       	dc.b	nA5, $0D
00084002 E108                       	smpsAlterNote       $08
00084004 E701                       	dc.b	smpsNoAttack, $01
00084006 E104                       	smpsAlterNote       $04
00084008 E701                       	dc.b	smpsNoAttack, $01
0008400A E108                       	smpsAlterNote       $08
0008400C E701                       	dc.b	smpsNoAttack, $01
0008400E E10E                       	smpsAlterNote       $0E
00084010 E701                       	dc.b	smpsNoAttack, $01
00084012 E10F                       	smpsAlterNote       $0F
00084014 E701                       	dc.b	smpsNoAttack, $01
00084016 E10B                       	smpsAlterNote       $0B
00084018 E701                       	dc.b	smpsNoAttack, $01
0008401A E105                       	smpsAlterNote       $05
0008401C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084020 E108                       	smpsAlterNote       $08
00084022 E701                       	dc.b	smpsNoAttack, $01
00084024 E10E                       	smpsAlterNote       $0E
00084026 E701                       	dc.b	smpsNoAttack, $01
00084028 E10F                       	smpsAlterNote       $0F
0008402A 8001                       	dc.b	nRst, $01
0008402C E109                       	smpsAlterNote       $09
0008402E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00084034 E108                       	smpsAlterNote       $08
00084036 C10D                       	dc.b	nE5, $0D
00084038 E102                       	smpsAlterNote       $02
0008403A E701                       	dc.b	smpsNoAttack, $01
0008403C E101                       	smpsAlterNote       $01
0008403E E701                       	dc.b	smpsNoAttack, $01
00084040 E105                       	smpsAlterNote       $05
00084042 E701                       	dc.b	smpsNoAttack, $01
00084044 E10B                       	smpsAlterNote       $0B
00084046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008404A E108                       	smpsAlterNote       $08
0008404C E701                       	dc.b	smpsNoAttack, $01
0008404E E102                       	smpsAlterNote       $02
00084050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084054 E108                       	smpsAlterNote       $08
00084056 E701                       	dc.b	smpsNoAttack, $01
00084058 E10B                       	smpsAlterNote       $0B
0008405A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008405E E105                       	smpsAlterNote       $05
00084060 E701                       	dc.b	smpsNoAttack, $01
00084062 E101                       	smpsAlterNote       $01
00084064 E701                       	dc.b	smpsNoAttack, $01
00084066 E102                       	smpsAlterNote       $02
00084068 E701                       	dc.b	smpsNoAttack, $01
0008406A E108                       	smpsAlterNote       $08
0008406C E701                       	dc.b	smpsNoAttack, $01
0008406E E10C                       	smpsAlterNote       $0C
00084070 E701                       	dc.b	smpsNoAttack, $01
00084072 E108                       	smpsAlterNote       $08
00084074 E701                       	dc.b	smpsNoAttack, $01
00084076 E105                       	smpsAlterNote       $05
00084078 E701                       	dc.b	smpsNoAttack, $01
0008407A E101                       	smpsAlterNote       $01
0008407C E701                       	dc.b	smpsNoAttack, $01
0008407E E105                       	smpsAlterNote       $05
00084080 E701                       	dc.b	smpsNoAttack, $01
00084082 E10B                       	smpsAlterNote       $0B
00084084 E701                       	dc.b	smpsNoAttack, $01
00084086 E10C                       	smpsAlterNote       $0C
00084088 E701                       	dc.b	smpsNoAttack, $01
0008408A E108                       	smpsAlterNote       $08
0008408C E701                       	dc.b	smpsNoAttack, $01
0008408E E102                       	smpsAlterNote       $02
00084090 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084094 E105                       	smpsAlterNote       $05
00084096 E701                       	dc.b	smpsNoAttack, $01
00084098 E10B                       	smpsAlterNote       $0B
0008409A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008409E E105                       	smpsAlterNote       $05
000840A0 E701                       	dc.b	smpsNoAttack, $01
000840A2 E102                       	smpsAlterNote       $02
000840A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840A8 E108                       	smpsAlterNote       $08
000840AA E701                       	dc.b	smpsNoAttack, $01
000840AC E10C                       	smpsAlterNote       $0C
000840AE E701                       	dc.b	smpsNoAttack, $01
000840B0 E10B                       	smpsAlterNote       $0B
000840B2 E701                       	dc.b	smpsNoAttack, $01
000840B4 E105                       	smpsAlterNote       $05
000840B6 E701                       	dc.b	smpsNoAttack, $01
000840B8 E101                       	smpsAlterNote       $01
000840BA E701                       	dc.b	smpsNoAttack, $01
000840BC E105                       	smpsAlterNote       $05
000840BE E701                       	dc.b	smpsNoAttack, $01
000840C0 E108                       	smpsAlterNote       $08
000840C2 E701                       	dc.b	smpsNoAttack, $01
000840C4 E10C                       	smpsAlterNote       $0C
000840C6 E701                       	dc.b	smpsNoAttack, $01
000840C8 E108                       	smpsAlterNote       $08
000840CA E701                       	dc.b	smpsNoAttack, $01
000840CC E102                       	smpsAlterNote       $02
000840CE E701                       	dc.b	smpsNoAttack, $01
000840D0 E101                       	smpsAlterNote       $01
000840D2 E701                       	dc.b	smpsNoAttack, $01
000840D4 E105                       	smpsAlterNote       $05
000840D6 E701                       	dc.b	smpsNoAttack, $01
000840D8 E10B                       	smpsAlterNote       $0B
000840DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840DE E108                       	smpsAlterNote       $08
000840E0 E701                       	dc.b	smpsNoAttack, $01
000840E2 E102                       	smpsAlterNote       $02
000840E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840E8 E108                       	smpsAlterNote       $08
000840EA E701                       	dc.b	smpsNoAttack, $01
000840EC E10B                       	smpsAlterNote       $0B
000840EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840F2 E105                       	smpsAlterNote       $05
000840F4 E701                       	dc.b	smpsNoAttack, $01
000840F6 E101                       	smpsAlterNote       $01
000840F8 E701                       	dc.b	smpsNoAttack, $01
000840FA E102                       	smpsAlterNote       $02
000840FC E701                       	dc.b	smpsNoAttack, $01
000840FE E108                       	smpsAlterNote       $08
00084100 E701                       	dc.b	smpsNoAttack, $01
00084102 E10C                       	smpsAlterNote       $0C
00084104 E701                       	dc.b	smpsNoAttack, $01
00084106 E108                       	smpsAlterNote       $08
00084108 E701                       	dc.b	smpsNoAttack, $01
0008410A E105                       	smpsAlterNote       $05
0008410C E701                       	dc.b	smpsNoAttack, $01
0008410E E101                       	smpsAlterNote       $01
00084110 E701                       	dc.b	smpsNoAttack, $01
00084112 E105                       	smpsAlterNote       $05
00084114 E701                       	dc.b	smpsNoAttack, $01
00084116 E10B                       	smpsAlterNote       $0B
00084118 E701                       	dc.b	smpsNoAttack, $01
0008411A E10C                       	smpsAlterNote       $0C
0008411C E701                       	dc.b	smpsNoAttack, $01
0008411E E108                       	smpsAlterNote       $08
00084120 E701                       	dc.b	smpsNoAttack, $01
00084122 E102                       	smpsAlterNote       $02
00084124 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084128 E105                       	smpsAlterNote       $05
0008412A E701                       	dc.b	smpsNoAttack, $01
0008412C E10B                       	smpsAlterNote       $0B
0008412E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084132 E105                       	smpsAlterNote       $05
00084134 E701                       	dc.b	smpsNoAttack, $01
00084136 E101                       	smpsAlterNote       $01
00084138 E701                       	dc.b	smpsNoAttack, $01
0008413A E102                       	smpsAlterNote       $02
0008413C E701                       	dc.b	smpsNoAttack, $01
0008413E E108                       	smpsAlterNote       $08
00084140 E701                       	dc.b	smpsNoAttack, $01
00084142 E10C                       	smpsAlterNote       $0C
00084144 E701                       	dc.b	smpsNoAttack, $01
00084146 E108                       	smpsAlterNote       $08
00084148 E701                       	dc.b	smpsNoAttack, $01
0008414A E105                       	smpsAlterNote       $05
0008414C E701                       	dc.b	smpsNoAttack, $01
0008414E E101                       	smpsAlterNote       $01
00084150 E701                       	dc.b	smpsNoAttack, $01
00084152 E105                       	smpsAlterNote       $05
00084154 E701                       	dc.b	smpsNoAttack, $01
00084156 E10B                       	smpsAlterNote       $0B
00084158 E701                       	dc.b	smpsNoAttack, $01
0008415A E10C                       	smpsAlterNote       $0C
0008415C E701                       	dc.b	smpsNoAttack, $01
0008415E E108                       	smpsAlterNote       $08
00084160 E701                       	dc.b	smpsNoAttack, $01
00084162 E102                       	smpsAlterNote       $02
00084164 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084168 E105                       	smpsAlterNote       $05
0008416A E701                       	dc.b	smpsNoAttack, $01
0008416C E10B                       	smpsAlterNote       $0B
0008416E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084172 E105                       	smpsAlterNote       $05
00084174 E701                       	dc.b	smpsNoAttack, $01
00084176 E102                       	smpsAlterNote       $02
00084178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008417C E108                       	smpsAlterNote       $08
0008417E E701                       	dc.b	smpsNoAttack, $01
00084180 E10C                       	smpsAlterNote       $0C
00084182 E701                       	dc.b	smpsNoAttack, $01
00084184 E10B                       	smpsAlterNote       $0B
00084186 E701                       	dc.b	smpsNoAttack, $01
00084188 E105                       	smpsAlterNote       $05
0008418A E701                       	dc.b	smpsNoAttack, $01
0008418C E101                       	smpsAlterNote       $01
0008418E E701                       	dc.b	smpsNoAttack, $01
00084190 E105                       	smpsAlterNote       $05
00084192 E701                       	dc.b	smpsNoAttack, $01
00084194 E108                       	smpsAlterNote       $08
00084196 E701                       	dc.b	smpsNoAttack, $01
00084198 E10C                       	smpsAlterNote       $0C
0008419A E701                       	dc.b	smpsNoAttack, $01
0008419E E10B                       	smpsAlterNote       $0B
000841A0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000841A4 E109                       	smpsAlterNote       $09
000841A6 C404                       	dc.b	nG5, $04
000841A8 E10B                       	smpsAlterNote       $0B
000841AA C604 8001                  	dc.b	nA5, $04, nRst, $01
000841AE E107                       	smpsAlterNote       $07
000841B0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000841B6 E10B                       	smpsAlterNote       $0B
000841B8 C604                       	dc.b	nA5, $04
000841BA E109                       	smpsAlterNote       $09
000841BC C404 8001                  	dc.b	nG5, $04, nRst, $01
000841C0 E10B                       	smpsAlterNote       $0B
000841C2 C604                       	dc.b	nA5, $04
000841C4 E108                       	smpsAlterNote       $08
000841C6 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000841CC E106                       	smpsAlterNote       $06
000841CE C904 8001                  	dc.b	nC6, $04, nRst, $01
000841D2 E10C                       	smpsAlterNote       $0C
000841D4 C704                       	dc.b	nBb5, $04
000841D6 E10B                       	smpsAlterNote       $0B
000841D8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000841DC E109                       	smpsAlterNote       $09
000841DE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000841E8 E10B                       	smpsAlterNote       $0B
000841EA C60D                       	dc.b	nA5, $0D
000841EC E108                       	smpsAlterNote       $08
000841EE E701                       	dc.b	smpsNoAttack, $01
000841F0 E104                       	smpsAlterNote       $04
000841F2 E701                       	dc.b	smpsNoAttack, $01
000841F4 E108                       	smpsAlterNote       $08
000841F6 E701                       	dc.b	smpsNoAttack, $01
000841F8 E10B                       	smpsAlterNote       $0B
000841FA E701                       	dc.b	smpsNoAttack, $01
000841FC E10F                       	smpsAlterNote       $0F
000841FE E701                       	dc.b	smpsNoAttack, $01
00084200 E10B                       	smpsAlterNote       $0B
00084202 E701                       	dc.b	smpsNoAttack, $01
00084204 E105                       	smpsAlterNote       $05
00084206 E701                       	dc.b	smpsNoAttack, $01
00084208 E104                       	smpsAlterNote       $04
0008420A E701                       	dc.b	smpsNoAttack, $01
0008420C E108                       	smpsAlterNote       $08
0008420E E701                       	dc.b	smpsNoAttack, $01
00084210 E10E                       	smpsAlterNote       $0E
00084212 E701                       	dc.b	smpsNoAttack, $01
00084214 E10F                       	smpsAlterNote       $0F
00084216 8001                       	dc.b	nRst, $01
00084218 E109                       	smpsAlterNote       $09
0008421A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00084220 E108                       	smpsAlterNote       $08
00084222 C10D                       	dc.b	nE5, $0D
00084224 E105                       	smpsAlterNote       $05
00084226 E701                       	dc.b	smpsNoAttack, $01
00084228 E101                       	smpsAlterNote       $01
0008422A E701                       	dc.b	smpsNoAttack, $01
0008422C E105                       	smpsAlterNote       $05
0008422E E701                       	dc.b	smpsNoAttack, $01
00084230 E10B                       	smpsAlterNote       $0B
00084232 E701                       	dc.b	smpsNoAttack, $01
00084234 E10C                       	smpsAlterNote       $0C
00084236 E701                       	dc.b	smpsNoAttack, $01
00084238 E108                       	smpsAlterNote       $08
0008423A E701                       	dc.b	smpsNoAttack, $01
0008423C E102                       	smpsAlterNote       $02
0008423E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084242 E105                       	smpsAlterNote       $05
00084244 E701                       	dc.b	smpsNoAttack, $01
00084246 E10B                       	smpsAlterNote       $0B
00084248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008424C E105                       	smpsAlterNote       $05
0008424E E701                       	dc.b	smpsNoAttack, $01
00084250 E102                       	smpsAlterNote       $02
00084252 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084256 E108                       	smpsAlterNote       $08
00084258 E701                       	dc.b	smpsNoAttack, $01
0008425A E10C                       	smpsAlterNote       $0C
0008425C E701                       	dc.b	smpsNoAttack, $01
0008425E E10B                       	smpsAlterNote       $0B
00084260 E701                       	dc.b	smpsNoAttack, $01
00084262 E105                       	smpsAlterNote       $05
00084264 E701                       	dc.b	smpsNoAttack, $01
00084266 E101                       	smpsAlterNote       $01
00084268 E701                       	dc.b	smpsNoAttack, $01
0008426A E105                       	smpsAlterNote       $05
0008426C E701                       	dc.b	smpsNoAttack, $01
0008426E E108                       	smpsAlterNote       $08
00084270 E701                       	dc.b	smpsNoAttack, $01
00084272 E10C                       	smpsAlterNote       $0C
00084274 E701                       	dc.b	smpsNoAttack, $01
00084276 E108                       	smpsAlterNote       $08
00084278 E701                       	dc.b	smpsNoAttack, $01
0008427A E102                       	smpsAlterNote       $02
0008427C E701                       	dc.b	smpsNoAttack, $01
0008427E E101                       	smpsAlterNote       $01
00084280 E701                       	dc.b	smpsNoAttack, $01
00084282 E105                       	smpsAlterNote       $05
00084284 E701                       	dc.b	smpsNoAttack, $01
00084286 E10B                       	smpsAlterNote       $0B
00084288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008428C E108                       	smpsAlterNote       $08
0008428E E701                       	dc.b	smpsNoAttack, $01
00084290 E102                       	smpsAlterNote       $02
00084292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084296 E108                       	smpsAlterNote       $08
00084298 E701                       	dc.b	smpsNoAttack, $01
0008429A E10B                       	smpsAlterNote       $0B
0008429C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842A0 E105                       	smpsAlterNote       $05
000842A2 E701                       	dc.b	smpsNoAttack, $01
000842A4 E101                       	smpsAlterNote       $01
000842A6 E701                       	dc.b	smpsNoAttack, $01
000842A8 E102                       	smpsAlterNote       $02
000842AA E701                       	dc.b	smpsNoAttack, $01
000842AC E108                       	smpsAlterNote       $08
000842AE E701                       	dc.b	smpsNoAttack, $01
000842B0 E10C                       	smpsAlterNote       $0C
000842B2 E701                       	dc.b	smpsNoAttack, $01
000842B4 E108                       	smpsAlterNote       $08
000842B6 E701                       	dc.b	smpsNoAttack, $01
000842B8 E105                       	smpsAlterNote       $05
000842BA E701                       	dc.b	smpsNoAttack, $01
000842BC E101                       	smpsAlterNote       $01
000842BE E701                       	dc.b	smpsNoAttack, $01
000842C0 E105                       	smpsAlterNote       $05
000842C2 E701                       	dc.b	smpsNoAttack, $01
000842C4 E10B                       	smpsAlterNote       $0B
000842C6 E701                       	dc.b	smpsNoAttack, $01
000842C8 E10C                       	smpsAlterNote       $0C
000842CA E701                       	dc.b	smpsNoAttack, $01
000842CC E108                       	smpsAlterNote       $08
000842CE E701                       	dc.b	smpsNoAttack, $01
000842D0 E102                       	smpsAlterNote       $02
000842D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842D6 E108                       	smpsAlterNote       $08
000842D8 E701                       	dc.b	smpsNoAttack, $01
000842DA E10B                       	smpsAlterNote       $0B
000842DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842E0 E105                       	smpsAlterNote       $05
000842E2 E701                       	dc.b	smpsNoAttack, $01
000842E4 E101                       	smpsAlterNote       $01
000842E6 E701                       	dc.b	smpsNoAttack, $01
000842E8 E102                       	smpsAlterNote       $02
000842EA E701                       	dc.b	smpsNoAttack, $01
000842EC E108                       	smpsAlterNote       $08
000842EE E701                       	dc.b	smpsNoAttack, $01
000842F0 E10C                       	smpsAlterNote       $0C
000842F2 E701                       	dc.b	smpsNoAttack, $01
000842F4 E108                       	smpsAlterNote       $08
000842F6 E701                       	dc.b	smpsNoAttack, $01
000842F8 E105                       	smpsAlterNote       $05
000842FA E701                       	dc.b	smpsNoAttack, $01
000842FC E101                       	smpsAlterNote       $01
000842FE E701                       	dc.b	smpsNoAttack, $01
00084300 E105                       	smpsAlterNote       $05
00084302 E701                       	dc.b	smpsNoAttack, $01
00084304 E10B                       	smpsAlterNote       $0B
00084306 E701                       	dc.b	smpsNoAttack, $01
00084308 E10C                       	smpsAlterNote       $0C
0008430A E701                       	dc.b	smpsNoAttack, $01
0008430C E108                       	smpsAlterNote       $08
0008430E E701                       	dc.b	smpsNoAttack, $01
00084310 E102                       	smpsAlterNote       $02
00084312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084316 E105                       	smpsAlterNote       $05
00084318 E701                       	dc.b	smpsNoAttack, $01
0008431A E10B                       	smpsAlterNote       $0B
0008431C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084320 E105                       	smpsAlterNote       $05
00084322 E701                       	dc.b	smpsNoAttack, $01
00084324 E102                       	smpsAlterNote       $02
00084326 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008432A E108                       	smpsAlterNote       $08
0008432C E701                       	dc.b	smpsNoAttack, $01
0008432E E10C                       	smpsAlterNote       $0C
00084330 E701                       	dc.b	smpsNoAttack, $01
00084332 E10B                       	smpsAlterNote       $0B
00084334 E701                       	dc.b	smpsNoAttack, $01
00084336 E105                       	smpsAlterNote       $05
00084338 E701                       	dc.b	smpsNoAttack, $01
0008433A E101                       	smpsAlterNote       $01
0008433C E701                       	dc.b	smpsNoAttack, $01
0008433E E105                       	smpsAlterNote       $05
00084340 E701                       	dc.b	smpsNoAttack, $01
00084342 E108                       	smpsAlterNote       $08
00084344 E701                       	dc.b	smpsNoAttack, $01
00084346 E10C                       	smpsAlterNote       $0C
00084348 E701                       	dc.b	smpsNoAttack, $01
0008434A E108                       	smpsAlterNote       $08
0008434C E701                       	dc.b	smpsNoAttack, $01
0008434E E102                       	smpsAlterNote       $02
00084350 E701                       	dc.b	smpsNoAttack, $01
00084352 E101                       	smpsAlterNote       $01
00084354 E701                       	dc.b	smpsNoAttack, $01
00084356 E105                       	smpsAlterNote       $05
00084358 E701                       	dc.b	smpsNoAttack, $01
0008435A E10B                       	smpsAlterNote       $0B
0008435C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084360 E108                       	smpsAlterNote       $08
00084362 E701                       	dc.b	smpsNoAttack, $01
00084364 E102                       	smpsAlterNote       $02
00084366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008436A E108                       	smpsAlterNote       $08
0008436C E701                       	dc.b	smpsNoAttack, $01
0008436E E10B                       	smpsAlterNote       $0B
00084370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084374 E105                       	smpsAlterNote       $05
00084376 E701                       	dc.b	smpsNoAttack, $01
00084378 E102                       	smpsAlterNote       $02
0008437A 8001                       	dc.b	nRst, $01
0008437C E107                       	smpsAlterNote       $07
0008437E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00084382 E108                       	smpsAlterNote       $08
00084384 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00084388 E102                       	smpsAlterNote       $02
0008438A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008438E E108                       	smpsAlterNote       $08
00084390 E701                       	dc.b	smpsNoAttack, $01
00084392 E10B                       	smpsAlterNote       $0B
00084394 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084398 E105                       	smpsAlterNote       $05
0008439A E701                       	dc.b	smpsNoAttack, $01
0008439C E101                       	smpsAlterNote       $01
0008439E E701                       	dc.b	smpsNoAttack, $01
000843A0 E102                       	smpsAlterNote       $02
000843A2 E701                       	dc.b	smpsNoAttack, $01
000843A4 E108                       	smpsAlterNote       $08
000843A6 E701                       	dc.b	smpsNoAttack, $01
000843A8 E10C                       	smpsAlterNote       $0C
000843AA E701                       	dc.b	smpsNoAttack, $01
000843AC E108                       	smpsAlterNote       $08
000843AE E701                       	dc.b	smpsNoAttack, $01
000843B0 E105                       	smpsAlterNote       $05
000843B2 E701                       	dc.b	smpsNoAttack, $01
000843B4 E101                       	smpsAlterNote       $01
000843B6 E701                       	dc.b	smpsNoAttack, $01
000843B8 E105                       	smpsAlterNote       $05
000843BA E701                       	dc.b	smpsNoAttack, $01
000843BC E10B                       	smpsAlterNote       $0B
000843BE E701                       	dc.b	smpsNoAttack, $01
000843C0 E10C                       	smpsAlterNote       $0C
000843C2 E701                       	dc.b	smpsNoAttack, $01
000843C4 E108                       	smpsAlterNote       $08
000843C6 E701                       	dc.b	smpsNoAttack, $01
000843C8 E102                       	smpsAlterNote       $02
000843CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843CE E105                       	smpsAlterNote       $05
000843D0 E701                       	dc.b	smpsNoAttack, $01
000843D2 E10B                       	smpsAlterNote       $0B
000843D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843D8 E105                       	smpsAlterNote       $05
000843DA E701                       	dc.b	smpsNoAttack, $01
000843DC E102                       	smpsAlterNote       $02
000843DE E701                       	dc.b	smpsNoAttack, $01
000843E0 E109                       	smpsAlterNote       $09
000843E2 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000843E6 E108                       	smpsAlterNote       $08
000843E8 C10D                       	dc.b	nE5, $0D
000843EA E105                       	smpsAlterNote       $05
000843EC E701                       	dc.b	smpsNoAttack, $01
000843EE E101                       	smpsAlterNote       $01
000843F0 E701                       	dc.b	smpsNoAttack, $01
000843F2 E102                       	smpsAlterNote       $02
000843F4 E701                       	dc.b	smpsNoAttack, $01
000843F6 E108                       	smpsAlterNote       $08
000843F8 E701                       	dc.b	smpsNoAttack, $01
000843FA E10C                       	smpsAlterNote       $0C
000843FC E701                       	dc.b	smpsNoAttack, $01
000843FE E108                       	smpsAlterNote       $08
00084400 E701                       	dc.b	smpsNoAttack, $01
00084402 E105                       	smpsAlterNote       $05
00084404 E701                       	dc.b	smpsNoAttack, $01
00084406 E101                       	smpsAlterNote       $01
00084408 E701                       	dc.b	smpsNoAttack, $01
0008440A E105                       	smpsAlterNote       $05
0008440C E701                       	dc.b	smpsNoAttack, $01
0008440E E10B                       	smpsAlterNote       $0B
00084410 E701                       	dc.b	smpsNoAttack, $01
00084412 E10C                       	smpsAlterNote       $0C
00084414 E701                       	dc.b	smpsNoAttack, $01
00084416 E108                       	smpsAlterNote       $08
00084418 E701                       	dc.b	smpsNoAttack, $01
0008441A E102                       	smpsAlterNote       $02
0008441C E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00084424 E10B                       	smpsAlterNote       $0B
00084426 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008442A E10C                       	smpsAlterNote       $0C
0008442C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00084430 E10B                       	smpsAlterNote       $0B
00084432 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00084438 E107                       	smpsAlterNote       $07
0008443A BF03                       	dc.b	nD5, $03
0008443C E108                       	smpsAlterNote       $08
0008443E C103 8001                  	dc.b	nE5, $03, nRst, $01
00084442 E109                       	smpsAlterNote       $09
00084444 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008444A E10B                       	smpsAlterNote       $0B
0008444C C606 8001                  	dc.b	nA5, $06, nRst, $01
00084450 E107                       	smpsAlterNote       $07
00084452 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084456 E106                       	smpsAlterNote       $06
00084458 C90D                       	dc.b	nC6, $0D
0008445A E103                       	smpsAlterNote       $03
0008445C E701                       	dc.b	smpsNoAttack, $01
0008445E E1FF                       	smpsAlterNote       $FF
00084460 E701                       	dc.b	smpsNoAttack, $01
00084462 E103                       	smpsAlterNote       $03
00084464 E701                       	dc.b	smpsNoAttack, $01
00084466 E109                       	smpsAlterNote       $09
00084468 E701                       	dc.b	smpsNoAttack, $01
0008446A E10A                       	smpsAlterNote       $0A
0008446C E701                       	dc.b	smpsNoAttack, $01
0008446E E106                       	smpsAlterNote       $06
00084470 E701                       	dc.b	smpsNoAttack, $01
00084472 E100                       	smpsAlterNote       $00
00084474 E701                       	dc.b	smpsNoAttack, $01
00084476 E10C                       	smpsAlterNote       $0C
00084478 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008447C E10B                       	smpsAlterNote       $0B
0008447E C603                       	dc.b	nA5, $03
00084480 E109                       	smpsAlterNote       $09
00084482 C403 8001                  	dc.b	nG5, $03, nRst, $01
00084486 E10B                       	smpsAlterNote       $0B
00084488 C60D                       	dc.b	nA5, $0D
0008448A E105                       	smpsAlterNote       $05
0008448C E701                       	dc.b	smpsNoAttack, $01
0008448E E104                       	smpsAlterNote       $04
00084490 E701                       	dc.b	smpsNoAttack, $01
00084492 E108                       	smpsAlterNote       $08
00084494 E701                       	dc.b	smpsNoAttack, $01
00084496 E10E                       	smpsAlterNote       $0E
00084498 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008449C E10B                       	smpsAlterNote       $0B
0008449E E701                       	dc.b	smpsNoAttack, $01
000844A0 E105                       	smpsAlterNote       $05
000844A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844A6 E10B                       	smpsAlterNote       $0B
000844A8 E701                       	dc.b	smpsNoAttack, $01
000844AA E10E                       	smpsAlterNote       $0E
000844AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844B0 E108                       	smpsAlterNote       $08
000844B2 E701                       	dc.b	smpsNoAttack, $01
000844B4 E104                       	smpsAlterNote       $04
000844B6 E701                       	dc.b	smpsNoAttack, $01
000844B8 E105                       	smpsAlterNote       $05
000844BA E701                       	dc.b	smpsNoAttack, $01
000844BC E10B                       	smpsAlterNote       $0B
000844BE E701                       	dc.b	smpsNoAttack, $01
000844C0 E10F                       	smpsAlterNote       $0F
000844C2 E701                       	dc.b	smpsNoAttack, $01
000844C4 E10B                       	smpsAlterNote       $0B
000844C6 E701                       	dc.b	smpsNoAttack, $01
000844C8 E108                       	smpsAlterNote       $08
000844CA E701                       	dc.b	smpsNoAttack, $01
000844CC E104                       	smpsAlterNote       $04
000844CE E701                       	dc.b	smpsNoAttack, $01
000844D0 E108                       	smpsAlterNote       $08
000844D2 E701                       	dc.b	smpsNoAttack, $01
000844D4 E10E                       	smpsAlterNote       $0E
000844D6 E701                       	dc.b	smpsNoAttack, $01
000844D8 E10F                       	smpsAlterNote       $0F
000844DA E701                       	dc.b	smpsNoAttack, $01
000844DC E10B                       	smpsAlterNote       $0B
000844DE E701                       	dc.b	smpsNoAttack, $01
000844E0 E105                       	smpsAlterNote       $05
000844E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844E6 E108                       	smpsAlterNote       $08
000844E8 E701                       	dc.b	smpsNoAttack, $01
000844EA E10E                       	smpsAlterNote       $0E
000844EC E701                       	dc.b	smpsNoAttack, $01
000844EE E10F                       	smpsAlterNote       $0F
000844F0 800F                       	dc.b	nRst, $0F
000844F2 E107                       	smpsAlterNote       $07
000844F4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000844F8 E108                       	smpsAlterNote       $08
000844FA C103                       	dc.b	nE5, $03
000844FC E109                       	smpsAlterNote       $09
000844FE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00084504 E10B                       	smpsAlterNote       $0B
00084506 C607                       	dc.b	nA5, $07
00084508 E107                       	smpsAlterNote       $07
0008450A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008450E E106                       	smpsAlterNote       $06
00084510 C90D                       	dc.b	nC6, $0D
00084512 E107                       	smpsAlterNote       $07
00084514 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00084518 E10C                       	smpsAlterNote       $0C
0008451A C704                       	dc.b	nBb5, $04
0008451C E10B                       	smpsAlterNote       $0B
0008451E C604 8001                  	dc.b	nA5, $04, nRst, $01
00084522 E109                       	smpsAlterNote       $09
00084524 C404                       	dc.b	nG5, $04
00084526 E10B                       	smpsAlterNote       $0B
00084528 C60D                       	dc.b	nA5, $0D
0008452A E108                       	smpsAlterNote       $08
0008452C E701                       	dc.b	smpsNoAttack, $01
0008452E E105                       	smpsAlterNote       $05
00084530 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084534 E10B                       	smpsAlterNote       $0B
00084536 E701                       	dc.b	smpsNoAttack, $01
00084538 E10F                       	smpsAlterNote       $0F
0008453A E701                       	dc.b	smpsNoAttack, $01
0008453C E10E                       	smpsAlterNote       $0E
0008453E E701                       	dc.b	smpsNoAttack, $01
00084540 E108                       	smpsAlterNote       $08
00084542 E701                       	dc.b	smpsNoAttack, $01
00084544 E104                       	smpsAlterNote       $04
00084546 E701                       	dc.b	smpsNoAttack, $01
00084548 E108                       	smpsAlterNote       $08
0008454A E701                       	dc.b	smpsNoAttack, $01
0008454C E10B                       	smpsAlterNote       $0B
0008454E E701                       	dc.b	smpsNoAttack, $01
00084550 E10F                       	smpsAlterNote       $0F
00084552 E701                       	dc.b	smpsNoAttack, $01
00084554 E10B                       	smpsAlterNote       $0B
00084556 E701                       	dc.b	smpsNoAttack, $01
00084558 E105                       	smpsAlterNote       $05
0008455A E701                       	dc.b	smpsNoAttack, $01
0008455C E104                       	smpsAlterNote       $04
0008455E E701                       	dc.b	smpsNoAttack, $01
00084560 E108                       	smpsAlterNote       $08
00084562 E701                       	dc.b	smpsNoAttack, $01
00084564 E10E                       	smpsAlterNote       $0E
00084566 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008456A E10B                       	smpsAlterNote       $0B
0008456C E701                       	dc.b	smpsNoAttack, $01
0008456E E105                       	smpsAlterNote       $05
00084570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084574 E10B                       	smpsAlterNote       $0B
00084576 E701                       	dc.b	smpsNoAttack, $01
00084578 E10E                       	smpsAlterNote       $0E
0008457A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008457E E108                       	smpsAlterNote       $08
00084580 E701                       	dc.b	smpsNoAttack, $01
00084582 E105                       	smpsAlterNote       $05
00084584 8001                       	dc.b	nRst, $01
00084586 E109                       	smpsAlterNote       $09
00084588 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008458C E10B                       	smpsAlterNote       $0B
0008458E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00084596 E109                       	smpsAlterNote       $09
00084598 C404                       	dc.b	nG5, $04
0008459A E10B                       	smpsAlterNote       $0B
0008459C C604 8001                  	dc.b	nA5, $04, nRst, $01
000845A0 E107                       	smpsAlterNote       $07
000845A2 BF0D                       	dc.b	nD5, $0D
000845A4 E101                       	smpsAlterNote       $01
000845A6 E701                       	dc.b	smpsNoAttack, $01
000845A8 E100                       	smpsAlterNote       $00
000845AA E701                       	dc.b	smpsNoAttack, $01
000845AC E104                       	smpsAlterNote       $04
000845AE E701                       	dc.b	smpsNoAttack, $01
000845B0 E10A                       	smpsAlterNote       $0A
000845B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845B6 E107                       	smpsAlterNote       $07
000845B8 E701                       	dc.b	smpsNoAttack, $01
000845BA E101                       	smpsAlterNote       $01
000845BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845C0 E107                       	smpsAlterNote       $07
000845C2 E701                       	dc.b	smpsNoAttack, $01
000845C4 E10A                       	smpsAlterNote       $0A
000845C6 E701                       	dc.b	smpsNoAttack, $01
000845C8 E10B                       	smpsAlterNote       $0B
000845CA 8001                       	dc.b	nRst, $01
000845CC E108                       	smpsAlterNote       $08
000845CE 8001                       	dc.b	nRst, $01
000845D0 E109                       	smpsAlterNote       $09
000845D2 8001 C401                  	dc.b	nRst, $01, nG5, $01
000845D6 E10B                       	smpsAlterNote       $0B
000845D8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000845E0 E108                       	smpsAlterNote       $08
000845E2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000845E6 E109                       	smpsAlterNote       $09
000845E8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000845EC E108                       	smpsAlterNote       $08
000845EE CD02 8001                  	dc.b	nE6, $02, nRst, $01
000845F2 E106                       	smpsAlterNote       $06
000845F4 C903                       	dc.b	nC6, $03
000845F6 E109                       	smpsAlterNote       $09
000845F8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000845FC E10C                       	smpsAlterNote       $0C
000845FE C70D                       	dc.b	nBb5, $0D
00084600 E109                       	smpsAlterNote       $09
00084602 E701                       	dc.b	smpsNoAttack, $01
00084604 E105                       	smpsAlterNote       $05
00084606 E701                       	dc.b	smpsNoAttack, $01
00084608 E109                       	smpsAlterNote       $09
0008460A E701                       	dc.b	smpsNoAttack, $01
0008460C E10F                       	smpsAlterNote       $0F
0008460E E701                       	dc.b	smpsNoAttack, $01
00084610 E110                       	smpsAlterNote       $10
00084612 E701                       	dc.b	smpsNoAttack, $01
00084614 E10C                       	smpsAlterNote       $0C
00084616 E701                       	dc.b	smpsNoAttack, $01
00084618 E106                       	smpsAlterNote       $06
0008461A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008461E E109                       	smpsAlterNote       $09
00084620 E701                       	dc.b	smpsNoAttack, $01
00084622 E10F                       	smpsAlterNote       $0F
00084624 E701                       	dc.b	smpsNoAttack, $01
00084626 E110                       	smpsAlterNote       $10
00084628 8001                       	dc.b	nRst, $01
0008462A E10B                       	smpsAlterNote       $0B
0008462C C606 8001                  	dc.b	nA5, $06, nRst, $01
00084630 E109                       	smpsAlterNote       $09
00084632 C40D                       	dc.b	nG5, $0D
00084634 E103                       	smpsAlterNote       $03
00084636 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008463A E106                       	smpsAlterNote       $06
0008463C E701                       	dc.b	smpsNoAttack, $01
0008463E E10C                       	smpsAlterNote       $0C
00084640 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084644 E106                       	smpsAlterNote       $06
00084646 E701                       	dc.b	smpsNoAttack, $01
00084648 E103                       	smpsAlterNote       $03
0008464A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008464E E109                       	smpsAlterNote       $09
00084650 E701                       	dc.b	smpsNoAttack, $01
00084652 E10D                       	smpsAlterNote       $0D
00084654 E701                       	dc.b	smpsNoAttack, $01
00084656 E10C                       	smpsAlterNote       $0C
00084658 E701                       	dc.b	smpsNoAttack, $01
0008465A E106                       	smpsAlterNote       $06
0008465C E701                       	dc.b	smpsNoAttack, $01
0008465E E102                       	smpsAlterNote       $02
00084660 E701                       	dc.b	smpsNoAttack, $01
00084662 E103                       	smpsAlterNote       $03
00084664 8001                       	dc.b	nRst, $01
00084666 E10B                       	smpsAlterNote       $0B
00084668 C60D                       	dc.b	nA5, $0D
0008466A E108                       	smpsAlterNote       $08
0008466C E701                       	dc.b	smpsNoAttack, $01
0008466E E104                       	smpsAlterNote       $04
00084670 E701                       	dc.b	smpsNoAttack, $01
00084672 E108                       	smpsAlterNote       $08
00084674 E701                       	dc.b	smpsNoAttack, $01
00084676 E10B                       	smpsAlterNote       $0B
00084678 E701                       	dc.b	smpsNoAttack, $01
0008467A E10F                       	smpsAlterNote       $0F
0008467C E701                       	dc.b	smpsNoAttack, $01
0008467E E10B                       	smpsAlterNote       $0B
00084680 E701                       	dc.b	smpsNoAttack, $01
00084682 E105                       	smpsAlterNote       $05
00084684 E701                       	dc.b	smpsNoAttack, $01
00084686 E104                       	smpsAlterNote       $04
00084688 E701                       	dc.b	smpsNoAttack, $01
0008468A E108                       	smpsAlterNote       $08
0008468C E701                       	dc.b	smpsNoAttack, $01
0008468E E10E                       	smpsAlterNote       $0E
00084690 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084694 E10B                       	smpsAlterNote       $0B
00084696 E701                       	dc.b	smpsNoAttack, $01
00084698 E105                       	smpsAlterNote       $05
0008469A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008469E E10C                       	smpsAlterNote       $0C
000846A0 C70E                       	dc.b	nBb5, $0E
000846A2 E106                       	smpsAlterNote       $06
000846A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846A8 E10C                       	smpsAlterNote       $0C
000846AA E701                       	dc.b	smpsNoAttack, $01
000846AC E10F                       	smpsAlterNote       $0F
000846AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846B2 E109                       	smpsAlterNote       $09
000846B4 E701                       	dc.b	smpsNoAttack, $01
000846B6 E105                       	smpsAlterNote       $05
000846B8 E701                       	dc.b	smpsNoAttack, $01
000846BA E106                       	smpsAlterNote       $06
000846BC E701                       	dc.b	smpsNoAttack, $01
000846BE E10C                       	smpsAlterNote       $0C
000846C0 E701                       	dc.b	smpsNoAttack, $01
000846C2 E110                       	smpsAlterNote       $10
000846C4 E701                       	dc.b	smpsNoAttack, $01
000846C6 E10C                       	smpsAlterNote       $0C
000846C8 E701                       	dc.b	smpsNoAttack, $01
000846CA E109                       	smpsAlterNote       $09
000846CC E701                       	dc.b	smpsNoAttack, $01
000846CE E105                       	smpsAlterNote       $05
000846D0 E701                       	dc.b	smpsNoAttack, $01
000846D2 E106                       	smpsAlterNote       $06
000846D4 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000846D8 E107                       	smpsAlterNote       $07
000846DA CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000846DF E108                       	smpsAlterNote       $08
000846E1 CD0D                       	dc.b	nE6, $0D
000846E3 E107                       	smpsAlterNote       $07
000846E5 CB0D                       	dc.b	nD6, $0D
000846E7 E104                       	smpsAlterNote       $04
000846E9 E701                       	dc.b	smpsNoAttack, $01
000846EB E100                       	smpsAlterNote       $00
000846ED E701                       	dc.b	smpsNoAttack, $01
000846EF E101                       	smpsAlterNote       $01
000846F1 E701                       	dc.b	smpsNoAttack, $01
000846F3 E107                       	smpsAlterNote       $07
000846F5 E701                       	dc.b	smpsNoAttack, $01
000846F7 E10B                       	smpsAlterNote       $0B
000846F9 E701                       	dc.b	smpsNoAttack, $01
000846FB E107                       	smpsAlterNote       $07
000846FD E701                       	dc.b	smpsNoAttack, $01
000846FF E104                       	smpsAlterNote       $04
00084701 E701                       	dc.b	smpsNoAttack, $01
00084703 E100                       	smpsAlterNote       $00
00084705 E701                       	dc.b	smpsNoAttack, $01
00084707 E104                       	smpsAlterNote       $04
00084709 E701                       	dc.b	smpsNoAttack, $01
0008470B E10A                       	smpsAlterNote       $0A
0008470D E701                       	dc.b	smpsNoAttack, $01
0008470F E10B                       	smpsAlterNote       $0B
00084711 E701                       	dc.b	smpsNoAttack, $01
00084713 E108                       	smpsAlterNote       $08
00084715 CC0D                       	dc.b	nEb6, $0D
00084717 E105                       	smpsAlterNote       $05
00084719 E701                       	dc.b	smpsNoAttack, $01
0008471B E101                       	smpsAlterNote       $01
0008471D E701                       	dc.b	smpsNoAttack, $01
0008471F E102                       	smpsAlterNote       $02
00084721 E701                       	dc.b	smpsNoAttack, $01
00084723 E108                       	smpsAlterNote       $08
00084725 E701                       	dc.b	smpsNoAttack, $01
00084727 E106                       	smpsAlterNote       $06
00084729 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00084735 8001                       	dc.b	nRst, $01
00084737 E107                       	smpsAlterNote       $07
00084739 CB0D                       	dc.b	nD6, $0D
0008473B E104                       	smpsAlterNote       $04
0008473D E701                       	dc.b	smpsNoAttack, $01
0008473F E100                       	smpsAlterNote       $00
00084741 E701                       	dc.b	smpsNoAttack, $01
00084743 E104                       	smpsAlterNote       $04
00084745 E701                       	dc.b	smpsNoAttack, $01
00084747 E107                       	smpsAlterNote       $07
00084749 E701                       	dc.b	smpsNoAttack, $01
0008474B E10B                       	smpsAlterNote       $0B
0008474D E701                       	dc.b	smpsNoAttack, $01
0008474F E107                       	smpsAlterNote       $07
00084751 E701                       	dc.b	smpsNoAttack, $01
00084753 E101                       	smpsAlterNote       $01
00084755 E701                       	dc.b	smpsNoAttack, $01
00084757 E100                       	smpsAlterNote       $00
00084759 E701                       	dc.b	smpsNoAttack, $01
0008475B E104                       	smpsAlterNote       $04
0008475D E701                       	dc.b	smpsNoAttack, $01
0008475F E10A                       	smpsAlterNote       $0A
00084761 E701                       	dc.b	smpsNoAttack, $01
00084763 E10B                       	smpsAlterNote       $0B
00084765 8001                       	dc.b	nRst, $01
00084767 E109                       	smpsAlterNote       $09
00084769 CE0A                       	dc.b	nF6, $0A
0008476B E108                       	smpsAlterNote       $08
0008476D CC07                       	dc.b	nEb6, $07
0008476F E106                       	smpsAlterNote       $06
00084771 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008477D E107                       	smpsAlterNote       $07
0008477F CB0D                       	dc.b	nD6, $0D
00084781 E101                       	smpsAlterNote       $01
00084783 E701                       	dc.b	smpsNoAttack, $01
00084785 E100                       	smpsAlterNote       $00
00084787 E701                       	dc.b	smpsNoAttack, $01
00084789 E104                       	smpsAlterNote       $04
0008478B E701                       	dc.b	smpsNoAttack, $01
0008478D E10A                       	smpsAlterNote       $0A
0008478F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084793 E107                       	smpsAlterNote       $07
00084795 E701                       	dc.b	smpsNoAttack, $01
00084797 E101                       	smpsAlterNote       $01
00084799 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008479D E107                       	smpsAlterNote       $07
0008479F E701                       	dc.b	smpsNoAttack, $01
000847A1 E10A                       	smpsAlterNote       $0A
000847A3 E701                       	dc.b	smpsNoAttack, $01
000847A5 E10B                       	smpsAlterNote       $0B
000847A7 8001                       	dc.b	nRst, $01
000847A9 E108                       	smpsAlterNote       $08
000847AB CC0D                       	dc.b	nEb6, $0D
000847AD E102                       	smpsAlterNote       $02
000847AF E701                       	dc.b	smpsNoAttack, $01
000847B1 E101                       	smpsAlterNote       $01
000847B3 E701                       	dc.b	smpsNoAttack, $01
000847B5 E105                       	smpsAlterNote       $05
000847B7 E701                       	dc.b	smpsNoAttack, $01
000847B9 E108                       	smpsAlterNote       $08
000847BB 8001                       	dc.b	nRst, $01
000847BD E106                       	smpsAlterNote       $06
000847BF C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000847CB 8001                       	dc.b	nRst, $01
000847CD E107                       	smpsAlterNote       $07
000847CF CB0D                       	dc.b	nD6, $0D
000847D1 E101                       	smpsAlterNote       $01
000847D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847D7 E104                       	smpsAlterNote       $04
000847D9 E701                       	dc.b	smpsNoAttack, $01
000847DB E10A                       	smpsAlterNote       $0A
000847DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847E1 E104                       	smpsAlterNote       $04
000847E3 E701                       	dc.b	smpsNoAttack, $01
000847E5 E101                       	smpsAlterNote       $01
000847E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847EB E107                       	smpsAlterNote       $07
000847ED E701                       	dc.b	smpsNoAttack, $01
000847EF E10B                       	smpsAlterNote       $0B
000847F1 E701                       	dc.b	smpsNoAttack, $01
000847F3 E10A                       	smpsAlterNote       $0A
000847F5 E701                       	dc.b	smpsNoAttack, $01
000847F7 E104                       	smpsAlterNote       $04
000847F9 E701                       	dc.b	smpsNoAttack, $01
000847FB E100                       	smpsAlterNote       $00
000847FD E701                       	dc.b	smpsNoAttack, $01
000847FF E101                       	smpsAlterNote       $01
00084801 801C                       	dc.b	nRst, $1C
00084805 E107                       	smpsAlterNote       $07
00084807 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008480B E603                       	smpsAlterVol        $03
0008480D F6F1 AD                    	smpsJump            music84_Jump03
00084810                            
00084810                            ; FM3 Data
00084810                            music84_FM3:
00084810 E0C0                       	smpsPan             panCenter, $00
00084814 E109                       	smpsAlterNote       $09
00084816 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008481A E108                       	smpsAlterNote       $08
0008481C C103 800B                  	dc.b	nE5, $03, nRst, $0B
00084820 E10B                       	smpsAlterNote       $0B
00084822 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00084828 E040                       	smpsPan             panRight, $00
0008482A E110                       	smpsAlterNote       $10
0008482C E6F9                       	smpsAlterVol        $F9
0008482E C702 8001                  	dc.b	nBb5, $02, nRst, $01
00084832 E10F                       	smpsAlterNote       $0F
00084834 C603                       	dc.b	nA5, $03
00084836 E10D                       	smpsAlterNote       $0D
00084838 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008483E E10C                       	smpsAlterNote       $0C
00084840 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084844 E10A                       	smpsAlterNote       $0A
00084846 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008484A E10F                       	smpsAlterNote       $0F
0008484C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00084850 E0C0                       	smpsPan             panCenter, $00
00084854 E109                       	smpsAlterNote       $09
00084856 E609                       	smpsAlterVol        $09
00084858 B603                       	dc.b	nF4, $03
0008485A                            
0008485A                            music84_Jump02:
0008485A E70A                       	dc.b	smpsNoAttack, $0A
0008485C E103                       	smpsAlterNote       $03
0008485E E701                       	dc.b	smpsNoAttack, $01
00084860 E102                       	smpsAlterNote       $02
00084862 E701                       	dc.b	smpsNoAttack, $01
00084864 E106                       	smpsAlterNote       $06
00084866 E701                       	dc.b	smpsNoAttack, $01
00084868 E10C                       	smpsAlterNote       $0C
0008486A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008486E E109                       	smpsAlterNote       $09
00084870 E701                       	dc.b	smpsNoAttack, $01
00084872 E103                       	smpsAlterNote       $03
00084874 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084878 E109                       	smpsAlterNote       $09
0008487A E701                       	dc.b	smpsNoAttack, $01
0008487C E10C                       	smpsAlterNote       $0C
0008487E E701                       	dc.b	smpsNoAttack, $01
00084880 E10D                       	smpsAlterNote       $0D
00084882 8001                       	dc.b	nRst, $01
00084884 E109                       	smpsAlterNote       $09
00084886 B80D                       	dc.b	nG4, $0D
00084888 E103                       	smpsAlterNote       $03
0008488A E701                       	dc.b	smpsNoAttack, $01
0008488C E102                       	smpsAlterNote       $02
0008488E E701                       	dc.b	smpsNoAttack, $01
00084890 E106                       	smpsAlterNote       $06
00084892 E701                       	dc.b	smpsNoAttack, $01
00084894 E10C                       	smpsAlterNote       $0C
00084896 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008489A E109                       	smpsAlterNote       $09
0008489C E701                       	dc.b	smpsNoAttack, $01
0008489E E103                       	smpsAlterNote       $03
000848A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848A4 E109                       	smpsAlterNote       $09
000848A6 E701                       	dc.b	smpsNoAttack, $01
000848A8 E10C                       	smpsAlterNote       $0C
000848AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848AE E106                       	smpsAlterNote       $06
000848B0 E701                       	dc.b	smpsNoAttack, $01
000848B2 E102                       	smpsAlterNote       $02
000848B4 E701                       	dc.b	smpsNoAttack, $01
000848B6 E103                       	smpsAlterNote       $03
000848B8 E701                       	dc.b	smpsNoAttack, $01
000848BA E109                       	smpsAlterNote       $09
000848BC E701                       	dc.b	smpsNoAttack, $01
000848BE E10D                       	smpsAlterNote       $0D
000848C0 E701                       	dc.b	smpsNoAttack, $01
000848C2 E109                       	smpsAlterNote       $09
000848C4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000848C8 E10B                       	smpsAlterNote       $0B
000848CA BA0D                       	dc.b	nA4, $0D
000848CC E105                       	smpsAlterNote       $05
000848CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848D2 E108                       	smpsAlterNote       $08
000848D4 E701                       	dc.b	smpsNoAttack, $01
000848D6 E10E                       	smpsAlterNote       $0E
000848D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848DC E108                       	smpsAlterNote       $08
000848DE E701                       	dc.b	smpsNoAttack, $01
000848E0 E104                       	smpsAlterNote       $04
000848E2 E701                       	dc.b	smpsNoAttack, $01
000848E4 E105                       	smpsAlterNote       $05
000848E6 E701                       	dc.b	smpsNoAttack, $01
000848E8 E10B                       	smpsAlterNote       $0B
000848EA E701                       	dc.b	smpsNoAttack, $01
000848EC E10F                       	smpsAlterNote       $0F
000848EE E701                       	dc.b	smpsNoAttack, $01
000848F0 E10B                       	smpsAlterNote       $0B
000848F2 E701                       	dc.b	smpsNoAttack, $01
000848F4 E108                       	smpsAlterNote       $08
000848F6 E701                       	dc.b	smpsNoAttack, $01
000848F8 E104                       	smpsAlterNote       $04
000848FA E701                       	dc.b	smpsNoAttack, $01
000848FC E108                       	smpsAlterNote       $08
000848FE E701                       	dc.b	smpsNoAttack, $01
00084900 E10E                       	smpsAlterNote       $0E
00084902 E701                       	dc.b	smpsNoAttack, $01
00084904 E10F                       	smpsAlterNote       $0F
00084906 E701                       	dc.b	smpsNoAttack, $01
00084908 E10B                       	smpsAlterNote       $0B
0008490A E701                       	dc.b	smpsNoAttack, $01
0008490C E105                       	smpsAlterNote       $05
0008490E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084912 E108                       	smpsAlterNote       $08
00084914 E701                       	dc.b	smpsNoAttack, $01
00084916 E10E                       	smpsAlterNote       $0E
00084918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008491C E108                       	smpsAlterNote       $08
0008491E E701                       	dc.b	smpsNoAttack, $01
00084920 E105                       	smpsAlterNote       $05
00084922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084926 E10B                       	smpsAlterNote       $0B
00084928 E701                       	dc.b	smpsNoAttack, $01
0008492A E10F                       	smpsAlterNote       $0F
0008492C E701                       	dc.b	smpsNoAttack, $01
0008492E E10E                       	smpsAlterNote       $0E
00084930 E701                       	dc.b	smpsNoAttack, $01
00084932 E108                       	smpsAlterNote       $08
00084934 E701                       	dc.b	smpsNoAttack, $01
00084936 E104                       	smpsAlterNote       $04
00084938 E701                       	dc.b	smpsNoAttack, $01
0008493A E105                       	smpsAlterNote       $05
0008493C 8001                       	dc.b	nRst, $01
0008493E E108                       	smpsAlterNote       $08
00084940 B50A                       	dc.b	nE4, $0A
00084942 E109                       	smpsAlterNote       $09
00084944 B60D                       	dc.b	nF4, $0D
00084946 E106                       	smpsAlterNote       $06
00084948 E701                       	dc.b	smpsNoAttack, $01
0008494A E103                       	smpsAlterNote       $03
0008494C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084950 E109                       	smpsAlterNote       $09
00084952 E701                       	dc.b	smpsNoAttack, $01
00084954 E10D                       	smpsAlterNote       $0D
00084956 E701                       	dc.b	smpsNoAttack, $01
00084958 E10C                       	smpsAlterNote       $0C
0008495A E701                       	dc.b	smpsNoAttack, $01
0008495C E106                       	smpsAlterNote       $06
0008495E E701                       	dc.b	smpsNoAttack, $01
00084960 E102                       	smpsAlterNote       $02
00084962 E701                       	dc.b	smpsNoAttack, $01
00084964 E106                       	smpsAlterNote       $06
00084966 E701                       	dc.b	smpsNoAttack, $01
00084968 E109                       	smpsAlterNote       $09
0008496A E701                       	dc.b	smpsNoAttack, $01
0008496C E10D                       	smpsAlterNote       $0D
0008496E E701                       	dc.b	smpsNoAttack, $01
00084970 E109                       	smpsAlterNote       $09
00084972 B80D                       	dc.b	nG4, $0D
00084974 E106                       	smpsAlterNote       $06
00084976 E701                       	dc.b	smpsNoAttack, $01
00084978 E103                       	smpsAlterNote       $03
0008497A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008497E E109                       	smpsAlterNote       $09
00084980 E701                       	dc.b	smpsNoAttack, $01
00084982 E10D                       	smpsAlterNote       $0D
00084984 E701                       	dc.b	smpsNoAttack, $01
00084986 E10C                       	smpsAlterNote       $0C
00084988 E701                       	dc.b	smpsNoAttack, $01
0008498A E106                       	smpsAlterNote       $06
0008498C E701                       	dc.b	smpsNoAttack, $01
0008498E E102                       	smpsAlterNote       $02
00084990 E701                       	dc.b	smpsNoAttack, $01
00084992 E106                       	smpsAlterNote       $06
00084994 E701                       	dc.b	smpsNoAttack, $01
00084996 E109                       	smpsAlterNote       $09
00084998 E701                       	dc.b	smpsNoAttack, $01
0008499A E10D                       	smpsAlterNote       $0D
0008499C E701                       	dc.b	smpsNoAttack, $01
0008499E E109                       	smpsAlterNote       $09
000849A0 E701                       	dc.b	smpsNoAttack, $01
000849A2 E103                       	smpsAlterNote       $03
000849A4 E701                       	dc.b	smpsNoAttack, $01
000849A6 E102                       	smpsAlterNote       $02
000849A8 E701                       	dc.b	smpsNoAttack, $01
000849AA E106                       	smpsAlterNote       $06
000849AC E701                       	dc.b	smpsNoAttack, $01
000849AE E10C                       	smpsAlterNote       $0C
000849B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849B4 E109                       	smpsAlterNote       $09
000849B6 E701                       	dc.b	smpsNoAttack, $01
000849B8 E10B                       	smpsAlterNote       $0B
000849BA BA0D                       	dc.b	nA4, $0D
000849BC E108                       	smpsAlterNote       $08
000849BE E701                       	dc.b	smpsNoAttack, $01
000849C0 E104                       	smpsAlterNote       $04
000849C2 E701                       	dc.b	smpsNoAttack, $01
000849C4 E108                       	smpsAlterNote       $08
000849C6 E701                       	dc.b	smpsNoAttack, $01
000849C8 E10B                       	smpsAlterNote       $0B
000849CA E701                       	dc.b	smpsNoAttack, $01
000849CC E10F                       	smpsAlterNote       $0F
000849CE E701                       	dc.b	smpsNoAttack, $01
000849D0 E10B                       	smpsAlterNote       $0B
000849D2 E701                       	dc.b	smpsNoAttack, $01
000849D4 E105                       	smpsAlterNote       $05
000849D6 E701                       	dc.b	smpsNoAttack, $01
000849D8 E104                       	smpsAlterNote       $04
000849DA E701                       	dc.b	smpsNoAttack, $01
000849DC E108                       	smpsAlterNote       $08
000849DE E701                       	dc.b	smpsNoAttack, $01
000849E0 E10E                       	smpsAlterNote       $0E
000849E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849E6 E10B                       	smpsAlterNote       $0B
000849E8 E701                       	dc.b	smpsNoAttack, $01
000849EA E105                       	smpsAlterNote       $05
000849EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849F0 E10B                       	smpsAlterNote       $0B
000849F2 E701                       	dc.b	smpsNoAttack, $01
000849F4 E10E                       	smpsAlterNote       $0E
000849F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849FA E108                       	smpsAlterNote       $08
000849FC E701                       	dc.b	smpsNoAttack, $01
000849FE E104                       	smpsAlterNote       $04
00084A00 E701                       	dc.b	smpsNoAttack, $01
00084A02 E105                       	smpsAlterNote       $05
00084A04 E701                       	dc.b	smpsNoAttack, $01
00084A06 E10B                       	smpsAlterNote       $0B
00084A08 E701                       	dc.b	smpsNoAttack, $01
00084A0A E10F                       	smpsAlterNote       $0F
00084A0C E701                       	dc.b	smpsNoAttack, $01
00084A0E E10B                       	smpsAlterNote       $0B
00084A10 E701                       	dc.b	smpsNoAttack, $01
00084A12 E108                       	smpsAlterNote       $08
00084A14 E701                       	dc.b	smpsNoAttack, $01
00084A16 E105                       	smpsAlterNote       $05
00084A18 8001                       	dc.b	nRst, $01
00084A1A E109                       	smpsAlterNote       $09
00084A1C B609 8001                  	dc.b	nF4, $09, nRst, $01
00084A20 E108                       	smpsAlterNote       $08
00084A22 B506 8001                  	dc.b	nE4, $06, nRst, $01
00084A26 E107                       	smpsAlterNote       $07
00084A28 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00084A2C E108                       	smpsAlterNote       $08
00084A2E B502 8001                  	dc.b	nE4, $02, nRst, $01
00084A32 E109                       	smpsAlterNote       $09
00084A34 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00084A3A E10B                       	smpsAlterNote       $0B
00084A3C BA0D                       	dc.b	nA4, $0D
00084A3E E108                       	smpsAlterNote       $08
00084A40 E701                       	dc.b	smpsNoAttack, $01
00084A42 E104                       	smpsAlterNote       $04
00084A44 E701                       	dc.b	smpsNoAttack, $01
00084A46 E108                       	smpsAlterNote       $08
00084A48 E701                       	dc.b	smpsNoAttack, $01
00084A4A E10E                       	smpsAlterNote       $0E
00084A4C E701                       	dc.b	smpsNoAttack, $01
00084A4E E10F                       	smpsAlterNote       $0F
00084A50 E701                       	dc.b	smpsNoAttack, $01
00084A52 E10B                       	smpsAlterNote       $0B
00084A54 E701                       	dc.b	smpsNoAttack, $01
00084A56 E105                       	smpsAlterNote       $05
00084A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A5C E108                       	smpsAlterNote       $08
00084A5E E701                       	dc.b	smpsNoAttack, $01
00084A60 E10E                       	smpsAlterNote       $0E
00084A62 E701                       	dc.b	smpsNoAttack, $01
00084A64 E10F                       	smpsAlterNote       $0F
00084A66 8001                       	dc.b	nRst, $01
00084A68 E109                       	smpsAlterNote       $09
00084A6A C20D                       	dc.b	nF5, $0D
00084A6C E103                       	smpsAlterNote       $03
00084A6E E701                       	dc.b	smpsNoAttack, $01
00084A70 E102                       	smpsAlterNote       $02
00084A72 E701                       	dc.b	smpsNoAttack, $01
00084A74 E106                       	smpsAlterNote       $06
00084A76 E701                       	dc.b	smpsNoAttack, $01
00084A78 E10C                       	smpsAlterNote       $0C
00084A7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A7E E109                       	smpsAlterNote       $09
00084A80 E701                       	dc.b	smpsNoAttack, $01
00084A82 E103                       	smpsAlterNote       $03
00084A84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A88 E109                       	smpsAlterNote       $09
00084A8A E701                       	dc.b	smpsNoAttack, $01
00084A8C E10C                       	smpsAlterNote       $0C
00084A8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A92 E106                       	smpsAlterNote       $06
00084A94 E701                       	dc.b	smpsNoAttack, $01
00084A96 E102                       	smpsAlterNote       $02
00084A98 E701                       	dc.b	smpsNoAttack, $01
00084A9A E103                       	smpsAlterNote       $03
00084A9C E701                       	dc.b	smpsNoAttack, $01
00084A9E E109                       	smpsAlterNote       $09
00084AA0 E701                       	dc.b	smpsNoAttack, $01
00084AA2 E10D                       	smpsAlterNote       $0D
00084AA4 E701                       	dc.b	smpsNoAttack, $01
00084AA6 E109                       	smpsAlterNote       $09
00084AA8 E701                       	dc.b	smpsNoAttack, $01
00084AAA E106                       	smpsAlterNote       $06
00084AAC E701                       	dc.b	smpsNoAttack, $01
00084AAE E102                       	smpsAlterNote       $02
00084AB0 E701                       	dc.b	smpsNoAttack, $01
00084AB2 E106                       	smpsAlterNote       $06
00084AB4 E701                       	dc.b	smpsNoAttack, $01
00084AB6 E10C                       	smpsAlterNote       $0C
00084AB8 E701                       	dc.b	smpsNoAttack, $01
00084ABA E10D                       	smpsAlterNote       $0D
00084ABC E701                       	dc.b	smpsNoAttack, $01
00084ABE E109                       	smpsAlterNote       $09
00084AC0 E701                       	dc.b	smpsNoAttack, $01
00084AC2 E103                       	smpsAlterNote       $03
00084AC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AC8 E106                       	smpsAlterNote       $06
00084ACA E701                       	dc.b	smpsNoAttack, $01
00084ACC E10C                       	smpsAlterNote       $0C
00084ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AD2 E106                       	smpsAlterNote       $06
00084AD4 E701                       	dc.b	smpsNoAttack, $01
00084AD6 E103                       	smpsAlterNote       $03
00084AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ADC E109                       	smpsAlterNote       $09
00084ADE E701                       	dc.b	smpsNoAttack, $01
00084AE0 E10D                       	smpsAlterNote       $0D
00084AE2 E701                       	dc.b	smpsNoAttack, $01
00084AE4 E10C                       	smpsAlterNote       $0C
00084AE6 E701                       	dc.b	smpsNoAttack, $01
00084AE8 E106                       	smpsAlterNote       $06
00084AEA E701                       	dc.b	smpsNoAttack, $01
00084AEC E102                       	smpsAlterNote       $02
00084AEE E701                       	dc.b	smpsNoAttack, $01
00084AF0 E106                       	smpsAlterNote       $06
00084AF2 E701                       	dc.b	smpsNoAttack, $01
00084AF4 E109                       	smpsAlterNote       $09
00084AF6 E701                       	dc.b	smpsNoAttack, $01
00084AF8 E10D                       	smpsAlterNote       $0D
00084AFA E701                       	dc.b	smpsNoAttack, $01
00084AFC E109                       	smpsAlterNote       $09
00084AFE E701                       	dc.b	smpsNoAttack, $01
00084B00 E103                       	smpsAlterNote       $03
00084B02 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084B06 E109                       	smpsAlterNote       $09
00084B08 C206                       	dc.b	nF5, $06
00084B0A E108                       	smpsAlterNote       $08
00084B0C C10E                       	dc.b	nE5, $0E
00084B0E E102                       	smpsAlterNote       $02
00084B10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B14 E108                       	smpsAlterNote       $08
00084B16 E701                       	dc.b	smpsNoAttack, $01
00084B18 E10B                       	smpsAlterNote       $0B
00084B1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B1E E105                       	smpsAlterNote       $05
00084B20 E701                       	dc.b	smpsNoAttack, $01
00084B22 E101                       	smpsAlterNote       $01
00084B24 E701                       	dc.b	smpsNoAttack, $01
00084B26 E102                       	smpsAlterNote       $02
00084B28 E701                       	dc.b	smpsNoAttack, $01
00084B2A E108                       	smpsAlterNote       $08
00084B2C E701                       	dc.b	smpsNoAttack, $01
00084B2E E10C                       	smpsAlterNote       $0C
00084B30 E701                       	dc.b	smpsNoAttack, $01
00084B32 E107                       	smpsAlterNote       $07
00084B34 BF0E                       	dc.b	nD5, $0E
00084B36 E101                       	smpsAlterNote       $01
00084B38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B3C E107                       	smpsAlterNote       $07
00084B3E E701                       	dc.b	smpsNoAttack, $01
00084B40 E10A                       	smpsAlterNote       $0A
00084B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B46 E104                       	smpsAlterNote       $04
00084B48 E701                       	dc.b	smpsNoAttack, $01
00084B4A E100                       	smpsAlterNote       $00
00084B4C E701                       	dc.b	smpsNoAttack, $01
00084B4E E104                       	smpsAlterNote       $04
00084B50 E701                       	dc.b	smpsNoAttack, $01
00084B52 E107                       	smpsAlterNote       $07
00084B54 E701                       	dc.b	smpsNoAttack, $01
00084B56 E10B                       	smpsAlterNote       $0B
00084B58 E701                       	dc.b	smpsNoAttack, $01
00084B5A E107                       	smpsAlterNote       $07
00084B5C E701                       	dc.b	smpsNoAttack, $01
00084B5E E101                       	smpsAlterNote       $01
00084B60 E701                       	dc.b	smpsNoAttack, $01
00084B62 E100                       	smpsAlterNote       $00
00084B64 E701                       	dc.b	smpsNoAttack, $01
00084B66 E104                       	smpsAlterNote       $04
00084B68 E701                       	dc.b	smpsNoAttack, $01
00084B6A E10A                       	smpsAlterNote       $0A
00084B6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B70 E107                       	smpsAlterNote       $07
00084B72 E701                       	dc.b	smpsNoAttack, $01
00084B74 E101                       	smpsAlterNote       $01
00084B76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B7A E107                       	smpsAlterNote       $07
00084B7C E701                       	dc.b	smpsNoAttack, $01
00084B7E E10A                       	smpsAlterNote       $0A
00084B80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B84 E104                       	smpsAlterNote       $04
00084B86 E701                       	dc.b	smpsNoAttack, $01
00084B88 E100                       	smpsAlterNote       $00
00084B8A E701                       	dc.b	smpsNoAttack, $01
00084B8C E101                       	smpsAlterNote       $01
00084B8E E701                       	dc.b	smpsNoAttack, $01
00084B90 E107                       	smpsAlterNote       $07
00084B92 E701                       	dc.b	smpsNoAttack, $01
00084B94 E10B                       	smpsAlterNote       $0B
00084B96 E701                       	dc.b	smpsNoAttack, $01
00084B98 E107                       	smpsAlterNote       $07
00084B9A E701                       	dc.b	smpsNoAttack, $01
00084B9C E104                       	smpsAlterNote       $04
00084B9E E701                       	dc.b	smpsNoAttack, $01
00084BA0 E100                       	smpsAlterNote       $00
00084BA2 E701                       	dc.b	smpsNoAttack, $01
00084BA4 E104                       	smpsAlterNote       $04
00084BA6 E701                       	dc.b	smpsNoAttack, $01
00084BA8 E10A                       	smpsAlterNote       $0A
00084BAA E701                       	dc.b	smpsNoAttack, $01
00084BAC E10B                       	smpsAlterNote       $0B
00084BAE E701                       	dc.b	smpsNoAttack, $01
00084BB0 E107                       	smpsAlterNote       $07
00084BB2 E701                       	dc.b	smpsNoAttack, $01
00084BB4 E101                       	smpsAlterNote       $01
00084BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BBA E104                       	smpsAlterNote       $04
00084BBC E701                       	dc.b	smpsNoAttack, $01
00084BBE E10A                       	smpsAlterNote       $0A
00084BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BC4 E104                       	smpsAlterNote       $04
00084BC6 E701                       	dc.b	smpsNoAttack, $01
00084BC8 E101                       	smpsAlterNote       $01
00084BCA E701                       	dc.b	smpsNoAttack, $01
00084BCE E107                       	smpsAlterNote       $07
00084BD0 E6FF                       	smpsAlterVol        $FF
00084BD2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00084BDE 8004                       	dc.b	nRst, $04
00084BE2 E109                       	smpsAlterNote       $09
00084BE4 E602                       	smpsAlterVol        $02
00084BE6 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00084BEC E108                       	smpsAlterNote       $08
00084BEE B502 8001                  	dc.b	nE4, $02, nRst, $01
00084BF2 E109                       	smpsAlterNote       $09
00084BF4 B60D                       	dc.b	nF4, $0D
00084BF6 E106                       	smpsAlterNote       $06
00084BF8 E701                       	dc.b	smpsNoAttack, $01
00084BFA E102                       	smpsAlterNote       $02
00084BFC E701                       	dc.b	smpsNoAttack, $01
00084BFE E106                       	smpsAlterNote       $06
00084C00 E701                       	dc.b	smpsNoAttack, $01
00084C02 E109                       	smpsAlterNote       $09
00084C04 E701                       	dc.b	smpsNoAttack, $01
00084C06 E10D                       	smpsAlterNote       $0D
00084C08 E701                       	dc.b	smpsNoAttack, $01
00084C0A E109                       	smpsAlterNote       $09
00084C0C E701                       	dc.b	smpsNoAttack, $01
00084C0E E103                       	smpsAlterNote       $03
00084C10 E701                       	dc.b	smpsNoAttack, $01
00084C12 E102                       	smpsAlterNote       $02
00084C14 E701                       	dc.b	smpsNoAttack, $01
00084C16 E106                       	smpsAlterNote       $06
00084C18 E701                       	dc.b	smpsNoAttack, $01
00084C1A E10C                       	smpsAlterNote       $0C
00084C1C E701                       	dc.b	smpsNoAttack, $01
00084C1E E10D                       	smpsAlterNote       $0D
00084C20 8001                       	dc.b	nRst, $01
00084C22 E109                       	smpsAlterNote       $09
00084C24 B80D                       	dc.b	nG4, $0D
00084C26 E106                       	smpsAlterNote       $06
00084C28 E701                       	dc.b	smpsNoAttack, $01
00084C2A E102                       	smpsAlterNote       $02
00084C2C E701                       	dc.b	smpsNoAttack, $01
00084C2E E106                       	smpsAlterNote       $06
00084C30 E701                       	dc.b	smpsNoAttack, $01
00084C32 E10C                       	smpsAlterNote       $0C
00084C34 E701                       	dc.b	smpsNoAttack, $01
00084C36 E10D                       	smpsAlterNote       $0D
00084C38 E701                       	dc.b	smpsNoAttack, $01
00084C3A E109                       	smpsAlterNote       $09
00084C3C E701                       	dc.b	smpsNoAttack, $01
00084C3E E103                       	smpsAlterNote       $03
00084C40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C44 E106                       	smpsAlterNote       $06
00084C46 E701                       	dc.b	smpsNoAttack, $01
00084C48 E10C                       	smpsAlterNote       $0C
00084C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C4E E106                       	smpsAlterNote       $06
00084C50 E701                       	dc.b	smpsNoAttack, $01
00084C52 E103                       	smpsAlterNote       $03
00084C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C58 E109                       	smpsAlterNote       $09
00084C5A E701                       	dc.b	smpsNoAttack, $01
00084C5C E10D                       	smpsAlterNote       $0D
00084C5E E701                       	dc.b	smpsNoAttack, $01
00084C60 E10C                       	smpsAlterNote       $0C
00084C62 E701                       	dc.b	smpsNoAttack, $01
00084C64 E109                       	smpsAlterNote       $09
00084C66 8001                       	dc.b	nRst, $01
00084C68 E10B                       	smpsAlterNote       $0B
00084C6A BA03                       	dc.b	nA4, $03
00084C6C E10C                       	smpsAlterNote       $0C
00084C6E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00084C72 E10B                       	smpsAlterNote       $0B
00084C74 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00084C7A E10C                       	smpsAlterNote       $0C
00084C7C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084C80 E10B                       	smpsAlterNote       $0B
00084C82 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00084C88 E10C                       	smpsAlterNote       $0C
00084C8A D303                       	dc.b	nBb6, $03
00084C8C E10B                       	smpsAlterNote       $0B
00084C8E D20D                       	dc.b	nA6, $0D
00084C90 E108                       	smpsAlterNote       $08
00084C92 E701                       	dc.b	smpsNoAttack, $01
00084C94 E104                       	smpsAlterNote       $04
00084C96 E701                       	dc.b	smpsNoAttack, $01
00084C98 E105                       	smpsAlterNote       $05
00084C9A E701                       	dc.b	smpsNoAttack, $01
00084C9C E10B                       	smpsAlterNote       $0B
00084C9E E701                       	dc.b	smpsNoAttack, $01
00084CA0 E10F                       	smpsAlterNote       $0F
00084CA2 E701                       	dc.b	smpsNoAttack, $01
00084CA4 E10B                       	smpsAlterNote       $0B
00084CA6 E701                       	dc.b	smpsNoAttack, $01
00084CA8 E108                       	smpsAlterNote       $08
00084CAA E701                       	dc.b	smpsNoAttack, $01
00084CAC E104                       	smpsAlterNote       $04
00084CAE E701                       	dc.b	smpsNoAttack, $01
00084CB0 E108                       	smpsAlterNote       $08
00084CB2 E701                       	dc.b	smpsNoAttack, $01
00084CB4 E10E                       	smpsAlterNote       $0E
00084CB6 E701                       	dc.b	smpsNoAttack, $01
00084CB8 E10F                       	smpsAlterNote       $0F
00084CBA E701                       	dc.b	smpsNoAttack, $01
00084CBC E10B                       	smpsAlterNote       $0B
00084CBE E701                       	dc.b	smpsNoAttack, $01
00084CC0 E105                       	smpsAlterNote       $05
00084CC2 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00084CC8 E109                       	smpsAlterNote       $09
00084CCA CE07                       	dc.b	nF6, $07
00084CCC E108                       	smpsAlterNote       $08
00084CCE CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084CD2 E109                       	smpsAlterNote       $09
00084CD4 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00084CD8 E108                       	smpsAlterNote       $08
00084CDA CC0D                       	dc.b	nEb6, $0D
00084CDC E102                       	smpsAlterNote       $02
00084CDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CE2 E108                       	smpsAlterNote       $08
00084CE4 E701                       	dc.b	smpsNoAttack, $01
00084CE6 E10B                       	smpsAlterNote       $0B
00084CE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CEC E105                       	smpsAlterNote       $05
00084CEE E701                       	dc.b	smpsNoAttack, $01
00084CF0 E101                       	smpsAlterNote       $01
00084CF2 E701                       	dc.b	smpsNoAttack, $01
00084CF4 E102                       	smpsAlterNote       $02
00084CF6 E701                       	dc.b	smpsNoAttack, $01
00084CF8 E108                       	smpsAlterNote       $08
00084CFA E701                       	dc.b	smpsNoAttack, $01
00084CFC E10C                       	smpsAlterNote       $0C
00084CFE E701                       	dc.b	smpsNoAttack, $01
00084D00 E108                       	smpsAlterNote       $08
00084D02 E701                       	dc.b	smpsNoAttack, $01
00084D04 E105                       	smpsAlterNote       $05
00084D06 E701                       	dc.b	smpsNoAttack, $01
00084D08 E101                       	smpsAlterNote       $01
00084D0A E701                       	dc.b	smpsNoAttack, $01
00084D0C E105                       	smpsAlterNote       $05
00084D0E E701                       	dc.b	smpsNoAttack, $01
00084D10 E10B                       	smpsAlterNote       $0B
00084D12 E701                       	dc.b	smpsNoAttack, $01
00084D14 E10C                       	smpsAlterNote       $0C
00084D16 E701                       	dc.b	smpsNoAttack, $01
00084D18 E108                       	smpsAlterNote       $08
00084D1A E701                       	dc.b	smpsNoAttack, $01
00084D1C E107                       	smpsAlterNote       $07
00084D1E CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00084D28 E10B                       	smpsAlterNote       $0B
00084D2A C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00084D34 E109                       	smpsAlterNote       $09
00084D36 C203                       	dc.b	nF5, $03
00084D38 E108                       	smpsAlterNote       $08
00084D3A C103 8001                  	dc.b	nE5, $03, nRst, $01
00084D3E E109                       	smpsAlterNote       $09
00084D40 C20D                       	dc.b	nF5, $0D
00084D42 E108                       	smpsAlterNote       $08
00084D44 C10E                       	dc.b	nE5, $0E
00084D46 E107                       	smpsAlterNote       $07
00084D48 BF0D                       	dc.b	nD5, $0D
00084D4A E104                       	smpsAlterNote       $04
00084D4C E701                       	dc.b	smpsNoAttack, $01
00084D4E E100                       	smpsAlterNote       $00
00084D50 E701                       	dc.b	smpsNoAttack, $01
00084D52 E104                       	smpsAlterNote       $04
00084D54 E701                       	dc.b	smpsNoAttack, $01
00084D56 E107                       	smpsAlterNote       $07
00084D58 E701                       	dc.b	smpsNoAttack, $01
00084D5A E10B                       	smpsAlterNote       $0B
00084D5C E701                       	dc.b	smpsNoAttack, $01
00084D5E E107                       	smpsAlterNote       $07
00084D60 E701                       	dc.b	smpsNoAttack, $01
00084D62 E101                       	smpsAlterNote       $01
00084D64 E701                       	dc.b	smpsNoAttack, $01
00084D66 E100                       	smpsAlterNote       $00
00084D68 E701                       	dc.b	smpsNoAttack, $01
00084D6A E104                       	smpsAlterNote       $04
00084D6C E701                       	dc.b	smpsNoAttack, $01
00084D6E E10A                       	smpsAlterNote       $0A
00084D70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D74 E107                       	smpsAlterNote       $07
00084D76 E701                       	dc.b	smpsNoAttack, $01
00084D78 E101                       	smpsAlterNote       $01
00084D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D7E E107                       	smpsAlterNote       $07
00084D80 E701                       	dc.b	smpsNoAttack, $01
00084D82 E10A                       	smpsAlterNote       $0A
00084D84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D88 E104                       	smpsAlterNote       $04
00084D8A E701                       	dc.b	smpsNoAttack, $01
00084D8C E100                       	smpsAlterNote       $00
00084D8E E701                       	dc.b	smpsNoAttack, $01
00084D90 E101                       	smpsAlterNote       $01
00084D92 E701                       	dc.b	smpsNoAttack, $01
00084D94 E107                       	smpsAlterNote       $07
00084D96 E701                       	dc.b	smpsNoAttack, $01
00084D98 E10B                       	smpsAlterNote       $0B
00084D9A E701                       	dc.b	smpsNoAttack, $01
00084D9C E107                       	smpsAlterNote       $07
00084D9E E701                       	dc.b	smpsNoAttack, $01
00084DA0 E104                       	smpsAlterNote       $04
00084DA2 E701                       	dc.b	smpsNoAttack, $01
00084DA4 E100                       	smpsAlterNote       $00
00084DA6 E701                       	dc.b	smpsNoAttack, $01
00084DA8 E104                       	smpsAlterNote       $04
00084DAA E701                       	dc.b	smpsNoAttack, $01
00084DAC E10A                       	smpsAlterNote       $0A
00084DAE E701                       	dc.b	smpsNoAttack, $01
00084DB0 E10B                       	smpsAlterNote       $0B
00084DB2 E701                       	dc.b	smpsNoAttack, $01
00084DB4 E107                       	smpsAlterNote       $07
00084DB6 E701                       	dc.b	smpsNoAttack, $01
00084DB8 E101                       	smpsAlterNote       $01
00084DBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DBE E104                       	smpsAlterNote       $04
00084DC0 E701                       	dc.b	smpsNoAttack, $01
00084DC2 E10A                       	smpsAlterNote       $0A
00084DC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DC8 E104                       	smpsAlterNote       $04
00084DCA E701                       	dc.b	smpsNoAttack, $01
00084DCC E101                       	smpsAlterNote       $01
00084DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DD2 E107                       	smpsAlterNote       $07
00084DD4 E701                       	dc.b	smpsNoAttack, $01
00084DD6 E10B                       	smpsAlterNote       $0B
00084DD8 E701                       	dc.b	smpsNoAttack, $01
00084DDA E10A                       	smpsAlterNote       $0A
00084DDC E701                       	dc.b	smpsNoAttack, $01
00084DDE E104                       	smpsAlterNote       $04
00084DE0 E701                       	dc.b	smpsNoAttack, $01
00084DE2 E100                       	smpsAlterNote       $00
00084DE4 E701                       	dc.b	smpsNoAttack, $01
00084DE6 E104                       	smpsAlterNote       $04
00084DE8 E701                       	dc.b	smpsNoAttack, $01
00084DEA E107                       	smpsAlterNote       $07
00084DEC E701                       	dc.b	smpsNoAttack, $01
00084DEE E10B                       	smpsAlterNote       $0B
00084DF0 E701                       	dc.b	smpsNoAttack, $01
00084DF2 E107                       	smpsAlterNote       $07
00084DF4 E701                       	dc.b	smpsNoAttack, $01
00084DF6 E101                       	smpsAlterNote       $01
00084DF8 E701                       	dc.b	smpsNoAttack, $01
00084DFA E100                       	smpsAlterNote       $00
00084DFC E701                       	dc.b	smpsNoAttack, $01
00084DFE E104                       	smpsAlterNote       $04
00084E00 E701                       	dc.b	smpsNoAttack, $01
00084E02 E10A                       	smpsAlterNote       $0A
00084E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E08 E107                       	smpsAlterNote       $07
00084E0A E701                       	dc.b	smpsNoAttack, $01
00084E0C E101                       	smpsAlterNote       $01
00084E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E12 E107                       	smpsAlterNote       $07
00084E14 E701                       	dc.b	smpsNoAttack, $01
00084E16 E10A                       	smpsAlterNote       $0A
00084E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E1C E104                       	smpsAlterNote       $04
00084E1E E701                       	dc.b	smpsNoAttack, $01
00084E20 E100                       	smpsAlterNote       $00
00084E22 E701                       	dc.b	smpsNoAttack, $01
00084E24 E101                       	smpsAlterNote       $01
00084E26 E701                       	dc.b	smpsNoAttack, $01
00084E28 E107                       	smpsAlterNote       $07
00084E2A E701                       	dc.b	smpsNoAttack, $01
00084E2C E10B                       	smpsAlterNote       $0B
00084E2E E701                       	dc.b	smpsNoAttack, $01
00084E30 E107                       	smpsAlterNote       $07
00084E32 E701                       	dc.b	smpsNoAttack, $01
00084E34 E104                       	smpsAlterNote       $04
00084E36 E701                       	dc.b	smpsNoAttack, $01
00084E38 E100                       	smpsAlterNote       $00
00084E3A E701                       	dc.b	smpsNoAttack, $01
00084E3C E101                       	smpsAlterNote       $01
00084E3E 8001                       	dc.b	nRst, $01
00084E40 E109                       	smpsAlterNote       $09
00084E42 C20D                       	dc.b	nF5, $0D
00084E44 E106                       	smpsAlterNote       $06
00084E46 E701                       	dc.b	smpsNoAttack, $01
00084E48 E102                       	smpsAlterNote       $02
00084E4A E701                       	dc.b	smpsNoAttack, $01
00084E4C E106                       	smpsAlterNote       $06
00084E4E E701                       	dc.b	smpsNoAttack, $01
00084E50 E10C                       	smpsAlterNote       $0C
00084E52 E701                       	dc.b	smpsNoAttack, $01
00084E54 E10D                       	smpsAlterNote       $0D
00084E56 E701                       	dc.b	smpsNoAttack, $01
00084E58 E109                       	smpsAlterNote       $09
00084E5A E701                       	dc.b	smpsNoAttack, $01
00084E5C E103                       	smpsAlterNote       $03
00084E5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E62 E106                       	smpsAlterNote       $06
00084E64 E701                       	dc.b	smpsNoAttack, $01
00084E66 E10C                       	smpsAlterNote       $0C
00084E68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E6C E106                       	smpsAlterNote       $06
00084E6E E701                       	dc.b	smpsNoAttack, $01
00084E70 E103                       	smpsAlterNote       $03
00084E72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E76 E109                       	smpsAlterNote       $09
00084E78 E701                       	dc.b	smpsNoAttack, $01
00084E7A E10D                       	smpsAlterNote       $0D
00084E7C E701                       	dc.b	smpsNoAttack, $01
00084E7E E10C                       	smpsAlterNote       $0C
00084E80 E701                       	dc.b	smpsNoAttack, $01
00084E82 E109                       	smpsAlterNote       $09
00084E84 8001                       	dc.b	nRst, $01
00084E86 E108                       	smpsAlterNote       $08
00084E88 C10D                       	dc.b	nE5, $0D
00084E8A E109                       	smpsAlterNote       $09
00084E8C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00084E90 E108                       	smpsAlterNote       $08
00084E92 C10D                       	dc.b	nE5, $0D
00084E94 E102                       	smpsAlterNote       $02
00084E96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E9A E105                       	smpsAlterNote       $05
00084E9C E701                       	dc.b	smpsNoAttack, $01
00084E9E E108                       	smpsAlterNote       $08
00084EA0 8001                       	dc.b	nRst, $01
00084EA2 E107                       	smpsAlterNote       $07
00084EA4 BF0D                       	dc.b	nD5, $0D
00084EA6 E108                       	smpsAlterNote       $08
00084EA8 C107                       	dc.b	nE5, $07
00084EAA E109                       	smpsAlterNote       $09
00084EAC C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00084EB2 E10B                       	smpsAlterNote       $0B
00084EB4 C603                       	dc.b	nA5, $03
00084EB6 E10C                       	smpsAlterNote       $0C
00084EB8 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00084EBE E10B                       	smpsAlterNote       $0B
00084EC0 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00084EC6 E109                       	smpsAlterNote       $09
00084EC8 D003                       	dc.b	nG6, $03
00084ECA E108                       	smpsAlterNote       $08
00084ECC CD02 8001                  	dc.b	nE6, $02, nRst, $01
00084ED0 E10B                       	smpsAlterNote       $0B
00084ED2 C601 8001                  	dc.b	nA5, $01, nRst, $01
00084ED6 E108                       	smpsAlterNote       $08
00084ED8 C102                       	dc.b	nE5, $02
00084EDC E10C                       	smpsAlterNote       $0C
00084EDE E6FB                       	smpsAlterVol        $FB
00084EE0 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00084EEC 8001                       	dc.b	nRst, $01
00084EEE E10B                       	smpsAlterNote       $0B
00084EF0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00084EF8 E107                       	smpsAlterNote       $07
00084EFA A706 8001                  	dc.b	nD3, $06, nRst, $01
00084EFE E10B                       	smpsAlterNote       $0B
00084F00 A203                       	dc.b	nA2, $03
00084F02 E109                       	smpsAlterNote       $09
00084F04 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00084F08 E108                       	smpsAlterNote       $08
00084F0A A906                       	dc.b	nE3, $06
00084F0C E107                       	smpsAlterNote       $07
00084F0E A703 8001                  	dc.b	nD3, $03, nRst, $01
00084F12 E106                       	smpsAlterNote       $06
00084F14 A503                       	dc.b	nC3, $03
00084F16 E10C                       	smpsAlterNote       $0C
00084F18 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084F1C E10B                       	smpsAlterNote       $0B
00084F1E A203 8004                  	dc.b	nA2, $03, nRst, $04
00084F22 E11B                       	smpsAlterNote       $1B
00084F24 C401                       	dc.b	nG5, $01
00084F26 E1F4                       	smpsAlterNote       $F4
00084F28 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00084F2B E106                       	smpsAlterNote       $06
00084F2D E701                       	dc.b	smpsNoAttack, $01
00084F2F E10F                       	smpsAlterNote       $0F
00084F31 E701                       	dc.b	smpsNoAttack, $01
00084F33 E1E4                       	smpsAlterNote       $E4
00084F35 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00084F38 E1F6                       	smpsAlterNote       $F6
00084F3A E701                       	dc.b	smpsNoAttack, $01
00084F3C E108                       	smpsAlterNote       $08
00084F3E E701                       	dc.b	smpsNoAttack, $01
00084F40 E10B                       	smpsAlterNote       $0B
00084F42 E706                       	dc.b	smpsNoAttack, $06
00084F44 E105                       	smpsAlterNote       $05
00084F46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F4A E108                       	smpsAlterNote       $08
00084F4C E701                       	dc.b	smpsNoAttack, $01
00084F4E E10E                       	smpsAlterNote       $0E
00084F50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F54 E108                       	smpsAlterNote       $08
00084F56 E701                       	dc.b	smpsNoAttack, $01
00084F58 E105                       	smpsAlterNote       $05
00084F5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F5E E10B                       	smpsAlterNote       $0B
00084F60 E701                       	dc.b	smpsNoAttack, $01
00084F62 E10F                       	smpsAlterNote       $0F
00084F64 E701                       	dc.b	smpsNoAttack, $01
00084F66 E10E                       	smpsAlterNote       $0E
00084F68 E701                       	dc.b	smpsNoAttack, $01
00084F6A E108                       	smpsAlterNote       $08
00084F6C E701                       	dc.b	smpsNoAttack, $01
00084F6E E104                       	smpsAlterNote       $04
00084F70 E701                       	dc.b	smpsNoAttack, $01
00084F72 E108                       	smpsAlterNote       $08
00084F74 E701                       	dc.b	smpsNoAttack, $01
00084F76 E10B                       	smpsAlterNote       $0B
00084F78 E701                       	dc.b	smpsNoAttack, $01
00084F7A E10F                       	smpsAlterNote       $0F
00084F7C E701                       	dc.b	smpsNoAttack, $01
00084F7E E10B                       	smpsAlterNote       $0B
00084F80 E701                       	dc.b	smpsNoAttack, $01
00084F82 E105                       	smpsAlterNote       $05
00084F84 E701                       	dc.b	smpsNoAttack, $01
00084F86 E104                       	smpsAlterNote       $04
00084F88 E701                       	dc.b	smpsNoAttack, $01
00084F8A E108                       	smpsAlterNote       $08
00084F8C E701                       	dc.b	smpsNoAttack, $01
00084F8E E10E                       	smpsAlterNote       $0E
00084F90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F94 E10B                       	smpsAlterNote       $0B
00084F96 E701                       	dc.b	smpsNoAttack, $01
00084F98 E105                       	smpsAlterNote       $05
00084F9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F9E E10B                       	smpsAlterNote       $0B
00084FA0 E701                       	dc.b	smpsNoAttack, $01
00084FA2 E10E                       	smpsAlterNote       $0E
00084FA4 E701                       	dc.b	smpsNoAttack, $01
00084FA6 E10F                       	smpsAlterNote       $0F
00084FA8 8001                       	dc.b	nRst, $01
00084FAA E109                       	smpsAlterNote       $09
00084FAC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00084FB2 E108                       	smpsAlterNote       $08
00084FB4 C101 8001                  	dc.b	nE5, $01, nRst, $01
00084FB8 E109                       	smpsAlterNote       $09
00084FBA C202                       	dc.b	nF5, $02
00084FBC E108                       	smpsAlterNote       $08
00084FBE C102                       	dc.b	nE5, $02
00084FC0 E107                       	smpsAlterNote       $07
00084FC2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084FC6 E108                       	smpsAlterNote       $08
00084FC8 C101 8001                  	dc.b	nE5, $01, nRst, $01
00084FCC E107                       	smpsAlterNote       $07
00084FCE BF02                       	dc.b	nD5, $02
00084FD0 E106                       	smpsAlterNote       $06
00084FD2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00084FD6 E107                       	smpsAlterNote       $07
00084FD8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00084FDC E106                       	smpsAlterNote       $06
00084FDE BD02                       	dc.b	nC5, $02
00084FE0 E10C                       	smpsAlterNote       $0C
00084FE2 BB02                       	dc.b	nBb4, $02
00084FE4 E106                       	smpsAlterNote       $06
00084FE6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00084FEA E10C                       	smpsAlterNote       $0C
00084FEC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00084FF0 E10B                       	smpsAlterNote       $0B
00084FF2 BA02                       	dc.b	nA4, $02
00084FF4 E10C                       	smpsAlterNote       $0C
00084FF6 BB02                       	dc.b	nBb4, $02
00084FF8 E10B                       	smpsAlterNote       $0B
00084FFA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00085004 E108                       	smpsAlterNote       $08
00085006 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008500E E107                       	smpsAlterNote       $07
00085010 BE02                       	dc.b	nCs5, $02
00085012 E10B                       	smpsAlterNote       $0B
00085014 BA02                       	dc.b	nA4, $02
00085016 E109                       	smpsAlterNote       $09
00085018 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008501C E108                       	smpsAlterNote       $08
0008501E B501 8001                  	dc.b	nE4, $01, nRst, $01
00085022 E10B                       	smpsAlterNote       $0B
00085024 AE02                       	dc.b	nA3, $02
00085026 E10C                       	smpsAlterNote       $0C
00085028 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00085034 E10B                       	smpsAlterNote       $0B
00085036 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008503E E107                       	smpsAlterNote       $07
00085040 A706 8001                  	dc.b	nD3, $06, nRst, $01
00085044 E10B                       	smpsAlterNote       $0B
00085046 A203                       	dc.b	nA2, $03
00085048 E109                       	smpsAlterNote       $09
0008504A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008504E E108                       	smpsAlterNote       $08
00085050 A906 8001                  	dc.b	nE3, $06, nRst, $01
00085054 E107                       	smpsAlterNote       $07
00085056 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008505A E106                       	smpsAlterNote       $06
0008505C A503                       	dc.b	nC3, $03
0008505E E10C                       	smpsAlterNote       $0C
00085060 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085066 E107                       	smpsAlterNote       $07
00085068 B20D                       	dc.b	nCs4, $0D
0008506A E104                       	smpsAlterNote       $04
0008506C E701                       	dc.b	smpsNoAttack, $01
0008506E E100                       	smpsAlterNote       $00
00085070 E701                       	dc.b	smpsNoAttack, $01
00085072 E104                       	smpsAlterNote       $04
00085074 E701                       	dc.b	smpsNoAttack, $01
00085076 E10A                       	smpsAlterNote       $0A
00085078 E701                       	dc.b	smpsNoAttack, $01
0008507A E10B                       	smpsAlterNote       $0B
0008507C E701                       	dc.b	smpsNoAttack, $01
0008507E E107                       	smpsAlterNote       $07
00085080 E701                       	dc.b	smpsNoAttack, $01
00085082 E101                       	smpsAlterNote       $01
00085084 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085088 E104                       	smpsAlterNote       $04
0008508A E701                       	dc.b	smpsNoAttack, $01
0008508C E10A                       	smpsAlterNote       $0A
0008508E E701                       	dc.b	smpsNoAttack, $01
00085090 E10B                       	smpsAlterNote       $0B
00085092 8001                       	dc.b	nRst, $01
00085094 E107                       	smpsAlterNote       $07
00085096 B30D                       	dc.b	nD4, $0D
00085098 E104                       	smpsAlterNote       $04
0008509A E701                       	dc.b	smpsNoAttack, $01
0008509C E100                       	smpsAlterNote       $00
0008509E E701                       	dc.b	smpsNoAttack, $01
000850A0 E104                       	smpsAlterNote       $04
000850A2 E701                       	dc.b	smpsNoAttack, $01
000850A4 E10A                       	smpsAlterNote       $0A
000850A6 E701                       	dc.b	smpsNoAttack, $01
000850A8 E10B                       	smpsAlterNote       $0B
000850AA E701                       	dc.b	smpsNoAttack, $01
000850AC E107                       	smpsAlterNote       $07
000850AE E701                       	dc.b	smpsNoAttack, $01
000850B0 E101                       	smpsAlterNote       $01
000850B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850B6 E104                       	smpsAlterNote       $04
000850B8 E701                       	dc.b	smpsNoAttack, $01
000850BA E10A                       	smpsAlterNote       $0A
000850BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850C0 E104                       	smpsAlterNote       $04
000850C2 E701                       	dc.b	smpsNoAttack, $01
000850C4 E101                       	smpsAlterNote       $01
000850C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850CA E107                       	smpsAlterNote       $07
000850CC E701                       	dc.b	smpsNoAttack, $01
000850CE E10B                       	smpsAlterNote       $0B
000850D0 E701                       	dc.b	smpsNoAttack, $01
000850D2 E10A                       	smpsAlterNote       $0A
000850D4 E701                       	dc.b	smpsNoAttack, $01
000850D6 E107                       	smpsAlterNote       $07
000850D8 8001                       	dc.b	nRst, $01
000850DA E108                       	smpsAlterNote       $08
000850DC B50D                       	dc.b	nE4, $0D
000850DE E102                       	smpsAlterNote       $02
000850E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850E4 E105                       	smpsAlterNote       $05
000850E6 E701                       	dc.b	smpsNoAttack, $01
000850E8 E10B                       	smpsAlterNote       $0B
000850EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850EE E105                       	smpsAlterNote       $05
000850F0 E701                       	dc.b	smpsNoAttack, $01
000850F2 E102                       	smpsAlterNote       $02
000850F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850F8 E108                       	smpsAlterNote       $08
000850FA E701                       	dc.b	smpsNoAttack, $01
000850FC E10C                       	smpsAlterNote       $0C
000850FE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085102 E107                       	smpsAlterNote       $07
00085104 B30D                       	dc.b	nD4, $0D
00085106 E101                       	smpsAlterNote       $01
00085108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008510C E104                       	smpsAlterNote       $04
0008510E E701                       	dc.b	smpsNoAttack, $01
00085110 E10A                       	smpsAlterNote       $0A
00085112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085116 E104                       	smpsAlterNote       $04
00085118 E701                       	dc.b	smpsNoAttack, $01
0008511A E101                       	smpsAlterNote       $01
0008511C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085120 E107                       	smpsAlterNote       $07
00085122 E701                       	dc.b	smpsNoAttack, $01
00085124 E10B                       	smpsAlterNote       $0B
00085126 E701                       	dc.b	smpsNoAttack, $01
00085128 E10A                       	smpsAlterNote       $0A
0008512A E701                       	dc.b	smpsNoAttack, $01
0008512C E104                       	smpsAlterNote       $04
0008512E E701                       	dc.b	smpsNoAttack, $01
00085130 E100                       	smpsAlterNote       $00
00085132 E701                       	dc.b	smpsNoAttack, $01
00085134 E104                       	smpsAlterNote       $04
00085136 E701                       	dc.b	smpsNoAttack, $01
00085138 E107                       	smpsAlterNote       $07
0008513A E701                       	dc.b	smpsNoAttack, $01
0008513C E10B                       	smpsAlterNote       $0B
0008513E E701                       	dc.b	smpsNoAttack, $01
00085140 E107                       	smpsAlterNote       $07
00085142 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00085146 E101                       	smpsAlterNote       $01
00085148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008514C E107                       	smpsAlterNote       $07
0008514E E701                       	dc.b	smpsNoAttack, $01
00085150 E10A                       	smpsAlterNote       $0A
00085152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085156 E104                       	smpsAlterNote       $04
00085158 E701                       	dc.b	smpsNoAttack, $01
0008515A E100                       	smpsAlterNote       $00
0008515C E701                       	dc.b	smpsNoAttack, $01
0008515E E101                       	smpsAlterNote       $01
00085160 E701                       	dc.b	smpsNoAttack, $01
00085162 E107                       	smpsAlterNote       $07
00085164 E701                       	dc.b	smpsNoAttack, $01
00085166 E10B                       	smpsAlterNote       $0B
00085168 E701                       	dc.b	smpsNoAttack, $01
0008516A E107                       	smpsAlterNote       $07
0008516C B30E                       	dc.b	nD4, $0E
0008516E E101                       	smpsAlterNote       $01
00085170 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085174 E107                       	smpsAlterNote       $07
00085176 E701                       	dc.b	smpsNoAttack, $01
00085178 E10A                       	smpsAlterNote       $0A
0008517A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008517E E104                       	smpsAlterNote       $04
00085180 E701                       	dc.b	smpsNoAttack, $01
00085182 E100                       	smpsAlterNote       $00
00085184 E701                       	dc.b	smpsNoAttack, $01
00085186 E101                       	smpsAlterNote       $01
00085188 E701                       	dc.b	smpsNoAttack, $01
0008518A E107                       	smpsAlterNote       $07
0008518C E701                       	dc.b	smpsNoAttack, $01
0008518E E10B                       	smpsAlterNote       $0B
00085190 E701                       	dc.b	smpsNoAttack, $01
00085192 E107                       	smpsAlterNote       $07
00085194 E701                       	dc.b	smpsNoAttack, $01
00085196 E104                       	smpsAlterNote       $04
00085198 E701                       	dc.b	smpsNoAttack, $01
0008519A E100                       	smpsAlterNote       $00
0008519C E701                       	dc.b	smpsNoAttack, $01
0008519E E104                       	smpsAlterNote       $04
000851A0 E701                       	dc.b	smpsNoAttack, $01
000851A2 E10A                       	smpsAlterNote       $0A
000851A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851A8 E107                       	smpsAlterNote       $07
000851AA E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000851AE E104                       	smpsAlterNote       $04
000851B0 E701                       	dc.b	smpsNoAttack, $01
000851B2 E100                       	smpsAlterNote       $00
000851B4 E701                       	dc.b	smpsNoAttack, $01
000851B6 E101                       	smpsAlterNote       $01
000851B8 E701                       	dc.b	smpsNoAttack, $01
000851BA E107                       	smpsAlterNote       $07
000851BC E701                       	dc.b	smpsNoAttack, $01
000851BE E10B                       	smpsAlterNote       $0B
000851C0 E701                       	dc.b	smpsNoAttack, $01
000851C2 E107                       	smpsAlterNote       $07
000851C4 E701                       	dc.b	smpsNoAttack, $01
000851C6 E104                       	smpsAlterNote       $04
000851C8 E701                       	dc.b	smpsNoAttack, $01
000851CA E100                       	smpsAlterNote       $00
000851CC E701                       	dc.b	smpsNoAttack, $01
000851CE E104                       	smpsAlterNote       $04
000851D0 E701                       	dc.b	smpsNoAttack, $01
000851D2 E10A                       	smpsAlterNote       $0A
000851D4 E701                       	dc.b	smpsNoAttack, $01
000851D6 E10B                       	smpsAlterNote       $0B
000851D8 E701                       	dc.b	smpsNoAttack, $01
000851DC E6FF                       	smpsAlterVol        $FF
000851DE A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000851EA 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000851F2 E109                       	smpsAlterNote       $09
000851F4 E601                       	smpsAlterVol        $01
000851F6 B60D                       	dc.b	nF4, $0D
000851F8 E106                       	smpsAlterNote       $06
000851FA E701                       	dc.b	smpsNoAttack, $01
000851FC E102                       	smpsAlterNote       $02
000851FE E701                       	dc.b	smpsNoAttack, $01
00085200 E106                       	smpsAlterNote       $06
00085202 E701                       	dc.b	smpsNoAttack, $01
00085204 E109                       	smpsAlterNote       $09
00085206 E701                       	dc.b	smpsNoAttack, $01
00085208 E10D                       	smpsAlterNote       $0D
0008520A E701                       	dc.b	smpsNoAttack, $01
0008520C E109                       	smpsAlterNote       $09
0008520E E701                       	dc.b	smpsNoAttack, $01
00085210 E103                       	smpsAlterNote       $03
00085212 E701                       	dc.b	smpsNoAttack, $01
00085214 E102                       	smpsAlterNote       $02
00085216 E701                       	dc.b	smpsNoAttack, $01
00085218 E106                       	smpsAlterNote       $06
0008521A E701                       	dc.b	smpsNoAttack, $01
0008521C E10C                       	smpsAlterNote       $0C
0008521E E701                       	dc.b	smpsNoAttack, $01
00085220 E10D                       	smpsAlterNote       $0D
00085222 8001                       	dc.b	nRst, $01
00085224 E109                       	smpsAlterNote       $09
00085226 B80D                       	dc.b	nG4, $0D
00085228 E106                       	smpsAlterNote       $06
0008522A E701                       	dc.b	smpsNoAttack, $01
0008522C E102                       	smpsAlterNote       $02
0008522E E701                       	dc.b	smpsNoAttack, $01
00085230 E106                       	smpsAlterNote       $06
00085232 E701                       	dc.b	smpsNoAttack, $01
00085234 E109                       	smpsAlterNote       $09
00085236 E701                       	dc.b	smpsNoAttack, $01
00085238 E10D                       	smpsAlterNote       $0D
0008523A E701                       	dc.b	smpsNoAttack, $01
0008523C E109                       	smpsAlterNote       $09
0008523E E701                       	dc.b	smpsNoAttack, $01
00085240 E103                       	smpsAlterNote       $03
00085242 E701                       	dc.b	smpsNoAttack, $01
00085244 E102                       	smpsAlterNote       $02
00085246 E701                       	dc.b	smpsNoAttack, $01
00085248 E106                       	smpsAlterNote       $06
0008524A E701                       	dc.b	smpsNoAttack, $01
0008524C E10C                       	smpsAlterNote       $0C
0008524E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085252 E106                       	smpsAlterNote       $06
00085254 E701                       	dc.b	smpsNoAttack, $01
00085256 E103                       	smpsAlterNote       $03
00085258 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008525C E109                       	smpsAlterNote       $09
0008525E E701                       	dc.b	smpsNoAttack, $01
00085260 E10D                       	smpsAlterNote       $0D
00085262 E701                       	dc.b	smpsNoAttack, $01
00085264 E10C                       	smpsAlterNote       $0C
00085266 E701                       	dc.b	smpsNoAttack, $01
00085268 E109                       	smpsAlterNote       $09
0008526A 8001                       	dc.b	nRst, $01
0008526C E10B                       	smpsAlterNote       $0B
0008526E BA0D                       	dc.b	nA4, $0D
00085270 E105                       	smpsAlterNote       $05
00085272 E701                       	dc.b	smpsNoAttack, $01
00085274 E104                       	smpsAlterNote       $04
00085276 E701                       	dc.b	smpsNoAttack, $01
00085278 E108                       	smpsAlterNote       $08
0008527A E701                       	dc.b	smpsNoAttack, $01
0008527C E10E                       	smpsAlterNote       $0E
0008527E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085282 E10B                       	smpsAlterNote       $0B
00085284 E701                       	dc.b	smpsNoAttack, $01
00085286 E105                       	smpsAlterNote       $05
00085288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008528C E10B                       	smpsAlterNote       $0B
0008528E E701                       	dc.b	smpsNoAttack, $01
00085290 E10E                       	smpsAlterNote       $0E
00085292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085296 E108                       	smpsAlterNote       $08
00085298 E701                       	dc.b	smpsNoAttack, $01
0008529A E104                       	smpsAlterNote       $04
0008529C E701                       	dc.b	smpsNoAttack, $01
0008529E E105                       	smpsAlterNote       $05
000852A0 E701                       	dc.b	smpsNoAttack, $01
000852A2 E10B                       	smpsAlterNote       $0B
000852A4 E701                       	dc.b	smpsNoAttack, $01
000852A6 E10F                       	smpsAlterNote       $0F
000852A8 E701                       	dc.b	smpsNoAttack, $01
000852AA E10B                       	smpsAlterNote       $0B
000852AC E701                       	dc.b	smpsNoAttack, $01
000852AE E108                       	smpsAlterNote       $08
000852B0 E701                       	dc.b	smpsNoAttack, $01
000852B2 E104                       	smpsAlterNote       $04
000852B4 E701                       	dc.b	smpsNoAttack, $01
000852B6 E108                       	smpsAlterNote       $08
000852B8 E701                       	dc.b	smpsNoAttack, $01
000852BA E10E                       	smpsAlterNote       $0E
000852BC E701                       	dc.b	smpsNoAttack, $01
000852BE E10F                       	smpsAlterNote       $0F
000852C0 E701                       	dc.b	smpsNoAttack, $01
000852C2 E10B                       	smpsAlterNote       $0B
000852C4 E701                       	dc.b	smpsNoAttack, $01
000852C6 E105                       	smpsAlterNote       $05
000852C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852CC E108                       	smpsAlterNote       $08
000852CE E701                       	dc.b	smpsNoAttack, $01
000852D0 E10E                       	smpsAlterNote       $0E
000852D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852D6 E108                       	smpsAlterNote       $08
000852D8 E701                       	dc.b	smpsNoAttack, $01
000852DA E105                       	smpsAlterNote       $05
000852DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852E0 E108                       	smpsAlterNote       $08
000852E2 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000852E6 E109                       	smpsAlterNote       $09
000852E8 B60D                       	dc.b	nF4, $0D
000852EA E103                       	smpsAlterNote       $03
000852EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852F0 E106                       	smpsAlterNote       $06
000852F2 E701                       	dc.b	smpsNoAttack, $01
000852F4 E10C                       	smpsAlterNote       $0C
000852F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852FA E106                       	smpsAlterNote       $06
000852FC E701                       	dc.b	smpsNoAttack, $01
000852FE E103                       	smpsAlterNote       $03
00085300 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085304 E109                       	smpsAlterNote       $09
00085306 E701                       	dc.b	smpsNoAttack, $01
00085308 E10D                       	smpsAlterNote       $0D
0008530A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008530E E109                       	smpsAlterNote       $09
00085310 B80D                       	dc.b	nG4, $0D
00085312 E103                       	smpsAlterNote       $03
00085314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085318 E109                       	smpsAlterNote       $09
0008531A E701                       	dc.b	smpsNoAttack, $01
0008531C E10C                       	smpsAlterNote       $0C
0008531E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085322 E106                       	smpsAlterNote       $06
00085324 E701                       	dc.b	smpsNoAttack, $01
00085326 E102                       	smpsAlterNote       $02
00085328 E701                       	dc.b	smpsNoAttack, $01
0008532A E103                       	smpsAlterNote       $03
0008532C E701                       	dc.b	smpsNoAttack, $01
0008532E E109                       	smpsAlterNote       $09
00085330 E701                       	dc.b	smpsNoAttack, $01
00085332 E10D                       	smpsAlterNote       $0D
00085334 E701                       	dc.b	smpsNoAttack, $01
00085336 E109                       	smpsAlterNote       $09
00085338 E701                       	dc.b	smpsNoAttack, $01
0008533A E106                       	smpsAlterNote       $06
0008533C E701                       	dc.b	smpsNoAttack, $01
0008533E E102                       	smpsAlterNote       $02
00085340 E701                       	dc.b	smpsNoAttack, $01
00085342 E106                       	smpsAlterNote       $06
00085344 E701                       	dc.b	smpsNoAttack, $01
00085346 E10C                       	smpsAlterNote       $0C
00085348 E701                       	dc.b	smpsNoAttack, $01
0008534A E10D                       	smpsAlterNote       $0D
0008534C E701                       	dc.b	smpsNoAttack, $01
0008534E E109                       	smpsAlterNote       $09
00085350 E701                       	dc.b	smpsNoAttack, $01
00085352 E10B                       	smpsAlterNote       $0B
00085354 BA0D                       	dc.b	nA4, $0D
00085356 E108                       	smpsAlterNote       $08
00085358 E701                       	dc.b	smpsNoAttack, $01
0008535A E105                       	smpsAlterNote       $05
0008535C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085360 E10B                       	smpsAlterNote       $0B
00085362 E701                       	dc.b	smpsNoAttack, $01
00085364 E10F                       	smpsAlterNote       $0F
00085366 E701                       	dc.b	smpsNoAttack, $01
00085368 E10E                       	smpsAlterNote       $0E
0008536A E701                       	dc.b	smpsNoAttack, $01
0008536C E108                       	smpsAlterNote       $08
0008536E E701                       	dc.b	smpsNoAttack, $01
00085370 E104                       	smpsAlterNote       $04
00085372 E701                       	dc.b	smpsNoAttack, $01
00085374 E108                       	smpsAlterNote       $08
00085376 E701                       	dc.b	smpsNoAttack, $01
00085378 E10B                       	smpsAlterNote       $0B
0008537A E701                       	dc.b	smpsNoAttack, $01
0008537C E10F                       	smpsAlterNote       $0F
0008537E E701                       	dc.b	smpsNoAttack, $01
00085380 E10B                       	smpsAlterNote       $0B
00085382 E701                       	dc.b	smpsNoAttack, $01
00085384 E105                       	smpsAlterNote       $05
00085386 E701                       	dc.b	smpsNoAttack, $01
00085388 E104                       	smpsAlterNote       $04
0008538A E701                       	dc.b	smpsNoAttack, $01
0008538C E108                       	smpsAlterNote       $08
0008538E E701                       	dc.b	smpsNoAttack, $01
00085390 E10E                       	smpsAlterNote       $0E
00085392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085396 E10B                       	smpsAlterNote       $0B
00085398 E701                       	dc.b	smpsNoAttack, $01
0008539A E105                       	smpsAlterNote       $05
0008539C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853A0 E10B                       	smpsAlterNote       $0B
000853A2 E701                       	dc.b	smpsNoAttack, $01
000853A4 E10E                       	smpsAlterNote       $0E
000853A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853AA E108                       	smpsAlterNote       $08
000853AC E701                       	dc.b	smpsNoAttack, $01
000853AE E105                       	smpsAlterNote       $05
000853B0 8001                       	dc.b	nRst, $01
000853B2 E109                       	smpsAlterNote       $09
000853B4 B60A                       	dc.b	nF4, $0A
000853B6 E108                       	smpsAlterNote       $08
000853B8 B507                       	dc.b	nE4, $07
000853BA E107                       	smpsAlterNote       $07
000853BC B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000853C0 E108                       	smpsAlterNote       $08
000853C2 B503                       	dc.b	nE4, $03
000853C4 E109                       	smpsAlterNote       $09
000853C6 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000853CE E10B                       	smpsAlterNote       $0B
000853D0 BA0D                       	dc.b	nA4, $0D
000853D2 E108                       	smpsAlterNote       $08
000853D4 E701                       	dc.b	smpsNoAttack, $01
000853D6 E104                       	smpsAlterNote       $04
000853D8 E701                       	dc.b	smpsNoAttack, $01
000853DA E108                       	smpsAlterNote       $08
000853DC E701                       	dc.b	smpsNoAttack, $01
000853DE E10B                       	smpsAlterNote       $0B
000853E0 E701                       	dc.b	smpsNoAttack, $01
000853E2 E10F                       	smpsAlterNote       $0F
000853E4 E701                       	dc.b	smpsNoAttack, $01
000853E6 E10B                       	smpsAlterNote       $0B
000853E8 E701                       	dc.b	smpsNoAttack, $01
000853EA E105                       	smpsAlterNote       $05
000853EC E701                       	dc.b	smpsNoAttack, $01
000853EE E104                       	smpsAlterNote       $04
000853F0 E701                       	dc.b	smpsNoAttack, $01
000853F2 E108                       	smpsAlterNote       $08
000853F4 E701                       	dc.b	smpsNoAttack, $01
000853F6 E10E                       	smpsAlterNote       $0E
000853F8 E701                       	dc.b	smpsNoAttack, $01
000853FA E10F                       	smpsAlterNote       $0F
000853FC 8001                       	dc.b	nRst, $01
000853FE E109                       	smpsAlterNote       $09
00085400 C20D                       	dc.b	nF5, $0D
00085402 E106                       	smpsAlterNote       $06
00085404 E701                       	dc.b	smpsNoAttack, $01
00085406 E102                       	smpsAlterNote       $02
00085408 E701                       	dc.b	smpsNoAttack, $01
0008540A E106                       	smpsAlterNote       $06
0008540C E701                       	dc.b	smpsNoAttack, $01
0008540E E109                       	smpsAlterNote       $09
00085410 E701                       	dc.b	smpsNoAttack, $01
00085412 E10D                       	smpsAlterNote       $0D
00085414 E701                       	dc.b	smpsNoAttack, $01
00085416 E109                       	smpsAlterNote       $09
00085418 E701                       	dc.b	smpsNoAttack, $01
0008541A E103                       	smpsAlterNote       $03
0008541C E701                       	dc.b	smpsNoAttack, $01
0008541E E102                       	smpsAlterNote       $02
00085420 E701                       	dc.b	smpsNoAttack, $01
00085422 E106                       	smpsAlterNote       $06
00085424 E701                       	dc.b	smpsNoAttack, $01
00085426 E10C                       	smpsAlterNote       $0C
00085428 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008542C E109                       	smpsAlterNote       $09
0008542E E701                       	dc.b	smpsNoAttack, $01
00085430 E103                       	smpsAlterNote       $03
00085432 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085436 E109                       	smpsAlterNote       $09
00085438 E701                       	dc.b	smpsNoAttack, $01
0008543A E10C                       	smpsAlterNote       $0C
0008543C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085440 E106                       	smpsAlterNote       $06
00085442 E701                       	dc.b	smpsNoAttack, $01
00085444 E102                       	smpsAlterNote       $02
00085446 E701                       	dc.b	smpsNoAttack, $01
00085448 E103                       	smpsAlterNote       $03
0008544A E701                       	dc.b	smpsNoAttack, $01
0008544C E109                       	smpsAlterNote       $09
0008544E E701                       	dc.b	smpsNoAttack, $01
00085450 E10D                       	smpsAlterNote       $0D
00085452 E701                       	dc.b	smpsNoAttack, $01
00085454 E109                       	smpsAlterNote       $09
00085456 E701                       	dc.b	smpsNoAttack, $01
00085458 E106                       	smpsAlterNote       $06
0008545A E701                       	dc.b	smpsNoAttack, $01
0008545C E102                       	smpsAlterNote       $02
0008545E E701                       	dc.b	smpsNoAttack, $01
00085460 E106                       	smpsAlterNote       $06
00085462 E701                       	dc.b	smpsNoAttack, $01
00085464 E10C                       	smpsAlterNote       $0C
00085466 E701                       	dc.b	smpsNoAttack, $01
00085468 E10D                       	smpsAlterNote       $0D
0008546A E701                       	dc.b	smpsNoAttack, $01
0008546C E109                       	smpsAlterNote       $09
0008546E E701                       	dc.b	smpsNoAttack, $01
00085470 E103                       	smpsAlterNote       $03
00085472 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085476 E106                       	smpsAlterNote       $06
00085478 E701                       	dc.b	smpsNoAttack, $01
0008547A E10C                       	smpsAlterNote       $0C
0008547C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085480 E106                       	smpsAlterNote       $06
00085482 E701                       	dc.b	smpsNoAttack, $01
00085484 E103                       	smpsAlterNote       $03
00085486 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008548A E109                       	smpsAlterNote       $09
0008548C E701                       	dc.b	smpsNoAttack, $01
0008548E E10D                       	smpsAlterNote       $0D
00085490 E701                       	dc.b	smpsNoAttack, $01
00085492 E10C                       	smpsAlterNote       $0C
00085494 E701                       	dc.b	smpsNoAttack, $01
00085496 E106                       	smpsAlterNote       $06
00085498 E701                       	dc.b	smpsNoAttack, $01
0008549A E103                       	smpsAlterNote       $03
0008549C 8001                       	dc.b	nRst, $01
0008549E E109                       	smpsAlterNote       $09
000854A0 C206 8001                  	dc.b	nF5, $06, nRst, $01
000854A6 E10C                       	smpsAlterNote       $0C
000854A8 E601                       	smpsAlterVol        $01
000854AA BB0D                       	dc.b	nBb4, $0D
000854AC E106                       	smpsAlterNote       $06
000854AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854B2 E109                       	smpsAlterNote       $09
000854B4 E701                       	dc.b	smpsNoAttack, $01
000854B6 E10F                       	smpsAlterNote       $0F
000854B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854BC E109                       	smpsAlterNote       $09
000854BE E701                       	dc.b	smpsNoAttack, $01
000854C0 E106                       	smpsAlterNote       $06
000854C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854C6 E10C                       	smpsAlterNote       $0C
000854C8 E701                       	dc.b	smpsNoAttack, $01
000854CA E110                       	smpsAlterNote       $10
000854CC E701                       	dc.b	smpsNoAttack, $01
000854CE E10F                       	smpsAlterNote       $0F
000854D0 E701                       	dc.b	smpsNoAttack, $01
000854D2 E109                       	smpsAlterNote       $09
000854D4 E701                       	dc.b	smpsNoAttack, $01
000854D6 E105                       	smpsAlterNote       $05
000854D8 E701                       	dc.b	smpsNoAttack, $01
000854DA E106                       	smpsAlterNote       $06
000854DC 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000854E0 E103                       	smpsAlterNote       $03
000854E2 E701                       	dc.b	smpsNoAttack, $01
000854E4 E1FF                       	smpsAlterNote       $FF
000854E6 E701                       	dc.b	smpsNoAttack, $01
000854E8 E103                       	smpsAlterNote       $03
000854EA E701                       	dc.b	smpsNoAttack, $01
000854EC E106                       	smpsAlterNote       $06
000854EE E701                       	dc.b	smpsNoAttack, $01
000854F0 E10A                       	smpsAlterNote       $0A
000854F2 E701                       	dc.b	smpsNoAttack, $01
000854F4 E106                       	smpsAlterNote       $06
000854F6 E701                       	dc.b	smpsNoAttack, $01
000854F8 E100                       	smpsAlterNote       $00
000854FA E701                       	dc.b	smpsNoAttack, $01
000854FC E1FF                       	smpsAlterNote       $FF
000854FE E701                       	dc.b	smpsNoAttack, $01
00085500 E103                       	smpsAlterNote       $03
00085502 E701                       	dc.b	smpsNoAttack, $01
00085504 E109                       	smpsAlterNote       $09
00085506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008550A E106                       	smpsAlterNote       $06
0008550C E701                       	dc.b	smpsNoAttack, $01
0008550E E100                       	smpsAlterNote       $00
00085510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085514 E107                       	smpsAlterNote       $07
00085516 BF0E                       	dc.b	nD5, $0E
00085518 E101                       	smpsAlterNote       $01
0008551A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008551E E107                       	smpsAlterNote       $07
00085520 E701                       	dc.b	smpsNoAttack, $01
00085522 E10A                       	smpsAlterNote       $0A
00085524 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085528 E104                       	smpsAlterNote       $04
0008552A E701                       	dc.b	smpsNoAttack, $01
0008552C E100                       	smpsAlterNote       $00
0008552E E701                       	dc.b	smpsNoAttack, $01
00085530 E101                       	smpsAlterNote       $01
00085532 E701                       	dc.b	smpsNoAttack, $01
00085534 E107                       	smpsAlterNote       $07
00085536 E701                       	dc.b	smpsNoAttack, $01
00085538 E10B                       	smpsAlterNote       $0B
0008553A E701                       	dc.b	smpsNoAttack, $01
0008553C E107                       	smpsAlterNote       $07
0008553E E701                       	dc.b	smpsNoAttack, $01
00085540 E104                       	smpsAlterNote       $04
00085542 E701                       	dc.b	smpsNoAttack, $01
00085544 E100                       	smpsAlterNote       $00
00085546 E701                       	dc.b	smpsNoAttack, $01
00085548 E101                       	smpsAlterNote       $01
0008554A 8001                       	dc.b	nRst, $01
0008554C E108                       	smpsAlterNote       $08
0008554E C10C                       	dc.b	nE5, $0C
00085550 E109                       	smpsAlterNote       $09
00085552 C201 8001                  	dc.b	nF5, $01, nRst, $01
00085556 E10A                       	smpsAlterNote       $0A
00085558 8001                       	dc.b	nRst, $01
0008555A E109                       	smpsAlterNote       $09
0008555C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00085560 E106                       	smpsAlterNote       $06
00085562 E701                       	dc.b	smpsNoAttack, $01
00085564 E102                       	smpsAlterNote       $02
00085566 E701                       	dc.b	smpsNoAttack, $01
00085568 E103                       	smpsAlterNote       $03
0008556A E701                       	dc.b	smpsNoAttack, $01
0008556C E109                       	smpsAlterNote       $09
0008556E E701                       	dc.b	smpsNoAttack, $01
00085570 E10D                       	smpsAlterNote       $0D
00085572 E701                       	dc.b	smpsNoAttack, $01
00085574 E109                       	smpsAlterNote       $09
00085576 E701                       	dc.b	smpsNoAttack, $01
00085578 E106                       	smpsAlterNote       $06
0008557A E701                       	dc.b	smpsNoAttack, $01
0008557C E102                       	smpsAlterNote       $02
0008557E E701                       	dc.b	smpsNoAttack, $01
00085580 E106                       	smpsAlterNote       $06
00085582 E701                       	dc.b	smpsNoAttack, $01
00085584 E10C                       	smpsAlterNote       $0C
00085586 E701                       	dc.b	smpsNoAttack, $01
00085588 E10D                       	smpsAlterNote       $0D
0008558A E701                       	dc.b	smpsNoAttack, $01
0008558C E109                       	smpsAlterNote       $09
0008558E C40D                       	dc.b	nG5, $0D
00085590 E106                       	smpsAlterNote       $06
00085592 E701                       	dc.b	smpsNoAttack, $01
00085594 E102                       	smpsAlterNote       $02
00085596 E701                       	dc.b	smpsNoAttack, $01
00085598 E103                       	smpsAlterNote       $03
0008559A E701                       	dc.b	smpsNoAttack, $01
0008559C E109                       	smpsAlterNote       $09
0008559E E701                       	dc.b	smpsNoAttack, $01
000855A0 E108                       	smpsAlterNote       $08
000855A2 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000855AE E109                       	smpsAlterNote       $09
000855B0 C20D                       	dc.b	nF5, $0D
000855B2 E106                       	smpsAlterNote       $06
000855B4 E701                       	dc.b	smpsNoAttack, $01
000855B6 E102                       	smpsAlterNote       $02
000855B8 E701                       	dc.b	smpsNoAttack, $01
000855BA E106                       	smpsAlterNote       $06
000855BC E701                       	dc.b	smpsNoAttack, $01
000855BE E109                       	smpsAlterNote       $09
000855C0 E701                       	dc.b	smpsNoAttack, $01
000855C2 E10D                       	smpsAlterNote       $0D
000855C4 E701                       	dc.b	smpsNoAttack, $01
000855C6 E109                       	smpsAlterNote       $09
000855C8 E701                       	dc.b	smpsNoAttack, $01
000855CA E103                       	smpsAlterNote       $03
000855CC E701                       	dc.b	smpsNoAttack, $01
000855CE E102                       	smpsAlterNote       $02
000855D0 E701                       	dc.b	smpsNoAttack, $01
000855D2 E106                       	smpsAlterNote       $06
000855D4 E701                       	dc.b	smpsNoAttack, $01
000855D6 E10C                       	smpsAlterNote       $0C
000855D8 E701                       	dc.b	smpsNoAttack, $01
000855DA E10D                       	smpsAlterNote       $0D
000855DC 8001                       	dc.b	nRst, $01
000855DE E112                       	smpsAlterNote       $12
000855E0 C401                       	dc.b	nG5, $01
000855E2 E1EB                       	smpsAlterNote       $EB
000855E4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000855E7 E1FD                       	smpsAlterNote       $FD
000855E9 E701                       	dc.b	smpsNoAttack, $01
000855EB E10F                       	smpsAlterNote       $0F
000855ED E701                       	dc.b	smpsNoAttack, $01
000855EF E118                       	smpsAlterNote       $18
000855F1 E701                       	dc.b	smpsNoAttack, $01
000855F3 E1ED                       	smpsAlterNote       $ED
000855F5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000855F8 E1FF                       	smpsAlterNote       $FF
000855FA E701                       	dc.b	smpsNoAttack, $01
000855FC E10B                       	smpsAlterNote       $0B
000855FE E703                       	dc.b	smpsNoAttack, $03
00085600 E109                       	smpsAlterNote       $09
00085602 C407                       	dc.b	nG5, $07
00085604 E108                       	smpsAlterNote       $08
00085606 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00085612 E109                       	smpsAlterNote       $09
00085614 C20D                       	dc.b	nF5, $0D
00085616 E103                       	smpsAlterNote       $03
00085618 E701                       	dc.b	smpsNoAttack, $01
0008561A E102                       	smpsAlterNote       $02
0008561C E701                       	dc.b	smpsNoAttack, $01
0008561E E106                       	smpsAlterNote       $06
00085620 E701                       	dc.b	smpsNoAttack, $01
00085622 E10C                       	smpsAlterNote       $0C
00085624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085628 E109                       	smpsAlterNote       $09
0008562A E701                       	dc.b	smpsNoAttack, $01
0008562C E103                       	smpsAlterNote       $03
0008562E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085632 E109                       	smpsAlterNote       $09
00085634 E701                       	dc.b	smpsNoAttack, $01
00085636 E10C                       	smpsAlterNote       $0C
00085638 E701                       	dc.b	smpsNoAttack, $01
0008563A E10D                       	smpsAlterNote       $0D
0008563C 8001                       	dc.b	nRst, $01
0008563E E10B                       	smpsAlterNote       $0B
00085640 C609 8001                  	dc.b	nA5, $09, nRst, $01
00085644 E109                       	smpsAlterNote       $09
00085646 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008564A E108                       	smpsAlterNote       $08
0008564C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085658 8001                       	dc.b	nRst, $01
0008565A E109                       	smpsAlterNote       $09
0008565C C20D                       	dc.b	nF5, $0D
0008565E E103                       	smpsAlterNote       $03
00085660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085664 E106                       	smpsAlterNote       $06
00085666 E701                       	dc.b	smpsNoAttack, $01
00085668 E10C                       	smpsAlterNote       $0C
0008566A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008566E E106                       	smpsAlterNote       $06
00085670 E701                       	dc.b	smpsNoAttack, $01
00085672 E103                       	smpsAlterNote       $03
00085674 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085678 E109                       	smpsAlterNote       $09
0008567A E701                       	dc.b	smpsNoAttack, $01
0008567C E10D                       	smpsAlterNote       $0D
0008567E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085684 E108                       	smpsAlterNote       $08
00085686 E6FF                       	smpsAlterVol        $FF
00085688 A806                       	dc.b	nEb3, $06
0008568A E10C                       	smpsAlterNote       $0C
0008568C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085690 E108                       	smpsAlterNote       $08
00085692 A803                       	dc.b	nEb3, $03
00085694 E109                       	smpsAlterNote       $09
00085696 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008569A E10C                       	smpsAlterNote       $0C
0008569C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
000856A6 E109                       	smpsAlterNote       $09
000856A8 E602                       	smpsAlterVol        $02
000856AA B604                       	dc.b	nF4, $04
000856AC E602                       	smpsAlterVol        $02
000856AE F6F1 AA                    	smpsJump            music84_Jump02
000856B1                            
000856B1                            ; FM4 Data
000856B1                            music84_FM4:
000856B3 E040                       	smpsPan             panRight, $00
000856B5 8003                       	dc.b	nRst, $03
000856B7 E10F                       	smpsAlterNote       $0F
000856B9 C603 8008                  	dc.b	nA5, $03, nRst, $08
000856BD E10D                       	smpsAlterNote       $0D
000856BF C403 800A                  	dc.b	nG5, $03, nRst, $0A
000856C3 E10C                       	smpsAlterNote       $0C
000856C5 C103 8004                  	dc.b	nE5, $03, nRst, $04
000856CB E6FE                       	smpsAlterVol        $FE
000856CD E110                       	smpsAlterNote       $10
000856CF C703 8001                  	dc.b	nBb5, $03, nRst, $01
000856D3 E10F                       	smpsAlterNote       $0F
000856D5 C602 8001                  	dc.b	nA5, $02, nRst, $01
000856D9 E10D                       	smpsAlterNote       $0D
000856DB C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000856E4 E10C                       	smpsAlterNote       $0C
000856E6 C103                       	dc.b	nE5, $03
000856E8 E10A                       	smpsAlterNote       $0A
000856EA BD03 8001                  	dc.b	nC5, $03, nRst, $01
000856F0 03                         	dc.b	$03
000856F1                            
000856F1                            music84_Jump01:
000856F1 E10B                       	smpsAlterNote       $0B
000856F3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000856F7 E10C                       	smpsAlterNote       $0C
000856F9 C102 8001                  	dc.b	nE5, $02, nRst, $01
000856FD E10D                       	smpsAlterNote       $0D
000856FF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00085709 E10B                       	smpsAlterNote       $0B
0008570B BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008570F E107                       	smpsAlterNote       $07
00085711 E701                       	dc.b	smpsNoAttack, $01
00085713 E103                       	smpsAlterNote       $03
00085715 E701                       	dc.b	smpsNoAttack, $01
00085717 E104                       	smpsAlterNote       $04
00085719 E701                       	dc.b	smpsNoAttack, $01
0008571B E10A                       	smpsAlterNote       $0A
0008571D E701                       	dc.b	smpsNoAttack, $01
0008571F E10E                       	smpsAlterNote       $0E
00085721 E701                       	dc.b	smpsNoAttack, $01
00085723 E10A                       	smpsAlterNote       $0A
00085725 E701                       	dc.b	smpsNoAttack, $01
00085727 E107                       	smpsAlterNote       $07
00085729 E701                       	dc.b	smpsNoAttack, $01
0008572B E104                       	smpsAlterNote       $04
0008572D 8001                       	dc.b	nRst, $01
0008572F E110                       	smpsAlterNote       $10
00085731 C703                       	dc.b	nBb5, $03
00085733 E10F                       	smpsAlterNote       $0F
00085735 C603 8001                  	dc.b	nA5, $03, nRst, $01
00085739 E10D                       	smpsAlterNote       $0D
0008573B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00085741 E10C                       	smpsAlterNote       $0C
00085743 E701                       	dc.b	smpsNoAttack, $01
00085745 E108                       	smpsAlterNote       $08
00085747 E701                       	dc.b	smpsNoAttack, $01
00085749 E10C                       	smpsAlterNote       $0C
0008574B E701                       	dc.b	smpsNoAttack, $01
0008574D E10F                       	smpsAlterNote       $0F
0008574F E701                       	dc.b	smpsNoAttack, $01
00085751 E113                       	smpsAlterNote       $13
00085753 E701                       	dc.b	smpsNoAttack, $01
00085755 E10F                       	smpsAlterNote       $0F
00085757 E701                       	dc.b	smpsNoAttack, $01
00085759 E109                       	smpsAlterNote       $09
0008575B E701                       	dc.b	smpsNoAttack, $01
0008575D E108                       	smpsAlterNote       $08
0008575F E701                       	dc.b	smpsNoAttack, $01
00085761 E10C                       	smpsAlterNote       $0C
00085763 E701                       	dc.b	smpsNoAttack, $01
00085765 E112                       	smpsAlterNote       $12
00085767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008576B E10C                       	smpsAlterNote       $0C
0008576D E701                       	dc.b	smpsNoAttack, $01
0008576F E109                       	smpsAlterNote       $09
00085771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085775 E10F                       	smpsAlterNote       $0F
00085777 E701                       	dc.b	smpsNoAttack, $01
00085779 E113                       	smpsAlterNote       $13
0008577B E701                       	dc.b	smpsNoAttack, $01
0008577D E112                       	smpsAlterNote       $12
0008577F E701                       	dc.b	smpsNoAttack, $01
00085781 E10C                       	smpsAlterNote       $0C
00085783 E701                       	dc.b	smpsNoAttack, $01
00085785 E108                       	smpsAlterNote       $08
00085787 E701                       	dc.b	smpsNoAttack, $01
00085789 E10C                       	smpsAlterNote       $0C
0008578B E701                       	dc.b	smpsNoAttack, $01
0008578D E10F                       	smpsAlterNote       $0F
0008578F E701                       	dc.b	smpsNoAttack, $01
00085791 E113                       	smpsAlterNote       $13
00085793 E701                       	dc.b	smpsNoAttack, $01
00085795 E10F                       	smpsAlterNote       $0F
00085797 E701                       	dc.b	smpsNoAttack, $01
00085799 E109                       	smpsAlterNote       $09
0008579B E701                       	dc.b	smpsNoAttack, $01
0008579D E108                       	smpsAlterNote       $08
0008579F E701                       	dc.b	smpsNoAttack, $01
000857A1 E10C                       	smpsAlterNote       $0C
000857A3 E701                       	dc.b	smpsNoAttack, $01
000857A5 E112                       	smpsAlterNote       $12
000857A7 E701                       	dc.b	smpsNoAttack, $01
000857A9 E113                       	smpsAlterNote       $13
000857AB 800F                       	dc.b	nRst, $0F
000857AD E10B                       	smpsAlterNote       $0B
000857AF BF03                       	dc.b	nD5, $03
000857B1 E10C                       	smpsAlterNote       $0C
000857B3 C103 8001                  	dc.b	nE5, $03, nRst, $01
000857B7 E10D                       	smpsAlterNote       $0D
000857B9 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000857C1 E10B                       	smpsAlterNote       $0B
000857C3 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000857CD E110                       	smpsAlterNote       $10
000857CF C704                       	dc.b	nBb5, $04
000857D1 E10F                       	smpsAlterNote       $0F
000857D3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000857D7 E10D                       	smpsAlterNote       $0D
000857D9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000857DF E109                       	smpsAlterNote       $09
000857E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857E5 E10F                       	smpsAlterNote       $0F
000857E7 E701                       	dc.b	smpsNoAttack, $01
000857E9 E112                       	smpsAlterNote       $12
000857EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857EF E10C                       	smpsAlterNote       $0C
000857F1 E701                       	dc.b	smpsNoAttack, $01
000857F3 E108                       	smpsAlterNote       $08
000857F5 E701                       	dc.b	smpsNoAttack, $01
000857F7 E109                       	smpsAlterNote       $09
000857F9 E701                       	dc.b	smpsNoAttack, $01
000857FB E10F                       	smpsAlterNote       $0F
000857FD E701                       	dc.b	smpsNoAttack, $01
000857FF E113                       	smpsAlterNote       $13
00085801 E701                       	dc.b	smpsNoAttack, $01
00085803 E10F                       	smpsAlterNote       $0F
00085805 E701                       	dc.b	smpsNoAttack, $01
00085807 E10C                       	smpsAlterNote       $0C
00085809 E701                       	dc.b	smpsNoAttack, $01
0008580B E108                       	smpsAlterNote       $08
0008580D E701                       	dc.b	smpsNoAttack, $01
0008580F E10C                       	smpsAlterNote       $0C
00085811 E701                       	dc.b	smpsNoAttack, $01
00085813 E112                       	smpsAlterNote       $12
00085815 E701                       	dc.b	smpsNoAttack, $01
00085817 E113                       	smpsAlterNote       $13
00085819 E701                       	dc.b	smpsNoAttack, $01
0008581B E10F                       	smpsAlterNote       $0F
0008581D E701                       	dc.b	smpsNoAttack, $01
0008581F E109                       	smpsAlterNote       $09
00085821 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085825 E10C                       	smpsAlterNote       $0C
00085827 E701                       	dc.b	smpsNoAttack, $01
00085829 E112                       	smpsAlterNote       $12
0008582B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008582F E10C                       	smpsAlterNote       $0C
00085831 E701                       	dc.b	smpsNoAttack, $01
00085833 E109                       	smpsAlterNote       $09
00085835 E701                       	dc.b	smpsNoAttack, $01
00085837 E10D                       	smpsAlterNote       $0D
00085839 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008583D E10F                       	smpsAlterNote       $0F
0008583F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00085849 E10D                       	smpsAlterNote       $0D
0008584B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00085851 E10B                       	smpsAlterNote       $0B
00085853 BF0D                       	dc.b	nD5, $0D
00085855 E108                       	smpsAlterNote       $08
00085857 E701                       	dc.b	smpsNoAttack, $01
00085859 E104                       	smpsAlterNote       $04
0008585B E701                       	dc.b	smpsNoAttack, $01
0008585D E108                       	smpsAlterNote       $08
0008585F E701                       	dc.b	smpsNoAttack, $01
00085861 E10B                       	smpsAlterNote       $0B
00085863 E701                       	dc.b	smpsNoAttack, $01
00085865 E10F                       	smpsAlterNote       $0F
00085867 E701                       	dc.b	smpsNoAttack, $01
00085869 E10B                       	smpsAlterNote       $0B
0008586B E701                       	dc.b	smpsNoAttack, $01
0008586D E105                       	smpsAlterNote       $05
0008586F E701                       	dc.b	smpsNoAttack, $01
00085871 E104                       	smpsAlterNote       $04
00085873 E701                       	dc.b	smpsNoAttack, $01
00085875 E108                       	smpsAlterNote       $08
00085877 E701                       	dc.b	smpsNoAttack, $01
00085879 E10E                       	smpsAlterNote       $0E
0008587B E701                       	dc.b	smpsNoAttack, $01
0008587D E10F                       	smpsAlterNote       $0F
0008587F 8001                       	dc.b	nRst, $01
00085881 E10C                       	smpsAlterNote       $0C
00085883 C101                       	dc.b	nE5, $01
00085885 E10D                       	smpsAlterNote       $0D
00085887 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008588D E10F                       	smpsAlterNote       $0F
0008588F C606 8001                  	dc.b	nA5, $06, nRst, $01
00085893 E10C                       	smpsAlterNote       $0C
00085895 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085899 E10D                       	smpsAlterNote       $0D
0008589B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008589F E10C                       	smpsAlterNote       $0C
000858A1 CD03                       	dc.b	nE6, $03
000858A3 E10A                       	smpsAlterNote       $0A
000858A5 C903 8001                  	dc.b	nC6, $03, nRst, $01
000858A9 E10D                       	smpsAlterNote       $0D
000858AB C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
000858B3 E109                       	smpsAlterNote       $09
000858B5 E701                       	dc.b	smpsNoAttack, $01
000858B7 E10D                       	smpsAlterNote       $0D
000858B9 E701                       	dc.b	smpsNoAttack, $01
000858BB E110                       	smpsAlterNote       $10
000858BD E701                       	dc.b	smpsNoAttack, $01
000858BF E114                       	smpsAlterNote       $14
000858C1 E701                       	dc.b	smpsNoAttack, $01
000858C3 E110                       	smpsAlterNote       $10
000858C5 E701                       	dc.b	smpsNoAttack, $01
000858C7 E10A                       	smpsAlterNote       $0A
000858C9 E701                       	dc.b	smpsNoAttack, $01
000858CB E109                       	smpsAlterNote       $09
000858CD E701                       	dc.b	smpsNoAttack, $01
000858CF E10D                       	smpsAlterNote       $0D
000858D1 E701                       	dc.b	smpsNoAttack, $01
000858D3 E113                       	smpsAlterNote       $13
000858D5 E701                       	dc.b	smpsNoAttack, $01
000858D7 E114                       	smpsAlterNote       $14
000858D9 8001                       	dc.b	nRst, $01
000858DB E10F                       	smpsAlterNote       $0F
000858DD C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000858E3 E10C                       	smpsAlterNote       $0C
000858E5 E701                       	dc.b	smpsNoAttack, $01
000858E7 E108                       	smpsAlterNote       $08
000858E9 E701                       	dc.b	smpsNoAttack, $01
000858EB E10C                       	smpsAlterNote       $0C
000858ED E701                       	dc.b	smpsNoAttack, $01
000858EF E112                       	smpsAlterNote       $12
000858F1 E701                       	dc.b	smpsNoAttack, $01
000858F3 E113                       	smpsAlterNote       $13
000858F5 E701                       	dc.b	smpsNoAttack, $01
000858F7 E10F                       	smpsAlterNote       $0F
000858F9 E701                       	dc.b	smpsNoAttack, $01
000858FB E109                       	smpsAlterNote       $09
000858FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085901 E10C                       	smpsAlterNote       $0C
00085903 E701                       	dc.b	smpsNoAttack, $01
00085905 E112                       	smpsAlterNote       $12
00085907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008590B E10C                       	smpsAlterNote       $0C
0008590D E701                       	dc.b	smpsNoAttack, $01
0008590F E109                       	smpsAlterNote       $09
00085911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085915 E10F                       	smpsAlterNote       $0F
00085917 E701                       	dc.b	smpsNoAttack, $01
00085919 E113                       	smpsAlterNote       $13
0008591B E701                       	dc.b	smpsNoAttack, $01
0008591D E112                       	smpsAlterNote       $12
0008591F E701                       	dc.b	smpsNoAttack, $01
00085921 E10C                       	smpsAlterNote       $0C
00085923 E701                       	dc.b	smpsNoAttack, $01
00085925 E108                       	smpsAlterNote       $08
00085927 E701                       	dc.b	smpsNoAttack, $01
00085929 E10C                       	smpsAlterNote       $0C
0008592B E701                       	dc.b	smpsNoAttack, $01
0008592D E10F                       	smpsAlterNote       $0F
0008592F E701                       	dc.b	smpsNoAttack, $01
00085931 E113                       	smpsAlterNote       $13
00085933 E701                       	dc.b	smpsNoAttack, $01
00085935 E10F                       	smpsAlterNote       $0F
00085937 E701                       	dc.b	smpsNoAttack, $01
00085939 E109                       	smpsAlterNote       $09
0008593B E701                       	dc.b	smpsNoAttack, $01
0008593D E108                       	smpsAlterNote       $08
0008593F E701                       	dc.b	smpsNoAttack, $01
00085941 E10C                       	smpsAlterNote       $0C
00085943 E701                       	dc.b	smpsNoAttack, $01
00085945 E112                       	smpsAlterNote       $12
00085947 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008594B E10F                       	smpsAlterNote       $0F
0008594D E701                       	dc.b	smpsNoAttack, $01
0008594F E109                       	smpsAlterNote       $09
00085951 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085955 E10F                       	smpsAlterNote       $0F
00085957 E701                       	dc.b	smpsNoAttack, $01
00085959 E113                       	smpsAlterNote       $13
0008595B E701                       	dc.b	smpsNoAttack, $01
0008595D E112                       	smpsAlterNote       $12
0008595F E701                       	dc.b	smpsNoAttack, $01
00085961 E10C                       	smpsAlterNote       $0C
00085963 E701                       	dc.b	smpsNoAttack, $01
00085965 E108                       	smpsAlterNote       $08
00085967 E701                       	dc.b	smpsNoAttack, $01
00085969 E10C                       	smpsAlterNote       $0C
0008596B E701                       	dc.b	smpsNoAttack, $01
0008596D E10F                       	smpsAlterNote       $0F
0008596F E701                       	dc.b	smpsNoAttack, $01
00085971 E113                       	smpsAlterNote       $13
00085973 E701                       	dc.b	smpsNoAttack, $01
00085975 E10F                       	smpsAlterNote       $0F
00085977 E701                       	dc.b	smpsNoAttack, $01
00085979 E109                       	smpsAlterNote       $09
0008597B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008597F E10F                       	smpsAlterNote       $0F
00085981 C60D                       	dc.b	nA5, $0D
00085983 E109                       	smpsAlterNote       $09
00085985 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085989 E10C                       	smpsAlterNote       $0C
0008598B E701                       	dc.b	smpsNoAttack, $01
0008598D E112                       	smpsAlterNote       $12
0008598F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085993 E10C                       	smpsAlterNote       $0C
00085995 E701                       	dc.b	smpsNoAttack, $01
00085997 E109                       	smpsAlterNote       $09
00085999 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008599D E10F                       	smpsAlterNote       $0F
0008599F E701                       	dc.b	smpsNoAttack, $01
000859A1 E113                       	smpsAlterNote       $13
000859A3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000859A9 E10D                       	smpsAlterNote       $0D
000859AB C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
000859B3 E10C                       	smpsAlterNote       $0C
000859B5 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000859BB E6FF                       	smpsAlterVol        $FF
000859BD E10B                       	smpsAlterNote       $0B
000859BF BF03 8001                  	dc.b	nD5, $03, nRst, $01
000859C3 E10C                       	smpsAlterNote       $0C
000859C5 C103                       	dc.b	nE5, $03
000859C7 E10D                       	smpsAlterNote       $0D
000859C9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000859D3 E10B                       	smpsAlterNote       $0B
000859D5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000859D9 E107                       	smpsAlterNote       $07
000859DB E701                       	dc.b	smpsNoAttack, $01
000859DD E104                       	smpsAlterNote       $04
000859DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859E3 E10A                       	smpsAlterNote       $0A
000859E5 E701                       	dc.b	smpsNoAttack, $01
000859E7 E10D                       	smpsAlterNote       $0D
000859E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859ED E107                       	smpsAlterNote       $07
000859EF E701                       	dc.b	smpsNoAttack, $01
000859F1 E104                       	smpsAlterNote       $04
000859F3 8001                       	dc.b	nRst, $01
000859F5 E110                       	smpsAlterNote       $10
000859F7 C703                       	dc.b	nBb5, $03
000859F9 E10F                       	smpsAlterNote       $0F
000859FB C603 8001                  	dc.b	nA5, $03, nRst, $01
000859FF E10D                       	smpsAlterNote       $0D
00085A01 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00085A05 E10C                       	smpsAlterNote       $0C
00085A07 E701                       	dc.b	smpsNoAttack, $01
00085A09 E108                       	smpsAlterNote       $08
00085A0B E701                       	dc.b	smpsNoAttack, $01
00085A0D E109                       	smpsAlterNote       $09
00085A0F E701                       	dc.b	smpsNoAttack, $01
00085A11 E10F                       	smpsAlterNote       $0F
00085A13 E701                       	dc.b	smpsNoAttack, $01
00085A15 E113                       	smpsAlterNote       $13
00085A17 E701                       	dc.b	smpsNoAttack, $01
00085A19 E10F                       	smpsAlterNote       $0F
00085A1B E701                       	dc.b	smpsNoAttack, $01
00085A1D E10C                       	smpsAlterNote       $0C
00085A1F E701                       	dc.b	smpsNoAttack, $01
00085A21 E108                       	smpsAlterNote       $08
00085A23 E701                       	dc.b	smpsNoAttack, $01
00085A25 E10C                       	smpsAlterNote       $0C
00085A27 E701                       	dc.b	smpsNoAttack, $01
00085A29 E112                       	smpsAlterNote       $12
00085A2B E701                       	dc.b	smpsNoAttack, $01
00085A2D E113                       	smpsAlterNote       $13
00085A2F E701                       	dc.b	smpsNoAttack, $01
00085A31 E10F                       	smpsAlterNote       $0F
00085A33 E701                       	dc.b	smpsNoAttack, $01
00085A35 E109                       	smpsAlterNote       $09
00085A37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A3B E10C                       	smpsAlterNote       $0C
00085A3D E701                       	dc.b	smpsNoAttack, $01
00085A3F E112                       	smpsAlterNote       $12
00085A41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A45 E10C                       	smpsAlterNote       $0C
00085A47 E701                       	dc.b	smpsNoAttack, $01
00085A49 E109                       	smpsAlterNote       $09
00085A4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A4F E10F                       	smpsAlterNote       $0F
00085A51 E701                       	dc.b	smpsNoAttack, $01
00085A53 E113                       	smpsAlterNote       $13
00085A55 E701                       	dc.b	smpsNoAttack, $01
00085A57 E112                       	smpsAlterNote       $12
00085A59 E701                       	dc.b	smpsNoAttack, $01
00085A5B E10C                       	smpsAlterNote       $0C
00085A5D E701                       	dc.b	smpsNoAttack, $01
00085A5F E108                       	smpsAlterNote       $08
00085A61 E701                       	dc.b	smpsNoAttack, $01
00085A63 E10C                       	smpsAlterNote       $0C
00085A65 E701                       	dc.b	smpsNoAttack, $01
00085A67 E10F                       	smpsAlterNote       $0F
00085A69 E701                       	dc.b	smpsNoAttack, $01
00085A6B E113                       	smpsAlterNote       $13
00085A6D E701                       	dc.b	smpsNoAttack, $01
00085A6F E10F                       	smpsAlterNote       $0F
00085A71 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00085A75 E110                       	smpsAlterNote       $10
00085A77 BB03                       	dc.b	nBb4, $03
00085A79 E10F                       	smpsAlterNote       $0F
00085A7B BA06 8001                  	dc.b	nA4, $06, nRst, $01
00085A7F E10B                       	smpsAlterNote       $0B
00085A81 BF03                       	dc.b	nD5, $03
00085A83 E10C                       	smpsAlterNote       $0C
00085A85 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085A89 E10D                       	smpsAlterNote       $0D
00085A8B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00085A95 E10B                       	smpsAlterNote       $0B
00085A97 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00085AA3 E110                       	smpsAlterNote       $10
00085AA5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00085AA9 E10F                       	smpsAlterNote       $0F
00085AAB C604                       	dc.b	nA5, $04
00085AAD E10D                       	smpsAlterNote       $0D
00085AAF C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00085AB5 E109                       	smpsAlterNote       $09
00085AB7 E701                       	dc.b	smpsNoAttack, $01
00085AB9 E108                       	smpsAlterNote       $08
00085ABB E701                       	dc.b	smpsNoAttack, $01
00085ABD E10C                       	smpsAlterNote       $0C
00085ABF E701                       	dc.b	smpsNoAttack, $01
00085AC1 E112                       	smpsAlterNote       $12
00085AC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AC7 E10F                       	smpsAlterNote       $0F
00085AC9 E701                       	dc.b	smpsNoAttack, $01
00085ACB E109                       	smpsAlterNote       $09
00085ACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AD1 E10F                       	smpsAlterNote       $0F
00085AD3 E701                       	dc.b	smpsNoAttack, $01
00085AD5 E112                       	smpsAlterNote       $12
00085AD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085ADB E10C                       	smpsAlterNote       $0C
00085ADD E701                       	dc.b	smpsNoAttack, $01
00085ADF E108                       	smpsAlterNote       $08
00085AE1 E701                       	dc.b	smpsNoAttack, $01
00085AE3 E109                       	smpsAlterNote       $09
00085AE5 E701                       	dc.b	smpsNoAttack, $01
00085AE7 E10F                       	smpsAlterNote       $0F
00085AE9 E701                       	dc.b	smpsNoAttack, $01
00085AEB E113                       	smpsAlterNote       $13
00085AED E701                       	dc.b	smpsNoAttack, $01
00085AEF E10F                       	smpsAlterNote       $0F
00085AF1 E701                       	dc.b	smpsNoAttack, $01
00085AF3 E10C                       	smpsAlterNote       $0C
00085AF5 E701                       	dc.b	smpsNoAttack, $01
00085AF7 E108                       	smpsAlterNote       $08
00085AF9 E701                       	dc.b	smpsNoAttack, $01
00085AFB E10C                       	smpsAlterNote       $0C
00085AFD E701                       	dc.b	smpsNoAttack, $01
00085AFF E112                       	smpsAlterNote       $12
00085B01 E701                       	dc.b	smpsNoAttack, $01
00085B03 E113                       	smpsAlterNote       $13
00085B05 E701                       	dc.b	smpsNoAttack, $01
00085B07 E10F                       	smpsAlterNote       $0F
00085B09 E701                       	dc.b	smpsNoAttack, $01
00085B0B E109                       	smpsAlterNote       $09
00085B0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B11 E10C                       	smpsAlterNote       $0C
00085B13 E701                       	dc.b	smpsNoAttack, $01
00085B15 E112                       	smpsAlterNote       $12
00085B17 E701                       	dc.b	smpsNoAttack, $01
00085B19 E113                       	smpsAlterNote       $13
00085B1B 8001                       	dc.b	nRst, $01
00085B1D E10F                       	smpsAlterNote       $0F
00085B1F C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00085B2B C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00085B33 E10D                       	smpsAlterNote       $0D
00085B35 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00085B3B E10B                       	smpsAlterNote       $0B
00085B3D BF0D                       	dc.b	nD5, $0D
00085B3F E108                       	smpsAlterNote       $08
00085B41 E701                       	dc.b	smpsNoAttack, $01
00085B43 E104                       	smpsAlterNote       $04
00085B45 E701                       	dc.b	smpsNoAttack, $01
00085B47 E105                       	smpsAlterNote       $05
00085B49 E701                       	dc.b	smpsNoAttack, $01
00085B4B E10B                       	smpsAlterNote       $0B
00085B4D E701                       	dc.b	smpsNoAttack, $01
00085B4F E10F                       	smpsAlterNote       $0F
00085B51 E701                       	dc.b	smpsNoAttack, $01
00085B53 E10B                       	smpsAlterNote       $0B
00085B55 E701                       	dc.b	smpsNoAttack, $01
00085B57 E108                       	smpsAlterNote       $08
00085B59 E701                       	dc.b	smpsNoAttack, $01
00085B5B E104                       	smpsAlterNote       $04
00085B5D E701                       	dc.b	smpsNoAttack, $01
00085B5F E108                       	smpsAlterNote       $08
00085B61 E701                       	dc.b	smpsNoAttack, $01
00085B63 E10E                       	smpsAlterNote       $0E
00085B65 E701                       	dc.b	smpsNoAttack, $01
00085B67 E10F                       	smpsAlterNote       $0F
00085B69 E701                       	dc.b	smpsNoAttack, $01
00085B6B E10C                       	smpsAlterNote       $0C
00085B6D C101                       	dc.b	nE5, $01
00085B6F E10D                       	smpsAlterNote       $0D
00085B71 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00085B79 E10F                       	smpsAlterNote       $0F
00085B7B C607                       	dc.b	nA5, $07
00085B7D E10C                       	smpsAlterNote       $0C
00085B7F CD07                       	dc.b	nE6, $07
00085B81 E10D                       	smpsAlterNote       $0D
00085B83 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00085B87 E10C                       	smpsAlterNote       $0C
00085B89 CD03                       	dc.b	nE6, $03
00085B8B E10A                       	smpsAlterNote       $0A
00085B8D C903 8001                  	dc.b	nC6, $03, nRst, $01
00085B91 E10D                       	smpsAlterNote       $0D
00085B93 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00085B99 E10A                       	smpsAlterNote       $0A
00085B9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B9F E110                       	smpsAlterNote       $10
00085BA1 E701                       	dc.b	smpsNoAttack, $01
00085BA3 E114                       	smpsAlterNote       $14
00085BA5 E701                       	dc.b	smpsNoAttack, $01
00085BA7 E113                       	smpsAlterNote       $13
00085BA9 E701                       	dc.b	smpsNoAttack, $01
00085BAB E10D                       	smpsAlterNote       $0D
00085BAD E701                       	dc.b	smpsNoAttack, $01
00085BAF E109                       	smpsAlterNote       $09
00085BB1 E701                       	dc.b	smpsNoAttack, $01
00085BB3 E10D                       	smpsAlterNote       $0D
00085BB5 E701                       	dc.b	smpsNoAttack, $01
00085BB7 E110                       	smpsAlterNote       $10
00085BB9 E701                       	dc.b	smpsNoAttack, $01
00085BBB E114                       	smpsAlterNote       $14
00085BBD E701                       	dc.b	smpsNoAttack, $01
00085BBF E10F                       	smpsAlterNote       $0F
00085BC1 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00085BC5 E10C                       	smpsAlterNote       $0C
00085BC7 E701                       	dc.b	smpsNoAttack, $01
00085BC9 E108                       	smpsAlterNote       $08
00085BCB E701                       	dc.b	smpsNoAttack, $01
00085BCD E10C                       	smpsAlterNote       $0C
00085BCF E701                       	dc.b	smpsNoAttack, $01
00085BD1 E10F                       	smpsAlterNote       $0F
00085BD3 E701                       	dc.b	smpsNoAttack, $01
00085BD5 E113                       	smpsAlterNote       $13
00085BD7 E701                       	dc.b	smpsNoAttack, $01
00085BD9 E10F                       	smpsAlterNote       $0F
00085BDB E701                       	dc.b	smpsNoAttack, $01
00085BDD E109                       	smpsAlterNote       $09
00085BDF E701                       	dc.b	smpsNoAttack, $01
00085BE1 E108                       	smpsAlterNote       $08
00085BE3 E701                       	dc.b	smpsNoAttack, $01
00085BE5 E10C                       	smpsAlterNote       $0C
00085BE7 E701                       	dc.b	smpsNoAttack, $01
00085BE9 E112                       	smpsAlterNote       $12
00085BEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BEF E10F                       	smpsAlterNote       $0F
00085BF1 E701                       	dc.b	smpsNoAttack, $01
00085BF3 E109                       	smpsAlterNote       $09
00085BF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BF9 E10F                       	smpsAlterNote       $0F
00085BFB E701                       	dc.b	smpsNoAttack, $01
00085BFD E112                       	smpsAlterNote       $12
00085BFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C03 E10C                       	smpsAlterNote       $0C
00085C05 E701                       	dc.b	smpsNoAttack, $01
00085C07 E108                       	smpsAlterNote       $08
00085C09 E701                       	dc.b	smpsNoAttack, $01
00085C0B E109                       	smpsAlterNote       $09
00085C0D E701                       	dc.b	smpsNoAttack, $01
00085C0F E10F                       	smpsAlterNote       $0F
00085C11 E701                       	dc.b	smpsNoAttack, $01
00085C13 E113                       	smpsAlterNote       $13
00085C15 E701                       	dc.b	smpsNoAttack, $01
00085C17 E10F                       	smpsAlterNote       $0F
00085C19 E701                       	dc.b	smpsNoAttack, $01
00085C1B E10C                       	smpsAlterNote       $0C
00085C1D E701                       	dc.b	smpsNoAttack, $01
00085C1F E108                       	smpsAlterNote       $08
00085C21 E701                       	dc.b	smpsNoAttack, $01
00085C23 E10C                       	smpsAlterNote       $0C
00085C25 E701                       	dc.b	smpsNoAttack, $01
00085C27 E112                       	smpsAlterNote       $12
00085C29 E701                       	dc.b	smpsNoAttack, $01
00085C2B E113                       	smpsAlterNote       $13
00085C2D E701                       	dc.b	smpsNoAttack, $01
00085C2F E10F                       	smpsAlterNote       $0F
00085C31 E701                       	dc.b	smpsNoAttack, $01
00085C33 E109                       	smpsAlterNote       $09
00085C35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C39 E10C                       	smpsAlterNote       $0C
00085C3B E701                       	dc.b	smpsNoAttack, $01
00085C3D E112                       	smpsAlterNote       $12
00085C3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C43 E10C                       	smpsAlterNote       $0C
00085C45 E701                       	dc.b	smpsNoAttack, $01
00085C47 E109                       	smpsAlterNote       $09
00085C49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C4D E10F                       	smpsAlterNote       $0F
00085C4F E701                       	dc.b	smpsNoAttack, $01
00085C51 E113                       	smpsAlterNote       $13
00085C53 E701                       	dc.b	smpsNoAttack, $01
00085C55 E112                       	smpsAlterNote       $12
00085C57 E701                       	dc.b	smpsNoAttack, $01
00085C59 E10C                       	smpsAlterNote       $0C
00085C5B E701                       	dc.b	smpsNoAttack, $01
00085C5D E109                       	smpsAlterNote       $09
00085C5F 8001                       	dc.b	nRst, $01
00085C61 E10F                       	smpsAlterNote       $0F
00085C63 C60D                       	dc.b	nA5, $0D
00085C65 E10C                       	smpsAlterNote       $0C
00085C67 E701                       	dc.b	smpsNoAttack, $01
00085C69 E108                       	smpsAlterNote       $08
00085C6B E701                       	dc.b	smpsNoAttack, $01
00085C6D E10C                       	smpsAlterNote       $0C
00085C6F E701                       	dc.b	smpsNoAttack, $01
00085C71 E112                       	smpsAlterNote       $12
00085C73 E701                       	dc.b	smpsNoAttack, $01
00085C75 E113                       	smpsAlterNote       $13
00085C77 E701                       	dc.b	smpsNoAttack, $01
00085C79 E10F                       	smpsAlterNote       $0F
00085C7B E701                       	dc.b	smpsNoAttack, $01
00085C7D E109                       	smpsAlterNote       $09
00085C7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C83 E10C                       	smpsAlterNote       $0C
00085C85 E701                       	dc.b	smpsNoAttack, $01
00085C87 E112                       	smpsAlterNote       $12
00085C89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C8D E10C                       	smpsAlterNote       $0C
00085C8F E701                       	dc.b	smpsNoAttack, $01
00085C91 E109                       	smpsAlterNote       $09
00085C93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C97 E10F                       	smpsAlterNote       $0F
00085C99 E701                       	dc.b	smpsNoAttack, $01
00085C9B E113                       	smpsAlterNote       $13
00085C9D E701                       	dc.b	smpsNoAttack, $01
00085C9F E112                       	smpsAlterNote       $12
00085CA1 E701                       	dc.b	smpsNoAttack, $01
00085CA3 E10C                       	smpsAlterNote       $0C
00085CA5 E701                       	dc.b	smpsNoAttack, $01
00085CA7 E108                       	smpsAlterNote       $08
00085CA9 E701                       	dc.b	smpsNoAttack, $01
00085CAB E10C                       	smpsAlterNote       $0C
00085CAD E701                       	dc.b	smpsNoAttack, $01
00085CAF E10F                       	smpsAlterNote       $0F
00085CB1 E701                       	dc.b	smpsNoAttack, $01
00085CB3 E113                       	smpsAlterNote       $13
00085CB5 E701                       	dc.b	smpsNoAttack, $01
00085CB7 E10F                       	smpsAlterNote       $0F
00085CB9 E701                       	dc.b	smpsNoAttack, $01
00085CBB E109                       	smpsAlterNote       $09
00085CBD E701                       	dc.b	smpsNoAttack, $01
00085CBF E108                       	smpsAlterNote       $08
00085CC1 E701                       	dc.b	smpsNoAttack, $01
00085CC3 E10C                       	smpsAlterNote       $0C
00085CC5 E701                       	dc.b	smpsNoAttack, $01
00085CC7 E112                       	smpsAlterNote       $12
00085CC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CCD E10F                       	smpsAlterNote       $0F
00085CCF E701                       	dc.b	smpsNoAttack, $01
00085CD1 E109                       	smpsAlterNote       $09
00085CD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CD7 E10F                       	smpsAlterNote       $0F
00085CD9 E701                       	dc.b	smpsNoAttack, $01
00085CDB E112                       	smpsAlterNote       $12
00085CDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CE1 E10C                       	smpsAlterNote       $0C
00085CE3 E701                       	dc.b	smpsNoAttack, $01
00085CE5 E108                       	smpsAlterNote       $08
00085CE7 E701                       	dc.b	smpsNoAttack, $01
00085CE9 E10C                       	smpsAlterNote       $0C
00085CEB E701                       	dc.b	smpsNoAttack, $01
00085CED E10F                       	smpsAlterNote       $0F
00085CEF E701                       	dc.b	smpsNoAttack, $01
00085CF1 E113                       	smpsAlterNote       $13
00085CF3 E701                       	dc.b	smpsNoAttack, $01
00085CF5 E10F                       	smpsAlterNote       $0F
00085CF7 E701                       	dc.b	smpsNoAttack, $01
00085CF9 E109                       	smpsAlterNote       $09
00085CFB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085D01 E601                       	smpsAlterVol        $01
00085D03 E10F                       	smpsAlterNote       $0F
00085D05 C604                       	dc.b	nA5, $04
00085D07 E10D                       	smpsAlterNote       $0D
00085D09 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00085D0F E10B                       	smpsAlterNote       $0B
00085D11 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00085D19 E10F                       	smpsAlterNote       $0F
00085D1B C604 8001                  	dc.b	nA5, $04, nRst, $01
00085D1F E10D                       	smpsAlterNote       $0D
00085D21 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00085D27 E10C                       	smpsAlterNote       $0C
00085D29 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00085D2F E10A                       	smpsAlterNote       $0A
00085D31 C904 8001                  	dc.b	nC6, $04, nRst, $01
00085D35 E110                       	smpsAlterNote       $10
00085D37 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00085D3B E10F                       	smpsAlterNote       $0F
00085D3D C604                       	dc.b	nA5, $04
00085D3F E10D                       	smpsAlterNote       $0D
00085D41 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00085D4D E109                       	smpsAlterNote       $09
00085D4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D53 E10F                       	smpsAlterNote       $0F
00085D55 E701                       	dc.b	smpsNoAttack, $01
00085D57 E112                       	smpsAlterNote       $12
00085D59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D5D E10C                       	smpsAlterNote       $0C
00085D5F E701                       	dc.b	smpsNoAttack, $01
00085D61 E108                       	smpsAlterNote       $08
00085D63 E701                       	dc.b	smpsNoAttack, $01
00085D65 E10C                       	smpsAlterNote       $0C
00085D67 E701                       	dc.b	smpsNoAttack, $01
00085D69 E10F                       	smpsAlterNote       $0F
00085D6B E701                       	dc.b	smpsNoAttack, $01
00085D6D E113                       	smpsAlterNote       $13
00085D6F E701                       	dc.b	smpsNoAttack, $01
00085D71 E10D                       	smpsAlterNote       $0D
00085D73 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00085D79 E10C                       	smpsAlterNote       $0C
00085D7B C10D                       	dc.b	nE5, $0D
00085D7D E109                       	smpsAlterNote       $09
00085D7F E701                       	dc.b	smpsNoAttack, $01
00085D81 E105                       	smpsAlterNote       $05
00085D83 E701                       	dc.b	smpsNoAttack, $01
00085D85 E106                       	smpsAlterNote       $06
00085D87 E701                       	dc.b	smpsNoAttack, $01
00085D89 E10C                       	smpsAlterNote       $0C
00085D8B E701                       	dc.b	smpsNoAttack, $01
00085D8D E110                       	smpsAlterNote       $10
00085D8F E701                       	dc.b	smpsNoAttack, $01
00085D91 E10C                       	smpsAlterNote       $0C
00085D93 E701                       	dc.b	smpsNoAttack, $01
00085D95 E109                       	smpsAlterNote       $09
00085D97 E701                       	dc.b	smpsNoAttack, $01
00085D99 E105                       	smpsAlterNote       $05
00085D9B E701                       	dc.b	smpsNoAttack, $01
00085D9D E109                       	smpsAlterNote       $09
00085D9F E701                       	dc.b	smpsNoAttack, $01
00085DA1 E10F                       	smpsAlterNote       $0F
00085DA3 E701                       	dc.b	smpsNoAttack, $01
00085DA5 E110                       	smpsAlterNote       $10
00085DA7 E701                       	dc.b	smpsNoAttack, $01
00085DA9 E10C                       	smpsAlterNote       $0C
00085DAB E701                       	dc.b	smpsNoAttack, $01
00085DAD E106                       	smpsAlterNote       $06
00085DAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DB3 E109                       	smpsAlterNote       $09
00085DB5 E701                       	dc.b	smpsNoAttack, $01
00085DB7 E10F                       	smpsAlterNote       $0F
00085DB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DBD E109                       	smpsAlterNote       $09
00085DBF E701                       	dc.b	smpsNoAttack, $01
00085DC1 E106                       	smpsAlterNote       $06
00085DC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DC7 E10C                       	smpsAlterNote       $0C
00085DC9 E701                       	dc.b	smpsNoAttack, $01
00085DCB E110                       	smpsAlterNote       $10
00085DCD E701                       	dc.b	smpsNoAttack, $01
00085DCF E10F                       	smpsAlterNote       $0F
00085DD1 E701                       	dc.b	smpsNoAttack, $01
00085DD3 E109                       	smpsAlterNote       $09
00085DD5 E701                       	dc.b	smpsNoAttack, $01
00085DD7 E105                       	smpsAlterNote       $05
00085DD9 E701                       	dc.b	smpsNoAttack, $01
00085DDB E109                       	smpsAlterNote       $09
00085DDD E701                       	dc.b	smpsNoAttack, $01
00085DDF E10C                       	smpsAlterNote       $0C
00085DE1 E701                       	dc.b	smpsNoAttack, $01
00085DE3 E110                       	smpsAlterNote       $10
00085DE5 E701                       	dc.b	smpsNoAttack, $01
00085DE7 E10C                       	smpsAlterNote       $0C
00085DE9 E701                       	dc.b	smpsNoAttack, $01
00085DEB E106                       	smpsAlterNote       $06
00085DED E701                       	dc.b	smpsNoAttack, $01
00085DEF E105                       	smpsAlterNote       $05
00085DF1 E701                       	dc.b	smpsNoAttack, $01
00085DF3 E109                       	smpsAlterNote       $09
00085DF5 E701                       	dc.b	smpsNoAttack, $01
00085DF7 E10F                       	smpsAlterNote       $0F
00085DF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DFD E10C                       	smpsAlterNote       $0C
00085DFF E701                       	dc.b	smpsNoAttack, $01
00085E01 E106                       	smpsAlterNote       $06
00085E03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E07 E10C                       	smpsAlterNote       $0C
00085E09 E701                       	dc.b	smpsNoAttack, $01
00085E0B E10F                       	smpsAlterNote       $0F
00085E0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E11 E109                       	smpsAlterNote       $09
00085E13 E701                       	dc.b	smpsNoAttack, $01
00085E15 E105                       	smpsAlterNote       $05
00085E17 E701                       	dc.b	smpsNoAttack, $01
00085E19 E106                       	smpsAlterNote       $06
00085E1B E701                       	dc.b	smpsNoAttack, $01
00085E1D E10C                       	smpsAlterNote       $0C
00085E1F E701                       	dc.b	smpsNoAttack, $01
00085E21 E110                       	smpsAlterNote       $10
00085E23 E701                       	dc.b	smpsNoAttack, $01
00085E25 E10C                       	smpsAlterNote       $0C
00085E27 E701                       	dc.b	smpsNoAttack, $01
00085E29 E109                       	smpsAlterNote       $09
00085E2B E701                       	dc.b	smpsNoAttack, $01
00085E2D E105                       	smpsAlterNote       $05
00085E2F E701                       	dc.b	smpsNoAttack, $01
00085E31 E109                       	smpsAlterNote       $09
00085E33 E701                       	dc.b	smpsNoAttack, $01
00085E35 E10F                       	smpsAlterNote       $0F
00085E37 E701                       	dc.b	smpsNoAttack, $01
00085E39 E110                       	smpsAlterNote       $10
00085E3B E701                       	dc.b	smpsNoAttack, $01
00085E3D E10C                       	smpsAlterNote       $0C
00085E3F E701                       	dc.b	smpsNoAttack, $01
00085E41 E106                       	smpsAlterNote       $06
00085E43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E47 E109                       	smpsAlterNote       $09
00085E49 E701                       	dc.b	smpsNoAttack, $01
00085E4B E10F                       	smpsAlterNote       $0F
00085E4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E51 E109                       	smpsAlterNote       $09
00085E53 E701                       	dc.b	smpsNoAttack, $01
00085E55 E106                       	smpsAlterNote       $06
00085E57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E5B E10C                       	smpsAlterNote       $0C
00085E5D E701                       	dc.b	smpsNoAttack, $01
00085E5F E110                       	smpsAlterNote       $10
00085E61 E701                       	dc.b	smpsNoAttack, $01
00085E63 E10F                       	smpsAlterNote       $0F
00085E65 E701                       	dc.b	smpsNoAttack, $01
00085E67 E109                       	smpsAlterNote       $09
00085E69 E701                       	dc.b	smpsNoAttack, $01
00085E6B E105                       	smpsAlterNote       $05
00085E6D E701                       	dc.b	smpsNoAttack, $01
00085E6F E109                       	smpsAlterNote       $09
00085E71 E701                       	dc.b	smpsNoAttack, $01
00085E73 E10C                       	smpsAlterNote       $0C
00085E75 E701                       	dc.b	smpsNoAttack, $01
00085E77 E110                       	smpsAlterNote       $10
00085E79 E701                       	dc.b	smpsNoAttack, $01
00085E7B E10C                       	smpsAlterNote       $0C
00085E7D E701                       	dc.b	smpsNoAttack, $01
00085E7F E106                       	smpsAlterNote       $06
00085E81 E701                       	dc.b	smpsNoAttack, $01
00085E83 E105                       	smpsAlterNote       $05
00085E85 E701                       	dc.b	smpsNoAttack, $01
00085E87 E109                       	smpsAlterNote       $09
00085E89 E701                       	dc.b	smpsNoAttack, $01
00085E8B E10F                       	smpsAlterNote       $0F
00085E8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E91 E109                       	smpsAlterNote       $09
00085E93 E701                       	dc.b	smpsNoAttack, $01
00085E95 E106                       	smpsAlterNote       $06
00085E97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E9B E10C                       	smpsAlterNote       $0C
00085E9D E701                       	dc.b	smpsNoAttack, $01
00085E9F E110                       	smpsAlterNote       $10
00085EA1 E701                       	dc.b	smpsNoAttack, $01
00085EA3 E10F                       	smpsAlterNote       $0F
00085EA5 E701                       	dc.b	smpsNoAttack, $01
00085EA7 E109                       	smpsAlterNote       $09
00085EA9 E701                       	dc.b	smpsNoAttack, $01
00085EAB E105                       	smpsAlterNote       $05
00085EAD E701                       	dc.b	smpsNoAttack, $01
00085EAF E109                       	smpsAlterNote       $09
00085EB1 E701                       	dc.b	smpsNoAttack, $01
00085EB3 E10C                       	smpsAlterNote       $0C
00085EB5 E701                       	dc.b	smpsNoAttack, $01
00085EB7 E110                       	smpsAlterNote       $10
00085EB9 E701                       	dc.b	smpsNoAttack, $01
00085EBB E10C                       	smpsAlterNote       $0C
00085EBD E701                       	dc.b	smpsNoAttack, $01
00085EBF E106                       	smpsAlterNote       $06
00085EC1 E701                       	dc.b	smpsNoAttack, $01
00085EC3 E105                       	smpsAlterNote       $05
00085EC5 E701                       	dc.b	smpsNoAttack, $01
00085EC7 E109                       	smpsAlterNote       $09
00085EC9 E701                       	dc.b	smpsNoAttack, $01
00085ECB E10F                       	smpsAlterNote       $0F
00085ECD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085ED1 E10C                       	smpsAlterNote       $0C
00085ED3 E701                       	dc.b	smpsNoAttack, $01
00085ED5 E106                       	smpsAlterNote       $06
00085ED7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EDB E10C                       	smpsAlterNote       $0C
00085EDD E701                       	dc.b	smpsNoAttack, $01
00085EDF E10F                       	smpsAlterNote       $0F
00085EE1 E701                       	dc.b	smpsNoAttack, $01
00085EE3 E110                       	smpsAlterNote       $10
00085EE5 8001                       	dc.b	nRst, $01
00085EE7 E10F                       	smpsAlterNote       $0F
00085EE9 C604                       	dc.b	nA5, $04
00085EEB E10D                       	smpsAlterNote       $0D
00085EED C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00085EF3 E10B                       	smpsAlterNote       $0B
00085EF5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00085EFB E10F                       	smpsAlterNote       $0F
00085EFD C604 8001                  	dc.b	nA5, $04, nRst, $01
00085F01 E10D                       	smpsAlterNote       $0D
00085F03 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00085F09 E10C                       	smpsAlterNote       $0C
00085F0B C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00085F11 E10A                       	smpsAlterNote       $0A
00085F13 C904                       	dc.b	nC6, $04
00085F15 E110                       	smpsAlterNote       $10
00085F17 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00085F1B E10F                       	smpsAlterNote       $0F
00085F1D C604                       	dc.b	nA5, $04
00085F1F E10D                       	smpsAlterNote       $0D
00085F21 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00085F2D E109                       	smpsAlterNote       $09
00085F2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F33 E10F                       	smpsAlterNote       $0F
00085F35 E701                       	dc.b	smpsNoAttack, $01
00085F37 E112                       	smpsAlterNote       $12
00085F39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F3D E10C                       	smpsAlterNote       $0C
00085F3F E701                       	dc.b	smpsNoAttack, $01
00085F41 E108                       	smpsAlterNote       $08
00085F43 E701                       	dc.b	smpsNoAttack, $01
00085F45 E109                       	smpsAlterNote       $09
00085F47 E701                       	dc.b	smpsNoAttack, $01
00085F49 E10F                       	smpsAlterNote       $0F
00085F4B E701                       	dc.b	smpsNoAttack, $01
00085F4D E113                       	smpsAlterNote       $13
00085F4F E701                       	dc.b	smpsNoAttack, $01
00085F51 E10D                       	smpsAlterNote       $0D
00085F53 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00085F59 E10C                       	smpsAlterNote       $0C
00085F5B C10D                       	dc.b	nE5, $0D
00085F5D E109                       	smpsAlterNote       $09
00085F5F E701                       	dc.b	smpsNoAttack, $01
00085F61 E106                       	smpsAlterNote       $06
00085F63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F67 E10C                       	smpsAlterNote       $0C
00085F69 E701                       	dc.b	smpsNoAttack, $01
00085F6B E110                       	smpsAlterNote       $10
00085F6D E701                       	dc.b	smpsNoAttack, $01
00085F6F E10F                       	smpsAlterNote       $0F
00085F71 E701                       	dc.b	smpsNoAttack, $01
00085F73 E109                       	smpsAlterNote       $09
00085F75 E701                       	dc.b	smpsNoAttack, $01
00085F77 E105                       	smpsAlterNote       $05
00085F79 E701                       	dc.b	smpsNoAttack, $01
00085F7B E109                       	smpsAlterNote       $09
00085F7D E701                       	dc.b	smpsNoAttack, $01
00085F7F E10C                       	smpsAlterNote       $0C
00085F81 E701                       	dc.b	smpsNoAttack, $01
00085F83 E110                       	smpsAlterNote       $10
00085F85 E701                       	dc.b	smpsNoAttack, $01
00085F87 E10C                       	smpsAlterNote       $0C
00085F89 E701                       	dc.b	smpsNoAttack, $01
00085F8B E106                       	smpsAlterNote       $06
00085F8D E701                       	dc.b	smpsNoAttack, $01
00085F8F E105                       	smpsAlterNote       $05
00085F91 E701                       	dc.b	smpsNoAttack, $01
00085F93 E109                       	smpsAlterNote       $09
00085F95 E701                       	dc.b	smpsNoAttack, $01
00085F97 E10F                       	smpsAlterNote       $0F
00085F99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F9D E10C                       	smpsAlterNote       $0C
00085F9F E701                       	dc.b	smpsNoAttack, $01
00085FA1 E106                       	smpsAlterNote       $06
00085FA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FA7 E10C                       	smpsAlterNote       $0C
00085FA9 E701                       	dc.b	smpsNoAttack, $01
00085FAB E10F                       	smpsAlterNote       $0F
00085FAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FB1 E109                       	smpsAlterNote       $09
00085FB3 E701                       	dc.b	smpsNoAttack, $01
00085FB5 E105                       	smpsAlterNote       $05
00085FB7 E701                       	dc.b	smpsNoAttack, $01
00085FB9 E106                       	smpsAlterNote       $06
00085FBB E701                       	dc.b	smpsNoAttack, $01
00085FBD E10C                       	smpsAlterNote       $0C
00085FBF E701                       	dc.b	smpsNoAttack, $01
00085FC1 E110                       	smpsAlterNote       $10
00085FC3 E701                       	dc.b	smpsNoAttack, $01
00085FC5 E10C                       	smpsAlterNote       $0C
00085FC7 E701                       	dc.b	smpsNoAttack, $01
00085FC9 E109                       	smpsAlterNote       $09
00085FCB E701                       	dc.b	smpsNoAttack, $01
00085FCD E105                       	smpsAlterNote       $05
00085FCF E701                       	dc.b	smpsNoAttack, $01
00085FD1 E109                       	smpsAlterNote       $09
00085FD3 E701                       	dc.b	smpsNoAttack, $01
00085FD5 E10F                       	smpsAlterNote       $0F
00085FD7 E701                       	dc.b	smpsNoAttack, $01
00085FD9 E110                       	smpsAlterNote       $10
00085FDB E701                       	dc.b	smpsNoAttack, $01
00085FDD E10C                       	smpsAlterNote       $0C
00085FDF E701                       	dc.b	smpsNoAttack, $01
00085FE1 E106                       	smpsAlterNote       $06
00085FE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FE7 E109                       	smpsAlterNote       $09
00085FE9 E701                       	dc.b	smpsNoAttack, $01
00085FEB E10F                       	smpsAlterNote       $0F
00085FED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FF1 E109                       	smpsAlterNote       $09
00085FF3 E701                       	dc.b	smpsNoAttack, $01
00085FF5 E106                       	smpsAlterNote       $06
00085FF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FFB E10C                       	smpsAlterNote       $0C
00085FFD E701                       	dc.b	smpsNoAttack, $01
00085FFF E110                       	smpsAlterNote       $10
00086001 E701                       	dc.b	smpsNoAttack, $01
00086003 E10F                       	smpsAlterNote       $0F
00086005 E701                       	dc.b	smpsNoAttack, $01
00086007 E109                       	smpsAlterNote       $09
00086009 E701                       	dc.b	smpsNoAttack, $01
0008600B E105                       	smpsAlterNote       $05
0008600D E701                       	dc.b	smpsNoAttack, $01
0008600F E109                       	smpsAlterNote       $09
00086011 E701                       	dc.b	smpsNoAttack, $01
00086013 E10F                       	smpsAlterNote       $0F
00086015 E701                       	dc.b	smpsNoAttack, $01
00086017 E110                       	smpsAlterNote       $10
00086019 E701                       	dc.b	smpsNoAttack, $01
0008601B E10C                       	smpsAlterNote       $0C
0008601D E701                       	dc.b	smpsNoAttack, $01
0008601F E106                       	smpsAlterNote       $06
00086021 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086025 E109                       	smpsAlterNote       $09
00086027 E701                       	dc.b	smpsNoAttack, $01
00086029 E10F                       	smpsAlterNote       $0F
0008602B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008602F E109                       	smpsAlterNote       $09
00086031 E701                       	dc.b	smpsNoAttack, $01
00086033 E106                       	smpsAlterNote       $06
00086035 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086039 E10C                       	smpsAlterNote       $0C
0008603B E701                       	dc.b	smpsNoAttack, $01
0008603D E110                       	smpsAlterNote       $10
0008603F E701                       	dc.b	smpsNoAttack, $01
00086041 E10F                       	smpsAlterNote       $0F
00086043 E701                       	dc.b	smpsNoAttack, $01
00086045 E109                       	smpsAlterNote       $09
00086047 E701                       	dc.b	smpsNoAttack, $01
00086049 E105                       	smpsAlterNote       $05
0008604B E701                       	dc.b	smpsNoAttack, $01
0008604D E109                       	smpsAlterNote       $09
0008604F E701                       	dc.b	smpsNoAttack, $01
00086051 E10C                       	smpsAlterNote       $0C
00086053 E701                       	dc.b	smpsNoAttack, $01
00086055 E110                       	smpsAlterNote       $10
00086057 E701                       	dc.b	smpsNoAttack, $01
00086059 E10C                       	smpsAlterNote       $0C
0008605B E701                       	dc.b	smpsNoAttack, $01
0008605D E106                       	smpsAlterNote       $06
0008605F E701                       	dc.b	smpsNoAttack, $01
00086061 E105                       	smpsAlterNote       $05
00086063 E701                       	dc.b	smpsNoAttack, $01
00086065 E109                       	smpsAlterNote       $09
00086067 E701                       	dc.b	smpsNoAttack, $01
00086069 E10F                       	smpsAlterNote       $0F
0008606B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008606F E10C                       	smpsAlterNote       $0C
00086071 E701                       	dc.b	smpsNoAttack, $01
00086073 E106                       	smpsAlterNote       $06
00086075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086079 E10C                       	smpsAlterNote       $0C
0008607B E701                       	dc.b	smpsNoAttack, $01
0008607D E10F                       	smpsAlterNote       $0F
0008607F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086083 E109                       	smpsAlterNote       $09
00086085 E701                       	dc.b	smpsNoAttack, $01
00086087 E105                       	smpsAlterNote       $05
00086089 E701                       	dc.b	smpsNoAttack, $01
0008608B E106                       	smpsAlterNote       $06
0008608D E701                       	dc.b	smpsNoAttack, $01
0008608F E10C                       	smpsAlterNote       $0C
00086091 E701                       	dc.b	smpsNoAttack, $01
00086093 E110                       	smpsAlterNote       $10
00086095 E701                       	dc.b	smpsNoAttack, $01
00086097 E10C                       	smpsAlterNote       $0C
00086099 E701                       	dc.b	smpsNoAttack, $01
0008609B E109                       	smpsAlterNote       $09
0008609D E701                       	dc.b	smpsNoAttack, $01
0008609F E105                       	smpsAlterNote       $05
000860A1 E701                       	dc.b	smpsNoAttack, $01
000860A3 E109                       	smpsAlterNote       $09
000860A5 E701                       	dc.b	smpsNoAttack, $01
000860A7 E10F                       	smpsAlterNote       $0F
000860A9 E701                       	dc.b	smpsNoAttack, $01
000860AB E110                       	smpsAlterNote       $10
000860AD E701                       	dc.b	smpsNoAttack, $01
000860AF E10C                       	smpsAlterNote       $0C
000860B1 E701                       	dc.b	smpsNoAttack, $01
000860B3 E106                       	smpsAlterNote       $06
000860B5 E701                       	dc.b	smpsNoAttack, $01
000860B7 E10B                       	smpsAlterNote       $0B
000860B9 BF02                       	dc.b	nD5, $02
000860BB E10C                       	smpsAlterNote       $0C
000860BD C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000860C3 E109                       	smpsAlterNote       $09
000860C5 E701                       	dc.b	smpsNoAttack, $01
000860C7 E105                       	smpsAlterNote       $05
000860C9 E701                       	dc.b	smpsNoAttack, $01
000860CB E109                       	smpsAlterNote       $09
000860CD E701                       	dc.b	smpsNoAttack, $01
000860CF E10F                       	smpsAlterNote       $0F
000860D1 E701                       	dc.b	smpsNoAttack, $01
000860D3 E110                       	smpsAlterNote       $10
000860D5 E701                       	dc.b	smpsNoAttack, $01
000860D7 E10C                       	smpsAlterNote       $0C
000860D9 E701                       	dc.b	smpsNoAttack, $01
000860DB E106                       	smpsAlterNote       $06
000860DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860E1 E109                       	smpsAlterNote       $09
000860E3 E701                       	dc.b	smpsNoAttack, $01
000860E5 E10F                       	smpsAlterNote       $0F
000860E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860EB E109                       	smpsAlterNote       $09
000860ED E701                       	dc.b	smpsNoAttack, $01
000860EF E106                       	smpsAlterNote       $06
000860F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860F5 E10C                       	smpsAlterNote       $0C
000860F7 E701                       	dc.b	smpsNoAttack, $01
000860F9 E110                       	smpsAlterNote       $10
000860FB E701                       	dc.b	smpsNoAttack, $01
000860FD E10F                       	smpsAlterNote       $0F
000860FF E701                       	dc.b	smpsNoAttack, $01
00086101 E109                       	smpsAlterNote       $09
00086103 E701                       	dc.b	smpsNoAttack, $01
00086105 E105                       	smpsAlterNote       $05
00086107 E701                       	dc.b	smpsNoAttack, $01
00086109 E109                       	smpsAlterNote       $09
0008610B E701                       	dc.b	smpsNoAttack, $01
0008610D E10C                       	smpsAlterNote       $0C
0008610F E701                       	dc.b	smpsNoAttack, $01
00086111 E110                       	smpsAlterNote       $10
00086113 E701                       	dc.b	smpsNoAttack, $01
00086115 E10C                       	smpsAlterNote       $0C
00086117 E701                       	dc.b	smpsNoAttack, $01
00086119 E106                       	smpsAlterNote       $06
0008611B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008611F E10D                       	smpsAlterNote       $0D
00086121 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00086129 E10C                       	smpsAlterNote       $0C
0008612B C10D                       	dc.b	nE5, $0D
0008612D E106                       	smpsAlterNote       $06
0008612F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086133 E109                       	smpsAlterNote       $09
00086135 E701                       	dc.b	smpsNoAttack, $01
00086137 E10F                       	smpsAlterNote       $0F
00086139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008613D E109                       	smpsAlterNote       $09
0008613F E701                       	dc.b	smpsNoAttack, $01
00086141 E106                       	smpsAlterNote       $06
00086143 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086147 E10C                       	smpsAlterNote       $0C
00086149 E701                       	dc.b	smpsNoAttack, $01
0008614B E110                       	smpsAlterNote       $10
0008614D E701                       	dc.b	smpsNoAttack, $01
0008614F E10F                       	smpsAlterNote       $0F
00086151 E701                       	dc.b	smpsNoAttack, $01
00086153 E109                       	smpsAlterNote       $09
00086155 E701                       	dc.b	smpsNoAttack, $01
00086157 E105                       	smpsAlterNote       $05
00086159 E701                       	dc.b	smpsNoAttack, $01
0008615B E106                       	smpsAlterNote       $06
0008615D 800F                       	dc.b	nRst, $0F
00086161 E6FF                       	smpsAlterVol        $FF
00086163 E10F                       	smpsAlterNote       $0F
00086165 BA01                       	dc.b	nA4, $01
00086167 E110                       	smpsAlterNote       $10
00086169 BB02                       	dc.b	nBb4, $02
0008616B E10F                       	smpsAlterNote       $0F
0008616D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00086173 E10B                       	smpsAlterNote       $0B
00086175 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086179 E10C                       	smpsAlterNote       $0C
0008617B C103                       	dc.b	nE5, $03
0008617D E10D                       	smpsAlterNote       $0D
0008617F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00086189 E10B                       	smpsAlterNote       $0B
0008618B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008618F E104                       	smpsAlterNote       $04
00086191 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086195 E10A                       	smpsAlterNote       $0A
00086197 E701                       	dc.b	smpsNoAttack, $01
00086199 E10D                       	smpsAlterNote       $0D
0008619B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008619F E107                       	smpsAlterNote       $07
000861A1 E701                       	dc.b	smpsNoAttack, $01
000861A3 E104                       	smpsAlterNote       $04
000861A5 8001                       	dc.b	nRst, $01
000861A7 E110                       	smpsAlterNote       $10
000861A9 C703                       	dc.b	nBb5, $03
000861AB E10F                       	smpsAlterNote       $0F
000861AD C603 8001                  	dc.b	nA5, $03, nRst, $01
000861B1 E10D                       	smpsAlterNote       $0D
000861B3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000861B7 E10C                       	smpsAlterNote       $0C
000861B9 E701                       	dc.b	smpsNoAttack, $01
000861BB E108                       	smpsAlterNote       $08
000861BD E701                       	dc.b	smpsNoAttack, $01
000861BF E109                       	smpsAlterNote       $09
000861C1 E701                       	dc.b	smpsNoAttack, $01
000861C3 E10F                       	smpsAlterNote       $0F
000861C5 E701                       	dc.b	smpsNoAttack, $01
000861C7 E113                       	smpsAlterNote       $13
000861C9 E701                       	dc.b	smpsNoAttack, $01
000861CB E10F                       	smpsAlterNote       $0F
000861CD E701                       	dc.b	smpsNoAttack, $01
000861CF E10C                       	smpsAlterNote       $0C
000861D1 E701                       	dc.b	smpsNoAttack, $01
000861D3 E108                       	smpsAlterNote       $08
000861D5 E701                       	dc.b	smpsNoAttack, $01
000861D7 E10C                       	smpsAlterNote       $0C
000861D9 E701                       	dc.b	smpsNoAttack, $01
000861DB E112                       	smpsAlterNote       $12
000861DD E701                       	dc.b	smpsNoAttack, $01
000861DF E113                       	smpsAlterNote       $13
000861E1 E701                       	dc.b	smpsNoAttack, $01
000861E3 E10F                       	smpsAlterNote       $0F
000861E5 E701                       	dc.b	smpsNoAttack, $01
000861E7 E109                       	smpsAlterNote       $09
000861E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861ED E10C                       	smpsAlterNote       $0C
000861EF E701                       	dc.b	smpsNoAttack, $01
000861F1 E112                       	smpsAlterNote       $12
000861F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861F7 E10C                       	smpsAlterNote       $0C
000861F9 E701                       	dc.b	smpsNoAttack, $01
000861FB E109                       	smpsAlterNote       $09
000861FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086201 E10F                       	smpsAlterNote       $0F
00086203 E701                       	dc.b	smpsNoAttack, $01
00086205 E113                       	smpsAlterNote       $13
00086207 E701                       	dc.b	smpsNoAttack, $01
00086209 E112                       	smpsAlterNote       $12
0008620B E701                       	dc.b	smpsNoAttack, $01
0008620D E10C                       	smpsAlterNote       $0C
0008620F E701                       	dc.b	smpsNoAttack, $01
00086211 E108                       	smpsAlterNote       $08
00086213 E701                       	dc.b	smpsNoAttack, $01
00086215 E10C                       	smpsAlterNote       $0C
00086217 E701                       	dc.b	smpsNoAttack, $01
00086219 E10F                       	smpsAlterNote       $0F
0008621B E701                       	dc.b	smpsNoAttack, $01
0008621D E113                       	smpsAlterNote       $13
0008621F E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00086223 E10B                       	smpsAlterNote       $0B
00086225 BF03                       	dc.b	nD5, $03
00086227 E10C                       	smpsAlterNote       $0C
00086229 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008622D E10D                       	smpsAlterNote       $0D
0008622F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086239 E10B                       	smpsAlterNote       $0B
0008623B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00086247 E110                       	smpsAlterNote       $10
00086249 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008624D E10F                       	smpsAlterNote       $0F
0008624F C604                       	dc.b	nA5, $04
00086251 E10D                       	smpsAlterNote       $0D
00086253 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086259 E109                       	smpsAlterNote       $09
0008625B E701                       	dc.b	smpsNoAttack, $01
0008625D E108                       	smpsAlterNote       $08
0008625F E701                       	dc.b	smpsNoAttack, $01
00086261 E10C                       	smpsAlterNote       $0C
00086263 E701                       	dc.b	smpsNoAttack, $01
00086265 E112                       	smpsAlterNote       $12
00086267 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008626B E10F                       	smpsAlterNote       $0F
0008626D E701                       	dc.b	smpsNoAttack, $01
0008626F E109                       	smpsAlterNote       $09
00086271 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086275 E10F                       	smpsAlterNote       $0F
00086277 E701                       	dc.b	smpsNoAttack, $01
00086279 E112                       	smpsAlterNote       $12
0008627B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008627F E10C                       	smpsAlterNote       $0C
00086281 E701                       	dc.b	smpsNoAttack, $01
00086283 E108                       	smpsAlterNote       $08
00086285 E701                       	dc.b	smpsNoAttack, $01
00086287 E109                       	smpsAlterNote       $09
00086289 E701                       	dc.b	smpsNoAttack, $01
0008628B E10F                       	smpsAlterNote       $0F
0008628D E701                       	dc.b	smpsNoAttack, $01
0008628F E113                       	smpsAlterNote       $13
00086291 E701                       	dc.b	smpsNoAttack, $01
00086293 E10F                       	smpsAlterNote       $0F
00086295 E701                       	dc.b	smpsNoAttack, $01
00086297 E10C                       	smpsAlterNote       $0C
00086299 E701                       	dc.b	smpsNoAttack, $01
0008629B E108                       	smpsAlterNote       $08
0008629D E701                       	dc.b	smpsNoAttack, $01
0008629F E10C                       	smpsAlterNote       $0C
000862A1 E701                       	dc.b	smpsNoAttack, $01
000862A3 E112                       	smpsAlterNote       $12
000862A5 E701                       	dc.b	smpsNoAttack, $01
000862A7 E113                       	smpsAlterNote       $13
000862A9 E701                       	dc.b	smpsNoAttack, $01
000862AB E10F                       	smpsAlterNote       $0F
000862AD E701                       	dc.b	smpsNoAttack, $01
000862AF E109                       	smpsAlterNote       $09
000862B1 E701                       	dc.b	smpsNoAttack, $01
000862B3 E10D                       	smpsAlterNote       $0D
000862B5 C402                       	dc.b	nG5, $02
000862B7 E10F                       	smpsAlterNote       $0F
000862B9 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000862C3 E10D                       	smpsAlterNote       $0D
000862C5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000862CB E10B                       	smpsAlterNote       $0B
000862CD BF0D                       	dc.b	nD5, $0D
000862CF E108                       	smpsAlterNote       $08
000862D1 E701                       	dc.b	smpsNoAttack, $01
000862D3 E104                       	smpsAlterNote       $04
000862D5 E701                       	dc.b	smpsNoAttack, $01
000862D7 E105                       	smpsAlterNote       $05
000862D9 E701                       	dc.b	smpsNoAttack, $01
000862DB E10B                       	smpsAlterNote       $0B
000862DD E701                       	dc.b	smpsNoAttack, $01
000862DF E10F                       	smpsAlterNote       $0F
000862E1 E701                       	dc.b	smpsNoAttack, $01
000862E3 E10B                       	smpsAlterNote       $0B
000862E5 E701                       	dc.b	smpsNoAttack, $01
000862E7 E108                       	smpsAlterNote       $08
000862E9 E701                       	dc.b	smpsNoAttack, $01
000862EB E104                       	smpsAlterNote       $04
000862ED E701                       	dc.b	smpsNoAttack, $01
000862EF E108                       	smpsAlterNote       $08
000862F1 E701                       	dc.b	smpsNoAttack, $01
000862F3 E10E                       	smpsAlterNote       $0E
000862F5 E701                       	dc.b	smpsNoAttack, $01
000862F7 E10F                       	smpsAlterNote       $0F
000862F9 E701                       	dc.b	smpsNoAttack, $01
000862FB E10C                       	smpsAlterNote       $0C
000862FD C101                       	dc.b	nE5, $01
000862FF E10D                       	smpsAlterNote       $0D
00086301 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00086309 E10F                       	smpsAlterNote       $0F
0008630B C607                       	dc.b	nA5, $07
0008630D E10C                       	smpsAlterNote       $0C
0008630F CD07                       	dc.b	nE6, $07
00086311 E10D                       	smpsAlterNote       $0D
00086313 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086317 E10C                       	smpsAlterNote       $0C
00086319 CD03                       	dc.b	nE6, $03
0008631B E10A                       	smpsAlterNote       $0A
0008631D C903 8001                  	dc.b	nC6, $03, nRst, $01
00086321 E10D                       	smpsAlterNote       $0D
00086323 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00086329 E10A                       	smpsAlterNote       $0A
0008632B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008632F E110                       	smpsAlterNote       $10
00086331 E701                       	dc.b	smpsNoAttack, $01
00086333 E114                       	smpsAlterNote       $14
00086335 E701                       	dc.b	smpsNoAttack, $01
00086337 E113                       	smpsAlterNote       $13
00086339 E701                       	dc.b	smpsNoAttack, $01
0008633B E10D                       	smpsAlterNote       $0D
0008633D E701                       	dc.b	smpsNoAttack, $01
0008633F E109                       	smpsAlterNote       $09
00086341 E701                       	dc.b	smpsNoAttack, $01
00086343 E10D                       	smpsAlterNote       $0D
00086345 E701                       	dc.b	smpsNoAttack, $01
00086347 E110                       	smpsAlterNote       $10
00086349 E701                       	dc.b	smpsNoAttack, $01
0008634B E114                       	smpsAlterNote       $14
0008634D E701                       	dc.b	smpsNoAttack, $01
0008634F E10F                       	smpsAlterNote       $0F
00086351 C607                       	dc.b	nA5, $07
00086353 E10D                       	smpsAlterNote       $0D
00086355 C40D                       	dc.b	nG5, $0D
00086357 E10A                       	smpsAlterNote       $0A
00086359 E701                       	dc.b	smpsNoAttack, $01
0008635B E106                       	smpsAlterNote       $06
0008635D E701                       	dc.b	smpsNoAttack, $01
0008635F E10A                       	smpsAlterNote       $0A
00086361 E701                       	dc.b	smpsNoAttack, $01
00086363 E10D                       	smpsAlterNote       $0D
00086365 E701                       	dc.b	smpsNoAttack, $01
00086367 E111                       	smpsAlterNote       $11
00086369 E701                       	dc.b	smpsNoAttack, $01
0008636B E10D                       	smpsAlterNote       $0D
0008636D E701                       	dc.b	smpsNoAttack, $01
0008636F E107                       	smpsAlterNote       $07
00086371 E701                       	dc.b	smpsNoAttack, $01
00086373 E106                       	smpsAlterNote       $06
00086375 E701                       	dc.b	smpsNoAttack, $01
00086377 E10A                       	smpsAlterNote       $0A
00086379 E701                       	dc.b	smpsNoAttack, $01
0008637B E110                       	smpsAlterNote       $10
0008637D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086381 E10D                       	smpsAlterNote       $0D
00086383 E701                       	dc.b	smpsNoAttack, $01
00086385 E107                       	smpsAlterNote       $07
00086387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008638B E10F                       	smpsAlterNote       $0F
0008638D C60E                       	dc.b	nA5, $0E
0008638F E109                       	smpsAlterNote       $09
00086391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086395 E10F                       	smpsAlterNote       $0F
00086397 E701                       	dc.b	smpsNoAttack, $01
00086399 E112                       	smpsAlterNote       $12
0008639B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008639F E10C                       	smpsAlterNote       $0C
000863A1 E701                       	dc.b	smpsNoAttack, $01
000863A3 E108                       	smpsAlterNote       $08
000863A5 E701                       	dc.b	smpsNoAttack, $01
000863A7 E109                       	smpsAlterNote       $09
000863A9 E701                       	dc.b	smpsNoAttack, $01
000863AB E10F                       	smpsAlterNote       $0F
000863AD E701                       	dc.b	smpsNoAttack, $01
000863AF E113                       	smpsAlterNote       $13
000863B1 E701                       	dc.b	smpsNoAttack, $01
000863B3 E10F                       	smpsAlterNote       $0F
000863B5 E701                       	dc.b	smpsNoAttack, $01
000863B7 E10C                       	smpsAlterNote       $0C
000863B9 E701                       	dc.b	smpsNoAttack, $01
000863BB E108                       	smpsAlterNote       $08
000863BD E701                       	dc.b	smpsNoAttack, $01
000863BF E109                       	smpsAlterNote       $09
000863C1 8001                       	dc.b	nRst, $01
000863C3 E110                       	smpsAlterNote       $10
000863C5 C70D                       	dc.b	nBb5, $0D
000863C7 E10D                       	smpsAlterNote       $0D
000863C9 E701                       	dc.b	smpsNoAttack, $01
000863CB E109                       	smpsAlterNote       $09
000863CD E701                       	dc.b	smpsNoAttack, $01
000863CF E10D                       	smpsAlterNote       $0D
000863D1 E701                       	dc.b	smpsNoAttack, $01
000863D3 E113                       	smpsAlterNote       $13
000863D5 E701                       	dc.b	smpsNoAttack, $01
000863D7 E114                       	smpsAlterNote       $14
000863D9 E701                       	dc.b	smpsNoAttack, $01
000863DB E110                       	smpsAlterNote       $10
000863DD E701                       	dc.b	smpsNoAttack, $01
000863DF E10A                       	smpsAlterNote       $0A
000863E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863E5 E10D                       	smpsAlterNote       $0D
000863E7 E701                       	dc.b	smpsNoAttack, $01
000863E9 E113                       	smpsAlterNote       $13
000863EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863EF E10D                       	smpsAlterNote       $0D
000863F1 E701                       	dc.b	smpsNoAttack, $01
000863F3 E10A                       	smpsAlterNote       $0A
000863F5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000863FF E10B                       	smpsAlterNote       $0B
00086401 8001                       	dc.b	nRst, $01
00086403 E10C                       	smpsAlterNote       $0C
00086405 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00086409 E10B                       	smpsAlterNote       $0B
0008640B CB0D                       	dc.b	nD6, $0D
0008640D E105                       	smpsAlterNote       $05
0008640F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086413 E108                       	smpsAlterNote       $08
00086415 E701                       	dc.b	smpsNoAttack, $01
00086417 E10E                       	smpsAlterNote       $0E
00086419 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008641D E108                       	smpsAlterNote       $08
0008641F E701                       	dc.b	smpsNoAttack, $01
00086421 E105                       	smpsAlterNote       $05
00086423 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086427 E10B                       	smpsAlterNote       $0B
00086429 E701                       	dc.b	smpsNoAttack, $01
0008642B E10F                       	smpsAlterNote       $0F
0008642D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086431 E10C                       	smpsAlterNote       $0C
00086433 CC0D                       	dc.b	nEb6, $0D
00086435 E106                       	smpsAlterNote       $06
00086437 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008643B E109                       	smpsAlterNote       $09
0008643D E701                       	dc.b	smpsNoAttack, $01
0008643F E10C                       	smpsAlterNote       $0C
00086441 8001                       	dc.b	nRst, $01
00086443 E10A                       	smpsAlterNote       $0A
00086445 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00086451 CB0E                       	dc.b	nD6, $0E
00086453 E105                       	smpsAlterNote       $05
00086455 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086459 E10B                       	smpsAlterNote       $0B
0008645B E701                       	dc.b	smpsNoAttack, $01
0008645D E10E                       	smpsAlterNote       $0E
0008645F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086463 E108                       	smpsAlterNote       $08
00086465 E701                       	dc.b	smpsNoAttack, $01
00086467 E104                       	smpsAlterNote       $04
00086469 E701                       	dc.b	smpsNoAttack, $01
0008646B E105                       	smpsAlterNote       $05
0008646D E701                       	dc.b	smpsNoAttack, $01
0008646F E10B                       	smpsAlterNote       $0B
00086471 E701                       	dc.b	smpsNoAttack, $01
00086473 E10F                       	smpsAlterNote       $0F
00086475 E701                       	dc.b	smpsNoAttack, $01
00086477 E10D                       	smpsAlterNote       $0D
00086479 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008647D E10C                       	smpsAlterNote       $0C
0008647F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00086483 E10A                       	smpsAlterNote       $0A
00086485 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00086491 CB0D                       	dc.b	nD6, $0D
00086493 E108                       	smpsAlterNote       $08
00086495 E701                       	dc.b	smpsNoAttack, $01
00086497 E104                       	smpsAlterNote       $04
00086499 E701                       	dc.b	smpsNoAttack, $01
0008649B E105                       	smpsAlterNote       $05
0008649D E701                       	dc.b	smpsNoAttack, $01
0008649F E10B                       	smpsAlterNote       $0B
000864A1 E701                       	dc.b	smpsNoAttack, $01
000864A3 E10F                       	smpsAlterNote       $0F
000864A5 E701                       	dc.b	smpsNoAttack, $01
000864A7 E10B                       	smpsAlterNote       $0B
000864A9 E701                       	dc.b	smpsNoAttack, $01
000864AB E108                       	smpsAlterNote       $08
000864AD E701                       	dc.b	smpsNoAttack, $01
000864AF E104                       	smpsAlterNote       $04
000864B1 E701                       	dc.b	smpsNoAttack, $01
000864B3 E108                       	smpsAlterNote       $08
000864B5 E701                       	dc.b	smpsNoAttack, $01
000864B7 E10E                       	smpsAlterNote       $0E
000864B9 E701                       	dc.b	smpsNoAttack, $01
000864BB E10F                       	smpsAlterNote       $0F
000864BD E701                       	dc.b	smpsNoAttack, $01
000864BF E10C                       	smpsAlterNote       $0C
000864C1 CC0D                       	dc.b	nEb6, $0D
000864C3 E109                       	smpsAlterNote       $09
000864C5 E701                       	dc.b	smpsNoAttack, $01
000864C7 E105                       	smpsAlterNote       $05
000864C9 E701                       	dc.b	smpsNoAttack, $01
000864CB E106                       	smpsAlterNote       $06
000864CD E701                       	dc.b	smpsNoAttack, $01
000864CF E10C                       	smpsAlterNote       $0C
000864D1 E701                       	dc.b	smpsNoAttack, $01
000864D3 E10A                       	smpsAlterNote       $0A
000864D5 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000864E1 CB0D                       	dc.b	nD6, $0D
000864E3 E108                       	smpsAlterNote       $08
000864E5 E701                       	dc.b	smpsNoAttack, $01
000864E7 E104                       	smpsAlterNote       $04
000864E9 E701                       	dc.b	smpsNoAttack, $01
000864EB E108                       	smpsAlterNote       $08
000864ED E701                       	dc.b	smpsNoAttack, $01
000864EF E10B                       	smpsAlterNote       $0B
000864F1 E701                       	dc.b	smpsNoAttack, $01
000864F3 E10F                       	smpsAlterNote       $0F
000864F5 E701                       	dc.b	smpsNoAttack, $01
000864F7 E10B                       	smpsAlterNote       $0B
000864F9 E701                       	dc.b	smpsNoAttack, $01
000864FB E105                       	smpsAlterNote       $05
000864FD E701                       	dc.b	smpsNoAttack, $01
000864FF E104                       	smpsAlterNote       $04
00086501 E701                       	dc.b	smpsNoAttack, $01
00086503 E108                       	smpsAlterNote       $08
00086505 E701                       	dc.b	smpsNoAttack, $01
00086507 E10E                       	smpsAlterNote       $0E
00086509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008650D E10B                       	smpsAlterNote       $0B
0008650F E701                       	dc.b	smpsNoAttack, $01
00086511 E105                       	smpsAlterNote       $05
00086513 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008651B 03                         	dc.b	$03
0008651C E601                       	smpsAlterVol        $01
0008651E F6F1 D1                    	smpsJump            music84_Jump01
00086521                            
00086521                            ; FM5 Data
00086521                            music84_FM5:
00086523 E080                       	smpsPan             panLeft, $00
00086525 8003                       	dc.b	nRst, $03
00086527 E10D                       	smpsAlterNote       $0D
00086529 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008652D E10C                       	smpsAlterNote       $0C
0008652F C103 800A                  	dc.b	nE5, $03, nRst, $0A
00086533 E10F                       	smpsAlterNote       $0F
00086535 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008653B E6FE                       	smpsAlterVol        $FE
0008653D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00086543 E10D                       	smpsAlterNote       $0D
00086545 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008654B E10C                       	smpsAlterNote       $0C
0008654D C102 8001                  	dc.b	nE5, $02, nRst, $01
00086551 E10A                       	smpsAlterNote       $0A
00086553 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00086559 03                         	dc.b	$03
0008655A                            
0008655A                            music84_Jump00:
0008655A 8004                       	dc.b	nRst, $04
0008655C E602                       	smpsAlterVol        $02
0008655E E10D                       	smpsAlterNote       $0D
00086560 B60D                       	dc.b	nF4, $0D
00086562 E107                       	smpsAlterNote       $07
00086564 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086568 E10A                       	smpsAlterNote       $0A
0008656A E701                       	dc.b	smpsNoAttack, $01
0008656C E110                       	smpsAlterNote       $10
0008656E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086572 E10A                       	smpsAlterNote       $0A
00086574 E701                       	dc.b	smpsNoAttack, $01
00086576 E107                       	smpsAlterNote       $07
00086578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008657C E10D                       	smpsAlterNote       $0D
0008657E E701                       	dc.b	smpsNoAttack, $01
00086580 E111                       	smpsAlterNote       $11
00086582 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086586 E10D                       	smpsAlterNote       $0D
00086588 B80D                       	dc.b	nG4, $0D
0008658A E107                       	smpsAlterNote       $07
0008658C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086590 E10A                       	smpsAlterNote       $0A
00086592 E701                       	dc.b	smpsNoAttack, $01
00086594 E110                       	smpsAlterNote       $10
00086596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008659A E10A                       	smpsAlterNote       $0A
0008659C E701                       	dc.b	smpsNoAttack, $01
0008659E E107                       	smpsAlterNote       $07
000865A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865A4 E10D                       	smpsAlterNote       $0D
000865A6 E701                       	dc.b	smpsNoAttack, $01
000865A8 E111                       	smpsAlterNote       $11
000865AA E701                       	dc.b	smpsNoAttack, $01
000865AC E110                       	smpsAlterNote       $10
000865AE E701                       	dc.b	smpsNoAttack, $01
000865B0 E10A                       	smpsAlterNote       $0A
000865B2 E701                       	dc.b	smpsNoAttack, $01
000865B4 E106                       	smpsAlterNote       $06
000865B6 E701                       	dc.b	smpsNoAttack, $01
000865B8 E10A                       	smpsAlterNote       $0A
000865BA E701                       	dc.b	smpsNoAttack, $01
000865BC E10D                       	smpsAlterNote       $0D
000865BE E701                       	dc.b	smpsNoAttack, $01
000865C0 E111                       	smpsAlterNote       $11
000865C2 E701                       	dc.b	smpsNoAttack, $01
000865C4 E10D                       	smpsAlterNote       $0D
000865C6 E701                       	dc.b	smpsNoAttack, $01
000865C8 E10F                       	smpsAlterNote       $0F
000865CA BA0E                       	dc.b	nA4, $0E
000865CC E109                       	smpsAlterNote       $09
000865CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865D2 E10F                       	smpsAlterNote       $0F
000865D4 E701                       	dc.b	smpsNoAttack, $01
000865D6 E112                       	smpsAlterNote       $12
000865D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865DC E10C                       	smpsAlterNote       $0C
000865DE E701                       	dc.b	smpsNoAttack, $01
000865E0 E108                       	smpsAlterNote       $08
000865E2 E701                       	dc.b	smpsNoAttack, $01
000865E4 E109                       	smpsAlterNote       $09
000865E6 E701                       	dc.b	smpsNoAttack, $01
000865E8 E10F                       	smpsAlterNote       $0F
000865EA E701                       	dc.b	smpsNoAttack, $01
000865EC E113                       	smpsAlterNote       $13
000865EE E701                       	dc.b	smpsNoAttack, $01
000865F0 E10F                       	smpsAlterNote       $0F
000865F2 E701                       	dc.b	smpsNoAttack, $01
000865F4 E109                       	smpsAlterNote       $09
000865F6 E701                       	dc.b	smpsNoAttack, $01
000865F8 E108                       	smpsAlterNote       $08
000865FA E701                       	dc.b	smpsNoAttack, $01
000865FC E10C                       	smpsAlterNote       $0C
000865FE E701                       	dc.b	smpsNoAttack, $01
00086600 E112                       	smpsAlterNote       $12
00086602 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086606 E10F                       	smpsAlterNote       $0F
00086608 E701                       	dc.b	smpsNoAttack, $01
0008660A E109                       	smpsAlterNote       $09
0008660C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086610 E10F                       	smpsAlterNote       $0F
00086612 E701                       	dc.b	smpsNoAttack, $01
00086614 E112                       	smpsAlterNote       $12
00086616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008661A E10C                       	smpsAlterNote       $0C
0008661C E701                       	dc.b	smpsNoAttack, $01
0008661E E108                       	smpsAlterNote       $08
00086620 E701                       	dc.b	smpsNoAttack, $01
00086622 E109                       	smpsAlterNote       $09
00086624 E701                       	dc.b	smpsNoAttack, $01
00086626 E10F                       	smpsAlterNote       $0F
00086628 E701                       	dc.b	smpsNoAttack, $01
0008662A E113                       	smpsAlterNote       $13
0008662C E701                       	dc.b	smpsNoAttack, $01
0008662E E10F                       	smpsAlterNote       $0F
00086630 E701                       	dc.b	smpsNoAttack, $01
00086632 E10C                       	smpsAlterNote       $0C
00086634 E701                       	dc.b	smpsNoAttack, $01
00086636 E108                       	smpsAlterNote       $08
00086638 E701                       	dc.b	smpsNoAttack, $01
0008663A E109                       	smpsAlterNote       $09
0008663C 8001                       	dc.b	nRst, $01
0008663E E10C                       	smpsAlterNote       $0C
00086640 B50A                       	dc.b	nE4, $0A
00086642 E10D                       	smpsAlterNote       $0D
00086644 B60D                       	dc.b	nF4, $0D
00086646 E10A                       	smpsAlterNote       $0A
00086648 E701                       	dc.b	smpsNoAttack, $01
0008664A E106                       	smpsAlterNote       $06
0008664C E701                       	dc.b	smpsNoAttack, $01
0008664E E107                       	smpsAlterNote       $07
00086650 E701                       	dc.b	smpsNoAttack, $01
00086652 E10D                       	smpsAlterNote       $0D
00086654 E701                       	dc.b	smpsNoAttack, $01
00086656 E111                       	smpsAlterNote       $11
00086658 E701                       	dc.b	smpsNoAttack, $01
0008665A E10D                       	smpsAlterNote       $0D
0008665C E701                       	dc.b	smpsNoAttack, $01
0008665E E10A                       	smpsAlterNote       $0A
00086660 E701                       	dc.b	smpsNoAttack, $01
00086662 E106                       	smpsAlterNote       $06
00086664 E701                       	dc.b	smpsNoAttack, $01
00086666 E10A                       	smpsAlterNote       $0A
00086668 E701                       	dc.b	smpsNoAttack, $01
0008666A E110                       	smpsAlterNote       $10
0008666C E701                       	dc.b	smpsNoAttack, $01
0008666E E111                       	smpsAlterNote       $11
00086670 E701                       	dc.b	smpsNoAttack, $01
00086672 E10D                       	smpsAlterNote       $0D
00086674 B80D                       	dc.b	nG4, $0D
00086676 E10A                       	smpsAlterNote       $0A
00086678 E701                       	dc.b	smpsNoAttack, $01
0008667A E106                       	smpsAlterNote       $06
0008667C E701                       	dc.b	smpsNoAttack, $01
0008667E E107                       	smpsAlterNote       $07
00086680 E701                       	dc.b	smpsNoAttack, $01
00086682 E10D                       	smpsAlterNote       $0D
00086684 E701                       	dc.b	smpsNoAttack, $01
00086686 E111                       	smpsAlterNote       $11
00086688 E701                       	dc.b	smpsNoAttack, $01
0008668A E10D                       	smpsAlterNote       $0D
0008668C E701                       	dc.b	smpsNoAttack, $01
0008668E E10A                       	smpsAlterNote       $0A
00086690 E701                       	dc.b	smpsNoAttack, $01
00086692 E106                       	smpsAlterNote       $06
00086694 E701                       	dc.b	smpsNoAttack, $01
00086696 E10A                       	smpsAlterNote       $0A
00086698 E701                       	dc.b	smpsNoAttack, $01
0008669A E110                       	smpsAlterNote       $10
0008669C E701                       	dc.b	smpsNoAttack, $01
0008669E E111                       	smpsAlterNote       $11
000866A0 E701                       	dc.b	smpsNoAttack, $01
000866A2 E10D                       	smpsAlterNote       $0D
000866A4 E701                       	dc.b	smpsNoAttack, $01
000866A6 E107                       	smpsAlterNote       $07
000866A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866AC E10A                       	smpsAlterNote       $0A
000866AE E701                       	dc.b	smpsNoAttack, $01
000866B0 E110                       	smpsAlterNote       $10
000866B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866B6 E10D                       	smpsAlterNote       $0D
000866B8 8001                       	dc.b	nRst, $01
000866BA E10F                       	smpsAlterNote       $0F
000866BC BA0D                       	dc.b	nA4, $0D
000866BE E10C                       	smpsAlterNote       $0C
000866C0 E701                       	dc.b	smpsNoAttack, $01
000866C2 E108                       	smpsAlterNote       $08
000866C4 E701                       	dc.b	smpsNoAttack, $01
000866C6 E10C                       	smpsAlterNote       $0C
000866C8 E701                       	dc.b	smpsNoAttack, $01
000866CA E112                       	smpsAlterNote       $12
000866CC E701                       	dc.b	smpsNoAttack, $01
000866CE E113                       	smpsAlterNote       $13
000866D0 E701                       	dc.b	smpsNoAttack, $01
000866D2 E10F                       	smpsAlterNote       $0F
000866D4 E701                       	dc.b	smpsNoAttack, $01
000866D6 E109                       	smpsAlterNote       $09
000866D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866DC E10C                       	smpsAlterNote       $0C
000866DE E701                       	dc.b	smpsNoAttack, $01
000866E0 E112                       	smpsAlterNote       $12
000866E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866E6 E10C                       	smpsAlterNote       $0C
000866E8 E701                       	dc.b	smpsNoAttack, $01
000866EA E109                       	smpsAlterNote       $09
000866EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866F0 E10F                       	smpsAlterNote       $0F
000866F2 E701                       	dc.b	smpsNoAttack, $01
000866F4 E113                       	smpsAlterNote       $13
000866F6 E701                       	dc.b	smpsNoAttack, $01
000866F8 E112                       	smpsAlterNote       $12
000866FA E701                       	dc.b	smpsNoAttack, $01
000866FC E10C                       	smpsAlterNote       $0C
000866FE E701                       	dc.b	smpsNoAttack, $01
00086700 E108                       	smpsAlterNote       $08
00086702 E701                       	dc.b	smpsNoAttack, $01
00086704 E10C                       	smpsAlterNote       $0C
00086706 E701                       	dc.b	smpsNoAttack, $01
00086708 E10F                       	smpsAlterNote       $0F
0008670A E701                       	dc.b	smpsNoAttack, $01
0008670C E113                       	smpsAlterNote       $13
0008670E E701                       	dc.b	smpsNoAttack, $01
00086710 E10F                       	smpsAlterNote       $0F
00086712 E701                       	dc.b	smpsNoAttack, $01
00086714 E109                       	smpsAlterNote       $09
00086716 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008671A E10D                       	smpsAlterNote       $0D
0008671C B609 8001                  	dc.b	nF4, $09, nRst, $01
00086720 E10C                       	smpsAlterNote       $0C
00086722 B506 8001                  	dc.b	nE4, $06, nRst, $01
00086726 E10B                       	smpsAlterNote       $0B
00086728 B30D                       	dc.b	nD4, $0D
0008672A E10C                       	smpsAlterNote       $0C
0008672C B503 8001                  	dc.b	nE4, $03, nRst, $01
00086730 E10D                       	smpsAlterNote       $0D
00086732 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008673A E109                       	smpsAlterNote       $09
0008673C E701                       	dc.b	smpsNoAttack, $01
0008673E E108                       	smpsAlterNote       $08
00086740 E701                       	dc.b	smpsNoAttack, $01
00086742 E10C                       	smpsAlterNote       $0C
00086744 E701                       	dc.b	smpsNoAttack, $01
00086746 E112                       	smpsAlterNote       $12
00086748 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008674C E10F                       	smpsAlterNote       $0F
0008674E E701                       	dc.b	smpsNoAttack, $01
00086750 E109                       	smpsAlterNote       $09
00086752 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086756 E10F                       	smpsAlterNote       $0F
00086758 E701                       	dc.b	smpsNoAttack, $01
0008675A E112                       	smpsAlterNote       $12
0008675C E701                       	dc.b	smpsNoAttack, $01
0008675E E113                       	smpsAlterNote       $13
00086760 8001                       	dc.b	nRst, $01
00086762 E10D                       	smpsAlterNote       $0D
00086764 C20D                       	dc.b	nF5, $0D
00086766 E107                       	smpsAlterNote       $07
00086768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008676C E10A                       	smpsAlterNote       $0A
0008676E E701                       	dc.b	smpsNoAttack, $01
00086770 E110                       	smpsAlterNote       $10
00086772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086776 E10A                       	smpsAlterNote       $0A
00086778 E701                       	dc.b	smpsNoAttack, $01
0008677A E107                       	smpsAlterNote       $07
0008677C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086780 E10D                       	smpsAlterNote       $0D
00086782 E701                       	dc.b	smpsNoAttack, $01
00086784 E111                       	smpsAlterNote       $11
00086786 E701                       	dc.b	smpsNoAttack, $01
00086788 E110                       	smpsAlterNote       $10
0008678A E701                       	dc.b	smpsNoAttack, $01
0008678C E10A                       	smpsAlterNote       $0A
0008678E E701                       	dc.b	smpsNoAttack, $01
00086790 E106                       	smpsAlterNote       $06
00086792 E701                       	dc.b	smpsNoAttack, $01
00086794 E10A                       	smpsAlterNote       $0A
00086796 E701                       	dc.b	smpsNoAttack, $01
00086798 E10D                       	smpsAlterNote       $0D
0008679A E701                       	dc.b	smpsNoAttack, $01
0008679C E111                       	smpsAlterNote       $11
0008679E E701                       	dc.b	smpsNoAttack, $01
000867A0 E10D                       	smpsAlterNote       $0D
000867A2 E701                       	dc.b	smpsNoAttack, $01
000867A4 E107                       	smpsAlterNote       $07
000867A6 E701                       	dc.b	smpsNoAttack, $01
000867A8 E106                       	smpsAlterNote       $06
000867AA E701                       	dc.b	smpsNoAttack, $01
000867AC E10A                       	smpsAlterNote       $0A
000867AE E701                       	dc.b	smpsNoAttack, $01
000867B0 E110                       	smpsAlterNote       $10
000867B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867B6 E10D                       	smpsAlterNote       $0D
000867B8 E701                       	dc.b	smpsNoAttack, $01
000867BA E107                       	smpsAlterNote       $07
000867BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867C0 E10D                       	smpsAlterNote       $0D
000867C2 E701                       	dc.b	smpsNoAttack, $01
000867C4 E110                       	smpsAlterNote       $10
000867C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867CA E10A                       	smpsAlterNote       $0A
000867CC E701                       	dc.b	smpsNoAttack, $01
000867CE E106                       	smpsAlterNote       $06
000867D0 E701                       	dc.b	smpsNoAttack, $01
000867D2 E107                       	smpsAlterNote       $07
000867D4 E701                       	dc.b	smpsNoAttack, $01
000867D6 E10D                       	smpsAlterNote       $0D
000867D8 E701                       	dc.b	smpsNoAttack, $01
000867DA E111                       	smpsAlterNote       $11
000867DC E701                       	dc.b	smpsNoAttack, $01
000867DE E10D                       	smpsAlterNote       $0D
000867E0 E701                       	dc.b	smpsNoAttack, $01
000867E2 E10A                       	smpsAlterNote       $0A
000867E4 E701                       	dc.b	smpsNoAttack, $01
000867E6 E106                       	smpsAlterNote       $06
000867E8 E701                       	dc.b	smpsNoAttack, $01
000867EA E10A                       	smpsAlterNote       $0A
000867EC E701                       	dc.b	smpsNoAttack, $01
000867EE E110                       	smpsAlterNote       $10
000867F0 E701                       	dc.b	smpsNoAttack, $01
000867F2 E111                       	smpsAlterNote       $11
000867F4 E701                       	dc.b	smpsNoAttack, $01
000867F6 E10D                       	smpsAlterNote       $0D
000867F8 E701                       	dc.b	smpsNoAttack, $01
000867FA E107                       	smpsAlterNote       $07
000867FC E701                       	dc.b	smpsNoAttack, $01
000867FE E10D                       	smpsAlterNote       $0D
00086800 C207                       	dc.b	nF5, $07
00086802 E10C                       	smpsAlterNote       $0C
00086804 C10D                       	dc.b	nE5, $0D
00086806 E109                       	smpsAlterNote       $09
00086808 E701                       	dc.b	smpsNoAttack, $01
0008680A E106                       	smpsAlterNote       $06
0008680C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086810 E10C                       	smpsAlterNote       $0C
00086812 E701                       	dc.b	smpsNoAttack, $01
00086814 E110                       	smpsAlterNote       $10
00086816 E701                       	dc.b	smpsNoAttack, $01
00086818 E10F                       	smpsAlterNote       $0F
0008681A E701                       	dc.b	smpsNoAttack, $01
0008681C E109                       	smpsAlterNote       $09
0008681E E701                       	dc.b	smpsNoAttack, $01
00086820 E105                       	smpsAlterNote       $05
00086822 E701                       	dc.b	smpsNoAttack, $01
00086824 E109                       	smpsAlterNote       $09
00086826 E701                       	dc.b	smpsNoAttack, $01
00086828 E10C                       	smpsAlterNote       $0C
0008682A E701                       	dc.b	smpsNoAttack, $01
0008682C E110                       	smpsAlterNote       $10
0008682E E701                       	dc.b	smpsNoAttack, $01
00086830 E10B                       	smpsAlterNote       $0B
00086832 BF0D                       	dc.b	nD5, $0D
00086834 E108                       	smpsAlterNote       $08
00086836 E701                       	dc.b	smpsNoAttack, $01
00086838 E105                       	smpsAlterNote       $05
0008683A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008683E E10B                       	smpsAlterNote       $0B
00086840 E701                       	dc.b	smpsNoAttack, $01
00086842 E10F                       	smpsAlterNote       $0F
00086844 E701                       	dc.b	smpsNoAttack, $01
00086846 E10E                       	smpsAlterNote       $0E
00086848 E701                       	dc.b	smpsNoAttack, $01
0008684A E108                       	smpsAlterNote       $08
0008684C E701                       	dc.b	smpsNoAttack, $01
0008684E E104                       	smpsAlterNote       $04
00086850 E701                       	dc.b	smpsNoAttack, $01
00086852 E108                       	smpsAlterNote       $08
00086854 E701                       	dc.b	smpsNoAttack, $01
00086856 E10E                       	smpsAlterNote       $0E
00086858 E701                       	dc.b	smpsNoAttack, $01
0008685A E10F                       	smpsAlterNote       $0F
0008685C E701                       	dc.b	smpsNoAttack, $01
0008685E E10B                       	smpsAlterNote       $0B
00086860 E701                       	dc.b	smpsNoAttack, $01
00086862 E105                       	smpsAlterNote       $05
00086864 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086868 E108                       	smpsAlterNote       $08
0008686A E701                       	dc.b	smpsNoAttack, $01
0008686C E10E                       	smpsAlterNote       $0E
0008686E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086872 E108                       	smpsAlterNote       $08
00086874 E701                       	dc.b	smpsNoAttack, $01
00086876 E105                       	smpsAlterNote       $05
00086878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008687C E10B                       	smpsAlterNote       $0B
0008687E E701                       	dc.b	smpsNoAttack, $01
00086880 E10F                       	smpsAlterNote       $0F
00086882 E701                       	dc.b	smpsNoAttack, $01
00086884 E10E                       	smpsAlterNote       $0E
00086886 E701                       	dc.b	smpsNoAttack, $01
00086888 E108                       	smpsAlterNote       $08
0008688A E701                       	dc.b	smpsNoAttack, $01
0008688C E104                       	smpsAlterNote       $04
0008688E E701                       	dc.b	smpsNoAttack, $01
00086890 E108                       	smpsAlterNote       $08
00086892 E701                       	dc.b	smpsNoAttack, $01
00086894 E10B                       	smpsAlterNote       $0B
00086896 E701                       	dc.b	smpsNoAttack, $01
00086898 E10F                       	smpsAlterNote       $0F
0008689A E701                       	dc.b	smpsNoAttack, $01
0008689C E10B                       	smpsAlterNote       $0B
0008689E E701                       	dc.b	smpsNoAttack, $01
000868A0 E105                       	smpsAlterNote       $05
000868A2 E701                       	dc.b	smpsNoAttack, $01
000868A4 E104                       	smpsAlterNote       $04
000868A6 E701                       	dc.b	smpsNoAttack, $01
000868A8 E108                       	smpsAlterNote       $08
000868AA E701                       	dc.b	smpsNoAttack, $01
000868AC E10E                       	smpsAlterNote       $0E
000868AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868B2 E10B                       	smpsAlterNote       $0B
000868B4 E701                       	dc.b	smpsNoAttack, $01
000868B6 E105                       	smpsAlterNote       $05
000868B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868BC E10B                       	smpsAlterNote       $0B
000868BE E701                       	dc.b	smpsNoAttack, $01
000868C0 E10E                       	smpsAlterNote       $0E
000868C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868C6 E108                       	smpsAlterNote       $08
000868C8 E701                       	dc.b	smpsNoAttack, $01
000868CA E105                       	smpsAlterNote       $05
000868CC 8001                       	dc.b	nRst, $01
000868D0 E601                       	smpsAlterVol        $01
000868D2 E10B                       	smpsAlterNote       $0B
000868D4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000868E0 8004                       	dc.b	nRst, $04
000868E4 E6FF                       	smpsAlterVol        $FF
000868E6 E10D                       	smpsAlterNote       $0D
000868E8 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000868F0 E10C                       	smpsAlterNote       $0C
000868F2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000868F7 E10D                       	smpsAlterNote       $0D
000868F9 B60D                       	dc.b	nF4, $0D
000868FB E10A                       	smpsAlterNote       $0A
000868FD E701                       	dc.b	smpsNoAttack, $01
000868FF E106                       	smpsAlterNote       $06
00086901 E701                       	dc.b	smpsNoAttack, $01
00086903 E10A                       	smpsAlterNote       $0A
00086905 E701                       	dc.b	smpsNoAttack, $01
00086907 E110                       	smpsAlterNote       $10
00086909 E701                       	dc.b	smpsNoAttack, $01
0008690B E111                       	smpsAlterNote       $11
0008690D E701                       	dc.b	smpsNoAttack, $01
0008690F E10D                       	smpsAlterNote       $0D
00086911 E701                       	dc.b	smpsNoAttack, $01
00086913 E107                       	smpsAlterNote       $07
00086915 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086919 E10A                       	smpsAlterNote       $0A
0008691B E701                       	dc.b	smpsNoAttack, $01
0008691D E110                       	smpsAlterNote       $10
0008691F E701                       	dc.b	smpsNoAttack, $01
00086921 E111                       	smpsAlterNote       $11
00086923 8001                       	dc.b	nRst, $01
00086925 E10D                       	smpsAlterNote       $0D
00086927 B80D                       	dc.b	nG4, $0D
00086929 E10A                       	smpsAlterNote       $0A
0008692B E701                       	dc.b	smpsNoAttack, $01
0008692D E106                       	smpsAlterNote       $06
0008692F E701                       	dc.b	smpsNoAttack, $01
00086931 E10A                       	smpsAlterNote       $0A
00086933 E701                       	dc.b	smpsNoAttack, $01
00086935 E110                       	smpsAlterNote       $10
00086937 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008693B E10D                       	smpsAlterNote       $0D
0008693D E701                       	dc.b	smpsNoAttack, $01
0008693F E107                       	smpsAlterNote       $07
00086941 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086945 E10D                       	smpsAlterNote       $0D
00086947 E701                       	dc.b	smpsNoAttack, $01
00086949 E110                       	smpsAlterNote       $10
0008694B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008694F E10A                       	smpsAlterNote       $0A
00086951 E701                       	dc.b	smpsNoAttack, $01
00086953 E106                       	smpsAlterNote       $06
00086955 E701                       	dc.b	smpsNoAttack, $01
00086957 E107                       	smpsAlterNote       $07
00086959 E701                       	dc.b	smpsNoAttack, $01
0008695B E10D                       	smpsAlterNote       $0D
0008695D E701                       	dc.b	smpsNoAttack, $01
0008695F E111                       	smpsAlterNote       $11
00086961 E701                       	dc.b	smpsNoAttack, $01
00086963 E10D                       	smpsAlterNote       $0D
00086965 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086969 E10F                       	smpsAlterNote       $0F
0008696B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008696F E110                       	smpsAlterNote       $10
00086971 BB03                       	dc.b	nBb4, $03
00086973 E10F                       	smpsAlterNote       $0F
00086975 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008697B E110                       	smpsAlterNote       $10
0008697D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086981 E10F                       	smpsAlterNote       $0F
00086983 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00086989 E110                       	smpsAlterNote       $10
0008698B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008698F E10F                       	smpsAlterNote       $0F
00086991 D20D                       	dc.b	nA6, $0D
00086993 E10C                       	smpsAlterNote       $0C
00086995 E701                       	dc.b	smpsNoAttack, $01
00086997 E108                       	smpsAlterNote       $08
00086999 E701                       	dc.b	smpsNoAttack, $01
0008699B E10C                       	smpsAlterNote       $0C
0008699D E701                       	dc.b	smpsNoAttack, $01
0008699F E10F                       	smpsAlterNote       $0F
000869A1 E701                       	dc.b	smpsNoAttack, $01
000869A3 E113                       	smpsAlterNote       $13
000869A5 E701                       	dc.b	smpsNoAttack, $01
000869A7 E10F                       	smpsAlterNote       $0F
000869A9 E701                       	dc.b	smpsNoAttack, $01
000869AB E109                       	smpsAlterNote       $09
000869AD E701                       	dc.b	smpsNoAttack, $01
000869AF E108                       	smpsAlterNote       $08
000869B1 E701                       	dc.b	smpsNoAttack, $01
000869B3 E10C                       	smpsAlterNote       $0C
000869B5 E701                       	dc.b	smpsNoAttack, $01
000869B7 E112                       	smpsAlterNote       $12
000869B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869BD E10F                       	smpsAlterNote       $0F
000869BF E701                       	dc.b	smpsNoAttack, $01
000869C1 E109                       	smpsAlterNote       $09
000869C3 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000869C9 E10D                       	smpsAlterNote       $0D
000869CB CE07                       	dc.b	nF6, $07
000869CD E10C                       	smpsAlterNote       $0C
000869CF CD06 8001                  	dc.b	nE6, $06, nRst, $01
000869D3 E10D                       	smpsAlterNote       $0D
000869D5 CE03                       	dc.b	nF6, $03
000869D7 E10C                       	smpsAlterNote       $0C
000869D9 CC0D                       	dc.b	nEb6, $0D
000869DB E109                       	smpsAlterNote       $09
000869DD E701                       	dc.b	smpsNoAttack, $01
000869DF E106                       	smpsAlterNote       $06
000869E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869E5 E10C                       	smpsAlterNote       $0C
000869E7 E701                       	dc.b	smpsNoAttack, $01
000869E9 E110                       	smpsAlterNote       $10
000869EB E701                       	dc.b	smpsNoAttack, $01
000869ED E10F                       	smpsAlterNote       $0F
000869EF E701                       	dc.b	smpsNoAttack, $01
000869F1 E109                       	smpsAlterNote       $09
000869F3 E701                       	dc.b	smpsNoAttack, $01
000869F5 E105                       	smpsAlterNote       $05
000869F7 E701                       	dc.b	smpsNoAttack, $01
000869F9 E109                       	smpsAlterNote       $09
000869FB E701                       	dc.b	smpsNoAttack, $01
000869FD E10C                       	smpsAlterNote       $0C
000869FF E701                       	dc.b	smpsNoAttack, $01
00086A01 E110                       	smpsAlterNote       $10
00086A03 E701                       	dc.b	smpsNoAttack, $01
00086A05 E10C                       	smpsAlterNote       $0C
00086A07 E701                       	dc.b	smpsNoAttack, $01
00086A09 E106                       	smpsAlterNote       $06
00086A0B E701                       	dc.b	smpsNoAttack, $01
00086A0D E105                       	smpsAlterNote       $05
00086A0F E701                       	dc.b	smpsNoAttack, $01
00086A11 E109                       	smpsAlterNote       $09
00086A13 E701                       	dc.b	smpsNoAttack, $01
00086A15 E10F                       	smpsAlterNote       $0F
00086A17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A1B E10C                       	smpsAlterNote       $0C
00086A1D E701                       	dc.b	smpsNoAttack, $01
00086A1F E10B                       	smpsAlterNote       $0B
00086A21 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00086A2B E10F                       	smpsAlterNote       $0F
00086A2D C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00086A37 E10D                       	smpsAlterNote       $0D
00086A39 C203                       	dc.b	nF5, $03
00086A3B E10C                       	smpsAlterNote       $0C
00086A3D C103 8001                  	dc.b	nE5, $03, nRst, $01
00086A41 E10D                       	smpsAlterNote       $0D
00086A43 C20D                       	dc.b	nF5, $0D
00086A45 E10C                       	smpsAlterNote       $0C
00086A47 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00086A4B E10B                       	smpsAlterNote       $0B
00086A4D BF0D                       	dc.b	nD5, $0D
00086A4F E108                       	smpsAlterNote       $08
00086A51 E701                       	dc.b	smpsNoAttack, $01
00086A53 E104                       	smpsAlterNote       $04
00086A55 E701                       	dc.b	smpsNoAttack, $01
00086A57 E108                       	smpsAlterNote       $08
00086A59 E701                       	dc.b	smpsNoAttack, $01
00086A5B E10E                       	smpsAlterNote       $0E
00086A5D E701                       	dc.b	smpsNoAttack, $01
00086A5F E10F                       	smpsAlterNote       $0F
00086A61 E701                       	dc.b	smpsNoAttack, $01
00086A63 E10B                       	smpsAlterNote       $0B
00086A65 E701                       	dc.b	smpsNoAttack, $01
00086A67 E105                       	smpsAlterNote       $05
00086A69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A6D E108                       	smpsAlterNote       $08
00086A6F E701                       	dc.b	smpsNoAttack, $01
00086A71 E10E                       	smpsAlterNote       $0E
00086A73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A77 E108                       	smpsAlterNote       $08
00086A79 E701                       	dc.b	smpsNoAttack, $01
00086A7B E105                       	smpsAlterNote       $05
00086A7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A81 E10B                       	smpsAlterNote       $0B
00086A83 E701                       	dc.b	smpsNoAttack, $01
00086A85 E10F                       	smpsAlterNote       $0F
00086A87 E701                       	dc.b	smpsNoAttack, $01
00086A89 E10E                       	smpsAlterNote       $0E
00086A8B E701                       	dc.b	smpsNoAttack, $01
00086A8D E108                       	smpsAlterNote       $08
00086A8F E701                       	dc.b	smpsNoAttack, $01
00086A91 E104                       	smpsAlterNote       $04
00086A93 E701                       	dc.b	smpsNoAttack, $01
00086A95 E108                       	smpsAlterNote       $08
00086A97 E701                       	dc.b	smpsNoAttack, $01
00086A99 E10B                       	smpsAlterNote       $0B
00086A9B E701                       	dc.b	smpsNoAttack, $01
00086A9D E10F                       	smpsAlterNote       $0F
00086A9F E701                       	dc.b	smpsNoAttack, $01
00086AA1 E10B                       	smpsAlterNote       $0B
00086AA3 E701                       	dc.b	smpsNoAttack, $01
00086AA5 E105                       	smpsAlterNote       $05
00086AA7 E701                       	dc.b	smpsNoAttack, $01
00086AA9 E104                       	smpsAlterNote       $04
00086AAB E701                       	dc.b	smpsNoAttack, $01
00086AAD E108                       	smpsAlterNote       $08
00086AAF E701                       	dc.b	smpsNoAttack, $01
00086AB1 E10E                       	smpsAlterNote       $0E
00086AB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AB7 E10B                       	smpsAlterNote       $0B
00086AB9 E701                       	dc.b	smpsNoAttack, $01
00086ABB E105                       	smpsAlterNote       $05
00086ABD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AC1 E10B                       	smpsAlterNote       $0B
00086AC3 E701                       	dc.b	smpsNoAttack, $01
00086AC5 E10E                       	smpsAlterNote       $0E
00086AC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ACB E108                       	smpsAlterNote       $08
00086ACD E701                       	dc.b	smpsNoAttack, $01
00086ACF E104                       	smpsAlterNote       $04
00086AD1 E701                       	dc.b	smpsNoAttack, $01
00086AD3 E105                       	smpsAlterNote       $05
00086AD5 E701                       	dc.b	smpsNoAttack, $01
00086AD7 E10B                       	smpsAlterNote       $0B
00086AD9 E701                       	dc.b	smpsNoAttack, $01
00086ADB E10F                       	smpsAlterNote       $0F
00086ADD E701                       	dc.b	smpsNoAttack, $01
00086ADF E10B                       	smpsAlterNote       $0B
00086AE1 E701                       	dc.b	smpsNoAttack, $01
00086AE3 E108                       	smpsAlterNote       $08
00086AE5 E701                       	dc.b	smpsNoAttack, $01
00086AE7 E104                       	smpsAlterNote       $04
00086AE9 E701                       	dc.b	smpsNoAttack, $01
00086AEB E108                       	smpsAlterNote       $08
00086AED E701                       	dc.b	smpsNoAttack, $01
00086AEF E10E                       	smpsAlterNote       $0E
00086AF1 E701                       	dc.b	smpsNoAttack, $01
00086AF3 E10F                       	smpsAlterNote       $0F
00086AF5 E701                       	dc.b	smpsNoAttack, $01
00086AF7 E10B                       	smpsAlterNote       $0B
00086AF9 E701                       	dc.b	smpsNoAttack, $01
00086AFB E105                       	smpsAlterNote       $05
00086AFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B01 E108                       	smpsAlterNote       $08
00086B03 E701                       	dc.b	smpsNoAttack, $01
00086B05 E10E                       	smpsAlterNote       $0E
00086B07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B0B E108                       	smpsAlterNote       $08
00086B0D E701                       	dc.b	smpsNoAttack, $01
00086B0F E105                       	smpsAlterNote       $05
00086B11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B15 E10B                       	smpsAlterNote       $0B
00086B17 E701                       	dc.b	smpsNoAttack, $01
00086B19 E10F                       	smpsAlterNote       $0F
00086B1B E701                       	dc.b	smpsNoAttack, $01
00086B1D E10E                       	smpsAlterNote       $0E
00086B1F E701                       	dc.b	smpsNoAttack, $01
00086B21 E108                       	smpsAlterNote       $08
00086B23 E701                       	dc.b	smpsNoAttack, $01
00086B25 E104                       	smpsAlterNote       $04
00086B27 E701                       	dc.b	smpsNoAttack, $01
00086B29 E108                       	smpsAlterNote       $08
00086B2B E701                       	dc.b	smpsNoAttack, $01
00086B2D E10B                       	smpsAlterNote       $0B
00086B2F E701                       	dc.b	smpsNoAttack, $01
00086B31 E10F                       	smpsAlterNote       $0F
00086B33 E701                       	dc.b	smpsNoAttack, $01
00086B35 E10B                       	smpsAlterNote       $0B
00086B37 E701                       	dc.b	smpsNoAttack, $01
00086B39 E105                       	smpsAlterNote       $05
00086B3B E701                       	dc.b	smpsNoAttack, $01
00086B3D E104                       	smpsAlterNote       $04
00086B3F E701                       	dc.b	smpsNoAttack, $01
00086B41 E105                       	smpsAlterNote       $05
00086B43 8001                       	dc.b	nRst, $01
00086B45 E10D                       	smpsAlterNote       $0D
00086B47 C20D                       	dc.b	nF5, $0D
00086B49 E107                       	smpsAlterNote       $07
00086B4B E701                       	dc.b	smpsNoAttack, $01
00086B4D E106                       	smpsAlterNote       $06
00086B4F E701                       	dc.b	smpsNoAttack, $01
00086B51 E10A                       	smpsAlterNote       $0A
00086B53 E701                       	dc.b	smpsNoAttack, $01
00086B55 E110                       	smpsAlterNote       $10
00086B57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B5B E10D                       	smpsAlterNote       $0D
00086B5D E701                       	dc.b	smpsNoAttack, $01
00086B5F E107                       	smpsAlterNote       $07
00086B61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B65 E10D                       	smpsAlterNote       $0D
00086B67 E701                       	dc.b	smpsNoAttack, $01
00086B69 E110                       	smpsAlterNote       $10
00086B6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B6F E10A                       	smpsAlterNote       $0A
00086B71 E701                       	dc.b	smpsNoAttack, $01
00086B73 E106                       	smpsAlterNote       $06
00086B75 E701                       	dc.b	smpsNoAttack, $01
00086B77 E107                       	smpsAlterNote       $07
00086B79 E701                       	dc.b	smpsNoAttack, $01
00086B7B E10D                       	smpsAlterNote       $0D
00086B7D E701                       	dc.b	smpsNoAttack, $01
00086B7F E111                       	smpsAlterNote       $11
00086B81 E701                       	dc.b	smpsNoAttack, $01
00086B83 E10D                       	smpsAlterNote       $0D
00086B85 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086B89 E10C                       	smpsAlterNote       $0C
00086B8B C10D                       	dc.b	nE5, $0D
00086B8D E10D                       	smpsAlterNote       $0D
00086B8F C20A                       	dc.b	nF5, $0A
00086B91 E10C                       	smpsAlterNote       $0C
00086B93 C10E                       	dc.b	nE5, $0E
00086B95 E106                       	smpsAlterNote       $06
00086B97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B9B E10C                       	smpsAlterNote       $0C
00086B9D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086BA1 E10B                       	smpsAlterNote       $0B
00086BA3 BF0D                       	dc.b	nD5, $0D
00086BA5 E10C                       	smpsAlterNote       $0C
00086BA7 C107                       	dc.b	nE5, $07
00086BA9 E10D                       	smpsAlterNote       $0D
00086BAB C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00086BB5 E110                       	smpsAlterNote       $10
00086BB7 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00086BBD E10F                       	smpsAlterNote       $0F
00086BBF C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00086BC7 E10D                       	smpsAlterNote       $0D
00086BC9 D003                       	dc.b	nG6, $03
00086BCD E0C0                       	smpsPan             panCenter, $00
00086BCF E6FF                       	smpsAlterVol        $FF
00086BD1 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00086BDD 8001                       	dc.b	nRst, $01
00086BDF E10C                       	smpsAlterNote       $0C
00086BE1 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00086BEB E604                       	smpsAlterVol        $04
00086BED E10B                       	smpsAlterNote       $0B
00086BEF B306 8001                  	dc.b	nD4, $06, nRst, $01
00086BF3 E10F                       	smpsAlterNote       $0F
00086BF5 AE03                       	dc.b	nA3, $03
00086BF7 E10D                       	smpsAlterNote       $0D
00086BF9 B603 8001                  	dc.b	nF4, $03, nRst, $01
00086BFD E10C                       	smpsAlterNote       $0C
00086BFF B506 8001                  	dc.b	nE4, $06, nRst, $01
00086C03 E10B                       	smpsAlterNote       $0B
00086C05 B302 8001                  	dc.b	nD4, $02, nRst, $01
00086C09 E10A                       	smpsAlterNote       $0A
00086C0B B103                       	dc.b	nC4, $03
00086C0D E110                       	smpsAlterNote       $10
00086C0F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00086C13 E10F                       	smpsAlterNote       $0F
00086C15 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00086C19 E080                       	smpsPan             panLeft, $00
00086C1B 01                         	dc.b	$01
00086C1E E6FB                       	smpsAlterVol        $FB
00086C20 E1E4                       	smpsAlterNote       $E4
00086C22 C501                       	dc.b	nAb5, $01
00086C24 E1F4                       	smpsAlterNote       $F4
00086C26 E701                       	dc.b	smpsNoAttack, $01
00086C28 E104                       	smpsAlterNote       $04
00086C2A E701                       	dc.b	smpsNoAttack, $01
00086C2C E114                       	smpsAlterNote       $14
00086C2E E701                       	dc.b	smpsNoAttack, $01
00086C30 E11C                       	smpsAlterNote       $1C
00086C32 E701                       	dc.b	smpsNoAttack, $01
00086C34 E1EF                       	smpsAlterNote       $EF
00086C36 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00086C39 E1FF                       	smpsAlterNote       $FF
00086C3B E701                       	dc.b	smpsNoAttack, $01
00086C3D E10F                       	smpsAlterNote       $0F
00086C3F C606                       	dc.b	nA5, $06
00086C41 E109                       	smpsAlterNote       $09
00086C43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C47 E10F                       	smpsAlterNote       $0F
00086C49 E701                       	dc.b	smpsNoAttack, $01
00086C4B E112                       	smpsAlterNote       $12
00086C4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C51 E10C                       	smpsAlterNote       $0C
00086C53 E701                       	dc.b	smpsNoAttack, $01
00086C55 E108                       	smpsAlterNote       $08
00086C57 E701                       	dc.b	smpsNoAttack, $01
00086C59 E109                       	smpsAlterNote       $09
00086C5B E701                       	dc.b	smpsNoAttack, $01
00086C5D E10F                       	smpsAlterNote       $0F
00086C5F E701                       	dc.b	smpsNoAttack, $01
00086C61 E113                       	smpsAlterNote       $13
00086C63 E701                       	dc.b	smpsNoAttack, $01
00086C65 E10F                       	smpsAlterNote       $0F
00086C67 E701                       	dc.b	smpsNoAttack, $01
00086C69 E10C                       	smpsAlterNote       $0C
00086C6B E701                       	dc.b	smpsNoAttack, $01
00086C6D E108                       	smpsAlterNote       $08
00086C6F E701                       	dc.b	smpsNoAttack, $01
00086C71 E10C                       	smpsAlterNote       $0C
00086C73 E701                       	dc.b	smpsNoAttack, $01
00086C75 E112                       	smpsAlterNote       $12
00086C77 E701                       	dc.b	smpsNoAttack, $01
00086C79 E113                       	smpsAlterNote       $13
00086C7B E701                       	dc.b	smpsNoAttack, $01
00086C7D E10F                       	smpsAlterNote       $0F
00086C7F E701                       	dc.b	smpsNoAttack, $01
00086C81 E109                       	smpsAlterNote       $09
00086C83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C87 E10C                       	smpsAlterNote       $0C
00086C89 E701                       	dc.b	smpsNoAttack, $01
00086C8B E112                       	smpsAlterNote       $12
00086C8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C91 E10C                       	smpsAlterNote       $0C
00086C93 E701                       	dc.b	smpsNoAttack, $01
00086C95 E109                       	smpsAlterNote       $09
00086C97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C9B E10F                       	smpsAlterNote       $0F
00086C9D E701                       	dc.b	smpsNoAttack, $01
00086C9F E113                       	smpsAlterNote       $13
00086CA1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086CA5 E10D                       	smpsAlterNote       $0D
00086CA7 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00086CAD E10C                       	smpsAlterNote       $0C
00086CAF C102 8001                  	dc.b	nE5, $02, nRst, $01
00086CB3 E10D                       	smpsAlterNote       $0D
00086CB5 C201 8001                  	dc.b	nF5, $01, nRst, $01
00086CB9 E10C                       	smpsAlterNote       $0C
00086CBB C102                       	dc.b	nE5, $02
00086CBD E10B                       	smpsAlterNote       $0B
00086CBF BF02 8001                  	dc.b	nD5, $02, nRst, $01
00086CC3 E10C                       	smpsAlterNote       $0C
00086CC5 C101 8001                  	dc.b	nE5, $01, nRst, $01
00086CC9 E10B                       	smpsAlterNote       $0B
00086CCB BF02                       	dc.b	nD5, $02
00086CCD E10A                       	smpsAlterNote       $0A
00086CCF BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00086CD9 E110                       	smpsAlterNote       $10
00086CDB BB02                       	dc.b	nBb4, $02
00086CDD E10A                       	smpsAlterNote       $0A
00086CDF BD02 8001                  	dc.b	nC5, $02, nRst, $01
00086CE3 E110                       	smpsAlterNote       $10
00086CE5 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00086CE9 E10F                       	smpsAlterNote       $0F
00086CEB BA01 8001                  	dc.b	nA4, $01, nRst, $01
00086CEF E110                       	smpsAlterNote       $10
00086CF1 BB02                       	dc.b	nBb4, $02
00086CF3 E10F                       	smpsAlterNote       $0F
00086CF5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00086CFF E10C                       	smpsAlterNote       $0C
00086D01 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00086D09 E10B                       	smpsAlterNote       $0B
00086D0B BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00086D0F E10F                       	smpsAlterNote       $0F
00086D11 BA02                       	dc.b	nA4, $02
00086D15 E0C0                       	smpsPan             panCenter, $00
00086D17 E601                       	smpsAlterVol        $01
00086D19 E109                       	smpsAlterNote       $09
00086D1B AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00086D27 E108                       	smpsAlterNote       $08
00086D29 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00086D2F E107                       	smpsAlterNote       $07
00086D31 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00086D37 E109                       	smpsAlterNote       $09
00086D39 B603 8001                  	dc.b	nF4, $03, nRst, $01
00086D3D E108                       	smpsAlterNote       $08
00086D3F B506 8001                  	dc.b	nE4, $06, nRst, $01
00086D43 E107                       	smpsAlterNote       $07
00086D45 B302 8001                  	dc.b	nD4, $02, nRst, $01
00086D49 E106                       	smpsAlterNote       $06
00086D4B B103                       	dc.b	nC4, $03
00086D4D E10C                       	smpsAlterNote       $0C
00086D4F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00086D55 E080                       	smpsPan             panLeft, $00
00086D57 07                         	dc.b	$07
00086D58 E6FE                       	smpsAlterVol        $FE
00086D5A E10B                       	smpsAlterNote       $0B
00086D5C B20D                       	dc.b	nCs4, $0D
00086D5E E105                       	smpsAlterNote       $05
00086D60 E701                       	dc.b	smpsNoAttack, $01
00086D62 E104                       	smpsAlterNote       $04
00086D64 E701                       	dc.b	smpsNoAttack, $01
00086D66 E108                       	smpsAlterNote       $08
00086D68 E701                       	dc.b	smpsNoAttack, $01
00086D6A E10E                       	smpsAlterNote       $0E
00086D6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D70 E10B                       	smpsAlterNote       $0B
00086D72 E701                       	dc.b	smpsNoAttack, $01
00086D74 E105                       	smpsAlterNote       $05
00086D76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D7A E10B                       	smpsAlterNote       $0B
00086D7C E701                       	dc.b	smpsNoAttack, $01
00086D7E E10E                       	smpsAlterNote       $0E
00086D80 E701                       	dc.b	smpsNoAttack, $01
00086D82 E10F                       	smpsAlterNote       $0F
00086D84 8001                       	dc.b	nRst, $01
00086D86 E10B                       	smpsAlterNote       $0B
00086D88 B30D                       	dc.b	nD4, $0D
00086D8A E105                       	smpsAlterNote       $05
00086D8C E701                       	dc.b	smpsNoAttack, $01
00086D8E E104                       	smpsAlterNote       $04
00086D90 E701                       	dc.b	smpsNoAttack, $01
00086D92 E108                       	smpsAlterNote       $08
00086D94 E701                       	dc.b	smpsNoAttack, $01
00086D96 E10E                       	smpsAlterNote       $0E
00086D98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D9C E10B                       	smpsAlterNote       $0B
00086D9E E701                       	dc.b	smpsNoAttack, $01
00086DA0 E105                       	smpsAlterNote       $05
00086DA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DA6 E10B                       	smpsAlterNote       $0B
00086DA8 E701                       	dc.b	smpsNoAttack, $01
00086DAA E10E                       	smpsAlterNote       $0E
00086DAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DB0 E108                       	smpsAlterNote       $08
00086DB2 E701                       	dc.b	smpsNoAttack, $01
00086DB4 E104                       	smpsAlterNote       $04
00086DB6 E701                       	dc.b	smpsNoAttack, $01
00086DB8 E105                       	smpsAlterNote       $05
00086DBA E701                       	dc.b	smpsNoAttack, $01
00086DBC E10B                       	smpsAlterNote       $0B
00086DBE E701                       	dc.b	smpsNoAttack, $01
00086DC0 E10F                       	smpsAlterNote       $0F
00086DC2 E701                       	dc.b	smpsNoAttack, $01
00086DC4 E10B                       	smpsAlterNote       $0B
00086DC6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086DCA E10C                       	smpsAlterNote       $0C
00086DCC B50D                       	dc.b	nE4, $0D
00086DCE E106                       	smpsAlterNote       $06
00086DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DD4 E10C                       	smpsAlterNote       $0C
00086DD6 E701                       	dc.b	smpsNoAttack, $01
00086DD8 E10F                       	smpsAlterNote       $0F
00086DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DDE E109                       	smpsAlterNote       $09
00086DE0 E701                       	dc.b	smpsNoAttack, $01
00086DE2 E105                       	smpsAlterNote       $05
00086DE4 E701                       	dc.b	smpsNoAttack, $01
00086DE6 E106                       	smpsAlterNote       $06
00086DE8 E701                       	dc.b	smpsNoAttack, $01
00086DEA E10C                       	smpsAlterNote       $0C
00086DEC E701                       	dc.b	smpsNoAttack, $01
00086DEE E110                       	smpsAlterNote       $10
00086DF0 E701                       	dc.b	smpsNoAttack, $01
00086DF2 E10B                       	smpsAlterNote       $0B
00086DF4 B30E                       	dc.b	nD4, $0E
00086DF6 E105                       	smpsAlterNote       $05
00086DF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DFC E10B                       	smpsAlterNote       $0B
00086DFE E701                       	dc.b	smpsNoAttack, $01
00086E00 E10E                       	smpsAlterNote       $0E
00086E02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E06 E108                       	smpsAlterNote       $08
00086E08 E701                       	dc.b	smpsNoAttack, $01
00086E0A E104                       	smpsAlterNote       $04
00086E0C E701                       	dc.b	smpsNoAttack, $01
00086E0E E105                       	smpsAlterNote       $05
00086E10 E701                       	dc.b	smpsNoAttack, $01
00086E12 E10B                       	smpsAlterNote       $0B
00086E14 E701                       	dc.b	smpsNoAttack, $01
00086E16 E10F                       	smpsAlterNote       $0F
00086E18 E701                       	dc.b	smpsNoAttack, $01
00086E1A E10B                       	smpsAlterNote       $0B
00086E1C E701                       	dc.b	smpsNoAttack, $01
00086E1E E108                       	smpsAlterNote       $08
00086E20 E701                       	dc.b	smpsNoAttack, $01
00086E22 E104                       	smpsAlterNote       $04
00086E24 E701                       	dc.b	smpsNoAttack, $01
00086E26 E108                       	smpsAlterNote       $08
00086E28 E701                       	dc.b	smpsNoAttack, $01
00086E2A E10E                       	smpsAlterNote       $0E
00086E2C E701                       	dc.b	smpsNoAttack, $01
00086E2E E10F                       	smpsAlterNote       $0F
00086E30 E701                       	dc.b	smpsNoAttack, $01
00086E32 E10B                       	smpsAlterNote       $0B
00086E34 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00086E38 E108                       	smpsAlterNote       $08
00086E3A E701                       	dc.b	smpsNoAttack, $01
00086E3C E105                       	smpsAlterNote       $05
00086E3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E42 E10B                       	smpsAlterNote       $0B
00086E44 E701                       	dc.b	smpsNoAttack, $01
00086E46 E10F                       	smpsAlterNote       $0F
00086E48 E701                       	dc.b	smpsNoAttack, $01
00086E4A E10E                       	smpsAlterNote       $0E
00086E4C E701                       	dc.b	smpsNoAttack, $01
00086E4E E108                       	smpsAlterNote       $08
00086E50 E701                       	dc.b	smpsNoAttack, $01
00086E52 E104                       	smpsAlterNote       $04
00086E54 E701                       	dc.b	smpsNoAttack, $01
00086E56 E108                       	smpsAlterNote       $08
00086E58 E701                       	dc.b	smpsNoAttack, $01
00086E5A E10B                       	smpsAlterNote       $0B
00086E5C E701                       	dc.b	smpsNoAttack, $01
00086E5E E10F                       	smpsAlterNote       $0F
00086E60 E701                       	dc.b	smpsNoAttack, $01
00086E62 E10B                       	smpsAlterNote       $0B
00086E64 B30D                       	dc.b	nD4, $0D
00086E66 E108                       	smpsAlterNote       $08
00086E68 E701                       	dc.b	smpsNoAttack, $01
00086E6A E105                       	smpsAlterNote       $05
00086E6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E70 E10B                       	smpsAlterNote       $0B
00086E72 E701                       	dc.b	smpsNoAttack, $01
00086E74 E10F                       	smpsAlterNote       $0F
00086E76 E701                       	dc.b	smpsNoAttack, $01
00086E78 E10E                       	smpsAlterNote       $0E
00086E7A E701                       	dc.b	smpsNoAttack, $01
00086E7C E108                       	smpsAlterNote       $08
00086E7E E701                       	dc.b	smpsNoAttack, $01
00086E80 E104                       	smpsAlterNote       $04
00086E82 E701                       	dc.b	smpsNoAttack, $01
00086E84 E108                       	smpsAlterNote       $08
00086E86 E701                       	dc.b	smpsNoAttack, $01
00086E88 E10B                       	smpsAlterNote       $0B
00086E8A E701                       	dc.b	smpsNoAttack, $01
00086E8C E10F                       	smpsAlterNote       $0F
00086E8E E701                       	dc.b	smpsNoAttack, $01
00086E90 E10B                       	smpsAlterNote       $0B
00086E92 E701                       	dc.b	smpsNoAttack, $01
00086E94 E105                       	smpsAlterNote       $05
00086E96 E701                       	dc.b	smpsNoAttack, $01
00086E98 E104                       	smpsAlterNote       $04
00086E9A E701                       	dc.b	smpsNoAttack, $01
00086E9C E108                       	smpsAlterNote       $08
00086E9E E701                       	dc.b	smpsNoAttack, $01
00086EA0 E10E                       	smpsAlterNote       $0E
00086EA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EA6 E10B                       	smpsAlterNote       $0B
00086EA8 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00086EAC E108                       	smpsAlterNote       $08
00086EAE E701                       	dc.b	smpsNoAttack, $01
00086EB0 E104                       	smpsAlterNote       $04
00086EB2 E701                       	dc.b	smpsNoAttack, $01
00086EB4 E108                       	smpsAlterNote       $08
00086EB6 E701                       	dc.b	smpsNoAttack, $01
00086EB8 E10B                       	smpsAlterNote       $0B
00086EBA E701                       	dc.b	smpsNoAttack, $01
00086EBE E0C0                       	smpsPan             panCenter, $00
00086EC0 E601                       	smpsAlterVol        $01
00086EC2 E108                       	smpsAlterNote       $08
00086EC4 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00086ED0 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00086ED8 E080                       	smpsPan             panLeft, $00
00086EDA 07                         	dc.b	$07
00086EDB E6FF                       	smpsAlterVol        $FF
00086EDD E10D                       	smpsAlterNote       $0D
00086EDF B60D                       	dc.b	nF4, $0D
00086EE1 E10A                       	smpsAlterNote       $0A
00086EE3 E701                       	dc.b	smpsNoAttack, $01
00086EE5 E106                       	smpsAlterNote       $06
00086EE7 E701                       	dc.b	smpsNoAttack, $01
00086EE9 E10A                       	smpsAlterNote       $0A
00086EEB E701                       	dc.b	smpsNoAttack, $01
00086EED E110                       	smpsAlterNote       $10
00086EEF E701                       	dc.b	smpsNoAttack, $01
00086EF1 E111                       	smpsAlterNote       $11
00086EF3 E701                       	dc.b	smpsNoAttack, $01
00086EF5 E10D                       	smpsAlterNote       $0D
00086EF7 E701                       	dc.b	smpsNoAttack, $01
00086EF9 E107                       	smpsAlterNote       $07
00086EFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EFF E10A                       	smpsAlterNote       $0A
00086F01 E701                       	dc.b	smpsNoAttack, $01
00086F03 E110                       	smpsAlterNote       $10
00086F05 E701                       	dc.b	smpsNoAttack, $01
00086F07 E111                       	smpsAlterNote       $11
00086F09 8001                       	dc.b	nRst, $01
00086F0B E10D                       	smpsAlterNote       $0D
00086F0D B80D                       	dc.b	nG4, $0D
00086F0F E10A                       	smpsAlterNote       $0A
00086F11 E701                       	dc.b	smpsNoAttack, $01
00086F13 E106                       	smpsAlterNote       $06
00086F15 E701                       	dc.b	smpsNoAttack, $01
00086F17 E10A                       	smpsAlterNote       $0A
00086F19 E701                       	dc.b	smpsNoAttack, $01
00086F1B E110                       	smpsAlterNote       $10
00086F1D E701                       	dc.b	smpsNoAttack, $01
00086F1F E111                       	smpsAlterNote       $11
00086F21 E701                       	dc.b	smpsNoAttack, $01
00086F23 E10D                       	smpsAlterNote       $0D
00086F25 E701                       	dc.b	smpsNoAttack, $01
00086F27 E107                       	smpsAlterNote       $07
00086F29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F2D E10D                       	smpsAlterNote       $0D
00086F2F E701                       	dc.b	smpsNoAttack, $01
00086F31 E110                       	smpsAlterNote       $10
00086F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F37 E10A                       	smpsAlterNote       $0A
00086F39 E701                       	dc.b	smpsNoAttack, $01
00086F3B E106                       	smpsAlterNote       $06
00086F3D E701                       	dc.b	smpsNoAttack, $01
00086F3F E107                       	smpsAlterNote       $07
00086F41 E701                       	dc.b	smpsNoAttack, $01
00086F43 E10D                       	smpsAlterNote       $0D
00086F45 E701                       	dc.b	smpsNoAttack, $01
00086F47 E111                       	smpsAlterNote       $11
00086F49 E701                       	dc.b	smpsNoAttack, $01
00086F4B E10D                       	smpsAlterNote       $0D
00086F4D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086F51 E10F                       	smpsAlterNote       $0F
00086F53 BA0D                       	dc.b	nA4, $0D
00086F55 E109                       	smpsAlterNote       $09
00086F57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F5B E10C                       	smpsAlterNote       $0C
00086F5D E701                       	dc.b	smpsNoAttack, $01
00086F5F E112                       	smpsAlterNote       $12
00086F61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F65 E10C                       	smpsAlterNote       $0C
00086F67 E701                       	dc.b	smpsNoAttack, $01
00086F69 E109                       	smpsAlterNote       $09
00086F6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F6F E10F                       	smpsAlterNote       $0F
00086F71 E701                       	dc.b	smpsNoAttack, $01
00086F73 E113                       	smpsAlterNote       $13
00086F75 E701                       	dc.b	smpsNoAttack, $01
00086F77 E112                       	smpsAlterNote       $12
00086F79 E701                       	dc.b	smpsNoAttack, $01
00086F7B E10C                       	smpsAlterNote       $0C
00086F7D E701                       	dc.b	smpsNoAttack, $01
00086F7F E108                       	smpsAlterNote       $08
00086F81 E701                       	dc.b	smpsNoAttack, $01
00086F83 E10C                       	smpsAlterNote       $0C
00086F85 E701                       	dc.b	smpsNoAttack, $01
00086F87 E10F                       	smpsAlterNote       $0F
00086F89 E701                       	dc.b	smpsNoAttack, $01
00086F8B E113                       	smpsAlterNote       $13
00086F8D E701                       	dc.b	smpsNoAttack, $01
00086F8F E10F                       	smpsAlterNote       $0F
00086F91 E701                       	dc.b	smpsNoAttack, $01
00086F93 E109                       	smpsAlterNote       $09
00086F95 E701                       	dc.b	smpsNoAttack, $01
00086F97 E108                       	smpsAlterNote       $08
00086F99 E701                       	dc.b	smpsNoAttack, $01
00086F9B E10C                       	smpsAlterNote       $0C
00086F9D E701                       	dc.b	smpsNoAttack, $01
00086F9F E112                       	smpsAlterNote       $12
00086FA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FA5 E10F                       	smpsAlterNote       $0F
00086FA7 E701                       	dc.b	smpsNoAttack, $01
00086FA9 E109                       	smpsAlterNote       $09
00086FAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FAF E10F                       	smpsAlterNote       $0F
00086FB1 E701                       	dc.b	smpsNoAttack, $01
00086FB3 E112                       	smpsAlterNote       $12
00086FB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FB9 E10C                       	smpsAlterNote       $0C
00086FBB E701                       	dc.b	smpsNoAttack, $01
00086FBD E108                       	smpsAlterNote       $08
00086FBF E701                       	dc.b	smpsNoAttack, $01
00086FC1 E109                       	smpsAlterNote       $09
00086FC3 E701                       	dc.b	smpsNoAttack, $01
00086FC5 E10C                       	smpsAlterNote       $0C
00086FC7 B50A                       	dc.b	nE4, $0A
00086FC9 E10D                       	smpsAlterNote       $0D
00086FCB B60E                       	dc.b	nF4, $0E
00086FCD E107                       	smpsAlterNote       $07
00086FCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FD3 E10D                       	smpsAlterNote       $0D
00086FD5 E701                       	dc.b	smpsNoAttack, $01
00086FD7 E110                       	smpsAlterNote       $10
00086FD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FDD E10A                       	smpsAlterNote       $0A
00086FDF E701                       	dc.b	smpsNoAttack, $01
00086FE1 E106                       	smpsAlterNote       $06
00086FE3 E701                       	dc.b	smpsNoAttack, $01
00086FE5 E107                       	smpsAlterNote       $07
00086FE7 E701                       	dc.b	smpsNoAttack, $01
00086FE9 E10D                       	smpsAlterNote       $0D
00086FEB E701                       	dc.b	smpsNoAttack, $01
00086FED E111                       	smpsAlterNote       $11
00086FEF E701                       	dc.b	smpsNoAttack, $01
00086FF1 E10D                       	smpsAlterNote       $0D
00086FF3 B80D                       	dc.b	nG4, $0D
00086FF5 E10A                       	smpsAlterNote       $0A
00086FF7 E701                       	dc.b	smpsNoAttack, $01
00086FF9 E107                       	smpsAlterNote       $07
00086FFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FFF E10D                       	smpsAlterNote       $0D
00087001 E701                       	dc.b	smpsNoAttack, $01
00087003 E111                       	smpsAlterNote       $11
00087005 E701                       	dc.b	smpsNoAttack, $01
00087007 E110                       	smpsAlterNote       $10
00087009 E701                       	dc.b	smpsNoAttack, $01
0008700B E10A                       	smpsAlterNote       $0A
0008700D E701                       	dc.b	smpsNoAttack, $01
0008700F E106                       	smpsAlterNote       $06
00087011 E701                       	dc.b	smpsNoAttack, $01
00087013 E10A                       	smpsAlterNote       $0A
00087015 E701                       	dc.b	smpsNoAttack, $01
00087017 E10D                       	smpsAlterNote       $0D
00087019 E701                       	dc.b	smpsNoAttack, $01
0008701B E111                       	smpsAlterNote       $11
0008701D E701                       	dc.b	smpsNoAttack, $01
0008701F E10D                       	smpsAlterNote       $0D
00087021 E701                       	dc.b	smpsNoAttack, $01
00087023 E107                       	smpsAlterNote       $07
00087025 E701                       	dc.b	smpsNoAttack, $01
00087027 E106                       	smpsAlterNote       $06
00087029 E701                       	dc.b	smpsNoAttack, $01
0008702B E10A                       	smpsAlterNote       $0A
0008702D E701                       	dc.b	smpsNoAttack, $01
0008702F E110                       	smpsAlterNote       $10
00087031 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087035 E10D                       	smpsAlterNote       $0D
00087037 E701                       	dc.b	smpsNoAttack, $01
00087039 E10F                       	smpsAlterNote       $0F
0008703B BA0D                       	dc.b	nA4, $0D
0008703D E10C                       	smpsAlterNote       $0C
0008703F E701                       	dc.b	smpsNoAttack, $01
00087041 E108                       	smpsAlterNote       $08
00087043 E701                       	dc.b	smpsNoAttack, $01
00087045 E109                       	smpsAlterNote       $09
00087047 E701                       	dc.b	smpsNoAttack, $01
00087049 E10F                       	smpsAlterNote       $0F
0008704B E701                       	dc.b	smpsNoAttack, $01
0008704D E113                       	smpsAlterNote       $13
0008704F E701                       	dc.b	smpsNoAttack, $01
00087051 E10F                       	smpsAlterNote       $0F
00087053 E701                       	dc.b	smpsNoAttack, $01
00087055 E10C                       	smpsAlterNote       $0C
00087057 E701                       	dc.b	smpsNoAttack, $01
00087059 E108                       	smpsAlterNote       $08
0008705B E701                       	dc.b	smpsNoAttack, $01
0008705D E10C                       	smpsAlterNote       $0C
0008705F E701                       	dc.b	smpsNoAttack, $01
00087061 E112                       	smpsAlterNote       $12
00087063 E701                       	dc.b	smpsNoAttack, $01
00087065 E113                       	smpsAlterNote       $13
00087067 E701                       	dc.b	smpsNoAttack, $01
00087069 E10F                       	smpsAlterNote       $0F
0008706B E701                       	dc.b	smpsNoAttack, $01
0008706D E109                       	smpsAlterNote       $09
0008706F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087073 E10C                       	smpsAlterNote       $0C
00087075 E701                       	dc.b	smpsNoAttack, $01
00087077 E112                       	smpsAlterNote       $12
00087079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008707D E10C                       	smpsAlterNote       $0C
0008707F E701                       	dc.b	smpsNoAttack, $01
00087081 E109                       	smpsAlterNote       $09
00087083 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087087 E10F                       	smpsAlterNote       $0F
00087089 E701                       	dc.b	smpsNoAttack, $01
0008708B E113                       	smpsAlterNote       $13
0008708D E701                       	dc.b	smpsNoAttack, $01
0008708F E112                       	smpsAlterNote       $12
00087091 E701                       	dc.b	smpsNoAttack, $01
00087093 E10C                       	smpsAlterNote       $0C
00087095 E701                       	dc.b	smpsNoAttack, $01
00087097 E109                       	smpsAlterNote       $09
00087099 8001                       	dc.b	nRst, $01
0008709B E10D                       	smpsAlterNote       $0D
0008709D B60A                       	dc.b	nF4, $0A
0008709F E10C                       	smpsAlterNote       $0C
000870A1 B506 8001                  	dc.b	nE4, $06, nRst, $01
000870A5 E10B                       	smpsAlterNote       $0B
000870A7 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000870AB E10C                       	smpsAlterNote       $0C
000870AD B503                       	dc.b	nE4, $03
000870AF E10D                       	smpsAlterNote       $0D
000870B1 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000870BB E10C                       	smpsAlterNote       $0C
000870BD E701                       	dc.b	smpsNoAttack, $01
000870BF E108                       	smpsAlterNote       $08
000870C1 E701                       	dc.b	smpsNoAttack, $01
000870C3 E10C                       	smpsAlterNote       $0C
000870C5 E701                       	dc.b	smpsNoAttack, $01
000870C7 E112                       	smpsAlterNote       $12
000870C9 E701                       	dc.b	smpsNoAttack, $01
000870CB E113                       	smpsAlterNote       $13
000870CD E701                       	dc.b	smpsNoAttack, $01
000870CF E10F                       	smpsAlterNote       $0F
000870D1 E701                       	dc.b	smpsNoAttack, $01
000870D3 E109                       	smpsAlterNote       $09
000870D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870D9 E10C                       	smpsAlterNote       $0C
000870DB E701                       	dc.b	smpsNoAttack, $01
000870DD E112                       	smpsAlterNote       $12
000870DF E701                       	dc.b	smpsNoAttack, $01
000870E1 E113                       	smpsAlterNote       $13
000870E3 8001                       	dc.b	nRst, $01
000870E5 E10D                       	smpsAlterNote       $0D
000870E7 C20D                       	dc.b	nF5, $0D
000870E9 E10A                       	smpsAlterNote       $0A
000870EB E701                       	dc.b	smpsNoAttack, $01
000870ED E106                       	smpsAlterNote       $06
000870EF E701                       	dc.b	smpsNoAttack, $01
000870F1 E10A                       	smpsAlterNote       $0A
000870F3 E701                       	dc.b	smpsNoAttack, $01
000870F5 E110                       	smpsAlterNote       $10
000870F7 E701                       	dc.b	smpsNoAttack, $01
000870F9 E111                       	smpsAlterNote       $11
000870FB E701                       	dc.b	smpsNoAttack, $01
000870FD E10D                       	smpsAlterNote       $0D
000870FF E701                       	dc.b	smpsNoAttack, $01
00087101 E107                       	smpsAlterNote       $07
00087103 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087107 E10A                       	smpsAlterNote       $0A
00087109 E701                       	dc.b	smpsNoAttack, $01
0008710B E110                       	smpsAlterNote       $10
0008710D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087111 E10A                       	smpsAlterNote       $0A
00087113 E701                       	dc.b	smpsNoAttack, $01
00087115 E107                       	smpsAlterNote       $07
00087117 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008711B E10D                       	smpsAlterNote       $0D
0008711D E701                       	dc.b	smpsNoAttack, $01
0008711F E111                       	smpsAlterNote       $11
00087121 E701                       	dc.b	smpsNoAttack, $01
00087123 E110                       	smpsAlterNote       $10
00087125 E701                       	dc.b	smpsNoAttack, $01
00087127 E10A                       	smpsAlterNote       $0A
00087129 E701                       	dc.b	smpsNoAttack, $01
0008712B E106                       	smpsAlterNote       $06
0008712D E701                       	dc.b	smpsNoAttack, $01
0008712F E10A                       	smpsAlterNote       $0A
00087131 E701                       	dc.b	smpsNoAttack, $01
00087133 E10D                       	smpsAlterNote       $0D
00087135 E701                       	dc.b	smpsNoAttack, $01
00087137 E111                       	smpsAlterNote       $11
00087139 E701                       	dc.b	smpsNoAttack, $01
0008713B E10D                       	smpsAlterNote       $0D
0008713D E701                       	dc.b	smpsNoAttack, $01
0008713F E107                       	smpsAlterNote       $07
00087141 E701                       	dc.b	smpsNoAttack, $01
00087143 E106                       	smpsAlterNote       $06
00087145 E701                       	dc.b	smpsNoAttack, $01
00087147 E10A                       	smpsAlterNote       $0A
00087149 E701                       	dc.b	smpsNoAttack, $01
0008714B E110                       	smpsAlterNote       $10
0008714D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087151 E10D                       	smpsAlterNote       $0D
00087153 E701                       	dc.b	smpsNoAttack, $01
00087155 E107                       	smpsAlterNote       $07
00087157 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008715B E10D                       	smpsAlterNote       $0D
0008715D E701                       	dc.b	smpsNoAttack, $01
0008715F E110                       	smpsAlterNote       $10
00087161 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087165 E10A                       	smpsAlterNote       $0A
00087167 E701                       	dc.b	smpsNoAttack, $01
00087169 E106                       	smpsAlterNote       $06
0008716B E701                       	dc.b	smpsNoAttack, $01
0008716D E107                       	smpsAlterNote       $07
0008716F E701                       	dc.b	smpsNoAttack, $01
00087171 E10D                       	smpsAlterNote       $0D
00087173 E701                       	dc.b	smpsNoAttack, $01
00087175 E111                       	smpsAlterNote       $11
00087177 E701                       	dc.b	smpsNoAttack, $01
00087179 E10D                       	smpsAlterNote       $0D
0008717B E701                       	dc.b	smpsNoAttack, $01
0008717D E10A                       	smpsAlterNote       $0A
0008717F E701                       	dc.b	smpsNoAttack, $01
00087181 E107                       	smpsAlterNote       $07
00087183 8001                       	dc.b	nRst, $01
00087185 E10D                       	smpsAlterNote       $0D
00087187 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008718D E601                       	smpsAlterVol        $01
0008718F E110                       	smpsAlterNote       $10
00087191 BB0D                       	dc.b	nBb4, $0D
00087193 E10A                       	smpsAlterNote       $0A
00087195 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087199 E110                       	smpsAlterNote       $10
0008719B E701                       	dc.b	smpsNoAttack, $01
0008719D E113                       	smpsAlterNote       $13
0008719F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871A3 E10D                       	smpsAlterNote       $0D
000871A5 E701                       	dc.b	smpsNoAttack, $01
000871A7 E109                       	smpsAlterNote       $09
000871A9 E701                       	dc.b	smpsNoAttack, $01
000871AB E10A                       	smpsAlterNote       $0A
000871AD E701                       	dc.b	smpsNoAttack, $01
000871AF E110                       	smpsAlterNote       $10
000871B1 E701                       	dc.b	smpsNoAttack, $01
000871B3 E114                       	smpsAlterNote       $14
000871B5 E701                       	dc.b	smpsNoAttack, $01
000871B7 E110                       	smpsAlterNote       $10
000871B9 E701                       	dc.b	smpsNoAttack, $01
000871BB E10D                       	smpsAlterNote       $0D
000871BD E701                       	dc.b	smpsNoAttack, $01
000871BF E109                       	smpsAlterNote       $09
000871C1 E701                       	dc.b	smpsNoAttack, $01
000871C3 E10A                       	smpsAlterNote       $0A
000871C5 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000871C9 E107                       	smpsAlterNote       $07
000871CB E701                       	dc.b	smpsNoAttack, $01
000871CD E103                       	smpsAlterNote       $03
000871CF E701                       	dc.b	smpsNoAttack, $01
000871D1 E107                       	smpsAlterNote       $07
000871D3 E701                       	dc.b	smpsNoAttack, $01
000871D5 E10D                       	smpsAlterNote       $0D
000871D7 E701                       	dc.b	smpsNoAttack, $01
000871D9 E10E                       	smpsAlterNote       $0E
000871DB E701                       	dc.b	smpsNoAttack, $01
000871DD E10A                       	smpsAlterNote       $0A
000871DF E701                       	dc.b	smpsNoAttack, $01
000871E1 E104                       	smpsAlterNote       $04
000871E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871E7 E107                       	smpsAlterNote       $07
000871E9 E701                       	dc.b	smpsNoAttack, $01
000871EB E10D                       	smpsAlterNote       $0D
000871ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871F1 E107                       	smpsAlterNote       $07
000871F3 E701                       	dc.b	smpsNoAttack, $01
000871F5 E104                       	smpsAlterNote       $04
000871F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871FB E10B                       	smpsAlterNote       $0B
000871FD BF0D                       	dc.b	nD5, $0D
000871FF E108                       	smpsAlterNote       $08
00087201 E701                       	dc.b	smpsNoAttack, $01
00087203 E105                       	smpsAlterNote       $05
00087205 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087209 E10B                       	smpsAlterNote       $0B
0008720B E701                       	dc.b	smpsNoAttack, $01
0008720D E10F                       	smpsAlterNote       $0F
0008720F E701                       	dc.b	smpsNoAttack, $01
00087211 E10E                       	smpsAlterNote       $0E
00087213 E701                       	dc.b	smpsNoAttack, $01
00087215 E108                       	smpsAlterNote       $08
00087217 E701                       	dc.b	smpsNoAttack, $01
00087219 E104                       	smpsAlterNote       $04
0008721B E701                       	dc.b	smpsNoAttack, $01
0008721D E108                       	smpsAlterNote       $08
0008721F E701                       	dc.b	smpsNoAttack, $01
00087221 E10B                       	smpsAlterNote       $0B
00087223 E701                       	dc.b	smpsNoAttack, $01
00087225 E10F                       	smpsAlterNote       $0F
00087227 E701                       	dc.b	smpsNoAttack, $01
00087229 E10B                       	smpsAlterNote       $0B
0008722B E701                       	dc.b	smpsNoAttack, $01
0008722D E105                       	smpsAlterNote       $05
0008722F E701                       	dc.b	smpsNoAttack, $01
00087231 E104                       	smpsAlterNote       $04
00087233 E701                       	dc.b	smpsNoAttack, $01
00087235 E105                       	smpsAlterNote       $05
00087237 8001                       	dc.b	nRst, $01
00087239 E10C                       	smpsAlterNote       $0C
0008723B C10C                       	dc.b	nE5, $0C
0008723D E10D                       	smpsAlterNote       $0D
0008723F C201                       	dc.b	nF5, $01
00087241 E10E                       	smpsAlterNote       $0E
00087243 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00087247 E10D                       	smpsAlterNote       $0D
00087249 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008724D E10A                       	smpsAlterNote       $0A
0008724F E701                       	dc.b	smpsNoAttack, $01
00087251 E106                       	smpsAlterNote       $06
00087253 E701                       	dc.b	smpsNoAttack, $01
00087255 E10A                       	smpsAlterNote       $0A
00087257 E701                       	dc.b	smpsNoAttack, $01
00087259 E10D                       	smpsAlterNote       $0D
0008725B E701                       	dc.b	smpsNoAttack, $01
0008725D E111                       	smpsAlterNote       $11
0008725F E701                       	dc.b	smpsNoAttack, $01
00087261 E10D                       	smpsAlterNote       $0D
00087263 E701                       	dc.b	smpsNoAttack, $01
00087265 E107                       	smpsAlterNote       $07
00087267 E701                       	dc.b	smpsNoAttack, $01
00087269 E106                       	smpsAlterNote       $06
0008726B E701                       	dc.b	smpsNoAttack, $01
0008726D E10A                       	smpsAlterNote       $0A
0008726F E701                       	dc.b	smpsNoAttack, $01
00087271 E110                       	smpsAlterNote       $10
00087273 E701                       	dc.b	smpsNoAttack, $01
00087275 E111                       	smpsAlterNote       $11
00087277 8001                       	dc.b	nRst, $01
00087279 E10D                       	smpsAlterNote       $0D
0008727B C40D                       	dc.b	nG5, $0D
0008727D E10A                       	smpsAlterNote       $0A
0008727F E701                       	dc.b	smpsNoAttack, $01
00087281 E106                       	smpsAlterNote       $06
00087283 E701                       	dc.b	smpsNoAttack, $01
00087285 E10A                       	smpsAlterNote       $0A
00087287 E701                       	dc.b	smpsNoAttack, $01
00087289 E10D                       	smpsAlterNote       $0D
0008728B E701                       	dc.b	smpsNoAttack, $01
0008728D E10C                       	smpsAlterNote       $0C
0008728F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008729B 8001                       	dc.b	nRst, $01
0008729D E10D                       	smpsAlterNote       $0D
0008729F C20D                       	dc.b	nF5, $0D
000872A1 E10A                       	smpsAlterNote       $0A
000872A3 E701                       	dc.b	smpsNoAttack, $01
000872A5 E106                       	smpsAlterNote       $06
000872A7 E701                       	dc.b	smpsNoAttack, $01
000872A9 E10A                       	smpsAlterNote       $0A
000872AB E701                       	dc.b	smpsNoAttack, $01
000872AD E110                       	smpsAlterNote       $10
000872AF E701                       	dc.b	smpsNoAttack, $01
000872B1 E111                       	smpsAlterNote       $11
000872B3 E701                       	dc.b	smpsNoAttack, $01
000872B5 E10D                       	smpsAlterNote       $0D
000872B7 E701                       	dc.b	smpsNoAttack, $01
000872B9 E107                       	smpsAlterNote       $07
000872BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872BF E10A                       	smpsAlterNote       $0A
000872C1 E701                       	dc.b	smpsNoAttack, $01
000872C3 E110                       	smpsAlterNote       $10
000872C5 E701                       	dc.b	smpsNoAttack, $01
000872C7 E111                       	smpsAlterNote       $11
000872C9 8001                       	dc.b	nRst, $01
000872CB E10F                       	smpsAlterNote       $0F
000872CD C60A                       	dc.b	nA5, $0A
000872CF E10D                       	smpsAlterNote       $0D
000872D1 C406 8001                  	dc.b	nG5, $06, nRst, $01
000872D5 E10C                       	smpsAlterNote       $0C
000872D7 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000872E3 8001                       	dc.b	nRst, $01
000872E5 E10D                       	smpsAlterNote       $0D
000872E7 C20D                       	dc.b	nF5, $0D
000872E9 E107                       	smpsAlterNote       $07
000872EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872EF E10A                       	smpsAlterNote       $0A
000872F1 E701                       	dc.b	smpsNoAttack, $01
000872F3 E110                       	smpsAlterNote       $10
000872F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872F9 E10A                       	smpsAlterNote       $0A
000872FB E701                       	dc.b	smpsNoAttack, $01
000872FD E107                       	smpsAlterNote       $07
000872FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087303 E10D                       	smpsAlterNote       $0D
00087305 E701                       	dc.b	smpsNoAttack, $01
00087307 E111                       	smpsAlterNote       $11
00087309 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008730D E10D                       	smpsAlterNote       $0D
0008730F C40D                       	dc.b	nG5, $0D
00087311 E107                       	smpsAlterNote       $07
00087313 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087317 E10A                       	smpsAlterNote       $0A
00087319 E701                       	dc.b	smpsNoAttack, $01
0008731B E10D                       	smpsAlterNote       $0D
0008731D 8001                       	dc.b	nRst, $01
0008731F E10C                       	smpsAlterNote       $0C
00087321 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008732D E10D                       	smpsAlterNote       $0D
0008732F C20E                       	dc.b	nF5, $0E
00087331 E107                       	smpsAlterNote       $07
00087333 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087337 E10D                       	smpsAlterNote       $0D
00087339 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008733F E0C0                       	smpsPan             panCenter, $00
00087341 E603                       	smpsAlterVol        $03
00087343 E108                       	smpsAlterNote       $08
00087345 B406                       	dc.b	nEb4, $06
00087347 E10C                       	smpsAlterNote       $0C
00087349 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008734D E108                       	smpsAlterNote       $08
0008734F B403                       	dc.b	nEb4, $03
00087351 E109                       	smpsAlterNote       $09
00087353 B803 8001                  	dc.b	nG4, $03, nRst, $01
00087357 E10C                       	smpsAlterNote       $0C
00087359 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00087361 03                         	dc.b	$03
00087362 E6FD                       	smpsAlterVol        $FD
00087364 F6F1 F4                    	smpsJump            music84_Jump00
00087367                            
00087367                            ; PSG1 Data
00087367                            music84_PSG1:
00087367 E1FD                       	smpsAlterNote       $FD
00087369 EC04                       	smpsPSGAlterVol     $04
0008736B 9203                       	dc.b	nF1, $03
0008736D E1FE                       	smpsAlterNote       $FE
0008736F 9603                       	dc.b	nA1, $03
00087371 EC04                       	smpsPSGAlterVol     $04
00087373 E701                       	dc.b	smpsNoAttack, $01
00087375 E1FF                       	smpsAlterNote       $FF
00087377 ECFC                       	smpsPSGAlterVol     $FC
00087379 9B03                       	dc.b	nD2, $03
0008737B E1FD                       	smpsAlterNote       $FD
0008737D 9403                       	dc.b	nG1, $03
0008737F EC04                       	smpsPSGAlterVol     $04
00087381 E701                       	dc.b	smpsNoAttack, $01
00087383 E1FE                       	smpsAlterNote       $FE
00087385 ECFC                       	smpsPSGAlterVol     $FC
00087387 9703                       	dc.b	nBb1, $03
00087389 E1FF                       	smpsAlterNote       $FF
0008738B 9B03                       	dc.b	nD2, $03
0008738D EC04                       	smpsPSGAlterVol     $04
0008738F E701                       	dc.b	smpsNoAttack, $01
00087391 E1FE                       	smpsAlterNote       $FE
00087393 ECFC                       	smpsPSGAlterVol     $FC
00087395 A002                       	dc.b	nG2, $02
00087397 EC04                       	smpsPSGAlterVol     $04
00087399 E701                       	dc.b	smpsNoAttack, $01
0008739B E1FF                       	smpsAlterNote       $FF
0008739D ECFC                       	smpsPSGAlterVol     $FC
0008739F A203                       	dc.b	nA2, $03
000873A1 EC0B                       	smpsPSGAlterVol     $0B
000873A3 800A                       	dc.b	nRst, $0A
000873A5 E105                       	smpsAlterNote       $05
000873A7 01                         	dc.b	$01
000873A8 E1FC                       	smpsAlterNote       $FC
000873AA 01                         	dc.b	$01
000873AB E105                       	smpsAlterNote       $05
000873AD 01                         	dc.b	$01
000873AE E1FD                       	smpsAlterNote       $FD
000873B0 01                         	dc.b	$01
000873B1 E105                       	smpsAlterNote       $05
000873B3 01                         	dc.b	$01
000873B4 E1FD                       	smpsAlterNote       $FD
000873B6 01                         	dc.b	$01
000873B7 E1FA                       	smpsAlterNote       $FA
000873B9 01                         	dc.b	$01
000873BA E1FC                       	smpsAlterNote       $FC
000873BC 01                         	dc.b	$01
000873BD E105                       	smpsAlterNote       $05
000873BF 01                         	dc.b	$01
000873C0 E108                       	smpsAlterNote       $08
000873C2 0101                       	dc.b	$01, $01
000873C4 E105                       	smpsAlterNote       $05
000873C6 01                         	dc.b	$01
000873C7 E1FA                       	smpsAlterNote       $FA
000873C9 0101                       	dc.b	$01, $01
000873CB E1FD                       	smpsAlterNote       $FD
000873CD 01                         	dc.b	$01
000873CE E105                       	smpsAlterNote       $05
000873D0 01                         	dc.b	$01
000873D1 E108                       	smpsAlterNote       $08
000873D3 01                         	dc.b	$01
000873D4 E105                       	smpsAlterNote       $05
000873D6 01                         	dc.b	$01
000873D7 E1FC                       	smpsAlterNote       $FC
000873D9 01                         	dc.b	$01
000873DA E105                       	smpsAlterNote       $05
000873DC 01                         	dc.b	$01
000873DD E1FD                       	smpsAlterNote       $FD
000873DF 01                         	dc.b	$01
000873E0                            
000873E0                            music84_Jump07:
000873E0 E105                       	smpsAlterNote       $05
000873E2 8001                       	dc.b	nRst, $01
000873E4 E1FD                       	smpsAlterNote       $FD
000873E6 01                         	dc.b	$01
000873E7 E1FA                       	smpsAlterNote       $FA
000873E9 01                         	dc.b	$01
000873EA E1FC                       	smpsAlterNote       $FC
000873EC 01                         	dc.b	$01
000873ED E1FD                       	smpsAlterNote       $FD
000873EF ECF5                       	smpsPSGAlterVol     $F5
000873F1 9206                       	dc.b	nF1, $06
000873F3 EC04                       	smpsPSGAlterVol     $04
000873F5 E701                       	dc.b	smpsNoAttack, $01
000873F7 EC07                       	smpsPSGAlterVol     $07
000873F9 8003                       	dc.b	nRst, $03
000873FB ECF5                       	smpsPSGAlterVol     $F5
000873FD 9206                       	dc.b	nF1, $06
000873FF EC04                       	smpsPSGAlterVol     $04
00087401 E701                       	dc.b	smpsNoAttack, $01
00087403 EC07                       	smpsPSGAlterVol     $07
00087405 8006                       	dc.b	nRst, $06
00087407 E100                       	smpsAlterNote       $00
00087409 01                         	dc.b	$01
0008740A E104                       	smpsAlterNote       $04
0008740C 01                         	dc.b	$01
0008740D E100                       	smpsAlterNote       $00
0008740F 01                         	dc.b	$01
00087410 E1FB                       	smpsAlterNote       $FB
00087412 01                         	dc.b	$01
00087413 E1FD                       	smpsAlterNote       $FD
00087415 ECF5                       	smpsPSGAlterVol     $F5
00087417 9406                       	dc.b	nG1, $06
00087419 EC04                       	smpsPSGAlterVol     $04
0008741B E701                       	dc.b	smpsNoAttack, $01
0008741D EC07                       	smpsPSGAlterVol     $07
0008741F 8003                       	dc.b	nRst, $03
00087421 ECF5                       	smpsPSGAlterVol     $F5
00087423 9407                       	dc.b	nG1, $07
00087425 EC0B                       	smpsPSGAlterVol     $0B
00087427 8006                       	dc.b	nRst, $06
00087429 E100                       	smpsAlterNote       $00
0008742B 01                         	dc.b	$01
0008742C E103                       	smpsAlterNote       $03
0008742E 0101                       	dc.b	$01, $01
00087430 E1FD                       	smpsAlterNote       $FD
00087432 01                         	dc.b	$01
00087433 ECF5                       	smpsPSGAlterVol     $F5
00087435 9207                       	dc.b	nF1, $07
00087437 EC0B                       	smpsPSGAlterVol     $0B
00087439 8004                       	dc.b	nRst, $04
0008743B ECF5                       	smpsPSGAlterVol     $F5
0008743D 9206                       	dc.b	nF1, $06
0008743F EC04                       	smpsPSGAlterVol     $04
00087441 E701                       	dc.b	smpsNoAttack, $01
00087443 EC07                       	smpsPSGAlterVol     $07
00087445 8006                       	dc.b	nRst, $06
00087447 E103                       	smpsAlterNote       $03
00087449 01                         	dc.b	$01
0008744A E104                       	smpsAlterNote       $04
0008744C 01                         	dc.b	$01
0008744D E100                       	smpsAlterNote       $00
0008744F 01                         	dc.b	$01
00087450 E1FA                       	smpsAlterNote       $FA
00087452 01                         	dc.b	$01
00087453 E1FD                       	smpsAlterNote       $FD
00087455 ECF5                       	smpsPSGAlterVol     $F5
00087457 9206                       	dc.b	nF1, $06
00087459 EC04                       	smpsPSGAlterVol     $04
0008745B E701                       	dc.b	smpsNoAttack, $01
0008745D EC07                       	smpsPSGAlterVol     $07
0008745F 8003                       	dc.b	nRst, $03
00087461 ECF5                       	smpsPSGAlterVol     $F5
00087463 9106                       	dc.b	nE1, $06
00087465 EC04                       	smpsPSGAlterVol     $04
00087467 E701                       	dc.b	smpsNoAttack, $01
00087469 EC07                       	smpsPSGAlterVol     $07
0008746B 8006                       	dc.b	nRst, $06
0008746D E100                       	smpsAlterNote       $00
0008746F 01                         	dc.b	$01
00087470 E104                       	smpsAlterNote       $04
00087472 01                         	dc.b	$01
00087473 E100                       	smpsAlterNote       $00
00087475 01                         	dc.b	$01
00087476 E1FD                       	smpsAlterNote       $FD
00087478 01                         	dc.b	$01
00087479 ECF5                       	smpsPSGAlterVol     $F5
0008747B 9206                       	dc.b	nF1, $06
0008747D EC04                       	smpsPSGAlterVol     $04
0008747F E701                       	dc.b	smpsNoAttack, $01
00087481 EC07                       	smpsPSGAlterVol     $07
00087483 8003                       	dc.b	nRst, $03
00087485 ECF5                       	smpsPSGAlterVol     $F5
00087487 9207                       	dc.b	nF1, $07
00087489 EC0B                       	smpsPSGAlterVol     $0B
0008748B 8007                       	dc.b	nRst, $07
0008748D E103                       	smpsAlterNote       $03
0008748F 0101                       	dc.b	$01, $01
00087491 E1FD                       	smpsAlterNote       $FD
00087493 01                         	dc.b	$01
00087494 E1FB                       	smpsAlterNote       $FB
00087496 01                         	dc.b	$01
00087497 E1FD                       	smpsAlterNote       $FD
00087499 ECF5                       	smpsPSGAlterVol     $F5
0008749B 9406                       	dc.b	nG1, $06
0008749D EC0B                       	smpsPSGAlterVol     $0B
0008749F 8004                       	dc.b	nRst, $04
000874A1 ECF5                       	smpsPSGAlterVol     $F5
000874A3 9406                       	dc.b	nG1, $06
000874A5 EC04                       	smpsPSGAlterVol     $04
000874A7 E701                       	dc.b	smpsNoAttack, $01
000874A9 EC07                       	smpsPSGAlterVol     $07
000874AB 8006                       	dc.b	nRst, $06
000874AD E100                       	smpsAlterNote       $00
000874AF 01                         	dc.b	$01
000874B0 E104                       	smpsAlterNote       $04
000874B2 01                         	dc.b	$01
000874B3 E100                       	smpsAlterNote       $00
000874B5 01                         	dc.b	$01
000874B6 E1F9                       	smpsAlterNote       $F9
000874B8 01                         	dc.b	$01
000874B9 E1FD                       	smpsAlterNote       $FD
000874BB ECF5                       	smpsPSGAlterVol     $F5
000874BD 9206                       	dc.b	nF1, $06
000874BF EC04                       	smpsPSGAlterVol     $04
000874C1 E701                       	dc.b	smpsNoAttack, $01
000874C3 EC07                       	smpsPSGAlterVol     $07
000874C5 8003                       	dc.b	nRst, $03
000874C7 ECF5                       	smpsPSGAlterVol     $F5
000874C9 9207                       	dc.b	nF1, $07
000874CB EC0B                       	smpsPSGAlterVol     $0B
000874CD 8006                       	dc.b	nRst, $06
000874CF E100                       	smpsAlterNote       $00
000874D1 01                         	dc.b	$01
000874D2 E104                       	smpsAlterNote       $04
000874D4 01                         	dc.b	$01
000874D5 E103                       	smpsAlterNote       $03
000874D7 01                         	dc.b	$01
000874D8 E1FD                       	smpsAlterNote       $FD
000874DA 01                         	dc.b	$01
000874DB ECF5                       	smpsPSGAlterVol     $F5
000874DD 9207                       	dc.b	nF1, $07
000874DF EC0B                       	smpsPSGAlterVol     $0B
000874E1 8004                       	dc.b	nRst, $04
000874E3 ECF5                       	smpsPSGAlterVol     $F5
000874E5 9206                       	dc.b	nF1, $06
000874E7 EC0B                       	smpsPSGAlterVol     $0B
000874E9 8007                       	dc.b	nRst, $07
000874EB E103                       	smpsAlterNote       $03
000874ED 0101                       	dc.b	$01, $01
000874EF E100                       	smpsAlterNote       $00
000874F1 01                         	dc.b	$01
000874F2 E1FA                       	smpsAlterNote       $FA
000874F4 01                         	dc.b	$01
000874F5 E1FD                       	smpsAlterNote       $FD
000874F7 ECF5                       	smpsPSGAlterVol     $F5
000874F9 9206                       	dc.b	nF1, $06
000874FB EC04                       	smpsPSGAlterVol     $04
000874FD E701                       	dc.b	smpsNoAttack, $01
000874FF EC07                       	smpsPSGAlterVol     $07
00087501 8003                       	dc.b	nRst, $03
00087503 ECF5                       	smpsPSGAlterVol     $F5
00087505 9206                       	dc.b	nF1, $06
00087507 EC04                       	smpsPSGAlterVol     $04
00087509 E701                       	dc.b	smpsNoAttack, $01
0008750B EC07                       	smpsPSGAlterVol     $07
0008750D 8006                       	dc.b	nRst, $06
0008750F E100                       	smpsAlterNote       $00
00087511 01                         	dc.b	$01
00087512 E104                       	smpsAlterNote       $04
00087514 01                         	dc.b	$01
00087515 E100                       	smpsAlterNote       $00
00087517 01                         	dc.b	$01
00087518 E1FD                       	smpsAlterNote       $FD
0008751A 01                         	dc.b	$01
0008751B ECF5                       	smpsPSGAlterVol     $F5
0008751D 9206                       	dc.b	nF1, $06
0008751F EC04                       	smpsPSGAlterVol     $04
00087521 E701                       	dc.b	smpsNoAttack, $01
00087523 EC07                       	smpsPSGAlterVol     $07
00087525 8003                       	dc.b	nRst, $03
00087527 ECF5                       	smpsPSGAlterVol     $F5
00087529 9207                       	dc.b	nF1, $07
0008752B EC0B                       	smpsPSGAlterVol     $0B
0008752D 8007                       	dc.b	nRst, $07
0008752F E103                       	smpsAlterNote       $03
00087531 0101                       	dc.b	$01, $01
00087533 E1FD                       	smpsAlterNote       $FD
00087535 01                         	dc.b	$01
00087536 E1FA                       	smpsAlterNote       $FA
00087538 01                         	dc.b	$01
00087539 E1FD                       	smpsAlterNote       $FD
0008753B ECF5                       	smpsPSGAlterVol     $F5
0008753D 9206                       	dc.b	nF1, $06
0008753F EC0B                       	smpsPSGAlterVol     $0B
00087541 8004                       	dc.b	nRst, $04
00087543 ECF5                       	smpsPSGAlterVol     $F5
00087545 9206                       	dc.b	nF1, $06
00087547 EC04                       	smpsPSGAlterVol     $04
00087549 E701                       	dc.b	smpsNoAttack, $01
0008754B EC07                       	smpsPSGAlterVol     $07
0008754D 8006                       	dc.b	nRst, $06
0008754F E103                       	smpsAlterNote       $03
00087551 01                         	dc.b	$01
00087552 E104                       	smpsAlterNote       $04
00087554 01                         	dc.b	$01
00087555 E100                       	smpsAlterNote       $00
00087557 01                         	dc.b	$01
00087558 E1FA                       	smpsAlterNote       $FA
0008755A 01                         	dc.b	$01
0008755B E1FD                       	smpsAlterNote       $FD
0008755D ECF5                       	smpsPSGAlterVol     $F5
0008755F 9206                       	dc.b	nF1, $06
00087561 EC04                       	smpsPSGAlterVol     $04
00087563 E701                       	dc.b	smpsNoAttack, $01
00087565 EC07                       	smpsPSGAlterVol     $07
00087567 8003                       	dc.b	nRst, $03
00087569 ECF5                       	smpsPSGAlterVol     $F5
0008756B 9206                       	dc.b	nF1, $06
0008756D EC04                       	smpsPSGAlterVol     $04
0008756F E701                       	dc.b	smpsNoAttack, $01
00087571 EC07                       	smpsPSGAlterVol     $07
00087573 8006                       	dc.b	nRst, $06
00087575 E100                       	smpsAlterNote       $00
00087577 01                         	dc.b	$01
00087578 E104                       	smpsAlterNote       $04
0008757A 01                         	dc.b	$01
0008757B E103                       	smpsAlterNote       $03
0008757D 01                         	dc.b	$01
0008757E E1FD                       	smpsAlterNote       $FD
00087580 01                         	dc.b	$01
00087581 ECF5                       	smpsPSGAlterVol     $F5
00087583 9107                       	dc.b	nE1, $07
00087585 EC0B                       	smpsPSGAlterVol     $0B
00087587 8004                       	dc.b	nRst, $04
00087589 ECF5                       	smpsPSGAlterVol     $F5
0008758B 9106                       	dc.b	nE1, $06
0008758D EC0B                       	smpsPSGAlterVol     $0B
0008758F 8007                       	dc.b	nRst, $07
00087591 E103                       	smpsAlterNote       $03
00087593 0101                       	dc.b	$01, $01
00087595 E100                       	smpsAlterNote       $00
00087597 01                         	dc.b	$01
00087598 E1FA                       	smpsAlterNote       $FA
0008759A 01                         	dc.b	$01
0008759B E1FD                       	smpsAlterNote       $FD
0008759D ECF5                       	smpsPSGAlterVol     $F5
0008759F 9106                       	dc.b	nE1, $06
000875A1 EC04                       	smpsPSGAlterVol     $04
000875A3 E701                       	dc.b	smpsNoAttack, $01
000875A5 EC07                       	smpsPSGAlterVol     $07
000875A7 8003                       	dc.b	nRst, $03
000875A9 ECF5                       	smpsPSGAlterVol     $F5
000875AB 9106                       	dc.b	nE1, $06
000875AD EC04                       	smpsPSGAlterVol     $04
000875AF E701                       	dc.b	smpsNoAttack, $01
000875B1 EC07                       	smpsPSGAlterVol     $07
000875B3 8006                       	dc.b	nRst, $06
000875B5 E100                       	smpsAlterNote       $00
000875B7 01                         	dc.b	$01
000875B8 E104                       	smpsAlterNote       $04
000875BA 01                         	dc.b	$01
000875BB E100                       	smpsAlterNote       $00
000875BD 01                         	dc.b	$01
000875BE E1FA                       	smpsAlterNote       $FA
000875C0 01                         	dc.b	$01
000875C1 E1FD                       	smpsAlterNote       $FD
000875C3 ECF5                       	smpsPSGAlterVol     $F5
000875C5 9106                       	dc.b	nE1, $06
000875C7 EC04                       	smpsPSGAlterVol     $04
000875C9 E701                       	dc.b	smpsNoAttack, $01
000875CB EC07                       	smpsPSGAlterVol     $07
000875CD 8003                       	dc.b	nRst, $03
000875CF ECF5                       	smpsPSGAlterVol     $F5
000875D1 9107 9106                  	dc.b	nE1, $07, nE1, $06
000875D5 EC04                       	smpsPSGAlterVol     $04
000875D7 E701                       	dc.b	smpsNoAttack, $01
000875D9 ECFC                       	smpsPSGAlterVol     $FC
000875DB 9103 9103                  	dc.b	nE1, $03, nE1, $03
000875DF EC04                       	smpsPSGAlterVol     $04
000875E1 E701                       	dc.b	smpsNoAttack, $01
000875E3 ECFC                       	smpsPSGAlterVol     $FC
000875E5 9106                       	dc.b	nE1, $06
000875E7 EC04                       	smpsPSGAlterVol     $04
000875E9 E701                       	dc.b	smpsNoAttack, $01
000875EB EC07                       	smpsPSGAlterVol     $07
000875ED 8006                       	dc.b	nRst, $06
000875EF E100                       	smpsAlterNote       $00
000875F1 01                         	dc.b	$01
000875F2 E104                       	smpsAlterNote       $04
000875F4 01                         	dc.b	$01
000875F5 E100                       	smpsAlterNote       $00
000875F7 01                         	dc.b	$01
000875F8 E1FA                       	smpsAlterNote       $FA
000875FA 01                         	dc.b	$01
000875FB E1F9                       	smpsAlterNote       $F9
000875FD 01                         	dc.b	$01
000875FE E1FD                       	smpsAlterNote       $FD
00087600 01                         	dc.b	$01
00087601 E103                       	smpsAlterNote       $03
00087603 01                         	dc.b	$01
00087604 E104                       	smpsAlterNote       $04
00087606 01                         	dc.b	$01
00087607 E100                       	smpsAlterNote       $00
00087609 01                         	dc.b	$01
0008760A E1FA                       	smpsAlterNote       $FA
0008760C 0101                       	dc.b	$01, $01
0008760E E1FD                       	smpsAlterNote       $FD
00087610 ECF5                       	smpsPSGAlterVol     $F5
00087612 9206                       	dc.b	nF1, $06
00087614 EC04                       	smpsPSGAlterVol     $04
00087616 E701                       	dc.b	smpsNoAttack, $01
00087618 EC07                       	smpsPSGAlterVol     $07
0008761A 8003                       	dc.b	nRst, $03
0008761C ECF5                       	smpsPSGAlterVol     $F5
0008761E 9206                       	dc.b	nF1, $06
00087620 EC04                       	smpsPSGAlterVol     $04
00087622 E701                       	dc.b	smpsNoAttack, $01
00087624 EC07                       	smpsPSGAlterVol     $07
00087626 8006                       	dc.b	nRst, $06
00087628 E100                       	smpsAlterNote       $00
0008762A 01                         	dc.b	$01
0008762B E104                       	smpsAlterNote       $04
0008762D 01                         	dc.b	$01
0008762E E103                       	smpsAlterNote       $03
00087630 01                         	dc.b	$01
00087631 E1FD                       	smpsAlterNote       $FD
00087633 01                         	dc.b	$01
00087634 ECF5                       	smpsPSGAlterVol     $F5
00087636 9407                       	dc.b	nG1, $07
00087638 EC0B                       	smpsPSGAlterVol     $0B
0008763A 8004                       	dc.b	nRst, $04
0008763C ECF5                       	smpsPSGAlterVol     $F5
0008763E 9406                       	dc.b	nG1, $06
00087640 EC0B                       	smpsPSGAlterVol     $0B
00087642 8007                       	dc.b	nRst, $07
00087644 E103                       	smpsAlterNote       $03
00087646 0101                       	dc.b	$01, $01
00087648 E1FD                       	smpsAlterNote       $FD
0008764A 01                         	dc.b	$01
0008764B E1F9                       	smpsAlterNote       $F9
0008764D 01                         	dc.b	$01
0008764E E1FD                       	smpsAlterNote       $FD
00087650 ECF5                       	smpsPSGAlterVol     $F5
00087652 9206                       	dc.b	nF1, $06
00087654 EC04                       	smpsPSGAlterVol     $04
00087656 E701                       	dc.b	smpsNoAttack, $01
00087658 EC07                       	smpsPSGAlterVol     $07
0008765A 8003                       	dc.b	nRst, $03
0008765C ECF5                       	smpsPSGAlterVol     $F5
0008765E 9206                       	dc.b	nF1, $06
00087660 EC04                       	smpsPSGAlterVol     $04
00087662 E701                       	dc.b	smpsNoAttack, $01
00087664 EC07                       	smpsPSGAlterVol     $07
00087666 8006                       	dc.b	nRst, $06
00087668 E100                       	smpsAlterNote       $00
0008766A 01                         	dc.b	$01
0008766B E104                       	smpsAlterNote       $04
0008766D 01                         	dc.b	$01
0008766E E100                       	smpsAlterNote       $00
00087670 01                         	dc.b	$01
00087671 E1FA                       	smpsAlterNote       $FA
00087673 01                         	dc.b	$01
00087674 E1FD                       	smpsAlterNote       $FD
00087676 ECF5                       	smpsPSGAlterVol     $F5
00087678 9206                       	dc.b	nF1, $06
0008767A EC04                       	smpsPSGAlterVol     $04
0008767C E701                       	dc.b	smpsNoAttack, $01
0008767E EC07                       	smpsPSGAlterVol     $07
00087680 8003                       	dc.b	nRst, $03
00087682 ECF5                       	smpsPSGAlterVol     $F5
00087684 9107                       	dc.b	nE1, $07
00087686 EC0B                       	smpsPSGAlterVol     $0B
00087688 8006                       	dc.b	nRst, $06
0008768A E100                       	smpsAlterNote       $00
0008768C 01                         	dc.b	$01
0008768D E103                       	smpsAlterNote       $03
0008768F 0101                       	dc.b	$01, $01
00087691 E1FD                       	smpsAlterNote       $FD
00087693 01                         	dc.b	$01
00087694 ECF5                       	smpsPSGAlterVol     $F5
00087696 9207                       	dc.b	nF1, $07
00087698 EC0B                       	smpsPSGAlterVol     $0B
0008769A 8004                       	dc.b	nRst, $04
0008769C ECF5                       	smpsPSGAlterVol     $F5
0008769E 9206                       	dc.b	nF1, $06
000876A0 EC04                       	smpsPSGAlterVol     $04
000876A2 E701                       	dc.b	smpsNoAttack, $01
000876A4 EC07                       	smpsPSGAlterVol     $07
000876A6 8006                       	dc.b	nRst, $06
000876A8 E103                       	smpsAlterNote       $03
000876AA 01                         	dc.b	$01
000876AB E104                       	smpsAlterNote       $04
000876AD 01                         	dc.b	$01
000876AE E100                       	smpsAlterNote       $00
000876B0 01                         	dc.b	$01
000876B1 E1FB                       	smpsAlterNote       $FB
000876B3 01                         	dc.b	$01
000876B4 E1FD                       	smpsAlterNote       $FD
000876B6 ECF5                       	smpsPSGAlterVol     $F5
000876B8 9406                       	dc.b	nG1, $06
000876BA EC04                       	smpsPSGAlterVol     $04
000876BC E701                       	dc.b	smpsNoAttack, $01
000876BE EC07                       	smpsPSGAlterVol     $07
000876C0 8003                       	dc.b	nRst, $03
000876C2 ECF5                       	smpsPSGAlterVol     $F5
000876C4 9406                       	dc.b	nG1, $06
000876C6 EC04                       	smpsPSGAlterVol     $04
000876C8 E701                       	dc.b	smpsNoAttack, $01
000876CA EC07                       	smpsPSGAlterVol     $07
000876CC 8006                       	dc.b	nRst, $06
000876CE E100                       	smpsAlterNote       $00
000876D0 01                         	dc.b	$01
000876D1 E104                       	smpsAlterNote       $04
000876D3 01                         	dc.b	$01
000876D4 E100                       	smpsAlterNote       $00
000876D6 01                         	dc.b	$01
000876D7 E1FD                       	smpsAlterNote       $FD
000876D9 01                         	dc.b	$01
000876DA ECF5                       	smpsPSGAlterVol     $F5
000876DC 9206                       	dc.b	nF1, $06
000876DE EC04                       	smpsPSGAlterVol     $04
000876E0 E701                       	dc.b	smpsNoAttack, $01
000876E2 EC07                       	smpsPSGAlterVol     $07
000876E4 8003                       	dc.b	nRst, $03
000876E6 ECF5                       	smpsPSGAlterVol     $F5
000876E8 9207                       	dc.b	nF1, $07
000876EA EC0B                       	smpsPSGAlterVol     $0B
000876EC 8007                       	dc.b	nRst, $07
000876EE E103                       	smpsAlterNote       $03
000876F0 0101                       	dc.b	$01, $01
000876F2 E1FD                       	smpsAlterNote       $FD
000876F4 01                         	dc.b	$01
000876F5 E1FA                       	smpsAlterNote       $FA
000876F7 01                         	dc.b	$01
000876F8 E1FD                       	smpsAlterNote       $FD
000876FA ECF5                       	smpsPSGAlterVol     $F5
000876FC 9206                       	dc.b	nF1, $06
000876FE EC0B                       	smpsPSGAlterVol     $0B
00087700 8004                       	dc.b	nRst, $04
00087702 ECF5                       	smpsPSGAlterVol     $F5
00087704 9206                       	dc.b	nF1, $06
00087706 EC04                       	smpsPSGAlterVol     $04
00087708 E701                       	dc.b	smpsNoAttack, $01
0008770A EC07                       	smpsPSGAlterVol     $07
0008770C 8006                       	dc.b	nRst, $06
0008770E E100                       	smpsAlterNote       $00
00087710 01                         	dc.b	$01
00087711 E104                       	smpsAlterNote       $04
00087713 01                         	dc.b	$01
00087714 E100                       	smpsAlterNote       $00
00087716 01                         	dc.b	$01
00087717 E1FA                       	smpsAlterNote       $FA
00087719 01                         	dc.b	$01
0008771A E1FD                       	smpsAlterNote       $FD
0008771C ECF5                       	smpsPSGAlterVol     $F5
0008771E 9206                       	dc.b	nF1, $06
00087720 EC04                       	smpsPSGAlterVol     $04
00087722 E704                       	dc.b	smpsNoAttack, $04
00087724 ECFC                       	smpsPSGAlterVol     $FC
00087726 9207                       	dc.b	nF1, $07
00087728 EC0B                       	smpsPSGAlterVol     $0B
0008772A 8006                       	dc.b	nRst, $06
0008772C E100                       	smpsAlterNote       $00
0008772E 01                         	dc.b	$01
0008772F E104                       	smpsAlterNote       $04
00087731 01                         	dc.b	$01
00087732 E103                       	smpsAlterNote       $03
00087734 01                         	dc.b	$01
00087735 E1FD                       	smpsAlterNote       $FD
00087737 01                         	dc.b	$01
00087738 ECF5                       	smpsPSGAlterVol     $F5
0008773A 9207                       	dc.b	nF1, $07
0008773C EC0B                       	smpsPSGAlterVol     $0B
0008773E 8004                       	dc.b	nRst, $04
00087740 ECF5                       	smpsPSGAlterVol     $F5
00087742 9206                       	dc.b	nF1, $06
00087744 EC0B                       	smpsPSGAlterVol     $0B
00087746 8007                       	dc.b	nRst, $07
00087748 E103                       	smpsAlterNote       $03
0008774A 0101                       	dc.b	$01, $01
0008774C E100                       	smpsAlterNote       $00
0008774E 01                         	dc.b	$01
0008774F E1FA                       	smpsAlterNote       $FA
00087751 01                         	dc.b	$01
00087752 E1FD                       	smpsAlterNote       $FD
00087754 ECF5                       	smpsPSGAlterVol     $F5
00087756 9206                       	dc.b	nF1, $06
00087758 EC04                       	smpsPSGAlterVol     $04
0008775A E704                       	dc.b	smpsNoAttack, $04
0008775C ECFC                       	smpsPSGAlterVol     $FC
0008775E 9206                       	dc.b	nF1, $06
00087760 EC04                       	smpsPSGAlterVol     $04
00087762 E701                       	dc.b	smpsNoAttack, $01
00087764 EC07                       	smpsPSGAlterVol     $07
00087766 8006                       	dc.b	nRst, $06
00087768 E100                       	smpsAlterNote       $00
0008776A 01                         	dc.b	$01
0008776B E104                       	smpsAlterNote       $04
0008776D 01                         	dc.b	$01
0008776E E100                       	smpsAlterNote       $00
00087770 01                         	dc.b	$01
00087771 E1FD                       	smpsAlterNote       $FD
00087773 01                         	dc.b	$01
00087774 ECF5                       	smpsPSGAlterVol     $F5
00087776 9206                       	dc.b	nF1, $06
00087778 EC04                       	smpsPSGAlterVol     $04
0008777A E701                       	dc.b	smpsNoAttack, $01
0008777C EC07                       	smpsPSGAlterVol     $07
0008777E 8003                       	dc.b	nRst, $03
00087780 ECF5                       	smpsPSGAlterVol     $F5
00087782 9207                       	dc.b	nF1, $07
00087784 EC0B                       	smpsPSGAlterVol     $0B
00087786 8007                       	dc.b	nRst, $07
00087788 E103                       	smpsAlterNote       $03
0008778A 0101                       	dc.b	$01, $01
0008778C E1FD                       	smpsAlterNote       $FD
0008778E 01                         	dc.b	$01
0008778F E1FA                       	smpsAlterNote       $FA
00087791 01                         	dc.b	$01
00087792 E1FD                       	smpsAlterNote       $FD
00087794 ECF5                       	smpsPSGAlterVol     $F5
00087796 9106                       	dc.b	nE1, $06
00087798 EC0B                       	smpsPSGAlterVol     $0B
0008779A 8004                       	dc.b	nRst, $04
0008779C ECF5                       	smpsPSGAlterVol     $F5
0008779E 9106                       	dc.b	nE1, $06
000877A0 EC04                       	smpsPSGAlterVol     $04
000877A2 E701                       	dc.b	smpsNoAttack, $01
000877A4 EC07                       	smpsPSGAlterVol     $07
000877A6 8006                       	dc.b	nRst, $06
000877A8 E100                       	smpsAlterNote       $00
000877AA 01                         	dc.b	$01
000877AB E104                       	smpsAlterNote       $04
000877AD 01                         	dc.b	$01
000877AE E100                       	smpsAlterNote       $00
000877B0 01                         	dc.b	$01
000877B1 E1FA                       	smpsAlterNote       $FA
000877B3 01                         	dc.b	$01
000877B4 E1FD                       	smpsAlterNote       $FD
000877B6 ECF5                       	smpsPSGAlterVol     $F5
000877B8 9106                       	dc.b	nE1, $06
000877BA EC04                       	smpsPSGAlterVol     $04
000877BC E701                       	dc.b	smpsNoAttack, $01
000877BE EC07                       	smpsPSGAlterVol     $07
000877C0 8003                       	dc.b	nRst, $03
000877C2 ECF5                       	smpsPSGAlterVol     $F5
000877C4 9106                       	dc.b	nE1, $06
000877C6 EC04                       	smpsPSGAlterVol     $04
000877C8 E701                       	dc.b	smpsNoAttack, $01
000877CA EC07                       	smpsPSGAlterVol     $07
000877CC 8006                       	dc.b	nRst, $06
000877CE E100                       	smpsAlterNote       $00
000877D0 01                         	dc.b	$01
000877D1 E104                       	smpsAlterNote       $04
000877D3 01                         	dc.b	$01
000877D4 E103                       	smpsAlterNote       $03
000877D6 01                         	dc.b	$01
000877D7 E1FD                       	smpsAlterNote       $FD
000877D9 01                         	dc.b	$01
000877DA ECF5                       	smpsPSGAlterVol     $F5
000877DC 9107                       	dc.b	nE1, $07
000877DE EC0B                       	smpsPSGAlterVol     $0B
000877E0 8004                       	dc.b	nRst, $04
000877E2 ECF5                       	smpsPSGAlterVol     $F5
000877E4 9106                       	dc.b	nE1, $06
000877E6 EC0B                       	smpsPSGAlterVol     $0B
000877E8 8007                       	dc.b	nRst, $07
000877EA E103                       	smpsAlterNote       $03
000877EC 0101                       	dc.b	$01, $01
000877EE E100                       	smpsAlterNote       $00
000877F0 01                         	dc.b	$01
000877F1 E1FA                       	smpsAlterNote       $FA
000877F3 01                         	dc.b	$01
000877F4 E1FD                       	smpsAlterNote       $FD
000877F6 ECF5                       	smpsPSGAlterVol     $F5
000877F8 9106                       	dc.b	nE1, $06
000877FA EC04                       	smpsPSGAlterVol     $04
000877FC E701                       	dc.b	smpsNoAttack, $01
000877FE EC07                       	smpsPSGAlterVol     $07
00087800 8003                       	dc.b	nRst, $03
00087802 ECF5                       	smpsPSGAlterVol     $F5
00087804 9106                       	dc.b	nE1, $06
00087806 EC04                       	smpsPSGAlterVol     $04
00087808 E701                       	dc.b	smpsNoAttack, $01
0008780A EC07                       	smpsPSGAlterVol     $07
0008780C 8003                       	dc.b	nRst, $03
0008780E ECF5                       	smpsPSGAlterVol     $F5
00087810 9207                       	dc.b	nF1, $07
00087812 EC0B                       	smpsPSGAlterVol     $0B
00087814 8006                       	dc.b	nRst, $06
00087816 E100                       	smpsAlterNote       $00
00087818 01                         	dc.b	$01
00087819 E104                       	smpsAlterNote       $04
0008781B 01                         	dc.b	$01
0008781C E103                       	smpsAlterNote       $03
0008781E 01                         	dc.b	$01
0008781F E1FD                       	smpsAlterNote       $FD
00087821 01                         	dc.b	$01
00087822 E1F9                       	smpsAlterNote       $F9
00087824 01                         	dc.b	$01
00087825 E1FD                       	smpsAlterNote       $FD
00087827 01                         	dc.b	$01
00087828 E100                       	smpsAlterNote       $00
0008782A 01                         	dc.b	$01
0008782B E104                       	smpsAlterNote       $04
0008782D 01                         	dc.b	$01
0008782E E1FD                       	smpsAlterNote       $FD
00087830 ECF5                       	smpsPSGAlterVol     $F5
00087832 9203 9203                  	dc.b	nF1, $03, nF1, $03
00087836 EC04                       	smpsPSGAlterVol     $04
00087838 E701                       	dc.b	smpsNoAttack, $01
0008783A EC07                       	smpsPSGAlterVol     $07
0008783C 8009                       	dc.b	nRst, $09
0008783E E100                       	smpsAlterNote       $00
00087840 01                         	dc.b	$01
00087841 E104                       	smpsAlterNote       $04
00087843 01                         	dc.b	$01
00087844 E103                       	smpsAlterNote       $03
00087846 01                         	dc.b	$01
00087847 E1FD                       	smpsAlterNote       $FD
00087849 01                         	dc.b	$01
0008784A E1F9                       	smpsAlterNote       $F9
0008784C 01                         	dc.b	$01
0008784D E1FD                       	smpsAlterNote       $FD
0008784F 01                         	dc.b	$01
00087850 E100                       	smpsAlterNote       $00
00087852 01                         	dc.b	$01
00087853 E104                       	smpsAlterNote       $04
00087855 01                         	dc.b	$01
00087856 E100                       	smpsAlterNote       $00
00087858 01                         	dc.b	$01
00087859 E1FA                       	smpsAlterNote       $FA
0008785B 01                         	dc.b	$01
0008785C E1F9                       	smpsAlterNote       $F9
0008785E 01                         	dc.b	$01
0008785F E1FD                       	smpsAlterNote       $FD
00087861 01                         	dc.b	$01
00087862 E103                       	smpsAlterNote       $03
00087864 0101                       	dc.b	$01, $01
00087866 E100                       	smpsAlterNote       $00
00087868 01                         	dc.b	$01
00087869 E1FD                       	smpsAlterNote       $FD
0008786B ECF5                       	smpsPSGAlterVol     $F5
0008786D 9202                       	dc.b	nF1, $02
0008786F EC04                       	smpsPSGAlterVol     $04
00087871 E701                       	dc.b	smpsNoAttack, $01
00087873 ECFC                       	smpsPSGAlterVol     $FC
00087875 9106                       	dc.b	nE1, $06
00087877 EC04                       	smpsPSGAlterVol     $04
00087879 E701                       	dc.b	smpsNoAttack, $01
0008787B EC07                       	smpsPSGAlterVol     $07
0008787D 8006                       	dc.b	nRst, $06
0008787F E100                       	smpsAlterNote       $00
00087881 01                         	dc.b	$01
00087882 E104                       	smpsAlterNote       $04
00087884 01                         	dc.b	$01
00087885 E100                       	smpsAlterNote       $00
00087887 01                         	dc.b	$01
00087888 E1FD                       	smpsAlterNote       $FD
0008788A 01                         	dc.b	$01
0008788B E1F9                       	smpsAlterNote       $F9
0008788D 01                         	dc.b	$01
0008788E E1FD                       	smpsAlterNote       $FD
00087890 01                         	dc.b	$01
00087891 E103                       	smpsAlterNote       $03
00087893 01                         	dc.b	$01
00087894 E104                       	smpsAlterNote       $04
00087896 01                         	dc.b	$01
00087897 E1FD                       	smpsAlterNote       $FD
00087899 ECF5                       	smpsPSGAlterVol     $F5
0008789B 9102                       	dc.b	nE1, $02
0008789D EC04                       	smpsPSGAlterVol     $04
0008789F E701                       	dc.b	smpsNoAttack, $01
000878A1 ECFC                       	smpsPSGAlterVol     $FC
000878A3 920D                       	dc.b	nF1, $0D
000878A5 E100                       	smpsAlterNote       $00
000878A7 E701                       	dc.b	smpsNoAttack, $01
000878A9 E104                       	smpsAlterNote       $04
000878AB E701                       	dc.b	smpsNoAttack, $01
000878AD E100                       	smpsAlterNote       $00
000878AF E701                       	dc.b	smpsNoAttack, $01
000878B1 E1FD                       	smpsAlterNote       $FD
000878B3 E701                       	dc.b	smpsNoAttack, $01
000878B5 E1F9                       	smpsAlterNote       $F9
000878B7 E701                       	dc.b	smpsNoAttack, $01
000878B9 E1FD                       	smpsAlterNote       $FD
000878BB E701                       	dc.b	smpsNoAttack, $01
000878BD E103                       	smpsAlterNote       $03
000878BF E701                       	dc.b	smpsNoAttack, $01
000878C1 E104                       	smpsAlterNote       $04
000878C3 E701                       	dc.b	smpsNoAttack, $01
000878C5 E100                       	smpsAlterNote       $00
000878C7 E701                       	dc.b	smpsNoAttack, $01
000878C9 E1FA                       	smpsAlterNote       $FA
000878CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878CF E1FD                       	smpsAlterNote       $FD
000878D1 E701                       	dc.b	smpsNoAttack, $01
000878D3 E103                       	smpsAlterNote       $03
000878D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878D9 E1FD                       	smpsAlterNote       $FD
000878DB E701                       	dc.b	smpsNoAttack, $01
000878DD E1F9                       	smpsAlterNote       $F9
000878DF E701                       	dc.b	smpsNoAttack, $01
000878E1 E1FA                       	smpsAlterNote       $FA
000878E3 E701                       	dc.b	smpsNoAttack, $01
000878E5 E100                       	smpsAlterNote       $00
000878E7 EC04                       	smpsPSGAlterVol     $04
000878E9 E701                       	dc.b	smpsNoAttack, $01
000878EB EC07                       	smpsPSGAlterVol     $07
000878ED E104                       	smpsAlterNote       $04
000878EF 8001                       	dc.b	nRst, $01
000878F1 E100                       	smpsAlterNote       $00
000878F3 01                         	dc.b	$01
000878F4 E1FD                       	smpsAlterNote       $FD
000878F6 01                         	dc.b	$01
000878F7 E1F9                       	smpsAlterNote       $F9
000878F9 01                         	dc.b	$01
000878FA E1FD                       	smpsAlterNote       $FD
000878FC 01                         	dc.b	$01
000878FD E103                       	smpsAlterNote       $03
000878FF 01                         	dc.b	$01
00087900 E104                       	smpsAlterNote       $04
00087902 01                         	dc.b	$01
00087903 E1FD                       	smpsAlterNote       $FD
00087905 ECF5                       	smpsPSGAlterVol     $F5
00087907 9106                       	dc.b	nE1, $06
00087909 EC04                       	smpsPSGAlterVol     $04
0008790B E701                       	dc.b	smpsNoAttack, $01
0008790D EC07                       	smpsPSGAlterVol     $07
0008790F 8003                       	dc.b	nRst, $03
00087911 ECF5                       	smpsPSGAlterVol     $F5
00087913 9106                       	dc.b	nE1, $06
00087915 EC04                       	smpsPSGAlterVol     $04
00087917 E701                       	dc.b	smpsNoAttack, $01
00087919 EC07                       	smpsPSGAlterVol     $07
0008791B 8006                       	dc.b	nRst, $06
0008791D E100                       	smpsAlterNote       $00
0008791F 01                         	dc.b	$01
00087920 E104                       	smpsAlterNote       $04
00087922 01                         	dc.b	$01
00087923 E100                       	smpsAlterNote       $00
00087925 01                         	dc.b	$01
00087926 E1FA                       	smpsAlterNote       $FA
00087928 01                         	dc.b	$01
00087929 E1FD                       	smpsAlterNote       $FD
0008792B ECF5                       	smpsPSGAlterVol     $F5
0008792D 9206                       	dc.b	nF1, $06
0008792F EC04                       	smpsPSGAlterVol     $04
00087931 E701                       	dc.b	smpsNoAttack, $01
00087933 EC07                       	smpsPSGAlterVol     $07
00087935 8003                       	dc.b	nRst, $03
00087937 ECF5                       	smpsPSGAlterVol     $F5
00087939 9207                       	dc.b	nF1, $07
0008793B EC0B                       	smpsPSGAlterVol     $0B
0008793D 8006                       	dc.b	nRst, $06
0008793F E100                       	smpsAlterNote       $00
00087941 01                         	dc.b	$01
00087942 E103                       	smpsAlterNote       $03
00087944 0101                       	dc.b	$01, $01
00087946 E1FD                       	smpsAlterNote       $FD
00087948 01                         	dc.b	$01
00087949 ECF5                       	smpsPSGAlterVol     $F5
0008794B 9107                       	dc.b	nE1, $07
0008794D EC0B                       	smpsPSGAlterVol     $0B
0008794F 8004                       	dc.b	nRst, $04
00087951 ECF5                       	smpsPSGAlterVol     $F5
00087953 9106                       	dc.b	nE1, $06
00087955 EC04                       	smpsPSGAlterVol     $04
00087957 E701                       	dc.b	smpsNoAttack, $01
00087959 EC07                       	smpsPSGAlterVol     $07
0008795B 8006                       	dc.b	nRst, $06
0008795D E103                       	smpsAlterNote       $03
0008795F 01                         	dc.b	$01
00087960 E104                       	smpsAlterNote       $04
00087962 01                         	dc.b	$01
00087963 E100                       	smpsAlterNote       $00
00087965 01                         	dc.b	$01
00087966 E1FA                       	smpsAlterNote       $FA
00087968 01                         	dc.b	$01
00087969 E1FD                       	smpsAlterNote       $FD
0008796B ECF5                       	smpsPSGAlterVol     $F5
0008796D 9106                       	dc.b	nE1, $06
0008796F EC04                       	smpsPSGAlterVol     $04
00087971 E701                       	dc.b	smpsNoAttack, $01
00087973 EC07                       	smpsPSGAlterVol     $07
00087975 8003                       	dc.b	nRst, $03
00087977 ECF5                       	smpsPSGAlterVol     $F5
00087979 9106                       	dc.b	nE1, $06
0008797B EC04                       	smpsPSGAlterVol     $04
0008797D E701                       	dc.b	smpsNoAttack, $01
0008797F EC07                       	smpsPSGAlterVol     $07
00087981 8003                       	dc.b	nRst, $03
00087983 ECF5                       	smpsPSGAlterVol     $F5
00087985 9207                       	dc.b	nF1, $07
00087987 EC0B                       	smpsPSGAlterVol     $0B
00087989 8006                       	dc.b	nRst, $06
0008798B E100                       	smpsAlterNote       $00
0008798D 01                         	dc.b	$01
0008798E E103                       	smpsAlterNote       $03
00087990 0101                       	dc.b	$01, $01
00087992 E1FD                       	smpsAlterNote       $FD
00087994 01                         	dc.b	$01
00087995 E1F9                       	smpsAlterNote       $F9
00087997 01                         	dc.b	$01
00087998 E1FA                       	smpsAlterNote       $FA
0008799A 01                         	dc.b	$01
0008799B E100                       	smpsAlterNote       $00
0008799D 01                         	dc.b	$01
0008799E E104                       	smpsAlterNote       $04
000879A0 01                         	dc.b	$01
000879A1 E1FD                       	smpsAlterNote       $FD
000879A3 ECF5                       	smpsPSGAlterVol     $F5
000879A5 9203 9203                  	dc.b	nF1, $03, nF1, $03
000879A9 EC04                       	smpsPSGAlterVol     $04
000879AB E701                       	dc.b	smpsNoAttack, $01
000879AD EC07                       	smpsPSGAlterVol     $07
000879AF 8009                       	dc.b	nRst, $09
000879B1 E100                       	smpsAlterNote       $00
000879B3 01                         	dc.b	$01
000879B4 E103                       	smpsAlterNote       $03
000879B6 0101                       	dc.b	$01, $01
000879B8 E1FD                       	smpsAlterNote       $FD
000879BA 01                         	dc.b	$01
000879BB E1F9                       	smpsAlterNote       $F9
000879BD 01                         	dc.b	$01
000879BE E1FA                       	smpsAlterNote       $FA
000879C0 01                         	dc.b	$01
000879C1 E100                       	smpsAlterNote       $00
000879C3 01                         	dc.b	$01
000879C4 E104                       	smpsAlterNote       $04
000879C6 01                         	dc.b	$01
000879C7 E100                       	smpsAlterNote       $00
000879C9 01                         	dc.b	$01
000879CA E1FD                       	smpsAlterNote       $FD
000879CC 01                         	dc.b	$01
000879CD E1F9                       	smpsAlterNote       $F9
000879CF 01                         	dc.b	$01
000879D0 E1FD                       	smpsAlterNote       $FD
000879D2 01                         	dc.b	$01
000879D3 E103                       	smpsAlterNote       $03
000879D5 01                         	dc.b	$01
000879D6 E104                       	smpsAlterNote       $04
000879D8 01                         	dc.b	$01
000879D9 E100                       	smpsAlterNote       $00
000879DB 01                         	dc.b	$01
000879DC E1FD                       	smpsAlterNote       $FD
000879DE ECF5                       	smpsPSGAlterVol     $F5
000879E0 9203 9106                  	dc.b	nF1, $03, nE1, $06
000879E4 EC04                       	smpsPSGAlterVol     $04
000879E6 E701                       	dc.b	smpsNoAttack, $01
000879E8 EC07                       	smpsPSGAlterVol     $07
000879EA 8006                       	dc.b	nRst, $06
000879EC E100                       	smpsAlterNote       $00
000879EE 01                         	dc.b	$01
000879EF E104                       	smpsAlterNote       $04
000879F1 01                         	dc.b	$01
000879F2 E103                       	smpsAlterNote       $03
000879F4 01                         	dc.b	$01
000879F5 E1FD                       	smpsAlterNote       $FD
000879F7 01                         	dc.b	$01
000879F8 E1F9                       	smpsAlterNote       $F9
000879FA 01                         	dc.b	$01
000879FB E1FD                       	smpsAlterNote       $FD
000879FD 01                         	dc.b	$01
000879FE E100                       	smpsAlterNote       $00
00087A00 01                         	dc.b	$01
00087A01 E104                       	smpsAlterNote       $04
00087A03 01                         	dc.b	$01
00087A04 E1FD                       	smpsAlterNote       $FD
00087A06 ECF5                       	smpsPSGAlterVol     $F5
00087A08 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00087A0C E100                       	smpsAlterNote       $00
00087A0E E701                       	dc.b	smpsNoAttack, $01
00087A10 E104                       	smpsAlterNote       $04
00087A12 E701                       	dc.b	smpsNoAttack, $01
00087A14 E100                       	smpsAlterNote       $00
00087A16 E701                       	dc.b	smpsNoAttack, $01
00087A18 E1FD                       	smpsAlterNote       $FD
00087A1A E701                       	dc.b	smpsNoAttack, $01
00087A1C E1F9                       	smpsAlterNote       $F9
00087A1E E701                       	dc.b	smpsNoAttack, $01
00087A20 E1FD                       	smpsAlterNote       $FD
00087A22 E701                       	dc.b	smpsNoAttack, $01
00087A24 E103                       	smpsAlterNote       $03
00087A26 E701                       	dc.b	smpsNoAttack, $01
00087A28 E104                       	smpsAlterNote       $04
00087A2A E701                       	dc.b	smpsNoAttack, $01
00087A2C E100                       	smpsAlterNote       $00
00087A2E E701                       	dc.b	smpsNoAttack, $01
00087A30 E1FA                       	smpsAlterNote       $FA
00087A32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A36 E1FD                       	smpsAlterNote       $FD
00087A38 E701                       	dc.b	smpsNoAttack, $01
00087A3A E103                       	smpsAlterNote       $03
00087A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A40 E100                       	smpsAlterNote       $00
00087A42 E701                       	dc.b	smpsNoAttack, $01
00087A44 E1FA                       	smpsAlterNote       $FA
00087A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A4A E100                       	smpsAlterNote       $00
00087A4C EC04                       	smpsPSGAlterVol     $04
00087A4E E701                       	dc.b	smpsNoAttack, $01
00087A50 EC07                       	smpsPSGAlterVol     $07
00087A52 E104                       	smpsAlterNote       $04
00087A54 8001                       	dc.b	nRst, $01
00087A56 E103                       	smpsAlterNote       $03
00087A58 01                         	dc.b	$01
00087A59 E1FD                       	smpsAlterNote       $FD
00087A5B 01                         	dc.b	$01
00087A5C E1F9                       	smpsAlterNote       $F9
00087A5E 01                         	dc.b	$01
00087A5F E1FD                       	smpsAlterNote       $FD
00087A61 01                         	dc.b	$01
00087A62 E100                       	smpsAlterNote       $00
00087A64 01                         	dc.b	$01
00087A65 E104                       	smpsAlterNote       $04
00087A67 01                         	dc.b	$01
00087A68 E1FD                       	smpsAlterNote       $FD
00087A6A ECF5                       	smpsPSGAlterVol     $F5
00087A6C 9106                       	dc.b	nE1, $06
00087A6E EC04                       	smpsPSGAlterVol     $04
00087A70 E701                       	dc.b	smpsNoAttack, $01
00087A72 EC07                       	smpsPSGAlterVol     $07
00087A74 8003                       	dc.b	nRst, $03
00087A76 ECF5                       	smpsPSGAlterVol     $F5
00087A78 9106                       	dc.b	nE1, $06
00087A7A EC04                       	smpsPSGAlterVol     $04
00087A7C E701                       	dc.b	smpsNoAttack, $01
00087A7E EC07                       	smpsPSGAlterVol     $07
00087A80 8006                       	dc.b	nRst, $06
00087A82 E100                       	smpsAlterNote       $00
00087A84 01                         	dc.b	$01
00087A85 E104                       	smpsAlterNote       $04
00087A87 01                         	dc.b	$01
00087A88 E100                       	smpsAlterNote       $00
00087A8A 01                         	dc.b	$01
00087A8B E1FD                       	smpsAlterNote       $FD
00087A8D 01                         	dc.b	$01
00087A8E ECF5                       	smpsPSGAlterVol     $F5
00087A90 9206                       	dc.b	nF1, $06
00087A92 EC04                       	smpsPSGAlterVol     $04
00087A94 E701                       	dc.b	smpsNoAttack, $01
00087A96 EC07                       	smpsPSGAlterVol     $07
00087A98 8003                       	dc.b	nRst, $03
00087A9A ECF5                       	smpsPSGAlterVol     $F5
00087A9C 9207                       	dc.b	nF1, $07
00087A9E EC0B                       	smpsPSGAlterVol     $0B
00087AA0 8007                       	dc.b	nRst, $07
00087AA2 E103                       	smpsAlterNote       $03
00087AA4 0101                       	dc.b	$01, $01
00087AA6 E1FD                       	smpsAlterNote       $FD
00087AA8 01                         	dc.b	$01
00087AA9 E1FA                       	smpsAlterNote       $FA
00087AAB 01                         	dc.b	$01
00087AAC E1FD                       	smpsAlterNote       $FD
00087AAE ECF5                       	smpsPSGAlterVol     $F5
00087AB0 9106                       	dc.b	nE1, $06
00087AB2 EC0B                       	smpsPSGAlterVol     $0B
00087AB4 8004                       	dc.b	nRst, $04
00087AB6 ECF5                       	smpsPSGAlterVol     $F5
00087AB8 9106                       	dc.b	nE1, $06
00087ABA EC04                       	smpsPSGAlterVol     $04
00087ABC E701                       	dc.b	smpsNoAttack, $01
00087ABE EC07                       	smpsPSGAlterVol     $07
00087AC0 8006                       	dc.b	nRst, $06
00087AC2 E100                       	smpsAlterNote       $00
00087AC4 01                         	dc.b	$01
00087AC5 E104                       	smpsAlterNote       $04
00087AC7 01                         	dc.b	$01
00087AC8 E100                       	smpsAlterNote       $00
00087ACA 01                         	dc.b	$01
00087ACB E1FA                       	smpsAlterNote       $FA
00087ACD 01                         	dc.b	$01
00087ACE E1FD                       	smpsAlterNote       $FD
00087AD0 ECF5                       	smpsPSGAlterVol     $F5
00087AD2 9206                       	dc.b	nF1, $06
00087AD4 EC04                       	smpsPSGAlterVol     $04
00087AD6 E701                       	dc.b	smpsNoAttack, $01
00087AD8 EC07                       	smpsPSGAlterVol     $07
00087ADA 8003                       	dc.b	nRst, $03
00087ADC ECF5                       	smpsPSGAlterVol     $F5
00087ADE 9206                       	dc.b	nF1, $06
00087AE0 EC04                       	smpsPSGAlterVol     $04
00087AE2 E701                       	dc.b	smpsNoAttack, $01
00087AE4 EC07                       	smpsPSGAlterVol     $07
00087AE6 8006                       	dc.b	nRst, $06
00087AE8 E100                       	smpsAlterNote       $00
00087AEA 01                         	dc.b	$01
00087AEB E104                       	smpsAlterNote       $04
00087AED 01                         	dc.b	$01
00087AEE E103                       	smpsAlterNote       $03
00087AF0 01                         	dc.b	$01
00087AF1 E1FD                       	smpsAlterNote       $FD
00087AF3 01                         	dc.b	$01
00087AF4 ECF5                       	smpsPSGAlterVol     $F5
00087AF6 9107                       	dc.b	nE1, $07
00087AF8 EC0B                       	smpsPSGAlterVol     $0B
00087AFA 8004                       	dc.b	nRst, $04
00087AFC ECF5                       	smpsPSGAlterVol     $F5
00087AFE 9106                       	dc.b	nE1, $06
00087B00 EC0B                       	smpsPSGAlterVol     $0B
00087B02 8007                       	dc.b	nRst, $07
00087B04 E103                       	smpsAlterNote       $03
00087B06 0101                       	dc.b	$01, $01
00087B08 E100                       	smpsAlterNote       $00
00087B0A 01                         	dc.b	$01
00087B0B E1FA                       	smpsAlterNote       $FA
00087B0D 01                         	dc.b	$01
00087B0E E1FD                       	smpsAlterNote       $FD
00087B10 ECF5                       	smpsPSGAlterVol     $F5
00087B12 9206                       	dc.b	nF1, $06
00087B14 EC04                       	smpsPSGAlterVol     $04
00087B16 E701                       	dc.b	smpsNoAttack, $01
00087B18 EC07                       	smpsPSGAlterVol     $07
00087B1A 8003                       	dc.b	nRst, $03
00087B1C ECF5                       	smpsPSGAlterVol     $F5
00087B1E 9206                       	dc.b	nF1, $06
00087B20 EC04                       	smpsPSGAlterVol     $04
00087B22 E701                       	dc.b	smpsNoAttack, $01
00087B24 EC07                       	smpsPSGAlterVol     $07
00087B26 8006                       	dc.b	nRst, $06
00087B28 E100                       	smpsAlterNote       $00
00087B2A 01                         	dc.b	$01
00087B2B E104                       	smpsAlterNote       $04
00087B2D 01                         	dc.b	$01
00087B2E E100                       	smpsAlterNote       $00
00087B30 01                         	dc.b	$01
00087B31 E1FD                       	smpsAlterNote       $FD
00087B33 01                         	dc.b	$01
00087B34 ECF5                       	smpsPSGAlterVol     $F5
00087B36 9106                       	dc.b	nE1, $06
00087B38 EC04                       	smpsPSGAlterVol     $04
00087B3A E701                       	dc.b	smpsNoAttack, $01
00087B3C EC07                       	smpsPSGAlterVol     $07
00087B3E 8003                       	dc.b	nRst, $03
00087B40 ECF5                       	smpsPSGAlterVol     $F5
00087B42 9107 9106                  	dc.b	nE1, $07, nE1, $06
00087B46 EC04                       	smpsPSGAlterVol     $04
00087B48 E701                       	dc.b	smpsNoAttack, $01
00087B4A ECFC                       	smpsPSGAlterVol     $FC
00087B4C 9103                       	dc.b	nE1, $03
00087B4E EC04                       	smpsPSGAlterVol     $04
00087B50 E701                       	dc.b	smpsNoAttack, $01
00087B52 ECFC                       	smpsPSGAlterVol     $FC
00087B54 9102                       	dc.b	nE1, $02
00087B56 EC04                       	smpsPSGAlterVol     $04
00087B58 E701                       	dc.b	smpsNoAttack, $01
00087B5A ECFC                       	smpsPSGAlterVol     $FC
00087B5C 9103                       	dc.b	nE1, $03
00087B5E EC0B                       	smpsPSGAlterVol     $0B
00087B60 800A                       	dc.b	nRst, $0A
00087B62 E100                       	smpsAlterNote       $00
00087B64 01                         	dc.b	$01
00087B65 E104                       	smpsAlterNote       $04
00087B67 01                         	dc.b	$01
00087B68 E100                       	smpsAlterNote       $00
00087B6A 01                         	dc.b	$01
00087B6B E1FA                       	smpsAlterNote       $FA
00087B6D 01                         	dc.b	$01
00087B6E E1F9                       	smpsAlterNote       $F9
00087B70 01                         	dc.b	$01
00087B71 E1FD                       	smpsAlterNote       $FD
00087B73 01                         	dc.b	$01
00087B74 E103                       	smpsAlterNote       $03
00087B76 0101                       	dc.b	$01, $01
00087B78 E100                       	smpsAlterNote       $00
00087B7A 01                         	dc.b	$01
00087B7B E1FA                       	smpsAlterNote       $FA
00087B7D 0101                       	dc.b	$01, $01
00087B7F E1FD                       	smpsAlterNote       $FD
00087B81 ECF5                       	smpsPSGAlterVol     $F5
00087B83 9206                       	dc.b	nF1, $06
00087B85 EC04                       	smpsPSGAlterVol     $04
00087B87 E704                       	dc.b	smpsNoAttack, $04
00087B89 ECFC                       	smpsPSGAlterVol     $FC
00087B8B 9206                       	dc.b	nF1, $06
00087B8D EC04                       	smpsPSGAlterVol     $04
00087B8F E701                       	dc.b	smpsNoAttack, $01
00087B91 EC07                       	smpsPSGAlterVol     $07
00087B93 8006                       	dc.b	nRst, $06
00087B95 E100                       	smpsAlterNote       $00
00087B97 01                         	dc.b	$01
00087B98 E104                       	smpsAlterNote       $04
00087B9A 01                         	dc.b	$01
00087B9B E103                       	smpsAlterNote       $03
00087B9D 01                         	dc.b	$01
00087B9E E1FD                       	smpsAlterNote       $FD
00087BA0 01                         	dc.b	$01
00087BA1 ECF5                       	smpsPSGAlterVol     $F5
00087BA3 9407                       	dc.b	nG1, $07
00087BA5 EC0B                       	smpsPSGAlterVol     $0B
00087BA7 8004                       	dc.b	nRst, $04
00087BA9 ECF5                       	smpsPSGAlterVol     $F5
00087BAB 9406                       	dc.b	nG1, $06
00087BAD EC0B                       	smpsPSGAlterVol     $0B
00087BAF 8007                       	dc.b	nRst, $07
00087BB1 E103                       	smpsAlterNote       $03
00087BB3 0101                       	dc.b	$01, $01
00087BB5 E1FD                       	smpsAlterNote       $FD
00087BB7 01                         	dc.b	$01
00087BB8 E1F9                       	smpsAlterNote       $F9
00087BBA 01                         	dc.b	$01
00087BBB E1FD                       	smpsAlterNote       $FD
00087BBD ECF5                       	smpsPSGAlterVol     $F5
00087BBF 9206                       	dc.b	nF1, $06
00087BC1 EC04                       	smpsPSGAlterVol     $04
00087BC3 E701                       	dc.b	smpsNoAttack, $01
00087BC5 EC07                       	smpsPSGAlterVol     $07
00087BC7 8003                       	dc.b	nRst, $03
00087BC9 ECF5                       	smpsPSGAlterVol     $F5
00087BCB 9206                       	dc.b	nF1, $06
00087BCD EC04                       	smpsPSGAlterVol     $04
00087BCF E701                       	dc.b	smpsNoAttack, $01
00087BD1 EC07                       	smpsPSGAlterVol     $07
00087BD3 8006                       	dc.b	nRst, $06
00087BD5 E100                       	smpsAlterNote       $00
00087BD7 01                         	dc.b	$01
00087BD8 E104                       	smpsAlterNote       $04
00087BDA 01                         	dc.b	$01
00087BDB E100                       	smpsAlterNote       $00
00087BDD 01                         	dc.b	$01
00087BDE E1FA                       	smpsAlterNote       $FA
00087BE0 01                         	dc.b	$01
00087BE1 E1FD                       	smpsAlterNote       $FD
00087BE3 ECF5                       	smpsPSGAlterVol     $F5
00087BE5 9206                       	dc.b	nF1, $06
00087BE7 EC04                       	smpsPSGAlterVol     $04
00087BE9 E701                       	dc.b	smpsNoAttack, $01
00087BEB EC07                       	smpsPSGAlterVol     $07
00087BED 8003                       	dc.b	nRst, $03
00087BEF ECF5                       	smpsPSGAlterVol     $F5
00087BF1 9107                       	dc.b	nE1, $07
00087BF3 EC0B                       	smpsPSGAlterVol     $0B
00087BF5 8006                       	dc.b	nRst, $06
00087BF7 E100                       	smpsAlterNote       $00
00087BF9 01                         	dc.b	$01
00087BFA E103                       	smpsAlterNote       $03
00087BFC 0101                       	dc.b	$01, $01
00087BFE E1FD                       	smpsAlterNote       $FD
00087C00 01                         	dc.b	$01
00087C01 ECF5                       	smpsPSGAlterVol     $F5
00087C03 9207                       	dc.b	nF1, $07
00087C05 EC0B                       	smpsPSGAlterVol     $0B
00087C07 8004                       	dc.b	nRst, $04
00087C09 ECF5                       	smpsPSGAlterVol     $F5
00087C0B 9206                       	dc.b	nF1, $06
00087C0D EC04                       	smpsPSGAlterVol     $04
00087C0F E701                       	dc.b	smpsNoAttack, $01
00087C11 EC07                       	smpsPSGAlterVol     $07
00087C13 8006                       	dc.b	nRst, $06
00087C15 E103                       	smpsAlterNote       $03
00087C17 01                         	dc.b	$01
00087C18 E104                       	smpsAlterNote       $04
00087C1A 01                         	dc.b	$01
00087C1B E100                       	smpsAlterNote       $00
00087C1D 01                         	dc.b	$01
00087C1E E1FB                       	smpsAlterNote       $FB
00087C20 01                         	dc.b	$01
00087C21 E1FD                       	smpsAlterNote       $FD
00087C23 ECF5                       	smpsPSGAlterVol     $F5
00087C25 9406                       	dc.b	nG1, $06
00087C27 EC04                       	smpsPSGAlterVol     $04
00087C29 E701                       	dc.b	smpsNoAttack, $01
00087C2B EC07                       	smpsPSGAlterVol     $07
00087C2D 8003                       	dc.b	nRst, $03
00087C2F ECF5                       	smpsPSGAlterVol     $F5
00087C31 9406                       	dc.b	nG1, $06
00087C33 EC04                       	smpsPSGAlterVol     $04
00087C35 E701                       	dc.b	smpsNoAttack, $01
00087C37 EC07                       	smpsPSGAlterVol     $07
00087C39 8006                       	dc.b	nRst, $06
00087C3B E100                       	smpsAlterNote       $00
00087C3D 01                         	dc.b	$01
00087C3E E104                       	smpsAlterNote       $04
00087C40 01                         	dc.b	$01
00087C41 E100                       	smpsAlterNote       $00
00087C43 01                         	dc.b	$01
00087C44 E1FD                       	smpsAlterNote       $FD
00087C46 01                         	dc.b	$01
00087C47 ECF5                       	smpsPSGAlterVol     $F5
00087C49 9206                       	dc.b	nF1, $06
00087C4B EC04                       	smpsPSGAlterVol     $04
00087C4D E701                       	dc.b	smpsNoAttack, $01
00087C4F EC07                       	smpsPSGAlterVol     $07
00087C51 8003                       	dc.b	nRst, $03
00087C53 ECF5                       	smpsPSGAlterVol     $F5
00087C55 9207                       	dc.b	nF1, $07
00087C57 EC0B                       	smpsPSGAlterVol     $0B
00087C59 8007                       	dc.b	nRst, $07
00087C5B E103                       	smpsAlterNote       $03
00087C5D 0101                       	dc.b	$01, $01
00087C5F E1FD                       	smpsAlterNote       $FD
00087C61 01                         	dc.b	$01
00087C62 E1FA                       	smpsAlterNote       $FA
00087C64 01                         	dc.b	$01
00087C65 E1FD                       	smpsAlterNote       $FD
00087C67 ECF5                       	smpsPSGAlterVol     $F5
00087C69 9206                       	dc.b	nF1, $06
00087C6B EC0B                       	smpsPSGAlterVol     $0B
00087C6D 8004                       	dc.b	nRst, $04
00087C6F ECF5                       	smpsPSGAlterVol     $F5
00087C71 9206                       	dc.b	nF1, $06
00087C73 EC04                       	smpsPSGAlterVol     $04
00087C75 E701                       	dc.b	smpsNoAttack, $01
00087C77 EC07                       	smpsPSGAlterVol     $07
00087C79 8006                       	dc.b	nRst, $06
00087C7B E100                       	smpsAlterNote       $00
00087C7D 01                         	dc.b	$01
00087C7E E104                       	smpsAlterNote       $04
00087C80 01                         	dc.b	$01
00087C81 E100                       	smpsAlterNote       $00
00087C83 01                         	dc.b	$01
00087C84 E1FA                       	smpsAlterNote       $FA
00087C86 01                         	dc.b	$01
00087C87 E1FD                       	smpsAlterNote       $FD
00087C89 ECF5                       	smpsPSGAlterVol     $F5
00087C8B 9206                       	dc.b	nF1, $06
00087C8D EC04                       	smpsPSGAlterVol     $04
00087C8F E701                       	dc.b	smpsNoAttack, $01
00087C91 EC07                       	smpsPSGAlterVol     $07
00087C93 8003                       	dc.b	nRst, $03
00087C95 ECF5                       	smpsPSGAlterVol     $F5
00087C97 9207                       	dc.b	nF1, $07
00087C99 EC0B                       	smpsPSGAlterVol     $0B
00087C9B 8006                       	dc.b	nRst, $06
00087C9D E100                       	smpsAlterNote       $00
00087C9F 01                         	dc.b	$01
00087CA0 E103                       	smpsAlterNote       $03
00087CA2 0101                       	dc.b	$01, $01
00087CA4 E1FD                       	smpsAlterNote       $FD
00087CA6 01                         	dc.b	$01
00087CA7 ECF5                       	smpsPSGAlterVol     $F5
00087CA9 9207                       	dc.b	nF1, $07
00087CAB EC0B                       	smpsPSGAlterVol     $0B
00087CAD 8004                       	dc.b	nRst, $04
00087CAF ECF5                       	smpsPSGAlterVol     $F5
00087CB1 9206                       	dc.b	nF1, $06
00087CB3 EC0B                       	smpsPSGAlterVol     $0B
00087CB5 8007                       	dc.b	nRst, $07
00087CB7 E103                       	smpsAlterNote       $03
00087CB9 0101                       	dc.b	$01, $01
00087CBB E100                       	smpsAlterNote       $00
00087CBD 01                         	dc.b	$01
00087CBE E1FA                       	smpsAlterNote       $FA
00087CC0 01                         	dc.b	$01
00087CC1 E1FD                       	smpsAlterNote       $FD
00087CC3 ECF5                       	smpsPSGAlterVol     $F5
00087CC5 9206                       	dc.b	nF1, $06
00087CC7 EC04                       	smpsPSGAlterVol     $04
00087CC9 E701                       	dc.b	smpsNoAttack, $01
00087CCB EC07                       	smpsPSGAlterVol     $07
00087CCD 8003                       	dc.b	nRst, $03
00087CCF ECF5                       	smpsPSGAlterVol     $F5
00087CD1 9206                       	dc.b	nF1, $06
00087CD3 EC04                       	smpsPSGAlterVol     $04
00087CD5 E701                       	dc.b	smpsNoAttack, $01
00087CD7 EC07                       	smpsPSGAlterVol     $07
00087CD9 8006                       	dc.b	nRst, $06
00087CDB E100                       	smpsAlterNote       $00
00087CDD 01                         	dc.b	$01
00087CDE E104                       	smpsAlterNote       $04
00087CE0 01                         	dc.b	$01
00087CE1 E100                       	smpsAlterNote       $00
00087CE3 01                         	dc.b	$01
00087CE4 E1FD                       	smpsAlterNote       $FD
00087CE6 01                         	dc.b	$01
00087CE7 ECF5                       	smpsPSGAlterVol     $F5
00087CE9 9206                       	dc.b	nF1, $06
00087CEB EC04                       	smpsPSGAlterVol     $04
00087CED E701                       	dc.b	smpsNoAttack, $01
00087CEF EC07                       	smpsPSGAlterVol     $07
00087CF1 8003                       	dc.b	nRst, $03
00087CF3 ECF5                       	smpsPSGAlterVol     $F5
00087CF5 9207                       	dc.b	nF1, $07
00087CF7 EC0B                       	smpsPSGAlterVol     $0B
00087CF9 8007                       	dc.b	nRst, $07
00087CFB E104                       	smpsAlterNote       $04
00087CFD 0101                       	dc.b	$01, $01
00087CFF E1FB                       	smpsAlterNote       $FB
00087D01 01                         	dc.b	$01
00087D02 E1F6                       	smpsAlterNote       $F6
00087D04 0101                       	dc.b	$01, $01
00087D06 E1FF                       	smpsAlterNote       $FF
00087D08 01                         	dc.b	$01
00087D09 E105                       	smpsAlterNote       $05
00087D0B 01                         	dc.b	$01
00087D0C E104                       	smpsAlterNote       $04
00087D0E 01                         	dc.b	$01
00087D0F E1FB                       	smpsAlterNote       $FB
00087D11 01                         	dc.b	$01
00087D12 E1F5                       	smpsAlterNote       $F5
00087D14 01                         	dc.b	$01
00087D15 E1FC                       	smpsAlterNote       $FC
00087D17 ECF5                       	smpsPSGAlterVol     $F5
00087D19 8B0E                       	dc.b	nBb0, $0E
00087D1B E102                       	smpsAlterNote       $02
00087D1D EC0B                       	smpsPSGAlterVol     $0B
00087D1F 8001                       	dc.b	nRst, $01
00087D21 E101                       	smpsAlterNote       $01
00087D23 01                         	dc.b	$01
00087D24 E1FC                       	smpsAlterNote       $FC
00087D26 01                         	dc.b	$01
00087D27 E1F9                       	smpsAlterNote       $F9
00087D29 0101                       	dc.b	$01, $01
00087D2B E1FF                       	smpsAlterNote       $FF
00087D2D 01                         	dc.b	$01
00087D2E E102                       	smpsAlterNote       $02
00087D30 01                         	dc.b	$01
00087D31 E1FF                       	smpsAlterNote       $FF
00087D33 01                         	dc.b	$01
00087D34 E1FC                       	smpsAlterNote       $FC
00087D36 01                         	dc.b	$01
00087D37 E1F8                       	smpsAlterNote       $F8
00087D39 01                         	dc.b	$01
00087D3A E1FC                       	smpsAlterNote       $FC
00087D3C 01                         	dc.b	$01
00087D3D E101                       	smpsAlterNote       $01
00087D3F 01                         	dc.b	$01
00087D40 E102                       	smpsAlterNote       $02
00087D42 01                         	dc.b	$01
00087D43 E1FF                       	smpsAlterNote       $FF
00087D45 01                         	dc.b	$01
00087D46 E1FB                       	smpsAlterNote       $FB
00087D48 ECF5                       	smpsPSGAlterVol     $F5
00087D4A 8D0D                       	dc.b	nC1, $0D
00087D4C E101                       	smpsAlterNote       $01
00087D4E EC0B                       	smpsPSGAlterVol     $0B
00087D50 8001                       	dc.b	nRst, $01
00087D52 E102                       	smpsAlterNote       $02
00087D54 01                         	dc.b	$01
00087D55 E1FF                       	smpsAlterNote       $FF
00087D57 01                         	dc.b	$01
00087D58 E1F9                       	smpsAlterNote       $F9
00087D5A 0101                       	dc.b	$01, $01
00087D5C E1FC                       	smpsAlterNote       $FC
00087D5E 01                         	dc.b	$01
00087D5F E101                       	smpsAlterNote       $01
00087D61 0101                       	dc.b	$01, $01
00087D63 E1FC                       	smpsAlterNote       $FC
00087D65 01                         	dc.b	$01
00087D66 E1F9                       	smpsAlterNote       $F9
00087D68 0101                       	dc.b	$01, $01
00087D6A E1FF                       	smpsAlterNote       $FF
00087D6C 01                         	dc.b	$01
00087D6D E102                       	smpsAlterNote       $02
00087D6F 01                         	dc.b	$01
00087D70 E101                       	smpsAlterNote       $01
00087D72 01                         	dc.b	$01
00087D73 E1FC                       	smpsAlterNote       $FC
00087D75 ECF5                       	smpsPSGAlterVol     $F5
00087D77 8F0D                       	dc.b	nD1, $0D
00087D79 E1FF                       	smpsAlterNote       $FF
00087D7B EC04                       	smpsPSGAlterVol     $04
00087D7D E701                       	dc.b	smpsNoAttack, $01
00087D7F EC07                       	smpsPSGAlterVol     $07
00087D81 E103                       	smpsAlterNote       $03
00087D83 8001                       	dc.b	nRst, $01
00087D85 E102                       	smpsAlterNote       $02
00087D87 01                         	dc.b	$01
00087D88 E1FD                       	smpsAlterNote       $FD
00087D8A 01                         	dc.b	$01
00087D8B E1F9                       	smpsAlterNote       $F9
00087D8D 01                         	dc.b	$01
00087D8E E1FD                       	smpsAlterNote       $FD
00087D90 01                         	dc.b	$01
00087D91 E100                       	smpsAlterNote       $00
00087D93 01                         	dc.b	$01
00087D94 E103                       	smpsAlterNote       $03
00087D96 01                         	dc.b	$01
00087D97 E100                       	smpsAlterNote       $00
00087D99 01                         	dc.b	$01
00087D9A E1FA                       	smpsAlterNote       $FA
00087D9C 01                         	dc.b	$01
00087D9D E1F9                       	smpsAlterNote       $F9
00087D9F 01                         	dc.b	$01
00087DA0 E1FD                       	smpsAlterNote       $FD
00087DA2 01                         	dc.b	$01
00087DA3 E102                       	smpsAlterNote       $02
00087DA5 0101                       	dc.b	$01, $01
00087DA7 E100                       	smpsAlterNote       $00
00087DA9 01                         	dc.b	$01
00087DAA E1FD                       	smpsAlterNote       $FD
00087DAC ECF5                       	smpsPSGAlterVol     $F5
00087DAE 910D                       	dc.b	nE1, $0D
00087DB0 E103                       	smpsAlterNote       $03
00087DB2 EC0B                       	smpsPSGAlterVol     $0B
00087DB4 8001 01                    	dc.b	nRst, $01, $01
00087DB7 E100                       	smpsAlterNote       $00
00087DB9 01                         	dc.b	$01
00087DBA E1FA                       	smpsAlterNote       $FA
00087DBC 0101                       	dc.b	$01, $01
00087DBE E100                       	smpsAlterNote       $00
00087DC0 01                         	dc.b	$01
00087DC1 E103                       	smpsAlterNote       $03
00087DC3 01                         	dc.b	$01
00087DC4 E1FD                       	smpsAlterNote       $FD
00087DC6 ECF5                       	smpsPSGAlterVol     $F5
00087DC8 9206                       	dc.b	nF1, $06
00087DCA EC04                       	smpsPSGAlterVol     $04
00087DCC E701                       	dc.b	smpsNoAttack, $01
00087DCE EC07                       	smpsPSGAlterVol     $07
00087DD0 8003                       	dc.b	nRst, $03
00087DD2 ECF5                       	smpsPSGAlterVol     $F5
00087DD4 9207                       	dc.b	nF1, $07
00087DD6 EC0B                       	smpsPSGAlterVol     $0B
00087DD8 8006                       	dc.b	nRst, $06
00087DDA E100                       	smpsAlterNote       $00
00087DDC 01                         	dc.b	$01
00087DDD E103                       	smpsAlterNote       $03
00087DDF 0101                       	dc.b	$01, $01
00087DE1 E1FD                       	smpsAlterNote       $FD
00087DE3 01                         	dc.b	$01
00087DE4 ECF5                       	smpsPSGAlterVol     $F5
00087DE6 9407                       	dc.b	nG1, $07
00087DE8 EC0B                       	smpsPSGAlterVol     $0B
00087DEA 8004                       	dc.b	nRst, $04
00087DEC ECF5                       	smpsPSGAlterVol     $F5
00087DEE 9406                       	dc.b	nG1, $06
00087DF0 EC04                       	smpsPSGAlterVol     $04
00087DF2 E701                       	dc.b	smpsNoAttack, $01
00087DF4 EC07                       	smpsPSGAlterVol     $07
00087DF6 8006                       	dc.b	nRst, $06
00087DF8 E103                       	smpsAlterNote       $03
00087DFA 01                         	dc.b	$01
00087DFB E104                       	smpsAlterNote       $04
00087DFD 01                         	dc.b	$01
00087DFE E100                       	smpsAlterNote       $00
00087E00 01                         	dc.b	$01
00087E01 E1F9                       	smpsAlterNote       $F9
00087E03 01                         	dc.b	$01
00087E04 E1FD                       	smpsAlterNote       $FD
00087E06 ECF5                       	smpsPSGAlterVol     $F5
00087E08 9206                       	dc.b	nF1, $06
00087E0A EC04                       	smpsPSGAlterVol     $04
00087E0C E701                       	dc.b	smpsNoAttack, $01
00087E0E EC07                       	smpsPSGAlterVol     $07
00087E10 8003                       	dc.b	nRst, $03
00087E12 ECF5                       	smpsPSGAlterVol     $F5
00087E14 9206                       	dc.b	nF1, $06
00087E16 EC04                       	smpsPSGAlterVol     $04
00087E18 E701                       	dc.b	smpsNoAttack, $01
00087E1A EC07                       	smpsPSGAlterVol     $07
00087E1C 8006                       	dc.b	nRst, $06
00087E1E E100                       	smpsAlterNote       $00
00087E20 01                         	dc.b	$01
00087E21 E104                       	smpsAlterNote       $04
00087E23 01                         	dc.b	$01
00087E24 E103                       	smpsAlterNote       $03
00087E26 01                         	dc.b	$01
00087E27 E1FD                       	smpsAlterNote       $FD
00087E29 01                         	dc.b	$01
00087E2A ECF5                       	smpsPSGAlterVol     $F5
00087E2C 9407                       	dc.b	nG1, $07
00087E2E EC0B                       	smpsPSGAlterVol     $0B
00087E30 8004                       	dc.b	nRst, $04
00087E32 ECF5                       	smpsPSGAlterVol     $F5
00087E34 9406                       	dc.b	nG1, $06
00087E36 EC0B                       	smpsPSGAlterVol     $0B
00087E38 8007                       	dc.b	nRst, $07
00087E3A E103                       	smpsAlterNote       $03
00087E3C 0101                       	dc.b	$01, $01
00087E3E E100                       	smpsAlterNote       $00
00087E40 01                         	dc.b	$01
00087E41 E1F9                       	smpsAlterNote       $F9
00087E43 01                         	dc.b	$01
00087E44 E1FD                       	smpsAlterNote       $FD
00087E46 ECF5                       	smpsPSGAlterVol     $F5
00087E48 9206                       	dc.b	nF1, $06
00087E4A EC04                       	smpsPSGAlterVol     $04
00087E4C E701                       	dc.b	smpsNoAttack, $01
00087E4E EC07                       	smpsPSGAlterVol     $07
00087E50 8003                       	dc.b	nRst, $03
00087E52 ECF5                       	smpsPSGAlterVol     $F5
00087E54 9206                       	dc.b	nF1, $06
00087E56 EC04                       	smpsPSGAlterVol     $04
00087E58 E701                       	dc.b	smpsNoAttack, $01
00087E5A EC07                       	smpsPSGAlterVol     $07
00087E5C 8006                       	dc.b	nRst, $06
00087E5E E100                       	smpsAlterNote       $00
00087E60 01                         	dc.b	$01
00087E61 E104                       	smpsAlterNote       $04
00087E63 01                         	dc.b	$01
00087E64 E100                       	smpsAlterNote       $00
00087E66 01                         	dc.b	$01
00087E67 E1FB                       	smpsAlterNote       $FB
00087E69 01                         	dc.b	$01
00087E6A E1FD                       	smpsAlterNote       $FD
00087E6C ECF5                       	smpsPSGAlterVol     $F5
00087E6E 9406                       	dc.b	nG1, $06
00087E70 EC04                       	smpsPSGAlterVol     $04
00087E72 E701                       	dc.b	smpsNoAttack, $01
00087E74 EC07                       	smpsPSGAlterVol     $07
00087E76 8003                       	dc.b	nRst, $03
00087E78 ECF5                       	smpsPSGAlterVol     $F5
00087E7A 9407                       	dc.b	nG1, $07
00087E7C EC0B                       	smpsPSGAlterVol     $0B
00087E7E 8006                       	dc.b	nRst, $06
00087E80 E100                       	smpsAlterNote       $00
00087E82 01                         	dc.b	$01
00087E83 E103                       	smpsAlterNote       $03
00087E85 0101                       	dc.b	$01, $01
00087E87 E1FD                       	smpsAlterNote       $FD
00087E89 01                         	dc.b	$01
00087E8A ECF5                       	smpsPSGAlterVol     $F5
00087E8C 9207                       	dc.b	nF1, $07
00087E8E EC0B                       	smpsPSGAlterVol     $0B
00087E90 8004                       	dc.b	nRst, $04
00087E92 ECF5                       	smpsPSGAlterVol     $F5
00087E94 9206                       	dc.b	nF1, $06
00087E96 EC04                       	smpsPSGAlterVol     $04
00087E98 E701                       	dc.b	smpsNoAttack, $01
00087E9A ECFC                       	smpsPSGAlterVol     $FC
00087E9C E1FC                       	smpsAlterNote       $FC
00087E9E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00087EA2 EC04                       	smpsPSGAlterVol     $04
00087EA4 E701                       	dc.b	smpsNoAttack, $01
00087EA6 ECFC                       	smpsPSGAlterVol     $FC
00087EA8 9003                       	dc.b	nEb1, $03
00087EAA E1FD                       	smpsAlterNote       $FD
00087EAC 9403                       	dc.b	nG1, $03
00087EAE EC04                       	smpsPSGAlterVol     $04
00087EB0 E701                       	dc.b	smpsNoAttack, $01
00087EB2 E1FE                       	smpsAlterNote       $FE
00087EB4 ECFC                       	smpsPSGAlterVol     $FC
00087EB6 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00087EBA EC04                       	smpsPSGAlterVol     $04
00087EBC E701                       	dc.b	smpsNoAttack, $01
00087EBE EC07                       	smpsPSGAlterVol     $07
00087EC0 8009                       	dc.b	nRst, $09
00087EC2 E100                       	smpsAlterNote       $00
00087EC4 01                         	dc.b	$01
00087EC5 F6F5 19                    	smpsJump            music84_Jump07
00087EC8                            
00087EC8                            ; PSG2 Data
00087EC8                            music84_PSG2:
00087EC8 E1FC                       	smpsAlterNote       $FC
00087ECA EC04                       	smpsPSGAlterVol     $04
00087ECC 8F03                       	dc.b	nD1, $03
00087ECE E1FD                       	smpsAlterNote       $FD
00087ED0 9203                       	dc.b	nF1, $03
00087ED2 EC04                       	smpsPSGAlterVol     $04
00087ED4 E701                       	dc.b	smpsNoAttack, $01
00087ED6 E1FE                       	smpsAlterNote       $FE
00087ED8 ECFC                       	smpsPSGAlterVol     $FC
00087EDA 9603                       	dc.b	nA1, $03
00087EDC E1FD                       	smpsAlterNote       $FD
00087EDE 9103                       	dc.b	nE1, $03
00087EE0 EC04                       	smpsPSGAlterVol     $04
00087EE2 E701                       	dc.b	smpsNoAttack, $01
00087EE4 ECFC                       	smpsPSGAlterVol     $FC
00087EE6 9403                       	dc.b	nG1, $03
00087EE8 E1FE                       	smpsAlterNote       $FE
00087EEA 9703                       	dc.b	nBb1, $03
00087EEC EC04                       	smpsPSGAlterVol     $04
00087EEE E701                       	dc.b	smpsNoAttack, $01
00087EF0 E1FF                       	smpsAlterNote       $FF
00087EF2 ECFC                       	smpsPSGAlterVol     $FC
00087EF4 9B02                       	dc.b	nD2, $02
00087EF6 EC04                       	smpsPSGAlterVol     $04
00087EF8 E701                       	dc.b	smpsNoAttack, $01
00087EFA ECFC                       	smpsPSGAlterVol     $FC
00087EFC E1FE                       	smpsAlterNote       $FE
00087EFE 9A03                       	dc.b	nCs2, $03
00087F00 EC0B                       	smpsPSGAlterVol     $0B
00087F02 800A                       	dc.b	nRst, $0A
00087F04 E102                       	smpsAlterNote       $02
00087F06 01                         	dc.b	$01
00087F07 E10A                       	smpsAlterNote       $0A
00087F09 01                         	dc.b	$01
00087F0A E102                       	smpsAlterNote       $02
00087F0C 01                         	dc.b	$01
00087F0D E1FC                       	smpsAlterNote       $FC
00087F0F 01                         	dc.b	$01
00087F10 E10A                       	smpsAlterNote       $0A
00087F12 01                         	dc.b	$01
00087F13 E1FC                       	smpsAlterNote       $FC
00087F15 01                         	dc.b	$01
00087F16 E108                       	smpsAlterNote       $08
00087F18 01                         	dc.b	$01
00087F19 E10A                       	smpsAlterNote       $0A
00087F1B 01                         	dc.b	$01
00087F1C E102                       	smpsAlterNote       $02
00087F1E 01                         	dc.b	$01
00087F1F E1F7                       	smpsAlterNote       $F7
00087F21 0101                       	dc.b	$01, $01
00087F23 E102                       	smpsAlterNote       $02
00087F25 01                         	dc.b	$01
00087F26 E108                       	smpsAlterNote       $08
00087F28 0101                       	dc.b	$01, $01
00087F2A E1FC                       	smpsAlterNote       $FC
00087F2C 01                         	dc.b	$01
00087F2D E10A                       	smpsAlterNote       $0A
00087F2F 01                         	dc.b	$01
00087F30 E1F7                       	smpsAlterNote       $F7
00087F32 01                         	dc.b	$01
00087F33 E102                       	smpsAlterNote       $02
00087F35 01                         	dc.b	$01
00087F36 E10A                       	smpsAlterNote       $0A
00087F38 01                         	dc.b	$01
00087F39 E102                       	smpsAlterNote       $02
00087F3B 01                         	dc.b	$01
00087F3C E1FC                       	smpsAlterNote       $FC
00087F3E 01                         	dc.b	$01
00087F3F                            
00087F3F                            music84_Jump06:
00087F3F E10A                       	smpsAlterNote       $0A
00087F41 8001                       	dc.b	nRst, $01
00087F43 E1FC                       	smpsAlterNote       $FC
00087F45 01                         	dc.b	$01
00087F46 E108                       	smpsAlterNote       $08
00087F48 01                         	dc.b	$01
00087F49 E10A                       	smpsAlterNote       $0A
00087F4B 01                         	dc.b	$01
00087F4C E1FC                       	smpsAlterNote       $FC
00087F4E ECF5                       	smpsPSGAlterVol     $F5
00087F50 8F06                       	dc.b	nD1, $06
00087F52 EC04                       	smpsPSGAlterVol     $04
00087F54 E701                       	dc.b	smpsNoAttack, $01
00087F56 EC07                       	smpsPSGAlterVol     $07
00087F58 8003                       	dc.b	nRst, $03
00087F5A ECF5                       	smpsPSGAlterVol     $F5
00087F5C 8F06                       	dc.b	nD1, $06
00087F5E EC04                       	smpsPSGAlterVol     $04
00087F60 E701                       	dc.b	smpsNoAttack, $01
00087F62 EC07                       	smpsPSGAlterVol     $07
00087F64 8006                       	dc.b	nRst, $06
00087F66 E1FF                       	smpsAlterNote       $FF
00087F68 01                         	dc.b	$01
00087F69 E102                       	smpsAlterNote       $02
00087F6B 01                         	dc.b	$01
00087F6C E1FF                       	smpsAlterNote       $FF
00087F6E 01                         	dc.b	$01
00087F6F E1F9                       	smpsAlterNote       $F9
00087F71 01                         	dc.b	$01
00087F72 E1FC                       	smpsAlterNote       $FC
00087F74 ECF5                       	smpsPSGAlterVol     $F5
00087F76 9006                       	dc.b	nEb1, $06
00087F78 EC04                       	smpsPSGAlterVol     $04
00087F7A E701                       	dc.b	smpsNoAttack, $01
00087F7C EC07                       	smpsPSGAlterVol     $07
00087F7E 8003                       	dc.b	nRst, $03
00087F80 ECF5                       	smpsPSGAlterVol     $F5
00087F82 9007                       	dc.b	nEb1, $07
00087F84 EC0B                       	smpsPSGAlterVol     $0B
00087F86 8006                       	dc.b	nRst, $06
00087F88 E1FF                       	smpsAlterNote       $FF
00087F8A 01                         	dc.b	$01
00087F8B E103                       	smpsAlterNote       $03
00087F8D 0101                       	dc.b	$01, $01
00087F8F E1FC                       	smpsAlterNote       $FC
00087F91 01                         	dc.b	$01
00087F92 ECF5                       	smpsPSGAlterVol     $F5
00087F94 8F07                       	dc.b	nD1, $07
00087F96 EC0B                       	smpsPSGAlterVol     $0B
00087F98 8004                       	dc.b	nRst, $04
00087F9A ECF5                       	smpsPSGAlterVol     $F5
00087F9C 8F06                       	dc.b	nD1, $06
00087F9E EC04                       	smpsPSGAlterVol     $04
00087FA0 E701                       	dc.b	smpsNoAttack, $01
00087FA2 EC07                       	smpsPSGAlterVol     $07
00087FA4 8006                       	dc.b	nRst, $06
00087FA6 E102                       	smpsAlterNote       $02
00087FA8 01                         	dc.b	$01
00087FA9 E103                       	smpsAlterNote       $03
00087FAB 01                         	dc.b	$01
00087FAC E1FF                       	smpsAlterNote       $FF
00087FAE 01                         	dc.b	$01
00087FAF E1F9                       	smpsAlterNote       $F9
00087FB1 01                         	dc.b	$01
00087FB2 E1FC                       	smpsAlterNote       $FC
00087FB4 ECF5                       	smpsPSGAlterVol     $F5
00087FB6 8F06                       	dc.b	nD1, $06
00087FB8 EC04                       	smpsPSGAlterVol     $04
00087FBA E701                       	dc.b	smpsNoAttack, $01
00087FBC EC07                       	smpsPSGAlterVol     $07
00087FBE 8003                       	dc.b	nRst, $03
00087FC0 ECF5                       	smpsPSGAlterVol     $F5
00087FC2 8F06                       	dc.b	nD1, $06
00087FC4 EC04                       	smpsPSGAlterVol     $04
00087FC6 E701                       	dc.b	smpsNoAttack, $01
00087FC8 EC07                       	smpsPSGAlterVol     $07
00087FCA 8006                       	dc.b	nRst, $06
00087FCC E1FF                       	smpsAlterNote       $FF
00087FCE 01                         	dc.b	$01
00087FCF E103                       	smpsAlterNote       $03
00087FD1 01                         	dc.b	$01
00087FD2 E1FF                       	smpsAlterNote       $FF
00087FD4 01                         	dc.b	$01
00087FD5 E1FC                       	smpsAlterNote       $FC
00087FD7 01                         	dc.b	$01
00087FD8 ECF5                       	smpsPSGAlterVol     $F5
00087FDA 8F06                       	dc.b	nD1, $06
00087FDC EC04                       	smpsPSGAlterVol     $04
00087FDE E701                       	dc.b	smpsNoAttack, $01
00087FE0 EC07                       	smpsPSGAlterVol     $07
00087FE2 8003                       	dc.b	nRst, $03
00087FE4 ECF5                       	smpsPSGAlterVol     $F5
00087FE6 8F07                       	dc.b	nD1, $07
00087FE8 EC0B                       	smpsPSGAlterVol     $0B
00087FEA 8007                       	dc.b	nRst, $07
00087FEC E101                       	smpsAlterNote       $01
00087FEE 0101                       	dc.b	$01, $01
00087FF0 E1FC                       	smpsAlterNote       $FC
00087FF2 01                         	dc.b	$01
00087FF3 E1F9                       	smpsAlterNote       $F9
00087FF5 01                         	dc.b	$01
00087FF6 E1FC                       	smpsAlterNote       $FC
00087FF8 ECF5                       	smpsPSGAlterVol     $F5
00087FFA 9006                       	dc.b	nEb1, $06
00087FFC EC0B                       	smpsPSGAlterVol     $0B
00087FFE 8004                       	dc.b	nRst, $04
00088000 ECF5                       	smpsPSGAlterVol     $F5
00088002 9006                       	dc.b	nEb1, $06
00088004 EC04                       	smpsPSGAlterVol     $04
00088006 E701                       	dc.b	smpsNoAttack, $01
00088008 EC07                       	smpsPSGAlterVol     $07
0008800A 8006                       	dc.b	nRst, $06
0008800C E100                       	smpsAlterNote       $00
0008800E 01                         	dc.b	$01
0008800F E102                       	smpsAlterNote       $02
00088011 01                         	dc.b	$01
00088012 E100                       	smpsAlterNote       $00
00088014 01                         	dc.b	$01
00088015 E1FD                       	smpsAlterNote       $FD
00088017 01                         	dc.b	$01
00088018 E1FF                       	smpsAlterNote       $FF
0008801A ECF5                       	smpsPSGAlterVol     $F5
0008801C 9B06                       	dc.b	nD2, $06
0008801E EC04                       	smpsPSGAlterVol     $04
00088020 E701                       	dc.b	smpsNoAttack, $01
00088022 EC07                       	smpsPSGAlterVol     $07
00088024 8003                       	dc.b	nRst, $03
00088026 ECF5                       	smpsPSGAlterVol     $F5
00088028 9B07                       	dc.b	nD2, $07
0008802A EC0B                       	smpsPSGAlterVol     $0B
0008802C 8006                       	dc.b	nRst, $06
0008802E E102                       	smpsAlterNote       $02
00088030 01                         	dc.b	$01
00088031 E106                       	smpsAlterNote       $06
00088033 01                         	dc.b	$01
00088034 E105                       	smpsAlterNote       $05
00088036 01                         	dc.b	$01
00088037 E1FF                       	smpsAlterNote       $FF
00088039 01                         	dc.b	$01
0008803A ECF5                       	smpsPSGAlterVol     $F5
0008803C 9B07                       	dc.b	nD2, $07
0008803E EC0B                       	smpsPSGAlterVol     $0B
00088040 8004                       	dc.b	nRst, $04
00088042 ECF5                       	smpsPSGAlterVol     $F5
00088044 9B06                       	dc.b	nD2, $06
00088046 EC0B                       	smpsPSGAlterVol     $0B
00088048 8007                       	dc.b	nRst, $07
0008804A E105                       	smpsAlterNote       $05
0008804C 0101                       	dc.b	$01, $01
0008804E E102                       	smpsAlterNote       $02
00088050 01                         	dc.b	$01
00088051 E1FC                       	smpsAlterNote       $FC
00088053 01                         	dc.b	$01
00088054 E1FF                       	smpsAlterNote       $FF
00088056 ECF5                       	smpsPSGAlterVol     $F5
00088058 9B06                       	dc.b	nD2, $06
0008805A EC04                       	smpsPSGAlterVol     $04
0008805C E701                       	dc.b	smpsNoAttack, $01
0008805E EC07                       	smpsPSGAlterVol     $07
00088060 8003                       	dc.b	nRst, $03
00088062 ECF5                       	smpsPSGAlterVol     $F5
00088064 9B06                       	dc.b	nD2, $06
00088066 EC04                       	smpsPSGAlterVol     $04
00088068 E701                       	dc.b	smpsNoAttack, $01
0008806A EC07                       	smpsPSGAlterVol     $07
0008806C 8006                       	dc.b	nRst, $06
0008806E E102                       	smpsAlterNote       $02
00088070 01                         	dc.b	$01
00088071 E106                       	smpsAlterNote       $06
00088073 01                         	dc.b	$01
00088074 E102                       	smpsAlterNote       $02
00088076 01                         	dc.b	$01
00088077 E1FF                       	smpsAlterNote       $FF
00088079 01                         	dc.b	$01
0008807A ECF5                       	smpsPSGAlterVol     $F5
0008807C 9B06                       	dc.b	nD2, $06
0008807E EC04                       	smpsPSGAlterVol     $04
00088080 E701                       	dc.b	smpsNoAttack, $01
00088082 EC07                       	smpsPSGAlterVol     $07
00088084 8003                       	dc.b	nRst, $03
00088086 ECF5                       	smpsPSGAlterVol     $F5
00088088 9B07                       	dc.b	nD2, $07
0008808A EC0B                       	smpsPSGAlterVol     $0B
0008808C 8007                       	dc.b	nRst, $07
0008808E E105                       	smpsAlterNote       $05
00088090 0101                       	dc.b	$01, $01
00088092 E1FF                       	smpsAlterNote       $FF
00088094 01                         	dc.b	$01
00088095 E1FC                       	smpsAlterNote       $FC
00088097 01                         	dc.b	$01
00088098 E1FF                       	smpsAlterNote       $FF
0008809A ECF5                       	smpsPSGAlterVol     $F5
0008809C 9B06                       	dc.b	nD2, $06
0008809E EC0B                       	smpsPSGAlterVol     $0B
000880A0 8004                       	dc.b	nRst, $04
000880A2 ECF5                       	smpsPSGAlterVol     $F5
000880A4 9B06                       	dc.b	nD2, $06
000880A6 EC04                       	smpsPSGAlterVol     $04
000880A8 E701                       	dc.b	smpsNoAttack, $01
000880AA EC07                       	smpsPSGAlterVol     $07
000880AC 8006                       	dc.b	nRst, $06
000880AE E105                       	smpsAlterNote       $05
000880B0 01                         	dc.b	$01
000880B1 E106                       	smpsAlterNote       $06
000880B3 01                         	dc.b	$01
000880B4 E102                       	smpsAlterNote       $02
000880B6 01                         	dc.b	$01
000880B7 E1FC                       	smpsAlterNote       $FC
000880B9 01                         	dc.b	$01
000880BA E1FF                       	smpsAlterNote       $FF
000880BC ECF5                       	smpsPSGAlterVol     $F5
000880BE 9B06                       	dc.b	nD2, $06
000880C0 EC04                       	smpsPSGAlterVol     $04
000880C2 E701                       	dc.b	smpsNoAttack, $01
000880C4 EC07                       	smpsPSGAlterVol     $07
000880C6 8003                       	dc.b	nRst, $03
000880C8 ECF5                       	smpsPSGAlterVol     $F5
000880CA 9B06                       	dc.b	nD2, $06
000880CC EC04                       	smpsPSGAlterVol     $04
000880CE E701                       	dc.b	smpsNoAttack, $01
000880D0 EC07                       	smpsPSGAlterVol     $07
000880D2 8006                       	dc.b	nRst, $06
000880D4 E102                       	smpsAlterNote       $02
000880D6 01                         	dc.b	$01
000880D7 E106                       	smpsAlterNote       $06
000880D9 01                         	dc.b	$01
000880DA E105                       	smpsAlterNote       $05
000880DC 01                         	dc.b	$01
000880DD E1FF                       	smpsAlterNote       $FF
000880DF 01                         	dc.b	$01
000880E0 ECF5                       	smpsPSGAlterVol     $F5
000880E2 9B07                       	dc.b	nD2, $07
000880E4 EC0B                       	smpsPSGAlterVol     $0B
000880E6 8004                       	dc.b	nRst, $04
000880E8 ECF5                       	smpsPSGAlterVol     $F5
000880EA 9B06                       	dc.b	nD2, $06
000880EC EC0B                       	smpsPSGAlterVol     $0B
000880EE 8007                       	dc.b	nRst, $07
000880F0 E105                       	smpsAlterNote       $05
000880F2 0101                       	dc.b	$01, $01
000880F4 E102                       	smpsAlterNote       $02
000880F6 01                         	dc.b	$01
000880F7 E1FC                       	smpsAlterNote       $FC
000880F9 01                         	dc.b	$01
000880FA E1FF                       	smpsAlterNote       $FF
000880FC ECF5                       	smpsPSGAlterVol     $F5
000880FE 9B06                       	dc.b	nD2, $06
00088100 EC04                       	smpsPSGAlterVol     $04
00088102 E701                       	dc.b	smpsNoAttack, $01
00088104 EC07                       	smpsPSGAlterVol     $07
00088106 8003                       	dc.b	nRst, $03
00088108 ECF5                       	smpsPSGAlterVol     $F5
0008810A 9B06                       	dc.b	nD2, $06
0008810C EC04                       	smpsPSGAlterVol     $04
0008810E E701                       	dc.b	smpsNoAttack, $01
00088110 EC07                       	smpsPSGAlterVol     $07
00088112 8006                       	dc.b	nRst, $06
00088114 E102                       	smpsAlterNote       $02
00088116 01                         	dc.b	$01
00088117 E106                       	smpsAlterNote       $06
00088119 01                         	dc.b	$01
0008811A E102                       	smpsAlterNote       $02
0008811C 01                         	dc.b	$01
0008811D E1FF                       	smpsAlterNote       $FF
0008811F 01                         	dc.b	$01
00088120 ECF5                       	smpsPSGAlterVol     $F5
00088122 9B06                       	dc.b	nD2, $06
00088124 EC04                       	smpsPSGAlterVol     $04
00088126 E701                       	dc.b	smpsNoAttack, $01
00088128 EC07                       	smpsPSGAlterVol     $07
0008812A 8003                       	dc.b	nRst, $03
0008812C ECF5                       	smpsPSGAlterVol     $F5
0008812E 9B07                       	dc.b	nD2, $07
00088130 E1FE                       	smpsAlterNote       $FE
00088132 9706                       	dc.b	nBb1, $06
00088134 EC04                       	smpsPSGAlterVol     $04
00088136 E701                       	dc.b	smpsNoAttack, $01
00088138 ECFC                       	smpsPSGAlterVol     $FC
0008813A 9703                       	dc.b	nBb1, $03
0008813C EC04                       	smpsPSGAlterVol     $04
0008813E E701                       	dc.b	smpsNoAttack, $01
00088140 ECFC                       	smpsPSGAlterVol     $FC
00088142 9702                       	dc.b	nBb1, $02
00088144 EC04                       	smpsPSGAlterVol     $04
00088146 E701                       	dc.b	smpsNoAttack, $01
00088148 ECFC                       	smpsPSGAlterVol     $FC
0008814A 9606                       	dc.b	nA1, $06
0008814C EC04                       	smpsPSGAlterVol     $04
0008814E E701                       	dc.b	smpsNoAttack, $01
00088150 EC07                       	smpsPSGAlterVol     $07
00088152 8006                       	dc.b	nRst, $06
00088154 E101                       	smpsAlterNote       $01
00088156 01                         	dc.b	$01
00088157 E107                       	smpsAlterNote       $07
00088159 01                         	dc.b	$01
0008815A E101                       	smpsAlterNote       $01
0008815C 01                         	dc.b	$01
0008815D E1F8                       	smpsAlterNote       $F8
0008815F 01                         	dc.b	$01
00088160 E1F7                       	smpsAlterNote       $F7
00088162 01                         	dc.b	$01
00088163 E1FC                       	smpsAlterNote       $FC
00088165 01                         	dc.b	$01
00088166 E106                       	smpsAlterNote       $06
00088168 01                         	dc.b	$01
00088169 E107                       	smpsAlterNote       $07
0008816B 01                         	dc.b	$01
0008816C E101                       	smpsAlterNote       $01
0008816E 01                         	dc.b	$01
0008816F E1F8                       	smpsAlterNote       $F8
00088171 0101                       	dc.b	$01, $01
00088173 E1FC                       	smpsAlterNote       $FC
00088175 ECF5                       	smpsPSGAlterVol     $F5
00088177 8F06                       	dc.b	nD1, $06
00088179 EC04                       	smpsPSGAlterVol     $04
0008817B E701                       	dc.b	smpsNoAttack, $01
0008817D EC07                       	smpsPSGAlterVol     $07
0008817F 8003                       	dc.b	nRst, $03
00088181 ECF5                       	smpsPSGAlterVol     $F5
00088183 8F06                       	dc.b	nD1, $06
00088185 EC04                       	smpsPSGAlterVol     $04
00088187 E701                       	dc.b	smpsNoAttack, $01
00088189 EC07                       	smpsPSGAlterVol     $07
0008818B 8006                       	dc.b	nRst, $06
0008818D E1FF                       	smpsAlterNote       $FF
0008818F 01                         	dc.b	$01
00088190 E102                       	smpsAlterNote       $02
00088192 01                         	dc.b	$01
00088193 E101                       	smpsAlterNote       $01
00088195 01                         	dc.b	$01
00088196 E1FC                       	smpsAlterNote       $FC
00088198 01                         	dc.b	$01
00088199 ECF5                       	smpsPSGAlterVol     $F5
0008819B 9007                       	dc.b	nEb1, $07
0008819D EC0B                       	smpsPSGAlterVol     $0B
0008819F 8004                       	dc.b	nRst, $04
000881A1 ECF5                       	smpsPSGAlterVol     $F5
000881A3 9006                       	dc.b	nEb1, $06
000881A5 EC0B                       	smpsPSGAlterVol     $0B
000881A7 8007                       	dc.b	nRst, $07
000881A9 E103                       	smpsAlterNote       $03
000881AB 0101                       	dc.b	$01, $01
000881AD E1FC                       	smpsAlterNote       $FC
000881AF 01                         	dc.b	$01
000881B0 E1F9                       	smpsAlterNote       $F9
000881B2 01                         	dc.b	$01
000881B3 E1FC                       	smpsAlterNote       $FC
000881B5 ECF5                       	smpsPSGAlterVol     $F5
000881B7 8F06                       	dc.b	nD1, $06
000881B9 EC04                       	smpsPSGAlterVol     $04
000881BB E701                       	dc.b	smpsNoAttack, $01
000881BD EC07                       	smpsPSGAlterVol     $07
000881BF 8003                       	dc.b	nRst, $03
000881C1 ECF5                       	smpsPSGAlterVol     $F5
000881C3 8F06                       	dc.b	nD1, $06
000881C5 EC04                       	smpsPSGAlterVol     $04
000881C7 E701                       	dc.b	smpsNoAttack, $01
000881C9 EC07                       	smpsPSGAlterVol     $07
000881CB 8006                       	dc.b	nRst, $06
000881CD E1FF                       	smpsAlterNote       $FF
000881CF 01                         	dc.b	$01
000881D0 E103                       	smpsAlterNote       $03
000881D2 01                         	dc.b	$01
000881D3 E1FF                       	smpsAlterNote       $FF
000881D5 01                         	dc.b	$01
000881D6 E1F9                       	smpsAlterNote       $F9
000881D8 01                         	dc.b	$01
000881D9 E1FC                       	smpsAlterNote       $FC
000881DB ECF5                       	smpsPSGAlterVol     $F5
000881DD 8F06                       	dc.b	nD1, $06
000881DF EC04                       	smpsPSGAlterVol     $04
000881E1 E701                       	dc.b	smpsNoAttack, $01
000881E3 EC07                       	smpsPSGAlterVol     $07
000881E5 8003                       	dc.b	nRst, $03
000881E7 ECF5                       	smpsPSGAlterVol     $F5
000881E9 8F07                       	dc.b	nD1, $07
000881EB EC0B                       	smpsPSGAlterVol     $0B
000881ED 8006                       	dc.b	nRst, $06
000881EF E1FF                       	smpsAlterNote       $FF
000881F1 01                         	dc.b	$01
000881F2 E102                       	smpsAlterNote       $02
000881F4 0101                       	dc.b	$01, $01
000881F6 E1FC                       	smpsAlterNote       $FC
000881F8 01                         	dc.b	$01
000881F9 ECF5                       	smpsPSGAlterVol     $F5
000881FB 8F07                       	dc.b	nD1, $07
000881FD EC0B                       	smpsPSGAlterVol     $0B
000881FF 8004                       	dc.b	nRst, $04
00088201 ECF5                       	smpsPSGAlterVol     $F5
00088203 8F06                       	dc.b	nD1, $06
00088205 EC04                       	smpsPSGAlterVol     $04
00088207 E701                       	dc.b	smpsNoAttack, $01
00088209 EC07                       	smpsPSGAlterVol     $07
0008820B 8006                       	dc.b	nRst, $06
0008820D E101                       	smpsAlterNote       $01
0008820F 01                         	dc.b	$01
00088210 E102                       	smpsAlterNote       $02
00088212 01                         	dc.b	$01
00088213 E1FF                       	smpsAlterNote       $FF
00088215 01                         	dc.b	$01
00088216 E1F9                       	smpsAlterNote       $F9
00088218 01                         	dc.b	$01
00088219 E1FC                       	smpsAlterNote       $FC
0008821B ECF5                       	smpsPSGAlterVol     $F5
0008821D 9006                       	dc.b	nEb1, $06
0008821F EC04                       	smpsPSGAlterVol     $04
00088221 E701                       	dc.b	smpsNoAttack, $01
00088223 EC07                       	smpsPSGAlterVol     $07
00088225 8003                       	dc.b	nRst, $03
00088227 ECF5                       	smpsPSGAlterVol     $F5
00088229 9006                       	dc.b	nEb1, $06
0008822B EC04                       	smpsPSGAlterVol     $04
0008822D E701                       	dc.b	smpsNoAttack, $01
0008822F EC07                       	smpsPSGAlterVol     $07
00088231 8006                       	dc.b	nRst, $06
00088233 E100                       	smpsAlterNote       $00
00088235 01                         	dc.b	$01
00088236 E102                       	smpsAlterNote       $02
00088238 01                         	dc.b	$01
00088239 E100                       	smpsAlterNote       $00
0008823B 01                         	dc.b	$01
0008823C E1FF                       	smpsAlterNote       $FF
0008823E 01                         	dc.b	$01
0008823F ECF5                       	smpsPSGAlterVol     $F5
00088241 9B06                       	dc.b	nD2, $06
00088243 EC04                       	smpsPSGAlterVol     $04
00088245 E701                       	dc.b	smpsNoAttack, $01
00088247 EC07                       	smpsPSGAlterVol     $07
00088249 8003                       	dc.b	nRst, $03
0008824B ECF5                       	smpsPSGAlterVol     $F5
0008824D 9B07                       	dc.b	nD2, $07
0008824F EC0B                       	smpsPSGAlterVol     $0B
00088251 8007                       	dc.b	nRst, $07
00088253 E105                       	smpsAlterNote       $05
00088255 0101                       	dc.b	$01, $01
00088257 E1FF                       	smpsAlterNote       $FF
00088259 01                         	dc.b	$01
0008825A E1FC                       	smpsAlterNote       $FC
0008825C 01                         	dc.b	$01
0008825D E1FF                       	smpsAlterNote       $FF
0008825F ECF5                       	smpsPSGAlterVol     $F5
00088261 9B06                       	dc.b	nD2, $06
00088263 EC0B                       	smpsPSGAlterVol     $0B
00088265 8004                       	dc.b	nRst, $04
00088267 ECF5                       	smpsPSGAlterVol     $F5
00088269 9B06                       	dc.b	nD2, $06
0008826B EC04                       	smpsPSGAlterVol     $04
0008826D E701                       	dc.b	smpsNoAttack, $01
0008826F EC07                       	smpsPSGAlterVol     $07
00088271 8006                       	dc.b	nRst, $06
00088273 E102                       	smpsAlterNote       $02
00088275 01                         	dc.b	$01
00088276 E106                       	smpsAlterNote       $06
00088278 01                         	dc.b	$01
00088279 E102                       	smpsAlterNote       $02
0008827B 01                         	dc.b	$01
0008827C E1FC                       	smpsAlterNote       $FC
0008827E 01                         	dc.b	$01
0008827F E1FF                       	smpsAlterNote       $FF
00088281 ECF5                       	smpsPSGAlterVol     $F5
00088283 9B06                       	dc.b	nD2, $06
00088285 EC04                       	smpsPSGAlterVol     $04
00088287 E701                       	dc.b	smpsNoAttack, $01
00088289 EC07                       	smpsPSGAlterVol     $07
0008828B 8003                       	dc.b	nRst, $03
0008828D ECF5                       	smpsPSGAlterVol     $F5
0008828F 9B07                       	dc.b	nD2, $07
00088291 EC0B                       	smpsPSGAlterVol     $0B
00088293 8006                       	dc.b	nRst, $06
00088295 E102                       	smpsAlterNote       $02
00088297 01                         	dc.b	$01
00088298 E105                       	smpsAlterNote       $05
0008829A 0101                       	dc.b	$01, $01
0008829C E1FF                       	smpsAlterNote       $FF
0008829E 01                         	dc.b	$01
0008829F ECF5                       	smpsPSGAlterVol     $F5
000882A1 9B07                       	dc.b	nD2, $07
000882A3 EC0B                       	smpsPSGAlterVol     $0B
000882A5 8004                       	dc.b	nRst, $04
000882A7 ECF5                       	smpsPSGAlterVol     $F5
000882A9 9B06                       	dc.b	nD2, $06
000882AB EC0B                       	smpsPSGAlterVol     $0B
000882AD 8007                       	dc.b	nRst, $07
000882AF E105                       	smpsAlterNote       $05
000882B1 0101                       	dc.b	$01, $01
000882B3 E102                       	smpsAlterNote       $02
000882B5 01                         	dc.b	$01
000882B6 E1FC                       	smpsAlterNote       $FC
000882B8 01                         	dc.b	$01
000882B9 E1FF                       	smpsAlterNote       $FF
000882BB ECF5                       	smpsPSGAlterVol     $F5
000882BD 9B06                       	dc.b	nD2, $06
000882BF EC04                       	smpsPSGAlterVol     $04
000882C1 E701                       	dc.b	smpsNoAttack, $01
000882C3 EC07                       	smpsPSGAlterVol     $07
000882C5 8003                       	dc.b	nRst, $03
000882C7 ECF5                       	smpsPSGAlterVol     $F5
000882C9 9B06                       	dc.b	nD2, $06
000882CB EC04                       	smpsPSGAlterVol     $04
000882CD E701                       	dc.b	smpsNoAttack, $01
000882CF EC07                       	smpsPSGAlterVol     $07
000882D1 8006                       	dc.b	nRst, $06
000882D3 E102                       	smpsAlterNote       $02
000882D5 01                         	dc.b	$01
000882D6 E106                       	smpsAlterNote       $06
000882D8 01                         	dc.b	$01
000882D9 E102                       	smpsAlterNote       $02
000882DB 01                         	dc.b	$01
000882DC E1FF                       	smpsAlterNote       $FF
000882DE 01                         	dc.b	$01
000882DF ECF5                       	smpsPSGAlterVol     $F5
000882E1 9B06                       	dc.b	nD2, $06
000882E3 EC04                       	smpsPSGAlterVol     $04
000882E5 E701                       	dc.b	smpsNoAttack, $01
000882E7 EC07                       	smpsPSGAlterVol     $07
000882E9 8003                       	dc.b	nRst, $03
000882EB ECF5                       	smpsPSGAlterVol     $F5
000882ED 9B07                       	dc.b	nD2, $07
000882EF EC0B                       	smpsPSGAlterVol     $0B
000882F1 8007                       	dc.b	nRst, $07
000882F3 E105                       	smpsAlterNote       $05
000882F5 0101                       	dc.b	$01, $01
000882F7 E1FF                       	smpsAlterNote       $FF
000882F9 01                         	dc.b	$01
000882FA E1FC                       	smpsAlterNote       $FC
000882FC 01                         	dc.b	$01
000882FD E1FF                       	smpsAlterNote       $FF
000882FF ECF5                       	smpsPSGAlterVol     $F5
00088301 9B06                       	dc.b	nD2, $06
00088303 EC0B                       	smpsPSGAlterVol     $0B
00088305 8004                       	dc.b	nRst, $04
00088307 ECF5                       	smpsPSGAlterVol     $F5
00088309 9B06                       	dc.b	nD2, $06
0008830B EC04                       	smpsPSGAlterVol     $04
0008830D E701                       	dc.b	smpsNoAttack, $01
0008830F EC07                       	smpsPSGAlterVol     $07
00088311 8006                       	dc.b	nRst, $06
00088313 E102                       	smpsAlterNote       $02
00088315 01                         	dc.b	$01
00088316 E106                       	smpsAlterNote       $06
00088318 01                         	dc.b	$01
00088319 E102                       	smpsAlterNote       $02
0008831B 01                         	dc.b	$01
0008831C E1FC                       	smpsAlterNote       $FC
0008831E 01                         	dc.b	$01
0008831F E1FF                       	smpsAlterNote       $FF
00088321 ECF5                       	smpsPSGAlterVol     $F5
00088323 9B06                       	dc.b	nD2, $06
00088325 EC04                       	smpsPSGAlterVol     $04
00088327 E701                       	dc.b	smpsNoAttack, $01
00088329 EC07                       	smpsPSGAlterVol     $07
0008832B 8003                       	dc.b	nRst, $03
0008832D ECF5                       	smpsPSGAlterVol     $F5
0008832F 9B06                       	dc.b	nD2, $06
00088331 EC04                       	smpsPSGAlterVol     $04
00088333 E701                       	dc.b	smpsNoAttack, $01
00088335 EC07                       	smpsPSGAlterVol     $07
00088337 8006                       	dc.b	nRst, $06
00088339 E102                       	smpsAlterNote       $02
0008833B 01                         	dc.b	$01
0008833C E106                       	smpsAlterNote       $06
0008833E 01                         	dc.b	$01
0008833F E105                       	smpsAlterNote       $05
00088341 01                         	dc.b	$01
00088342 E1FF                       	smpsAlterNote       $FF
00088344 01                         	dc.b	$01
00088345 ECF5                       	smpsPSGAlterVol     $F5
00088347 9B07                       	dc.b	nD2, $07
00088349 EC0B                       	smpsPSGAlterVol     $0B
0008834B 8004                       	dc.b	nRst, $04
0008834D ECF5                       	smpsPSGAlterVol     $F5
0008834F 9B06                       	dc.b	nD2, $06
00088351 EC0B                       	smpsPSGAlterVol     $0B
00088353 8007                       	dc.b	nRst, $07
00088355 E105                       	smpsAlterNote       $05
00088357 0101                       	dc.b	$01, $01
00088359 E101                       	smpsAlterNote       $01
0008835B 01                         	dc.b	$01
0008835C E1FB                       	smpsAlterNote       $FB
0008835E 01                         	dc.b	$01
0008835F E1FE                       	smpsAlterNote       $FE
00088361 ECF5                       	smpsPSGAlterVol     $F5
00088363 9A06                       	dc.b	nCs2, $06
00088365 EC04                       	smpsPSGAlterVol     $04
00088367 E701                       	dc.b	smpsNoAttack, $01
00088369 EC07                       	smpsPSGAlterVol     $07
0008836B 8003                       	dc.b	nRst, $03
0008836D ECF5                       	smpsPSGAlterVol     $F5
0008836F 9A06                       	dc.b	nCs2, $06
00088371 EC04                       	smpsPSGAlterVol     $04
00088373 E701                       	dc.b	smpsNoAttack, $01
00088375 EC07                       	smpsPSGAlterVol     $07
00088377 8003                       	dc.b	nRst, $03
00088379 E1FC                       	smpsAlterNote       $FC
0008837B ECF5                       	smpsPSGAlterVol     $F5
0008837D 8F07                       	dc.b	nD1, $07
0008837F EC0B                       	smpsPSGAlterVol     $0B
00088381 8006                       	dc.b	nRst, $06
00088383 E1FF                       	smpsAlterNote       $FF
00088385 01                         	dc.b	$01
00088386 E103                       	smpsAlterNote       $03
00088388 01                         	dc.b	$01
00088389 E102                       	smpsAlterNote       $02
0008838B 01                         	dc.b	$01
0008838C E1FC                       	smpsAlterNote       $FC
0008838E 01                         	dc.b	$01
0008838F E1F8                       	smpsAlterNote       $F8
00088391 01                         	dc.b	$01
00088392 E1FC                       	smpsAlterNote       $FC
00088394 01                         	dc.b	$01
00088395 E1FF                       	smpsAlterNote       $FF
00088397 01                         	dc.b	$01
00088398 E103                       	smpsAlterNote       $03
0008839A 01                         	dc.b	$01
0008839B E1FC                       	smpsAlterNote       $FC
0008839D ECF5                       	smpsPSGAlterVol     $F5
0008839F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000883A3 EC04                       	smpsPSGAlterVol     $04
000883A5 E701                       	dc.b	smpsNoAttack, $01
000883A7 EC07                       	smpsPSGAlterVol     $07
000883A9 8009                       	dc.b	nRst, $09
000883AB E1FF                       	smpsAlterNote       $FF
000883AD 01                         	dc.b	$01
000883AE E103                       	smpsAlterNote       $03
000883B0 01                         	dc.b	$01
000883B1 E102                       	smpsAlterNote       $02
000883B3 01                         	dc.b	$01
000883B4 E1FC                       	smpsAlterNote       $FC
000883B6 01                         	dc.b	$01
000883B7 E1F8                       	smpsAlterNote       $F8
000883B9 01                         	dc.b	$01
000883BA E1FC                       	smpsAlterNote       $FC
000883BC 01                         	dc.b	$01
000883BD E1FF                       	smpsAlterNote       $FF
000883BF 01                         	dc.b	$01
000883C0 E103                       	smpsAlterNote       $03
000883C2 01                         	dc.b	$01
000883C3 E1FF                       	smpsAlterNote       $FF
000883C5 01                         	dc.b	$01
000883C6 E1F9                       	smpsAlterNote       $F9
000883C8 01                         	dc.b	$01
000883C9 E1F8                       	smpsAlterNote       $F8
000883CB 01                         	dc.b	$01
000883CC E1FC                       	smpsAlterNote       $FC
000883CE 01                         	dc.b	$01
000883CF E102                       	smpsAlterNote       $02
000883D1 0101                       	dc.b	$01, $01
000883D3 E1FF                       	smpsAlterNote       $FF
000883D5 01                         	dc.b	$01
000883D6 E1FC                       	smpsAlterNote       $FC
000883D8 ECF5                       	smpsPSGAlterVol     $F5
000883DA 8F02                       	dc.b	nD1, $02
000883DC EC04                       	smpsPSGAlterVol     $04
000883DE E701                       	dc.b	smpsNoAttack, $01
000883E0 ECFC                       	smpsPSGAlterVol     $FC
000883E2 E1FB                       	smpsAlterNote       $FB
000883E4 8D06                       	dc.b	nC1, $06
000883E6 EC04                       	smpsPSGAlterVol     $04
000883E8 E701                       	dc.b	smpsNoAttack, $01
000883EA EC07                       	smpsPSGAlterVol     $07
000883EC 8006                       	dc.b	nRst, $06
000883EE E1FE                       	smpsAlterNote       $FE
000883F0 01                         	dc.b	$01
000883F1 E102                       	smpsAlterNote       $02
000883F3 01                         	dc.b	$01
000883F4 E1FE                       	smpsAlterNote       $FE
000883F6 01                         	dc.b	$01
000883F7 E1FB                       	smpsAlterNote       $FB
000883F9 01                         	dc.b	$01
000883FA E1F7                       	smpsAlterNote       $F7
000883FC 01                         	dc.b	$01
000883FD E1FB                       	smpsAlterNote       $FB
000883FF 01                         	dc.b	$01
00088400 E101                       	smpsAlterNote       $01
00088402 01                         	dc.b	$01
00088403 E102                       	smpsAlterNote       $02
00088405 01                         	dc.b	$01
00088406 E1FB                       	smpsAlterNote       $FB
00088408 ECF5                       	smpsPSGAlterVol     $F5
0008840A 8D02                       	dc.b	nC1, $02
0008840C EC04                       	smpsPSGAlterVol     $04
0008840E E701                       	dc.b	smpsNoAttack, $01
00088410 E1FC                       	smpsAlterNote       $FC
00088412 ECFC                       	smpsPSGAlterVol     $FC
00088414 8F0D                       	dc.b	nD1, $0D
00088416 E1FF                       	smpsAlterNote       $FF
00088418 E701                       	dc.b	smpsNoAttack, $01
0008841A E103                       	smpsAlterNote       $03
0008841C E701                       	dc.b	smpsNoAttack, $01
0008841E E1FF                       	smpsAlterNote       $FF
00088420 E701                       	dc.b	smpsNoAttack, $01
00088422 E1FC                       	smpsAlterNote       $FC
00088424 E701                       	dc.b	smpsNoAttack, $01
00088426 E1F8                       	smpsAlterNote       $F8
00088428 E701                       	dc.b	smpsNoAttack, $01
0008842A E1FC                       	smpsAlterNote       $FC
0008842C E701                       	dc.b	smpsNoAttack, $01
0008842E E102                       	smpsAlterNote       $02
00088430 E701                       	dc.b	smpsNoAttack, $01
00088432 E103                       	smpsAlterNote       $03
00088434 E701                       	dc.b	smpsNoAttack, $01
00088436 E1FF                       	smpsAlterNote       $FF
00088438 E701                       	dc.b	smpsNoAttack, $01
0008843A E1F9                       	smpsAlterNote       $F9
0008843C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088440 E1FC                       	smpsAlterNote       $FC
00088442 E701                       	dc.b	smpsNoAttack, $01
00088444 E102                       	smpsAlterNote       $02
00088446 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008844A E1FC                       	smpsAlterNote       $FC
0008844C E701                       	dc.b	smpsNoAttack, $01
0008844E E1F9                       	smpsAlterNote       $F9
00088450 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088454 E1FF                       	smpsAlterNote       $FF
00088456 EC04                       	smpsPSGAlterVol     $04
00088458 E701                       	dc.b	smpsNoAttack, $01
0008845A EC07                       	smpsPSGAlterVol     $07
0008845C E103                       	smpsAlterNote       $03
0008845E 8001                       	dc.b	nRst, $01
00088460 E102                       	smpsAlterNote       $02
00088462 01                         	dc.b	$01
00088463 E1FB                       	smpsAlterNote       $FB
00088465 01                         	dc.b	$01
00088466 E1F7                       	smpsAlterNote       $F7
00088468 01                         	dc.b	$01
00088469 E1FB                       	smpsAlterNote       $FB
0008846B 01                         	dc.b	$01
0008846C E102                       	smpsAlterNote       $02
0008846E 01                         	dc.b	$01
0008846F E103                       	smpsAlterNote       $03
00088471 01                         	dc.b	$01
00088472 E1FB                       	smpsAlterNote       $FB
00088474 ECF5                       	smpsPSGAlterVol     $F5
00088476 8E06                       	dc.b	nCs1, $06
00088478 EC04                       	smpsPSGAlterVol     $04
0008847A E701                       	dc.b	smpsNoAttack, $01
0008847C EC07                       	smpsPSGAlterVol     $07
0008847E 8003                       	dc.b	nRst, $03
00088480 ECF5                       	smpsPSGAlterVol     $F5
00088482 8E06                       	dc.b	nCs1, $06
00088484 EC04                       	smpsPSGAlterVol     $04
00088486 E701                       	dc.b	smpsNoAttack, $01
00088488 EC07                       	smpsPSGAlterVol     $07
0008848A 8006                       	dc.b	nRst, $06
0008848C E1FE                       	smpsAlterNote       $FE
0008848E 01                         	dc.b	$01
0008848F E102                       	smpsAlterNote       $02
00088491 01                         	dc.b	$01
00088492 E1FE                       	smpsAlterNote       $FE
00088494 01                         	dc.b	$01
00088495 E1F9                       	smpsAlterNote       $F9
00088497 01                         	dc.b	$01
00088498 E1FC                       	smpsAlterNote       $FC
0008849A ECF5                       	smpsPSGAlterVol     $F5
0008849C 8F06                       	dc.b	nD1, $06
0008849E EC04                       	smpsPSGAlterVol     $04
000884A0 E701                       	dc.b	smpsNoAttack, $01
000884A2 EC07                       	smpsPSGAlterVol     $07
000884A4 8003                       	dc.b	nRst, $03
000884A6 ECF5                       	smpsPSGAlterVol     $F5
000884A8 8F07                       	dc.b	nD1, $07
000884AA EC0B                       	smpsPSGAlterVol     $0B
000884AC 8006                       	dc.b	nRst, $06
000884AE E1FF                       	smpsAlterNote       $FF
000884B0 01                         	dc.b	$01
000884B1 E102                       	smpsAlterNote       $02
000884B3 0101                       	dc.b	$01, $01
000884B5 E1FB                       	smpsAlterNote       $FB
000884B7 01                         	dc.b	$01
000884B8 ECF5                       	smpsPSGAlterVol     $F5
000884BA 8E07                       	dc.b	nCs1, $07
000884BC EC0B                       	smpsPSGAlterVol     $0B
000884BE 8004                       	dc.b	nRst, $04
000884C0 ECF5                       	smpsPSGAlterVol     $F5
000884C2 8E06                       	dc.b	nCs1, $06
000884C4 EC04                       	smpsPSGAlterVol     $04
000884C6 E701                       	dc.b	smpsNoAttack, $01
000884C8 EC07                       	smpsPSGAlterVol     $07
000884CA 8006                       	dc.b	nRst, $06
000884CC E101                       	smpsAlterNote       $01
000884CE 01                         	dc.b	$01
000884CF E102                       	smpsAlterNote       $02
000884D1 01                         	dc.b	$01
000884D2 E1FE                       	smpsAlterNote       $FE
000884D4 01                         	dc.b	$01
000884D5 E1F8                       	smpsAlterNote       $F8
000884D7 01                         	dc.b	$01
000884D8 E1FB                       	smpsAlterNote       $FB
000884DA ECF5                       	smpsPSGAlterVol     $F5
000884DC 8E06                       	dc.b	nCs1, $06
000884DE EC04                       	smpsPSGAlterVol     $04
000884E0 E701                       	dc.b	smpsNoAttack, $01
000884E2 EC07                       	smpsPSGAlterVol     $07
000884E4 8003                       	dc.b	nRst, $03
000884E6 ECF5                       	smpsPSGAlterVol     $F5
000884E8 8E06                       	dc.b	nCs1, $06
000884EA EC04                       	smpsPSGAlterVol     $04
000884EC E701                       	dc.b	smpsNoAttack, $01
000884EE EC07                       	smpsPSGAlterVol     $07
000884F0 8004                       	dc.b	nRst, $04
000884F2 E1FC                       	smpsAlterNote       $FC
000884F4 ECF5                       	smpsPSGAlterVol     $F5
000884F6 8F06                       	dc.b	nD1, $06
000884F8 EC0B                       	smpsPSGAlterVol     $0B
000884FA 8006                       	dc.b	nRst, $06
000884FC E1FF                       	smpsAlterNote       $FF
000884FE 01                         	dc.b	$01
000884FF E102                       	smpsAlterNote       $02
00088501 0101                       	dc.b	$01, $01
00088503 E1FC                       	smpsAlterNote       $FC
00088505 01                         	dc.b	$01
00088506 E1F8                       	smpsAlterNote       $F8
00088508 01                         	dc.b	$01
00088509 E1F9                       	smpsAlterNote       $F9
0008850B 01                         	dc.b	$01
0008850C E1FF                       	smpsAlterNote       $FF
0008850E 01                         	dc.b	$01
0008850F E103                       	smpsAlterNote       $03
00088511 01                         	dc.b	$01
00088512 E1FC                       	smpsAlterNote       $FC
00088514 ECF5                       	smpsPSGAlterVol     $F5
00088516 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008851A EC04                       	smpsPSGAlterVol     $04
0008851C E701                       	dc.b	smpsNoAttack, $01
0008851E EC07                       	smpsPSGAlterVol     $07
00088520 8009                       	dc.b	nRst, $09
00088522 E1FF                       	smpsAlterNote       $FF
00088524 01                         	dc.b	$01
00088525 E102                       	smpsAlterNote       $02
00088527 0101                       	dc.b	$01, $01
00088529 E1FC                       	smpsAlterNote       $FC
0008852B 01                         	dc.b	$01
0008852C E1F8                       	smpsAlterNote       $F8
0008852E 01                         	dc.b	$01
0008852F E1F9                       	smpsAlterNote       $F9
00088531 01                         	dc.b	$01
00088532 E1FF                       	smpsAlterNote       $FF
00088534 01                         	dc.b	$01
00088535 E103                       	smpsAlterNote       $03
00088537 01                         	dc.b	$01
00088538 E1FF                       	smpsAlterNote       $FF
0008853A 01                         	dc.b	$01
0008853B E1FC                       	smpsAlterNote       $FC
0008853D 01                         	dc.b	$01
0008853E E1F8                       	smpsAlterNote       $F8
00088540 01                         	dc.b	$01
00088541 E1FC                       	smpsAlterNote       $FC
00088543 01                         	dc.b	$01
00088544 E102                       	smpsAlterNote       $02
00088546 01                         	dc.b	$01
00088547 E103                       	smpsAlterNote       $03
00088549 01                         	dc.b	$01
0008854A E1FF                       	smpsAlterNote       $FF
0008854C 01                         	dc.b	$01
0008854D E1FC                       	smpsAlterNote       $FC
0008854F ECF5                       	smpsPSGAlterVol     $F5
00088551 8F03                       	dc.b	nD1, $03
00088553 E1FB                       	smpsAlterNote       $FB
00088555 8D06                       	dc.b	nC1, $06
00088557 EC04                       	smpsPSGAlterVol     $04
00088559 E701                       	dc.b	smpsNoAttack, $01
0008855B EC07                       	smpsPSGAlterVol     $07
0008855D 8006                       	dc.b	nRst, $06
0008855F E1FE                       	smpsAlterNote       $FE
00088561 01                         	dc.b	$01
00088562 E102                       	smpsAlterNote       $02
00088564 01                         	dc.b	$01
00088565 E101                       	smpsAlterNote       $01
00088567 01                         	dc.b	$01
00088568 E1FB                       	smpsAlterNote       $FB
0008856A 01                         	dc.b	$01
0008856B E1F7                       	smpsAlterNote       $F7
0008856D 01                         	dc.b	$01
0008856E E1FB                       	smpsAlterNote       $FB
00088570 01                         	dc.b	$01
00088571 E1FE                       	smpsAlterNote       $FE
00088573 01                         	dc.b	$01
00088574 E102                       	smpsAlterNote       $02
00088576 01                         	dc.b	$01
00088577 E1FB                       	smpsAlterNote       $FB
00088579 ECF5                       	smpsPSGAlterVol     $F5
0008857B 8D03                       	dc.b	nC1, $03
0008857D E1FC                       	smpsAlterNote       $FC
0008857F 8F0D                       	dc.b	nD1, $0D
00088581 E1FF                       	smpsAlterNote       $FF
00088583 E701                       	dc.b	smpsNoAttack, $01
00088585 E103                       	smpsAlterNote       $03
00088587 E701                       	dc.b	smpsNoAttack, $01
00088589 E1FF                       	smpsAlterNote       $FF
0008858B E701                       	dc.b	smpsNoAttack, $01
0008858D E1FC                       	smpsAlterNote       $FC
0008858F E701                       	dc.b	smpsNoAttack, $01
00088591 E1F8                       	smpsAlterNote       $F8
00088593 E701                       	dc.b	smpsNoAttack, $01
00088595 E1FC                       	smpsAlterNote       $FC
00088597 E701                       	dc.b	smpsNoAttack, $01
00088599 E102                       	smpsAlterNote       $02
0008859B E701                       	dc.b	smpsNoAttack, $01
0008859D E103                       	smpsAlterNote       $03
0008859F E701                       	dc.b	smpsNoAttack, $01
000885A1 E1FF                       	smpsAlterNote       $FF
000885A3 E701                       	dc.b	smpsNoAttack, $01
000885A5 E1F9                       	smpsAlterNote       $F9
000885A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885AB E1FC                       	smpsAlterNote       $FC
000885AD E701                       	dc.b	smpsNoAttack, $01
000885AF E102                       	smpsAlterNote       $02
000885B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885B5 E1FF                       	smpsAlterNote       $FF
000885B7 E701                       	dc.b	smpsNoAttack, $01
000885B9 E1F9                       	smpsAlterNote       $F9
000885BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885BF E1FF                       	smpsAlterNote       $FF
000885C1 EC04                       	smpsPSGAlterVol     $04
000885C3 E701                       	dc.b	smpsNoAttack, $01
000885C5 EC07                       	smpsPSGAlterVol     $07
000885C7 E103                       	smpsAlterNote       $03
000885C9 8001                       	dc.b	nRst, $01
000885CB E102                       	smpsAlterNote       $02
000885CD 01                         	dc.b	$01
000885CE E1FB                       	smpsAlterNote       $FB
000885D0 01                         	dc.b	$01
000885D1 E1F7                       	smpsAlterNote       $F7
000885D3 01                         	dc.b	$01
000885D4 E1FB                       	smpsAlterNote       $FB
000885D6 01                         	dc.b	$01
000885D7 E1FF                       	smpsAlterNote       $FF
000885D9 01                         	dc.b	$01
000885DA E103                       	smpsAlterNote       $03
000885DC 01                         	dc.b	$01
000885DD E1FB                       	smpsAlterNote       $FB
000885DF ECF5                       	smpsPSGAlterVol     $F5
000885E1 8E06                       	dc.b	nCs1, $06
000885E3 EC04                       	smpsPSGAlterVol     $04
000885E5 E701                       	dc.b	smpsNoAttack, $01
000885E7 EC07                       	smpsPSGAlterVol     $07
000885E9 8003                       	dc.b	nRst, $03
000885EB ECF5                       	smpsPSGAlterVol     $F5
000885ED 8E06                       	dc.b	nCs1, $06
000885EF EC04                       	smpsPSGAlterVol     $04
000885F1 E701                       	dc.b	smpsNoAttack, $01
000885F3 EC07                       	smpsPSGAlterVol     $07
000885F5 8006                       	dc.b	nRst, $06
000885F7 E1FE                       	smpsAlterNote       $FE
000885F9 01                         	dc.b	$01
000885FA E102                       	smpsAlterNote       $02
000885FC 01                         	dc.b	$01
000885FD E1FE                       	smpsAlterNote       $FE
000885FF 01                         	dc.b	$01
00088600 E1FC                       	smpsAlterNote       $FC
00088602 01                         	dc.b	$01
00088603 ECF5                       	smpsPSGAlterVol     $F5
00088605 8F06                       	dc.b	nD1, $06
00088607 EC04                       	smpsPSGAlterVol     $04
00088609 E701                       	dc.b	smpsNoAttack, $01
0008860B EC07                       	smpsPSGAlterVol     $07
0008860D 8003                       	dc.b	nRst, $03
0008860F ECF5                       	smpsPSGAlterVol     $F5
00088611 8F07                       	dc.b	nD1, $07
00088613 EC0B                       	smpsPSGAlterVol     $0B
00088615 8007                       	dc.b	nRst, $07
00088617 E102                       	smpsAlterNote       $02
00088619 0101                       	dc.b	$01, $01
0008861B E1FB                       	smpsAlterNote       $FB
0008861D 01                         	dc.b	$01
0008861E E1F8                       	smpsAlterNote       $F8
00088620 01                         	dc.b	$01
00088621 E1FB                       	smpsAlterNote       $FB
00088623 ECF5                       	smpsPSGAlterVol     $F5
00088625 8E06                       	dc.b	nCs1, $06
00088627 EC0B                       	smpsPSGAlterVol     $0B
00088629 8004                       	dc.b	nRst, $04
0008862B ECF5                       	smpsPSGAlterVol     $F5
0008862D 8E06                       	dc.b	nCs1, $06
0008862F EC04                       	smpsPSGAlterVol     $04
00088631 E701                       	dc.b	smpsNoAttack, $01
00088633 EC07                       	smpsPSGAlterVol     $07
00088635 8006                       	dc.b	nRst, $06
00088637 E1FE                       	smpsAlterNote       $FE
00088639 01                         	dc.b	$01
0008863A E102                       	smpsAlterNote       $02
0008863C 01                         	dc.b	$01
0008863D E1FE                       	smpsAlterNote       $FE
0008863F 01                         	dc.b	$01
00088640 E1F9                       	smpsAlterNote       $F9
00088642 01                         	dc.b	$01
00088643 E1FC                       	smpsAlterNote       $FC
00088645 ECF5                       	smpsPSGAlterVol     $F5
00088647 8F06                       	dc.b	nD1, $06
00088649 EC04                       	smpsPSGAlterVol     $04
0008864B E701                       	dc.b	smpsNoAttack, $01
0008864D EC07                       	smpsPSGAlterVol     $07
0008864F 8003                       	dc.b	nRst, $03
00088651 ECF5                       	smpsPSGAlterVol     $F5
00088653 8F06                       	dc.b	nD1, $06
00088655 EC04                       	smpsPSGAlterVol     $04
00088657 E701                       	dc.b	smpsNoAttack, $01
00088659 EC07                       	smpsPSGAlterVol     $07
0008865B 8006                       	dc.b	nRst, $06
0008865D E1FF                       	smpsAlterNote       $FF
0008865F 01                         	dc.b	$01
00088660 E103                       	smpsAlterNote       $03
00088662 01                         	dc.b	$01
00088663 E102                       	smpsAlterNote       $02
00088665 01                         	dc.b	$01
00088666 E1FB                       	smpsAlterNote       $FB
00088668 01                         	dc.b	$01
00088669 ECF5                       	smpsPSGAlterVol     $F5
0008866B 8E07                       	dc.b	nCs1, $07
0008866D EC0B                       	smpsPSGAlterVol     $0B
0008866F 8004                       	dc.b	nRst, $04
00088671 ECF5                       	smpsPSGAlterVol     $F5
00088673 8E06                       	dc.b	nCs1, $06
00088675 EC0B                       	smpsPSGAlterVol     $0B
00088677 8007                       	dc.b	nRst, $07
00088679 E101                       	smpsAlterNote       $01
0008867B 0101                       	dc.b	$01, $01
0008867D E1FE                       	smpsAlterNote       $FE
0008867F 01                         	dc.b	$01
00088680 E1F9                       	smpsAlterNote       $F9
00088682 01                         	dc.b	$01
00088683 E1FC                       	smpsAlterNote       $FC
00088685 ECF5                       	smpsPSGAlterVol     $F5
00088687 8F06                       	dc.b	nD1, $06
00088689 EC04                       	smpsPSGAlterVol     $04
0008868B E701                       	dc.b	smpsNoAttack, $01
0008868D EC07                       	smpsPSGAlterVol     $07
0008868F 8003                       	dc.b	nRst, $03
00088691 ECF5                       	smpsPSGAlterVol     $F5
00088693 8F06                       	dc.b	nD1, $06
00088695 EC04                       	smpsPSGAlterVol     $04
00088697 E701                       	dc.b	smpsNoAttack, $01
00088699 EC07                       	smpsPSGAlterVol     $07
0008869B 8006                       	dc.b	nRst, $06
0008869D E1FF                       	smpsAlterNote       $FF
0008869F 01                         	dc.b	$01
000886A0 E103                       	smpsAlterNote       $03
000886A2 01                         	dc.b	$01
000886A3 E1FF                       	smpsAlterNote       $FF
000886A5 01                         	dc.b	$01
000886A6 E1FB                       	smpsAlterNote       $FB
000886A8 01                         	dc.b	$01
000886A9 ECF5                       	smpsPSGAlterVol     $F5
000886AB 8E06                       	dc.b	nCs1, $06
000886AD EC04                       	smpsPSGAlterVol     $04
000886AF E701                       	dc.b	smpsNoAttack, $01
000886B1 EC07                       	smpsPSGAlterVol     $07
000886B3 8003                       	dc.b	nRst, $03
000886B5 ECF5                       	smpsPSGAlterVol     $F5
000886B7 8E07                       	dc.b	nCs1, $07
000886B9 E1FF                       	smpsAlterNote       $FF
000886BB 9B06                       	dc.b	nD2, $06
000886BD EC04                       	smpsPSGAlterVol     $04
000886BF E701                       	dc.b	smpsNoAttack, $01
000886C1 ECFC                       	smpsPSGAlterVol     $FC
000886C3 9B03                       	dc.b	nD2, $03
000886C5 EC04                       	smpsPSGAlterVol     $04
000886C7 E701                       	dc.b	smpsNoAttack, $01
000886C9 ECFC                       	smpsPSGAlterVol     $FC
000886CB 9B02                       	dc.b	nD2, $02
000886CD EC04                       	smpsPSGAlterVol     $04
000886CF E701                       	dc.b	smpsNoAttack, $01
000886D1 ECFC                       	smpsPSGAlterVol     $FC
000886D3 E1FE                       	smpsAlterNote       $FE
000886D5 9A03                       	dc.b	nCs2, $03
000886D7 EC0B                       	smpsPSGAlterVol     $0B
000886D9 800A                       	dc.b	nRst, $0A
000886DB E102                       	smpsAlterNote       $02
000886DD 01                         	dc.b	$01
000886DE E10A                       	smpsAlterNote       $0A
000886E0 01                         	dc.b	$01
000886E1 E102                       	smpsAlterNote       $02
000886E3 01                         	dc.b	$01
000886E4 E1F7                       	smpsAlterNote       $F7
000886E6 01                         	dc.b	$01
000886E7 E10A                       	smpsAlterNote       $0A
000886E9 01                         	dc.b	$01
000886EA E1FC                       	smpsAlterNote       $FC
000886EC 01                         	dc.b	$01
000886ED E108                       	smpsAlterNote       $08
000886EF 0101                       	dc.b	$01, $01
000886F1 E102                       	smpsAlterNote       $02
000886F3 01                         	dc.b	$01
000886F4 E1F7                       	smpsAlterNote       $F7
000886F6 0101                       	dc.b	$01, $01
000886F8 E1FC                       	smpsAlterNote       $FC
000886FA ECF5                       	smpsPSGAlterVol     $F5
000886FC 8F06                       	dc.b	nD1, $06
000886FE EC04                       	smpsPSGAlterVol     $04
00088700 E701                       	dc.b	smpsNoAttack, $01
00088702 EC07                       	smpsPSGAlterVol     $07
00088704 8003                       	dc.b	nRst, $03
00088706 ECF5                       	smpsPSGAlterVol     $F5
00088708 8F06                       	dc.b	nD1, $06
0008870A EC04                       	smpsPSGAlterVol     $04
0008870C E701                       	dc.b	smpsNoAttack, $01
0008870E EC07                       	smpsPSGAlterVol     $07
00088710 8006                       	dc.b	nRst, $06
00088712 E1FF                       	smpsAlterNote       $FF
00088714 01                         	dc.b	$01
00088715 E102                       	smpsAlterNote       $02
00088717 01                         	dc.b	$01
00088718 E101                       	smpsAlterNote       $01
0008871A 01                         	dc.b	$01
0008871B E1FC                       	smpsAlterNote       $FC
0008871D 01                         	dc.b	$01
0008871E ECF5                       	smpsPSGAlterVol     $F5
00088720 9007                       	dc.b	nEb1, $07
00088722 EC0B                       	smpsPSGAlterVol     $0B
00088724 8004                       	dc.b	nRst, $04
00088726 ECF5                       	smpsPSGAlterVol     $F5
00088728 9006                       	dc.b	nEb1, $06
0008872A EC0B                       	smpsPSGAlterVol     $0B
0008872C 8007                       	dc.b	nRst, $07
0008872E E103                       	smpsAlterNote       $03
00088730 0101                       	dc.b	$01, $01
00088732 E1FF                       	smpsAlterNote       $FF
00088734 01                         	dc.b	$01
00088735 E1F9                       	smpsAlterNote       $F9
00088737 01                         	dc.b	$01
00088738 E1FC                       	smpsAlterNote       $FC
0008873A ECF5                       	smpsPSGAlterVol     $F5
0008873C 8F06                       	dc.b	nD1, $06
0008873E EC04                       	smpsPSGAlterVol     $04
00088740 E701                       	dc.b	smpsNoAttack, $01
00088742 EC07                       	smpsPSGAlterVol     $07
00088744 8003                       	dc.b	nRst, $03
00088746 ECF5                       	smpsPSGAlterVol     $F5
00088748 8F06                       	dc.b	nD1, $06
0008874A EC04                       	smpsPSGAlterVol     $04
0008874C E701                       	dc.b	smpsNoAttack, $01
0008874E EC07                       	smpsPSGAlterVol     $07
00088750 8006                       	dc.b	nRst, $06
00088752 E1FF                       	smpsAlterNote       $FF
00088754 01                         	dc.b	$01
00088755 E103                       	smpsAlterNote       $03
00088757 01                         	dc.b	$01
00088758 E1FF                       	smpsAlterNote       $FF
0008875A 01                         	dc.b	$01
0008875B E1F9                       	smpsAlterNote       $F9
0008875D 01                         	dc.b	$01
0008875E E1FC                       	smpsAlterNote       $FC
00088760 ECF5                       	smpsPSGAlterVol     $F5
00088762 8F06                       	dc.b	nD1, $06
00088764 EC04                       	smpsPSGAlterVol     $04
00088766 E701                       	dc.b	smpsNoAttack, $01
00088768 EC07                       	smpsPSGAlterVol     $07
0008876A 8003                       	dc.b	nRst, $03
0008876C ECF5                       	smpsPSGAlterVol     $F5
0008876E 8F07                       	dc.b	nD1, $07
00088770 EC0B                       	smpsPSGAlterVol     $0B
00088772 8006                       	dc.b	nRst, $06
00088774 E1FF                       	smpsAlterNote       $FF
00088776 01                         	dc.b	$01
00088777 E102                       	smpsAlterNote       $02
00088779 0101                       	dc.b	$01, $01
0008877B E1FC                       	smpsAlterNote       $FC
0008877D 01                         	dc.b	$01
0008877E ECF5                       	smpsPSGAlterVol     $F5
00088780 8F07                       	dc.b	nD1, $07
00088782 EC0B                       	smpsPSGAlterVol     $0B
00088784 8004                       	dc.b	nRst, $04
00088786 ECF5                       	smpsPSGAlterVol     $F5
00088788 8F06                       	dc.b	nD1, $06
0008878A EC04                       	smpsPSGAlterVol     $04
0008878C E701                       	dc.b	smpsNoAttack, $01
0008878E EC07                       	smpsPSGAlterVol     $07
00088790 8006                       	dc.b	nRst, $06
00088792 E101                       	smpsAlterNote       $01
00088794 01                         	dc.b	$01
00088795 E102                       	smpsAlterNote       $02
00088797 01                         	dc.b	$01
00088798 E1FF                       	smpsAlterNote       $FF
0008879A 01                         	dc.b	$01
0008879B E1F9                       	smpsAlterNote       $F9
0008879D 01                         	dc.b	$01
0008879E E1FC                       	smpsAlterNote       $FC
000887A0 ECF5                       	smpsPSGAlterVol     $F5
000887A2 9006                       	dc.b	nEb1, $06
000887A4 EC04                       	smpsPSGAlterVol     $04
000887A6 E701                       	dc.b	smpsNoAttack, $01
000887A8 EC07                       	smpsPSGAlterVol     $07
000887AA 8003                       	dc.b	nRst, $03
000887AC ECF5                       	smpsPSGAlterVol     $F5
000887AE 9006                       	dc.b	nEb1, $06
000887B0 EC04                       	smpsPSGAlterVol     $04
000887B2 E701                       	dc.b	smpsNoAttack, $01
000887B4 EC07                       	smpsPSGAlterVol     $07
000887B6 8006                       	dc.b	nRst, $06
000887B8 E100                       	smpsAlterNote       $00
000887BA 01                         	dc.b	$01
000887BB E102                       	smpsAlterNote       $02
000887BD 01                         	dc.b	$01
000887BE E100                       	smpsAlterNote       $00
000887C0 01                         	dc.b	$01
000887C1 E1FF                       	smpsAlterNote       $FF
000887C3 01                         	dc.b	$01
000887C4 ECF5                       	smpsPSGAlterVol     $F5
000887C6 9B06                       	dc.b	nD2, $06
000887C8 EC04                       	smpsPSGAlterVol     $04
000887CA E701                       	dc.b	smpsNoAttack, $01
000887CC EC07                       	smpsPSGAlterVol     $07
000887CE 8003                       	dc.b	nRst, $03
000887D0 ECF5                       	smpsPSGAlterVol     $F5
000887D2 9B07                       	dc.b	nD2, $07
000887D4 EC0B                       	smpsPSGAlterVol     $0B
000887D6 8007                       	dc.b	nRst, $07
000887D8 E105                       	smpsAlterNote       $05
000887DA 0101                       	dc.b	$01, $01
000887DC E1FF                       	smpsAlterNote       $FF
000887DE 01                         	dc.b	$01
000887DF E1FC                       	smpsAlterNote       $FC
000887E1 01                         	dc.b	$01
000887E2 E1FF                       	smpsAlterNote       $FF
000887E4 ECF5                       	smpsPSGAlterVol     $F5
000887E6 9B06                       	dc.b	nD2, $06
000887E8 EC0B                       	smpsPSGAlterVol     $0B
000887EA 8004                       	dc.b	nRst, $04
000887EC ECF5                       	smpsPSGAlterVol     $F5
000887EE 9B06                       	dc.b	nD2, $06
000887F0 EC04                       	smpsPSGAlterVol     $04
000887F2 E701                       	dc.b	smpsNoAttack, $01
000887F4 EC07                       	smpsPSGAlterVol     $07
000887F6 8006                       	dc.b	nRst, $06
000887F8 E102                       	smpsAlterNote       $02
000887FA 01                         	dc.b	$01
000887FB E106                       	smpsAlterNote       $06
000887FD 01                         	dc.b	$01
000887FE E102                       	smpsAlterNote       $02
00088800 01                         	dc.b	$01
00088801 E1FC                       	smpsAlterNote       $FC
00088803 01                         	dc.b	$01
00088804 E1FF                       	smpsAlterNote       $FF
00088806 ECF5                       	smpsPSGAlterVol     $F5
00088808 9B06                       	dc.b	nD2, $06
0008880A EC04                       	smpsPSGAlterVol     $04
0008880C E701                       	dc.b	smpsNoAttack, $01
0008880E EC07                       	smpsPSGAlterVol     $07
00088810 8003                       	dc.b	nRst, $03
00088812 ECF5                       	smpsPSGAlterVol     $F5
00088814 9B07                       	dc.b	nD2, $07
00088816 EC0B                       	smpsPSGAlterVol     $0B
00088818 8006                       	dc.b	nRst, $06
0008881A E102                       	smpsAlterNote       $02
0008881C 01                         	dc.b	$01
0008881D E105                       	smpsAlterNote       $05
0008881F 0101                       	dc.b	$01, $01
00088821 E1FF                       	smpsAlterNote       $FF
00088823 01                         	dc.b	$01
00088824 ECF5                       	smpsPSGAlterVol     $F5
00088826 9B07                       	dc.b	nD2, $07
00088828 EC0B                       	smpsPSGAlterVol     $0B
0008882A 8004                       	dc.b	nRst, $04
0008882C ECF5                       	smpsPSGAlterVol     $F5
0008882E 9B06                       	dc.b	nD2, $06
00088830 EC04                       	smpsPSGAlterVol     $04
00088832 E701                       	dc.b	smpsNoAttack, $01
00088834 EC07                       	smpsPSGAlterVol     $07
00088836 8006                       	dc.b	nRst, $06
00088838 E105                       	smpsAlterNote       $05
0008883A 0101                       	dc.b	$01, $01
0008883C E102                       	smpsAlterNote       $02
0008883E 01                         	dc.b	$01
0008883F E1FC                       	smpsAlterNote       $FC
00088841 01                         	dc.b	$01
00088842 E1FF                       	smpsAlterNote       $FF
00088844 ECF5                       	smpsPSGAlterVol     $F5
00088846 9B06                       	dc.b	nD2, $06
00088848 EC04                       	smpsPSGAlterVol     $04
0008884A E701                       	dc.b	smpsNoAttack, $01
0008884C EC07                       	smpsPSGAlterVol     $07
0008884E 8003                       	dc.b	nRst, $03
00088850 ECF5                       	smpsPSGAlterVol     $F5
00088852 9B06                       	dc.b	nD2, $06
00088854 EC04                       	smpsPSGAlterVol     $04
00088856 E701                       	dc.b	smpsNoAttack, $01
00088858 EC07                       	smpsPSGAlterVol     $07
0008885A 8006                       	dc.b	nRst, $06
0008885C E102                       	smpsAlterNote       $02
0008885E 01                         	dc.b	$01
0008885F E106                       	smpsAlterNote       $06
00088861 01                         	dc.b	$01
00088862 E102                       	smpsAlterNote       $02
00088864 01                         	dc.b	$01
00088865 E1FF                       	smpsAlterNote       $FF
00088867 01                         	dc.b	$01
00088868 ECF5                       	smpsPSGAlterVol     $F5
0008886A 9B06                       	dc.b	nD2, $06
0008886C EC04                       	smpsPSGAlterVol     $04
0008886E E701                       	dc.b	smpsNoAttack, $01
00088870 EC07                       	smpsPSGAlterVol     $07
00088872 8003                       	dc.b	nRst, $03
00088874 ECF5                       	smpsPSGAlterVol     $F5
00088876 9B07                       	dc.b	nD2, $07
00088878 EC0B                       	smpsPSGAlterVol     $0B
0008887A 8007                       	dc.b	nRst, $07
0008887C E107                       	smpsAlterNote       $07
0008887E 0101                       	dc.b	$01, $01
00088880 E1FE                       	smpsAlterNote       $FE
00088882 01                         	dc.b	$01
00088883 E1FA                       	smpsAlterNote       $FA
00088885 0101                       	dc.b	$01, $01
00088887 E103                       	smpsAlterNote       $03
00088889 01                         	dc.b	$01
0008888A E109                       	smpsAlterNote       $09
0008888C 01                         	dc.b	$01
0008888D E107                       	smpsAlterNote       $07
0008888F 01                         	dc.b	$01
00088890 E1FE                       	smpsAlterNote       $FE
00088892 01                         	dc.b	$01
00088893 E108                       	smpsAlterNote       $08
00088895 01                         	dc.b	$01
00088896 E1FD                       	smpsAlterNote       $FD
00088898 ECF5                       	smpsPSGAlterVol     $F5
0008889A 940E                       	dc.b	nG1, $0E
0008889C E103                       	smpsAlterNote       $03
0008889E EC0B                       	smpsPSGAlterVol     $0B
000888A0 8001 01                    	dc.b	nRst, $01, $01
000888A3 E1FD                       	smpsAlterNote       $FD
000888A5 01                         	dc.b	$01
000888A6 E1FB                       	smpsAlterNote       $FB
000888A8 0101                       	dc.b	$01, $01
000888AA E100                       	smpsAlterNote       $00
000888AC 01                         	dc.b	$01
000888AD E103                       	smpsAlterNote       $03
000888AF 01                         	dc.b	$01
000888B0 E100                       	smpsAlterNote       $00
000888B2 01                         	dc.b	$01
000888B3 E1FD                       	smpsAlterNote       $FD
000888B5 01                         	dc.b	$01
000888B6 E1FA                       	smpsAlterNote       $FA
000888B8 01                         	dc.b	$01
000888B9 E1FD                       	smpsAlterNote       $FD
000888BB 01                         	dc.b	$01
000888BC E103                       	smpsAlterNote       $03
000888BE 0101                       	dc.b	$01, $01
000888C0 E100                       	smpsAlterNote       $00
000888C2 01                         	dc.b	$01
000888C3 E1FE                       	smpsAlterNote       $FE
000888C5 ECF5                       	smpsPSGAlterVol     $F5
000888C7 960D                       	dc.b	nA1, $0D
000888C9 E104                       	smpsAlterNote       $04
000888CB EC0B                       	smpsPSGAlterVol     $0B
000888CD 8001 01                    	dc.b	nRst, $01, $01
000888D0 E101                       	smpsAlterNote       $01
000888D2 01                         	dc.b	$01
000888D3 E1FB                       	smpsAlterNote       $FB
000888D5 0101                       	dc.b	$01, $01
000888D7 E1FE                       	smpsAlterNote       $FE
000888D9 01                         	dc.b	$01
000888DA E104                       	smpsAlterNote       $04
000888DC 0101                       	dc.b	$01, $01
000888DE E1FE                       	smpsAlterNote       $FE
000888E0 01                         	dc.b	$01
000888E1 E1FB                       	smpsAlterNote       $FB
000888E3 0101                       	dc.b	$01, $01
000888E5 E101                       	smpsAlterNote       $01
000888E7 01                         	dc.b	$01
000888E8 E104                       	smpsAlterNote       $04
000888EA 0101                       	dc.b	$01, $01
000888EC E1FE                       	smpsAlterNote       $FE
000888EE ECF5                       	smpsPSGAlterVol     $F5
000888F0 970D                       	dc.b	nBb1, $0D
000888F2 E101                       	smpsAlterNote       $01
000888F4 EC04                       	smpsPSGAlterVol     $04
000888F6 E701                       	dc.b	smpsNoAttack, $01
000888F8 EC07                       	smpsPSGAlterVol     $07
000888FA E104                       	smpsAlterNote       $04
000888FC 8001                       	dc.b	nRst, $01
000888FE E103                       	smpsAlterNote       $03
00088900 01                         	dc.b	$01
00088901 E1FE                       	smpsAlterNote       $FE
00088903 01                         	dc.b	$01
00088904 E1FA                       	smpsAlterNote       $FA
00088906 01                         	dc.b	$01
00088907 E1FE                       	smpsAlterNote       $FE
00088909 01                         	dc.b	$01
0008890A E101                       	smpsAlterNote       $01
0008890C 01                         	dc.b	$01
0008890D E104                       	smpsAlterNote       $04
0008890F 01                         	dc.b	$01
00088910 E101                       	smpsAlterNote       $01
00088912 01                         	dc.b	$01
00088913 E1FB                       	smpsAlterNote       $FB
00088915 01                         	dc.b	$01
00088916 E1FA                       	smpsAlterNote       $FA
00088918 01                         	dc.b	$01
00088919 E1FE                       	smpsAlterNote       $FE
0008891B 01                         	dc.b	$01
0008891C E103                       	smpsAlterNote       $03
0008891E 0101                       	dc.b	$01, $01
00088920 E101                       	smpsAlterNote       $01
00088922 01                         	dc.b	$01
00088923 E1FE                       	smpsAlterNote       $FE
00088925 ECF5                       	smpsPSGAlterVol     $F5
00088927 990D                       	dc.b	nC2, $0D
00088929 E104                       	smpsAlterNote       $04
0008892B EC0B                       	smpsPSGAlterVol     $0B
0008892D 8001 01                    	dc.b	nRst, $01, $01
00088930 E102                       	smpsAlterNote       $02
00088932 01                         	dc.b	$01
00088933 E1FC                       	smpsAlterNote       $FC
00088935 0101                       	dc.b	$01, $01
00088937 E102                       	smpsAlterNote       $02
00088939 01                         	dc.b	$01
0008893A E104                       	smpsAlterNote       $04
0008893C 01                         	dc.b	$01
0008893D E1FF                       	smpsAlterNote       $FF
0008893F ECF5                       	smpsPSGAlterVol     $F5
00088941 9B06                       	dc.b	nD2, $06
00088943 EC04                       	smpsPSGAlterVol     $04
00088945 E701                       	dc.b	smpsNoAttack, $01
00088947 EC07                       	smpsPSGAlterVol     $07
00088949 8003                       	dc.b	nRst, $03
0008894B ECF5                       	smpsPSGAlterVol     $F5
0008894D 9B07                       	dc.b	nD2, $07
0008894F EC0B                       	smpsPSGAlterVol     $0B
00088951 8006                       	dc.b	nRst, $06
00088953 E101                       	smpsAlterNote       $01
00088955 01                         	dc.b	$01
00088956 E104                       	smpsAlterNote       $04
00088958 0101                       	dc.b	$01, $01
0008895A E1FE                       	smpsAlterNote       $FE
0008895C 01                         	dc.b	$01
0008895D E1FC                       	smpsAlterNote       $FC
0008895F 01                         	dc.b	$01
00088960 E1FE                       	smpsAlterNote       $FE
00088962 ECF5                       	smpsPSGAlterVol     $F5
00088964 9C06                       	dc.b	nEb2, $06
00088966 EC0B                       	smpsPSGAlterVol     $0B
00088968 8004                       	dc.b	nRst, $04
0008896A ECF5                       	smpsPSGAlterVol     $F5
0008896C 9C06                       	dc.b	nEb2, $06
0008896E EC04                       	smpsPSGAlterVol     $04
00088970 E701                       	dc.b	smpsNoAttack, $01
00088972 EC07                       	smpsPSGAlterVol     $07
00088974 8006                       	dc.b	nRst, $06
00088976 E105                       	smpsAlterNote       $05
00088978 01                         	dc.b	$01
00088979 E106                       	smpsAlterNote       $06
0008897B 01                         	dc.b	$01
0008897C E102                       	smpsAlterNote       $02
0008897E 01                         	dc.b	$01
0008897F E1FB                       	smpsAlterNote       $FB
00088981 01                         	dc.b	$01
00088982 E1FF                       	smpsAlterNote       $FF
00088984 ECF5                       	smpsPSGAlterVol     $F5
00088986 9B06                       	dc.b	nD2, $06
00088988 EC04                       	smpsPSGAlterVol     $04
0008898A E701                       	dc.b	smpsNoAttack, $01
0008898C EC07                       	smpsPSGAlterVol     $07
0008898E 8003                       	dc.b	nRst, $03
00088990 ECF5                       	smpsPSGAlterVol     $F5
00088992 9B06                       	dc.b	nD2, $06
00088994 EC04                       	smpsPSGAlterVol     $04
00088996 E701                       	dc.b	smpsNoAttack, $01
00088998 EC07                       	smpsPSGAlterVol     $07
0008899A 8006                       	dc.b	nRst, $06
0008899C E101                       	smpsAlterNote       $01
0008899E 01                         	dc.b	$01
0008899F E105                       	smpsAlterNote       $05
000889A1 01                         	dc.b	$01
000889A2 E104                       	smpsAlterNote       $04
000889A4 01                         	dc.b	$01
000889A5 E1FE                       	smpsAlterNote       $FE
000889A7 01                         	dc.b	$01
000889A8 ECF5                       	smpsPSGAlterVol     $F5
000889AA 9C07                       	dc.b	nEb2, $07
000889AC EC0B                       	smpsPSGAlterVol     $0B
000889AE 8004                       	dc.b	nRst, $04
000889B0 ECF5                       	smpsPSGAlterVol     $F5
000889B2 9C06                       	dc.b	nEb2, $06
000889B4 EC0B                       	smpsPSGAlterVol     $0B
000889B6 8007                       	dc.b	nRst, $07
000889B8 E105                       	smpsAlterNote       $05
000889BA 0101                       	dc.b	$01, $01
000889BC E102                       	smpsAlterNote       $02
000889BE 01                         	dc.b	$01
000889BF E1FB                       	smpsAlterNote       $FB
000889C1 01                         	dc.b	$01
000889C2 E1FF                       	smpsAlterNote       $FF
000889C4 ECF5                       	smpsPSGAlterVol     $F5
000889C6 9B06                       	dc.b	nD2, $06
000889C8 EC04                       	smpsPSGAlterVol     $04
000889CA E701                       	dc.b	smpsNoAttack, $01
000889CC EC07                       	smpsPSGAlterVol     $07
000889CE 8003                       	dc.b	nRst, $03
000889D0 ECF5                       	smpsPSGAlterVol     $F5
000889D2 9B06                       	dc.b	nD2, $06
000889D4 EC04                       	smpsPSGAlterVol     $04
000889D6 E701                       	dc.b	smpsNoAttack, $01
000889D8 EC07                       	smpsPSGAlterVol     $07
000889DA 8006                       	dc.b	nRst, $06
000889DC E101                       	smpsAlterNote       $01
000889DE 01                         	dc.b	$01
000889DF E105                       	smpsAlterNote       $05
000889E1 01                         	dc.b	$01
000889E2 E101                       	smpsAlterNote       $01
000889E4 01                         	dc.b	$01
000889E5 E1FC                       	smpsAlterNote       $FC
000889E7 01                         	dc.b	$01
000889E8 E1FE                       	smpsAlterNote       $FE
000889EA ECF5                       	smpsPSGAlterVol     $F5
000889EC 9C06                       	dc.b	nEb2, $06
000889EE EC04                       	smpsPSGAlterVol     $04
000889F0 E701                       	dc.b	smpsNoAttack, $01
000889F2 EC07                       	smpsPSGAlterVol     $07
000889F4 8003                       	dc.b	nRst, $03
000889F6 ECF5                       	smpsPSGAlterVol     $F5
000889F8 9C07                       	dc.b	nEb2, $07
000889FA EC0B                       	smpsPSGAlterVol     $0B
000889FC 8006                       	dc.b	nRst, $06
000889FE E102                       	smpsAlterNote       $02
00088A00 01                         	dc.b	$01
00088A01 E105                       	smpsAlterNote       $05
00088A03 0101                       	dc.b	$01, $01
00088A05 E1FF                       	smpsAlterNote       $FF
00088A07 01                         	dc.b	$01
00088A08 ECF5                       	smpsPSGAlterVol     $F5
00088A0A 9B07                       	dc.b	nD2, $07
00088A0C EC0B                       	smpsPSGAlterVol     $0B
00088A0E 8004                       	dc.b	nRst, $04
00088A10 ECF5                       	smpsPSGAlterVol     $F5
00088A12 9B06                       	dc.b	nD2, $06
00088A14 EC04                       	smpsPSGAlterVol     $04
00088A16 E701                       	dc.b	smpsNoAttack, $01
00088A18 EC07                       	smpsPSGAlterVol     $07
00088A1A 8002                       	dc.b	nRst, $02
00088A1C E1FC                       	smpsAlterNote       $FC
00088A1E ECF5                       	smpsPSGAlterVol     $F5
00088A20 9006                       	dc.b	nEb1, $06
00088A22 EC04                       	smpsPSGAlterVol     $04
00088A24 E701                       	dc.b	smpsNoAttack, $01
00088A26 ECFC                       	smpsPSGAlterVol     $FC
00088A28 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00088A2C EC04                       	smpsPSGAlterVol     $04
00088A2E E701                       	dc.b	smpsNoAttack, $01
00088A30 E1FD                       	smpsAlterNote       $FD
00088A32 ECFC                       	smpsPSGAlterVol     $FC
00088A34 9402                       	dc.b	nG1, $02
00088A36 EC04                       	smpsPSGAlterVol     $04
00088A38 E701                       	dc.b	smpsNoAttack, $01
00088A3A E1FE                       	smpsAlterNote       $FE
00088A3C ECFC                       	smpsPSGAlterVol     $FC
00088A3E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00088A42 EC04                       	smpsPSGAlterVol     $04
00088A44 E701                       	dc.b	smpsNoAttack, $01
00088A46 EC07                       	smpsPSGAlterVol     $07
00088A48 8008                       	dc.b	nRst, $08
00088A4A F6F4 F3                    	smpsJump            music84_Jump06
00088A4D                            
00088A4D                            ; PSG3 Data
00088A4D                            music84_PSG3:
00088A4D F500                       	smpsPSGvoice        $00
00088A4F E1FF                       	smpsAlterNote       $FF
00088A51 EC0F                       	smpsPSGAlterVol     $0F
00088A53 803A                       	dc.b	nRst, $3A
00088A55                            
00088A55                            music84_Jump05:
00088A55 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00088A61 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00088A6B F6FF E8                    	smpsJump            music84_Jump05
00088A6E                            
00088A6E                            ; DAC Data
00088A6E                            music84_DAC:
00088A6E E0C0                       	smpsPan             panCenter, $00
00088A70 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00088A7C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00088A88 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00088A94 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00088AA0 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00088AAC 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00088AB8 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00088AC4 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00088AD0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00088ADC 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00088AE8 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00088AF4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00088B00 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00088B0C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00088B18 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00088B24 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00088B30 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00088B3C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00088B48 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00088B54 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00088B60 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00088B6C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00088B78 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00088B84 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00088B90 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00088B9C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00088BA8 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00088BB4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00088BC0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00088BCC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00088BD8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00088BE4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00088BF0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00088BFC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00088C08 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00088C14 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00088C20 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00088C2C 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00088C38 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00088C44 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00088C50 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00088C5C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00088C68 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00088C74 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00088C80 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00088C8C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00088C98 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00088CA4 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00088CB0 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00088CBC 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00088CC8 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00088CD4 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00088CE0 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00088CEC 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00088CF8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00088D04 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00088D10 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00088D1C 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00088D28 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00088D34 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00088D40 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00088D4C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00088D58 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00088D64 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00088D70 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00088D7C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00088D88 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00088D94 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00088DA0 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00088DAC 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00088DB8 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00088DC4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00088DD0 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00088DDC 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00088DE8 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00088DF4 E0C0                       	smpsPan             panCenter, $00
00088DF6 F2                         	smpsStop
00088DF7                            
00088DF7                            music84_Voices:
00088DF7                            ;	Voice $00
00088DF7                            ;	$3D
00088DF7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00088DF7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00088DF7                            	smpsVcAlgorithm     $05
00088DF7                            	smpsVcFeedback      $07
00088DF7                            	smpsVcUnusedBits    $00
00088DF7                            	smpsVcDetune        $05, $04, $03, $04
00088DF7                            	smpsVcCoarseFreq    $01, $01, $01, $01
00088DF7                            	smpsVcRateScale     $00, $00, $00, $00
00088DF7                            	smpsVcAttackRate    $11, $11, $11, $11
00088DF7                            	smpsVcAmpMod        $00, $00, $00, $00
00088DF7                            	smpsVcDecayRate1    $00, $00, $00, $0A
00088DF7                            	smpsVcDecayRate2    $00, $00, $00, $0B
00088DF7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00088DF7                            	smpsVcReleaseRate   $08, $08, $08, $07
00088DF7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00088E10                            
00088E10                            ;	Voice $01
00088E10                            ;	$04
00088E10                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00088E10                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00088E10                            	smpsVcAlgorithm     $04
00088E10                            	smpsVcFeedback      $00
00088E10                            	smpsVcUnusedBits    $00
00088E10                            	smpsVcDetune        $04, $03, $04, $05
00088E10                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00088E10                            	smpsVcRateScale     $00, $01, $00, $01
00088E10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00088E10                            	smpsVcAmpMod        $00, $00, $00, $00
00088E10                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00088E10                            	smpsVcDecayRate2    $05, $00, $05, $00
00088E10                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00088E10                            	smpsVcReleaseRate   $06, $06, $06, $06
00088E10 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00088E29                            
00088E29                            ;	Voice $02
00088E29                            ;	$30
00088E29                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00088E29                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00088E29                            	smpsVcAlgorithm     $00
00088E29                            	smpsVcFeedback      $06
00088E29                            	smpsVcUnusedBits    $00
00088E29                            	smpsVcDetune        $04, $02, $00, $06
00088E29                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00088E29                            	smpsVcRateScale     $00, $00, $00, $00
00088E29                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00088E29                            	smpsVcAmpMod        $00, $00, $00, $00
00088E29                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00088E29                            	smpsVcDecayRate2    $01, $01, $01, $01
00088E29                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00088E29                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00088E29 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00088E42                            
00088E42                            ;	Voice $03
00088E42                            ;	$3A
00088E42                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00088E42                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00088E42                            	smpsVcAlgorithm     $02
00088E42                            	smpsVcFeedback      $07
00088E42                            	smpsVcUnusedBits    $00
00088E42                            	smpsVcDetune        $04, $06, $02, $00
00088E42                            	smpsVcCoarseFreq    $01, $01, $01, $01
00088E42                            	smpsVcRateScale     $00, $00, $00, $00
00088E42                            	smpsVcAttackRate    $18, $19, $14, $14
00088E42                            	smpsVcAmpMod        $00, $00, $00, $00
00088E42                            	smpsVcDecayRate1    $09, $0D, $09, $09
00088E42                            	smpsVcDecayRate2    $00, $00, $00, $00
00088E42                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00088E42                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00088E42 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00088E5B                            
00088E5B                            ;	Voice $04
00088E5B                            ;	$3C
00088E5B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00088E5B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00088E5B                            	smpsVcAlgorithm     $04
00088E5B                            	smpsVcFeedback      $07
00088E5B                            	smpsVcUnusedBits    $00
00088E5B                            	smpsVcDetune        $07, $00, $00, $03
00088E5B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00088E5B                            	smpsVcRateScale     $00, $00, $00, $00
00088E5B                            	smpsVcAttackRate    $10, $1F, $10, $1F
00088E5B                            	smpsVcAmpMod        $00, $00, $00, $00
00088E5B                            	smpsVcDecayRate1    $00, $00, $00, $00
00088E5B                            	smpsVcDecayRate2    $00, $00, $00, $00
00088E5B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00088E5B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00088E5B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00088E74                            
00088E74                            ;	Voice $05
00088E74                            ;	$38
00088E74                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00088E74                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00088E74                            	smpsVcAlgorithm     $00
00088E74                            	smpsVcFeedback      $07
00088E74                            	smpsVcUnusedBits    $00
00088E74                            	smpsVcDetune        $04, $06, $02, $00
00088E74                            	smpsVcCoarseFreq    $01, $01, $01, $00
00088E74                            	smpsVcRateScale     $00, $00, $00, $00
00088E74                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00088E74                            	smpsVcAmpMod        $00, $00, $00, $00
00088E74                            	smpsVcDecayRate1    $00, $03, $00, $17
00088E74                            	smpsVcDecayRate2    $00, $08, $08, $0B
00088E74                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00088E74                            	smpsVcReleaseRate   $08, $05, $05, $05
00088E74 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00088E8D                            
00088E8D                            
00088E8E 00                         		even
00088E8E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008D09E                            		even
0008D09E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00090BF6 00                         		even
00090BF6                            Music87:	include	sound\music87.asm; Invincibility
00090BF6                            triple_Header:
00090BF6 =00000001                  smpsHeaderStartSong = 1
00090BF6 0000                       	smpsHeaderVoice     triple_Voices
00090BF8 0501                       	smpsHeaderChan      $05, $01
00090BFA 0200                       	smpsHeaderTempo     $02, $00
00090BFC                            
00090C00 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00090C04 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00090C08 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00090C0C 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00090C10 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00090C16                            
00090C16                            ; DAC Data
00090C16                            triple_DAC:
00090C16 E0C0                       	smpsPan             panCenter, $00
00090C18 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00090C1E                            
00090C1E                            triple_Loop01:
00090C1E 8282 82                    	dc.b	dSnare, dSnare, dSnare
00090C21                            
00090C21                            triple_Loop00:
00090C21 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00090C2D 06                         	dc.b	$06
00090C2E F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00090C33 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00090C3F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00090C46 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00090C4B 0303 1B                    	dc.b	$03, $03, $1B
00090C4E E0C0                       	smpsPan             panCenter, $00
00090C50 F6FF C4                    	smpsJump triple_DAC
00090C53                            
00090C53                            ; FM1 Data
00090C53                            triple_FM1:
00090C53 E0C0                       	smpsPan             panCenter, $00
00090C57 8018                       	dc.b	nRst, $18
00090C59                            
00090C59                            triple_Loop0B:
00090C59 AC06 B8                    	dc.b	nG3, $06, nG4
00090C5C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00090C61                            
00090C61                            triple_Loop0C:
00090C61 A7B3                       	dc.b	nD3, nD4
00090C63 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00090C68                            
00090C68                            triple_Loop0D:
00090C68 A9B5                       	dc.b	nE3, nE4
00090C6A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00090C6F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00090C77 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00090C7C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00090C88 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00090C94 AD                         	dc.b	nAb3
00090C95 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00090C9A 8018                       	dc.b	nRst, $18
00090C9C E0C0                       	smpsPan             panCenter, $00
00090CA0 F6FF B1                    	smpsJump triple_FM1
00090CA3                            
00090CA3                            ; FM2 Data
00090CA3                            triple_FM2:
00090CA3 E0C0                       	smpsPan             panCenter, $00
00090CA7 8018                       	dc.b	nRst, $18
00090CA9                            
00090CA9                            triple_Loop07:
00090CA9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090CB5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090CC1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00090CC6 8003                       	dc.b	nRst, $03
00090CC8                            
00090CC8                            triple_Loop08:
00090CC8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090CCE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00090CD3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00090CD9                            
00090CD9                            triple_Loop09:
00090CD9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090CE5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090CF1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00090CF6 8003                       	dc.b	nRst, $03
00090CF8                            
00090CF8                            triple_Loop0A:
00090CF8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090CFE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00090D03 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00090D09 E0C0                       	smpsPan             panCenter, $00
00090D0D F6FF 94                    	smpsJump triple_FM2
00090D10                            
00090D10                            ; FM3 Data
00090D10                            triple_FM3:
00090D10 E0C0                       	smpsPan             panCenter, $00
00090D14 8018                       	dc.b	nRst, $18
00090D16                            
00090D16                            triple_Loop06:
00090D16 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00090D1D F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00090D22 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00090D2E BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00090D3A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00090D3D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00090D42 8018                       	dc.b	nRst, $18
00090D44 E0C0                       	smpsPan             panCenter, $00
00090D48 F6FF C6                    	smpsJump triple_FM3
00090D4B                            
00090D4B                            ; FM4 Data
00090D4B                            triple_FM4:
00090D4B E103                       	smpsAlterNote       $03
00090D4F E0C0                       	smpsPan             panCenter, $00
00090D51 8018                       	dc.b	nRst, $18
00090D53                            
00090D53                            triple_Loop02:
00090D53 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090D5F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090D6B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00090D70 8003                       	dc.b	nRst, $03
00090D72                            
00090D72                            triple_Loop03:
00090D72 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090D78 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00090D7D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00090D83                            
00090D83                            triple_Loop04:
00090D83 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090D8F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090D9B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00090DA0 8003                       	dc.b	nRst, $03
00090DA2                            
00090DA2                            triple_Loop05:
00090DA2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090DA8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00090DAD B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00090DB3 E0C0                       	smpsPan             panCenter, $00
00090DB5 F6FF 94                    	smpsJump triple_FM4
00090DB8                            
00090DB8                            ; PSG1 Data
00090DB8                            triple_PSG1:
00090DB8 8018                       	dc.b	nRst, $18
00090DBA                            
00090DBA                            triple_Loop0E:
00090DBA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090DC6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090DD2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090DDE 9402 8004                  	dc.b	nG1, $02, nRst, $04
00090DE2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00090DE7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090DF3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090DFF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090E0B 9402 8007                  	dc.b	nG1, $02, nRst, $07
00090E0F                            
00090E0F                            triple_Loop0F:
00090E0F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00090E15 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00090E1A 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00090E20                            
00090E20                            triple_Loop10:
00090E20 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090E2C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090E38 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090E44 9402 8004                  	dc.b	nG1, $02, nRst, $04
00090E48 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00090E4D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090E59 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090E65 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090E71 9402 8007                  	dc.b	nG1, $02, nRst, $07
00090E75                            
00090E75                            triple_Loop11:
00090E75 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00090E7B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00090E80 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00090E86 F500                       	smpsPSGvoice        $00
00090E88 F6FF 2E                    	smpsJump triple_PSG1
00090E8B                            
00090E8B                            triple_Voices:
00090E8B                            ;	Voice $00
00090E8B                            ;	$3A
00090E8B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00090E8B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00090E8B                            	smpsVcAlgorithm     $02
00090E8B                            	smpsVcFeedback      $07
00090E8B                            	smpsVcUnusedBits    $00
00090E8B                            	smpsVcDetune        $00, $00, $00, $00
00090E8B                            	smpsVcCoarseFreq    $01, $01, $07, $01
00090E8B                            	smpsVcRateScale     $01, $02, $02, $02
00090E8B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00090E8B                            	smpsVcAmpMod        $00, $00, $00, $00
00090E8B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00090E8B                            	smpsVcDecayRate2    $00, $00, $00, $00
00090E8B                            	smpsVcDecayLevel    $00, $01, $0F, $01
00090E8B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00090E8B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00090EA4                            
00090EA4                            ;	Voice $01
00090EA4                            ;	$20
00090EA4                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00090EA4                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00090EA4                            	smpsVcAlgorithm     $00
00090EA4                            	smpsVcFeedback      $04
00090EA4                            	smpsVcUnusedBits    $00
00090EA4                            	smpsVcDetune        $00, $00, $03, $07
00090EA4                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00090EA4                            	smpsVcRateScale     $03, $03, $03, $02
00090EA4                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00090EA4                            	smpsVcAmpMod        $00, $00, $00, $00
00090EA4                            	smpsVcDecayRate1    $04, $04, $0A, $10
00090EA4                            	smpsVcDecayRate2    $08, $08, $08, $0F
00090EA4                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00090EA4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00090EA4 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00090EA4 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00090EBE 00                         		even
00090EBE                            Music88:	incbin	sound\music88.bin; Extra Life
00090FAC                            		even
00090FAC                            Music89:	incbin	sound\music89.bin; Special Stage
00094E74 00                         		even
00094E74                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009503E                            		even
0009503E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000952D8                            		even
000952D8                            Music8C:	incbin	sound\music8C.bin; VS Boss
000954F4                            		even
000954F4                            Music8D:	incbin	sound\music8D.bin; Final Zone
00095710                            		even
00095710                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00095B7E 00                         		even
00095B7E                            Music8F:	incbin	sound\music8F.bin ; Game Over
000961BE 00                         		even
000961BE                            Music90:	incbin	sound\music90.bin ; Continue
0009631C                            		even
0009631C                            Music91:	incbin	sound\music91.bin ; Credits
000975EA                            		even
000975EA                            Music92:	incbin	sound\music92.bin ; Drowning
00097714                            		even
00097714                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000977E2                            		even
000977E2                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009781C 00                         		even
0009781C                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00097856 00                         		even
00097856                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
00097890 00                         		even
00097890                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000978CA 00                         		even
000978CA                            Music98:	incbin	sound\music98.bin ; Marble Act 2
00097904 00                         		even
00097904                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009793E 00                         		even
0009793E                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00097978 00                         		even
00097978                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000979B2 00                         		even
000979B2                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000979EC 00                         		even
000979EC                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
00097A26 00                         		even
00097A26                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
00097A60 00                         		even
00097A60                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00097A9A 00                         		even
00097A9A                            ; ---------------------------------------------------------------------------
00097A9A                            ; Sound	effect pointers
00097A9A                            ; ---------------------------------------------------------------------------
00097A9A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00097AA6 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00097AB2 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00097ABE 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00097ACA 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00097AD6 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00097AE2 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00097AEE 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00097AFA 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00097B06 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00097B12 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00097B1E 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00097B2A 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00097B36 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00097B42 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00097B4E 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00097B5A 0000 0000                  SoundD0Index:	dc.l SoundD0
00097B5E                            SoundA0:	incbin	sound\soundA0.bin
00097B74                            		even
00097B74                            SoundA1:	incbin	sound\soundA1.bin
00097B9E                            		even
00097B9E                            SoundA2:	incbin	sound\soundA2.bin
00097BBE                            		even
00097BBE                            SoundA3:	incbin	sound\soundA3.bin
00097BF0                            		even
00097BF0                            SoundA4:	incbin	sound\soundA4.bin
00097C26                            		even
00097C26                            SoundA5:	incbin	sound\soundA5.bin
00097C52                            		even
00097C52                            SoundA6:	incbin	sound\soundA6.bin
00097C82                            		even
00097C82                            SoundA7:	incbin	sound\soundA7.bin
00097CB2                            		even
00097CB2                            SoundA8:	incbin	sound\soundA8.bin
00097CE6                            		even
00097CE6                            SoundA9:	incbin	sound\soundA9.bin
00097CF8                            		even
00097CF8                            SoundAA:	incbin	sound\soundAA.bin
00097D3A                            		even
00097D3A                            SoundAB:	incbin	sound\soundAB.bin
00097D5A                            		even
00097D5A                            SoundAC:	incbin	sound\soundAC.bin
00097D8E                            		even
00097D8E                            SoundAD:	incbin	sound\soundAD.bin
00097DC4                            		even
00097DC4                            SoundAE:	incbin	sound\soundAE.bin
00097E0E                            		even
00097E0E                            SoundAF:	incbin	sound\soundAF.bin
00097E3C                            		even
00097E3C                            SoundB0:	incbin	sound\soundB0.bin
00097E6E                            		even
00097E6E                            SoundB1:	incbin	sound\soundB1.bin
00097E9A                            		even
00097E9A                            SoundB2:	incbin	sound\soundB2.bin
00097EEA                            		even
00097EEA                            SoundB3:	incbin	sound\soundB3.bin
00097F34                            		even
00097F34                            SoundB4:	include	sound\soundB4.asm
00097F34                            SndB4_Bumper_Header:
00097F34 =00000001                  smpsHeaderStartSong = 1
00097F34 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
00097F36 01                         	smpsHeaderTempoSFX  $01
00097F37 03                         	smpsHeaderChanSFX   $03
00097F38                            
00097F4A                            
00097F4A                            ; FM5 Data
00097F4A                            SndB4_Bumper_FM5:
00097F4C F600 00                    	smpsJump            SndB4_Bumper_Jump00
00097F4F                            
00097F4F                            ; FM4 Data
00097F4F                            SndB4_Bumper_FM4:
00097F4F F2                         	smpsStop
00097F50                            
00097F50                            SndB4_Bumper_Jump00:
00097F50 A020                       	dc.b	nG2, $20
00097F52 F2                         	smpsStop
00097F53                            
00097F53                            ; FM3 Data
00097F53                            SndB4_Bumper_FM3:
00097F53 F2                         	smpsStop
00097F54                            
00097F54                            SndB4_Bumper_Voices:
00097F54                            ;	Voice $00
00097F54                            ;	$32
00097F54                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
00097F54                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
00097F54                            	smpsVcAlgorithm     $02
00097F54                            	smpsVcFeedback      $06
00097F54                            	smpsVcUnusedBits    $00
00097F54                            	smpsVcDetune        $07, $07, $02, $00
00097F54                            	smpsVcCoarseFreq    $00, $00, $00, $04
00097F54                            	smpsVcRateScale     $00, $00, $00, $00
00097F54                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00097F54                            	smpsVcAmpMod        $00, $00, $00, $00
00097F54                            	smpsVcDecayRate1    $08, $00, $00, $09
00097F54                            	smpsVcDecayRate2    $0B, $00, $00, $09
00097F54                            	smpsVcDecayLevel    $00, $00, $00, $00
00097F54                            	smpsVcReleaseRate   $0F, $00, $00, $00
00097F54 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00097F54 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00097F6E 00                         		even
00097F6E                            SoundB5:	incbin	sound\soundB5.bin
00097F9C                            		even
00097F9C                            SoundB6:	incbin	sound\soundB6.bin
00097FBA                            		even
00097FBA                            SoundB7:	incbin	sound\soundB7.bin
00097FF6                            		even
00097FF6                            SoundB8:	incbin	sound\soundB8.bin
00098014                            		even
00098014                            SoundB9:	incbin	sound\soundB9.bin
00098078                            		even
00098078                            SoundBA:	incbin	sound\soundBA.bin
000980A0                            		even
000980A0                            SoundBB:	incbin	sound\soundBB.bin
000980CC                            		even
000980CC                            SoundBC:	incbin	sound\soundBC.bin
0009810E                            		even
0009810E                            SoundBD:	incbin	sound\soundBD.bin
00098162                            		even
00098162                            SoundBE:	incbin	sound\soundBE.bin
0009819C                            		even
0009819C                            SoundBF:	incbin	sound\soundBF.bin
0009820E                            		even
0009820E                            SoundC0:	incbin	sound\soundC0.bin
0009823C                            		even
0009823C                            SoundC1:	incbin	sound\soundC1.bin
00098296                            		even
00098296                            SoundC2:	incbin	sound\soundC2.bin
000982C0                            		even
000982C0                            SoundC3:	incbin	sound\soundC3.bin
0009833A                            		even
0009833A                            SoundC4:	incbin	sound\soundC4.bin
00098362                            		even
00098362                            SoundC5:	incbin	sound\soundC5.bin
000983CA                            		even
000983CA                            SoundC6:	incbin	sound\soundC6.bin
0009840C                            		even
0009840C                            SoundC7:	incbin	sound\soundC7.bin
0009843A                            		even
0009843A                            SoundC8:	incbin	sound\soundC8.bin
0009844C                            		even
0009844C                            SoundC9:	incbin	sound\soundC9.bin
0009847A                            		even
0009847A                            SoundCA:	incbin	sound\soundCA.bin
000984A8                            		even
000984A8                            SoundCB:	incbin	sound\soundCB.bin
000984F4                            		even
000984F4                            SoundCC:	incbin	sound\soundCC.bin
0009852E                            		even
0009852E                            SoundCD:	incbin	sound\soundCD.bin
0009853C                            		even
0009853C                            SoundCE:	incbin	sound\soundCE.bin
0009856A                            		even
0009856A                            SoundCF:	incbin	sound\soundCF.bin
000985A2                            		even
000985A2                            SoundD0:	incbin	sound\soundD0.bin
000985DC                            		even
000985DC                            SegaPCM:	incbin	sound\segapcm.bin
000B2732                            SegaPCM_end:	even
000B2732                            
000B2732                            IdiotPCM:	incbin	sound\youare.bin
000BC804 00                         IdiotPCM_end:	even
000BC804                            
000BC804                            ; end of 'ROM'
000BC804                            EndOfRom:
000BC804                            
000BC804                            
