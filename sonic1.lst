00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000346                            
00000346                            GameInit:
00000346 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000034C 7E00                       		moveq	#0,d7
0000034E 3C3C 3F7F                  		move.w	#$3F7F,d6
00000352                            
00000352                            GameClrRAM:
00000352 2CC7                       		move.l	d7,(a6)+
00000354 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000358                            
00000358 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
0000035E 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000366                            
00000366 6100 0000                  		bsr.w	VDPSetupGame
0000036A 6100 0000                  		bsr.w	SoundDriverLoad
0000036E 6100 0000                  		bsr.w	JoypadInit
00000372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000378                            
00000378                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000378                            
00000378                            MainGameLoop:
00000378 707E                       		moveq	#$7E,d0
0000037A C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
0000037E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000382 60F4                       		bra.s	MainGameLoop
00000384                            ; ===========================================================================
00000384                            ; ---------------------------------------------------------------------------
00000384                            ; Main game mode array
00000384                            ; ---------------------------------------------------------------------------
00000384                            
00000384                            GameModeArray:
00000384 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000398                            ; ===========================================================================
00000398 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000039C                            ; ===========================================================================
0000039C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003A4                            ; ===========================================================================
000003A4 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            CheckSumError:
000003AA 6100 0000                  		bsr.w	VDPSetupGame
000003AE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003B8 7E3F                       		moveq	#$3F,d7
000003BA                            
000003BA                            CheckSum_Red:
000003BA 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003C2 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003C6                            
000003C6                            CheckSum_Loop:
000003C6 60FE                       		bra.s	CheckSum_Loop
000003C8                            ; ===========================================================================
000003C8                            
000003C8                            BusError:
000003C8 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003CE 6000                       		bra.s	loc_43A
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            AddressError:
000003D0 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_43A
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            IllegalInstr:
000003D8 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003DE 54AF 0002                  		addq.l	#2,2(sp)
000003E2 6000                       		bra.s	loc_462
000003E4                            ; ===========================================================================
000003E4                            
000003E4                            ZeroDivide:
000003E4 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003EA 6000                       		bra.s	loc_462
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            ChkInstr:
000003EC 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_462
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            TrapvInstr:
000003F4 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_462
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            PrivilegeViol:
000003FC 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000402 6000                       		bra.s	loc_462
00000404                            ; ===========================================================================
00000404                            
00000404                            Trace:
00000404 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000040A 6000                       		bra.s	loc_462
0000040C                            ; ===========================================================================
0000040C                            
0000040C                            Line1010Emu:
0000040C 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000412 54AF 0002                  		addq.l	#2,2(sp)
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            Line1111Emu:
00000418 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000041E 54AF 0002                  		addq.l	#2,2(sp)
00000422 6000                       		bra.s	loc_462
00000424                            ; ===========================================================================
00000424                            
00000424                            ErrorExcept:
00000424 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000042A 6000                       		bra.s	loc_462
0000042C                            ; ===========================================================================
0000042C                            
0000042C                            loc_43A:
0000042C 46FC 2700                  		move	#$2700,sr
00000430 544F                       		addq.w	#2,sp
00000432 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000436 544F                       		addq.w	#2,sp
00000438 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000043E 6100 0000                  		bsr.w	ShowErrorMsg
00000442 202F 0002                  		move.l	2(sp),d0
00000446 6100 0000                  		bsr.w	sub_5BA
0000044A 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000044E 6100 0000                  		bsr.w	sub_5BA
00000452 6000                       		bra.s	loc_478
00000454                            ; ===========================================================================
00000454                            
00000454                            loc_462:
00000454 46FC 2700                  		move	#$2700,sr
00000458 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000045E 6100 0000                  		bsr.w	ShowErrorMsg
00000462 202F 0002                  		move.l	2(sp),d0
00000466 6100 0000                  		bsr.w	sub_5BA
0000046A                            
0000046A                            loc_478:
0000046A 6100 0000                  		bsr.w	ErrorWaitForC
0000046E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000474 46FC 2300                  		move	#$2300,sr
00000478 4E73                       		rte	
0000047A                            
0000047A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000047A                            
0000047A                            
0000047A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000047A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000480 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000048A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000490 323C 027F                  		move.w	#$27F,d1
00000494                            
00000494                            Error_LoadGfx:
00000494 3C98                       		move.w	(a0)+,(a6)
00000496 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000049A 7000                       		moveq	#0,d0		; clear	d0
0000049C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004A0 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004A4 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004A8 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004B2 7212                       		moveq	#$12,d1		; number of characters
000004B4                            
000004B4                            Error_LoopChars:
000004B4 7000                       		moveq	#0,d0
000004B6 1018                       		move.b	(a0)+,d0
000004B8 0640 0790                  		addi.w	#$790,d0
000004BC 3C80                       		move.w	d0,(a6)
000004BE 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004C2 4E75                       		rts	
000004C4                            ; End of function ShowErrorMsg
000004C4                            
000004C4                            ; ===========================================================================
000004C4 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004C8 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004CC 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004D0 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004D4 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004D8 0000                       		dc.w asc_5A6-ErrorText
000004DA 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004ED 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000500 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000513 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000526 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000539 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000054C 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000055F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000572 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000585 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000598 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005AC 00                         		even
000005AC                            
000005AC                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005AC                            
000005AC                            
000005AC                            sub_5BA:				; XREF: loc_43A; loc_462
000005AC 3CBC 07CA                  		move.w	#$7CA,(a6)
000005B0 7407                       		moveq	#7,d2
000005B2                            
000005B2                            loc_5C0:
000005B2 E998                       		rol.l	#4,d0
000005B4 6100                       		bsr.s	sub_5CA
000005B6 51CA FFFA                  		dbf	d2,loc_5C0
000005BA 4E75                       		rts	
000005BC                            ; End of function sub_5BA
000005BC                            
000005BC                            
000005BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BC                            
000005BC                            
000005BC                            sub_5CA:				; XREF: sub_5BA
000005BC 3200                       		move.w	d0,d1
000005BE 0241 000F                  		andi.w	#$F,d1
000005C2 0C41 000A                  		cmpi.w	#$A,d1
000005C6 6500                       		bcs.s	loc_5D8
000005C8 5E41                       		addq.w	#7,d1
000005CA                            
000005CA                            loc_5D8:
000005CA 0641 07C0                  		addi.w	#$7C0,d1
000005CE 3C81                       		move.w	d1,(a6)
000005D0 4E75                       		rts	
000005D2                            ; End of function sub_5CA
000005D2                            
000005D2                            
000005D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D2                            
000005D2                            
000005D2                            ErrorWaitForC:				; XREF: loc_478
000005D2 6100 0000                  		bsr.w	ReadJoypads
000005D6 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005DC 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005E0 4E75                       		rts	
000005E2                            ; End of function ErrorWaitForC
000005E2                            
000005E2                            ; ===========================================================================
000005E2                            
000005E2                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D22                            Art_Text_end:		even
00000D22                            
00000D22                            ; ===========================================================================
00000D22                            ;VBlank
00000D22                            loc_B10:				; XREF: Vectors
00000D22 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D26 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D2A 6700                       		beq.s	loc_B88
00000D2C 3039 00C0 0004             		move.w	($C00004).l,d0
00000D32 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D3C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D44                            ;		btst	#6,($FFFFFFF8).w
00000D44                            ;		beq.s	loc_B42
00000D44                            ;		move.w	#$700,d0
00000D44                            ;
00000D44                            ;loc_B3E:
00000D44                            ;		dbf	d0,loc_B3E
00000D44                            
00000D44                            ;loc_B42:
00000D44 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D48 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D4E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D54 0240 003E                  		andi.w	#$3E,d0
00000D58 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D5C 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D60                            
00000D60                            loc_B5E:				; XREF: loc_B88
00000D60 4EB9 0000 0000             		jsr	sub_71B4C
00000D66                            
00000D66                            loc_B64:				; XREF: loc_D50
00000D66 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D6A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D6E 4E73                       		rte	
00000D70                            ; ===========================================================================
00000D70 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D74 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D78 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D7C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D80 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000D84 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000D88 0000                       		dc.w loc_E72-off_B6E
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_B88:				; XREF: loc_B10; off_B6E
00000D8A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000D90 6700                       		beq.s	loc_B9A
00000D92 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000D98 6600 FFC6                  		bne.w	loc_B5E
00000D9C                            
00000D9C                            loc_B9A:
00000D9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DA2 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DA6 3039 00C0 0004             		move.w	($C00004).l,d0
00000DAC                            ;		btst	#6,($FFFFFFF8).w
00000DAC                            ;		beq.s	loc_BBA
00000DAC                            ;		move.w	#$700,d0
00000DAC                            ;
00000DAC                            ;loc_BB6:
00000DAC                            ;		dbf	d0,loc_BB6
00000DAC                            ;
00000DAC                            ;loc_BBA:
00000DAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DB2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DBA                            
00000DBA                            loc_BC8:
00000DBA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DC2 66F6                       		bne.s	loc_BC8
00000DC4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DC8 6600                       		bne.s	loc_BFE
00000DCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DD6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DDC 3ABC 977F                  		move.w	#$977F,(a5)
00000DE0 3ABC C000                  		move.w	#$C000,(a5)
00000DE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DEE 6000                       		bra.s	loc_C22
00000DF0                            ; ===========================================================================
00000DF0                            
00000DF0                            loc_BFE:				; XREF: loc_BC8
00000DF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DFC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E02 3ABC 977F                  		move.w	#$977F,(a5)
00000E06 3ABC C000                  		move.w	#$C000,(a5)
00000E0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E14                            
00000E14                            loc_C22:				; XREF: loc_BC8
00000E14 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E18 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E20 6000 FF3E                  		bra.w	loc_B5E
00000E24                            ; ===========================================================================
00000E24                            
00000E24                            loc_C32:				; XREF: off_B6E
00000E24 6100 0000                  		bsr.w	sub_106E
00000E28                            
00000E28                            loc_C36:				; XREF: off_B6E
00000E28 4A78 F614                  		tst.w	($FFFFF614).w
00000E2C 6700 0000                  		beq.w	locret_C42
00000E30 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E34                            
00000E34                            locret_C42:
00000E34 4E75                       		rts	
00000E36                            ; ===========================================================================
00000E36                            
00000E36                            loc_C44:				; XREF: off_B6E
00000E36 6100 0000                  		bsr.w	sub_106E
00000E3A 6100 0000                  		bsr.w	sub_6886
00000E3E 6100 0000                  		bsr.w	sub_1642
00000E42 4A78 F614                  		tst.w	($FFFFF614).w
00000E46 6700 0000                  		beq.w	locret_C5C
00000E4A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E4E                            
00000E4E                            locret_C5C:
00000E4E 4E75                       		rts	
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_C5E:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	sub_106E
00000E54 4E75                       		rts	
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C64:				; XREF: off_B6E
00000E56 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E5C 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E60                            
00000E60                            loc_C6E:				; XREF: off_B6E
00000E60 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E68                            
00000E68                            loc_C76:
00000E68 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E70 66F6                       		bne.s	loc_C76		; if not, branch
00000E72 6100 0000                  		bsr.w	ReadJoypads
00000E76 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E7A 6600                       		bne.s	loc_CB0
00000E7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E8E 3ABC 977F                  		move.w	#$977F,(a5)
00000E92 3ABC C000                  		move.w	#$C000,(a5)
00000E96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA0 6000                       		bra.s	loc_CD4
00000EA2                            ; ===========================================================================
00000EA2                            
00000EA2                            loc_CB0:				; XREF: loc_C76
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC C000                  		move.w	#$C000,(a5)
00000EBC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6                            
00000EC6                            loc_CD4:				; XREF: loc_C76
00000EC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EDC 3ABC 977F                  		move.w	#$977F,(a5)
00000EE0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F00 3ABC 977F                  		move.w	#$977F,(a5)
00000F04 3ABC 7800                  		move.w	#$7800,(a5)
00000F08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F12 4A38 F767                  		tst.b	($FFFFF767).w
00000F16 6700                       		beq.s	loc_D50
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F24 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC 7000                  		move.w	#$7000,(a5)
00000F32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F42                            
00000F42                            loc_D50:
00000F42 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F4A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F50 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F56 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F5C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F62 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F68 6400                       		bcc.s	Demo_Time
00000F6A 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F70 588F                       		addq.l	#4,sp
00000F72 6000 FDF2                  		bra.w	loc_B64
00000F76                            
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            ; Subroutine to	run a demo for an amount of time
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            
00000F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F76                            
00000F76                            
00000F76                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000F76 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F7A 4EB9 0000 0000             		jsr	AniArt_Load
00000F80 4EB9 0000 0000             		jsr	HudUpdate
00000F86 6100 0000                  		bsr.w	sub_165E
00000F8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000F8E 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000F92 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000F96                            
00000F96                            Demo_TimeEnd:
00000F96 4E75                       		rts	
00000F98                            ; End of function Demo_Time
00000F98                            
00000F98                            ; ===========================================================================
00000F98                            
00000F98                            loc_DA6:				; XREF: off_B6E
00000F98 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA0                            
00000FA0                            loc_DAE:
00000FA0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FA8 66F6                       		bne.s	loc_DAE		; if not, branch
00000FAA 6100 0000                  		bsr.w	ReadJoypads
00000FAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC0 3ABC 977F                  		move.w	#$977F,(a5)
00000FC4 3ABC C000                  		move.w	#$C000,(a5)
00000FC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE4 3ABC 977F                  		move.w	#$977F,(a5)
00000FE8 3ABC 7800                  		move.w	#$7800,(a5)
00000FEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001002 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001008 3ABC 977F                  		move.w	#$977F,(a5)
0000100C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001010 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001016 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000101A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001022 6100 0000                  		bsr.w	PalCycle_SS
00001026 4A38 F767                  		tst.b	($FFFFF767).w
0000102A 6700                       		beq.s	loc_E64
0000102C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001032 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001038 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000103E 3ABC 977F                  		move.w	#$977F,(a5)
00001042 3ABC 7000                  		move.w	#$7000,(a5)
00001046 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001050 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001056                            
00001056                            loc_E64:
00001056 4A78 F614                  		tst.w	($FFFFF614).w
0000105A 6700 0000                  		beq.w	locret_E70
0000105E 5378 F614                  		subq.w	#1,($FFFFF614).w
00001062                            
00001062                            locret_E70:
00001062 4E75                       		rts	
00001064                            ; ===========================================================================
00001064                            
00001064                            loc_E72:				; XREF: off_B6E
00001064 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000106C                            
0000106C                            loc_E7A:
0000106C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001074 66F6                       		bne.s	loc_E7A		; if not, branch
00001076 6100 0000                  		bsr.w	ReadJoypads
0000107A 4A38 F64E                  		tst.b	($FFFFF64E).w
0000107E 6600                       		bne.s	loc_EB4
00001080 4BF9 00C0 0004             		lea	($C00004).l,a5
00001086 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000108C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001092 3ABC 977F                  		move.w	#$977F,(a5)
00001096 3ABC C000                  		move.w	#$C000,(a5)
0000109A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010A0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010A4 6000                       		bra.s	loc_ED8
000010A6                            ; ===========================================================================
000010A6                            
000010A6                            loc_EB4:				; XREF: loc_E7A
000010A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010AC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010B8 3ABC 977F                  		move.w	#$977F,(a5)
000010BC 3ABC C000                  		move.w	#$C000,(a5)
000010C0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010CA                            
000010CA                            loc_ED8:				; XREF: loc_E7A
000010CA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010DA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000010E0                            
000010E0                            loc_EEE:
000010E0 3ABC 977F                  		move.w	#$977F,(a5)
000010E4 3ABC 7C00                  		move.w	#$7C00,(a5)
000010E8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010EE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010FE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001104 3ABC 977F                  		move.w	#$977F,(a5)
00001108 3ABC 7800                  		move.w	#$7800,(a5)
0000110C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001112 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001116 4A38 F767                  		tst.b	($FFFFF767).w
0000111A 6700                       		beq.s	loc_F54
0000111C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001122 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001128 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000112E 3ABC 977F                  		move.w	#$977F,(a5)
00001132 3ABC 7000                  		move.w	#$7000,(a5)
00001136 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000113C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001140 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001146                            
00001146                            loc_F54:
00001146 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000114E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001154 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000115A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001160 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001166 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000116A 4EB9 0000 0000             		jsr	AniArt_Load
00001170 4EB9 0000 0000             		jsr	HudUpdate
00001176 6100 0000                  		bsr.w	sub_1642
0000117A 4E75                       		rts	
0000117C                            ; ===========================================================================
0000117C                            
0000117C                            loc_F8A:				; XREF: off_B6E
0000117C 6100 0000                  		bsr.w	sub_106E
00001180 5238 F628                  		addq.b	#1,($FFFFF628).w
00001184 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
0000118A 4E75                       		rts	
0000118C                            ; ===========================================================================
0000118C                            
0000118C                            loc_F9A:				; XREF: off_B6E
0000118C 6100 0000                  		bsr.w	sub_106E
00001190 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001194 6000 0000                  		bra.w	sub_1642
00001198                            ; ===========================================================================
00001198                            
00001198                            loc_FA6:				; XREF: off_B6E
00001198 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011A0                            
000011A0                            loc_FAE:
000011A0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011A8 66F6                       		bne.s	loc_FAE		; if not, branch
000011AA 6100 0000                  		bsr.w	ReadJoypads
000011AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011C0 3ABC 977F                  		move.w	#$977F,(a5)
000011C4 3ABC C000                  		move.w	#$C000,(a5)
000011C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011D8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000011DE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000011E4 3ABC 977F                  		move.w	#$977F,(a5)
000011E8 3ABC 7800                  		move.w	#$7800,(a5)
000011EC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011F2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011FC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001202 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001208 3ABC 977F                  		move.w	#$977F,(a5)
0000120C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001210 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001216 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000121A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001222 4A38 F767                  		tst.b	($FFFFF767).w
00001226 6700                       		beq.s	loc_1060
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001234 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7000                  		move.w	#$7000,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001252                            
00001252                            loc_1060:
00001252 4A78 F614                  		tst.w	($FFFFF614).w
00001256 6700 0000                  		beq.w	locret_106C
0000125A 5378 F614                  		subq.w	#1,($FFFFF614).w
0000125E                            
0000125E                            locret_106C:
0000125E 4E75                       		rts	
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            sub_106E:				; XREF: loc_C32; et al
00001260 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001268                            
00001268                            loc_1076:
00001268 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001270 66F6                       		bne.s	loc_1076	; if not, branch
00001272 6100 0000                  		bsr.w	ReadJoypads
00001276 4A38 F64E                  		tst.b	($FFFFF64E).w
0000127A 6600                       		bne.s	loc_10B0
0000127C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001282 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001288 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000128E 3ABC 977F                  		move.w	#$977F,(a5)
00001292 3ABC C000                  		move.w	#$C000,(a5)
00001296 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000129C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A0 6000                       		bra.s	loc_10D4
000012A2                            ; ===========================================================================
000012A2                            
000012A2                            loc_10B0:				; XREF: sub_106E
000012A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012A8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012AE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012B4 3ABC 977F                  		move.w	#$977F,(a5)
000012B8 3ABC C000                  		move.w	#$C000,(a5)
000012BC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012C2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012C6                            
000012C6                            loc_10D4:				; XREF: sub_106E
000012C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000012D2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000012D8 3ABC 977F                  		move.w	#$977F,(a5)
000012DC 3ABC 7800                  		move.w	#$7800,(a5)
000012E0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012E6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000012F6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000012FC 3ABC 977F                  		move.w	#$977F,(a5)
00001300 3ABC 7C00                  		move.w	#$7C00,(a5)
00001304 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000130A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001316 4E75                       		rts	
00001318                            ; End of function sub_106E
00001318                            
00001318                            ; ---------------------------------------------------------------------------
00001318                            ; Subroutine to	move pallets from the RAM to CRAM
00001318                            ; ---------------------------------------------------------------------------
00001318                            
00001318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001318                            
00001318                            
00001318                            PalToCRAM:
00001318 46FC 2700                  		move	#$2700,sr
0000131C 4A78 F644                  		tst.w	($FFFFF644).w
00001320 6700                       		beq.s	locret_119C
00001322 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001328 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000132C 43F9 00C0 0000             		lea	($C00000).l,a1
00001332 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001336 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000133E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001340 2298                       		move.l	(a0)+,(a1)
00001342 2298                       		move.l	(a0)+,(a1)
00001344 2298                       		move.l	(a0)+,(a1)
00001346 2298                       		move.l	(a0)+,(a1)
00001348 2298                       		move.l	(a0)+,(a1)
0000134A 2298                       		move.l	(a0)+,(a1)
0000134C 2298                       		move.l	(a0)+,(a1)
0000134E 2298                       		move.l	(a0)+,(a1)
00001350 2298                       		move.l	(a0)+,(a1)
00001352 2298                       		move.l	(a0)+,(a1)
00001354 2298                       		move.l	(a0)+,(a1)
00001356 2298                       		move.l	(a0)+,(a1)
00001358 2298                       		move.l	(a0)+,(a1)
0000135A 2298                       		move.l	(a0)+,(a1)
0000135C 2298                       		move.l	(a0)+,(a1)
0000135E 2298                       		move.l	(a0)+,(a1)
00001360 2298                       		move.l	(a0)+,(a1)
00001362 2298                       		move.l	(a0)+,(a1)
00001364 2298                       		move.l	(a0)+,(a1)
00001366 2298                       		move.l	(a0)+,(a1)
00001368 2298                       		move.l	(a0)+,(a1)
0000136A 2298                       		move.l	(a0)+,(a1)
0000136C 2298                       		move.l	(a0)+,(a1)
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001384 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001388 4A38 F64F                  		tst.b	($FFFFF64F).w
0000138C 6600                       		bne.s	loc_119E
0000138E                            
0000138E                            locret_119C:
0000138E 4E73                       		rte	
00001390                            ; ===========================================================================
00001390                            
00001390                            loc_119E:				; XREF: PalToCRAM
00001390 4238 F64F                  		clr.b	($FFFFF64F).w
00001394 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001398 6100 FBDC                  		bsr.w	Demo_Time
0000139C 4EB9 0000 0000             		jsr	sub_71B4C
000013A2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013A6 4E73                       		rte	
000013A8                            ; End of function PalToCRAM
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	initialise joypads
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            JoypadInit:				; XREF: GameClrRAM
000013A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013B0                            
000013B0                            Joypad_WaitZ80:
000013B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013B8 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013BA 7040                       		moveq	#$40,d0
000013BC 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013C2 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013C8 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013CE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000013D6 4E75                       		rts	
000013D8                            ; End of function JoypadInit
000013D8                            
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Subroutine to	read joypad input, and send it to the RAM
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            
000013D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D8                            
000013D8                            
000013D8                            ReadJoypads:
000013D8 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000013DC 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000013E2 6100                       		bsr.s	Joypad_Read	; do the first joypad
000013E4 5449                       		addq.w	#2,a1		; do the second	joypad
000013E6                            
000013E6                            Joypad_Read:
000013E6 12BC 0000                  		move.b	#0,(a1)
000013EA 4E71                       		nop	
000013EC 4E71                       		nop	
000013EE 1011                       		move.b	(a1),d0
000013F0 E508                       		lsl.b	#2,d0
000013F2 0200 00C0                  		andi.b	#$C0,d0
000013F6 12BC 0040                  		move.b	#$40,(a1)
000013FA 4E71                       		nop	
000013FC 4E71                       		nop	
000013FE 1211                       		move.b	(a1),d1
00001400 0201 003F                  		andi.b	#$3F,d1
00001404 8001                       		or.b	d1,d0
00001406 4600                       		not.b	d0
00001408 1210                       		move.b	(a0),d1
0000140A B101                       		eor.b	d0,d1
0000140C 10C0                       		move.b	d0,(a0)+
0000140E C200                       		and.b	d0,d1
00001410 10C1                       		move.b	d1,(a0)+
00001412 4E75                       		rts	
00001414                            ; End of function ReadJoypads
00001414                            
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001414 41F9 00C0 0004             		lea	($C00004).l,a0
0000141A 43F9 00C0 0000             		lea	($C00000).l,a1
00001420 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001426 7E12                       		moveq	#$12,d7
00001428                            
00001428                            VDP_Loop:
00001428 309A                       		move.w	(a2)+,(a0)
0000142A 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000142E                            
0000142E 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001434 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
0000143A 6700                       		beq.s	.UseV28			; If not, skip
0000143C 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001440                            .UseV28:
00001440 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001444 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000144A 7000                       		moveq	#0,d0
0000144C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001456 3E3C 003F                  		move.w	#$3F,d7
0000145A                            
0000145A                            VDP_ClrCRAM:
0000145A 3280                       		move.w	d0,(a1)
0000145C 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001460                            
00001460 42B8 F616                  		clr.l	($FFFFF616).w
00001464 42B8 F61A                  		clr.l	($FFFFF61A).w
00001468 2F01                       		move.l	d1,-(sp)
0000146A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001470 3ABC 8F01                  		move.w	#$8F01,(a5)
00001474 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000147A 3ABC 9780                  		move.w	#$9780,(a5)
0000147E 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001484 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000148C                            
0000148C                            loc_128E:
0000148C 3215                       		move.w	(a5),d1
0000148E 0801 0001                  		btst	#1,d1
00001492 66F8                       		bne.s	loc_128E
00001494                            
00001494 3ABC 8F02                  		move.w	#$8F02,(a5)
00001498 221F                       		move.l	(sp)+,d1
0000149A 4E75                       		rts	
0000149C                            ; End of function VDPSetupGame
0000149C                            
0000149C                            ; ===========================================================================
0000149C 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014A4 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014AC 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014B4 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014BC 9001 9100 9200             		dc.w $9001, $9100, $9200
000014C2                            
000014C2                            ; ---------------------------------------------------------------------------
000014C2                            ; Subroutine to	clear the screen
000014C2                            ; ---------------------------------------------------------------------------
000014C2                            
000014C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C2                            
000014C2                            
000014C2                            ClearScreen:
000014C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014C8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014CC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014D2 3ABC 9780                  		move.w	#$9780,(a5)
000014D6 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014DC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000014E4                            
000014E4                            loc_12E6:
000014E4 3215                       		move.w	(a5),d1
000014E6 0801 0001                  		btst	#1,d1
000014EA 66F8                       		bne.s	loc_12E6
000014EC                            
000014EC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000014F6 3ABC 8F01                  		move.w	#$8F01,(a5)
000014FA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001500 3ABC 9780                  		move.w	#$9780,(a5)
00001504 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000150A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001512                            
00001512                            loc_1314:
00001512 3215                       		move.w	(a5),d1
00001514 0801 0001                  		btst	#1,d1
00001518 66F8                       		bne.s	loc_1314
0000151A                            
0000151A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000151E 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001526 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000152E 43F8 F800                  		lea	($FFFFF800).w,a1
00001532 7000                       		moveq	#0,d0
00001534 323C 009F                  		move.w	#$9F,d1
00001538                            
00001538                            loc_133A:
00001538 22C0                       		move.l	d0,(a1)+
0000153A 51C9 FFFC                  		dbf	d1,loc_133A
0000153E                            
0000153E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001542 7000                       		moveq	#0,d0
00001544 323C 00FF                  		move.w	#$FF,d1
00001548                            
00001548                            loc_134A:
00001548 22C0                       		move.l	d0,(a1)+
0000154A 51C9 FFFC                  		dbf	d1,loc_134A
0000154E 4E75                       		rts	
00001550                            ; End of function ClearScreen
00001550                            
00001550                            ; ---------------------------------------------------------------------------
00001550                            ; Subroutine to	load the sound driver
00001550                            ; ---------------------------------------------------------------------------
00001550                            
00001550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001550                            
00001550                            
00001550                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001550 4E71                       		nop	
00001552 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000155A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001562 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001568 43F9 00A0 0000             		lea	($A00000).l,a1
0000156E 6100 0000                  		bsr.w	KosDec		; decompress
00001572 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000157A 4E71                       		nop	
0000157C 4E71                       		nop	
0000157E 4E71                       		nop	
00001580 4E71                       		nop	
00001582 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000158A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001592 4E75                       		rts	
00001594                            ; End of function SoundDriverLoad
00001594                            
00001594                            ; ---------------------------------------------------------------------------
00001594                            ; Subroutine to	play a sound or	music track
00001594                            ; ---------------------------------------------------------------------------
00001594                            
00001594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001594                            
00001594                            
00001594                            PlaySound:
00001594 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001598 4E75                       		rts	
0000159A                            ; End of function PlaySound
0000159A                            
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            ; Subroutine to	play a special sound/music (E0-E4)
0000159A                            ;
0000159A                            ; E0 - Fade out
0000159A                            ; E1 - Sega
0000159A                            ; E2 - Speed up
0000159A                            ; E3 - Normal speed
0000159A                            ; E4 - Stop
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            
0000159A                            PlaySound_Special:
0000159A 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000159E 4E75                       		rts	
000015A0                            ; End of function PlaySound_Special
000015A0                            
000015A0                            ; ===========================================================================
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Unused sound/music subroutine
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            PlaySound_Unk:
000015A0 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015A4 4E75                       		rts	
000015A6                            
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            ; Subroutine to	pause the game
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            
000015A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A6                            
000015A6                            
000015A6                            PauseGame:				; XREF: Level_MainLoop; et al
000015A6 4E71                       		nop	
000015A8 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015AC 6700                       		beq.s	Unpause		; if not, branch
000015AE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015B2 6600                       		bne.s	loc_13BE	; if yes, branch
000015B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015BA 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015BC                            
000015BC                            loc_13BE:
000015BC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015C2 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015C8                            
000015C8                            loc_13CA:
000015C8 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015CE 6100 0000                  		bsr.w	DelayProgram
000015D2 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015D6 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015D8 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000015DE 6700                       		beq.s	Pause_ChkBC	; if not, branch
000015E0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000015E6 4E71                       		nop	
000015E8 6000                       		bra.s	loc_1404
000015EA                            ; ===========================================================================
000015EA                            
000015EA                            Pause_ChkBC:				; XREF: PauseGame
000015EA 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000015F0 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015F2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000015F8 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015FA                            
000015FA                            Pause_ChkStart:				; XREF: PauseGame
000015FA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001600 67C6                       		beq.s	loc_13CA	; if not, branch
00001602                            
00001602                            loc_1404:				; XREF: PauseGame
00001602 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001608                            
00001608                            Unpause:				; XREF: PauseGame
00001608 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000160E                            
0000160E                            Pause_DoNothing:			; XREF: PauseGame
0000160E 4E75                       		rts	
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_SlowMo:				; XREF: PauseGame
00001610 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001616 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000161C 4E75                       		rts	
0000161E                            ; End of function PauseGame
0000161E                            
0000161E                            ; ---------------------------------------------------------------------------
0000161E                            ; Subroutine to	display	patterns via the VDP
0000161E                            ; ---------------------------------------------------------------------------
0000161E                            
0000161E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000161E                            
0000161E                            
0000161E                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000161E 4DF9 00C0 0000             		lea	($C00000).l,a6
00001624 283C 0080 0000             		move.l	#$800000,d4
0000162A                            
0000162A                            loc_142C:
0000162A 2D40 0004                  		move.l	d0,4(a6)
0000162E 3601                       		move.w	d1,d3
00001630                            
00001630                            loc_1432:
00001630 3C99                       		move.w	(a1)+,(a6)
00001632 51CB FFFC                  		dbf	d3,loc_1432
00001636 D084                       		add.l	d4,d0
00001638 51CA FFF0                  		dbf	d2,loc_142C
0000163C 4E75                       		rts	
0000163E                            ; End of function ShowVDPGraphics
0000163E                            
0000163E                            ; ---------------------------------------------------------------------------
0000163E                            ; Nemesis decompression	algorithm
0000163E                            ; ---------------------------------------------------------------------------
0000163E                            
0000163E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000163E                            
0000163E                            
0000163E                            NemDec:
0000163E 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001642 47F9 0000 0000             		lea	(loc_1502).l,a3
00001648 49F9 00C0 0000             		lea	($C00000).l,a4
0000164E 6000                       		bra.s	loc_145C
00001650                            ; ===========================================================================
00001650 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001654 47F9 0000 0000             		lea	(loc_1518).l,a3
0000165A                            
0000165A                            loc_145C:				; XREF: NemDec
0000165A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000165E 3418                       		move.w	(a0)+,d2
00001660 E34A                       		lsl.w	#1,d2
00001662 6400                       		bcc.s	loc_146A
00001664 D6FC 000A                  		adda.w	#$A,a3
00001668                            
00001668                            loc_146A:
00001668 E54A                       		lsl.w	#2,d2
0000166A 3A42                       		movea.w	d2,a5
0000166C 7608                       		moveq	#8,d3
0000166E 7400                       		moveq	#0,d2
00001670 7800                       		moveq	#0,d4
00001672 6100 0000                  		bsr.w	NemDec4
00001676 1A18                       		move.b	(a0)+,d5
00001678 E145                       		asl.w	#8,d5
0000167A 1A18                       		move.b	(a0)+,d5
0000167C 3C3C 0010                  		move.w	#$10,d6
00001680 6100                       		bsr.s	NemDec2
00001682 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001686 4E75                       		rts	
00001688                            ; End of function NemDec
00001688                            
00001688                            
00001688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001688                            
00001688                            
00001688                            NemDec2:				; XREF: NemDec
00001688 3E06                       		move.w	d6,d7
0000168A 5147                       		subq.w	#8,d7
0000168C 3205                       		move.w	d5,d1
0000168E EE69                       		lsr.w	d7,d1
00001690 0C01 00FC                  		cmpi.b	#-4,d1
00001694 6400                       		bcc.s	loc_14D6
00001696 0241 00FF                  		andi.w	#$FF,d1
0000169A D241                       		add.w	d1,d1
0000169C 1031 1000                  		move.b	(a1,d1.w),d0
000016A0 4880                       		ext.w	d0
000016A2 9C40                       		sub.w	d0,d6
000016A4 0C46 0009                  		cmpi.w	#9,d6
000016A8 6400                       		bcc.s	loc_14B2
000016AA 5046                       		addq.w	#8,d6
000016AC E145                       		asl.w	#8,d5
000016AE 1A18                       		move.b	(a0)+,d5
000016B0                            
000016B0                            loc_14B2:
000016B0 1231 1001                  		move.b	1(a1,d1.w),d1
000016B4 3001                       		move.w	d1,d0
000016B6 0241 000F                  		andi.w	#$F,d1
000016BA 0240 00F0                  		andi.w	#$F0,d0
000016BE                            
000016BE                            loc_14C0:				; XREF: NemDec3
000016BE E848                       		lsr.w	#4,d0
000016C0                            
000016C0                            loc_14C2:				; XREF: NemDec3
000016C0 E98C                       		lsl.l	#4,d4
000016C2 8801                       		or.b	d1,d4
000016C4 5343                       		subq.w	#1,d3
000016C6 6600                       		bne.s	loc_14D0
000016C8 4ED3                       		jmp	(a3)
000016CA                            ; End of function NemDec2
000016CA                            
000016CA                            
000016CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016CA                            
000016CA                            
000016CA                            NemDec3:				; XREF: loc_1502
000016CA 7800                       		moveq	#0,d4
000016CC 7608                       		moveq	#8,d3
000016CE                            
000016CE                            loc_14D0:				; XREF: NemDec2
000016CE 51C8 FFF0                  		dbf	d0,loc_14C2
000016D2 60B4                       		bra.s	NemDec2
000016D4                            ; ===========================================================================
000016D4                            
000016D4                            loc_14D6:				; XREF: NemDec2
000016D4 5D46                       		subq.w	#6,d6
000016D6 0C46 0009                  		cmpi.w	#9,d6
000016DA 6400                       		bcc.s	loc_14E4
000016DC 5046                       		addq.w	#8,d6
000016DE E145                       		asl.w	#8,d5
000016E0 1A18                       		move.b	(a0)+,d5
000016E2                            
000016E2                            loc_14E4:				; XREF: NemDec3
000016E2 5F46                       		subq.w	#7,d6
000016E4 3205                       		move.w	d5,d1
000016E6 EC69                       		lsr.w	d6,d1
000016E8 3001                       		move.w	d1,d0
000016EA 0241 000F                  		andi.w	#$F,d1
000016EE 0240 0070                  		andi.w	#$70,d0
000016F2 0C46 0009                  		cmpi.w	#9,d6
000016F6 64C6                       		bcc.s	loc_14C0
000016F8 5046                       		addq.w	#8,d6
000016FA E145                       		asl.w	#8,d5
000016FC 1A18                       		move.b	(a0)+,d5
000016FE 60BE                       		bra.s	loc_14C0
00001700                            ; End of function NemDec3
00001700                            
00001700                            ; ===========================================================================
00001700                            
00001700                            loc_1502:				; XREF: NemDec
00001700 2884                       		move.l	d4,(a4)
00001702 534D                       		subq.w	#1,a5
00001704 380D                       		move.w	a5,d4
00001706 66C2                       		bne.s	NemDec3
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A B982                       		eor.l	d4,d2
0000170C 2882                       		move.l	d2,(a4)
0000170E 534D                       		subq.w	#1,a5
00001710 380D                       		move.w	a5,d4
00001712 66B6                       		bne.s	NemDec3
00001714 4E75                       		rts	
00001716                            ; ===========================================================================
00001716                            
00001716                            loc_1518:				; XREF: NemDec
00001716 28C4                       		move.l	d4,(a4)+
00001718 534D                       		subq.w	#1,a5
0000171A 380D                       		move.w	a5,d4
0000171C 66AC                       		bne.s	NemDec3
0000171E 4E75                       		rts	
00001720                            ; ===========================================================================
00001720 B982                       		eor.l	d4,d2
00001722 28C2                       		move.l	d2,(a4)+
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66A0                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            
0000172C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000172C                            
0000172C                            
0000172C                            NemDec4:				; XREF: NemDec
0000172C 1018                       		move.b	(a0)+,d0
0000172E                            
0000172E                            loc_1530:
0000172E 0C00 00FF                  		cmpi.b	#-1,d0
00001732 6600                       		bne.s	loc_1538
00001734 4E75                       		rts	
00001736                            ; ===========================================================================
00001736                            
00001736                            loc_1538:				; XREF: NemDec4
00001736 3E00                       		move.w	d0,d7
00001738                            
00001738                            loc_153A:
00001738 1018                       		move.b	(a0)+,d0
0000173A 0C00 0080                  		cmpi.b	#$80,d0
0000173E 64EE                       		bcc.s	loc_1530
00001740 1200                       		move.b	d0,d1
00001742 0247 000F                  		andi.w	#$F,d7
00001746 0241 0070                  		andi.w	#$70,d1
0000174A 8E41                       		or.w	d1,d7
0000174C 0240 000F                  		andi.w	#$F,d0
00001750 1200                       		move.b	d0,d1
00001752 E149                       		lsl.w	#8,d1
00001754 8E41                       		or.w	d1,d7
00001756 7208                       		moveq	#8,d1
00001758 9240                       		sub.w	d0,d1
0000175A 6600                       		bne.s	loc_1568
0000175C 1018                       		move.b	(a0)+,d0
0000175E D040                       		add.w	d0,d0
00001760 3387 0000                  		move.w	d7,(a1,d0.w)
00001764 60D2                       		bra.s	loc_153A
00001766                            ; ===========================================================================
00001766                            
00001766                            loc_1568:				; XREF: NemDec4
00001766 1018                       		move.b	(a0)+,d0
00001768 E368                       		lsl.w	d1,d0
0000176A D040                       		add.w	d0,d0
0000176C 7A01                       		moveq	#1,d5
0000176E E36D                       		lsl.w	d1,d5
00001770 5345                       		subq.w	#1,d5
00001772                            
00001772                            loc_1574:
00001772 3387 0000                  		move.w	d7,(a1,d0.w)
00001776 5440                       		addq.w	#2,d0
00001778 51CD FFF8                  		dbf	d5,loc_1574
0000177C 60BA                       		bra.s	loc_153A
0000177E                            ; End of function NemDec4
0000177E                            
0000177E                            ; ---------------------------------------------------------------------------
0000177E                            ; Subroutine to	load pattern load cues
0000177E                            ; ---------------------------------------------------------------------------
0000177E                            
0000177E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000177E                            
0000177E                            
0000177E                            LoadPLC:
0000177E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001782 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001788 D040                       		add.w	d0,d0
0000178A 3031 0000                  		move.w	(a1,d0.w),d0
0000178E 43F1 0000                  		lea	(a1,d0.w),a1
00001792 45F8 F680                  		lea	($FFFFF680).w,a2
00001796                            
00001796                            loc_1598:
00001796 4A92                       		tst.l	(a2)
00001798 6700                       		beq.s	loc_15A0
0000179A 5C4A                       		addq.w	#6,a2
0000179C 60F8                       		bra.s	loc_1598
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_15A0:				; XREF: LoadPLC
0000179E 3019                       		move.w	(a1)+,d0
000017A0 6B00                       		bmi.s	loc_15AC
000017A2                            
000017A2                            loc_15A4:
000017A2 24D9                       		move.l	(a1)+,(a2)+
000017A4 34D9                       		move.w	(a1)+,(a2)+
000017A6 51C8 FFFA                  		dbf	d0,loc_15A4
000017AA                            
000017AA                            loc_15AC:
000017AA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017AE 4E75                       		rts	
000017B0                            ; End of function LoadPLC
000017B0                            
000017B0                            
000017B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B0                            
000017B0                            
000017B0                            LoadPLC2:
000017B0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017B4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017BA D040                       		add.w	d0,d0
000017BC 3031 0000                  		move.w	(a1,d0.w),d0
000017C0 43F1 0000                  		lea	(a1,d0.w),a1
000017C4 6100                       		bsr.s	ClearPLC
000017C6 45F8 F680                  		lea	($FFFFF680).w,a2
000017CA 3019                       		move.w	(a1)+,d0
000017CC 6B00                       		bmi.s	loc_15D8
000017CE                            
000017CE                            loc_15D0:
000017CE 24D9                       		move.l	(a1)+,(a2)+
000017D0 34D9                       		move.w	(a1)+,(a2)+
000017D2 51C8 FFFA                  		dbf	d0,loc_15D0
000017D6                            
000017D6                            loc_15D8:
000017D6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017DA 4E75                       		rts	
000017DC                            ; End of function LoadPLC2
000017DC                            
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            ; Subroutine to	clear the pattern load cues
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            
000017DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017DC                            
000017DC                            
000017DC                            ClearPLC:				; XREF: LoadPLC2
000017DC 45F8 F680                  		lea	($FFFFF680).w,a2
000017E0 701F                       		moveq	#$1F,d0
000017E2                            
000017E2                            ClearPLC_Loop:
000017E2 429A                       		clr.l	(a2)+
000017E4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000017E8 4E75                       		rts	
000017EA                            ; End of function ClearPLC
000017EA                            
000017EA                            ; ---------------------------------------------------------------------------
000017EA                            ; Subroutine to	use graphics listed in a pattern load cue
000017EA                            ; ---------------------------------------------------------------------------
000017EA                            
000017EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017EA                            
000017EA                            
000017EA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000017EA 4AB8 F680                  		tst.l	($FFFFF680).w
000017EE 6700                       		beq.s	locret_1640
000017F0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017F4 6600                       		bne.s	locret_1640
000017F6 2078 F680                  		movea.l	($FFFFF680).w,a0
000017FA 47F9 0000 1700             		lea	(loc_1502).l,a3
00001800 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001804 3418                       		move.w	(a0)+,d2
00001806 6A00                       		bpl.s	loc_160E
00001808 D6FC 000A                  		adda.w	#$A,a3
0000180C                            
0000180C                            loc_160E:
0000180C 0242 7FFF                  		andi.w	#$7FFF,d2
00001810 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001814 6100 FF16                  		bsr.w	NemDec4
00001818 1A18                       		move.b	(a0)+,d5
0000181A E145                       		asl.w	#8,d5
0000181C 1A18                       		move.b	(a0)+,d5
0000181E 7C10                       		moveq	#$10,d6
00001820 7000                       		moveq	#0,d0
00001822 21C8 F680                  		move.l	a0,($FFFFF680).w
00001826 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000182A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000182E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001832 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001836 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000183A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000183E                            
0000183E                            locret_1640:
0000183E 4E75                       		rts	
00001840                            ; End of function RunPLC_RAM
00001840                            
00001840                            
00001840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001840                            
00001840                            
00001840                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001840 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001844 6700 0000                  		beq.w	locret_16DA
00001848 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000184E 7000                       		moveq	#0,d0
00001850 3038 F684                  		move.w	($FFFFF684).w,d0
00001854 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000185A 6000                       		bra.s	loc_1676
0000185C                            ; End of function sub_1642
0000185C                            
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            sub_165E:				; XREF: Demo_Time
0000185C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001860 6700                       		beq.s	locret_16DA
00001862 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001868 7000                       		moveq	#0,d0
0000186A 3038 F684                  		move.w	($FFFFF684).w,d0
0000186E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001874                            
00001874                            loc_1676:				; XREF: sub_1642
00001874 49F9 00C0 0004             		lea	($C00004).l,a4
0000187A E588                       		lsl.l	#2,d0
0000187C E448                       		lsr.w	#2,d0
0000187E 0040 4000                  		ori.w	#$4000,d0
00001882 4840                       		swap	d0
00001884 2880                       		move.l	d0,(a4)
00001886 594C                       		subq.w	#4,a4
00001888 2078 F680                  		movea.l	($FFFFF680).w,a0
0000188C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001890 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001894 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001898 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000189C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018A0 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018A4 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018A8                            
000018A8                            loc_16AA:				; XREF: sub_165E
000018A8 3A7C 0008                  		movea.w	#8,a5
000018AC 6100 FE1C                  		bsr.w	NemDec3
000018B0 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018B4 6700                       		beq.s	loc_16DC
000018B6 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018BA 66EC                       		bne.s	loc_16AA
000018BC 21C8 F680                  		move.l	a0,($FFFFF680).w
000018C0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018C4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018C8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018CC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018D0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018D4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018D8                            
000018D8                            locret_16DA:				; XREF: sub_1642
000018D8 4E75                       		rts	
000018DA                            ; ===========================================================================
000018DA                            
000018DA                            loc_16DC:				; XREF: sub_165E
000018DA 41F8 F680                  		lea	($FFFFF680).w,a0
000018DE 7015                       		moveq	#$15,d0
000018E0                            
000018E0                            loc_16E2:				; XREF: sub_165E
000018E0 20E8 0006                  		move.l	6(a0),(a0)+
000018E4 51C8 FFFA                  		dbf	d0,loc_16E2
000018E8 4E75                       		rts	
000018EA                            ; End of function sub_165E
000018EA                            
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            ; Subroutine to	execute	the pattern load cue
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            
000018EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018EA                            
000018EA                            
000018EA                            RunPLC_ROM:
000018EA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018F0 D040                       		add.w	d0,d0
000018F2 3031 0000                  		move.w	(a1,d0.w),d0
000018F6 43F1 0000                  		lea	(a1,d0.w),a1
000018FA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000018FC                            
000018FC                            RunPLC_Loop:
000018FC 2059                       		movea.l	(a1)+,a0	; get art pointer
000018FE 7000                       		moveq	#0,d0
00001900 3019                       		move.w	(a1)+,d0	; get VRAM address
00001902 E588                       		lsl.l	#2,d0		; divide address by $20
00001904 E448                       		lsr.w	#2,d0
00001906 0040 4000                  		ori.w	#$4000,d0
0000190A 4840                       		swap	d0
0000190C 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001912 6100 FD2A                  		bsr.w	NemDec		; decompress
00001916 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000191A 4E75                       		rts	
0000191C                            ; End of function RunPLC_ROM
0000191C                            
0000191C                            ; ---------------------------------------------------------------------------
0000191C                            ; Enigma decompression algorithm
0000191C                            ; ---------------------------------------------------------------------------
0000191C                            
0000191C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191C                            
0000191C                            
0000191C                            EniDec:
0000191C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001920 3640                       		movea.w	d0,a3
00001922 1018                       		move.b	(a0)+,d0
00001924 4880                       		ext.w	d0
00001926 3A40                       		movea.w	d0,a5
00001928 1818                       		move.b	(a0)+,d4
0000192A E70C                       		lsl.b	#3,d4
0000192C 3458                       		movea.w	(a0)+,a2
0000192E D4CB                       		adda.w	a3,a2
00001930 3858                       		movea.w	(a0)+,a4
00001932 D8CB                       		adda.w	a3,a4
00001934 1A18                       		move.b	(a0)+,d5
00001936 E145                       		asl.w	#8,d5
00001938 1A18                       		move.b	(a0)+,d5
0000193A 7C10                       		moveq	#$10,d6
0000193C                            
0000193C                            loc_173E:				; XREF: loc_1768
0000193C 7007                       		moveq	#7,d0
0000193E 3E06                       		move.w	d6,d7
00001940 9E40                       		sub.w	d0,d7
00001942 3205                       		move.w	d5,d1
00001944 EE69                       		lsr.w	d7,d1
00001946 0241 007F                  		andi.w	#$7F,d1
0000194A 3401                       		move.w	d1,d2
0000194C 0C41 0040                  		cmpi.w	#$40,d1
00001950 6400                       		bcc.s	loc_1758
00001952 7006                       		moveq	#6,d0
00001954 E24A                       		lsr.w	#1,d2
00001956                            
00001956                            loc_1758:
00001956 6100 0000                  		bsr.w	sub_188C
0000195A 0242 000F                  		andi.w	#$F,d2
0000195E E849                       		lsr.w	#4,d1
00001960 D241                       		add.w	d1,d1
00001962 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001966                            ; End of function EniDec
00001966                            
00001966                            ; ===========================================================================
00001966                            
00001966                            loc_1768:				; XREF: loc_17B4
00001966 32CA                       		move.w	a2,(a1)+
00001968 524A                       		addq.w	#1,a2
0000196A 51CA FFFA                  		dbf	d2,loc_1768
0000196E 60CC                       		bra.s	loc_173E
00001970                            ; ===========================================================================
00001970                            
00001970                            loc_1772:				; XREF: loc_17B4
00001970 32CC                       		move.w	a4,(a1)+
00001972 51CA FFFC                  		dbf	d2,loc_1772
00001976 60C4                       		bra.s	loc_173E
00001978                            ; ===========================================================================
00001978                            
00001978                            loc_177A:				; XREF: loc_17B4
00001978 6100 0000                  		bsr.w	loc_17DC
0000197C                            
0000197C                            loc_177E:
0000197C 32C1                       		move.w	d1,(a1)+
0000197E 51CA FFFC                  		dbf	d2,loc_177E
00001982 60B8                       		bra.s	loc_173E
00001984                            ; ===========================================================================
00001984                            
00001984                            loc_1786:				; XREF: loc_17B4
00001984 6100 0000                  		bsr.w	loc_17DC
00001988                            
00001988                            loc_178A:
00001988 32C1                       		move.w	d1,(a1)+
0000198A 5241                       		addq.w	#1,d1
0000198C 51CA FFFA                  		dbf	d2,loc_178A
00001990 60AA                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1794:				; XREF: loc_17B4
00001992 6100 0000                  		bsr.w	loc_17DC
00001996                            
00001996                            loc_1798:
00001996 32C1                       		move.w	d1,(a1)+
00001998 5341                       		subq.w	#1,d1
0000199A 51CA FFFA                  		dbf	d2,loc_1798
0000199E 609C                       		bra.s	loc_173E
000019A0                            ; ===========================================================================
000019A0                            
000019A0                            loc_17A2:				; XREF: loc_17B4
000019A0 0C42 000F                  		cmpi.w	#$F,d2
000019A4 6700                       		beq.s	loc_17C4
000019A6                            
000019A6                            loc_17A8:
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 51CA FFF8                  		dbf	d2,loc_17A8
000019B0 608A                       		bra.s	loc_173E
000019B2                            ; ===========================================================================
000019B2                            
000019B2                            loc_17B4:				; XREF: EniDec
000019B2 60B2                       		bra.s	loc_1768
000019B4                            ; ===========================================================================
000019B4 60B0                       		bra.s	loc_1768
000019B6                            ; ===========================================================================
000019B6 60B8                       		bra.s	loc_1772
000019B8                            ; ===========================================================================
000019B8 60B6                       		bra.s	loc_1772
000019BA                            ; ===========================================================================
000019BA 60BC                       		bra.s	loc_177A
000019BC                            ; ===========================================================================
000019BC 60C6                       		bra.s	loc_1786
000019BE                            ; ===========================================================================
000019BE 60D2                       		bra.s	loc_1794
000019C0                            ; ===========================================================================
000019C0 60DE                       		bra.s	loc_17A2
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17C4:				; XREF: loc_17A2
000019C2 5348                       		subq.w	#1,a0
000019C4 0C46 0010                  		cmpi.w	#$10,d6
000019C8 6600                       		bne.s	loc_17CE
000019CA 5348                       		subq.w	#1,a0
000019CC                            
000019CC                            loc_17CE:
000019CC 3008                       		move.w	a0,d0
000019CE E248                       		lsr.w	#1,d0
000019D0 6400                       		bcc.s	loc_17D6
000019D2 5248                       		addq.w	#1,a0
000019D4                            
000019D4                            loc_17D6:
000019D4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019D8 4E75                       		rts	
000019DA                            ; ===========================================================================
000019DA                            
000019DA                            loc_17DC:				; XREF: loc_17A2
000019DA 360B                       		move.w	a3,d3
000019DC 1204                       		move.b	d4,d1
000019DE D201                       		add.b	d1,d1
000019E0 6400                       		bcc.s	loc_17EE
000019E2 5346                       		subq.w	#1,d6
000019E4 0D05                       		btst	d6,d5
000019E6 6700                       		beq.s	loc_17EE
000019E8 0043 8000                  		ori.w	#-$8000,d3
000019EC                            
000019EC                            loc_17EE:
000019EC D201                       		add.b	d1,d1
000019EE 6400                       		bcc.s	loc_17FC
000019F0 5346                       		subq.w	#1,d6
000019F2 0D05                       		btst	d6,d5
000019F4 6700                       		beq.s	loc_17FC
000019F6 0643 4000                  		addi.w	#$4000,d3
000019FA                            
000019FA                            loc_17FC:
000019FA D201                       		add.b	d1,d1
000019FC 6400                       		bcc.s	loc_180A
000019FE 5346                       		subq.w	#1,d6
00001A00 0D05                       		btst	d6,d5
00001A02 6700                       		beq.s	loc_180A
00001A04 0643 2000                  		addi.w	#$2000,d3
00001A08                            
00001A08                            loc_180A:
00001A08 D201                       		add.b	d1,d1
00001A0A 6400                       		bcc.s	loc_1818
00001A0C 5346                       		subq.w	#1,d6
00001A0E 0D05                       		btst	d6,d5
00001A10 6700                       		beq.s	loc_1818
00001A12 0043 1000                  		ori.w	#$1000,d3
00001A16                            
00001A16                            loc_1818:
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_1826
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_1826
00001A20 0043 0800                  		ori.w	#$800,d3
00001A24                            
00001A24                            loc_1826:
00001A24 3205                       		move.w	d5,d1
00001A26 3E06                       		move.w	d6,d7
00001A28 9E4D                       		sub.w	a5,d7
00001A2A 6400                       		bcc.s	loc_1856
00001A2C 3C07                       		move.w	d7,d6
00001A2E 0646 0010                  		addi.w	#$10,d6
00001A32 4447                       		neg.w	d7
00001A34 EF69                       		lsl.w	d7,d1
00001A36 1A10                       		move.b	(a0),d5
00001A38 EF3D                       		rol.b	d7,d5
00001A3A DE47                       		add.w	d7,d7
00001A3C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A40 D245                       		add.w	d5,d1
00001A42                            
00001A42                            loc_1844:				; XREF: loc_1868
00001A42 300D                       		move.w	a5,d0
00001A44 D040                       		add.w	d0,d0
00001A46 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A4A D243                       		add.w	d3,d1
00001A4C 1A18                       		move.b	(a0)+,d5
00001A4E E14D                       		lsl.w	#8,d5
00001A50 1A18                       		move.b	(a0)+,d5
00001A52 4E75                       		rts	
00001A54                            ; ===========================================================================
00001A54                            
00001A54                            loc_1856:				; XREF: loc_1826
00001A54 6700                       		beq.s	loc_1868
00001A56 EE69                       		lsr.w	d7,d1
00001A58 300D                       		move.w	a5,d0
00001A5A D040                       		add.w	d0,d0
00001A5C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A60 D243                       		add.w	d3,d1
00001A62 300D                       		move.w	a5,d0
00001A64 6000                       		bra.s	sub_188C
00001A66                            ; ===========================================================================
00001A66                            
00001A66                            loc_1868:				; XREF: loc_1856
00001A66 7C10                       		moveq	#$10,d6
00001A68                            
00001A68                            loc_186A:
00001A68 60D8                       		bra.s	loc_1844
00001A6A                            ; ===========================================================================
00001A6A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001A80 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001A8A                            
00001A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A8A                            
00001A8A                            
00001A8A                            sub_188C:				; XREF: EniDec
00001A8A 9C40                       		sub.w	d0,d6
00001A8C 0C46 0009                  		cmpi.w	#9,d6
00001A90 6400                       		bcc.s	locret_189A
00001A92 5046                       		addq.w	#8,d6
00001A94 E145                       		asl.w	#8,d5
00001A96 1A18                       		move.b	(a0)+,d5
00001A98                            
00001A98                            locret_189A:
00001A98 4E75                       		rts	
00001A9A                            ; End of function sub_188C
00001A9A                            
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            ; Kosinski decompression algorithm
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            
00001A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A9A                            
00001A9A                            
00001A9A                            KosDec:
00001A9A                            
00001A9A =FFFFFFFE                  var_2		= -2
00001A9A =FFFFFFFF                  var_1		= -1
00001A9A                            
00001A9A 558F                       		subq.l	#2,sp
00001A9C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AA0 1E98                       		move.b	(a0)+,(sp)
00001AA2 3A17                       		move.w	(sp),d5
00001AA4 780F                       		moveq	#$F,d4
00001AA6                            
00001AA6                            loc_18A8:
00001AA6 E24D                       		lsr.w	#1,d5
00001AA8 40C6                       		move	sr,d6
00001AAA 51CC 0000                  		dbf	d4,loc_18BA
00001AAE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AB2 1E98                       		move.b	(a0)+,(sp)
00001AB4 3A17                       		move.w	(sp),d5
00001AB6 780F                       		moveq	#$F,d4
00001AB8                            
00001AB8                            loc_18BA:
00001AB8 44C6                       		move	d6,ccr
00001ABA 6400                       		bcc.s	loc_18C2
00001ABC 12D8                       		move.b	(a0)+,(a1)+
00001ABE 60E6                       		bra.s	loc_18A8
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            loc_18C2:				; XREF: KosDec
00001AC0 7600                       		moveq	#0,d3
00001AC2 E24D                       		lsr.w	#1,d5
00001AC4 40C6                       		move	sr,d6
00001AC6 51CC 0000                  		dbf	d4,loc_18D6
00001ACA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001ACE 1E98                       		move.b	(a0)+,(sp)
00001AD0 3A17                       		move.w	(sp),d5
00001AD2 780F                       		moveq	#$F,d4
00001AD4                            
00001AD4                            loc_18D6:
00001AD4 44C6                       		move	d6,ccr
00001AD6 6500                       		bcs.s	loc_1906
00001AD8 E24D                       		lsr.w	#1,d5
00001ADA 51CC 0000                  		dbf	d4,loc_18EA
00001ADE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AE2 1E98                       		move.b	(a0)+,(sp)
00001AE4 3A17                       		move.w	(sp),d5
00001AE6 780F                       		moveq	#$F,d4
00001AE8                            
00001AE8                            loc_18EA:
00001AE8 E353                       		roxl.w	#1,d3
00001AEA E24D                       		lsr.w	#1,d5
00001AEC 51CC 0000                  		dbf	d4,loc_18FC
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18FC:
00001AFA E353                       		roxl.w	#1,d3
00001AFC 5243                       		addq.w	#1,d3
00001AFE 74FF                       		moveq	#-1,d2
00001B00 1418                       		move.b	(a0)+,d2
00001B02 6000                       		bra.s	loc_191C
00001B04                            ; ===========================================================================
00001B04                            
00001B04                            loc_1906:				; XREF: loc_18C2
00001B04 1018                       		move.b	(a0)+,d0
00001B06 1218                       		move.b	(a0)+,d1
00001B08 74FF                       		moveq	#-1,d2
00001B0A 1401                       		move.b	d1,d2
00001B0C EB4A                       		lsl.w	#5,d2
00001B0E 1400                       		move.b	d0,d2
00001B10 0241 0007                  		andi.w	#7,d1
00001B14 6700                       		beq.s	loc_1928
00001B16 1601                       		move.b	d1,d3
00001B18 5243                       		addq.w	#1,d3
00001B1A                            
00001B1A                            loc_191C:
00001B1A 1031 2000                  		move.b	(a1,d2.w),d0
00001B1E 12C0                       		move.b	d0,(a1)+
00001B20 51CB FFF8                  		dbf	d3,loc_191C
00001B24 6080                       		bra.s	loc_18A8
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1928:				; XREF: loc_1906
00001B26 1218                       		move.b	(a0)+,d1
00001B28 6700                       		beq.s	loc_1938
00001B2A 0C01 0001                  		cmpi.b	#1,d1
00001B2E 6700 FF76                  		beq.w	loc_18A8
00001B32 1601                       		move.b	d1,d3
00001B34 60E4                       		bra.s	loc_191C
00001B36                            ; ===========================================================================
00001B36                            
00001B36                            loc_1938:				; XREF: loc_1928
00001B36 548F                       		addq.l	#2,sp
00001B38 4E75                       		rts	
00001B3A                            ; End of function KosDec
00001B3A                            
00001B3A                            ; ---------------------------------------------------------------------------
00001B3A                            ; Pallet cycling routine loading subroutine
00001B3A                            ; ---------------------------------------------------------------------------
00001B3A                            
00001B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B3A                            
00001B3A                            
00001B3A                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B3A 7400                       		moveq	#0,d2
00001B3C 7000                       		moveq	#0,d0
00001B3E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B42 D040                       		add.w	d0,d0		; multiply by 2
00001B44 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B48 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B4C                            ; End of function PalCycle_Load
00001B4C                            
00001B4C                            ; ===========================================================================
00001B4C                            ; ---------------------------------------------------------------------------
00001B4C                            ; Pallet cycling routines
00001B4C                            ; ---------------------------------------------------------------------------
00001B4C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B4E 0000                       		dc.w PalCycle_LZ-PalCycle
00001B50 0000                       		dc.w PalCycle_MZ-PalCycle
00001B52 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B54 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B56 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B58 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B5A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Title:				; XREF: TitleScreen
00001B5C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B62 6000                       		bra.s	loc_196A
00001B64                            ; ===========================================================================
00001B64                            
00001B64                            PalCycle_GHZ:				; XREF: PalCycle
00001B64 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B6A                            
00001B6A                            loc_196A:				; XREF: PalCycle_Title
00001B6A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B6E 6A00                       		bpl.s	locret_1990
00001B70 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B76 3038 F632                  		move.w	($FFFFF632).w,d0
00001B7A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B7E 0240 0003                  		andi.w	#3,d0
00001B82 E748                       		lsl.w	#3,d0
00001B84 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B88 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B8C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B90                            
00001B90                            locret_1990:
00001B90 4E75                       		rts	
00001B92                            ; End of function PalCycle_Title
00001B92                            
00001B92                            
00001B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B92                            
00001B92                            
00001B92                            PalCycle_LZ:				; XREF: PalCycle
00001B92 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B96 6A00                       		bpl.s	loc_19D8
00001B98 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B9E 3038 F632                  		move.w	($FFFFF632).w,d0
00001BA2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA6 0240 0003                  		andi.w	#3,d0
00001BAA E748                       		lsl.w	#3,d0
00001BAC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BB2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BB8 6600                       		bne.s	loc_19C0
00001BBA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BC0                            
00001BC0                            loc_19C0:
00001BC0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BC4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BCC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BD0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BD4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BD8                            
00001BD8                            loc_19D8:
00001BD8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BDC 0240 0007                  		andi.w	#7,d0
00001BE0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001BE4 6700                       		beq.s	locret_1A3A
00001BE6 7201                       		moveq	#1,d1
00001BE8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001BEC 6700                       		beq.s	loc_19F0
00001BEE 4441                       		neg.w	d1
00001BF0                            
00001BF0                            loc_19F0:
00001BF0 3038 F650                  		move.w	($FFFFF650).w,d0
00001BF4 0240 0003                  		andi.w	#3,d0
00001BF8 D041                       		add.w	d1,d0
00001BFA 0C40 0003                  		cmpi.w	#3,d0
00001BFE 6500                       		bcs.s	loc_1A0A
00001C00 3200                       		move.w	d0,d1
00001C02 7000                       		moveq	#0,d0
00001C04 4A41                       		tst.w	d1
00001C06 6A00                       		bpl.s	loc_1A0A
00001C08 7002                       		moveq	#2,d0
00001C0A                            
00001C0A                            loc_1A0A:
00001C0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C0E D040                       		add.w	d0,d0
00001C10 3200                       		move.w	d0,d1
00001C12 D040                       		add.w	d0,d0
00001C14 D041                       		add.w	d1,d0
00001C16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C3A                            
00001C3A                            locret_1A3A:
00001C3A 4E75                       		rts	
00001C3C                            ; End of function PalCycle_LZ
00001C3C                            
00001C3C                            ; ===========================================================================
00001C3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C44                            ; ===========================================================================
00001C44                            
00001C44                            PalCycle_MZ:				; XREF: PalCycle
00001C44 4E75                       		rts	
00001C46                            
00001C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C46                            
00001C46                            
00001C46                            PalCycle_SLZ:				; XREF: PalCycle
00001C46 4E75                       		rts	
00001C48                            ; End of function PalCycle_SLZ
00001C48                            
00001C48                            
00001C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C48                            
00001C48                            
00001C48                            PalCycle_SYZ:				; XREF: PalCycle
00001C48 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C4C 6A00                       		bpl.s	locret_1AC6
00001C4E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C54 3038 F632                  		move.w	($FFFFF632).w,d0
00001C58 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C5C 0240 0003                  		andi.w	#3,d0
00001C60 E548                       		lsl.w	#2,d0
00001C62 3200                       		move.w	d0,d1
00001C64 D040                       		add.w	d0,d0
00001C66 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C6C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C70 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C74 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C78 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C7E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C82 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C86 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C8C                            
00001C8C                            locret_1AC6:
00001C8C 4E75                       		rts	
00001C8E                            ; End of function PalCycle_SYZ
00001C8E                            
00001C8E                            
00001C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C8E                            
00001C8E                            
00001C8E                            PalCycle_SBZ:				; XREF: PalCycle
00001C8E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C94 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C98 6700                       		beq.s	loc_1ADA
00001C9A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CA0                            
00001CA0                            loc_1ADA:
00001CA0 43F8 F650                  		lea	($FFFFF650).w,a1
00001CA4 321A                       		move.w	(a2)+,d1
00001CA6                            
00001CA6                            loc_1AE0:
00001CA6 5311                       		subq.b	#1,(a1)
00001CA8 6B00                       		bmi.s	loc_1AEA
00001CAA 5489                       		addq.l	#2,a1
00001CAC 5C8A                       		addq.l	#6,a2
00001CAE 6000                       		bra.s	loc_1B06
00001CB0                            ; ===========================================================================
00001CB0                            
00001CB0                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CB0 12DA                       		move.b	(a2)+,(a1)+
00001CB2 1011                       		move.b	(a1),d0
00001CB4 5200                       		addq.b	#1,d0
00001CB6 B01A                       		cmp.b	(a2)+,d0
00001CB8 6500                       		bcs.s	loc_1AF6
00001CBA 7000                       		moveq	#0,d0
00001CBC                            
00001CBC                            loc_1AF6:
00001CBC 12C0                       		move.b	d0,(a1)+
00001CBE 0240 000F                  		andi.w	#$F,d0
00001CC2 D040                       		add.w	d0,d0
00001CC4 305A                       		movea.w	(a2)+,a0
00001CC6 365A                       		movea.w	(a2)+,a3
00001CC8 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CCC                            
00001CCC                            loc_1B06:				; XREF: PalCycle_SBZ
00001CCC 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CD0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CD4 6A00                       		bpl.s	locret_1B64
00001CD6 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CDC 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CE2 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CE6 6700                       		beq.s	loc_1B2E
00001CE8 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CEE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CF4                            
00001CF4                            loc_1B2E:
00001CF4 72FF                       		moveq	#-1,d1
00001CF6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CFA 6700                       		beq.s	loc_1B38
00001CFC 4441                       		neg.w	d1
00001CFE                            
00001CFE                            loc_1B38:
00001CFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001D02 0240 0003                  		andi.w	#3,d0
00001D06 D041                       		add.w	d1,d0
00001D08 0C40 0003                  		cmpi.w	#3,d0
00001D0C 6500                       		bcs.s	loc_1B52
00001D0E 3200                       		move.w	d0,d1
00001D10 7000                       		moveq	#0,d0
00001D12 4A41                       		tst.w	d1
00001D14 6A00                       		bpl.s	loc_1B52
00001D16 7002                       		moveq	#2,d0
00001D18                            
00001D18                            loc_1B52:
00001D18 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D1C D040                       		add.w	d0,d0
00001D1E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D22 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D26 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D2A                            
00001D2A                            locret_1B64:
00001D2A 4E75                       		rts	
00001D2C                            ; End of function PalCycle_SBZ
00001D2C                            
00001D2C                            ; ===========================================================================
00001D2C                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D4C                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D6C                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001D8C                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001D9E                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DB0                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E18                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E3C                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E5C                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E6C                            
00001E6C                            Pal_SBZCycList:
00001E6C                            	include "_inc\SBZ pallet script 1.asm"
00001E6C                            ; ---------------------------------------------------------------------------
00001E6C                            ; Scrap Brain Zone 1 pallet cycling script
00001E6C                            ; ---------------------------------------------------------------------------
00001E6C 0008                       	dc.w 8			; number of entries - 1
00001E6E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E70 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E72 FB50                       	dc.w $FB50		; RAM address
00001E74 0D08                       	dc.b $D, 8
00001E76 0000                       	dc.w Pal_SBZCyc2
00001E78 FB52                       	dc.w $FB52
00001E7A 0E08                       	dc.b $E, 8
00001E7C 0000                       	dc.w Pal_SBZCyc3
00001E7E FB6E                       	dc.w $FB6E
00001E80 0B08                       	dc.b $B, 8
00001E82 0000                       	dc.w Pal_SBZCyc5
00001E84 FB70                       	dc.w $FB70
00001E86 0708                       	dc.b 7,	8
00001E88 0000                       	dc.w Pal_SBZCyc6
00001E8A FB72                       	dc.w $FB72
00001E8C 1C10                       	dc.b $1C, $10
00001E8E 0000                       	dc.w Pal_SBZCyc7
00001E90 FB7E                       	dc.w $FB7E
00001E92 0303                       	dc.b 3,	3
00001E94 0000                       	dc.w Pal_SBZCyc8
00001E96 FB78                       	dc.w $FB78
00001E98 0303                       	dc.b 3,	3
00001E9A 0000                       	dc.w Pal_SBZCyc8+2
00001E9C FB7A                       	dc.w $FB7A
00001E9E 0303                       	dc.b 3,	3
00001EA0 0000                       	dc.w Pal_SBZCyc8+4
00001EA2 FB7C                       	dc.w $FB7C
00001EA4                            	even
00001EA4                            	even
00001EA4                            
00001EA4                            Pal_SBZCycList2:
00001EA4                            	include "_inc\SBZ pallet script 2.asm"
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4                            ; Scrap Brain Zone 2 pallet cycling script
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4 0006                       	dc.w 6
00001EA6 0708                       	dc.b 7,	8
00001EA8 0000                       	dc.w Pal_SBZCyc1
00001EAA FB50                       	dc.w $FB50
00001EAC 0D08                       	dc.b $D, 8
00001EAE 0000                       	dc.w Pal_SBZCyc2
00001EB0 FB52                       	dc.w $FB52
00001EB2 0908                       	dc.b 9,	8
00001EB4 0000                       	dc.w Pal_SBZCyc9
00001EB6 FB70                       	dc.w $FB70
00001EB8 0708                       	dc.b 7,	8
00001EBA 0000                       	dc.w Pal_SBZCyc6
00001EBC FB72                       	dc.w $FB72
00001EBE 0303                       	dc.b 3,	3
00001EC0 0000                       	dc.w Pal_SBZCyc8
00001EC2 FB78                       	dc.w $FB78
00001EC4 0303                       	dc.b 3,	3
00001EC6 0000                       	dc.w Pal_SBZCyc8+2
00001EC8 FB7A                       	dc.w $FB7A
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8+4
00001ECE FB7C                       	dc.w $FB7C
00001ED0                            	even
00001ED0                            	even
00001ED0                            
00001ED0                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001EE0                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001EF0                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F00                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F0C                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F1C                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F2C                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F4C                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F56                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F66                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F72                            ; ---------------------------------------------------------------------------
00001F72                            ; Subroutine to	fade out and fade in
00001F72                            ; ---------------------------------------------------------------------------
00001F72                            
00001F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F72                            
00001F72                            
00001F72                            Pal_FadeTo:
00001F72 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F78                            
00001F78                            Pal_FadeTo2:
00001F78 7000                       		moveq	#0,d0
00001F7A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7E 1038 F626                  		move.b	($FFFFF626).w,d0
00001F82 D0C0                       		adda.w	d0,a0
00001F84 7200                       		moveq	#0,d1
00001F86 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8A                            
00001F8A                            Pal_ToBlack:
00001F8A 30C1                       		move.w	d1,(a0)+
00001F8C 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001F90                            
00001F90 383C 0015                  		move.w	#$15,d4
00001F94 1A3C 0009                  		move.b	#9,d5
00001F98                            
00001F98                            loc_1DCE:
00001F98 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F9E 6100 0000                  		bsr.w	DelayProgram
00001FA2 6100                       		bsr.s	Pal_FadeIn
00001FA4 6100 F844                  		bsr.w	RunPLC_RAM
00001FA8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FAC 4E75                       		rts	
00001FAE                            ; End of function Pal_FadeTo
00001FAE                            
00001FAE                            ; ---------------------------------------------------------------------------
00001FAE                            ; Pallet fade-in subroutine
00001FAE                            ; ---------------------------------------------------------------------------
00001FAE                            
00001FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAE                            
00001FAE                            
00001FAE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FAE 7000                       		moveq	#0,d0
00001FB0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE D2C0                       		adda.w	d0,a1
00001FC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC4                            
00001FC4                            loc_1DFA:
00001FC4 6100                       		bsr.s	Pal_AddColor
00001FC6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FCA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FD0 6600                       		bne.s	locret_1E24
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FD8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FE0 D0C0                       		adda.w	d0,a0
00001FE2 D2C0                       		adda.w	d0,a1
00001FE4 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE8                            
00001FE8                            loc_1E1E:
00001FE8 6100                       		bsr.s	Pal_AddColor
00001FEA 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FEE                            
00001FEE                            locret_1E24:
00001FEE 4E75                       		rts	
00001FF0                            ; End of function Pal_FadeIn
00001FF0                            
00001FF0                            
00001FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF0                            
00001FF0                            
00001FF0                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FF0 3419                       		move.w	(a1)+,d2
00001FF2 3610                       		move.w	(a0),d3
00001FF4 B642                       		cmp.w	d2,d3
00001FF6 6700                       		beq.s	loc_1E4E
00001FF8 3203                       		move.w	d3,d1
00001FFA 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001FFE B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002000 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002002 30C1                       		move.w	d1,(a0)+	; update pallet
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            Pal_AddGreen:				; XREF: Pal_AddColor
00002006 3203                       		move.w	d3,d1
00002008 0641 0020                  		addi.w	#$20,d1		; increase green value
0000200C B242                       		cmp.w	d2,d1
0000200E 6200                       		bhi.s	Pal_AddRed
00002010 30C1                       		move.w	d1,(a0)+	; update pallet
00002012 4E75                       		rts	
00002014                            ; ===========================================================================
00002014                            
00002014                            Pal_AddRed:				; XREF: Pal_AddGreen
00002014 5458                       		addq.w	#2,(a0)+	; increase red value
00002016 4E75                       		rts	
00002018                            ; ===========================================================================
00002018                            
00002018                            loc_1E4E:				; XREF: Pal_AddColor
00002018 5448                       		addq.w	#2,a0
0000201A 4E75                       		rts	
0000201C                            ; End of function Pal_AddColor
0000201C                            
0000201C                            
0000201C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201C                            
0000201C                            
0000201C                            Pal_FadeFrom:
0000201C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002022 383C 0015                  		move.w	#$15,d4
00002026                            loc_1E5C:
00002026 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000202C 6100 0000                  		bsr.w	DelayProgram
00002030 6100                       		bsr.s	Pal_FadeOut
00002032 6100 F7B6                  		bsr.w	RunPLC_RAM
00002036 51CC FFEE                  		dbf	d4,loc_1E5C
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_FadeFrom
0000203C                            
0000203C                            ; ---------------------------------------------------------------------------
0000203C                            ; Pallet fade-out subroutine
0000203C                            ; ---------------------------------------------------------------------------
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000203C 7000                       		moveq	#0,d0
0000203E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002042 1038 F626                  		move.b	($FFFFF626).w,d0
00002046 D0C0                       		adda.w	d0,a0
00002048 1038 F627                  		move.b	($FFFFF627).w,d0
0000204C                            
0000204C                            loc_1E82:
0000204C 6100                       		bsr.s	Pal_DecColor
0000204E 51C8 FFFC                  		dbf	d0,loc_1E82
00002052                            
00002052 7000                       		moveq	#0,d0
00002054 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002058 1038 F626                  		move.b	($FFFFF626).w,d0
0000205C D0C0                       		adda.w	d0,a0
0000205E 1038 F627                  		move.b	($FFFFF627).w,d0
00002062                            
00002062                            loc_1E98:
00002062 6100                       		bsr.s	Pal_DecColor
00002064 51C8 FFFC                  		dbf	d0,loc_1E98
00002068 4E75                       		rts	
0000206A                            ; End of function Pal_FadeOut
0000206A                            
0000206A                            
0000206A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000206A                            
0000206A                            
0000206A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000206A 3410                       		move.w	(a0),d2
0000206C 6700                       		beq.s	loc_1ECC
0000206E 3202                       		move.w	d2,d1
00002070 0241 000E                  		andi.w	#$E,d1
00002074 6700                       		beq.s	Pal_DecGreen
00002076 5558                       		subq.w	#2,(a0)+	; decrease red value
00002078 4E75                       		rts	
0000207A                            ; ===========================================================================
0000207A                            
0000207A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000207A 3202                       		move.w	d2,d1
0000207C 0241 00E0                  		andi.w	#$E0,d1
00002080 6700                       		beq.s	Pal_DecBlue
00002082 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            Pal_DecBlue:				; XREF: Pal_DecGreen
00002088 3202                       		move.w	d2,d1
0000208A 0241 0E00                  		andi.w	#$E00,d1
0000208E 6700                       		beq.s	loc_1ECC
00002090 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002094 4E75                       		rts	
00002096                            ; ===========================================================================
00002096                            
00002096                            loc_1ECC:				; XREF: Pal_DecColor
00002096 5448                       		addq.w	#2,a0
00002098 4E75                       		rts	
0000209A                            ; End of function Pal_DecColor
0000209A                            
0000209A                            ; ---------------------------------------------------------------------------
0000209A                            ; Subroutine to	fill the pallet	with white (special stage)
0000209A                            ; ---------------------------------------------------------------------------
0000209A                            
0000209A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000209A                            
0000209A                            
0000209A                            Pal_MakeWhite:				; XREF: SpecialStage
0000209A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020A0 7000                       		moveq	#0,d0
000020A2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020A6 1038 F626                  		move.b	($FFFFF626).w,d0
000020AA D0C0                       		adda.w	d0,a0
000020AC 323C 0EEE                  		move.w	#$EEE,d1
000020B0 1038 F627                  		move.b	($FFFFF627).w,d0
000020B4                            
000020B4                            PalWhite_Loop:
000020B4 30C1                       		move.w	d1,(a0)+
000020B6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020BA 383C 0015                  		move.w	#$15,d4
000020BE                            
000020BE                            loc_1EF4:
000020BE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020C4 6100 0000                  		bsr.w	DelayProgram
000020C8 6100                       		bsr.s	Pal_WhiteToBlack
000020CA 6100 F71E                  		bsr.w	RunPLC_RAM
000020CE 51CC FFEE                  		dbf	d4,loc_1EF4
000020D2 4E75                       		rts	
000020D4                            ; End of function Pal_MakeWhite
000020D4                            
000020D4                            
000020D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D4                            
000020D4                            
000020D4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020D4 7000                       		moveq	#0,d0
000020D6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020DE 1038 F626                  		move.b	($FFFFF626).w,d0
000020E2 D0C0                       		adda.w	d0,a0
000020E4 D2C0                       		adda.w	d0,a1
000020E6 1038 F627                  		move.b	($FFFFF627).w,d0
000020EA                            
000020EA                            loc_1F20:
000020EA 6100                       		bsr.s	Pal_DecColor2
000020EC 51C8 FFFC                  		dbf	d0,loc_1F20
000020F0                            
000020F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020F6 6600                       		bne.s	locret_1F4A
000020F8 7000                       		moveq	#0,d0
000020FA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020FE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002102 1038 F626                  		move.b	($FFFFF626).w,d0
00002106 D0C0                       		adda.w	d0,a0
00002108 D2C0                       		adda.w	d0,a1
0000210A 1038 F627                  		move.b	($FFFFF627).w,d0
0000210E                            
0000210E                            loc_1F44:
0000210E 6100                       		bsr.s	Pal_DecColor2
00002110 51C8 FFFC                  		dbf	d0,loc_1F44
00002114                            
00002114                            locret_1F4A:
00002114 4E75                       		rts	
00002116                            ; End of function Pal_WhiteToBlack
00002116                            
00002116                            
00002116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002116                            
00002116                            
00002116                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002116 3419                       		move.w	(a1)+,d2
00002118 3610                       		move.w	(a0),d3
0000211A B642                       		cmp.w	d2,d3
0000211C 6700                       		beq.s	loc_1F78
0000211E 3203                       		move.w	d3,d1
00002120 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002124 6500                       		bcs.s	loc_1F64
00002126 B242                       		cmp.w	d2,d1
00002128 6500                       		bcs.s	loc_1F64
0000212A 30C1                       		move.w	d1,(a0)+
0000212C 4E75                       		rts	
0000212E                            ; ===========================================================================
0000212E                            
0000212E                            loc_1F64:				; XREF: Pal_DecColor2
0000212E 3203                       		move.w	d3,d1
00002130 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002134 6500                       		bcs.s	loc_1F74
00002136 B242                       		cmp.w	d2,d1
00002138 6500                       		bcs.s	loc_1F74
0000213A 30C1                       		move.w	d1,(a0)+
0000213C 4E75                       		rts	
0000213E                            ; ===========================================================================
0000213E                            
0000213E                            loc_1F74:				; XREF: loc_1F64
0000213E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002140 4E75                       		rts	
00002142                            ; ===========================================================================
00002142                            
00002142                            loc_1F78:				; XREF: Pal_DecColor2
00002142 5448                       		addq.w	#2,a0
00002144 4E75                       		rts	
00002146                            ; End of function Pal_DecColor2
00002146                            
00002146                            ; ---------------------------------------------------------------------------
00002146                            ; Subroutine to	make a white flash when	you enter a special stage
00002146                            ; ---------------------------------------------------------------------------
00002146                            
00002146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002146                            
00002146                            
00002146                            Pal_MakeFlash:				; XREF: SpecialStage
00002146 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000214C 383C 0015                  		move.w	#$15,d4
00002150                            
00002150                            loc_1F86:
00002150 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002156 6100 0000                  		bsr.w	DelayProgram
0000215A 6100                       		bsr.s	Pal_ToWhite
0000215C 6100 F68C                  		bsr.w	RunPLC_RAM
00002160 51CC FFEE                  		dbf	d4,loc_1F86
00002164 4E75                       		rts	
00002166                            ; End of function Pal_MakeFlash
00002166                            
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002166 7000                       		moveq	#0,d0
00002168 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000216C 1038 F626                  		move.b	($FFFFF626).w,d0
00002170 D0C0                       		adda.w	d0,a0
00002172 1038 F627                  		move.b	($FFFFF627).w,d0
00002176                            
00002176                            loc_1FAC:
00002176 6100                       		bsr.s	Pal_AddColor2
00002178 51C8 FFFC                  		dbf	d0,loc_1FAC
0000217C 7000                       		moveq	#0,d0
0000217E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002182 1038 F626                  		move.b	($FFFFF626).w,d0
00002186 D0C0                       		adda.w	d0,a0
00002188 1038 F627                  		move.b	($FFFFF627).w,d0
0000218C                            
0000218C                            loc_1FC2:
0000218C 6100                       		bsr.s	Pal_AddColor2
0000218E 51C8 FFFC                  		dbf	d0,loc_1FC2
00002192 4E75                       		rts	
00002194                            ; End of function Pal_ToWhite
00002194                            
00002194                            
00002194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002194                            
00002194                            
00002194                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002194 3410                       		move.w	(a0),d2
00002196 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000219A 6700                       		beq.s	loc_2006
0000219C 3202                       		move.w	d2,d1
0000219E 0241 000E                  		andi.w	#$E,d1
000021A2 0C41 000E                  		cmpi.w	#$E,d1
000021A6 6700                       		beq.s	loc_1FE2
000021A8 5458                       		addq.w	#2,(a0)+	; increase red value
000021AA 4E75                       		rts	
000021AC                            ; ===========================================================================
000021AC                            
000021AC                            loc_1FE2:				; XREF: Pal_AddColor2
000021AC 3202                       		move.w	d2,d1
000021AE 0241 00E0                  		andi.w	#$E0,d1
000021B2 0C41 00E0                  		cmpi.w	#$E0,d1
000021B6 6700                       		beq.s	loc_1FF4
000021B8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021BC 4E75                       		rts	
000021BE                            ; ===========================================================================
000021BE                            
000021BE                            loc_1FF4:				; XREF: loc_1FE2
000021BE 3202                       		move.w	d2,d1
000021C0 0241 0E00                  		andi.w	#$E00,d1
000021C4 0C41 0E00                  		cmpi.w	#$E00,d1
000021C8 6700                       		beq.s	loc_2006
000021CA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021CE 4E75                       		rts	
000021D0                            ; ===========================================================================
000021D0                            
000021D0                            loc_2006:				; XREF: Pal_AddColor2
000021D0 5448                       		addq.w	#2,a0
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_AddColor2
000021D4                            
000021D4                            ; ---------------------------------------------------------------------------
000021D4                            ; Pallet cycling routine - Sega	logo
000021D4                            ; ---------------------------------------------------------------------------
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            PalCycle_Sega:				; XREF: SegaScreen
000021D4 4A38 F635                  		tst.b	($FFFFF635).w
000021D8 6600                       		bne.s	loc_206A
000021DA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021DE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021E4 7205                       		moveq	#5,d1
000021E6 3038 F632                  		move.w	($FFFFF632).w,d0
000021EA                            
000021EA                            loc_2020:
000021EA 6A00                       		bpl.s	loc_202A
000021EC 5448                       		addq.w	#2,a0
000021EE 5341                       		subq.w	#1,d1
000021F0 5440                       		addq.w	#2,d0
000021F2 60F6                       		bra.s	loc_2020
000021F4                            ; ===========================================================================
000021F4                            
000021F4                            loc_202A:				; XREF: PalCycle_Sega
000021F4 3400                       		move.w	d0,d2
000021F6 0242 001E                  		andi.w	#$1E,d2
000021FA 6600                       		bne.s	loc_2034
000021FC 5440                       		addq.w	#2,d0
000021FE                            
000021FE                            loc_2034:
000021FE 0C40 0060                  		cmpi.w	#$60,d0
00002202 6400                       		bcc.s	loc_203E
00002204 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002208                            
00002208                            loc_203E:
00002208 5440                       		addq.w	#2,d0
0000220A 51C9 FFE8                  		dbf	d1,loc_202A
0000220E 3038 F632                  		move.w	($FFFFF632).w,d0
00002212 5440                       		addq.w	#2,d0
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2054
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2054:
0000221E 0C40 0064                  		cmpi.w	#$64,d0
00002222 6D00                       		blt.s	loc_2062
00002224 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000222A 70F4                       		moveq	#-$C,d0
0000222C                            
0000222C                            loc_2062:
0000222C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002230 7001                       		moveq	#1,d0
00002232 4E75                       		rts	
00002234                            ; ===========================================================================
00002234                            
00002234                            loc_206A:				; XREF: loc_202A
00002234 5338 F634                  		subq.b	#1,($FFFFF634).w
00002238 6A00                       		bpl.s	loc_20BC
0000223A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002240 3038 F632                  		move.w	($FFFFF632).w,d0
00002244 0640 000C                  		addi.w	#$C,d0
00002248 0C40 0030                  		cmpi.w	#$30,d0
0000224C 6500                       		bcs.s	loc_2088
0000224E 7000                       		moveq	#0,d0
00002250 4E75                       		rts	
00002252                            ; ===========================================================================
00002252                            
00002252                            loc_2088:				; XREF: loc_206A
00002252 31C0 F632                  		move.w	d0,($FFFFF632).w
00002256 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000225C 41F0 0000                  		lea	(a0,d0.w),a0
00002260 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002264 22D8                       		move.l	(a0)+,(a1)+
00002266 22D8                       		move.l	(a0)+,(a1)+
00002268 3298                       		move.w	(a0)+,(a1)
0000226A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000226E 7000                       		moveq	#0,d0
00002270 722C                       		moveq	#$2C,d1
00002272                            
00002272                            loc_20A8:
00002272 3400                       		move.w	d0,d2
00002274 0242 001E                  		andi.w	#$1E,d2
00002278 6600                       		bne.s	loc_20B2
0000227A 5440                       		addq.w	#2,d0
0000227C                            
0000227C                            loc_20B2:
0000227C 3390 0000                  		move.w	(a0),(a1,d0.w)
00002280 5440                       		addq.w	#2,d0
00002282 51C9 FFEE                  		dbf	d1,loc_20A8
00002286                            
00002286                            loc_20BC:
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; End of function PalCycle_Sega
0000228A                            
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            Pal_Sega1:	incbin	pallet\sega1.bin
00002296                            Pal_Sega2:	incbin	pallet\sega2.bin
000022C6                            
000022C6                            ; ---------------------------------------------------------------------------
000022C6                            ; Subroutines to load pallets
000022C6                            ; ---------------------------------------------------------------------------
000022C6                            
000022C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022C6                            
000022C6                            
000022C6                            PalLoad1:
000022C6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022CC E748                       		lsl.w	#3,d0
000022CE D2C0                       		adda.w	d0,a1
000022D0 2459                       		movea.l	(a1)+,a2
000022D2 3659                       		movea.w	(a1)+,a3
000022D4 D6FC 0080                  		adda.w	#$80,a3
000022D8 3E19                       		move.w	(a1)+,d7
000022DA                            
000022DA                            loc_2110:
000022DA 26DA                       		move.l	(a2)+,(a3)+
000022DC 51CF FFFC                  		dbf	d7,loc_2110
000022E0 4E75                       		rts	
000022E2                            ; End of function PalLoad1
000022E2                            
000022E2                            
000022E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E2                            
000022E2                            
000022E2                            PalLoad2:
000022E2 43F9 0000 0000             		lea	(PalPointers).l,a1
000022E8 E748                       		lsl.w	#3,d0
000022EA D2C0                       		adda.w	d0,a1
000022EC 2459                       		movea.l	(a1)+,a2
000022EE 3659                       		movea.w	(a1)+,a3
000022F0 3E19                       		move.w	(a1)+,d7
000022F2                            
000022F2                            loc_2128:
000022F2 26DA                       		move.l	(a2)+,(a3)+
000022F4 51CF FFFC                  		dbf	d7,loc_2128
000022F8 4E75                       		rts	
000022FA                            ; End of function PalLoad2
000022FA                            
000022FA                            ; ---------------------------------------------------------------------------
000022FA                            ; Underwater pallet loading subroutine
000022FA                            ; ---------------------------------------------------------------------------
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            PalLoad3_Water:
000022FA 43F9 0000 0000             		lea	(PalPointers).l,a1
00002300 E748                       		lsl.w	#3,d0
00002302 D2C0                       		adda.w	d0,a1
00002304 2459                       		movea.l	(a1)+,a2
00002306 3659                       		movea.w	(a1)+,a3
00002308 96FC 0080                  		suba.w	#$80,a3
0000230C 3E19                       		move.w	(a1)+,d7
0000230E                            
0000230E                            loc_2144:
0000230E 26DA                       		move.l	(a2)+,(a3)+
00002310 51CF FFFC                  		dbf	d7,loc_2144
00002314 4E75                       		rts	
00002316                            ; End of function PalLoad3_Water
00002316                            
00002316                            
00002316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002316                            
00002316                            
00002316                            PalLoad4_Water:
00002316 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231C E748                       		lsl.w	#3,d0
0000231E D2C0                       		adda.w	d0,a1
00002320 2459                       		movea.l	(a1)+,a2
00002322 3659                       		movea.w	(a1)+,a3
00002324 96FC 0100                  		suba.w	#$100,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2160:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2160
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad4_Water
00002332                            
00002332                            ; ===========================================================================
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Pallet pointers
00002332                            ; ---------------------------------------------------------------------------
00002332                            PalPointers:
00002332                            	include "_inc\Pallet pointers.asm"
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Pallet pointers
00002332                            ; ---------------------------------------------------------------------------
00002332 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002336 FB00                       	dc.w $FB00		; RAM address
00002338 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000233A 0000 0000                  	dc.l Pal_Title
0000233E FB00                       	dc.w $FB00
00002340 001F                       	dc.w $1F
00002342 0000 0000                  	dc.l Pal_LevelSel
00002346 FB00                       	dc.w $FB00
00002348 001F                       	dc.w $1F
0000234A 0000 0000                  	dc.l Pal_Sonic
0000234E FB00                       	dc.w $FB00
00002350 0007                       	dc.w 7
00002352 0000 0000                  	dc.l Pal_GHZ
00002356 FB20                       	dc.w $FB20
00002358 0017                       	dc.w $17
0000235A 0000 0000                  	dc.l Pal_LZ
0000235E FB20                       	dc.w $FB20
00002360 0017                       	dc.w $17
00002362 0000 0000                  	dc.l Pal_MZ
00002366 FB20                       	dc.w $FB20
00002368 0017                       	dc.w $17
0000236A 0000 0000                  	dc.l Pal_SLZ
0000236E FB20                       	dc.w $FB20
00002370 0017                       	dc.w $17
00002372 0000 0000                  	dc.l Pal_SYZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_SBZ1
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_Special
00002386 FB00                       	dc.w $FB00
00002388 001F                       	dc.w $1F
0000238A 0000 0000                  	dc.l Pal_LZWater
0000238E FB00                       	dc.w $FB00
00002390 001F                       	dc.w $1F
00002392 0000 0000                  	dc.l Pal_SBZ3
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ3Water
0000239E FB00                       	dc.w $FB00
000023A0 001F                       	dc.w $1F
000023A2 0000 0000                  	dc.l Pal_SBZ2
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023AA 0000 0000                  	dc.l Pal_LZSonWater
000023AE FB00                       	dc.w $FB00
000023B0 0007                       	dc.w 7
000023B2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023B6 FB00                       	dc.w $FB00
000023B8 0007                       	dc.w 7
000023BA 0000 0000                  	dc.l Pal_SpeResult
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SpeContinue
000023C6 FB00                       	dc.w $FB00
000023C8 000F                       	dc.w $F
000023CA 0000 0000                  	dc.l Pal_Ending
000023CE FB00                       	dc.w $FB00
000023D0 001F                       	dc.w $1F
000023D2 0000 0000                  	dc.l Pal_Idiot
000023D6 FB20                       	dc.w $FB20
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_BHZ
000023DE FB20                       	dc.w $FB20
000023E0 0017                       	dc.w $17
000023E2 0000 0000                  	dc.l Pal_Gronic
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                  	dc.l Pal_LZGroWater
000023EE FB00                       	dc.w $FB00
000023F0 0007                       	dc.w 7
000023F2 0000 0000                  	dc.l Pal_SBZ3GroWat
000023F6 FB00                       	dc.w $FB00
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Anakama
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002400 0007                       	dc.w 7
00002402                            
00002402                            ; ---------------------------------------------------------------------------
00002402                            ; Pallet data
00002402                            ; ---------------------------------------------------------------------------
00002402                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002482                            Pal_Title:	incbin	pallet\title.bin
00002502                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002582                            Pal_Sonic:	incbin	pallet\sonic.bin
000025A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002602                            Pal_LZ:		incbin	pallet\lz.bin
00002662                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026E2                            Pal_MZ:		incbin	pallet\mz.bin
00002742                            Pal_SLZ:	incbin	pallet\slz.bin
000027A2                            Pal_SYZ:	incbin	pallet\syz.bin
00002802                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002862                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028C2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002942                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029A2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A22                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A42                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A62                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AC2                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B42                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B82                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C02                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C22                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C42                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C62                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C82                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D02                            
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            
00002D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D02                            
00002D02                            
00002D02                            DelayProgram:				; XREF: PauseGame
00002D02 46FC 2300                  		move	#$2300,sr
00002D06                            
00002D06                            loc_29AC:
00002D06 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D0A 66FA                       		bne.s	loc_29AC
00002D0C 4E75                       		rts	
00002D0E                            ; End of function DelayProgram
00002D0E                            
00002D0E                            ; ---------------------------------------------------------------------------
00002D0E                            ; Subroutine to	generate a pseudo-random number	in d0
00002D0E                            ; ---------------------------------------------------------------------------
00002D0E                            
00002D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D0E                            
00002D0E                            
00002D0E                            RandomNumber:
00002D0E 2238 F636                  		move.l	($FFFFF636).w,d1
00002D12 6600                       		bne.s	loc_29C0
00002D14 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D1A                            
00002D1A                            loc_29C0:
00002D1A 2001                       		move.l	d1,d0
00002D1C E581                       		asl.l	#2,d1
00002D1E D280                       		add.l	d0,d1
00002D20 E781                       		asl.l	#3,d1
00002D22 D280                       		add.l	d0,d1
00002D24 3001                       		move.w	d1,d0
00002D26 4841                       		swap	d1
00002D28 D041                       		add.w	d1,d0
00002D2A 3200                       		move.w	d0,d1
00002D2C 4841                       		swap	d1
00002D2E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D32 4E75                       		rts	
00002D34                            ; End of function RandomNumber
00002D34                            
00002D34                            
00002D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D34                            
00002D34                            
00002D34                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D34 0240 00FF                  		andi.w	#$FF,d0
00002D38 D040                       		add.w	d0,d0
00002D3A 0640 0080                  		addi.w	#$80,d0
00002D3E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D42 0440 0080                  		subi.w	#$80,d0
00002D46 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D4A 4E75                       		rts	
00002D4C                            ; End of function CalcSine
00002D4C                            
00002D4C                            ; ===========================================================================
00002D4C                            
00002D4C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002FCC                            
00002FCC                            ; ===========================================================================
00002FCC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002FD0 3200                       		move.w	d0,d1
00002FD2 4841                       		swap	d1
00002FD4 7000                       		moveq	#0,d0
00002FD6 3200                       		move.w	d0,d1
00002FD8 7407                       		moveq	#7,d2
00002FDA                            
00002FDA                            loc_2C80:
00002FDA E599                       		rol.l	#2,d1
00002FDC D040                       		add.w	d0,d0
00002FDE 5240                       		addq.w	#1,d0
00002FE0 9240                       		sub.w	d0,d1
00002FE2 6400                       		bcc.s	loc_2C9A
00002FE4 D240                       		add.w	d0,d1
00002FE6 5340                       		subq.w	#1,d0
00002FE8 51CA FFF0                  		dbf	d2,loc_2C80
00002FEC E248                       		lsr.w	#1,d0
00002FEE 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FF2 4E75                       		rts	
00002FF4                            ; ===========================================================================
00002FF4                            
00002FF4                            loc_2C9A:
00002FF4 5240                       		addq.w	#1,d0
00002FF6 51CA FFE2                  		dbf	d2,loc_2C80
00002FFA E248                       		lsr.w	#1,d0
00002FFC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003000 4E75                       		rts	
00003002                            
00003002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003002                            
00003002                            
00003002                            CalcAngle:
00003002 48E7 1800                  		movem.l	d3-d4,-(sp)
00003006 7600                       		moveq	#0,d3
00003008 7800                       		moveq	#0,d4
0000300A 3601                       		move.w	d1,d3
0000300C 3802                       		move.w	d2,d4
0000300E 8843                       		or.w	d3,d4
00003010 6700                       		beq.s	loc_2D04
00003012 3802                       		move.w	d2,d4
00003014 4A43                       		tst.w	d3
00003016 6A00 0000                  		bpl.w	loc_2CC2
0000301A 4443                       		neg.w	d3
0000301C                            
0000301C                            loc_2CC2:
0000301C 4A44                       		tst.w	d4
0000301E 6A00 0000                  		bpl.w	loc_2CCA
00003022 4444                       		neg.w	d4
00003024                            
00003024                            loc_2CCA:
00003024 B843                       		cmp.w	d3,d4
00003026 6400 0000                  		bcc.w	loc_2CDC
0000302A E18C                       		lsl.l	#8,d4
0000302C 88C3                       		divu.w	d3,d4
0000302E 7000                       		moveq	#0,d0
00003030 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003034 6000                       		bra.s	loc_2CE6
00003036                            ; ===========================================================================
00003036                            
00003036                            loc_2CDC:				; XREF: CalcAngle
00003036 E18B                       		lsl.l	#8,d3
00003038 86C4                       		divu.w	d4,d3
0000303A 7040                       		moveq	#$40,d0
0000303C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003040                            
00003040                            loc_2CE6:
00003040 4A41                       		tst.w	d1
00003042 6A00 0000                  		bpl.w	loc_2CF2
00003046 4440                       		neg.w	d0
00003048 0640 0080                  		addi.w	#$80,d0
0000304C                            
0000304C                            loc_2CF2:
0000304C 4A42                       		tst.w	d2
0000304E 6A00 0000                  		bpl.w	loc_2CFE
00003052 4440                       		neg.w	d0
00003054 0640 0100                  		addi.w	#$100,d0
00003058                            
00003058                            loc_2CFE:
00003058 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000305C 4E75                       		rts	
0000305E                            ; ===========================================================================
0000305E                            
0000305E                            loc_2D04:				; XREF: CalcAngle
0000305E 303C 0040                  		move.w	#$40,d0
00003062 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003066 4E75                       		rts	
00003068                            ; End of function CalcAngle
00003068                            
00003068                            ; ===========================================================================
00003068                            
00003068                            Angle_Data:	incbin	misc\angles.bin
0000316A                            
0000316A                            ; ===========================================================================
0000316A                            
0000316A                            ; ---------------------------------------------------------------------------
0000316A                            ; Sega screen
0000316A                            ; ---------------------------------------------------------------------------
0000316A                            
0000316A                            SegaScreen:				; XREF: GameModeArray
0000316A 103C 00E4                  		move.b	#$E4,d0
0000316E 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
00003172 6100 E668                  		bsr.w	ClearPLC
00003176 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000317A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003180 3CBC 8004                  		move.w	#$8004,(a6)
00003184 3CBC 8230                  		move.w	#$8230,(a6)
00003188 3CBC 8407                  		move.w	#$8407,(a6)
0000318C 3CBC 8700                  		move.w	#$8700,(a6)
00003190 3CBC 8B00                  		move.w	#$8B00,(a6)
00003194 4238 F64E                  		clr.b	($FFFFF64E).w
00003198 46FC 2700                  		move	#$2700,sr
0000319C 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031A0 0200 00BF                  		andi.b	#$BF,d0
000031A4 33C0 00C0 0004             		move.w	d0,($C00004).l
000031AA 6100 E316                  		bsr.w	ClearScreen
000031AE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031B8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031BE 6100 E47E                  		bsr.w	NemDec
000031C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000031C8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031CE 303C 0000                  		move.w	#0,d0
000031D2 6100 E748                  		bsr.w	EniDec
000031D6 43F9 00FF 0000             		lea	($FF0000).l,a1
000031DC 203C 6510 0003             		move.l	#$65100003,d0
000031E2 7217                       		moveq	#$17,d1
000031E4 7407                       		moveq	#7,d2
000031E6 6100 E436                  		bsr.w	ShowVDPGraphics
000031EA 43F9 00FF 0180             		lea	($FF0180).l,a1
000031F0 203C 4000 0003             		move.l	#$40000003,d0
000031F6 7227                       		moveq	#$27,d1
000031F8 741B                       		moveq	#$1B,d2
000031FA 6100 E422                  		bsr.w	ShowVDPGraphics
000031FE 7000                       		moveq	#0,d0
00003200 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003204 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000320A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003210 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003216 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000321C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003220 0000 0040                  		ori.b	#$40,d0
00003224 33C0 00C0 0004             		move.w	d0,($C00004).l
0000322A                            
0000322A                            Sega_WaitPallet:
0000322A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003230 6100 FAD0                  		bsr.w	DelayProgram
00003234 6100 EF9E                  		bsr.w	PalCycle_Sega
00003238 66F0                       		bne.s	Sega_WaitPallet
0000323A                            
0000323A 103C 00E1                  		move.b	#$E1,d0
0000323E 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003242 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003248 6100 FAB8                  		bsr.w	DelayProgram
0000324C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003252                            
00003252                            Sega_WaitEnd:
00003252 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003258 6100 FAA8                  		bsr.w	DelayProgram
0000325C 4A78 F614                  		tst.w	($FFFFF614).w
00003260 6700                       		beq.s	Sega_GotoTitle
00003262 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003268 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000326A                            
0000326A                            Sega_GotoTitle:
0000326A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003270 4E75                       		rts	
00003272                            ; ===========================================================================
00003272                            
00003272                            ; ---------------------------------------------------------------------------
00003272                            ; Title	screen
00003272                            ; ---------------------------------------------------------------------------
00003272                            
00003272                            TitleScreen:				; XREF: GameModeArray
00003272 103C 00E4                  		move.b	#$E4,d0
00003276 6100 E322                  		bsr.w	PlaySound_Special ; stop music
0000327A 6100 EDA0                  		bsr.w	Pal_FadeFrom
0000327E 6100 E55C                  		bsr.w	ClearPLC
00003282 46FC 2700                  		move	#$2700,sr
00003286 6100 E2C8                  		bsr.w	SoundDriverLoad
0000328A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003290 3CBC 8004                  		move.w	#$8004,(a6)
00003294 3CBC 8230                  		move.w	#$8230,(a6)
00003298 3CBC 8407                  		move.w	#$8407,(a6)
0000329C 3CBC 9001                  		move.w	#$9001,(a6)
000032A0 3CBC 9200                  		move.w	#$9200,(a6)
000032A4 3CBC 8B03                  		move.w	#$8B03,(a6)
000032A8 3CBC 8720                  		move.w	#$8720,(a6)
000032AC 4238 F64E                  		clr.b	($FFFFF64E).w
000032B0 6100 E210                  		bsr.w	ClearScreen
000032B4 43F8 D000                  		lea	($FFFFD000).w,a1
000032B8 7000                       		moveq	#0,d0
000032BA 323C 07FF                  		move.w	#$7FF,d1
000032BE                            
000032BE                            Title_ClrObjRam:
000032BE 22C0                       		move.l	d0,(a1)+
000032C0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032C4                            
000032C4                            ; gomer
000032C4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032CE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032D4 6100 E368                  		bsr.w	NemDec
000032D8 7003                       		moveq	#3,d0		; load Sonic's pallet
000032DA 6100 EFEA                  		bsr.w	PalLoad1
000032DE                            
000032DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E4 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032EA 303C 0000                  		move.w	#0,d0
000032EE 6100 E62C                  		bsr.w	EniDec
000032F2                            ; help how the fuck can i do this IT SHOWS NOTHING
000032F2 6100 EC7E                  		bsr.w	Pal_FadeTo
000032F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000032FC 203C 4000 0003             		move.l	#$40000003,d0
00003302 7227                       		moveq	#$27,d1
00003304 741B                       		moveq	#$1B,d2
00003306 6100 E316                  		bsr.w	ShowVDPGraphics
0000330A                            
0000330A                            
0000330A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003310 203C 6000 0003             		move.l	#$60000003,d0
00003316 7227                       		moveq	#$27,d1
00003318 741B                       		moveq	#$1B,d2
0000331A                            
0000331A 6100 ED00                  		bsr.w	Pal_FadeFrom
0000331E                            
0000331E                            
0000331E 6100 E1A2                  		bsr.w	ClearScreen
00003322 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000332C 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003332 6100 E30A                  		bsr.w	NemDec
00003336 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003340 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003346 6100 E2F6                  		bsr.w	NemDec
0000334A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003350 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003356 303C 0000                  		move.w	#0,d0
0000335A 6100 E5C0                  		bsr.w	EniDec
0000335E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003364 203C 4000 0003             		move.l	#$40000003,d0
0000336A 7227                       		moveq	#$27,d1
0000336C 741B                       		moveq	#$1B,d2
0000336E 6100 E2AE                  		bsr.w	ShowVDPGraphics
00003372 6100 ECA8                  		bsr.w	Pal_FadeFrom
00003376 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000337A 7000                       		moveq	#0,d0
0000337C 323C 001F                  		move.w	#$1F,d1
00003380                            
00003380                            
00003380                            Title_ClrPallet:
00003380 22C0                       		move.l	d0,(a1)+
00003382 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003386                            
00003386 7003                       		moveq	#3,d0		; load Sonic's pallet
00003388 6100 EF3C                  		bsr.w	PalLoad1
0000338C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003392 4EB9 0000 0000             		jsr	ObjectsLoad
00003398 4EB9 0000 0000             		jsr	BuildSprites
0000339E 6100 EBD2                  		bsr.w	Pal_FadeTo
000033A2 46FC 2700                  		move	#$2700,sr
000033A6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033B0 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033B6 6100 E286                  		bsr.w	NemDec
000033BA 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033C4 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000033CA 6100 E272                  		bsr.w	NemDec
000033CE 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033D8 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033DE 6100 E25E                  		bsr.w	NemDec
000033E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000033E8 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033F0 4BF9 0000 05E2             		lea	(Art_Text).l,a5
000033F6 323C 0BA9                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033FA                            
000033FA                            Title_LoadText:
000033FA 2C9D                       		move.l	(a5)+,(a6)
000033FC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003400                            
00003400 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003406 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000340C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003412 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003418 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000341E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003424 6100 0000                  		bsr.w	LevelSizeLoad
00003428 6100 0000                  		bsr.w	DeformBgLayer
0000342C                            
0000342C 43F8 B000                  		lea	($FFFFB000).w,a1
00003430 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003436 303C 0000                  		move.w	#0,d0
0000343A 6100 E4E0                  		bsr.w	EniDec
0000343E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003444 43F9 00FF 0000             		lea	($FF0000).l,a1
0000344A 6100 E64E                  		bsr.w	KosDec
0000344E 6100 0000                  		bsr.w	LevelLayoutLoad
00003452                            
00003452 46FC 2700                  		move	#$2700,sr
00003456 6100 E06A                  		bsr.w	ClearScreen
0000345A 4BF9 00C0 0004             		lea	($C00004).l,a5
00003460 4DF9 00C0 0000             		lea	($C00000).l,a6
00003466 47F8 F708                  		lea	($FFFFF708).w,a3
0000346A 49F8 A440                  		lea	($FFFFA440).w,a4
0000346E 343C 6000                  		move.w	#$6000,d2
00003472 6100 0000                  		bsr.w	LoadTilesFromStart2
00003476 43F9 00FF 0000             		lea	($FF0000).l,a1
0000347C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003482 303C 0000                  		move.w	#0,d0
00003486 6100 E494                  		bsr.w	EniDec
0000348A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003490 203C 4206 0003             		move.l	#$42060003,d0
00003496 7221                       		moveq	#$21,d1
00003498 7415                       		moveq	#$15,d2
0000349A 6100 E182                  		bsr.w	ShowVDPGraphics
0000349E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034A8 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034AE 6100 E18E                  		bsr.w	NemDec
000034B2 7001                       		moveq	#1,d0		; load title screen pallet
000034B4 6100 EE10                  		bsr.w	PalLoad1
000034B8 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034BC 6100 E0DC                  		bsr.w	PlaySound_Special
000034C0 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034C6 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000034CC 43F8 D080                  		lea	($FFFFD080).w,a1
000034D0 7000                       		moveq	#0,d0
000034D2 323C 000F                  		move.w	#$F,d1
000034D6                            
000034D6                            Title_ClrObjRam2:
000034D6 22C0                       		move.l	d0,(a1)+
000034D8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034DC                            
000034DC 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034E2 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034E8 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034EE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034F4 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034FA 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003500 4EB9 0000 0000             		jsr	ObjectsLoad
00003506 6100 0000                  		bsr.w	DeformBgLayer
0000350A 4EB9 0000 0000             		jsr	BuildSprites
00003510 7000                       		moveq	#0,d0
00003512 6100 E29C                  		bsr.w	LoadPLC2
00003516 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000351C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003522 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003526 0000 0040                  		ori.b	#$40,d0
0000352A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003530 6100 EA40                  		bsr.w	Pal_FadeTo
00003534                            
00003534                            loc_317C:
00003534 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000353A 6100 F7C6                  		bsr.w	DelayProgram
0000353E 4EB9 0000 0000             		jsr	ObjectsLoad
00003544 6100 0000                  		bsr.w	DeformBgLayer
00003548 4EB9 0000 0000             		jsr	BuildSprites
0000354E 6100 E60C                  		bsr.w	PalCycle_Title
00003552 6100 E296                  		bsr.w	RunPLC_RAM
00003556 3038 D008                  		move.w	($FFFFD008).w,d0
0000355A 5440                       		addq.w	#2,d0
0000355C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003560 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003564 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003566 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000356C 4E75                       		rts	
0000356E                            ; ===========================================================================
0000356E                            
0000356E                            Title_ChkRegion:
0000356E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003572 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003574 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000357A 6000                       		bra.s	Title_EnterCheat
0000357C                            ; ===========================================================================
0000357C                            
0000357C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000357C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003582                            
00003582                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003582 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003586 D0C0                       		adda.w	d0,a0
00003588 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000358C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003590 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003592 6600                       		bne.s	loc_3210	; if not, branch
00003594 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003598 4A00                       		tst.b	d0
0000359A 6600                       		bne.s	Title_CountC
0000359C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035A0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035A4 E249                       		lsr.w	#1,d1
000035A6 0241 0003                  		andi.w	#3,d1
000035AA 6700                       		beq.s	Title_PlayRing
000035AC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035B0 6A00                       		bpl.s	Title_PlayRing
000035B2 7201                       		moveq	#1,d1
000035B4 1181 1001                  		move.b	d1,1(a0,d1.w)
000035B8                            
000035B8                            Title_PlayRing:
000035B8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035BE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C2 6100 DFD6                  		bsr.w	PlaySound_Special
000035C6 6000                       		bra.s	Title_CountC
000035C8                            ; ===========================================================================
000035C8                            
000035C8                            loc_3210:				; XREF: Title_EnterCheat
000035C8 4A00                       		tst.b	d0
000035CA 6700                       		beq.s	Title_CountC
000035CC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035D2 6700                       		beq.s	Title_CountC
000035D4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035DA                            
000035DA                            Title_CountC:
000035DA 1038 F605                  		move.b	($FFFFF605).w,d0
000035DE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035E2 6700                       		beq.s	loc_3230	; if not, branch
000035E4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035E8                            
000035E8                            loc_3230:
000035E8 4A78 F614                  		tst.w	($FFFFF614).w
000035EC 6700 0000                  		beq.w	Demo
000035F0                            		; (temporary until we have an actual options screen)
000035F0 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035F6 6700                       		beq.s	@notc
000035F8                            
000035F8 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035FC 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003602 6D00                       		blt.s	@notoverflow
00003604 11FC 0000 FFE8             		move.b	#0,(v_character).w
0000360A                            	@notoverflow:
0000360A 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000360E 6100 DF8A                  		bsr.w	PlaySound_Special
00003612                            	@notc:
00003612 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003618 6700 FF1A                  		beq.w	loc_317C	; if not, branch
0000361C                            
0000361C                            Title_ChkLevSel:
0000361C 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003622 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003626                            		
00003626                            		
00003626 7002                       		moveq	#2,d0
00003628 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
0000362C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003630 7000                       		moveq	#0,d0
00003632 323C 00DF                  		move.w	#$DF,d1
00003636                            
00003636                            Title_ClrScroll:
00003636 22C0                       		move.l	d0,(a1)+
00003638 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000363C                            
0000363C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003640 46FC 2700                  		move	#$2700,sr
00003644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000364A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003654 323C 03FF                  		move.w	#$3FF,d1
00003658                            
00003658                            Title_ClrVram:
00003658 2C80                       		move.l	d0,(a6)
0000365A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000365E                            
0000365E 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003662 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003666                            
00003666 6100 0000                  		bsr.w	LevSelTextLoad
0000366A                            		
0000366A                            		; sound test fix
0000366A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000366E 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003674                            		
00003674 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003678 0C46 0014                  		cmpi.w	#$14,d6
0000367C 6700                       		beq.s	@issndtst
0000367E 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003682                            	@issndtst:
00003682 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003686 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000368A                            		
0000368A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000368E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003696                            		
00003696 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000369C 6700                       		beq.s	@issndtst2
0000369E                            		
0000369E 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036A4 6100 0000                  		bsr.w	CStringSlop
000036A8 6000                       		bra.s	LevelSelect
000036AA                            	@issndtst2:
000036AA 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036B0 6100 0000                  		bsr.w	CStringSlop
000036B4                            		
000036B4                            ; ---------------------------------------------------------------------------
000036B4                            ; Level	Select
000036B4                            ; ---------------------------------------------------------------------------
000036B4                            LevelSelect:
000036B4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036BA 6100 F646                  		bsr.w	DelayProgram
000036BE 6100 0000                  		bsr.w	LevSelControls
000036C2 6100 E126                  		bsr.w	RunPLC_RAM
000036C6 4AB8 F680                  		tst.l	($FFFFF680).w
000036CA 66E8                       		bne.s	LevelSelect
000036CC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036D2 67E0                       		beq.s	LevelSelect	; if not, branch
000036D4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036D8 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036DC 6600                       		bne.s	@dont	; if not, dont blow this place up
000036DE                            			
000036DE 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036E4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036EA 6100 F616                  		bsr.w	DelayProgram
000036EE                            	@dont:
000036EE 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036F2 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036F4                            		
000036F4 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036FA 67B8                       		beq.s	LevelSelect	; if not, branch
000036FC                            		
000036FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003702 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003704                            		
00003704 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003708 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000370C                            		
0000370C 4EB9 0000 0000             		jsr		ShowNow_Playing
00003712 60A0                       		bra.s	LevelSelect
00003714                            ; ===========================================================================
00003714                            
00003714                            LevSel_SEGA:				; XREF: LevelSelect
00003714 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000371A 4E75                       		rts	
0000371C                            ; ===========================================================================
0000371C                            
0000371C                            LevSel_Ending:				; XREF: LevelSelect
0000371C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003722 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003728 4E75                       		rts	
0000372A                            ; ===========================================================================
0000372A                            
0000372A                            LevSel_Credits:				; XREF: LevelSelect
0000372A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003730 103C 0091                  		move.b	#$91,d0
00003734 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
00003738 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000373E 4E75                       		rts	
00003740                            ; ===========================================================================
00003740                            
00003740                            LevSel_Level_SS:			; XREF: LevelSelect
00003740 D040                       		add.w	d0,d0
00003742 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003746 6B00 FF6C                  		bmi.w	LevelSelect
0000374A 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
0000374E 6600                       		bne.s	LevSel_Level	; if not, branch
00003750 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003756 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000375A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003760 7000                       		moveq	#0,d0
00003762 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003766 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000376A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000376E 4E75                       		rts	
00003770                            ; ===========================================================================
00003770                            
00003770                            LevSel_Level:				; XREF: LevSel_Level_SS
00003770 0240 3FFF                  		andi.w	#$3FFF,d0
00003774 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003778                            
00003778                            PlayLevel:				; XREF: ROM:00003246j ...
00003778 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000377E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003784 7000                       		moveq	#0,d0
00003786 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000378A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000378E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003792 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003796 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000379A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000379E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037A2 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037A6 103C 00E0                  		move.b	#$E0,d0
000037AA 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037AE 4E75                       		rts	
000037B0                            ; ===========================================================================
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            ; Level	select - level pointers
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            LSelectPointers:
000037B0 0000                       		dc.w $0000 ; crz
000037B2 0001                       		dc.w $0001
000037B4 0002                       		dc.w $0002
000037B6 0100                       		dc.w $0100 ; ilfez
000037B8 0101                       		dc.w $0101
000037BA 0102                       		dc.w $0102
000037BC 0200                       		dc.w $0200 ; mz
000037BE 0201                       		dc.w $0201
000037C0 0202                       		dc.w $0202
000037C2 0300                       		dc.w $0300 ; dgrotz
000037C4 0301                       		dc.w $0301 
000037C6 0302                       		dc.w $0302 
000037C8 0700                       		dc.w $0700 ; the other mz...
000037CA 0701                       		dc.w $0701 
000037CC 0702                       		dc.w $0702 
000037CE 0400                       		dc.w $0400 ; tpfbz
000037D0 0401                       		dc.w $0401
000037D2 0402                       		dc.w $0402
000037D4 0500                       		dc.w $0500 ; zzzzz
000037D6 0501                       		dc.w $0501 
000037D8 0103                       		dc.w $0103 
000037DA 0502                       		dc.w $0502 ; fz
000037DC FFFF                       		dc.w $FFFF ; special
000037DE 8000                       		dc.w $8000 ; sound test
000037E0                            		even
000037E0                            ; --------------------------------------
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            ; Level	select codes
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            LevelSelectCode_J:
000037E0                            		incbin	misc\ls_jcode.bin
000037E6                            		even
000037E6                            
000037E6                            LevelSelectCode_US:
000037E6                            		incbin	misc\ls_ucode.bin
000037EC                            		even
000037EC                            ; ===========================================================================
000037EC                            
000037EC                            ; ---------------------------------------------------------------------------
000037EC                            ; Demo mode
000037EC                            ; ---------------------------------------------------------------------------
000037EC                            
000037EC                            Demo:					; XREF: TitleScreen
000037EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037F2                            
000037F2                            loc_33B6:				; XREF: loc_33E4
000037F2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037F8 6100 F508                  		bsr.w	DelayProgram
000037FC 6100 0000                  		bsr.w	DeformBgLayer
00003800 6100 E338                  		bsr.w	PalCycle_Load
00003804 6100 DFE4                  		bsr.w	RunPLC_RAM
00003808 3038 D008                  		move.w	($FFFFD008).w,d0
0000380C 5440                       		addq.w	#2,d0
0000380E 31C0 D008                  		move.w	d0,($FFFFD008).w
00003812 0C40 1C00                  		cmpi.w	#$1C00,d0
00003816 6500                       		bcs.s	loc_33E4
00003818 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000381E 4E75                       		rts	
00003820                            ; ===========================================================================
00003820                            
00003820                            loc_33E4:				; XREF: Demo
00003820 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003826 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
0000382A 4A78 F614                  		tst.w	($FFFFF614).w
0000382E 6600 FFC2                  		bne.w	loc_33B6
00003832 103C 00E0                  		move.b	#$E0,d0
00003836 6100 DD62                  		bsr.w	PlaySound_Special ; fade out music
0000383A 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000383E 0240 0007                  		andi.w	#7,d0
00003842 D040                       		add.w	d0,d0
00003844 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003848 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000384C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003850 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003856 6500                       		bcs.s	loc_3422	; if yes, branch
00003858 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000385E                            
0000385E                            loc_3422:
0000385E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003864 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000386A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000386E 6600                       		bne.s	Demo_Level	; if not, branch
00003870 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003876 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000387A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000387E                            
0000387E                            Demo_Level:
0000387E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003884 7000                       		moveq	#0,d0
00003886 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000388A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000388E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003892 4E75                       		rts	
00003894                            ; ===========================================================================
00003894                            ; ---------------------------------------------------------------------------
00003894                            ; Levels used in demos
00003894                            ; ---------------------------------------------------------------------------
00003894                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000389C                            		even
0000389C                            
0000389C                            ; ---------------------------------------------------------------------------
0000389C                            ; Subroutine to	change what you're selecting in the level select
0000389C                            ; ---------------------------------------------------------------------------
0000389C                            
0000389C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000389C                            
0000389C                            
0000389C                            LevSelControls:				; XREF: LevelSelect
0000389C 1238 F605                  		move.b	($FFFFF605).w,d1
000038A0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038A4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038A6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038AA 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038AE                            
000038AE                            LevSel_UpDown:
000038AE 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038B4 1238 F604                  		move.b	($FFFFF604).w,d1
000038B8 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038BC 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038C0 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038C4 0801 0000                  		btst	#0,d1		; is up	pressed?
000038C8 6700                       		beq.s	LevSel_Down	; if not, branch
000038CA 5346                       		subq.w	#1,d6		; move up 1 selection
000038CC 6400                       		bcc.s	LevSel_Down
000038CE 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000038D0                            
000038D0                            LevSel_Down:
000038D0 0801 0001                  		btst	#1,d1		; is down pressed?
000038D4 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038D6 5246                       		addq.w	#1,d6		; move down 1 selection
000038D8 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038DC 6500                       		bcs.s	LevSel_Refresh
000038DE 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038E0 6000                       		bra.s	LevSel_Refresh
000038E2                            		
000038E2                            LevSel_LR:
000038E2 0801 0002                  		btst	#2,d1		; is left pressed?
000038E6 6700                       		beq.s	LevSel_Right	; if not, branch
000038E8 0446 0000                  		sub.w	#lsrow2size,d6
000038EC 64E2                       		bcc.s	LevSel_Down
000038EE 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038F2                            LevSel_Right:
000038F2 0801 0003                  		btst	#3,d1		; is right pressed?
000038F6 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038F8 0646 0000                  		add.w	#lsrow1size,d6
000038FC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003900 6500                       		bcs.s	LevSel_Refresh
00003902 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003906                            ; ===========================================================================
00003906                            LevSel_Refresh:
00003906                            		
00003906 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000390A 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000390E                            		
0000390E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003914 6600                       		bne.s	@exitsndtest
00003916                            		
00003916 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000391A 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003920 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003928 6100 0000                  		bsr.w	CStringSlop
0000392C                            	@exitsndtest:
0000392C                            	
0000392C 363C C65F                  		move.w	#$C680-$21,d3
00003930 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003934 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003938                            		
00003938 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000393E 6600                       		bne.s	@entersndtest
00003940                            		
00003940 363C C65F                  		move.w	#$C680-$21,d3
00003944 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000394A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003952 6100 0000                  		bsr.w	CStringSlop
00003956                            	@entersndtest:
00003956 4E75                       		rts	
00003958                            		
00003958                            LevSel_SndTest:				; XREF: LevSelControls
00003958 1238 F605                  		move.b	($FFFFF605).w,d1
0000395C 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003960 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003962 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003968 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000396C                            		
0000396C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003970 0801 0002                  		btst	#2,d1		; is left pressed?
00003974 6700                       		beq.s	SndTest_Right	; if not, branch
00003976 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003978                            		; no need the fact it's a byte does the trick
00003978                            
00003978                            SndTest_Right:
00003978 0801 0003                  		btst	#3,d1		; is right pressed?
0000397C 6700                       		beq.s	SndTest_A	; if not, branch
0000397E 5200                       		addq.b	#1,d0		; add 1	to sound test
00003980                            		; same here
00003980                            		
00003980                            SndTest_A:
00003980 0801 0006                  		btst	#6,d1		; is A pressed?
00003984 6700                       		beq.s	SndTest_B	; if not, branch
00003986 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003988 5100                       		subq.b	#8,d0
0000398A                            		
0000398A                            SndTest_B:
0000398A 0801 0004                  		btst	#4,d1		; is B pressed?
0000398E 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003990 5000                       		addq.b	#8,d0		; add $10 to sound test
00003992 5000                       		addq.b	#8,d0
00003994                            
00003994                            SndTest_Refresh:
00003994 363C C65F                  		move.w	#$C680-$21,d3
00003998 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000399C 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039A0                            
000039A0                            LevSel_NoMove:
000039A0 4E75                       		rts	
000039A2                            ; End of function LevSelControls
000039A2                            
000039A2                            ; ---------------------------------------------------------------------------
000039A2                            ; Subroutine to load level select text
000039A2                            ; ---------------------------------------------------------------------------
000039A2                            
000039A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039A2                            
000039A2                            LevSelTextLoad_loop:
000039A2 2D44 0004                  		move.l	d4,4(a6)
000039A6 6100 0000                  		bsr.w	LevSel_ChgLine
000039AA 0684 0080 0000             		addi.l	#$800000,d4
000039B0 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039B4 4E75                       		rts
000039B6                            LevSelTextLoad:				; XREF: TitleScreen
000039B6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000039C2 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039C6 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039CC                            		
000039CC 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000039D0 61D0                       		bsr.s	LevSelTextLoad_loop
000039D2                            		
000039D2                            		
000039D2 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039D8 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039DC 61C4                       		bsr.s	LevSelTextLoad_loop
000039DE 363C C65F                  		move.w	#$C680-$21,d3
000039E2                            		
000039E2                            LevSelHighlightCode:
000039E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000039E8 7000                       		moveq	#0,d0
000039EA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039EE 3200                       		move.w	d0,d1
000039F0 283C 6086 0003             		move.l	#lsscrpos,d4
000039F6                            		
000039F6 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039FA 6D00                       		blt.s	@notsecond
000039FC                            		
000039FC 0440 0000                  		sub.w	#lsrow1size,d0
00003A00 0684 0024 0000             		addi.l	#lsoff,d4
00003A06                            	@notsecond:
00003A06 EF48                       		lsl.w	#7,d0
00003A08 4840                       		swap	d0
00003A0A D880                       		add.l	d0,d4
00003A0C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A12 E749                       		lsl.w	#3,d1
00003A14 D241                       		add.w	d1,d1
00003A16 D2C1                       		adda.w	d1,a1
00003A18 2D44 0004                  		move.l	d4,4(a6)
00003A1C 6100 0000                  		bsr.w	LevSel_ChgLine
00003A20 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A26 6700                       		beq.s	LevSelSndTest
00003A28 4E75                       		rts
00003A2A                            
00003A2A                            LevSelSndTest:
00003A2A 0643 0030                  		add.w	#$30,d3
00003A2E 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A38 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A3C 1400                       		move.b	d0,d2
00003A3E E808                       		lsr.b	#4,d0
00003A40 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A44 1002                       		move.b	d2,d0
00003A46 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A4A 4E75                       		rts	
00003A4C                            ; End of function LevSelTextLoad
00003A4C                            
00003A4C                            
00003A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A4C                            
00003A4C                            
00003A4C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A4C 0240 000F                  		andi.w	#$F,d0
00003A50 0C00 000A                  		cmpi.b	#$A,d0
00003A54 6500                       		bcs.s	loc_3580
00003A56 5E00                       		addi.b	#7,d0
00003A58                            
00003A58                            loc_3580:
00003A58 D043                       		add.w	d3,d0
00003A5A 3C80                       		move.w	d0,(a6)
00003A5C 4E75                       		rts	
00003A5E                            ; End of function LevSel_ChgSnd
00003A5E                            
00003A5E                            
00003A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5E                            
00003A5E                            
00003A5E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A5E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A60                            
00003A60                            @loop:
00003A60 7000                       		moveq	#0,d0
00003A62 1019                       		move.b	(a1)+,d0
00003A64 0C00 0020                  		cmpi.b	#$20,d0
00003A68 6E00                       		bgt.s	@draw
00003A6A 3CBC 0000                  		move.w	#0,(a6)
00003A6E 51CA FFF0                  		dbf	d2,@loop
00003A72 4E75                       		rts	
00003A74                            ; ===========================================================================
00003A74                            
00003A74                            @draw:				; XREF: LevSel_ChgLine
00003A74 D043                       		add.w	d3,d0
00003A76 3C80                       		move.w	d0,(a6)
00003A78 51CA FFE6                  		dbf	d2,@loop
00003A7C 4E75                       		rts	
00003A7E                            ; End of function LevSel_ChgLine
00003A7E                            		
00003A7E                            CStringSlop_draw:
00003A7E D043                       		add.w	d3,d0
00003A80 3C80                       		move.w	d0,(a6)
00003A82                            CStringSlop:				; XREF: LevSelTextLoad
00003A82 7000                       		moveq	#0,d0
00003A84 1019                       		move.b	(a1)+,d0
00003A86 0C00 0020                  		cmpi.b	#$20,d0
00003A8A 6EF2                       		bgt.s	CStringSlop_draw
00003A8C                            		
00003A8C 0C00 0001                  		cmpi.b	#1,d0
00003A90 6700                       		beq.s	@InsertSpaces
00003A92 6500                       		blo.s	@end
00003A94                            		
00003A94 3CBC 0000                  		move.w	#0,(a6)
00003A98 60E8                       		bra.s	CStringSlop
00003A9A                            	@end:
00003A9A 4E75                       		rts
00003A9C                            	@InsertSpaces:
00003A9C 7000                       		moveq	#0,d0
00003A9E 1019                       		move.b	(a1)+,d0
00003AA0                            		
00003AA0                            	@insert:
00003AA0 3CBC 0000                  		move.w	#0,(a6)
00003AA4 51C8 FFFA                  		dbf.w	d0,@insert
00003AA8 60D8                       		bra.s	CStringSlop
00003AAA                            ; End of function LevSel_ChgLine
00003AAA                            
00003AAA                            ; ===========================================================================
00003AAA                            ; ---------------------------------------------------------------------------
00003AAA                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AAA                            ; ---------------------------------------------------------------------------
00003AAA                            LevelMenuText:	
00003AAA 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003ABA 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ACA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ADA 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AEA 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AFA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B0A 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B1A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B2A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B3A 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B4A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B5A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B6A 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003B7A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B8A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B9A                            LMTSecondRow:
00003B9A 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BAA 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BBA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BCA 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BDA 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BEA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BFA 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C0A 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C1A 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C2A 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C3A 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C4A                            LMTSelectableEnd:
00003C4A 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C5A                            LMTEnd:
00003C5A                            
00003C5A                            Now_Playing:
00003C5A 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C6A                            		even
00003C6A                            NP_Track:
00003C6A 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C72                            		even
00003C72                            NP_SFX:
00003C72 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C7A                            		even
00003C7A                            
00003C7A                            ShowNow_Playing:
00003C7A 1C00                       		move.b	d0,d6
00003C7C 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C80 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C84 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C8A 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C92 6100 FDEE                  		bsr.w	CStringSlop
00003C96                            		
00003C96 43FA FFD2                  		lea	NP_Track(pc),a1
00003C9A 0C06 00A0                  		cmpi.b	#$A0,d6
00003C9E 6D00                       		blt.s	@track
00003CA0                            		
00003CA0 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CA4                            	@track:
00003CA4 6100 FDDC                  		bsr.w	CStringSlop
00003CA8                            		
00003CA8 0643 0030                  		add.w	#$30,d3
00003CAC 1006                       		move.b	d6,d0
00003CAE 1400                       		move.b	d0,d2
00003CB0 E808                       		lsr.b	#4,d0
00003CB2 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CB6 1002                       		move.b	d2,d0
00003CB8 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CBC 4E75                       		rts	
00003CBE                            
00003CBE                            ; 1 is insert spaces btw
00003CBE                            Controls_Normal:
00003CBE 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CCA                            		even		
00003CCA                            Controls_SND:
00003CCA 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CF0 00                         		even
00003CF0                            		
00003CF0                            OptionMenuText:	
00003CF0 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D00 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D10                            OMTEnd:
00003D10                            		
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            ; Level	Select
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            GotoOptions:
00003D10 43F9 0000 3CF0             		lea	(OptionMenuText).l,a1
00003D16 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D1C 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D20 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D26                            		
00003D26 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D2A 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D2E                            
00003D2E                            OptionsMenu:
00003D2E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D34 6100 EFCC                  		bsr.w	DelayProgram
00003D38 6100 0000                  		bsr.w	OptControls
00003D3C 6100 DAAC                  		bsr.w	RunPLC_RAM
00003D40 4AB8 F680                  		tst.l	($FFFFF680).w
00003D44 66E8                       		bne.s	OptionsMenu
00003D46 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D4C 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D4E 4E71                       		nop
00003D50 60DC                       		bra.s	OptionsMenu
00003D52                            		
00003D52                            OptReturn:
00003D52 4E75                       		rts
00003D54                            OptControls:				; XREF: LevelSelect
00003D54 1238 F605                  		move.b	($FFFFF605).w,d1
00003D58 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D5C 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D5E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D62 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D64                            Opt_UpDown:
00003D64 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D6A 1238 F604                  		move.b	($FFFFF604).w,d1
00003D6E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D72 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D76 6700                       		beq.s	Opt_Down	; if not, branch
00003D78 5346                       		subq.w	#1,d6		; move up 1 selection
00003D7A 6400                       		bcc.s	Opt_Down
00003D7C 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D7E                            
00003D7E                            Opt_Down:
00003D7E 0801 0001                  		btst	#1,d1		; is down pressed?
00003D82 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D84 5246                       		addq.w	#1,d6		; move down 1 selection
00003D86 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D8A 6500                       		bcs.s	Opt_Refresh
00003D8C 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D8E                            Opt_Refresh:
00003D8E                            		
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            ; Music	playlist
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            MusicList1:	incbin	misc\muslist1.bin
00003D96                            		even
00003D96                            MusicList2:	incbin	misc\muslist2.bin
00003D9E                            		even
00003D9E                            MusicList3:	incbin	misc\muslist3.bin
00003DA6                            		even
00003DA6                            MusicList4:	incbin	misc\muslist4.bin
00003DAE                            		even
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            ; ---------------------------------------------------------------------------
00003DAE                            ; Level
00003DAE                            ; ---------------------------------------------------------------------------
00003DAE                            
00003DAE                            Level:					; XREF: GameModeArray
00003DAE 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DB8 6B00                       		bmi.s	loc_37B6
00003DBA 103C 00E0                  		move.b	#$E0,d0
00003DBE 6100 D7DA                  		bsr.w	PlaySound_Special ; fade out music
00003DC2                            
00003DC2                            loc_37B6:
00003DC2 6100 DA18                  		bsr.w	ClearPLC
00003DC6 6100 E254                  		bsr.w	Pal_FadeFrom
00003DCA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DCE 6B00                       		bmi.s	Level_ClrRam
00003DD0 46FC 2700                  		move	#$2700,sr
00003DD4 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DDE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DE4 6100 D858                  		bsr.w	NemDec
00003DE8 46FC 2300                  		move	#$2300,sr
00003DEC 7000                       		moveq	#0,d0
00003DEE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DF2 E948                       		lsl.w	#4,d0
00003DF4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003DFA 45F2 0000                  		lea	(a2,d0.w),a2
00003DFE 7000                       		moveq	#0,d0
00003E00 1012                       		move.b	(a2),d0
00003E02 6700                       		beq.s	loc_37FC
00003E04 6100 D978                  		bsr.w	LoadPLC		; load level patterns
00003E08                            
00003E08                            loc_37FC:
00003E08 7001                       		moveq	#1,d0
00003E0A 6100 D972                  		bsr.w	LoadPLC		; load standard	patterns
00003E0E                            
00003E0E                            Level_ClrRam:
00003E0E 43F8 D000                  		lea	($FFFFD000).w,a1
00003E12 7000                       		moveq	#0,d0
00003E14 323C 07FF                  		move.w	#$7FF,d1
00003E18                            
00003E18                            Level_ClrObjRam:
00003E18 22C0                       		move.l	d0,(a1)+
00003E1A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E1E                            
00003E1E 43F8 F628                  		lea	($FFFFF628).w,a1
00003E22 7000                       		moveq	#0,d0
00003E24 323C 0015                  		move.w	#$15,d1
00003E28                            
00003E28                            Level_ClrVars:
00003E28 22C0                       		move.l	d0,(a1)+
00003E2A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E2E                            
00003E2E 43F8 F700                  		lea	($FFFFF700).w,a1
00003E32 7000                       		moveq	#0,d0
00003E34 323C 003F                  		move.w	#$3F,d1
00003E38                            
00003E38                            Level_ClrVars2:
00003E38 22C0                       		move.l	d0,(a1)+
00003E3A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E3E                            
00003E3E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E42 7000                       		moveq	#0,d0
00003E44 323C 0047                  		move.w	#$47,d1
00003E48                            
00003E48                            Level_ClrVars3:
00003E48 22C0                       		move.l	d0,(a1)+
00003E4A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E4E                            
00003E4E 46FC 2700                  		move	#$2700,sr
00003E52 6100 D66E                  		bsr.w	ClearScreen
00003E56 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E5C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E60 3CBC 8230                  		move.w	#$8230,(a6)
00003E64 3CBC 8407                  		move.w	#$8407,(a6)
00003E68 3CBC 857C                  		move.w	#$857C,(a6)
00003E6C 3CBC 9001                  		move.w	#$9001,(a6)
00003E70 3CBC 8004                  		move.w	#$8004,(a6)
00003E74 3CBC 8720                  		move.w	#$8720,(a6)
00003E78 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E7E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E82 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E88 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E8A 3CBC 8014                  		move.w	#$8014,(a6)
00003E8E 7000                       		moveq	#0,d0
00003E90 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E94 D040                       		add.w	d0,d0
00003E96 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003E9C 3031 0000                  		move.w	(a1,d0.w),d0
00003EA0 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EA4 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EA8 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EAC 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EB0 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EB4 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EBA 6000 0000                  		bra.w	Level_LoadPal
00003EBE                            Player_Palette:
00003EBE                            		; normal, lz, sbz, blank
00003EBE 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EC6                            		
00003EC6 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003ECE 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003ED6 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003EDE                            
00003EDE                            		; add more player palettes
00003EDE                            Level_LoadPal:
00003EDE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003EE4 46FC 2300                  		move	#$2300,sr
00003EE8                            
00003EE8 7200                       		moveq	#0,d1
00003EEA 1238 FFE8                  		move.b	(v_character),d1
00003EEE D241                       		add.w	d1,d1
00003EF0 D241                       		add.w	d1,d1
00003EF2 D241                       		add.w	d1,d1
00003EF4 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EF8                            		
00003EF8 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003EFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F02 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F04 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F08 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F0E 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F10 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F14                            
00003F14                            Level_WaterPal:
00003F14 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F18 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F1C 6700                       		beq.s	Level_GetBgm
00003F1E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F24                            
00003F24                            ; NineKode begins here - How to play different songs on different acts
00003F24                             
00003F24                            Level_GetBgm:
00003F24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F28 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F2C 7000                       		moveq	#0,d0
00003F2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F32                             
00003F32 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F38 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F3A 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F40 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F42                             
00003F42                            Level_GetBgm2:
00003F42 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F48 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F4A 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F50 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F52                             
00003F52                            Level_GetBgm3:
00003F52 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F58 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F5A 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F60 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F62                             
00003F62                            Level_GetBgm4:
00003F62 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F68 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F6A 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F70                             
00003F70                            Level_PlayBgm:
00003F70 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F74 6100 D61E                  		bsr.w	PlaySound	; play music
00003F78 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F7E                             
00003F7E                            ; NineKode ends here
00003F7E                            
00003F7E                            Level_TtlCard:
00003F7E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F84 6100 ED7C                  		bsr.w	DelayProgram
00003F88 4EB9 0000 0000             		jsr	ObjectsLoad
00003F8E 4EB9 0000 0000             		jsr	BuildSprites
00003F94 6100 D854                  		bsr.w	RunPLC_RAM
00003F98 3038 D108                  		move.w	($FFFFD108).w,d0
00003F9C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FA0 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FA2 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FA6 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FA8 4EB9 0000 0000             		jsr	Hud_Base
00003FAE                            
00003FAE                            loc_3946:
00003FAE 7003                       		moveq	#3,d0
00003FB0 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FB4 6100 0000                  		bsr.w	LevelSizeLoad
00003FB8 6100 0000                  		bsr.w	DeformBgLayer
00003FBC 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FC2 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FC6 6100 0000                  		bsr.w	LoadTilesFromStart
00003FCA 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FD0 6100 0000                  		bsr.w	ColIndexLoad
00003FD4 6100 0000                  		bsr.w	LZWaterEffects
00003FD8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FDE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FE2 6B00                       		bmi.s	Level_ChkDebug
00003FE4 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FEA                            
00003FEA                            Level_ChkDebug:
00003FEA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FEE 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FF6 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003FFE                            
00003FFE                            Level_ChkWater:
00003FFE 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004004 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000400A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004010 6600                       		bne.s	Level_LoadObj	; if not, branch
00004012 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004018 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000401E 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004024 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000402A                            
0000402A                            Level_LoadObj:
0000402A 4EB9 0000 0000             		jsr	ObjPosLoad
00004030 4EB9 0000 0000             		jsr	ObjectsLoad
00004036 4EB9 0000 0000             		jsr	BuildSprites
0000403C 7000                       		moveq	#0,d0
0000403E 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004042 6600                       		bne.s	loc_39E8	; if yes, branch
00004044 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004048 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000404C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004050                            
00004050                            loc_39E8:
00004050 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004054 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004058 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000405C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004060                            		; move.b	d0,($FFFFFE2F).w
00004060 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00004066 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000406A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000406E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004072 6100 0000                  		bsr.w	OscillateNumInit
00004076 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000407C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004082 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004088 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000408E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004094 7000                       		moveq	#0,d0
00004096 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000409A E548                       		lsl.w	#2,d0
0000409C 2271 0000                  		movea.l	(a1,d0.w),a1
000040A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040A4 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040A6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040B0 5340                       		subq.w	#1,d0
000040B2 E548                       		lsl.w	#2,d0
000040B4 2271 0000                  		movea.l	(a1,d0.w),a1
000040B8                            
000040B8                            Level_Demo:
000040B8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040BE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040C2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040CC 6A00                       		bpl.s	Level_ChkWaterPal
000040CE 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040DA 6600                       		bne.s	Level_ChkWaterPal
000040DC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040E2                            
000040E2                            Level_ChkWaterPal:
000040E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040E8 6600                       		bne.s	Level_Delay	; if not, branch
000040EA 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040EC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040F2 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040F4 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040F6                            
000040F6                            Level_WaterPal2:
000040F6 6100 E21E                  		bsr.w	PalLoad4_Water
000040FA                            
000040FA                            Level_Delay:
000040FA 323C 0003                  		move.w	#3,d1
000040FE                            
000040FE                            Level_DelayLoop:
000040FE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004104 6100 EBFC                  		bsr.w	DelayProgram
00004108 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000410C                            
0000410C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004112 6100 DE64                  		bsr.w	Pal_FadeTo2
00004116 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000411A 6B00                       		bmi.s	Level_ClrCardArt
0000411C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004120 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004124 5838 D124                  		addq.b	#4,($FFFFD124).w
00004128 5838 D164                  		addq.b	#4,($FFFFD164).w
0000412C 6000                       		bra.s	Level_StartGame
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            Level_ClrCardArt:
0000412E 7002                       		moveq	#2,d0
00004130 4EB9 0000 177E             		jsr	(LoadPLC).l	; load explosion patterns
00004136 7000                       		moveq	#0,d0
00004138 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000413C 0640 0015                  		addi.w	#$15,d0
00004140 4EB9 0000 177E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004146                            
00004146                            Level_StartGame:
00004146 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000414C                            
0000414C                            ; ---------------------------------------------------------------------------
0000414C                            ; Main level loop (when	all title card and loading sequences are finished)
0000414C                            ; ---------------------------------------------------------------------------
0000414C                            
0000414C                            Level_MainLoop:
0000414C 6100 D458                  		bsr.w	PauseGame
00004150 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004156 6100 EBAA                  		bsr.w	DelayProgram
0000415A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000415E 6100 0000                  		bsr.w	MoveSonicInDemo
00004162 6100 0000                  		bsr.w	LZWaterEffects
00004166 4EB9 0000 0000             		jsr	ObjectsLoad
0000416C 4A78 FE08                  		tst.w	($FFFFFE08).w
00004170 6600                       		bne.s	loc_3B10
00004172 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004178 6400                       		bcc.s	loc_3B14
0000417A                            
0000417A                            loc_3B10:
0000417A 6100 0000                  		bsr.w	DeformBgLayer
0000417E                            
0000417E                            loc_3B14:
0000417E 4EB9 0000 0000             		jsr	BuildSprites
00004184 4EB9 0000 0000             		jsr	ObjPosLoad
0000418A 6100 D9AE                  		bsr.w	PalCycle_Load
0000418E 6100 D65A                  		bsr.w	RunPLC_RAM
00004192 6100 0000                  		bsr.w	OscillateNumDo
00004196 6100 0000                  		bsr.w	ChangeRingFrame
0000419A 6100 0000                  		bsr.w	SignpostArtLoad
0000419E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041A4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041A6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041AA 6600 FC02                  		bne.w	Level		; if yes, branch
000041AE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041B4 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA                            
000041BA                            Level_ChkDemo:				; XREF: Level_MainLoop
000041BA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041BE 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041C0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041C4 6700                       		beq.s	Level_EndDemo	; if not, branch
000041C6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041CC 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041D0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041D6 4E75                       		rts	
000041D8                            ; ===========================================================================
000041D8                            
000041D8                            Level_EndDemo:				; XREF: Level_ChkDemo
000041D8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041DE 6600                       		bne.s	loc_3B88	; if not, branch
000041E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041EA 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041EC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041F2                            
000041F2                            loc_3B88:
000041F2 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000041FE 4278 F794                  		clr.w	($FFFFF794).w
00004202                            
00004202                            loc_3B98:
00004202 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004208 6100 EAF8                  		bsr.w	DelayProgram
0000420C 6100 0000                  		bsr.w	MoveSonicInDemo
00004210 4EB9 0000 0000             		jsr	ObjectsLoad
00004216 4EB9 0000 0000             		jsr	BuildSprites
0000421C 4EB9 0000 0000             		jsr	ObjPosLoad
00004222 5378 F794                  		subq.w	#1,($FFFFF794).w
00004226 6A00                       		bpl.s	loc_3BC8
00004228 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000422E 6100 DE0C                  		bsr.w	Pal_FadeOut
00004232                            
00004232                            loc_3BC8:
00004232 4A78 F614                  		tst.w	($FFFFF614).w
00004236 66CA                       		bne.s	loc_3B98
00004238 4E75                       		rts	
0000423A                            ; ===========================================================================
0000423A                            ; ---------------------------------------------------------------------------
0000423A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000423A                            ; ---------------------------------------------------------------------------
0000423A                            
0000423A                            LZWaterEffects:				; XREF: Level
0000423A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004240 6600                       		bne.s	locret_3C28	; if not, branch
00004242 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004248 6400                       		bcc.s	LZMoveWater
0000424A 6100 0000                  		bsr.w	LZWindTunnels
0000424E 6100 0000                  		bsr.w	LZWaterSlides
00004252 6100 0000                  		bsr.w	LZDynamicWater
00004256                            
00004256                            LZMoveWater:
00004256 4238 F64E                  		clr.b	($FFFFF64E).w
0000425A 7000                       		moveq	#0,d0
0000425C 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004260 E248                       		lsr.w	#1,d0
00004262 D078 F648                  		add.w	($FFFFF648).w,d0
00004266 31C0 F646                  		move.w	d0,($FFFFF646).w
0000426A 3038 F646                  		move.w	($FFFFF646).w,d0
0000426E 9078 F704                  		sub.w	($FFFFF704).w,d0
00004272 6400                       		bcc.s	loc_3C1A
00004274 4A40                       		tst.w	d0
00004276 6A00                       		bpl.s	loc_3C1A
00004278 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000427E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004284                            
00004284                            loc_3C1A:
00004284 0C40 00DF                  		cmpi.w	#$DF,d0
00004288 6500                       		bcs.s	loc_3C24
0000428A 303C 00DF                  		move.w	#$DF,d0
0000428E                            
0000428E                            loc_3C24:
0000428E 11C0 F625                  		move.b	d0,($FFFFF625).w
00004292                            
00004292                            locret_3C28:
00004292 4E75                       		rts	
00004294                            ; ===========================================================================
00004294                            ; ---------------------------------------------------------------------------
00004294                            ; Labyrinth default water heights
00004294                            ; ---------------------------------------------------------------------------
00004294                            WaterHeight:	incbin	misc\lz_heigh.bin
0000429C                            		even
0000429C                            ; ===========================================================================
0000429C                            
0000429C                            ; ---------------------------------------------------------------------------
0000429C                            ; Labyrinth dynamic water routines
0000429C                            ; ---------------------------------------------------------------------------
0000429C                            
0000429C                            LZDynamicWater:				; XREF: LZWaterEffects
0000429C 7000                       		moveq	#0,d0
0000429E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A2 D040                       		add.w	d0,d0
000042A4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042A8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042AC 7200                       		moveq	#0,d1
000042AE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042B2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042B6 9078 F648                  		sub.w	($FFFFF648).w,d0
000042BA 6700                       		beq.s	locret_3C5A
000042BC 6400                       		bcc.s	loc_3C56
000042BE 4441                       		neg.w	d1
000042C0                            
000042C0                            loc_3C56:
000042C0 D378 F648                  		add.w	d1,($FFFFF648).w
000042C4                            
000042C4                            locret_3C5A:
000042C4 4E75                       		rts	
000042C6                            ; ===========================================================================
000042C6 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042C8 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042CA 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042CC 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042CE                            ; ===========================================================================
000042CE                            
000042CE                            DynWater_LZ1:				; XREF: DynWater_Index
000042CE 3038 F700                  		move.w	($FFFFF700).w,d0
000042D2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042D6 6600                       		bne.s	loc_3CD0
000042D8 323C 00B8                  		move.w	#$B8,d1
000042DC 0C40 0600                  		cmpi.w	#$600,d0
000042E0 6500                       		bcs.s	loc_3CB4
000042E2 323C 0108                  		move.w	#$108,d1
000042E6 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042EC 6500                       		bcs.s	loc_3CBA
000042EE 0C40 0C00                  		cmpi.w	#$C00,d0
000042F2 6500                       		bcs.s	loc_3CB4
000042F4 323C 0318                  		move.w	#$318,d1
000042F8 0C40 1080                  		cmpi.w	#$1080,d0
000042FC 6500                       		bcs.s	loc_3CB4
000042FE 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004304 323C 05C8                  		move.w	#$5C8,d1
00004308 0C40 1380                  		cmpi.w	#$1380,d0
0000430C 6500                       		bcs.s	loc_3CB4
0000430E 323C 03A8                  		move.w	#$3A8,d1
00004312 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004316 6600                       		bne.s	loc_3CB4
00004318 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000431E                            
0000431E                            loc_3CB4:
0000431E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            loc_3CBA:				; XREF: DynWater_LZ1
00004324 0C40 0C80                  		cmpi.w	#$C80,d0
00004328 65F4                       		bcs.s	loc_3CB4
0000432A 323C 00E8                  		move.w	#$E8,d1
0000432E 0C40 1500                  		cmpi.w	#$1500,d0
00004332 65EA                       		bcs.s	loc_3CB4
00004334 323C 0108                  		move.w	#$108,d1
00004338 60E4                       		bra.s	loc_3CB4
0000433A                            ; ===========================================================================
0000433A                            
0000433A                            loc_3CD0:				; XREF: DynWater_LZ1
0000433A 5302                       		subq.b	#1,d2
0000433C 6600                       		bne.s	locret_3CF4
0000433E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004344 6400                       		bcc.s	locret_3CF4
00004346 323C 03A8                  		move.w	#$3A8,d1
0000434A 0C40 1300                  		cmpi.w	#$1300,d0
0000434E 6500                       		bcs.s	loc_3CF0
00004350 323C 0108                  		move.w	#$108,d1
00004354 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000435A                            
0000435A                            loc_3CF0:
0000435A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000435E                            
0000435E                            locret_3CF4:
0000435E 4E75                       		rts	
00004360                            ; ===========================================================================
00004360                            
00004360                            DynWater_LZ2:				; XREF: DynWater_Index
00004360 3038 F700                  		move.w	($FFFFF700).w,d0
00004364 323C 0328                  		move.w	#$328,d1
00004368 0C40 0500                  		cmpi.w	#$500,d0
0000436C 6500                       		bcs.s	loc_3D12
0000436E 323C 03C8                  		move.w	#$3C8,d1
00004372 0C40 0B00                  		cmpi.w	#$B00,d0
00004376 6500                       		bcs.s	loc_3D12
00004378 323C 0428                  		move.w	#$428,d1
0000437C                            
0000437C                            loc_3D12:
0000437C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004380 4E75                       		rts	
00004382                            ; ===========================================================================
00004382                            
00004382                            DynWater_LZ3:				; XREF: DynWater_Index
00004382 3038 F700                  		move.w	($FFFFF700).w,d0
00004386 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000438A 6600                       		bne.s	loc_3D5E
0000438C 323C 0500                  		move.w	#$500,d1
00004390 0C40 0600                  		cmpi.w	#$600,d0
00004394 6500                       		bcs.s	loc_3D54
00004396 0C40 1B00                  		cmpi.w	#$1B00,d0
0000439A 6500                       		bcs.s	loc_3D54
0000439C 323C 0850                  		move.w	#$850,d1
000043A0                            
000043A0                            loc_3D54:
000043A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000043A8 4E75                       		rts	
000043AA                            ; ===========================================================================
000043AA                            
000043AA                            loc_3D5E:				; XREF: DynWater_LZ3
000043AA 5302                       		subq.b	#1,d2
000043AC 6600                       		bne.s	loc_3DA8
000043AE 323C 04C8                  		move.w	#$4C8,d1
000043B2 0C40 0770                  		cmpi.w	#$770,d0
000043B6 6500                       		bcs.s	loc_3DA2
000043B8 323C 0308                  		move.w	#$308,d1
000043BC 0C40 1400                  		cmpi.w	#$1400,d0
000043C0 6500                       		bcs.s	loc_3DA2
000043C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043C8 6700                       		beq.s	loc_3D8E
000043CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043D0 6400                       		bcc.s	loc_3D8E
000043D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043D8 6400                       		bcc.s	loc_3DA2
000043DA                            
000043DA                            loc_3D8E:
000043DA 323C 0508                  		move.w	#$508,d1
000043DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E2 0C40 1770                  		cmpi.w	#$1770,d0
000043E6 6500                       		bcs.s	loc_3DA2
000043E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043EE                            
000043EE                            loc_3DA2:
000043EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043F2 4E75                       		rts	
000043F4                            ; ===========================================================================
000043F4                            
000043F4                            loc_3DA8:
000043F4 5302                       		subq.b	#1,d2
000043F6 6600                       		bne.s	loc_3DD2
000043F8 323C 0508                  		move.w	#$508,d1
000043FC 0C40 1860                  		cmpi.w	#$1860,d0
00004400 6500                       		bcs.s	loc_3DCC
00004402 323C 0188                  		move.w	#$188,d1
00004406 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000440A 6400                       		bcc.s	loc_3DC6
0000440C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004410 6600                       		bne.s	loc_3DCC
00004412                            
00004412                            loc_3DC6:
00004412 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004418                            
00004418                            loc_3DCC:
00004418 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000441C 4E75                       		rts	
0000441E                            ; ===========================================================================
0000441E                            
0000441E                            loc_3DD2:
0000441E 5302                       		subq.b	#1,d2
00004420 6600                       		bne.s	loc_3E0E
00004422 323C 0188                  		move.w	#$188,d1
00004426 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000442A 6500                       		bcs.s	loc_3E04
0000442C 323C 0900                  		move.w	#$900,d1
00004430 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004434 6500                       		bcs.s	loc_3E04
00004436 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000443C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004442 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004448 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000444E 4E75                       		rts	
00004450                            ; ===========================================================================
00004450                            
00004450                            loc_3E04:
00004450 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004454 31C1 F648                  		move.w	d1,($FFFFF648).w
00004458 4E75                       		rts	
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            loc_3E0E:
0000445A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000445E 6500                       		bcs.s	locret_3E1A
00004460 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004466                            
00004466                            locret_3E1A:
00004466 4E75                       		rts	
00004468                            ; ===========================================================================
00004468                            
00004468                            DynWater_SBZ3:				; XREF: DynWater_Index
00004468 323C 0228                  		move.w	#$228,d1
0000446C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004472 6500                       		bcs.s	loc_3E2C
00004474 323C 04C8                  		move.w	#$4C8,d1
00004478                            
00004478                            loc_3E2C:
00004478 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000447C 4E75                       		rts
0000447E                            
0000447E                            ; ---------------------------------------------------------------------------
0000447E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000447E                            ; ---------------------------------------------------------------------------
0000447E                            
0000447E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000447E                            
0000447E                            
0000447E                            LZWindTunnels:				; XREF: LZWaterEffects
0000447E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004482 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004486 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000448C 7000                       		moveq	#0,d0
0000448E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004492 E748                       		lsl.w	#3,d0
00004494 D4C0                       		adda.w	d0,a2
00004496 7200                       		moveq	#0,d1
00004498 4A38 FE11                  		tst.b	($FFFFFE11).w
0000449C 6600                       		bne.s	loc_3E56
0000449E 7201                       		moveq	#1,d1
000044A0 514A                       		subq.w	#8,a2
000044A2                            
000044A2                            loc_3E56:
000044A2 43F8 D000                  		lea	($FFFFD000).w,a1
000044A6                            
000044A6                            LZWind_Loop:
000044A6 3029 0008                  		move.w	8(a1),d0
000044AA B052                       		cmp.w	(a2),d0
000044AC 6500 0000                  		bcs.w	loc_3EF4
000044B0 B06A 0004                  		cmp.w	4(a2),d0
000044B4 6400 0000                  		bcc.w	loc_3EF4
000044B8 3429 000C                  		move.w	$C(a1),d2
000044BC B46A 0002                  		cmp.w	2(a2),d2
000044C0 6500                       		bcs.s	loc_3EF4
000044C2 B46A 0006                  		cmp.w	6(a2),d2
000044C6 6400                       		bcc.s	loc_3EF4
000044C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044CC 0200 003F                  		andi.b	#$3F,d0
000044D0 6600                       		bne.s	loc_3E90
000044D2 303C 00D0                  		move.w	#$D0,d0
000044D6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044DC                            
000044DC                            loc_3E90:
000044DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044E0 6600 0000                  		bne.w	locret_3F0A
000044E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044EA 6400                       		bcc.s	loc_3F06
000044EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044F2 0440 0080                  		subi.w	#$80,d0
000044F6 B052                       		cmp.w	(a2),d0
000044F8 6400                       		bcc.s	LZWind_Move
000044FA 7002                       		moveq	#2,d0
000044FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004502 6600                       		bne.s	loc_3EBA
00004504 4440                       		neg.w	d0
00004506                            
00004506                            loc_3EBA:
00004506 D169 000C                  		add.w	d0,$C(a1)
0000450A                            
0000450A                            LZWind_Move:
0000450A 5869 0008                  		addq.w	#4,8(a1)
0000450E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004514 337C 0000 0012             		move.w	#0,$12(a1)
0000451A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004520 08E9 0001 0022             		bset	#1,$22(a1)
00004526 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000452C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000452E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004532                            
00004532                            LZWind_MoveDown:
00004532 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004538 6700                       		beq.s	locret_3EF2	; if not, branch
0000453A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000453E                            
0000453E                            locret_3EF2:
0000453E 4E75                       		rts	
00004540                            ; ===========================================================================
00004540                            
00004540                            loc_3EF4:				; XREF: LZWindTunnels
00004540 504A                       		addq.w	#8,a2
00004542 51C9 FF62                  		dbf	d1,LZWind_Loop
00004546 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000454A 6700                       		beq.s	locret_3F0A
0000454C 137C 0000 001C             		move.b	#0,$1C(a1)
00004552                            
00004552                            loc_3F06:
00004552 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004556                            
00004556                            locret_3F0A:
00004556 4E75                       		rts	
00004558                            ; End of function LZWindTunnels
00004558                            
00004558                            ; ===========================================================================
00004558 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004560 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004572 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004580                            					; XREF: LZWindTunnels
00004580                            		even
00004580                            
00004580                            ; ---------------------------------------------------------------------------
00004580                            ; Labyrinth Zone water slide subroutine
00004580                            ; ---------------------------------------------------------------------------
00004580                            
00004580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004580                            
00004580                            
00004580                            LZWaterSlides:				; XREF: LZWaterEffects
00004580 43F8 D000                  		lea	($FFFFD000).w,a1
00004584 0829 0001 0022             		btst	#1,$22(a1)
0000458A 6600                       		bne.s	loc_3F6A
0000458C 3029 000C                  		move.w	$C(a1),d0
00004590 E248                       		lsr.w	#1,d0
00004592 0240 0380                  		andi.w	#$380,d0
00004596 1229 0008                  		move.b	8(a1),d1
0000459A 0241 007F                  		andi.w	#$7F,d1
0000459E D041                       		add.w	d1,d0
000045A0 45F8 A400                  		lea	($FFFFA400).w,a2
000045A4 1032 0000                  		move.b	(a2,d0.w),d0
000045A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000045AC 7206                       		moveq	#6,d1
000045AE                            
000045AE                            loc_3F62:
000045AE B022                       		cmp.b	-(a2),d0
000045B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000045B4 6700                       		beq.s	LZSlide_Move
000045B6                            
000045B6                            loc_3F6A:
000045B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045BA 6700                       		beq.s	locret_3F7A
000045BC 337C 0005 003E             		move.w	#5,$3E(a1)
000045C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045C6                            
000045C6                            locret_3F7A:
000045C6 4E75                       		rts	
000045C8                            ; ===========================================================================
000045C8                            
000045C8                            LZSlide_Move:				; XREF: LZWaterSlides
000045C8 0C41 0003                  		cmpi.w	#3,d1
000045CC 6400                       		bcc.s	loc_3F84
000045CE 4E71                       		nop	
000045D0                            
000045D0                            loc_3F84:
000045D0 08A9 0000 0022             		bclr	#0,$22(a1)
000045D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045DA 1340 0014                  		move.b	d0,$14(a1)
000045DE 6A00                       		bpl.s	loc_3F9A
000045E0 08E9 0000 0022             		bset	#0,$22(a1)
000045E6                            
000045E6                            loc_3F9A:
000045E6 4229 0015                  		clr.b	$15(a1)
000045EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000045FA 0200 001F                  		andi.b	#$1F,d0
000045FE 6600                       		bne.s	locret_3FBE
00004600 303C 00D0                  		move.w	#$D0,d0
00004604 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play water sound
0000460A                            
0000460A                            locret_3FBE:
0000460A 4E75                       		rts	
0000460C                            ; End of function LZWaterSlides
0000460C                            
0000460C                            ; ===========================================================================
0000460C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000461B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000461C                            		even
0000461C                            
0000461C                            ; ---------------------------------------------------------------------------
0000461C                            ; Subroutine to	move Sonic in demo mode
0000461C                            ; ---------------------------------------------------------------------------
0000461C                            
0000461C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000461C                            
0000461C                            
0000461C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000461C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004620 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004622 4E75                       		rts	
00004624                            ; ===========================================================================
00004624                            
00004624                            ; This is an unused subroutine for recording a demo
00004624                            
00004624                            MoveDemo_Record:
00004624 43F9 0008 0000             		lea	($80000).l,a1
0000462A 3038 F790                  		move.w	($FFFFF790).w,d0
0000462E D2C0                       		adda.w	d0,a1
00004630 1038 F604                  		move.b	($FFFFF604).w,d0
00004634 B011                       		cmp.b	(a1),d0
00004636 6600                       		bne.s	loc_3FFA
00004638 5229 0001                  		addq.b	#1,1(a1)
0000463C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004642 6700                       		beq.s	loc_3FFA
00004644 4E75                       		rts	
00004646                            ; ===========================================================================
00004646                            
00004646                            loc_3FFA:				; XREF: MoveDemo_Record
00004646 1340 0002                  		move.b	d0,2(a1)
0000464A 137C 0000 0003             		move.b	#0,3(a1)
00004650 5478 F790                  		addq.w	#2,($FFFFF790).w
00004654 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000465A 4E75                       		rts	
0000465C                            ; ===========================================================================
0000465C                            
0000465C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000465C 4A38 F604                  		tst.b	($FFFFF604).w
00004660 6A00                       		bpl.s	loc_4022
00004662 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004666 6B00                       		bmi.s	loc_4022
00004668 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000466E                            
0000466E                            loc_4022:
0000466E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004674 7000                       		moveq	#0,d0
00004676 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000467A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004680 6600                       		bne.s	loc_4038
00004682 7006                       		moveq	#6,d0
00004684                            
00004684                            loc_4038:
00004684 E548                       		lsl.w	#2,d0
00004686 2271 0000                  		movea.l	(a1,d0.w),a1
0000468A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000468E 6A00                       		bpl.s	loc_4056
00004690 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004696 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000469A 5340                       		subq.w	#1,d0
0000469C E548                       		lsl.w	#2,d0
0000469E 2271 0000                  		movea.l	(a1,d0.w),a1
000046A2                            
000046A2                            loc_4056:
000046A2 3038 F790                  		move.w	($FFFFF790).w,d0
000046A6 D2C0                       		adda.w	d0,a1
000046A8 1011                       		move.b	(a1),d0
000046AA 41F8 F604                  		lea	($FFFFF604).w,a0
000046AE 1200                       		move.b	d0,d1
000046B0 1410                       		move.b	(a0),d2
000046B2 B500                       		eor.b	d2,d0
000046B4 10C1                       		move.b	d1,(a0)+
000046B6 C001                       		and.b	d1,d0
000046B8 10C0                       		move.b	d0,(a0)+
000046BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000046BE 6400                       		bcc.s	locret_407E
000046C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000046CA                            
000046CA                            locret_407E:
000046CA 4E75                       		rts	
000046CC                            ; End of function MoveSonicInDemo
000046CC                            
000046CC                            ; ===========================================================================
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            ; Demo sequence	pointers
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            Demo_Index:
000046CC                            	include "_inc\Demo pointers for intro.asm"
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            ; Demo sequence	pointers
000046CC                            ; ---------------------------------------------------------------------------
000046CC 0000 0000                  	dc.l Demo_GHZ
000046D0 0000 0000                  	dc.l Demo_GHZ
000046D4 0000 0000                  	dc.l Demo_MZ
000046D8 0000 0000                  	dc.l Demo_MZ
000046DC 0000 0000                  	dc.l Demo_SYZ
000046E0 0000 0000                  	dc.l Demo_SYZ
000046E4 0000 0000                  	dc.l Demo_SS
000046E8 0000 0000                  	dc.l Demo_SS
000046E8 0000 0000                  	dc.l Demo_SS
000046EC                            
000046EC                            Demo_EndIndex:
000046EC                            	include "_inc\Demo pointers for ending.asm"
000046EC                            ; ---------------------------------------------------------------------------
000046EC                            ; Demo (ending) sequence pointers
000046EC                            ; ---------------------------------------------------------------------------
000046EC 0000 0000                  	dc.l Demo_EndGHZ1
000046F0 0000 0000                  	dc.l Demo_EndMZ
000046F4 0000 0000                  	dc.l Demo_EndSYZ
000046F8 0000 0000                  	dc.l Demo_EndLZ
000046FC 0000 0000                  	dc.l Demo_EndSLZ
00004700 0000 0000                  	dc.l Demo_EndSBZ1
00004704 0000 0000                  	dc.l Demo_EndSBZ2
00004708 0000 0000                  	dc.l Demo_EndGHZ2
00004708 0000 0000                  	dc.l Demo_EndGHZ2
0000470C                            
0000470C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000471C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000472C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000473C                            		even
0000473C                            
0000473C                            ; ---------------------------------------------------------------------------
0000473C                            ; Collision index loading subroutine
0000473C                            ; ---------------------------------------------------------------------------
0000473C                            
0000473C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000473C                            
0000473C                            
0000473C                            ColIndexLoad:				; XREF: Level
0000473C 7000                       		moveq	#0,d0
0000473E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004742 E548                       		lsl.w	#2,d0
00004744 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000474A 4E75                       		rts	
0000474C                            ; End of function ColIndexLoad
0000474C                            
0000474C                            ; ===========================================================================
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ; Collision index pointers
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ColPointers:
0000474C                            	include "_inc\Collision index pointers.asm"
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ; Collision index pointers
0000474C                            ; ---------------------------------------------------------------------------
0000474C 0000 0000                  	dc.l Col_GHZ
00004750 0000 0000                  	dc.l Col_LZ
00004754 0000 0000                  	dc.l Col_MZ
00004758 0000 0000                  	dc.l Col_SLZ
0000475C 0000 0000                  	dc.l Col_SYZ
00004760 0000 0000                  	dc.l Col_SBZ
00004764 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004768 0000 0000                  	dc.l Col_BHZ
00004768 0000 0000                  	dc.l Col_BHZ
0000476C                            
0000476C                            ; ---------------------------------------------------------------------------
0000476C                            ; Oscillating number subroutine
0000476C                            ; ---------------------------------------------------------------------------
0000476C                            
0000476C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000476C                            
0000476C                            
0000476C                            OscillateNumInit:			; XREF: Level
0000476C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004770 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004776 7220                       		moveq	#$20,d1
00004778                            
00004778                            Osc_Loop:
00004778 32DA                       		move.w	(a2)+,(a1)+
0000477A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000477E 4E75                       		rts	
00004780                            ; End of function OscillateNumInit
00004780                            
00004780                            ; ===========================================================================
00004780 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004784 0000 0080                  		dc.w 0,	$80
00004788 0000 0080                  		dc.w 0,	$80
0000478C 0000 0080                  		dc.w 0,	$80
00004790 0000 0080                  		dc.w 0,	$80
00004794 0000 0080                  		dc.w 0,	$80
00004798 0000 0080                  		dc.w 0,	$80
0000479C 0000 0080                  		dc.w 0,	$80
000047A0 0000 0080                  		dc.w 0,	$80
000047A4 0000 50F0                  		dc.w 0,	$50F0
000047A8 011E 2080                  		dc.w $11E, $2080
000047AC 00B4 3080                  		dc.w $B4, $3080
000047B0 010E 5080                  		dc.w $10E, $5080
000047B4 01C2 7080                  		dc.w $1C2, $7080
000047B8 0276 0080                  		dc.w $276, $80
000047BC 0000 0080                  		dc.w 0,	$80
000047C0 0000                       		dc.w 0
000047C2                            		even
000047C2                            
000047C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C2                            
000047C2                            
000047C2                            OscillateNumDo:				; XREF: Level
000047C2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047C8 6400                       		bcc.s	locret_41C4
000047CA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047CE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047D4 3619                       		move.w	(a1)+,d3
000047D6 720F                       		moveq	#$F,d1
000047D8                            
000047D8                            loc_4184:
000047D8 341A                       		move.w	(a2)+,d2
000047DA 381A                       		move.w	(a2)+,d4
000047DC 0303                       		btst	d1,d3
000047DE 6600                       		bne.s	loc_41A4
000047E0 3029 0002                  		move.w	2(a1),d0
000047E4 D042                       		add.w	d2,d0
000047E6 3340 0002                  		move.w	d0,2(a1)
000047EA D151                       		add.w	d0,0(a1)
000047EC B811                       		cmp.b	0(a1),d4
000047EE 6200                       		bhi.s	loc_41BA
000047F0 03C3                       		bset	d1,d3
000047F2 6000                       		bra.s	loc_41BA
000047F4                            ; ===========================================================================
000047F4                            
000047F4                            loc_41A4:				; XREF: OscillateNumDo
000047F4 3029 0002                  		move.w	2(a1),d0
000047F8 9042                       		sub.w	d2,d0
000047FA 3340 0002                  		move.w	d0,2(a1)
000047FE D151                       		add.w	d0,0(a1)
00004800 B811                       		cmp.b	0(a1),d4
00004802 6300                       		bls.s	loc_41BA
00004804 0383                       		bclr	d1,d3
00004806                            
00004806                            loc_41BA:
00004806 5849                       		addq.w	#4,a1
00004808 51C9 FFCE                  		dbf	d1,loc_4184
0000480C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004810                            
00004810                            locret_41C4:
00004810 4E75                       		rts	
00004812                            ; End of function OscillateNumDo
00004812                            
00004812                            ; ===========================================================================
00004812 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004816 0002 0018                  		dc.w 2,	$18
0000481A 0002 0020                  		dc.w 2,	$20
0000481E 0002 0030                  		dc.w 2,	$30
00004822 0004 0020                  		dc.w 4,	$20
00004826 0008 0008                  		dc.w 8,	8
0000482A 0008 0040                  		dc.w 8,	$40
0000482E 0004 0040                  		dc.w 4,	$40
00004832 0002 0050                  		dc.w 2,	$50
00004836 0002 0050                  		dc.w 2,	$50
0000483A 0002 0020                  		dc.w 2,	$20
0000483E 0003 0030                  		dc.w 3,	$30
00004842 0005 0050                  		dc.w 5,	$50
00004846 0007 0070                  		dc.w 7,	$70
0000484A 0002 0010                  		dc.w 2,	$10
0000484E 0002 0010                  		dc.w 2,	$10
00004852                            		even
00004852                            
00004852                            ; ---------------------------------------------------------------------------
00004852                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004852                            ; ---------------------------------------------------------------------------
00004852                            
00004852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004852                            
00004852                            
00004852                            ChangeRingFrame:			; XREF: Level
00004852 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004856 6A00                       		bpl.s	loc_421C
00004858 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000485E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004862 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004868                            
00004868                            loc_421C:
00004868 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000486C 6A00                       		bpl.s	loc_4232
0000486E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004874 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004878 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000487E                            
0000487E                            loc_4232:
0000487E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004882 6A00                       		bpl.s	loc_4250
00004884 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000488A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000488E 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004894 6500                       		bcs.s	loc_4250
00004896 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000489C                            
0000489C                            loc_4250:
0000489C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048A0 6700                       		beq.s	locret_4272
000048A2 7000                       		moveq	#0,d0
000048A4 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048A8 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048AC 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048B0 EF58                       		rol.w	#7,d0
000048B2 0240 0003                  		andi.w	#3,d0
000048B6 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048BA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048BE                            
000048BE                            locret_4272:
000048BE 4E75                       		rts	
000048C0                            ; End of function ChangeRingFrame
000048C0                            
000048C0                            ; ---------------------------------------------------------------------------
000048C0                            ; End-of-act signpost pattern loading subroutine
000048C0                            ; ---------------------------------------------------------------------------
000048C0                            
000048C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048C0                            
000048C0                            
000048C0                            SignpostArtLoad:			; XREF: Level
000048C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048C4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048C8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048CE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048D0 3038 F700                  		move.w	($FFFFF700).w,d0
000048D4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048D8 0441 0100                  		subi.w	#$100,d1
000048DC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048DE 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048E0 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048E4 6700                       		beq.s	Signpost_Exit
000048E6 B278 F728                  		cmp.w	($FFFFF728).w,d1
000048EA 6700                       		beq.s	Signpost_Exit
000048EC 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048F0 7012                       		moveq	#$12,d0
000048F2 6000 CEBC                  		bra.w	LoadPLC2	; load signpost	patterns
000048F6                            ; ===========================================================================
000048F6                            
000048F6                            Signpost_Exit:
000048F6 4E75                       		rts	
000048F8                            ; End of function SignpostArtLoad
000048F8                            
000048F8                            ; ===========================================================================
000048F8                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004978                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AA8                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B28                            Demo_SS:	incbin	demodata\i_ss.bin
00004C28                            ; ===========================================================================
00004C28                            
00004C28                            ; ---------------------------------------------------------------------------
00004C28                            ; Special Stage
00004C28                            ; ---------------------------------------------------------------------------
00004C28                            
00004C28                            SpecialStage:				; XREF: GameModeArray
00004C28 303C 00CA                  		move.w	#$CA,d0
00004C2C 6100 C96C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C30 6100 D514                  		bsr.w	Pal_MakeFlash
00004C34 46FC 2700                  		move	#$2700,sr
00004C38 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C3E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C42 3CBC 8004                  		move.w	#$8004,(a6)
00004C46 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C4C 3CBC 9011                  		move.w	#$9011,(a6)
00004C50 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C54 0200 00BF                  		andi.b	#$BF,d0
00004C58 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C5E 6100 C862                  		bsr.w	ClearScreen
00004C62 46FC 2300                  		move	#$2300,sr
00004C66 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C6C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C70 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C76 3ABC 9780                  		move.w	#$9780,(a5)
00004C7A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C80 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C88                            
00004C88                            loc_463C:
00004C88 3215                       		move.w	(a5),d1
00004C8A 0801 0001                  		btst	#1,d1
00004C8E 66F8                       		bne.s	loc_463C
00004C90 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C94 6100 0000                  		bsr.w	SS_BGLoad
00004C98 7014                       		moveq	#$14,d0
00004C9A 6100 CC4E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00004CA2 7000                       		moveq	#0,d0
00004CA4 323C 07FF                  		move.w	#$7FF,d1
00004CA8                            
00004CA8                            SS_ClrObjRam:
00004CA8 22C0                       		move.l	d0,(a1)+
00004CAA 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CAE                            
00004CAE 43F8 F700                  		lea	($FFFFF700).w,a1
00004CB2 7000                       		moveq	#0,d0
00004CB4 323C 003F                  		move.w	#$3F,d1
00004CB8                            
00004CB8                            SS_ClrRam:
00004CB8 22C0                       		move.l	d0,(a1)+
00004CBA 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CBE                            
00004CBE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CC2 7000                       		moveq	#0,d0
00004CC4 323C 0027                  		move.w	#$27,d1
00004CC8                            
00004CC8                            SS_ClrRam2:
00004CC8 22C0                       		move.l	d0,(a1)+
00004CCA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CCE                            
00004CCE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CD2 7000                       		moveq	#0,d0
00004CD4 323C 007F                  		move.w	#$7F,d1
00004CD8                            
00004CD8                            SS_ClrNemRam:
00004CD8 22C0                       		move.l	d0,(a1)+
00004CDA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CDE                            
00004CDE 4238 F64E                  		clr.b	($FFFFF64E).w
00004CE2 4278 FE02                  		clr.w	($FFFFFE02).w
00004CE6 700A                       		moveq	#$A,d0
00004CE8 6100 D5DC                  		bsr.w	PalLoad1	; load special stage pallet
00004CEC 4EB9 0000 0000             		jsr	SS_Load
00004CF2 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004CFA 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D02 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D08 6100 0000                  		bsr.w	PalCycle_SS
00004D0C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D10 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D14 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D1A 303C 0089                  		move.w	#$89,d0
00004D1E 6100 C874                  		bsr.w	PlaySound	; play special stage BG	music
00004D22 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D28 43F9 0000 46CC             		lea	(Demo_Index).l,a1
00004D2E 7006                       		moveq	#6,d0
00004D30 E548                       		lsl.w	#2,d0
00004D32 2271 0000                  		movea.l	(a1,d0.w),a1
00004D36 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D3C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D40 4278 FE20                  		clr.w	($FFFFFE20).w
00004D44 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D48 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D4E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D54                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D54                            ;		beq.s	SS_NoDebug	; if not, branch
00004D54                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D54                            ;		beq.s	SS_NoDebug	; if not, branch
00004D54                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D54                            
00004D54                            SS_NoDebug:
00004D54 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D58 0000 0040                  		ori.b	#$40,d0
00004D5C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D62 6100 D336                  		bsr.w	Pal_MakeWhite
00004D66                            
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            ; Main Special Stage loop
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            
00004D66                            SS_MainLoop:
00004D66 6100 C83E                  		bsr.w	PauseGame
00004D6A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D70 6100 DF90                  		bsr.w	DelayProgram
00004D74 4A78 F784                          tst.w   ($FFFFF784).w
00004D78 6700                               beq.s   SS_NotReversed
00004D7A 5378 F784                          subi.w  #1,($FFFFF784).w
00004D7E                            
00004D7E                            SS_NotReversed:
00004D7E 6100 F89C                  		bsr.w	MoveSonicInDemo
00004D82 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D88 4EB9 0000 0000             		jsr	ObjectsLoad
00004D8E 4EB9 0000 0000             		jsr	BuildSprites
00004D94 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D9A 6100 0000                  		bsr.w	SS_BGAnimate
00004D9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DA2 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DA4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DA8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DAC                            
00004DAC                            SS_ChkEnd:
00004DAC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DB2 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DB6                            
00004DB6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DBA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DBE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DC4 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DCA 6500                       		bcs.s	SS_End		; if not, branch
00004DCC 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DD0                            
00004DD0                            SS_End:
00004DD0 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DD6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DDC 4278 F794                  		clr.w	($FFFFF794).w
00004DE0                            
00004DE0                            SS_EndLoop:
00004DE0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DE6 6100 DF1A                  		bsr.w	DelayProgram
00004DEA 6100 F830                  		bsr.w	MoveSonicInDemo
00004DEE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DF4 4EB9 0000 0000             		jsr	ObjectsLoad
00004DFA 4EB9 0000 0000             		jsr	BuildSprites
00004E00 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E06 6100 0000                  		bsr.w	SS_BGAnimate
00004E0A 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E0E 6A00                       		bpl.s	loc_47D4
00004E10 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E16 6100 D34E                  		bsr.w	Pal_ToWhite
00004E1A                            
00004E1A                            loc_47D4:
00004E1A 4A78 F614                  		tst.w	($FFFFF614).w
00004E1E 66C0                       		bne.s	SS_EndLoop
00004E20                            
00004E20 46FC 2700                  		move	#$2700,sr
00004E24 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E2A 3CBC 8230                  		move.w	#$8230,(a6)
00004E2E 3CBC 8407                  		move.w	#$8407,(a6)
00004E32 3CBC 9001                  		move.w	#$9001,(a6)
00004E36 6100 C68A                  		bsr.w	ClearScreen
00004E3A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E4A 6100 C7F2                  		bsr.w	NemDec
00004E4E 4EB9 0000 0000             		jsr	Hud_Base
00004E54 46FC 2300                  		move	#$2300,sr
00004E58 7011                       		moveq	#$11,d0
00004E5A 6100 D486                  		bsr.w	PalLoad2	; load results screen pallet
00004E5E 7000                       		moveq	#0,d0
00004E60 6100 C94E                  		bsr.w	LoadPLC2
00004E64 701B                       		moveq	#$1B,d0
00004E66 6100 C916                  		bsr.w	LoadPLC		; load results screen patterns
00004E6A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E70 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E76 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E7A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E7E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E82 303C 008E                  		move.w	#$8E,d0
00004E86 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E8C 43F8 D000                  		lea	($FFFFD000).w,a1
00004E90 7000                       		moveq	#0,d0
00004E92 323C 07FF                  		move.w	#$7FF,d1
00004E96                            
00004E96                            SS_EndClrObjRam:
00004E96 22C0                       		move.l	d0,(a1)+
00004E98 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004E9C                            
00004E9C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EA2                            
00004EA2                            SS_NormalExit:
00004EA2 6100 C702                  		bsr.w	PauseGame
00004EA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EAC 6100 DE54                  		bsr.w	DelayProgram
00004EB0 4EB9 0000 0000             		jsr	ObjectsLoad
00004EB6 4EB9 0000 0000             		jsr	BuildSprites
00004EBC 6100 C92C                  		bsr.w	RunPLC_RAM
00004EC0 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EC4 67DC                       		beq.s	SS_NormalExit
00004EC6 4AB8 F680                  		tst.l	($FFFFF680).w
00004ECA 66D6                       		bne.s	SS_NormalExit
00004ECC 303C 00CA                  		move.w	#$CA,d0
00004ED0 6100 C6C8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004ED4 6100 D270                  		bsr.w	Pal_MakeFlash
00004ED8 4E75                       		rts	
00004EDA                            ; ===========================================================================
00004EDA                            
00004EDA                            SS_ToSegaScreen:
00004EDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004EE0 4E75                       		rts
00004EE2                            
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            ; Special stage	background loading subroutine
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            
00004EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EE2                            
00004EE2                            
00004EE2                            SS_BGLoad:				; XREF: SpecialStage
00004EE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EE8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EEE 303C 4051                  		move.w	#$4051,d0
00004EF2 6100 CA28                  		bsr.w	EniDec
00004EF6 263C 5000 0001             		move.l	#$50000001,d3
00004EFC 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F02 7E06                       		moveq	#6,d7
00004F04                            
00004F04                            loc_48BE:
00004F04 2003                       		move.l	d3,d0
00004F06 7C03                       		moveq	#3,d6
00004F08 7800                       		moveq	#0,d4
00004F0A 0C47 0003                  		cmpi.w	#3,d7
00004F0E 6400                       		bcc.s	loc_48CC
00004F10 7801                       		moveq	#1,d4
00004F12                            
00004F12                            loc_48CC:
00004F12 7A07                       		moveq	#7,d5
00004F14                            
00004F14                            loc_48CE:
00004F14 224A                       		movea.l	a2,a1
00004F16 0A04 0001                  		eori.b	#1,d4
00004F1A 6600                       		bne.s	loc_48E2
00004F1C 0C47 0006                  		cmpi.w	#6,d7
00004F20 6600                       		bne.s	loc_48F2
00004F22 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F28                            
00004F28                            loc_48E2:
00004F28 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F2C 7207                       		moveq	#7,d1
00004F2E 7407                       		moveq	#7,d2
00004F30 6100 C6EC                  		bsr.w	ShowVDPGraphics
00004F34 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F38                            
00004F38                            loc_48F2:
00004F38 0680 0010 0000             		addi.l	#$100000,d0
00004F3E 51CD FFD4                  		dbf	d5,loc_48CE
00004F42 0680 0380 0000             		addi.l	#$3800000,d0
00004F48 0A04 0001                  		eori.b	#1,d4
00004F4C 51CE FFC4                  		dbf	d6,loc_48CC
00004F50 0683 1000 0000             		addi.l	#$10000000,d3
00004F56 6A00                       		bpl.s	loc_491C
00004F58 4843                       		swap	d3
00004F5A 0683 0000 C000             		addi.l	#$C000,d3
00004F60 4843                       		swap	d3
00004F62                            
00004F62                            loc_491C:
00004F62 D4FC 0080                  		adda.w	#$80,a2
00004F66 51CF FF9C                  		dbf	d7,loc_48BE
00004F6A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F70 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F76 303C 4000                  		move.w	#$4000,d0
00004F7A 6100 C9A0                  		bsr.w	EniDec
00004F7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F84 203C 4000 0003             		move.l	#$40000003,d0
00004F8A 723F                       		moveq	#$3F,d1
00004F8C 741F                       		moveq	#$1F,d2
00004F8E 6100 C68E                  		bsr.w	ShowVDPGraphics
00004F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F98 203C 5000 0003             		move.l	#$50000003,d0
00004F9E 723F                       		moveq	#$3F,d1
00004FA0 743F                       		moveq	#$3F,d2
00004FA2 6100 C67A                  		bsr.w	ShowVDPGraphics
00004FA6 4E75                       		rts	
00004FA8                            ; End of function SS_BGLoad
00004FA8                            
00004FA8                            ; ---------------------------------------------------------------------------
00004FA8                            ; Pallet cycling routine - special stage
00004FA8                            ; ---------------------------------------------------------------------------
00004FA8                            
00004FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA8                            
00004FA8                            
00004FA8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FA8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FAC 6600                       		bne.s	locret_49E6
00004FAE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FB2 6A00                       		bpl.s	locret_49E6
00004FB4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FBA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FBE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FC2 0240 001F                  		andi.w	#$1F,d0
00004FC6 E548                       		lsl.w	#2,d0
00004FC8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FCE D0C0                       		adda.w	d0,a0
00004FD0 1018                       		move.b	(a0)+,d0
00004FD2 6A00                       		bpl.s	loc_4992
00004FD4 303C 01FF                  		move.w	#$1FF,d0
00004FD8                            
00004FD8                            loc_4992:
00004FD8 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FDC 7000                       		moveq	#0,d0
00004FDE 1018                       		move.b	(a0)+,d0
00004FE0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FE4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FEA 43F1 0000                  		lea	(a1,d0.w),a1
00004FEE 303C 8200                  		move.w	#-$7E00,d0
00004FF2 1019                       		move.b	(a1)+,d0
00004FF4 3C80                       		move.w	d0,(a6)
00004FF6 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004FFA 303C 8400                  		move.w	#-$7C00,d0
00004FFE 1018                       		move.b	(a0)+,d0
00005000 3C80                       		move.w	d0,(a6)
00005002 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000500C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005014 7000                       		moveq	#0,d0
00005016 1018                       		move.b	(a0)+,d0
00005018 6B00                       		bmi.s	loc_49E8
0000501A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005020 D2C0                       		adda.w	d0,a1
00005022 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005026 24D9                       		move.l	(a1)+,(a2)+
00005028 24D9                       		move.l	(a1)+,(a2)+
0000502A 24D9                       		move.l	(a1)+,(a2)+
0000502C                            
0000502C                            locret_49E6:
0000502C 4E75                       		rts	
0000502E                            ; ===========================================================================
0000502E                            
0000502E                            loc_49E8:				; XREF: PalCycle_SS
0000502E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005032 0C40 008A                  		cmpi.w	#$8A,d0
00005036 6500                       		bcs.s	loc_49F4
00005038 5241                       		addq.w	#1,d1
0000503A                            
0000503A                            loc_49F4:
0000503A C2FC 002A                  		mulu.w	#$2A,d1
0000503E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005044 D2C1                       		adda.w	d1,a1
00005046 0240 007F                  		andi.w	#$7F,d0
0000504A 0880 0000                  		bclr	#0,d0
0000504E 6700                       		beq.s	loc_4A18
00005050 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005054 24D1                       		move.l	(a1),(a2)+
00005056 24E9 0004                  		move.l	4(a1),(a2)+
0000505A 24E9 0008                  		move.l	8(a1),(a2)+
0000505E                            
0000505E                            loc_4A18:
0000505E D2FC 000C                  		adda.w	#$C,a1
00005062 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005066 0C40 000A                  		cmpi.w	#$A,d0
0000506A 6500                       		bcs.s	loc_4A2E
0000506C 0440 000A                  		subi.w	#$A,d0
00005070 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005074                            
00005074                            loc_4A2E:
00005074 3200                       		move.w	d0,d1
00005076 D040                       		add.w	d0,d0
00005078 D041                       		add.w	d1,d0
0000507A D2C0                       		adda.w	d0,a1
0000507C 24D9                       		move.l	(a1)+,(a2)+
0000507E 34D9                       		move.w	(a1)+,(a2)+
00005080 4E75                       		rts	
00005082                            ; End of function PalCycle_SS
00005082                            
00005082                            ; ===========================================================================
00005082 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005092                            					; XREF: PalCycle_SS
00005092 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050A2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050B2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050C2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050D2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050E2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050F2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005102                            		even
00005102 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005110                            					; XREF: PalCycle_SS
00005110                            		even
00005110                            
00005110                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005158                            		even
00005158                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000522A                            		even
0000522A                            
0000522A                            ; ---------------------------------------------------------------------------
0000522A                            ; Subroutine to	make the special stage background animated
0000522A                            ; ---------------------------------------------------------------------------
0000522A                            
0000522A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000522A                            
0000522A                            
0000522A                            SS_BGAnimate:				; XREF: SpecialStage
0000522A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000522E 6600                       		bne.s	loc_4BF6
00005230 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005236 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000523C                            
0000523C                            loc_4BF6:
0000523C 0C40 0008                  		cmpi.w	#8,d0
00005240 6400                       		bcc.s	loc_4C4E
00005242 0C40 0006                  		cmpi.w	#6,d0
00005246 6600                       		bne.s	loc_4C10
00005248 5278 F718                  		addq.w	#1,($FFFFF718).w
0000524C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005250 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005256                            
00005256                            loc_4C10:
00005256 7000                       		moveq	#0,d0
00005258 3038 F708                  		move.w	($FFFFF708).w,d0
0000525C 4440                       		neg.w	d0
0000525E 4840                       		swap	d0
00005260 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005266 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000526A 7609                       		moveq	#9,d3
0000526C                            
0000526C                            loc_4C26:
0000526C 302B 0002                  		move.w	2(a3),d0
00005270 6100 DAC2                  		bsr.w	CalcSine
00005274 7400                       		moveq	#0,d2
00005276 1419                       		move.b	(a1)+,d2
00005278 C1C2                       		muls.w	d2,d0
0000527A E080                       		asr.l	#8,d0
0000527C 36C0                       		move.w	d0,(a3)+
0000527E 1419                       		move.b	(a1)+,d2
00005280 4882                       		ext.w	d2
00005282 D55B                       		add.w	d2,(a3)+
00005284 51CB FFE6                  		dbf	d3,loc_4C26
00005288 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000528C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005292 6000                       		bra.s	loc_4C7E
00005294                            ; ===========================================================================
00005294                            
00005294                            loc_4C4E:				; XREF: SS_BGAnimate
00005294 0C40 000C                  		cmpi.w	#$C,d0
00005298 6600                       		bne.s	loc_4C74
0000529A 5378 F718                  		subq.w	#1,($FFFFF718).w
0000529E 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052A2 243C 0001 8000             		move.l	#$18000,d2
000052A8 7206                       		moveq	#6,d1
000052AA                            
000052AA                            loc_4C64:
000052AA 2013                       		move.l	(a3),d0
000052AC 9082                       		sub.l	d2,d0
000052AE 26C0                       		move.l	d0,(a3)+
000052B0 0482 0000 2000             		subi.l	#$2000,d2
000052B6 51C9 FFF2                  		dbf	d1,loc_4C64
000052BA                            
000052BA                            loc_4C74:
000052BA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052BE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052C4                            
000052C4                            loc_4C7E:
000052C4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052C8 3038 F718                  		move.w	($FFFFF718).w,d0
000052CC 4440                       		neg.w	d0
000052CE 4840                       		swap	d0
000052D0 7600                       		moveq	#0,d3
000052D2 161A                       		move.b	(a2)+,d3
000052D4 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052D8 4442                       		neg.w	d2
000052DA 0242 00FF                  		andi.w	#$FF,d2
000052DE E54A                       		lsl.w	#2,d2
000052E0                            
000052E0                            loc_4C9A:
000052E0 301B                       		move.w	(a3)+,d0
000052E2 544B                       		addq.w	#2,a3
000052E4 7200                       		moveq	#0,d1
000052E6 121A                       		move.b	(a2)+,d1
000052E8 5341                       		subq.w	#1,d1
000052EA                            
000052EA                            loc_4CA4:
000052EA 2380 2000                  		move.l	d0,(a1,d2.w)
000052EE 5842                       		addq.w	#4,d2
000052F0 0242 03FC                  		andi.w	#$3FC,d2
000052F4 51C9 FFF4                  		dbf	d1,loc_4CA4
000052F8 51CB FFE6                  		dbf	d3,loc_4C9A
000052FC 4E75                       		rts	
000052FE                            ; End of function SS_BGAnimate
000052FE                            
000052FE                            ; ===========================================================================
000052FE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000530A                            		even
0000530A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005312                            		even
00005312 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005326                            		even
00005326                            					; XREF: SS_BGAnimate
00005326                            ; ===========================================================================
00005326                            
00005326                            ; ---------------------------------------------------------------------------
00005326                            ; Continue screen
00005326                            ; ---------------------------------------------------------------------------
00005326                            
00005326                            ContinueScreen:				; XREF: GameModeArray
00005326 6100 CCF4                  		bsr.w	Pal_FadeFrom
0000532A 46FC 2700                  		move	#$2700,sr
0000532E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005332 0200 00BF                  		andi.b	#$BF,d0
00005336 33C0 00C0 0004             		move.w	d0,($C00004).l
0000533C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005342 3CBC 8004                  		move.w	#$8004,(a6)
00005346 3CBC 8700                  		move.w	#$8700,(a6)
0000534A 6100 C176                  		bsr.w	ClearScreen
0000534E 43F8 D000                  		lea	($FFFFD000).w,a1
00005352 7000                       		moveq	#0,d0
00005354 323C 07FF                  		move.w	#$7FF,d1
00005358                            
00005358                            Cont_ClrObjRam:
00005358 22C0                       		move.l	d0,(a1)+
0000535A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000535E                            
0000535E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005368 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000536E 6100 C2CE                  		bsr.w	NemDec
00005372 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000537C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005382 6100 C2BA                  		bsr.w	NemDec
00005386 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005390 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005396 6100 C2A6                  		bsr.w	NemDec
0000539A 720A                       		moveq	#10,d1
0000539C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053A2 7012                       		moveq	#$12,d0
000053A4 6100 CF20                  		bsr.w	PalLoad1	; load continue	screen pallet
000053A8 103C 0090                  		move.b	#$90,d0
000053AC 6100 C1E6                  		bsr.w	PlaySound	; play continue	music
000053B0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053B6 42B8 F700                  		clr.l	($FFFFF700).w
000053BA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053C2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053C8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053CE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053D4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053DA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053E0 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053E6 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053EC 4EB9 0000 0000             		jsr	ObjectsLoad
000053F2 4EB9 0000 0000             		jsr	BuildSprites
000053F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053FC 0000 0040                  		ori.b	#$40,d0
00005400 33C0 00C0 0004             		move.w	d0,($C00004).l
00005406 6100 CB6A                  		bsr.w	Pal_FadeTo
0000540A                            
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            ; Continue screen main loop
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            
0000540A                            Cont_MainLoop:
0000540A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005410 6100 D8F0                  		bsr.w	DelayProgram
00005414 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000541A 6400                       		bcc.s	loc_4DF2
0000541C 46FC 2700                  		move	#$2700,sr
00005420 3238 F614                  		move.w	($FFFFF614).w,d1
00005424 82FC 003C                  		divu.w	#$3C,d1
00005428 0281 0000 000F             		andi.l	#$F,d1
0000542E 4EB9 0000 0000             		jsr	ContScrCounter
00005434 46FC 2300                  		move	#$2300,sr
00005438                            
00005438                            loc_4DF2:
00005438 4EB9 0000 0000             		jsr	ObjectsLoad
0000543E 4EB9 0000 0000             		jsr	BuildSprites
00005444 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000544A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000544C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005452 64B6                       		bcc.s	Cont_MainLoop
00005454 4A78 F614                  		tst.w	($FFFFF614).w
00005458 6600 FFB0                  		bne.w	Cont_MainLoop
0000545C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005462 4E75                       		rts	
00005464                            ; ===========================================================================
00005464                            
00005464                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005464 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000546A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005470 7000                       		moveq	#0,d0
00005472 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005476 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000547A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000547E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005482 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005486 4E75                       		rts	
00005488                            ; ===========================================================================
00005488                            
00005488                            ; ---------------------------------------------------------------------------
00005488                            ; Object 80 - Continue screen elements
00005488                            ; ---------------------------------------------------------------------------
00005488                            
00005488                            Obj80:					; XREF: Obj_Index
00005488 7000                       		moveq	#0,d0
0000548A 1028 0024                  		move.b	$24(a0),d0
0000548E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005492 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005496                            ; ===========================================================================
00005496 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005498 0000                       		dc.w Obj80_Display-Obj80_Index
0000549A 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000549C 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000549E                            ; ===========================================================================
0000549E                            
0000549E                            Obj80_Main:				; XREF: Obj80_Index
0000549E 5428 0024                  		addq.b	#2,$24(a0)
000054A2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054AA 317C 8500 0002             		move.w	#$8500,2(a0)
000054B0 117C 0000 0001             		move.b	#0,1(a0)
000054B6 117C 003C 0019             		move.b	#$3C,$19(a0)
000054BC 317C 0120 0008             		move.w	#$120,8(a0)
000054C2 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054C8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054CE                            
000054CE                            Obj80_Display:				; XREF: Obj80_Index
000054CE 4EF9 0000 0000             		jmp	DisplaySprite
000054D4                            ; ===========================================================================
000054D4                            Obj80_MiniSonicPos:
000054D4 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054E6 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054F2                            ; ===========================================================================
000054F2                            
000054F2                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054F2 2248                       		movea.l	a0,a1
000054F4 45F9 0000 54D4             		lea	(Obj80_MiniSonicPos).l,a2
000054FA 7200                       		moveq	#0,d1
000054FC 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005500 5501                       		subq.b	#2,d1
00005502 6400                       		bcc.s	loc_4EC4
00005504 4EF9 0000 0000             		jmp	DeleteObject
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000550A 7601                       		moveq	#1,d3
0000550C 0C01 000E                  		cmpi.b	#$E,d1
00005510 6500                       		bcs.s	loc_4ED0
00005512 7600                       		moveq	#0,d3
00005514 720E                       		moveq	#$E,d1
00005516                            
00005516                            loc_4ED0:
00005516 1401                       		move.b	d1,d2
00005518 0202 0001                  		andi.b	#1,d2
0000551C                            
0000551C                            Obj80_MiniSonLoop:
0000551C 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005520 335A 0008                  		move.w	(a2)+,8(a1)
00005524 4A02                       		tst.b	d2
00005526 6700                       		beq.s	loc_4EEA
00005528 0469 000A 0008             		subi.w	#$A,8(a1)
0000552E                            
0000552E                            loc_4EEA:
0000552E 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005534 137C 0006 001A             		move.b	#6,$1A(a1)
0000553A 137C 0006 0024             		move.b	#6,$24(a1)
00005540 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005548 337C 8551 0002             		move.w	#$8551,2(a1)
0000554E 137C 0000 0001             		move.b	#0,1(a1)
00005554 43E9 0040                  		lea	$40(a1),a1
00005558 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000555C 43E9 FFC0                  		lea	-$40(a1),a1
00005560 1343 0028                  		move.b	d3,$28(a1)
00005564                            
00005564                            Obj80_ChkType:				; XREF: Obj80_Index
00005564 4A28 0028                  		tst.b	$28(a0)
00005568 6700                       		beq.s	loc_4F40
0000556A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005570 6500                       		bcs.s	loc_4F40
00005572 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005576 0200 0001                  		andi.b	#1,d0
0000557A 6600                       		bne.s	loc_4F40
0000557C 4A78 D010                  		tst.w	($FFFFD010).w
00005580 6600                       		bne.s	Obj80_Delete
00005582 4E75                       		rts	
00005584                            ; ===========================================================================
00005584                            
00005584                            loc_4F40:				; XREF: Obj80_ChkType
00005584 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005588 0200 000F                  		andi.b	#$F,d0
0000558C 6600                       		bne.s	Obj80_Display2
0000558E 0868 0000 001A             		bchg	#0,$1A(a0)
00005594                            
00005594                            Obj80_Display2:
00005594 4EF9 0000 0000             		jmp	DisplaySprite
0000559A                            ; ===========================================================================
0000559A                            
0000559A                            Obj80_Delete:				; XREF: Obj80_ChkType
0000559A 4EF9 0000 0000             		jmp	DeleteObject
000055A0                            ; ===========================================================================
000055A0                            
000055A0                            ; ---------------------------------------------------------------------------
000055A0                            ; Object 81 - Sonic on the continue screen
000055A0                            ; ---------------------------------------------------------------------------
000055A0                            
000055A0                            Obj81:					; XREF: Obj_Index
000055A0 7000                       		moveq	#0,d0
000055A2 1028 0024                  		move.b	$24(a0),d0
000055A6 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055AA 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055AE 4EF9 0000 0000             		jmp	DisplaySprite
000055B4                            ; ===========================================================================
000055B4 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055B6 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055B8 0000                       		dc.w Obj81_Animate-Obj81_Index
000055BA 0000                       		dc.w Obj81_Run-Obj81_Index
000055BC                            ; ===========================================================================
000055BC                            
000055BC                            Obj81_Main:				; XREF: Obj81_Index
000055BC 5428 0024                  		addq.b	#2,$24(a0)
000055C0 317C 00A0 0008             		move.w	#$A0,8(a0)
000055C6 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055CC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055D4 317C 0780 0002             		move.w	#$780,2(a0)
000055DA 117C 0004 0001             		move.b	#4,1(a0)
000055E0 117C 0002 0018             		move.b	#2,$18(a0)
000055E6 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055EC 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055F2                            
000055F2                            Obj81_ChkLand:				; XREF: Obj81_Index
000055F2 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055F8 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000055FA 5428 0024                  		addq.b	#2,$24(a0)
000055FE 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005602 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000560A 317C 8500 0002             		move.w	#$8500,2(a0)
00005610 117C 0000 001C             		move.b	#0,$1C(a0)
00005616 6000                       		bra.s	Obj81_Animate
00005618                            ; ===========================================================================
00005618                            
00005618                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005618 4EB9 0000 0000             		jsr	SpeedToPos
0000561E 4EB9 0000 0000             		jsr	Sonic_Animate
00005624 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000562A                            ; ===========================================================================
0000562A                            
0000562A                            Obj81_Animate:				; XREF: Obj81_Index
0000562A 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000562E 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005630 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005636 4EF9 0000 0000             		jmp	AnimateSprite
0000563C                            ; ===========================================================================
0000563C                            
0000563C                            Obj81_GetUp:				; XREF: Obj81_Animate
0000563C 5428 0024                  		addq.b	#2,$24(a0)
00005640 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005648 317C 0780 0002             		move.w	#$780,2(a0)
0000564E 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005654 4268 0014                  		clr.w	$14(a0)
00005658 5168 000C                  		subq.w	#8,$C(a0)
0000565C 103C 00E0                  		move.b	#$E0,d0
00005660 6100 BF38                  		bsr.w	PlaySound_Special ; fade out music
00005664                            
00005664                            Obj81_Run:				; XREF: Obj81_Index
00005664 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000566A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000566C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005672 6000                       		bra.s	Obj81_ShowRun
00005674                            ; ===========================================================================
00005674                            
00005674                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005674 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000567A                            
0000567A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000567A 4EB9 0000 0000             		jsr	SpeedToPos
00005680 4EB9 0000 0000             		jsr	Sonic_Animate
00005686 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000568C                            ; ===========================================================================
0000568C                            Ani_obj81:
0000568C                            	include "_anim\obj81.asm"
0000568C                            ; ---------------------------------------------------------------------------
0000568C                            ; Animation script - Sonic on the continue screen
0000568C                            ; ---------------------------------------------------------------------------
0000568C 0000                       		dc.w byte_504A-Ani_obj81
0000568E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000569A 00                         		even
0000569A 00                         		even
0000569A                            
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            ; Sprite mappings - Continue screen
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            Map_obj80:
0000569A                            	include "_maps\obj80.asm"
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            ; Sprite mappings - Continue screen
0000569A                            ; ---------------------------------------------------------------------------
0000569A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000569E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056A2 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056A6 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056AA 0B                         byte_5066:	dc.b $B
000056AB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056B0 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056B5 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056BA F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056BF F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056C4 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056C9 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056CE F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056D3 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056D8 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056DD 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056E2 03                         byte_509E:	dc.b 3
000056E3 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056E8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056ED F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056F2 03                         byte_50AE:	dc.b 3
000056F3 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056F8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056FD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005702 03                         byte_50BE:	dc.b 3
00005703 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005708 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000570D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005712 02                         byte_50CE:	dc.b 2
00005713 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005718 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000571D 01                         byte_50D9:	dc.b 1
0000571E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005723 01                         byte_50DF:	dc.b 1
00005724 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000572A 00                         		even
0000572A 00                         		even
0000572A                            
0000572A                            ; ===========================================================================
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            ; Ending sequence in Green Hill	Zone
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            
0000572A                            EndingSequence:				; XREF: GameModeArray
0000572A 103C 00E4                  		move.b	#$E4,d0
0000572E 6100 BE6A                  		bsr.w	PlaySound_Special ; stop music
00005732 6100 C8E8                  		bsr.w	Pal_FadeFrom
00005736 43F8 D000                  		lea	($FFFFD000).w,a1
0000573A 7000                       		moveq	#0,d0
0000573C 323C 07FF                  		move.w	#$7FF,d1
00005740                            
00005740                            End_ClrObjRam:
00005740 22C0                       		move.l	d0,(a1)+
00005742 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005746                            
00005746 43F8 F628                  		lea	($FFFFF628).w,a1
0000574A 7000                       		moveq	#0,d0
0000574C 323C 0015                  		move.w	#$15,d1
00005750                            
00005750                            End_ClrRam:
00005750 22C0                       		move.l	d0,(a1)+
00005752 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005756                            
00005756 43F8 F700                  		lea	($FFFFF700).w,a1
0000575A 7000                       		moveq	#0,d0
0000575C 323C 003F                  		move.w	#$3F,d1
00005760                            
00005760                            End_ClrRam2:
00005760 22C0                       		move.l	d0,(a1)+
00005762 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005766                            
00005766 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000576A 7000                       		moveq	#0,d0
0000576C 323C 0047                  		move.w	#$47,d1
00005770                            
00005770                            End_ClrRam3:
00005770 22C0                       		move.l	d0,(a1)+
00005772 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005776                            
00005776 46FC 2700                  		move	#$2700,sr
0000577A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000577E 0200 00BF                  		andi.b	#$BF,d0
00005782 33C0 00C0 0004             		move.w	d0,($C00004).l
00005788 6100 BD38                  		bsr.w	ClearScreen
0000578C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005792 3CBC 8B03                  		move.w	#$8B03,(a6)
00005796 3CBC 8230                  		move.w	#$8230,(a6)
0000579A 3CBC 8407                  		move.w	#$8407,(a6)
0000579E 3CBC 857C                  		move.w	#$857C,(a6)
000057A2 3CBC 9001                  		move.w	#$9001,(a6)
000057A6 3CBC 8004                  		move.w	#$8004,(a6)
000057AA 3CBC 8720                  		move.w	#$8720,(a6)
000057AE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057B4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057B8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057BE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057C4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057CA 6700                       		beq.s	End_LoadData	; if yes, branch
000057CC 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057D2                            
000057D2                            End_LoadData:
000057D2 701C                       		moveq	#$1C,d0
000057D4 6100 C114                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057D8 4EB9 0000 0000             		jsr	Hud_Base
000057DE 6100 0000                  		bsr.w	LevelSizeLoad
000057E2 6100 0000                  		bsr.w	DeformBgLayer
000057E6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057EC 6100 0000                  		bsr.w	MainLoadBlockLoad
000057F0 6100 0000                  		bsr.w	LoadTilesFromStart
000057F4 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000057FC 46FC 2300                  		move	#$2300,sr
00005800 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005806 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000580A 6100 C28E                  		bsr.w	KosDec
0000580E 7003                       		moveq	#3,d0
00005810 6100 CAB4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005814 303C 008B                  		move.w	#$8B,d0
00005818 6100 BD7A                  		bsr.w	PlaySound	; play ending sequence music
0000581C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005822 6700                       		beq.s	End_LoadSonic	; if not, branch
00005824 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000582A                            
0000582A                            End_LoadSonic:
0000582A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005830 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005836 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000583C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005842 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005848 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000584E 4EB9 0000 0000             		jsr	ObjPosLoad
00005854 4EB9 0000 0000             		jsr	ObjectsLoad
0000585A 4EB9 0000 0000             		jsr	BuildSprites
00005860 7000                       		moveq	#0,d0
00005862 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005866 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000586A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000586E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005872 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005876 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000587A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000587E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005882 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005886 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000588A 6100 EEE0                  		bsr.w	OscillateNumInit
0000588E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005894 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000589A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058A0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058A6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058AC 6100 D454                  		bsr.w	DelayProgram
000058B0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058B4 0000 0040                  		ori.b	#$40,d0
000058B8 33C0 00C0 0004             		move.w	d0,($C00004).l
000058BE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058C4 6100 C6AC                  		bsr.w	Pal_FadeTo
000058C8                            
000058C8                            ; ---------------------------------------------------------------------------
000058C8                            ; Main ending sequence loop
000058C8                            ; ---------------------------------------------------------------------------
000058C8                            
000058C8                            End_MainLoop:
000058C8 6100 BCDC                  		bsr.w	PauseGame
000058CC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058D2 6100 D42E                  		bsr.w	DelayProgram
000058D6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058DA 6100 0000                  		bsr.w	End_MoveSonic
000058DE 4EB9 0000 0000             		jsr	ObjectsLoad
000058E4 6100 0000                  		bsr.w	DeformBgLayer
000058E8 4EB9 0000 0000             		jsr	BuildSprites
000058EE 4EB9 0000 0000             		jsr	ObjPosLoad
000058F4 6100 C244                  		bsr.w	PalCycle_Load
000058F8 6100 EEC8                  		bsr.w	OscillateNumDo
000058FC 6100 EF54                  		bsr.w	ChangeRingFrame
00005900 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005906 6700                       		beq.s	loc_52DA	; if yes, branch
00005908 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000590E 103C 0091                  		move.b	#$91,d0
00005912 6100 BC86                  		bsr.w	PlaySound_Special ; play credits music
00005916 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000591C 4E75                       		rts	
0000591E                            ; ===========================================================================
0000591E                            
0000591E                            loc_52DA:
0000591E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005922 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005926                            
00005926 4278 FE02                  		clr.w	($FFFFFE02).w
0000592A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005930 4278 F794                  		clr.w	($FFFFF794).w
00005934                            
00005934                            End_AllEmlds:				; XREF: loc_5334
00005934 6100 BC70                  		bsr.w	PauseGame
00005938 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000593E 6100 D3C2                  		bsr.w	DelayProgram
00005942 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005946 6100 0000                  		bsr.w	End_MoveSonic
0000594A 4EB9 0000 0000             		jsr	ObjectsLoad
00005950 6100 0000                  		bsr.w	DeformBgLayer
00005954 4EB9 0000 0000             		jsr	BuildSprites
0000595A 4EB9 0000 0000             		jsr	ObjPosLoad
00005960 6100 EE60                  		bsr.w	OscillateNumDo
00005964 6100 EEEC                  		bsr.w	ChangeRingFrame
00005968 5378 F794                  		subq.w	#1,($FFFFF794).w
0000596C 6A00                       		bpl.s	loc_5334
0000596E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005974 6100 C7F0                  		bsr.w	Pal_ToWhite
00005978                            
00005978                            loc_5334:
00005978 4A78 FE02                  		tst.w	($FFFFFE02).w
0000597C 6700 FFB6                  		beq.w	End_AllEmlds
00005980 4278 FE02                  		clr.w	($FFFFFE02).w
00005984 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000598A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005990 4DF9 00C0 0000             		lea	($C00000).l,a6
00005996 47F8 F700                  		lea	($FFFFF700).w,a3
0000599A 49F8 A400                  		lea	($FFFFA400).w,a4
0000599E 343C 4000                  		move.w	#$4000,d2
000059A2 6100 0000                  		bsr.w	LoadTilesFromStart2
000059A6 7013                       		moveq	#$13,d0
000059A8 6100 C91C                  		bsr.w	PalLoad1	; load ending pallet
000059AC 6100 C6EC                  		bsr.w	Pal_MakeWhite
000059B0 6000 FF16                  		bra.w	End_MainLoop
000059B4                            
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            ; Subroutine controlling Sonic on the ending sequence
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            
000059B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B4                            
000059B4                            
000059B4                            End_MoveSonic:				; XREF: End_MainLoop
000059B4 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059B8 6600                       		bne.s	End_MoveSonic2
000059BA 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059C0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059C2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059C6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059CC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059D2 4E75                       		rts	
000059D4                            ; ===========================================================================
000059D4                            
000059D4                            End_MoveSonic2:				; XREF: End_MoveSonic
000059D4 5500                       		subq.b	#2,d0
000059D6 6600                       		bne.s	End_MoveSonic3
000059D8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059DE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059E0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059E4 7000                       		moveq	#0,d0
000059E6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059EA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059EE 31C0 D014                  		move.w	d0,($FFFFD014).w
000059F2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059F8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000059FE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A04 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A0A 4E75                       		rts	
00005A0C                            ; ===========================================================================
00005A0C                            
00005A0C                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A0C 5500                       		subq.b	#2,d0
00005A0E 6600                       		bne.s	End_MoveSonExit
00005A10 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A14 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A1A 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A20 4278 D024                  		clr.w	($FFFFD024).w
00005A24                            
00005A24                            End_MoveSonExit:
00005A24 4E75                       		rts	
00005A26                            ; End of function End_MoveSonic
00005A26                            
00005A26                            ; ===========================================================================
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            ; Object 87 - Sonic on ending sequence
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            
00005A26                            Obj87:					; XREF: Obj_Index
00005A26 7000                       		moveq	#0,d0
00005A28 1028 0025                  		move.b	$25(a0),d0
00005A2C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A30 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A34 4EF9 0000 0000             		jmp	DisplaySprite
00005A3A                            ; ===========================================================================
00005A3A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A3E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A42 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A46 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4E                            ; ===========================================================================
00005A4E                            
00005A4E                            Obj87_Main:				; XREF: Obj87_Index
00005A4E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A54 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A56 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A5C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A62 4E75                       		rts	
00005A64                            ; ===========================================================================
00005A64                            
00005A64                            Obj87_Main2:				; XREF: Obj87_Main
00005A64 5428 0025                  		addq.b	#2,$25(a0)
00005A68 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A70 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A76 117C 0004 0001             		move.b	#4,1(a0)
00005A7C 4228 0022                  		clr.b	$22(a0)
00005A80 117C 0002 0018             		move.b	#2,$18(a0)
00005A86 117C 0000 001A             		move.b	#0,$1A(a0)
00005A8C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A92                            
00005A92                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A96 6600                       		bne.s	Obj87_Wait
00005A98 5428 0025                  		addq.b	#2,$25(a0)
00005A9C 317C 0001 001C             		move.w	#1,$1C(a0)
00005AA2 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AA8                            
00005AA8                            Obj87_Wait:
00005AA8 4E75                       		rts	
00005AAA                            ; ===========================================================================
00005AAA                            
00005AAA                            Obj87_LookUp:				; XREF: Obj87_Index
00005AAA 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AB2 6600                       		bne.s	locret_5480
00005AB4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005ABA 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AC0 5428 0025                  		addq.b	#2,$25(a0)
00005AC4                            
00005AC4                            locret_5480:
00005AC4 4E75                       		rts	
00005AC6                            ; ===========================================================================
00005AC6                            
00005AC6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005AC6 5368 0030                  		subq.w	#1,$30(a0)
00005ACA 6600                       		bne.s	Obj87_Wait2
00005ACC 43F8 D400                  		lea	($FFFFD400).w,a1
00005AD0 323C 00FF                  		move.w	#$FF,d1
00005AD4                            
00005AD4                            Obj87_ClrLoop:
00005AD4 4299                       		clr.l	(a1)+
00005AD6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005ADA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005AE0 5428 0025                  		addq.b	#2,$25(a0)
00005AE4 117C 0001 001C             		move.b	#1,$1C(a0)
00005AEA 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AF0                            
00005AF0                            Obj87_Wait2:
00005AF0 4E75                       		rts	
00005AF2                            ; ===========================================================================
00005AF2                            
00005AF2                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AF2 5368 0030                  		subq.w	#1,$30(a0)
00005AF6 6600                       		bne.s	Obj87_Wait3
00005AF8 5428 0025                  		addq.b	#2,$25(a0)
00005AFC 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B02 117C 0002 001C             		move.b	#2,$1C(a0)
00005B08 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B0E                            
00005B0E                            Obj87_Wait3:
00005B0E 4E75                       		rts	
00005B10                            ; ===========================================================================
00005B10                            
00005B10                            Obj87_Animate:				; XREF: Obj87_Index
00005B10 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B16 4EF9 0000 0000             		jmp	AnimateSprite
00005B1C                            ; ===========================================================================
00005B1C                            
00005B1C                            Obj87_Leap:				; XREF: Obj87_Index
00005B1C 5368 0030                  		subq.w	#1,$30(a0)
00005B20 6600                       		bne.s	Obj87_Wait4
00005B22 5428 0025                  		addq.b	#2,$25(a0)
00005B26 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B2E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B34 117C 0004 0001             		move.b	#4,1(a0)
00005B3A 4228 0022                  		clr.b	$22(a0)
00005B3E 117C 0002 0018             		move.b	#2,$18(a0)
00005B44 117C 0005 001A             		move.b	#5,$1A(a0)
00005B4A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B50 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B56 60B8                       		bra.s	Obj87_Animate
00005B58                            ; ===========================================================================
00005B58                            
00005B58                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B58 4E75                       		rts	
00005B5A                            ; ===========================================================================
00005B5A                            Ani_obj87:
00005B5A                            	include "_anim\obj87.asm"
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            ; Animation script - Sonic on the ending sequence
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A 0000                       		dc.w byte_551C-Ani_obj87
00005B5C 0000                       		dc.w byte_552A-Ani_obj87
00005B5E 0000                       		dc.w byte_5534-Ani_obj87
00005B60 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B6E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B78 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B80                            		even
00005B80                            		even
00005B80                            
00005B80                            ; ===========================================================================
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            ; Object 88 - chaos emeralds on	the ending sequence
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            
00005B80                            Obj88:					; XREF: Obj_Index
00005B80 7000                       		moveq	#0,d0
00005B82 1028 0024                  		move.b	$24(a0),d0
00005B86 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B8A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B8E 4EF9 0000 0000             		jmp	DisplaySprite
00005B94                            ; ===========================================================================
00005B94 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B96 0000                       		dc.w Obj88_Move-Obj88_Index
00005B98                            ; ===========================================================================
00005B98                            
00005B98                            Obj88_Main:				; XREF: Obj88_Index
00005B98 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B9E 6700                       		beq.s	Obj88_Main2
00005BA0 588F                       		addq.l	#4,sp
00005BA2 4E75                       		rts	
00005BA4                            ; ===========================================================================
00005BA4                            
00005BA4                            Obj88_Main2:				; XREF: Obj88_Main
00005BA4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BAA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BB0 2248                       		movea.l	a0,a1
00005BB2 7600                       		moveq	#0,d3
00005BB4 7401                       		moveq	#1,d2
00005BB6 7205                       		moveq	#5,d1
00005BB8                            
00005BB8                            Obj88_MainLoop:
00005BB8 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BBC 5429 0024                  		addq.b	#2,$24(a1)
00005BC0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BC8 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BCE 137C 0004 0001             		move.b	#4,1(a1)
00005BD4 137C 0001 0018             		move.b	#1,$18(a1)
00005BDA 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BE0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BE6 1342 001C                  		move.b	d2,$1C(a1)
00005BEA 1342 001A                  		move.b	d2,$1A(a1)
00005BEE 5202                       		addq.b	#1,d2
00005BF0 1343 0026                  		move.b	d3,$26(a1)
00005BF4 0603 002A                  		addi.b	#$2A,d3
00005BF8 43E9 0040                  		lea	$40(a1),a1
00005BFC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C00                            
00005C00                            Obj88_Move:				; XREF: Obj88_Index
00005C00 3028 003E                  		move.w	$3E(a0),d0
00005C04 D168 0026                  		add.w	d0,$26(a0)
00005C08 1028 0026                  		move.b	$26(a0),d0
00005C0C 4EB9 0000 2D34             		jsr	(CalcSine).l
00005C12 7800                       		moveq	#0,d4
00005C14 1828 003C                  		move.b	$3C(a0),d4
00005C18 C3C4                       		muls.w	d4,d1
00005C1A E081                       		asr.l	#8,d1
00005C1C C1C4                       		muls.w	d4,d0
00005C1E E080                       		asr.l	#8,d0
00005C20 D268 0038                  		add.w	$38(a0),d1
00005C24 D068 003A                  		add.w	$3A(a0),d0
00005C28 3141 0008                  		move.w	d1,8(a0)
00005C2C 3140 000C                  		move.w	d0,$C(a0)
00005C30 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C36 6700                       		beq.s	loc_55FA
00005C38 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C3E                            
00005C3E                            loc_55FA:
00005C3E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C44 6700                       		beq.s	loc_5608
00005C46 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C4C                            
00005C4C                            loc_5608:
00005C4C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C52 6700                       		beq.s	locret_5614
00005C54 5368 003A                  		subq.w	#1,$3A(a0)
00005C58                            
00005C58                            locret_5614:
00005C58 4E75                       		rts	
00005C5A                            ; ===========================================================================
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            
00005C5A                            Obj89:					; XREF: Obj_Index
00005C5A 7000                       		moveq	#0,d0
00005C5C 1028 0024                  		move.b	$24(a0),d0
00005C60 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C64 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C68                            ; ===========================================================================
00005C68 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C6A 0000                       		dc.w Obj89_Move-Obj89_Index
00005C6C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C6E                            ; ===========================================================================
00005C6E                            
00005C6E                            Obj89_Main:				; XREF: Obj89_Index
00005C6E 5428 0024                  		addq.b	#2,$24(a0)
00005C72 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C78 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C7E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C86 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C8C 117C 0000 0001             		move.b	#0,1(a0)
00005C92 117C 0000 0018             		move.b	#0,$18(a0)
00005C98                            
00005C98                            Obj89_Move:				; XREF: Obj89_Index
00005C98 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C9E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CA0 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CA6 4EB9 0000 0000             		jsr	DisplaySprite
00005CAC                            ; ===========================================================================
00005CAC                            
00005CAC                            Obj89_Delay:				; XREF: Obj89_Move
00005CAC 5428 0024                  		addq.b	#2,$24(a0)
00005CB0 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CB6                            
00005CB6                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CB6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CBA 6A00                       		bpl.s	Obj89_Display
00005CBC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CC2                            
00005CC2                            Obj89_Display:
00005CC2 4EB9 0000 0000             		jsr	DisplaySprite
00005CC8                            ; ===========================================================================
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - Sonic on the ending	sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            Map_obj87:
00005CC8                            	include "_maps\obj87.asm"
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - Sonic on the ending	sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CCC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CD0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CD4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CD8 02                         byte_5690:	dc.b 2
00005CD9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CDE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CE3 03                         byte_569B:	dc.b 3
00005CE4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CE9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CEE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CF3 02                         byte_56AB:	dc.b 2
00005CF4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CF9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005CFE 02                         byte_56B6:	dc.b 2
00005CFF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D04 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D09 02                         byte_56C1:	dc.b 2
00005D0A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D0F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D14 03                         byte_56CC:	dc.b 3
00005D15 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D1A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D1F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D24 07                         byte_56DC:	dc.b 7
00005D25 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D2A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D2F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D34 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D39 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D3E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D43 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D48 18                         byte_5700:	dc.b $18
00005D49 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D4E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D53 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D58 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D5D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D62 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D67 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D6C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D71 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D76 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D7B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D80 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D85 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D8A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D8F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D94 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D99 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D9E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DA3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DA8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DAD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DB2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DB7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DBC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DC2 00                         		even
00005DC2 00                         		even
00005DC2                            
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            Map_obj88:
00005DC2                            	include "_maps\obj88.asm"
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DC6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DCA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DCE 0000                       		dc.w byte_57AC-Map_obj88
00005DD0 01                         byte_5788:	dc.b 1
00005DD1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DD6 01                         byte_578E:	dc.b 1
00005DD7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DDC 01                         byte_5794:	dc.b 1
00005DDD F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DE2 01                         byte_579A:	dc.b 1
00005DE3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DE8 01                         byte_57A0:	dc.b 1
00005DE9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DEE 01                         byte_57A6:	dc.b 1
00005DEF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DF4 01                         byte_57AC:	dc.b 1
00005DF5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005DFA                            		even
00005DFA                            		even
00005DFA                            
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            Map_obj89:
00005DFA                            	include "_maps\obj89.asm"
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA 0000                       		dc.w byte_57B4-Map_obj89
00005DFC 03                         byte_57B4:	dc.b 3
00005DFD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E02 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E07 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E0C                            		even
00005E0C                            		even
00005E0C                            
00005E0C                            ; ===========================================================================
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            ; Credits ending sequence
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            
00005E0C                            Credits:				; XREF: GameModeArray
00005E0C 6100 B9CE                  		bsr.w	ClearPLC
00005E10 6100 C20A                  		bsr.w	Pal_FadeFrom
00005E14 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E1A 3CBC 8004                  		move.w	#$8004,(a6)
00005E1E 3CBC 8230                  		move.w	#$8230,(a6)
00005E22 3CBC 8407                  		move.w	#$8407,(a6)
00005E26 3CBC 9001                  		move.w	#$9001,(a6)
00005E2A 3CBC 9200                  		move.w	#$9200,(a6)
00005E2E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E32 3CBC 8720                  		move.w	#$8720,(a6)
00005E36 4238 F64E                  		clr.b	($FFFFF64E).w
00005E3A 6100 B686                  		bsr.w	ClearScreen
00005E3E 43F8 D000                  		lea	($FFFFD000).w,a1
00005E42 7000                       		moveq	#0,d0
00005E44 323C 07FF                  		move.w	#$7FF,d1
00005E48                            
00005E48                            Cred_ClrObjRam:
00005E48 22C0                       		move.l	d0,(a1)+
00005E4A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E4E                            
00005E4E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E58 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E5E 6100 B7DE                  		bsr.w	NemDec
00005E62 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E66 7000                       		moveq	#0,d0
00005E68 323C 001F                  		move.w	#$1F,d1
00005E6C                            
00005E6C                            Cred_ClrPallet:
00005E6C 22C0                       		move.l	d0,(a1)+
00005E6E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E72                            
00005E72 7003                       		moveq	#3,d0
00005E74 6100 C450                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E78 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E7E 4EB9 0000 0000             		jsr	ObjectsLoad
00005E84 4EB9 0000 0000             		jsr	BuildSprites
00005E8A 6100 0000                  		bsr.w	EndingDemoLoad
00005E8E 7000                       		moveq	#0,d0
00005E90 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E94 E948                       		lsl.w	#4,d0
00005E96 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E9C 45F2 0000                  		lea	(a2,d0.w),a2
00005EA0 7000                       		moveq	#0,d0
00005EA2 1012                       		move.b	(a2),d0
00005EA4 6700                       		beq.s	loc_5862
00005EA6 6100 B8D6                  		bsr.w	LoadPLC		; load level patterns
00005EAA                            
00005EAA                            loc_5862:
00005EAA 7001                       		moveq	#1,d0
00005EAC 6100 B8D0                  		bsr.w	LoadPLC		; load standard	level patterns
00005EB0 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EB6 6100 C0BA                  		bsr.w	Pal_FadeTo
00005EBA                            
00005EBA                            Cred_WaitLoop:
00005EBA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EC0 6100 CE40                  		bsr.w	DelayProgram
00005EC4 6100 B924                  		bsr.w	RunPLC_RAM
00005EC8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005ECC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ECE 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ED2 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005ED4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005EDA 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005EDE 4E75                       		rts	
00005EE0                            
00005EE0                            ; ---------------------------------------------------------------------------
00005EE0                            ; Ending sequence demo loading subroutine
00005EE0                            ; ---------------------------------------------------------------------------
00005EE0                            
00005EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EE0                            
00005EE0                            
00005EE0                            EndingDemoLoad:				; XREF: Credits
00005EE0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005EE4 0240 000F                  		andi.w	#$F,d0
00005EE8 D040                       		add.w	d0,d0
00005EEA 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EEE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EF2 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EF6 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005EFC 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005EFE 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F04 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F0A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F10 7000                       		moveq	#0,d0
00005F12 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F16 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F1A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F1E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F22 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F28 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F2A 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F30 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F34 303C 0008                  		move.w	#8,d0
00005F38                            
00005F38                            EndDemo_LampLoad:
00005F38 24D9                       		move.l	(a1)+,(a2)+
00005F3A 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F3E                            
00005F3E                            EndDemo_Exit:
00005F3E 4E75                       		rts	
00005F40                            ; End of function EndingDemoLoad
00005F40                            
00005F40                            ; ===========================================================================
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            ; Levels used in the end sequence demos
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F50                            
00005F50                            ; ---------------------------------------------------------------------------
00005F50                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F50                            ; ---------------------------------------------------------------------------
00005F50                            EndDemo_LampVar:
00005F50 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F52 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F58 0000 0000                  		dc.l 0
00005F5C 0000                       		dc.b 0,	0
00005F5E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F72 0101                       		dc.b 1,	1
00005F74                            ; ===========================================================================
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            ; "TRY AGAIN" and "END"	screens
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            
00005F74                            TryAgainEnd:				; XREF: Credits
00005F74 6100 B866                  		bsr.w	ClearPLC
00005F78 6100 C0A2                  		bsr.w	Pal_FadeFrom
00005F7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F82 3CBC 8004                  		move.w	#$8004,(a6)
00005F86 3CBC 8230                  		move.w	#$8230,(a6)
00005F8A 3CBC 8407                  		move.w	#$8407,(a6)
00005F8E 3CBC 9001                  		move.w	#$9001,(a6)
00005F92 3CBC 9200                  		move.w	#$9200,(a6)
00005F96 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F9A 3CBC 8720                  		move.w	#$8720,(a6)
00005F9E 4238 F64E                  		clr.b	($FFFFF64E).w
00005FA2 6100 B51E                  		bsr.w	ClearScreen
00005FA6 43F8 D000                  		lea	($FFFFD000).w,a1
00005FAA 7000                       		moveq	#0,d0
00005FAC 323C 07FF                  		move.w	#$7FF,d1
00005FB0                            
00005FB0                            TryAg_ClrObjRam:
00005FB0 22C0                       		move.l	d0,(a1)+
00005FB2 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FB6                            
00005FB6 701D                       		moveq	#$1D,d0
00005FB8 6100 B930                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FBC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FC0 7000                       		moveq	#0,d0
00005FC2 323C 001F                  		move.w	#$1F,d1
00005FC6                            
00005FC6                            TryAg_ClrPallet:
00005FC6 22C0                       		move.l	d0,(a1)+
00005FC8 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FCC                            
00005FCC 7013                       		moveq	#$13,d0
00005FCE 6100 C2F6                  		bsr.w	PalLoad1	; load ending pallet
00005FD2 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FD6 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FDC 4EB9 0000 0000             		jsr	ObjectsLoad
00005FE2 4EB9 0000 0000             		jsr	BuildSprites
00005FE8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FEE 6100 BF82                  		bsr.w	Pal_FadeTo
00005FF2                            
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            ; "TRY AGAIN" and "END"	screen main loop
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            TryAg_MainLoop:
00005FF2 6100 B5B2                  		bsr.w	PauseGame
00005FF6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005FFC 6100 CD04                  		bsr.w	DelayProgram
00006000 4EB9 0000 0000             		jsr	ObjectsLoad
00006006 4EB9 0000 0000             		jsr	BuildSprites
0000600C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006012 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006014 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006018 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000601A 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006020 67D0                       		beq.s	TryAg_MainLoop
00006022                            
00006022                            TryAg_Exit:
00006022 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006028 4E75                       		rts	
0000602A                            
0000602A                            ; ===========================================================================
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            
0000602A                            Obj8B:					; XREF: Obj_Index
0000602A 7000                       		moveq	#0,d0
0000602C 1028 0024                  		move.b	$24(a0),d0
00006030 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006034 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006038 4EF9 0000 0000             		jmp	DisplaySprite
0000603E                            ; ===========================================================================
0000603E 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006040 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006042 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006044 0000                       		dc.w loc_5A8E-Obj8B_Index
00006046                            ; ===========================================================================
00006046                            
00006046                            Obj8B_Main:				; XREF: Obj8B_Index
00006046 5428 0024                  		addq.b	#2,$24(a0)
0000604A 317C 0120 0008             		move.w	#$120,8(a0)
00006050 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006056 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000605E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006064 117C 0000 0001             		move.b	#0,1(a0)
0000606A 117C 0002 0018             		move.b	#2,$18(a0)
00006070 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006076 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000607C 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000607E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006084 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000608A 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006090 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006096                            
00006096                            Obj8B_Animate:				; XREF: Obj8B_Index
00006096 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000609C 4EF9 0000 0000             		jmp	AnimateSprite
000060A2                            ; ===========================================================================
000060A2                            
000060A2                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060A2 5428 0024                  		addq.b	#2,$24(a0)
000060A6 7002                       		moveq	#2,d0
000060A8 0828 0000 001C             		btst	#0,$1C(a0)
000060AE 6700                       		beq.s	loc_5A6A
000060B0 4440                       		neg.w	d0
000060B2                            
000060B2                            loc_5A6A:
000060B2 43F8 D800                  		lea	($FFFFD800).w,a1
000060B6 7205                       		moveq	#5,d1
000060B8                            
000060B8                            loc_5A70:
000060B8 1340 003E                  		move.b	d0,$3E(a1)
000060BC 3400                       		move.w	d0,d2
000060BE E742                       		asl.w	#3,d2
000060C0 D529 0026                  		add.b	d2,$26(a1)
000060C4 43E9 0040                  		lea	$40(a1),a1
000060C8 51C9 FFEE                  		dbf	d1,loc_5A70
000060CC 5228 001A                  		addq.b	#1,$1A(a0)
000060D0 317C 0070 0030             		move.w	#112,$30(a0)
000060D6                            
000060D6                            loc_5A8E:				; XREF: Obj8B_Index
000060D6 5368 0030                  		subq.w	#1,$30(a0)
000060DA 6A00                       		bpl.s	locret_5AA0
000060DC 0868 0000 001C             		bchg	#0,$1C(a0)
000060E2 117C 0002 0024             		move.b	#2,$24(a0)
000060E8                            
000060E8                            locret_5AA0:
000060E8 4E75                       		rts	
000060EA                            ; ===========================================================================
000060EA                            Ani_obj8B:
000060EA                            	include "_anim\obj8B.asm"
000060EA                            ; ---------------------------------------------------------------------------
000060EA                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060EA                            ; ---------------------------------------------------------------------------
000060EA 0000                       		dc.w byte_5AA8-Ani_obj8B
000060EC 0000                       		dc.w byte_5AAC-Ani_obj8B
000060EE 0000                       		dc.w byte_5AB0-Ani_obj8B
000060F0 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060F4 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060F8 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000610A                            		even
0000610A                            		even
0000610A                            
0000610A                            ; ===========================================================================
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            
0000610A                            Obj8C:					; XREF: Obj_Index
0000610A 7000                       		moveq	#0,d0
0000610C 1028 0024                  		move.b	$24(a0),d0
00006110 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006114 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006118 4EF9 0000 0000             		jmp	DisplaySprite
0000611E                            ; ===========================================================================
0000611E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006120 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006122                            ; ===========================================================================
00006122                            
00006122                            Obj8C_Main:				; XREF: Obj8C_Index
00006122 2248                       		movea.l	a0,a1
00006124 7400                       		moveq	#0,d2
00006126 7600                       		moveq	#0,d3
00006128 7205                       		moveq	#5,d1
0000612A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000612E                            
0000612E                            Obj8C_MakeEms:				; XREF: loc_5B42
0000612E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006132 5429 0024                  		addq.b	#2,$24(a1)
00006136 237C 0000 5DC2 0004        		move.l	#Map_obj88,4(a1)
0000613E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006144 137C 0000 0001             		move.b	#0,1(a1)
0000614A 137C 0001 0018             		move.b	#1,$18(a1)
00006150 337C 0104 0008             		move.w	#$104,8(a1)
00006156 337C 0120 0038             		move.w	#$120,$38(a1)
0000615C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006162 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006168 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000616E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006172                            
00006172                            Obj8C_ChkEms:
00006172 7000                       		moveq	#0,d0
00006174 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006178 5340                       		subq.w	#1,d0
0000617A 6500                       		bcs.s	loc_5B42
0000617C                            
0000617C                            Obj8C_ChkEmLoop:
0000617C B433 0000                  		cmp.b	(a3,d0.w),d2
00006180 6600                       		bne.s	loc_5B3E
00006182 5202                       		addq.b	#1,d2
00006184 60EC                       		bra.s	Obj8C_ChkEms
00006186                            ; ===========================================================================
00006186                            
00006186                            loc_5B3E:
00006186 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000618A                            
0000618A                            loc_5B42:
0000618A 1342 001A                  		move.b	d2,$1A(a1)
0000618E 5229 001A                  		addq.b	#1,$1A(a1)
00006192 5202                       		addq.b	#1,d2
00006194 137C 0080 0026             		move.b	#$80,$26(a1)
0000619A 1343 001E                  		move.b	d3,$1E(a1)
0000619E 1343 001F                  		move.b	d3,$1F(a1)
000061A2 0643 000A                  		addi.w	#$A,d3
000061A6 43E9 0040                  		lea	$40(a1),a1
000061AA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061AE                            
000061AE                            Obj8C_Move:				; XREF: Obj8C_Index
000061AE 4A68 003E                  		tst.w	$3E(a0)
000061B2 6700                       		beq.s	locret_5BBA
000061B4 4A28 001E                  		tst.b	$1E(a0)
000061B8 6700                       		beq.s	loc_5B78
000061BA 5328 001E                  		subq.b	#1,$1E(a0)
000061BE 6600                       		bne.s	loc_5B80
000061C0                            
000061C0                            loc_5B78:
000061C0 3028 003E                  		move.w	$3E(a0),d0
000061C4 D168 0026                  		add.w	d0,$26(a0)
000061C8                            
000061C8                            loc_5B80:
000061C8 1028 0026                  		move.b	$26(a0),d0
000061CC 6700                       		beq.s	loc_5B8C
000061CE 0C00 0080                  		cmpi.b	#$80,d0
000061D2 6600                       		bne.s	loc_5B96
000061D4                            
000061D4                            loc_5B8C:
000061D4 4268 003E                  		clr.w	$3E(a0)
000061D8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061DE                            
000061DE                            loc_5B96:
000061DE 4EB9 0000 2D34             		jsr	(CalcSine).l
000061E4 7800                       		moveq	#0,d4
000061E6 1828 003C                  		move.b	$3C(a0),d4
000061EA C3C4                       		muls.w	d4,d1
000061EC E081                       		asr.l	#8,d1
000061EE C1C4                       		muls.w	d4,d0
000061F0 E080                       		asr.l	#8,d0
000061F2 D268 0038                  		add.w	$38(a0),d1
000061F6 D068 003A                  		add.w	$3A(a0),d0
000061FA 3141 0008                  		move.w	d1,8(a0)
000061FE 3140 000A                  		move.w	d0,$A(a0)
00006202                            
00006202                            locret_5BBA:
00006202 4E75                       		rts	
00006204                            ; ===========================================================================
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006204                            ; ---------------------------------------------------------------------------
00006204                            Map_obj8B:
00006204                            	include "_maps\obj8B.asm"
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006204                            ; ---------------------------------------------------------------------------
00006204 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006208 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000620C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006210 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006214 08                         byte_5BCC:	dc.b 8
00006215 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000621A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000621F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006224 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006229 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000622E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006233 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006238 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000623D 08                         byte_5BF5:	dc.b 8
0000623E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006243 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006248 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000624D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006252 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006257 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000625C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006261 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006266 08                         byte_5C1E:	dc.b 8
00006267 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000626C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006271 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006276 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000627B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006280 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006285 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000628A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000628F 08                         byte_5C47:	dc.b 8
00006290 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006295 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000629A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000629F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062A4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062A9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062AE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062B3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062B8 0C                         byte_5C70:	dc.b $C
000062B9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062BE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062C3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062C8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062CD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062D2 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062D7 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062DC 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062E1 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062E6 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062EB 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062F0 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062F5 0A                         byte_5CAD:	dc.b $A
000062F6 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000062FB DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006300 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006305 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000630A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000630F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006314 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006319 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000631E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006323 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006328 0A                         byte_5CE0:	dc.b $A
00006329 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000632E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006333 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006338 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000633D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006342 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006347 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000634C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006351 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006356 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000635B 0C                         byte_5D13:	dc.b $C
0000635C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006361 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006366 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000636B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006370 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006375 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000637A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000637F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006384 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006389 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000638E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006393 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006398                            		even
00006398                            		even
00006398                            
00006398                            ; ---------------------------------------------------------------------------
00006398                            ; Ending sequence demos
00006398                            ; ---------------------------------------------------------------------------
00006398                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063C6                            		even
000063C6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006406                            		even
00006406                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006436                            		even
00006436                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006466                            		even
00006466                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006486                            		even
00006486                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064A6                            		even
000064A6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064D6                            		even
000064D6                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006506                            		even
00006506                            
00006506                            ; ---------------------------------------------------------------------------
00006506                            ; Subroutine to	load level boundaries and start	locations
00006506                            ; ---------------------------------------------------------------------------
00006506                            
00006506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006506                            
00006506                            
00006506                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006506 7000                       		moveq	#0,d0
00006508 11C0 F740                  		move.b	d0,($FFFFF740).w
0000650C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006510 11C0 F746                  		move.b	d0,($FFFFF746).w
00006514 11C0 F748                  		move.b	d0,($FFFFF748).w
00006518 11C0 F742                  		move.b	d0,($FFFFF742).w
0000651C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006520 ED08                       		lsl.b	#6,d0
00006522 E848                       		lsr.w	#4,d0
00006524 3200                       		move.w	d0,d1
00006526 D040                       		add.w	d0,d0
00006528 D041                       		add.w	d1,d0
0000652A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000652E 3018                       		move.w	(a0)+,d0
00006530 31C0 F730                  		move.w	d0,($FFFFF730).w
00006534 2018                       		move.l	(a0)+,d0
00006536 21C0 F728                  		move.l	d0,($FFFFF728).w
0000653A 21C0 F720                  		move.l	d0,($FFFFF720).w
0000653E 2018                       		move.l	(a0)+,d0
00006540 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006544 21C0 F724                  		move.l	d0,($FFFFF724).w
00006548 3038 F728                  		move.w	($FFFFF728).w,d0
0000654C 0640 0240                  		addi.w	#$240,d0
00006550 31C0 F732                  		move.w	d0,($FFFFF732).w
00006554 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000655A 3018                       		move.w	(a0)+,d0
0000655C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006560 6000 0000                  		bra.w	LevSz_ChkLamp
00006564                            ; ===========================================================================
00006564                            ; ---------------------------------------------------------------------------
00006564                            ; Level size array and ending start location array
00006564                            ; ---------------------------------------------------------------------------
00006564                            LevelSizeArray:        ; GHZ
00006564 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006570 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000657C 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006588 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006594                                    ; LZ
00006594 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065A0 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065AC 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065B8 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065C4                                    ; MZ
000065C4 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065D0 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065DC 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065E8 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065F4                                    ; SLZ
000065F4 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006600 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000660C 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006618 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006624                                    ; SYZ
00006624 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006630 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000663C 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006648 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006654                                    ; SBZ
00006654 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006660 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000666C 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006678 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006684                                    ; Ending
00006684 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006690 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
0000669C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066A8 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066B4                                    ; BHZ
000066B4 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066C0 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066CC 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066D8 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066E4                                    even
000066E4                            
000066E4                            ; ===========================================================================
000066E4                            
000066E4                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066E4 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066E8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066EA 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066F0 3238 D008                  		move.w	($FFFFD008).w,d1
000066F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066F8 6000 0000                  		bra.w	loc_60D0
000066FC                            ; ===========================================================================
000066FC                            
000066FC                            
000066FC                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066FC 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006700 ED08                       		lsl.b	#6,d0
00006702 E848                       		lsr.w	#4,d0
00006704 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006708 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000670C 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006710 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006714 5340                       		subq.w	#1,d0
00006716 E548                       		lsl.w	#2,d0
00006718 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000671C 6000 0000                  		bra.w	LevSz_SonicPos
00006720                            
00006720                            EndingStLocArray:
00006720                            		incbin	misc\sloc_end.bin
00006740                            		even
00006740                            		
00006740                            ; ===========================================================================
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Sonic	start location array
00006740                            ; ---------------------------------------------------------------------------
00006740                            StartLocArray:	incbin	misc\sloc_lev.bin
000067C0                            		even
000067C0                            
000067C0                            LevSz_SonicPos:
000067C0 7200                       		moveq	#0,d1
000067C2 3219                       		move.w	(a1)+,d1
000067C4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067C8 7000                       		moveq	#0,d0
000067CA 3011                       		move.w	(a1),d0
000067CC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067D0                            
000067D0                            loc_60D0:				; XREF: LevSz_ChkLamp
000067D0 0441 00A0                  		subi.w	#$A0,d1
000067D4 6400                       		bcc.s	loc_60D8
000067D6 7200                       		moveq	#0,d1
000067D8                            
000067D8                            loc_60D8:
000067D8 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067DC B242                       		cmp.w	d2,d1
000067DE 6500                       		bcs.s	loc_60E2
000067E0 3202                       		move.w	d2,d1
000067E2                            
000067E2                            loc_60E2:
000067E2 31C1 F700                  		move.w	d1,($FFFFF700).w
000067E6 0440 0060                  		subi.w	#$60,d0
000067EA 6400                       		bcc.s	loc_60EE
000067EC 7000                       		moveq	#0,d0
000067EE                            
000067EE                            loc_60EE:
000067EE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067F2 6D00                       		blt.s	loc_60F8
000067F4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067F8                            
000067F8                            loc_60F8:
000067F8 31C0 F704                  		move.w	d0,($FFFFF704).w
000067FC 6100 0000                  		bsr.w	BgScrollSpeed
00006800 7000                       		moveq	#0,d0
00006802 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006806 E508                       		lsl.b	#2,d0
00006808 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000680E 6000 0000                  		bra.w	LevSz_Unk
00006812                            
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Which	256x256	tiles contain loops or roll-tunnels
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006812                            ; loop,	loop, tunnel, tunnel
00006812                            ; ---------------------------------------------------------------------------
00006812                            LoopTileNums:	incbin	misc\loopnums.bin
00006832                            		even
00006832                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006832                            ; ITS GONJE HELP
00006832                            ; ===========================================================================
00006832                            
00006832                            LevSz_Unk:				; XREF: LevelSizeLoad
00006832 7000                       		moveq	#0,d0
00006834 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006838 E748                       		lsl.w	#3,d0
0000683A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000683E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006842 24D9                       		move.l	(a1)+,(a2)+
00006844 24D9                       		move.l	(a1)+,(a2)+
00006846 4E75                       		rts	
00006848                            ; End of function LevelSizeLoad
00006848                            
00006848                            ; ===========================================================================
00006848 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006850 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006858 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006860 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006868 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006870 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006878 0070 0100 0100 0100        		dc.l $700100, $1000100
00006880                            
00006880                            ; ---------------------------------------------------------------------------
00006880                            ; Subroutine to	set scroll speed of some backgrounds
00006880                            ; ---------------------------------------------------------------------------
00006880                            
00006880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006880                            
00006880                            
00006880                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006880 4A38 FE30                  		tst.b	($FFFFFE30).w
00006884 6600                       		bne.s	loc_6206
00006886 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000688A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000688E 31C1 F708                  		move.w	d1,($FFFFF708).w
00006892 31C1 F710                  		move.w	d1,($FFFFF710).w
00006896 31C1 F718                  		move.w	d1,($FFFFF718).w
0000689A                            
0000689A                            loc_6206:
0000689A 7400                       		moveq	#0,d2
0000689C 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068A0 D442                       		add.w	d2,d2
000068A2 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068A6 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068AA                            ; End of function BgScrollSpeed
000068AA                            
000068AA                            ; ===========================================================================
000068AA 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068AE 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068B2 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068B6 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
000068BA                            ; ===========================================================================
000068BA                            
000068BA                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068BA 6000 0000                  		bra.w	Deform_GHZ
000068BE                            ; ===========================================================================
000068BE                            
000068BE                            BgScroll_LZ:				; XREF: BgScroll_Index
000068BE E280                       		asr.l	#1,d0
000068C0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C4 4E75                       		rts	
000068C6                            ; ===========================================================================
000068C6                            
000068C6                            BgScroll_MZ:				; XREF: BgScroll_Index
000068C6 4E75                       		rts	
000068C8                            ; ===========================================================================
000068C8                            
000068C8                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068C8 E280                       		asr.l	#1,d0
000068CA 0640 00C0                  		addi.w	#$C0,d0
000068CE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068D2 4E75                       		rts	
000068D4                            ; ===========================================================================
000068D4                            
000068D4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068D4 E980                       		asl.l	#4,d0
000068D6 2400                       		move.l	d0,d2
000068D8 E380                       		asl.l	#1,d0
000068DA D082                       		add.l	d2,d0
000068DC E080                       		asr.l	#8,d0
000068DE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E6 4E75                       		rts	
000068E8                            ; ===========================================================================
000068E8                            
000068E8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068E8 E980                       		asl.l	#4,d0
000068EA E380                       		asl.l	#1,d0
000068EC E080                       		asr.l	#8,d0
000068EE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068F2 4E75                       		rts	
000068F4                            ; ===========================================================================
000068F4                            
000068F4                            BgScroll_End:				; XREF: BgScroll_Index
000068F4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068FA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006900 4E75                       		rts	
00006902                            ; ===========================================================================
00006902 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006908 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000690E 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006914 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000691A 4E75                       		rts
0000691C                            
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            ; Background layer deformation subroutines
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            
0000691C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000691C                            
0000691C                            
0000691C                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000691C 4A38 F744                  		tst.b	($FFFFF744).w
00006920 6700                       		beq.s	loc_628E
00006922 4E75                       		rts	
00006924                            ; ===========================================================================
00006924                            
00006924                            loc_628E:
00006924 4278 F754                  		clr.w	($FFFFF754).w
00006928 4278 F756                  		clr.w	($FFFFF756).w
0000692C 4278 F758                  		clr.w	($FFFFF758).w
00006930 4278 F75A                  		clr.w	($FFFFF75A).w
00006934 6100 0000                  		bsr.w	ScrollHoriz
00006938 6100 0000                  		bsr.w	ScrollVertical
0000693C 6100 0000                  		bsr.w	DynScrResizeLoad
00006940 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006946 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000694C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006952 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006958 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000695E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006964 7000                       		moveq	#0,d0
00006966 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000696A D040                       		add.w	d0,d0
0000696C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006970 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006974                            ; End of function DeformBgLayer
00006974                            
00006974                            ; ===========================================================================
00006974                            ; ---------------------------------------------------------------------------
00006974                            ; Offset index for background layer deformation	code
00006974                            ; ---------------------------------------------------------------------------
00006974 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006978 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000697C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006980 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
00006984                            ; ---------------------------------------------------------------------------
00006984                            ; Green	Hill Zone background layer deformation code
00006984                            ; ---------------------------------------------------------------------------
00006984                            
00006984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006984                            
00006984                            
00006984                            Deform_GHZ:				; XREF: Deform_Index
00006984 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006988 48C4                       		ext.l	d4
0000698A EB84                       		asl.l	#5,d4
0000698C 2204                       		move.l	d4,d1
0000698E E384                       		asl.l	#1,d4
00006990 D881                       		add.l	d1,d4
00006992 7A00                       		moveq	#0,d5
00006994 6100 0000                  		bsr.w	ScrollBlock1
00006998 6100 0000                  		bsr.w	ScrollBlock4
0000699C 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069A0 3038 F704                  		move.w	($FFFFF704).w,d0
000069A4 0240 07FF                  		andi.w	#$7FF,d0
000069A8 EA48                       		lsr.w	#5,d0
000069AA 4440                       		neg.w	d0
000069AC 0640 0026                  		addi.w	#$26,d0
000069B0 31C0 F714                  		move.w	d0,($FFFFF714).w
000069B4 3800                       		move.w	d0,d4
000069B6 6100 0000                  		bsr.w	ScrollBlock3
000069BA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069C0 323C 006F                  		move.w	#$6F,d1
000069C4 9244                       		sub.w	d4,d1
000069C6 3038 F700                  		move.w	($FFFFF700).w,d0
000069CA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069D0 6600                       		bne.s	loc_633C
000069D2 7000                       		moveq	#0,d0
000069D4                            
000069D4                            loc_633C:
000069D4 4440                       		neg.w	d0
000069D6 4840                       		swap	d0
000069D8 3038 F708                  		move.w	($FFFFF708).w,d0
000069DC 4440                       		neg.w	d0
000069DE                            
000069DE                            loc_6346:
000069DE 22C0                       		move.l	d0,(a1)+
000069E0 51C9 FFFC                  		dbf	d1,loc_6346
000069E4 323C 0027                  		move.w	#$27,d1
000069E8 3038 F710                  		move.w	($FFFFF710).w,d0
000069EC 4440                       		neg.w	d0
000069EE                            
000069EE                            loc_6356:
000069EE 22C0                       		move.l	d0,(a1)+
000069F0 51C9 FFFC                  		dbf	d1,loc_6356
000069F4 3038 F710                  		move.w	($FFFFF710).w,d0
000069F8 0640 0000                  		addi.w	#0,d0
000069FC 3438 F700                  		move.w	($FFFFF700).w,d2
00006A00 0642 FE00                  		addi.w	#-$200,d2
00006A04 9440                       		sub.w	d0,d2
00006A06 48C2                       		ext.l	d2
00006A08 E182                       		asl.l	#8,d2
00006A0A 85FC 0068                  		divs.w	#$68,d2
00006A0E 48C2                       		ext.l	d2
00006A10 E182                       		asl.l	#8,d2
00006A12 7600                       		moveq	#0,d3
00006A14 3600                       		move.w	d0,d3
00006A16 323C 0047                  		move.w	#$47,d1
00006A1A D244                       		add.w	d4,d1
00006A1C                            
00006A1C                            loc_6384:
00006A1C 3003                       		move.w	d3,d0
00006A1E 4440                       		neg.w	d0
00006A20 22C0                       		move.l	d0,(a1)+
00006A22 4843                       		swap	d3
00006A24 D682                       		add.l	d2,d3
00006A26 4843                       		swap	d3
00006A28 51C9 FFF2                  		dbf	d1,loc_6384
00006A2C 4E75                       		rts	
00006A2E                            ; End of function Deform_GHZ
00006A2E                            
00006A2E                            ; ---------------------------------------------------------------------------
00006A2E                            ; Labyrinth Zone background layer deformation code
00006A2E                            ; ---------------------------------------------------------------------------
00006A2E                            
00006A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A2E                            
00006A2E                            
00006A2E                            Deform_LZ:				; XREF: Deform_Index
00006A2E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A32 48C4                       		ext.l	d4
00006A34 EF84                       		asl.l	#7,d4
00006A36 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A3A 48C5                       		ext.l	d5
00006A3C EF85                       		asl.l	#7,d5
00006A3E 6100 0000                  		bsr.w	ScrollBlock1
00006A42 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A48 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A4C 323C 00DF                  		move.w	#$DF,d1
00006A50 3038 F700                  		move.w	($FFFFF700).w,d0
00006A54 4440                       		neg.w	d0
00006A56 4840                       		swap	d0
00006A58 3038 F708                  		move.w	($FFFFF708).w,d0
00006A5C 4440                       		neg.w	d0
00006A5E                            
00006A5E                            loc_63C6:
00006A5E 22C0                       		move.l	d0,(a1)+
00006A60 51C9 FFFC                  		dbf	d1,loc_63C6
00006A64 3038 F646                  		move.w	($FFFFF646).w,d0
00006A68 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A6C 4E75                       		rts	
00006A6E                            ; End of function Deform_LZ
00006A6E                            
00006A6E                            ; ---------------------------------------------------------------------------
00006A6E                            ; Marble Zone background layer deformation code
00006A6E                            ; ---------------------------------------------------------------------------
00006A6E                            
00006A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A6E                            
00006A6E                            
00006A6E                            Deform_MZ:				; XREF: Deform_Index
00006A6E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A72 48C4                       		ext.l	d4
00006A74 ED84                       		asl.l	#6,d4
00006A76 2204                       		move.l	d4,d1
00006A78 E384                       		asl.l	#1,d4
00006A7A D881                       		add.l	d1,d4
00006A7C 7A00                       		moveq	#0,d5
00006A7E 6100 0000                  		bsr.w	ScrollBlock1
00006A82 303C 0200                  		move.w	#$200,d0
00006A86 3238 F704                  		move.w	($FFFFF704).w,d1
00006A8A 0441 01C8                  		subi.w	#$1C8,d1
00006A8E 6500                       		bcs.s	loc_6402
00006A90 3401                       		move.w	d1,d2
00006A92 D241                       		add.w	d1,d1
00006A94 D242                       		add.w	d2,d1
00006A96 E441                       		asr.w	#2,d1
00006A98 D041                       		add.w	d1,d0
00006A9A                            
00006A9A                            loc_6402:
00006A9A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A9E 6100 0000                  		bsr.w	ScrollBlock3
00006AA2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AAC 323C 00DF                  		move.w	#$DF,d1
00006AB0 3038 F700                  		move.w	($FFFFF700).w,d0
00006AB4 4440                       		neg.w	d0
00006AB6 4840                       		swap	d0
00006AB8 3038 F708                  		move.w	($FFFFF708).w,d0
00006ABC 4440                       		neg.w	d0
00006ABE                            
00006ABE                            loc_6426:
00006ABE 22C0                       		move.l	d0,(a1)+
00006AC0 51C9 FFFC                  		dbf	d1,loc_6426
00006AC4 4E75                       		rts	
00006AC6                            ; End of function Deform_MZ
00006AC6                            
00006AC6                            ; ---------------------------------------------------------------------------
00006AC6                            ; Star Light Zone background layer deformation code
00006AC6                            ; ---------------------------------------------------------------------------
00006AC6                            
00006AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AC6                            
00006AC6                            
00006AC6                            Deform_SLZ:				; XREF: Deform_Index
00006AC6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ACA 48C4                       		ext.l	d4
00006ACC EB84                       		asl.l	#5,d4
00006ACE 2204                       		move.l	d4,d1
00006AD0 E384                       		asl.l	#1,d4
00006AD2 D881                       		add.l	d1,d4
00006AD4 7A00                       		moveq	#0,d5
00006AD6 6100 0000                  		bsr.w	ScrollBlock1
00006ADA 6100 0000                  		bsr.w	ScrollBlock3
00006ADE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AE2                            	;	move.w	($FFFFF704).w,d0
00006AE2                            	;	andi.w	#$7FF,d0
00006AE2 EA48                       		lsr.w	#5,d0
00006AE4 4440                       		neg.w	d0
00006AE6 0640 0026                  		addi.w	#$26,d0
00006AEA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AEE 3800                       		move.w	d0,d4
00006AF0                            	;	bsr.w	ScrollBlock3
00006AF0 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AF6 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006AFA                            
00006AFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AFE 4440                       		neg.w	d0			; negate (positive to negative)
00006B00 4840                       		swap	d0			; send to the left side of d0
00006B02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B06 45F8 A800                  		lea	($FFFFA800).w,a2
00006B0A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B10 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B16 3038 A800                  		move.w	($FFFFA800).w,d0
00006B1A 4440                       		neg.w	d0			; negate (positive to negative)
00006B1C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B1E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B22                            slz_DeformLoop_1:
00006B22 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B24 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B28                            
00006B28 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B2C 4440                       		neg.w	d0			; negate (positive to negative)
00006B2E 4840                       		swap	d0			; send to the left side of d0
00006B30 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B34 45F8 A800                  		lea	($FFFFA800).w,a2
00006B38 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B3E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B44 3038 A800                  		move.w	($FFFFA800).w,d0
00006B48 4440                       		neg.w	d0			; negate (positive to negative)
00006B4A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B4C 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B50                            slz_DeformLoop_2:
00006B50 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B52 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B56                            
00006B56 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B5A 4440                       		neg.w	d0			; negate (positive to negative)
00006B5C 4840                       		swap	d0			; send to the left side of d0
00006B5E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B62 45F8 A800                  		lea	($FFFFA800).w,a2
00006B66 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B6C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B72 3038 A800                  		move.w	($FFFFA800).w,d0
00006B76 4440                       		neg.w	d0			; negate (positive to negative)
00006B78 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B7A 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B7E                            slz_DeformLoop_3:
00006B7E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B80 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B84                            
00006B84 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B88 4440                       		neg.w	d0			; negate (positive to negative)
00006B8A 4840                       		swap	d0			; send to the left side of d0
00006B8C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B90 45F8 A800                  		lea	($FFFFA800).w,a2
00006B94 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B9A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BA0 3038 A800                  		move.w	($FFFFA800).w,d0
00006BA4 4440                       		neg.w	d0			; negate (positive to negative)
00006BA6 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BA8 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BAC                            slz_DeformLoop_4:
00006BAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BB2                            
00006BB2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BB6 4440                       		neg.w	d0			; negate (positive to negative)
00006BB8 4840                       		swap	d0			; send to the left side of d0
00006BBA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BBE 45F8 A800                  		lea	($FFFFA800).w,a2
00006BC2 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BC8 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BCE 3038 A800                  		move.w	($FFFFA800).w,d0
00006BD2 4440                       		neg.w	d0			; negate (positive to negative)
00006BD4 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BD6 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BDA                            slz_DeformLoop_5:
00006BDA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BDC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BE0                            
00006BE0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BE4 4440                       		neg.w	d0			; negate (positive to negative)
00006BE6 4840                       		swap	d0			; send to the left side of d0
00006BE8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BEC 4440                       		neg.w	d0			; negate (positive to negative)
00006BEE EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BF0 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BF4                            slz_DeformLoop_6:
00006BF4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BF6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006BFA                            
00006BFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BFE 4440                       		neg.w	d0			; negate (positive to negative)
00006C00 4840                       		swap	d0			; send to the left side of d0
00006C02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C06 4440                       		neg.w	d0			; negate (positive to negative)
00006C08 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C0A 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C0E                            slz_DeformLoop_7:
00006C0E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C10 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C14                            
00006C14 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C18 4440                       		neg.w	d0			; negate (positive to negative)
00006C1A 4840                       		swap	d0			; send to the left side of d0
00006C1C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C20 4440                       		neg.w	d0			; negate (positive to negative)
00006C22 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C24 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C28                            slz_DeformLoop_8:
00006C28 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C2A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C2E                            
00006C2E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C32 4440                       		neg.w	d0			; negate (positive to negative)
00006C34 4840                       		swap	d0			; send to the left side of d0
00006C36 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C3A 4440                       		neg.w	d0			; negate (positive to negative)
00006C3C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C3E 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C42                            slz_DeformLoop_9:
00006C42 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C44 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C48                            
00006C48 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C4C 4440                       		neg.w	d0			; negate (positive to negative)
00006C4E 4840                       		swap	d0			; send to the left side of d0
00006C50 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C54 4440                       		neg.w	d0			; negate (positive to negative)
00006C56 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C58 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C5C                            slz_DeformLoop_10:
00006C5C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C5E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C62                            
00006C62 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C66 4440                       		neg.w	d0			; negate (positive to negative)
00006C68 4840                       		swap	d0			; send to the left side of d0
00006C6A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C6E 4440                       		neg.w	d0			; negate (positive to negative)
00006C70 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C72 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C76                            slz_DeformLoop_11:
00006C76 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C78 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C7C                            
00006C7C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C80 4440                       		neg.w	d0			; negate (positive to negative)
00006C82 4840                       		swap	d0			; send to the left side of d0
00006C84 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C88 4440                       		neg.w	d0			; negate (positive to negative)
00006C8A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C8C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C90                            slz_DeformLoop_12:
00006C90 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C92 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C96                            
00006C96 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C9A 4440                       		neg.w	d0			; negate (positive to negative)
00006C9C 4840                       		swap	d0			; send to the left side of d0
00006C9E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA2 4440                       		neg.w	d0			; negate (positive to negative)
00006CA4 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CA6 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CAA                            slz_DeformLoop_13:
00006CAA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CAC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CB0 4E75                       		rts	
00006CB2                            ; End of function Deform_SLZ
00006CB2 4E75                       		rts	
00006CB4                            ; End of function Deform_SLZ_2
00006CB4                            
00006CB4                            ; ---------------------------------------------------------------------------
00006CB4                            ; Spring Yard Zone background layer deformation	code
00006CB4                            ; ---------------------------------------------------------------------------
00006CB4                            
00006CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CB4                            
00006CB4                            
00006CB4                            Deform_SYZ:				; XREF: Deform_Index
00006CB4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CB8 48C4                       		ext.l	d4
00006CBA ED84                       		asl.l	#6,d4
00006CBC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CC0 48C5                       		ext.l	d5
00006CC2 E985                       		asl.l	#4,d5
00006CC4 2205                       		move.l	d5,d1
00006CC6 E385                       		asl.l	#1,d5
00006CC8 DA81                       		add.l	d1,d5
00006CCA 6100 0000                  		bsr.w	ScrollBlock1
00006CCE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CD4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CD8 323C 00DF                  		move.w	#$DF,d1
00006CDC 3038 F700                  		move.w	($FFFFF700).w,d0
00006CE0 4440                       		neg.w	d0
00006CE2 4840                       		swap	d0
00006CE4 3038 F708                  		move.w	($FFFFF708).w,d0
00006CE8 4440                       		neg.w	d0
00006CEA                            
00006CEA                            loc_653C:
00006CEA 22C0                       		move.l	d0,(a1)+
00006CEC 51C9 FFFC                  		dbf	d1,loc_653C
00006CF0 4E75                       		rts	
00006CF2                            ; End of function Deform_SYZ
00006CF2                            
00006CF2                            ; ---------------------------------------------------------------------------
00006CF2                            ; Scrap	Brain Zone background layer deformation	code
00006CF2                            ; ---------------------------------------------------------------------------
00006CF2                            
00006CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CF2                            
00006CF2                            
00006CF2                            Deform_SBZ:				; XREF: Deform_Index
00006CF2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CF6 48C4                       		ext.l	d4
00006CF8 ED84                       		asl.l	#6,d4
00006CFA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CFE 48C5                       		ext.l	d5
00006D00 E985                       		asl.l	#4,d5
00006D02 E385                       		asl.l	#1,d5
00006D04 6100 0000                  		bsr.w	ScrollBlock1
00006D08 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D0E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D12 323C 00DF                  		move.w	#$DF,d1
00006D16 3038 F700                  		move.w	($FFFFF700).w,d0
00006D1A 4440                       		neg.w	d0
00006D1C 4840                       		swap	d0
00006D1E 3038 F708                  		move.w	($FFFFF708).w,d0
00006D22 4440                       		neg.w	d0
00006D24                            
00006D24                            loc_6576:
00006D24 22C0                       		move.l	d0,(a1)+
00006D26 51C9 FFFC                  		dbf	d1,loc_6576
00006D2A 4E75                       		rts	
00006D2C                            ; End of function Deform_SBZ
00006D2C                            
00006D2C                            ; ---------------------------------------------------------------------------
00006D2C                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D2C                            ; ---------------------------------------------------------------------------
00006D2C                            
00006D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D2C                            
00006D2C                            
00006D2C                            ScrollHoriz:				; XREF: DeformBgLayer
00006D2C 3838 F700                  		move.w	($FFFFF700).w,d4
00006D30 6100                       		bsr.s	ScrollHoriz2
00006D32 3038 F700                  		move.w	($FFFFF700).w,d0
00006D36 0240 0010                  		andi.w	#$10,d0
00006D3A 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D3E B300                       		eor.b	d1,d0
00006D40 6600                       		bne.s	locret_65B0
00006D42 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D48 3038 F700                  		move.w	($FFFFF700).w,d0
00006D4C 9044                       		sub.w	d4,d0
00006D4E 6A00                       		bpl.s	loc_65AA
00006D50 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D56 4E75                       		rts	
00006D58                            ; ===========================================================================
00006D58                            
00006D58                            loc_65AA:
00006D58 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006D5E                            
00006D5E                            locret_65B0:
00006D5E 4E75                       		rts	
00006D60                            ; End of function ScrollHoriz
00006D60                            
00006D60                            
00006D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D60                            
00006D60                            
00006D60                            ScrollHoriz2:				; XREF: ScrollHoriz
00006D60 3038 D008                  		move.w	($FFFFD008).w,d0
00006D64 9078 F700                  		sub.w	($FFFFF700).w,d0
00006D68 0440 0090                  		subi.w	#$90,d0
00006D6C 6500                       		bcs.s	loc_65F6
00006D6E 0440 0010                  		subi.w	#$10,d0
00006D72 6400                       		bcc.s	loc_65CC
00006D74 4278 F73A                  		clr.w	($FFFFF73A).w
00006D78 4E75                       		rts	
00006D7A                            ; ===========================================================================
00006D7A                            
00006D7A                            loc_65CC:
00006D7A 0C40 0010                  		cmpi.w	#$10,d0
00006D7E 6500                       		bcs.s	loc_65D6
00006D80 303C 0010                  		move.w	#$10,d0
00006D84                            
00006D84                            loc_65D6:
00006D84 D078 F700                  		add.w	($FFFFF700).w,d0
00006D88 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006D8C 6D00                       		blt.s	loc_65E4
00006D8E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006D92                            
00006D92                            loc_65E4:
00006D92 3200                       		move.w	d0,d1
00006D94 9278 F700                  		sub.w	($FFFFF700).w,d1
00006D98 E141                       		asl.w	#8,d1
00006D9A 31C0 F700                  		move.w	d0,($FFFFF700).w
00006D9E 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006DA2 4E75                       		rts	
00006DA4                            ; ===========================================================================
00006DA4                            
00006DA4                            loc_65F6:				; XREF: ScrollHoriz2
00006DA4 D078 F700                  		add.w	($FFFFF700).w,d0
00006DA8 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DAC 6EE4                       		bgt.s	loc_65E4
00006DAE 3038 F728                  		move.w	($FFFFF728).w,d0
00006DB2 60DE                       		bra.s	loc_65E4
00006DB4                            ; End of function ScrollHoriz2
00006DB4                            
00006DB4                            ; ===========================================================================
00006DB4 4A40                       		tst.w	d0
00006DB6 6A00                       		bpl.s	loc_6610
00006DB8 303C FFFE                  		move.w	#-2,d0
00006DBC 60E6                       		bra.s	loc_65F6
00006DBE                            ; ===========================================================================
00006DBE                            
00006DBE                            loc_6610:
00006DBE 303C 0002                  		move.w	#2,d0
00006DC2 60B6                       		bra.s	loc_65CC
00006DC4                            
00006DC4                            ; ---------------------------------------------------------------------------
00006DC4                            ; Subroutine to	scroll the level vertically as Sonic moves
00006DC4                            ; ---------------------------------------------------------------------------
00006DC4                            
00006DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC4                            
00006DC4                            
00006DC4                            ScrollVertical:				; XREF: DeformBgLayer
00006DC4 7200                       		moveq	#0,d1
00006DC6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006DCA 9078 F704                  		sub.w	($FFFFF704).w,d0
00006DCE 0838 0002 D022             		btst	#2,($FFFFD022).w
00006DD4 6700                       		beq.s	loc_662A
00006DD6 5B40                       		subq.w	#5,d0
00006DD8                            
00006DD8                            loc_662A:
00006DD8 0838 0001 D022             		btst	#1,($FFFFD022).w
00006DDE 6700                       		beq.s	loc_664A
00006DE0 0640 0020                  		addi.w	#$20,d0
00006DE4 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DE8 6500                       		bcs.s	loc_6696
00006DEA 0440 0040                  		subi.w	#$40,d0
00006DEE 6400                       		bcc.s	loc_6696
00006DF0 4A38 F75C                  		tst.b	($FFFFF75C).w
00006DF4 6600                       		bne.s	loc_66A8
00006DF6 6000                       		bra.s	loc_6656
00006DF8                            ; ===========================================================================
00006DF8                            
00006DF8                            loc_664A:
00006DF8 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DFC 6600                       		bne.s	loc_665C
00006DFE 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E02 6600                       		bne.s	loc_66A8
00006E04                            
00006E04                            loc_6656:
00006E04 4278 F73C                  		clr.w	($FFFFF73C).w
00006E08 4E75                       		rts	
00006E0A                            ; ===========================================================================
00006E0A                            
00006E0A                            loc_665C:
00006E0A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E10 6600                       		bne.s	loc_6684
00006E12 3238 D014                  		move.w	($FFFFD014).w,d1
00006E16 6A00                       		bpl.s	loc_666C
00006E18 4441                       		neg.w	d1
00006E1A                            
00006E1A                            loc_666C:
00006E1A 0C41 0800                  		cmpi.w	#$800,d1
00006E1E 6400                       		bcc.s	loc_6696
00006E20 323C 0600                  		move.w	#$600,d1
00006E24 0C40 0006                  		cmpi.w	#6,d0
00006E28 6E00                       		bgt.s	loc_66F6
00006E2A 0C40 FFFA                  		cmpi.w	#-6,d0
00006E2E 6D00                       		blt.s	loc_66C0
00006E30 6000                       		bra.s	loc_66AE
00006E32                            ; ===========================================================================
00006E32                            
00006E32                            loc_6684:
00006E32 323C 0200                  		move.w	#$200,d1
00006E36 0C40 0002                  		cmpi.w	#2,d0
00006E3A 6E00                       		bgt.s	loc_66F6
00006E3C 0C40 FFFE                  		cmpi.w	#-2,d0
00006E40 6D00                       		blt.s	loc_66C0
00006E42 6000                       		bra.s	loc_66AE
00006E44                            ; ===========================================================================
00006E44                            
00006E44                            loc_6696:
00006E44 323C 1000                  		move.w	#$1000,d1
00006E48 0C40 0010                  		cmpi.w	#$10,d0
00006E4C 6E00                       		bgt.s	loc_66F6
00006E4E 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E52 6D00                       		blt.s	loc_66C0
00006E54 6000                       		bra.s	loc_66AE
00006E56                            ; ===========================================================================
00006E56                            
00006E56                            loc_66A8:
00006E56 7000                       		moveq	#0,d0
00006E58 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E5C                            
00006E5C                            loc_66AE:
00006E5C 7200                       		moveq	#0,d1
00006E5E 3200                       		move.w	d0,d1
00006E60 D278 F704                  		add.w	($FFFFF704).w,d1
00006E64 4A40                       		tst.w	d0
00006E66 6A00 0000                  		bpl.w	loc_6700
00006E6A 6000 0000                  		bra.w	loc_66CC
00006E6E                            ; ===========================================================================
00006E6E                            
00006E6E                            loc_66C0:
00006E6E 4441                       		neg.w	d1
00006E70 48C1                       		ext.l	d1
00006E72 E181                       		asl.l	#8,d1
00006E74 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006E78 4841                       		swap	d1
00006E7A                            
00006E7A                            loc_66CC:
00006E7A B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006E7E 6E00                       		bgt.s	loc_6724
00006E80 0C41 FF00                  		cmpi.w	#-$100,d1
00006E84 6E00                       		bgt.s	loc_66F0
00006E86 0241 07FF                  		andi.w	#$7FF,d1
00006E8A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006E90 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006E96 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006E9C 6000                       		bra.s	loc_6724
00006E9E                            ; ===========================================================================
00006E9E                            
00006E9E                            loc_66F0:
00006E9E 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006EA2 6000                       		bra.s	loc_6724
00006EA4                            ; ===========================================================================
00006EA4                            
00006EA4                            loc_66F6:
00006EA4 48C1                       		ext.l	d1
00006EA6 E181                       		asl.l	#8,d1
00006EA8 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EAC 4841                       		swap	d1
00006EAE                            
00006EAE                            loc_6700:
00006EAE B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EB2 6D00                       		blt.s	loc_6724
00006EB4 0441 0800                  		subi.w	#$800,d1
00006EB8 6500                       		bcs.s	loc_6720
00006EBA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006EC0 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006EC6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006ECC 6000                       		bra.s	loc_6724
00006ECE                            ; ===========================================================================
00006ECE                            
00006ECE                            loc_6720:
00006ECE 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006ED2                            
00006ED2                            loc_6724:
00006ED2 3838 F704                  		move.w	($FFFFF704).w,d4
00006ED6 4841                       		swap	d1
00006ED8 2601                       		move.l	d1,d3
00006EDA 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006EDE E09B                       		ror.l	#8,d3
00006EE0 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006EE4 21C1 F704                  		move.l	d1,($FFFFF704).w
00006EE8 3038 F704                  		move.w	($FFFFF704).w,d0
00006EEC 0240 0010                  		andi.w	#$10,d0
00006EF0 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006EF4 B300                       		eor.b	d1,d0
00006EF6 6600                       		bne.s	locret_6766
00006EF8 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006EFE 3038 F704                  		move.w	($FFFFF704).w,d0
00006F02 9044                       		sub.w	d4,d0
00006F04 6A00                       		bpl.s	loc_6760
00006F06 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F0C 4E75                       		rts	
00006F0E                            ; ===========================================================================
00006F0E                            
00006F0E                            loc_6760:
00006F0E 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F14                            
00006F14                            locret_6766:
00006F14 4E75                       		rts	
00006F16                            ; End of function ScrollVertical
00006F16                            
00006F16                            
00006F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F16                            
00006F16                            
00006F16                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F16 2438 F708                  		move.l	($FFFFF708).w,d2
00006F1A 2002                       		move.l	d2,d0
00006F1C D084                       		add.l	d4,d0
00006F1E 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F22 2200                       		move.l	d0,d1
00006F24 4841                       		swap	d1
00006F26 0241 0010                  		andi.w	#$10,d1
00006F2A 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F2E B701                       		eor.b	d3,d1
00006F30 6600                       		bne.s	loc_679C
00006F32 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F38 9082                       		sub.l	d2,d0
00006F3A 6A00                       		bpl.s	loc_6796
00006F3C 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F42 6000                       		bra.s	loc_679C
00006F44                            ; ===========================================================================
00006F44                            
00006F44                            loc_6796:
00006F44 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F4A                            
00006F4A                            loc_679C:
00006F4A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F4E 2003                       		move.l	d3,d0
00006F50 D085                       		add.l	d5,d0
00006F52 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F56 2200                       		move.l	d0,d1
00006F58 4841                       		swap	d1
00006F5A 0241 0010                  		andi.w	#$10,d1
00006F5E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F62 B501                       		eor.b	d2,d1
00006F64 6600                       		bne.s	locret_67D0
00006F66 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006F6C 9083                       		sub.l	d3,d0
00006F6E 6A00                       		bpl.s	loc_67CA
00006F70 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006F76 4E75                       		rts	
00006F78                            ; ===========================================================================
00006F78                            
00006F78                            loc_67CA:
00006F78 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006F7E                            
00006F7E                            locret_67D0:
00006F7E 4E75                       		rts	
00006F80                            ; End of function ScrollBlock1
00006F80                            
00006F80                            
00006F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F80                            
00006F80                            
00006F80                            ScrollBlock2:				; XREF: Deform_SLZ
00006F80 2438 F708                  		move.l	($FFFFF708).w,d2
00006F84 2002                       		move.l	d2,d0
00006F86 D084                       		add.l	d4,d0
00006F88 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F8C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F90 2003                       		move.l	d3,d0
00006F92 D085                       		add.l	d5,d0
00006F94 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F98 2200                       		move.l	d0,d1
00006F9A 4841                       		swap	d1
00006F9C 0241 0010                  		andi.w	#$10,d1
00006FA0 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FA4 B501                       		eor.b	d2,d1
00006FA6 6600                       		bne.s	locret_6812
00006FA8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FAE 9083                       		sub.l	d3,d0
00006FB0 6A00                       		bpl.s	loc_680C
00006FB2 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FB8 4E75                       		rts	
00006FBA                            ; ===========================================================================
00006FBA                            
00006FBA                            loc_680C:
00006FBA 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FC0                            
00006FC0                            locret_6812:
00006FC0 4E75                       		rts	
00006FC2                            ; End of function ScrollBlock2
00006FC2                            
00006FC2                            
00006FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC2                            
00006FC2                            
00006FC2                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006FC2 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006FC6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FCA 3200                       		move.w	d0,d1
00006FCC 0241 0010                  		andi.w	#$10,d1
00006FD0 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FD4 B501                       		eor.b	d2,d1
00006FD6 6600                       		bne.s	locret_6842
00006FD8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FDE 9043                       		sub.w	d3,d0
00006FE0 6A00                       		bpl.s	loc_683C
00006FE2 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FE8 4E75                       		rts	
00006FEA                            ; ===========================================================================
00006FEA                            
00006FEA                            loc_683C:
00006FEA 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FF0                            
00006FF0                            locret_6842:
00006FF0 4E75                       		rts	
00006FF2                            ; End of function ScrollBlock3
00006FF2                            
00006FF2                            
00006FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FF2                            
00006FF2                            
00006FF2                            ScrollBlock4:				; XREF: Deform_GHZ
00006FF2 3438 F710                  		move.w	($FFFFF710).w,d2
00006FF6 3638 F714                  		move.w	($FFFFF714).w,d3
00006FFA 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006FFE 48C0                       		ext.l	d0
00007000 EF80                       		asl.l	#7,d0
00007002 D1B8 F710                  		add.l	d0,($FFFFF710).w
00007006 3038 F710                  		move.w	($FFFFF710).w,d0
0000700A 0240 0010                  		andi.w	#$10,d0
0000700E 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007012 B300                       		eor.b	d1,d0
00007014 6600                       		bne.s	locret_6884
00007016 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000701C 3038 F710                  		move.w	($FFFFF710).w,d0
00007020 9042                       		sub.w	d2,d0
00007022 6A00                       		bpl.s	loc_687E
00007024 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000702A 6000                       		bra.s	locret_6884
0000702C                            ; ===========================================================================
0000702C                            
0000702C                            loc_687E:
0000702C 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007032                            
00007032                            locret_6884:
00007032 4E75                       		rts	
00007034                            ; End of function ScrollBlock4
00007034                            
00007034                            
00007034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007034                            
00007034                            
00007034                            sub_6886:				; XREF: loc_C44
00007034 4BF9 00C0 0004             		lea	($C00004).l,a5
0000703A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007040 45F8 F756                  		lea	($FFFFF756).w,a2
00007044 47F8 F708                  		lea	($FFFFF708).w,a3
00007048 49F8 A440                  		lea	($FFFFA440).w,a4
0000704C 343C 6000                  		move.w	#$6000,d2
00007050 6100 0000                  		bsr.w	sub_6954
00007054 45F8 F758                  		lea	($FFFFF758).w,a2
00007058 47F8 F710                  		lea	($FFFFF710).w,a3
0000705C 6000 0000                  		bra.w	sub_69F4
00007060                            ; End of function sub_6886
00007060                            
00007060                            ; ---------------------------------------------------------------------------
00007060                            ; Subroutine to	display	correct	tiles as you move
00007060                            ; ---------------------------------------------------------------------------
00007060                            
00007060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007060                            
00007060                            
00007060                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007060 4BF9 00C0 0004             		lea	($C00004).l,a5
00007066 4DF9 00C0 0000             		lea	($C00000).l,a6
0000706C 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007070 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007074 49F8 A440                  		lea	($FFFFA440).w,a4
00007078 343C 6000                  		move.w	#$6000,d2
0000707C 6100 0000                  		bsr.w	sub_6954
00007080 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007084 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007088 6100 0000                  		bsr.w	sub_69F4
0000708C 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007090 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007094 49F8 A400                  		lea	($FFFFA400).w,a4
00007098 343C 4000                  		move.w	#$4000,d2
0000709C 4A12                       		tst.b	(a2)
0000709E 6700                       		beq.s	locret_6952
000070A0 0892 0000                  		bclr	#0,(a2)
000070A4 6700                       		beq.s	loc_6908
000070A6 78F0                       		moveq	#-$10,d4
000070A8 7AF0                       		moveq	#-$10,d5
000070AA 6100 0000                  		bsr.w	sub_6C20
000070AE 78F0                       		moveq	#-$10,d4
000070B0 7AF0                       		moveq	#-$10,d5
000070B2 6100 0000                  		bsr.w	sub_6AD8
000070B6                            
000070B6                            loc_6908:
000070B6 0892 0001                  		bclr	#1,(a2)
000070BA 6700                       		beq.s	loc_6922
000070BC 383C 00E0                  		move.w	#$E0,d4
000070C0 7AF0                       		moveq	#-$10,d5
000070C2 6100 0000                  		bsr.w	sub_6C20
000070C6 383C 00E0                  		move.w	#$E0,d4
000070CA 7AF0                       		moveq	#-$10,d5
000070CC 6100 0000                  		bsr.w	sub_6AD8
000070D0                            
000070D0                            loc_6922:
000070D0 0892 0002                  		bclr	#2,(a2)
000070D4 6700                       		beq.s	loc_6938
000070D6 78F0                       		moveq	#-$10,d4
000070D8 7AF0                       		moveq	#-$10,d5
000070DA 6100 0000                  		bsr.w	sub_6C20
000070DE 78F0                       		moveq	#-$10,d4
000070E0 7AF0                       		moveq	#-$10,d5
000070E2 6100 0000                  		bsr.w	sub_6B04
000070E6                            
000070E6                            loc_6938:
000070E6 0892 0003                  		bclr	#3,(a2)
000070EA 6700                       		beq.s	locret_6952
000070EC 78F0                       		moveq	#-$10,d4
000070EE 3A3C 0140                  		move.w	#$140,d5
000070F2 6100 0000                  		bsr.w	sub_6C20
000070F6 78F0                       		moveq	#-$10,d4
000070F8 3A3C 0140                  		move.w	#$140,d5
000070FC 6100 0000                  		bsr.w	sub_6B04
00007100                            
00007100                            locret_6952:
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesAsYouMove
00007102                            
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007102 4A12                       		tst.b	(a2)
00007104 6700 0000                  		beq.w	locret_69F2
00007108 0892 0000                  		bclr	#0,(a2)
0000710C 6700                       		beq.s	loc_6972
0000710E 78F0                       		moveq	#-$10,d4
00007110 7AF0                       		moveq	#-$10,d5
00007112 6100 0000                  		bsr.w	sub_6C20
00007116 78F0                       		moveq	#-$10,d4
00007118 7AF0                       		moveq	#-$10,d5
0000711A 7C1F                       		moveq	#$1F,d6
0000711C 6100 0000                  		bsr.w	sub_6ADA
00007120                            
00007120                            loc_6972:
00007120 0892 0001                  		bclr	#1,(a2)
00007124 6700                       		beq.s	loc_698E
00007126 383C 00E0                  		move.w	#$E0,d4
0000712A 7AF0                       		moveq	#-$10,d5
0000712C 6100 0000                  		bsr.w	sub_6C20
00007130 383C 00E0                  		move.w	#$E0,d4
00007134 7AF0                       		moveq	#-$10,d5
00007136 7C1F                       		moveq	#$1F,d6
00007138 6100 0000                  		bsr.w	sub_6ADA
0000713C                            
0000713C                            loc_698E:
0000713C 0892 0002                  		bclr	#2,(a2)
00007140 6700                       		beq.s	loc_69BE
00007142 78F0                       		moveq	#-$10,d4
00007144 7AF0                       		moveq	#-$10,d5
00007146 6100 0000                  		bsr.w	sub_6C20
0000714A 78F0                       		moveq	#-$10,d4
0000714C 7AF0                       		moveq	#-$10,d5
0000714E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007152 322B 0004                  		move.w	4(a3),d1
00007156 0241 FFF0                  		andi.w	#-$10,d1
0000715A 9C41                       		sub.w	d1,d6
0000715C 6D00                       		blt.s	loc_69BE
0000715E E84E                       		lsr.w	#4,d6
00007160 0C46 000F                  		cmpi.w	#$F,d6
00007164 6500                       		bcs.s	loc_69BA
00007166 7C0F                       		moveq	#$F,d6
00007168                            
00007168                            loc_69BA:
00007168 6100 0000                  		bsr.w	sub_6B06
0000716C                            
0000716C                            loc_69BE:
0000716C 0892 0003                  		bclr	#3,(a2)
00007170 6700                       		beq.s	locret_69F2
00007172 78F0                       		moveq	#-$10,d4
00007174 3A3C 0140                  		move.w	#$140,d5
00007178 6100 0000                  		bsr.w	sub_6C20
0000717C 78F0                       		moveq	#-$10,d4
0000717E 3A3C 0140                  		move.w	#$140,d5
00007182 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007186 322B 0004                  		move.w	4(a3),d1
0000718A 0241 FFF0                  		andi.w	#-$10,d1
0000718E 9C41                       		sub.w	d1,d6
00007190 6D00                       		blt.s	locret_69F2
00007192 E84E                       		lsr.w	#4,d6
00007194 0C46 000F                  		cmpi.w	#$F,d6
00007198 6500                       		bcs.s	loc_69EE
0000719A 7C0F                       		moveq	#$F,d6
0000719C                            
0000719C                            loc_69EE:
0000719C 6100 0000                  		bsr.w	sub_6B06
000071A0                            
000071A0                            locret_69F2:
000071A0 4E75                       		rts	
000071A2                            ; End of function sub_6954
000071A2                            
000071A2                            
000071A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071A2                            
000071A2                            
000071A2                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000071A2 4A12                       		tst.b	(a2)
000071A4 6700 0000                  		beq.w	locret_6A80
000071A8 0892 0002                  		bclr	#2,(a2)
000071AC 6700                       		beq.s	loc_6A3E
000071AE 0C53 0010                  		cmpi.w	#$10,(a3)
000071B2 6500                       		bcs.s	loc_6A3E
000071B4 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071B8 322B 0004                  		move.w	4(a3),d1
000071BC 0241 FFF0                  		andi.w	#-$10,d1
000071C0 9841                       		sub.w	d1,d4
000071C2 3F04                       		move.w	d4,-(sp)
000071C4 7AF0                       		moveq	#-$10,d5
000071C6 6100 0000                  		bsr.w	sub_6C20
000071CA 381F                       		move.w	(sp)+,d4
000071CC 7AF0                       		moveq	#-$10,d5
000071CE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071D2 322B 0004                  		move.w	4(a3),d1
000071D6 0241 FFF0                  		andi.w	#-$10,d1
000071DA 9C41                       		sub.w	d1,d6
000071DC 6D00                       		blt.s	loc_6A3E
000071DE E84E                       		lsr.w	#4,d6
000071E0 0446 000E                  		subi.w	#$E,d6
000071E4 6400                       		bcc.s	loc_6A3E
000071E6 4446                       		neg.w	d6
000071E8 6100 0000                  		bsr.w	sub_6B06
000071EC                            
000071EC                            loc_6A3E:
000071EC 0892 0003                  		bclr	#3,(a2)
000071F0 6700                       		beq.s	locret_6A80
000071F2 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071F6 322B 0004                  		move.w	4(a3),d1
000071FA 0241 FFF0                  		andi.w	#-$10,d1
000071FE 9841                       		sub.w	d1,d4
00007200 3F04                       		move.w	d4,-(sp)
00007202 3A3C 0140                  		move.w	#$140,d5
00007206 6100 0000                  		bsr.w	sub_6C20
0000720A 381F                       		move.w	(sp)+,d4
0000720C 3A3C 0140                  		move.w	#$140,d5
00007210 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007214 322B 0004                  		move.w	4(a3),d1
00007218 0241 FFF0                  		andi.w	#-$10,d1
0000721C 9C41                       		sub.w	d1,d6
0000721E 6D00                       		blt.s	locret_6A80
00007220 E84E                       		lsr.w	#4,d6
00007222 0446 000E                  		subi.w	#$E,d6
00007226 6400                       		bcc.s	locret_6A80
00007228 4446                       		neg.w	d6
0000722A 6100 0000                  		bsr.w	sub_6B06
0000722E                            
0000722E                            locret_6A80:
0000722E 4E75                       		rts	
00007230                            ; End of function sub_69F4
00007230                            
00007230                            ; ===========================================================================
00007230 4A12                       		tst.b	(a2)
00007232 6700                       		beq.s	locret_6AD6
00007234 0892 0002                  		bclr	#2,(a2)
00007238 6700                       		beq.s	loc_6AAC
0000723A 383C 00D0                  		move.w	#$D0,d4
0000723E 322B 0004                  		move.w	4(a3),d1
00007242 0241 FFF0                  		andi.w	#-$10,d1
00007246 9841                       		sub.w	d1,d4
00007248 3F04                       		move.w	d4,-(sp)
0000724A 7AF0                       		moveq	#-$10,d5
0000724C 6100 0000                  		bsr.w	sub_6C3C
00007250 381F                       		move.w	(sp)+,d4
00007252 7AF0                       		moveq	#-$10,d5
00007254 7C02                       		moveq	#2,d6
00007256 6100 0000                  		bsr.w	sub_6B06
0000725A                            
0000725A                            loc_6AAC:
0000725A 0892 0003                  		bclr	#3,(a2)
0000725E 6700                       		beq.s	locret_6AD6
00007260 383C 00D0                  		move.w	#$D0,d4
00007264 322B 0004                  		move.w	4(a3),d1
00007268 0241 FFF0                  		andi.w	#-$10,d1
0000726C 9841                       		sub.w	d1,d4
0000726E 3F04                       		move.w	d4,-(sp)
00007270 3A3C 0140                  		move.w	#$140,d5
00007274 6100 0000                  		bsr.w	sub_6C3C
00007278 381F                       		move.w	(sp)+,d4
0000727A 3A3C 0140                  		move.w	#$140,d5
0000727E 7C02                       		moveq	#2,d6
00007280 6100 0000                  		bsr.w	sub_6B06
00007284                            
00007284                            locret_6AD6:
00007284 4E75                       		rts	
00007286                            
00007286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007286                            
00007286                            
00007286                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007286 7C15                       		moveq	#$15,d6
00007288                            ; End of function sub_6AD8
00007288                            
00007288                            
00007288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007288                            
00007288                            
00007288                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007288 2E3C 0080 0000             		move.l	#$800000,d7
0000728E 2200                       		move.l	d0,d1
00007290                            
00007290                            loc_6AE2:
00007290 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007294 6100 0000                  		bsr.w	sub_6BD6
00007298 2001                       		move.l	d1,d0
0000729A 6100 0000                  		bsr.w	sub_6B32
0000729E 5801                       		addq.b	#4,d1
000072A0 0201 007F                  		andi.b	#$7F,d1
000072A4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072A8 0645 0010                  		addi.w	#$10,d5
000072AC 51CE FFE2                  		dbf	d6,loc_6AE2
000072B0 4E75                       		rts	
000072B2                            ; End of function sub_6ADA
000072B2                            
000072B2                            
000072B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B2                            
000072B2                            
000072B2                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072B2 7C0F                       		moveq	#$F,d6
000072B4                            ; End of function sub_6B04
000072B4                            
000072B4                            
000072B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B4                            
000072B4                            
000072B4                            sub_6B06:				; XREF: sub_6954
000072B4 2E3C 0080 0000             		move.l	#$800000,d7
000072BA 2200                       		move.l	d0,d1
000072BC                            
000072BC                            loc_6B0E:
000072BC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072C0 6100 0000                  		bsr.w	sub_6BD6
000072C4 2001                       		move.l	d1,d0
000072C6 6100 0000                  		bsr.w	sub_6B32
000072CA 0641 0100                  		addi.w	#$100,d1
000072CE 0241 0FFF                  		andi.w	#$FFF,d1
000072D2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072D6 0644 0010                  		addi.w	#$10,d4
000072DA 51CE FFE0                  		dbf	d6,loc_6B0E
000072DE 4E75                       		rts	
000072E0                            ; End of function sub_6B06
000072E0                            
000072E0                            
000072E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072E0                            
000072E0                            
000072E0                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000072E0 8042                       		or.w	d2,d0
000072E2 4840                       		swap	d0
000072E4 0810 0004                  		btst	#4,(a0)
000072E8 6600                       		bne.s	loc_6B6E
000072EA 0810 0003                  		btst	#3,(a0)
000072EE 6600                       		bne.s	loc_6B4E
000072F0 2A80                       		move.l	d0,(a5)
000072F2 2C99                       		move.l	(a1)+,(a6)
000072F4 D087                       		add.l	d7,d0
000072F6 2A80                       		move.l	d0,(a5)
000072F8 2C99                       		move.l	(a1)+,(a6)
000072FA 4E75                       		rts	
000072FC                            ; ===========================================================================
000072FC                            
000072FC                            loc_6B4E:
000072FC 2A80                       		move.l	d0,(a5)
000072FE 2819                       		move.l	(a1)+,d4
00007300 0A84 0800 0800             		eori.l	#$8000800,d4
00007306 4844                       		swap	d4
00007308 2C84                       		move.l	d4,(a6)
0000730A D087                       		add.l	d7,d0
0000730C 2A80                       		move.l	d0,(a5)
0000730E 2819                       		move.l	(a1)+,d4
00007310 0A84 0800 0800             		eori.l	#$8000800,d4
00007316 4844                       		swap	d4
00007318 2C84                       		move.l	d4,(a6)
0000731A 4E75                       		rts	
0000731C                            ; ===========================================================================
0000731C                            
0000731C                            loc_6B6E:
0000731C 0810 0003                  		btst	#3,(a0)
00007320 6600                       		bne.s	loc_6B90
00007322 2A80                       		move.l	d0,(a5)
00007324 2A19                       		move.l	(a1)+,d5
00007326 2819                       		move.l	(a1)+,d4
00007328 0A84 1000 1000             		eori.l	#$10001000,d4
0000732E 2C84                       		move.l	d4,(a6)
00007330 D087                       		add.l	d7,d0
00007332 2A80                       		move.l	d0,(a5)
00007334 0A85 1000 1000             		eori.l	#$10001000,d5
0000733A 2C85                       		move.l	d5,(a6)
0000733C 4E75                       		rts	
0000733E                            ; ===========================================================================
0000733E                            
0000733E                            loc_6B90:
0000733E 2A80                       		move.l	d0,(a5)
00007340 2A19                       		move.l	(a1)+,d5
00007342 2819                       		move.l	(a1)+,d4
00007344 0A84 1800 1800             		eori.l	#$18001800,d4
0000734A 4844                       		swap	d4
0000734C 2C84                       		move.l	d4,(a6)
0000734E D087                       		add.l	d7,d0
00007350 2A80                       		move.l	d0,(a5)
00007352 0A85 1800 1800             		eori.l	#$18001800,d5
00007358 4845                       		swap	d5
0000735A 2C85                       		move.l	d5,(a6)
0000735C 4E75                       		rts	
0000735E                            ; End of function sub_6B32
0000735E                            
0000735E                            ; ===========================================================================
0000735E 4E75                       		rts	
00007360                            ; ===========================================================================
00007360 2A80                       		move.l	d0,(a5)
00007362 3A3C 2000                  		move.w	#$2000,d5
00007366 3819                       		move.w	(a1)+,d4
00007368 D845                       		add.w	d5,d4
0000736A 3C84                       		move.w	d4,(a6)
0000736C 3819                       		move.w	(a1)+,d4
0000736E D845                       		add.w	d5,d4
00007370 3C84                       		move.w	d4,(a6)
00007372 D087                       		add.l	d7,d0
00007374 2A80                       		move.l	d0,(a5)
00007376 3819                       		move.w	(a1)+,d4
00007378 D845                       		add.w	d5,d4
0000737A 3C84                       		move.w	d4,(a6)
0000737C 3819                       		move.w	(a1)+,d4
0000737E D845                       		add.w	d5,d4
00007380 3C84                       		move.w	d4,(a6)
00007382 4E75                       		rts	
00007384                            
00007384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007384                            
00007384                            
00007384                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007384 43F8 B000                  		lea	($FFFFB000).w,a1
00007388 D86B 0004                  		add.w	4(a3),d4
0000738C DA53                       		add.w	(a3),d5
0000738E 3604                       		move.w	d4,d3
00007390 E24B                       		lsr.w	#1,d3
00007392 0243 0380                  		andi.w	#$380,d3
00007396 E64D                       		lsr.w	#3,d5
00007398 3005                       		move.w	d5,d0
0000739A EA48                       		lsr.w	#5,d0
0000739C 0240 007F                  		andi.w	#$7F,d0
000073A0 D043                       		add.w	d3,d0
000073A2 76FF                       		moveq	#-1,d3
000073A4 1634 0000                  		move.b	(a4,d0.w),d3
000073A8 6700                       		beq.s	locret_6C1E
000073AA 5303                       		subq.b	#1,d3
000073AC 0243 007F                  		andi.w	#$7F,d3
000073B0 EE5B                       		ror.w	#7,d3
000073B2 D844                       		add.w	d4,d4
000073B4 0244 01E0                  		andi.w	#$1E0,d4
000073B8 0245 001E                  		andi.w	#$1E,d5
000073BC D644                       		add.w	d4,d3
000073BE D645                       		add.w	d5,d3
000073C0 2043                       		movea.l	d3,a0
000073C2 3610                       		move.w	(a0),d3
000073C4 0243 03FF                  		andi.w	#$3FF,d3
000073C8 E74B                       		lsl.w	#3,d3
000073CA D2C3                       		adda.w	d3,a1
000073CC                            
000073CC                            locret_6C1E:
000073CC 4E75                       		rts	
000073CE                            ; End of function sub_6BD6
000073CE                            
000073CE                            
000073CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073CE                            
000073CE                            
000073CE                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000073CE D86B 0004                  		add.w	4(a3),d4
000073D2 DA53                       		add.w	(a3),d5
000073D4 0244 00F0                  		andi.w	#$F0,d4
000073D8 0245 01F0                  		andi.w	#$1F0,d5
000073DC E94C                       		lsl.w	#4,d4
000073DE E44D                       		lsr.w	#2,d5
000073E0 D845                       		add.w	d5,d4
000073E2 7003                       		moveq	#3,d0
000073E4 4840                       		swap	d0
000073E6 3004                       		move.w	d4,d0
000073E8 4E75                       		rts	
000073EA                            ; End of function sub_6C20
000073EA                            
000073EA                            
000073EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073EA                            ; not used
000073EA                            
000073EA                            
000073EA                            sub_6C3C:
000073EA D86B 0004                  		add.w	4(a3),d4
000073EE DA53                       		add.w	(a3),d5
000073F0 0244 00F0                  		andi.w	#$F0,d4
000073F4 0245 01F0                  		andi.w	#$1F0,d5
000073F8 E94C                       		lsl.w	#4,d4
000073FA E44D                       		lsr.w	#2,d5
000073FC D845                       		add.w	d5,d4
000073FE 7002                       		moveq	#2,d0
00007400 4840                       		swap	d0
00007402 3004                       		move.w	d4,d0
00007404 4E75                       		rts	
00007406                            ; End of function sub_6C3C
00007406                            
00007406                            ; ---------------------------------------------------------------------------
00007406                            ; Subroutine to	load tiles as soon as the level	appears
00007406                            ; ---------------------------------------------------------------------------
00007406                            
00007406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007406                            
00007406                            
00007406                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007406 4BF9 00C0 0004             		lea	($C00004).l,a5
0000740C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007412 47F8 F700                  		lea	($FFFFF700).w,a3
00007416 49F8 A400                  		lea	($FFFFA400).w,a4
0000741A 343C 4000                  		move.w	#$4000,d2
0000741E 6100                       		bsr.s	LoadTilesFromStart2
00007420 47F8 F708                  		lea	($FFFFF708).w,a3
00007424 49F8 A440                  		lea	($FFFFA440).w,a4
00007428 343C 6000                  		move.w	#$6000,d2
0000742C                            ; End of function LoadTilesFromStart
0000742C                            
0000742C                            
0000742C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000742C                            
0000742C                            
0000742C                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000742C 78F0                       		moveq	#-$10,d4
0000742E 7C0F                       		moveq	#$F,d6
00007430                            
00007430                            loc_6C82:
00007430 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007434 7A00                       		moveq	#0,d5
00007436 3204                       		move.w	d4,d1
00007438 6100 FF94                  		bsr.w	sub_6C20
0000743C 3801                       		move.w	d1,d4
0000743E 7A00                       		moveq	#0,d5
00007440 7C1F                       		moveq	#$1F,d6
00007442 6100 FE44                  		bsr.w	sub_6ADA
00007446 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000744A 0644 0010                  		addi.w	#$10,d4
0000744E 51CE FFE0                  		dbf	d6,loc_6C82
00007452 4E75                       		rts	
00007454                            ; End of function LoadTilesFromStart2
00007454                            
00007454                            ; ---------------------------------------------------------------------------
00007454                            ; Main Load Block loading subroutine
00007454                            ; ---------------------------------------------------------------------------
00007454                            
00007454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007454                            
00007454                            
00007454                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007454 7000                       		moveq	#0,d0
00007456 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000745A E948                       		lsl.w	#4,d0
0000745C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007462 45F2 0000                  		lea	(a2,d0.w),a2
00007466 2F0A                       		move.l	a2,-(sp)
00007468 588A                       		addq.l	#4,a2
0000746A 205A                       		movea.l	(a2)+,a0
0000746C 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007470 303C 0000                  		move.w	#0,d0
00007474 6100 A4A6                  		bsr.w	EniDec
00007478 205A                       		movea.l	(a2)+,a0
0000747A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007480 6100 A618                  		bsr.w	KosDec
00007484 6100 0000                  		bsr.w	LevelLayoutLoad
00007488 301A                       		move.w	(a2)+,d0
0000748A 3012                       		move.w	(a2),d0
0000748C 0240 00FF                  		andi.w	#$FF,d0
00007490 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007496 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007498 700C                       		moveq	#$C,d0		; use SB3 pallet
0000749A                            
0000749A                            MLB_ChkSBZPal:
0000749A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000074A0 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000074A2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074A8 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074AA                            
000074AA                            MLB_UsePal0E:
000074AA 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074AC                            
000074AC                            MLB_NormalPal:
000074AC 6100 AE18                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074B0 245F                       		movea.l	(sp)+,a2
000074B2 584A                       		addq.w	#4,a2
000074B4 7000                       		moveq	#0,d0
000074B6 1012                       		move.b	(a2),d0
000074B8 6700                       		beq.s	locret_6D10
000074BA 6100 A2C2                  		bsr.w	LoadPLC		; load pattern load cues
000074BE                            
000074BE                            locret_6D10:
000074BE 4E75                       		rts	
000074C0                            ; End of function MainLoadBlockLoad
000074C0                            
000074C0                            ; ---------------------------------------------------------------------------
000074C0                            ; Level	layout loading subroutine
000074C0                            ; ---------------------------------------------------------------------------
000074C0                            
000074C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074C0                            
000074C0                            
000074C0                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000074C0 47F8 A400                  		lea	($FFFFA400).w,a3
000074C4 323C 01FF                  		move.w	#$1FF,d1
000074C8 7000                       		moveq	#0,d0
000074CA                            
000074CA                            LevLoad_ClrRam:
000074CA 26C0                       		move.l	d0,(a3)+
000074CC 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000074D0                            
000074D0 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000074D4 7200                       		moveq	#0,d1
000074D6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000074DA 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000074DE 7202                       		moveq	#2,d1
000074E0                            ; End of function LevelLayoutLoad
000074E0                            
000074E0                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000074E0                            
000074E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074E0                            
000074E0                            
000074E0                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000074E0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000074E4 ED08                       		lsl.b	#6,d0
000074E6 EA48                       		lsr.w	#5,d0
000074E8 3400                       		move.w	d0,d2
000074EA D040                       		add.w	d0,d0
000074EC D042                       		add.w	d2,d0
000074EE D041                       		add.w	d1,d0
000074F0 43F9 0000 0000             		lea	(Level_Index).l,a1
000074F6 3031 0000                  		move.w	(a1,d0.w),d0
000074FA 43F1 0000                  		lea	(a1,d0.w),a1
000074FE 7200                       		moveq	#0,d1
00007500 3401                       		move.w	d1,d2
00007502 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007504 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007506                            
00007506                            LevLoad_NumRows:
00007506 3001                       		move.w	d1,d0
00007508 204B                       		movea.l	a3,a0
0000750A                            
0000750A                            LevLoad_Row:
0000750A 10D9                       		move.b	(a1)+,(a0)+
0000750C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007510 47EB 0080                  		lea	$80(a3),a3	; do next row
00007514 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007518 4E75                       		rts	
0000751A                            ; End of function LevelLayoutLoad2
0000751A                            
0000751A                            ; ---------------------------------------------------------------------------
0000751A                            ; Dynamic screen resize	loading	subroutine
0000751A                            ; ---------------------------------------------------------------------------
0000751A                            
0000751A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000751A                            
0000751A                            
0000751A                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000751A 7000                       		moveq	#0,d0
0000751C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007520 D040                       		add.w	d0,d0
00007522 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007526 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000752A 7202                       		moveq	#2,d1
0000752C 3038 F726                  		move.w	($FFFFF726).w,d0
00007530 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007534 6700                       		beq.s	locret_6DAA
00007536 6400                       		bcc.s	loc_6DAC
00007538 4441                       		neg.w	d1
0000753A 3038 F704                  		move.w	($FFFFF704).w,d0
0000753E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007542 6300                       		bls.s	loc_6DA0
00007544 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007548 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000754E                            
0000754E                            loc_6DA0:
0000754E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007552 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007558                            
00007558                            locret_6DAA:
00007558 4E75                       		rts	
0000755A                            ; ===========================================================================
0000755A                            
0000755A                            loc_6DAC:				; XREF: DynScrResizeLoad
0000755A 3038 F704                  		move.w	($FFFFF704).w,d0
0000755E 5040                       		addq.w	#8,d0
00007560 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007564 6500                       		bcs.s	loc_6DC4
00007566 0838 0001 D022             		btst	#1,($FFFFD022).w
0000756C 6700                       		beq.s	loc_6DC4
0000756E D241                       		add.w	d1,d1
00007570 D241                       		add.w	d1,d1
00007572                            
00007572                            loc_6DC4:
00007572 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007576 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000757C 4E75                       		rts	
0000757E                            ; End of function DynScrResizeLoad
0000757E                            
0000757E                            ; ===========================================================================
0000757E                            ; ---------------------------------------------------------------------------
0000757E                            ; Offset index for dynamic screen resizing
0000757E                            ; ---------------------------------------------------------------------------
0000757E 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007582 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007586 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000758A 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
0000758E                            ; ===========================================================================
0000758E                            ; ---------------------------------------------------------------------------
0000758E                            ; Green	Hill Zone dynamic screen resizing
0000758E                            ; ---------------------------------------------------------------------------
0000758E                            
0000758E                            Resize_GHZ:				; XREF: Resize_Index
0000758E 7000                       		moveq	#0,d0
00007590 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007594 D040                       		add.w	d0,d0
00007596 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000759A 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000759E                            ; ===========================================================================
0000759E 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000075A0 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000075A2 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000075A4                            ; ===========================================================================
000075A4                            
000075A4                            Resize_GHZ1:
000075A4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075AA 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075B0 6500                       		bcs.s	locret_6E08	; if not, branch
000075B2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075B8                            
000075B8                            locret_6E08:
000075B8 4E75                       		rts	
000075BA                            ; ===========================================================================
000075BA                            
000075BA                            Resize_GHZ2:
000075BA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000075C0 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000075C6 6500                       		bcs.s	locret_6E3A
000075C8 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000075CE 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000075D4 6500                       		bcs.s	locret_6E3A
000075D6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000075DC 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_6E3A
000075E4 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
000075EA 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
000075F0 6500                       		bcs.s	locret_6E3A
000075F2 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000075F8                            		
000075F8                            locret_6E3A:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_GHZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000760A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000760C 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_GHZ3main:
0000760E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007614 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000761A 6500                       		bcs.s	locret_6E96
0000761C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007622 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007628 6500                       		bcs.s	locret_6E96
0000762A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007630 6500                       		bcs.s	loc_6E98
00007632 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007638 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000763E 6400                       		bcc.s	loc_6E8E
00007640 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007646 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000764C                            
0000764C                            loc_6E8E:
0000764C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007652 6400                       		bcc.s	loc_6E98
00007654                            
00007654                            locret_6E96:
00007654 4E75                       		rts	
00007656                            ; ===========================================================================
00007656                            
00007656                            loc_6E98:
00007656 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000765C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007660 4E75                       		rts	
00007662                            ; ===========================================================================
00007662                            
00007662                            Resize_GHZ3boss:
00007662 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007668 6400                       		bcc.s	loc_6EB0
0000766A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000766E                            
0000766E                            loc_6EB0:
0000766E 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007674 6500                       		bcs.s	locret_6EE8
00007676 6100 0000                  		bsr.w	SingleObjLoad
0000767A 6600                       		bne.s	loc_6ED0
0000767C 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007680 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007686 337C 0280 000C             		move.w	#$280,$C(a1)
0000768C                            
0000768C                            loc_6ED0:
0000768C 303C 008C                  		move.w	#$8C,d0
00007690 6100 9F02                  		bsr.w	PlaySound	; play boss music
00007694 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000769A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000769E 7011                       		moveq	#$11,d0
000076A0 6000 A0DC                  		bra.w	LoadPLC		; load boss patterns
000076A4                            ; ===========================================================================
000076A4                            
000076A4                            locret_6EE8:
000076A4 4E75                       		rts	
000076A6                            ; ===========================================================================
000076A6                            
000076A6                            Resize_GHZ3end:
000076A6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076AC 4E75                       		rts	
000076AE                            ; ===========================================================================
000076AE                            ; ---------------------------------------------------------------------------
000076AE                            ; Labyrinth Zone dynamic screen	resizing
000076AE                            ; ---------------------------------------------------------------------------
000076AE                            
000076AE                            Resize_LZ:				; XREF: Resize_Index
000076AE 7000                       		moveq	#0,d0
000076B0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076B4 D040                       		add.w	d0,d0
000076B6 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076BA 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000076BE                            ; ===========================================================================
000076BE 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000076C0 0000                       		dc.w Resize_LZ12-Resize_LZx
000076C2 0000                       		dc.w Resize_LZ3-Resize_LZx
000076C4 0000                       		dc.w Resize_SBZ3-Resize_LZx
000076C6                            ; ===========================================================================
000076C6                            
000076C6                            Resize_LZ12:
000076C6 4E75                       		rts	
000076C8                            ; ===========================================================================
000076C8                            
000076C8                            Resize_LZ3:
000076C8 7000                       		moveq	#0,d0
000076CA 1038 F742                  		move.b	($FFFFF742).w,d0
000076CE 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000076D2 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000076D6                            ; ===========================================================================
000076D6                            off_6E4A2:	
000076D6 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000076D8 0000                       		dc.w Resize_LZ3end-off_6E4A2
000076DA                            ; ===========================================================================
000076DA                            Resize_LZ3boss:
000076DA 4A38 F742                  		tst.b	($FFFFF742).w
000076DE 6600                       		bne.s	locret_6F62
000076E0 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000076E6 6500                       		bcs.s	locret_6F62
000076E8 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000076EE 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000076F4                            
000076F4 6100 0000                  		bsr.w	SingleObjLoad
000076F8 6600                       		bne.s	loc_6F4A
000076FA 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000076FE 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007704 337C 06E0 000C             		move.w	#$6E0,$C(a1)
0000770A                            loc_6F4A:
0000770A 303C 008C                  		move.w	#$8C,d0
0000770E 6100 9E84                  		bsr.w	PlaySound	; play boss music
00007712 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007718 5438 F742                  		addq.b	#2,($FFFFF742).w
0000771C 7022                       		moveq	#$22,d0
0000771E 6000 A05E                  		bra.w	LoadPLC		; load boss patterns
00007722                            ; ===========================================================================
00007722                            
00007722                            locret_6F62:
00007722 4E75                       		rts	
00007724                            ; ===========================================================================
00007724                            
00007724                            Resize_LZ3end:
00007724 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000772A 4E75                       		rts	
0000772C                            ; ===========================================================================
0000772C                            
0000772C                            Resize_SBZ3:
0000772C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007732 6500                       		bcs.s	locret_6F8C
00007734 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000773A 6400                       		bcc.s	locret_6F8C	; if not, branch
0000773C 4238 FE30                  		clr.b	($FFFFFE30).w
00007740 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007746 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000774C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007752                            
00007752                            locret_6F8C:
00007752 4E75                       		rts	
00007754                            ; ===========================================================================
00007754                            ; ---------------------------------------------------------------------------
00007754                            ; Marble Zone dynamic screen resizing
00007754                            ; ---------------------------------------------------------------------------
00007754                            
00007754                            Resize_MZ:				; XREF: Resize_Index
00007754 7000                       		moveq	#0,d0
00007756 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000775A D040                       		add.w	d0,d0
0000775C 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007760 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007764                            ; ===========================================================================
00007764 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007766 0000                       		dc.w Resize_MZ2-Resize_MZx
00007768 0000                       		dc.w Resize_MZ3-Resize_MZx
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_MZ1:
0000776A 7000                       		moveq	#0,d0
0000776C 1038 F742                  		move.b	($FFFFF742).w,d0
00007770 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007774 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007778                            ; ===========================================================================
00007778 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000777A 0000                       		dc.w loc_6FEA-off_6FB2
0000777C 0000                       		dc.w loc_702E-off_6FB2
0000777E 0000                       		dc.w loc_7050-off_6FB2
00007780                            ; ===========================================================================
00007780                            
00007780                            loc_6FBA:
00007780 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007786 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000778C 6500                       		bcs.s	locret_6FE8
0000778E 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007794 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000779A 6500                       		bcs.s	locret_6FE8
0000779C 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077A2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077A8 6500                       		bcs.s	locret_6FE8
000077AA 5438 F742                  		addq.b	#2,($FFFFF742).w
000077AE                            
000077AE                            locret_6FE8:
000077AE 4E75                       		rts	
000077B0                            ; ===========================================================================
000077B0                            
000077B0                            loc_6FEA:
000077B0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077B6 6400                       		bcc.s	loc_6FF8
000077B8 5538 F742                  		subq.b	#2,($FFFFF742).w
000077BC 4E75                       		rts	
000077BE                            ; ===========================================================================
000077BE                            
000077BE                            loc_6FF8:
000077BE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000077C4 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000077CA 6400                       		bcc.s	locret_702C
000077CC 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000077D2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077D8 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000077DE 6400                       		bcc.s	locret_702C
000077E0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000077E6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077EC 6500                       		bcs.s	locret_702C
000077EE 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F2                            
000077F2                            locret_702C:
000077F2 4E75                       		rts	
000077F4                            ; ===========================================================================
000077F4                            
000077F4                            loc_702E:
000077F4 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077FA 6400                       		bcc.s	loc_703C
000077FC 5538 F742                  		subq.b	#2,($FFFFF742).w
00007800 4E75                       		rts	
00007802                            ; ===========================================================================
00007802                            
00007802                            loc_703C:
00007802 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007808 6500                       		bcs.s	locret_704E
0000780A 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007810 5438 F742                  		addq.b	#2,($FFFFF742).w
00007814                            
00007814                            locret_704E:
00007814 4E75                       		rts	
00007816                            ; ===========================================================================
00007816                            
00007816                            loc_7050:
00007816 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000781C 6500                       		bcs.s	locret_7072
0000781E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007824 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000782A 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007830 6500                       		bcs.s	locret_7072
00007832 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007838                            
00007838                            locret_7072:
00007838 4E75                       		rts	
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            Resize_MZ2:
0000783A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007840 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007846 6500                       		bcs.s	locret_7088
00007848 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000784E                            
0000784E                            locret_7088:
0000784E 4E75                       		rts	
00007850                            ; ===========================================================================
00007850                            
00007850                            Resize_MZ3:
00007850 7000                       		moveq	#0,d0
00007852 1038 F742                  		move.b	($FFFFF742).w,d0
00007856 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000785A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000785E                            ; ===========================================================================
0000785E 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007860 0000                       		dc.w Resize_MZ3end-off_7098
00007862                            ; ===========================================================================
00007862                            
00007862                            Resize_MZ3boss:
00007862 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007868 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000786E 6500                       		bcs.s	locret_70E8
00007870 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007876 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000787C 6500                       		bcs.s	locret_70E8
0000787E 6100 0000                  		bsr.w	SingleObjLoad
00007882 6600                       		bne.s	loc_70D0
00007884 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007888 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000788E 337C 022C 000C             		move.w	#$22C,$C(a1)
00007894                            
00007894                            loc_70D0:
00007894 303C 008C                  		move.w	#$8C,d0
00007898 6100 9CFA                  		bsr.w	PlaySound	; play boss music
0000789C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000078A6 7011                       		moveq	#$11,d0
000078A8 6000 9ED4                  		bra.w	LoadPLC		; load boss patterns
000078AC                            ; ===========================================================================
000078AC                            
000078AC                            locret_70E8:
000078AC 4E75                       		rts	
000078AE                            ; ===========================================================================
000078AE                            
000078AE                            Resize_MZ3end:
000078AE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078B4 4E75                       		rts	
000078B6                            ; ===========================================================================
000078B6                            ; ---------------------------------------------------------------------------
000078B6                            ; Star Light Zone dynamic screen resizing
000078B6                            ; ---------------------------------------------------------------------------
000078B6                            
000078B6                            Resize_SLZ:				; XREF: Resize_Index
000078B6 7000                       		moveq	#0,d0
000078B8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078BC D040                       		add.w	d0,d0
000078BE 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000078C2 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000078C6                            ; ===========================================================================
000078C6 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000078C8 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000078CA 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000078CC                            ; ===========================================================================
000078CC                            
000078CC                            Resize_SLZ1:
000078CC 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000078D2 4E75                       		rts	
000078D4                            
000078D4                            Resize_SLZ2:
000078D4 4E75                       		rts	
000078D6                            ; ===========================================================================
000078D6                            
000078D6                            Resize_SLZ3:
000078D6 7000                       		moveq	#0,d0
000078D8 1038 F742                  		move.b	($FFFFF742).w,d0
000078DC 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000078E0 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000078E4                            ; ===========================================================================
000078E4 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000078E6 0000                       		dc.w Resize_SLZ3boss-off_7118
000078E8 0000                       		dc.w Resize_SLZ3end-off_7118
000078EA                            ; ===========================================================================
000078EA                            
000078EA                            Resize_SLZ3main:
000078EA 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000078F0 6500                       		bcs.s	locret_7130
000078F2 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000078FC                            
000078FC                            locret_7130:
000078FC 4E75                       		rts	
000078FE                            ; ===========================================================================
000078FE                            
000078FE                            Resize_SLZ3boss:
000078FE 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007904 6500                       		bcs.s	locret_715C
00007906 6100 0000                  		bsr.w	SingleObjLoad
0000790A 6600                       		bne.s	loc_7144
0000790C 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007910                            
00007910                            loc_7144:
00007910 303C 008C                  		move.w	#$8C,d0
00007914 6100 9C7E                  		bsr.w	PlaySound	; play boss music
00007918 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000791E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007922 7011                       		moveq	#$11,d0
00007924 6000 9E58                  		bra.w	LoadPLC		; load boss patterns
00007928                            ; ===========================================================================
00007928                            
00007928                            locret_715C:
00007928 4E75                       		rts	
0000792A                            ; ===========================================================================
0000792A                            
0000792A                            Resize_SLZ3end:
0000792A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007930 4E75                       		rts
00007932 4E75                       		rts
00007934                            ; ===========================================================================
00007934                            ; ---------------------------------------------------------------------------
00007934                            ; Spring Yard Zone dynamic screen resizing
00007934                            ; ---------------------------------------------------------------------------
00007934                            
00007934                            Resize_SYZ:				; XREF: Resize_Index
00007934 7000                       		moveq	#0,d0
00007936 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000793A D040                       		add.w	d0,d0
0000793C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007940 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007944                            ; ===========================================================================
00007944 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007946 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007948 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000794A                            ; ===========================================================================
0000794A                            
0000794A                            Resize_SYZ1:
0000794A 4E75                       		rts	
0000794C                            ; ===========================================================================
0000794C                            
0000794C                            Resize_SYZ2:
0000794C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007952 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007958 6500                       		bcs.s	locret_71A2
0000795A 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007960 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007966 6500                       		bcs.s	locret_71A2
00007968 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000796E                            
0000796E                            locret_71A2:
0000796E 4E75                       		rts	
00007970                            ; ===========================================================================
00007970                            
00007970                            Resize_SYZ3:
00007970 7000                       		moveq	#0,d0
00007972 1038 F742                  		move.b	($FFFFF742).w,d0
00007976 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000797A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000797E                            ; ===========================================================================
0000797E 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007980 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007982 0000                       		dc.w Resize_SYZ3end-off_71B2
00007984                            ; ===========================================================================
00007984                            
00007984                            Resize_SYZ3main:
00007984 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000798A 6500                       		bcs.s	locret_71CE
0000798C 6100 0000                  		bsr.w	SingleObjLoad
00007990 6600                       		bne.s	locret_71CE
00007992 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007996 5438 F742                  		addq.b	#2,($FFFFF742).w
0000799A                            
0000799A                            locret_71CE:
0000799A 4E75                       		rts	
0000799C                            ; ===========================================================================
0000799C                            
0000799C                            Resize_SYZ3boss:
0000799C 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000079A2 6500                       		bcs.s	locret_7200
000079A4 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079AA 6100 0000                  		bsr.w	SingleObjLoad
000079AE 6600                       		bne.s	loc_71EC
000079B0 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079B4 5438 F742                  		addq.b	#2,($FFFFF742).w
000079B8                            
000079B8                            loc_71EC:
000079B8 303C 008C                  		move.w	#$8C,d0
000079BC 6100 9BD6                  		bsr.w	PlaySound	; play boss music
000079C0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079C6 7011                       		moveq	#$11,d0
000079C8 6000 9DB4                  		bra.w	LoadPLC		; load boss patterns
000079CC                            ; ===========================================================================
000079CC                            
000079CC                            locret_7200:
000079CC 4E75                       		rts	
000079CE                            ; ===========================================================================
000079CE                            
000079CE                            Resize_SYZ3end:
000079CE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079D4 4E75                       		rts	
000079D6                            ; ===========================================================================
000079D6                            ; ---------------------------------------------------------------------------
000079D6                            ; Scrap	Brain Zone dynamic screen resizing
000079D6                            ; ---------------------------------------------------------------------------
000079D6                            
000079D6                            Resize_SBZ:				; XREF: Resize_Index
000079D6 7000                       		moveq	#0,d0
000079D8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079DC D040                       		add.w	d0,d0
000079DE 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000079E2 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000079E6                            ; ===========================================================================
000079E6 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000079E8 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000079EA 0000                       		dc.w Resize_FZ-Resize_SBZx
000079EC                            ; ===========================================================================
000079EC                            
000079EC                            Resize_SBZ1:
000079EC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000079F2 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000079F8 6500                       		bcs.s	locret_7242
000079FA 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007A00 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007A06 6500                       		bcs.s	locret_7242
00007A08 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A0E                            
00007A0E                            locret_7242:
00007A0E 4E75                       		rts	
00007A10                            ; ===========================================================================
00007A10                            
00007A10                            Resize_SBZ2:
00007A10 7000                       		moveq	#0,d0
00007A12 1038 F742                  		move.b	($FFFFF742).w,d0
00007A16 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A1A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A1E                            ; ===========================================================================
00007A1E 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A20 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A22 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A24 0000                       		dc.w Resize_SBZ2end-off_7252
00007A26                            ; ===========================================================================
00007A26                            
00007A26                            Resize_SBZ2main:
00007A26 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A2C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A32 6500                       		bcs.s	locret_727A
00007A34 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A3A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A40 6500                       		bcs.s	locret_727A
00007A42 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A46                            
00007A46                            locret_727A:
00007A46 4E75                       		rts	
00007A48                            ; ===========================================================================
00007A48                            
00007A48                            Resize_SBZ2boss:
00007A48 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A4E 6500                       		bcs.s	locret_7298
00007A50 6100 0000                  		bsr.w	SingleObjLoad
00007A54 6600                       		bne.s	locret_7298
00007A56 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A5A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A5E 701E                       		moveq	#$1E,d0
00007A60 6000 9D1C                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007A64                            ; ===========================================================================
00007A64                            
00007A64                            locret_7298:
00007A64 4E75                       		rts	
00007A66                            ; ===========================================================================
00007A66                            
00007A66                            Resize_SBZ2boss2:
00007A66 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007A6C 6500                       		bcs.s	loc_72B6
00007A6E 6100 0000                  		bsr.w	SingleObjLoad
00007A72 6600                       		bne.s	loc_72B0
00007A74 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007A78 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A7C                            
00007A7C                            loc_72B0:
00007A7C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A82                            
00007A82                            loc_72B6:
00007A82 6000                       		bra.s	loc_72C2
00007A84                            ; ===========================================================================
00007A84                            
00007A84                            Resize_SBZ2end:
00007A84 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007A8A 6500                       		bcs.s	loc_72C2
00007A8C 4E75                       		rts	
00007A8E                            ; ===========================================================================
00007A8E                            
00007A8E                            loc_72C2:
00007A8E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A94 4E75                       		rts	
00007A96                            ; ===========================================================================
00007A96                            
00007A96                            Resize_FZ:
00007A96 7000                       		moveq	#0,d0
00007A98 1038 F742                  		move.b	($FFFFF742).w,d0
00007A9C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007AA0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007AA4                            ; ===========================================================================
00007AA4 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AA8 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AAC 0000                       		dc.w Resize_FZend2-off_72D8
00007AAE                            ; ===========================================================================
00007AAE                            
00007AAE                            Resize_FZmain:
00007AAE 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AB4 6500                       		bcs.s	loc_72F4
00007AB6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ABA 701F                       		moveq	#$1F,d0
00007ABC 6100 9CC0                  		bsr.w	LoadPLC		; load FZ boss patterns
00007AC0                            
00007AC0                            loc_72F4:
00007AC0 60CC                       		bra.s	loc_72C2
00007AC2                            ; ===========================================================================
00007AC2                            
00007AC2                            Resize_FZboss:
00007AC2 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007AC8 6500                       		bcs.s	loc_7312
00007ACA 6100 0000                  		bsr.w	SingleObjLoad
00007ACE 6600                       		bne.s	loc_7312
00007AD0 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007AD4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AD8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007ADE                            
00007ADE                            loc_7312:
00007ADE 60AE                       		bra.s	loc_72C2
00007AE0                            ; ===========================================================================
00007AE0                            
00007AE0                            Resize_FZend:
00007AE0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007AE6 6500                       		bcs.s	loc_7320
00007AE8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AEC                            
00007AEC                            loc_7320:
00007AEC 60A0                       		bra.s	loc_72C2
00007AEE                            ; ===========================================================================
00007AEE                            
00007AEE                            locret_7322:
00007AEE 4E75                       		rts	
00007AF0                            ; ===========================================================================
00007AF0                            
00007AF0                            Resize_FZend2:
00007AF0 609C                       		bra.s	loc_72C2
00007AF2                            ; ===========================================================================
00007AF2                            ; ---------------------------------------------------------------------------
00007AF2                            ; Ending sequence dynamic screen resizing (empty)
00007AF2                            ; ---------------------------------------------------------------------------
00007AF2                            
00007AF2                            Resize_Ending:				; XREF: Resize_Index
00007AF2 4E75                       		rts	
00007AF4                            ; ===========================================================================
00007AF4                            ; ---------------------------------------------------------------------------
00007AF4                            ; Object 11 - GHZ bridge
00007AF4                            ; ---------------------------------------------------------------------------
00007AF4                            
00007AF4                            Obj11:					; XREF: Obj_Index
00007AF4 7000                       		moveq	#0,d0
00007AF6 1028 0024                  		move.b	$24(a0),d0
00007AFA 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007AFE 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007B02                            ; ===========================================================================
00007B02 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007B06 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B0A 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B0E                            ; ===========================================================================
00007B0E                            
00007B0E                            Obj11_Main:				; XREF: Obj11_Index
00007B0E 5428 0024                  		addq.b	#2,$24(a0)
00007B12 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B1A 317C 438E 0002             		move.w	#$438E,2(a0)
00007B20 117C 0004 0001             		move.b	#4,1(a0)
00007B26 117C 0003 0018             		move.b	#3,$18(a0)
00007B2C 117C 0080 0019             		move.b	#$80,$19(a0)
00007B32 3428 000C                  		move.w	$C(a0),d2
00007B36 3628 0008                  		move.w	8(a0),d3
00007B3A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B3C 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B40 7200                       		moveq	#0,d1
00007B42 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B44 14FC 0000                  		move.b	#0,(a2)+
00007B48 3001                       		move.w	d1,d0
00007B4A E248                       		lsr.w	#1,d0
00007B4C E948                       		lsl.w	#4,d0
00007B4E 9640                       		sub.w	d0,d3
00007B50 5501                       		subq.b	#2,d1
00007B52 6500                       		bcs.s	Obj11_Action
00007B54                            
00007B54                            Obj11_MakeBdg:
00007B54 6100 0000                  		bsr.w	SingleObjLoad
00007B58 6600                       		bne.s	Obj11_Action
00007B5A 5228 0028                  		addq.b	#1,$28(a0)
00007B5E B668 0008                  		cmp.w	8(a0),d3
00007B62 6600                       		bne.s	loc_73B8
00007B64 0643 0010                  		addi.w	#$10,d3
00007B68 3142 000C                  		move.w	d2,$C(a0)
00007B6C 3142 003C                  		move.w	d2,$3C(a0)
00007B70 3A08                       		move.w	a0,d5
00007B72 0445 D000                  		subi.w	#-$3000,d5
00007B76 EC4D                       		lsr.w	#6,d5
00007B78 0245 007F                  		andi.w	#$7F,d5
00007B7C 14C5                       		move.b	d5,(a2)+
00007B7E 5228 0028                  		addq.b	#1,$28(a0)
00007B82                            
00007B82                            loc_73B8:				; XREF: ROM:00007398j
00007B82 3A09                       		move.w	a1,d5
00007B84 0445 D000                  		subi.w	#-$3000,d5
00007B88 EC4D                       		lsr.w	#6,d5
00007B8A 0245 007F                  		andi.w	#$7F,d5
00007B8E 14C5                       		move.b	d5,(a2)+
00007B90 137C 000A 0024             		move.b	#$A,$24(a1)
00007B96 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007B98 3342 000C                  		move.w	d2,$C(a1)
00007B9C 3342 003C                  		move.w	d2,$3C(a1)
00007BA0 3343 0008                  		move.w	d3,8(a1)
00007BA4 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BAC 337C 438E 0002             		move.w	#$438E,2(a1)
00007BB2 137C 0004 0001             		move.b	#4,1(a1)
00007BB8 137C 0003 0018             		move.b	#3,$18(a1)
00007BBE 137C 0008 0019             		move.b	#8,$19(a1)
00007BC4 0643 0010                  		addi.w	#$10,d3
00007BC8 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007BCC                            
00007BCC                            Obj11_Action:				; XREF: Obj11_Index
00007BCC 6100                       		bsr.s	Obj11_Solid
00007BCE 4A28 003E                  		tst.b	$3E(a0)
00007BD2 6700                       		beq.s	Obj11_Display
00007BD4 5928 003E                  		subq.b	#4,$3E(a0)
00007BD8 6100 0000                  		bsr.w	Obj11_Bend
00007BDC                            
00007BDC                            Obj11_Display:
00007BDC 6100 0000                  		bsr.w	DisplaySprite
00007BE0 6000 0000                  		bra.w	Obj11_ChkDel
00007BE4                            
00007BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BE4                            
00007BE4                            
00007BE4                            Obj11_Solid:				; XREF: Obj11_Action
00007BE4 7200                       		moveq	#0,d1
00007BE6 1228 0028                  		move.b	$28(a0),d1
00007BEA E749                       		lsl.w	#3,d1
00007BEC 3401                       		move.w	d1,d2
00007BEE 5041                       		addq.w	#8,d1
00007BF0 D442                       		add.w	d2,d2
00007BF2 43F8 D000                  		lea	($FFFFD000).w,a1
00007BF6 4A69 0012                  		tst.w	$12(a1)
00007BFA 6B00 0000                  		bmi.w	locret_751E
00007BFE 3029 0008                  		move.w	8(a1),d0
00007C02 9068 0008                  		sub.w	8(a0),d0
00007C06 D041                       		add.w	d1,d0
00007C08 6B00 0000                  		bmi.w	locret_751E
00007C0C B042                       		cmp.w	d2,d0
00007C0E 6400 0000                  		bcc.w	locret_751E
00007C12 6000                       		bra.s	Platform2
00007C14                            ; End of function Obj11_Solid
00007C14                            
00007C14                            ; ---------------------------------------------------------------------------
00007C14                            ; Platform subroutine
00007C14                            ; ---------------------------------------------------------------------------
00007C14                            
00007C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C14                            
00007C14                            
00007C14                            PlatformObject:
00007C14 43F8 D000                  		lea	($FFFFD000).w,a1
00007C18 4A69 0012                  		tst.w	$12(a1)
00007C1C 6B00 0000                  		bmi.w	locret_751E
00007C20 3029 0008                  		move.w	8(a1),d0
00007C24 9068 0008                  		sub.w	8(a0),d0
00007C28 D041                       		add.w	d1,d0
00007C2A 6B00 0000                  		bmi.w	locret_751E
00007C2E D241                       		add.w	d1,d1
00007C30 B041                       		cmp.w	d1,d0
00007C32 6400 0000                  		bcc.w	locret_751E
00007C36                            
00007C36                            Platform2:
00007C36 3028 000C                  		move.w	$C(a0),d0
00007C3A 5140                       		subq.w	#8,d0
00007C3C                            
00007C3C                            Platform3:
00007C3C 3429 000C                  		move.w	$C(a1),d2
00007C40 1229 0016                  		move.b	$16(a1),d1
00007C44 4881                       		ext.w	d1
00007C46 D242                       		add.w	d2,d1
00007C48 5841                       		addq.w	#4,d1
00007C4A 9041                       		sub.w	d1,d0
00007C4C 6200 0000                  		bhi.w	locret_751E
00007C50 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C54 6500 0000                  		bcs.w	locret_751E
00007C58 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C5C 6B00 0000                  		bmi.w	locret_751E
00007C60 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007C66 6400 0000                  		bcc.w	locret_751E
00007C6A D440                       		add.w	d0,d2
00007C6C 5642                       		addq.w	#3,d2
00007C6E 3342 000C                  		move.w	d2,$C(a1)
00007C72 5428 0024                  		addq.b	#2,$24(a0)
00007C76                            
00007C76                            loc_74AE:
00007C76 0829 0003 0022             		btst	#3,$22(a1)
00007C7C 6700                       		beq.s	loc_74DC
00007C7E 7000                       		moveq	#0,d0
00007C80 1029 003D                  		move.b	$3D(a1),d0
00007C84 ED48                       		lsl.w	#6,d0
00007C86 0680 00FF D000             		addi.l	#$FFD000,d0
00007C8C 2440                       		movea.l	d0,a2
00007C8E 08AA 0003 0022             		bclr	#3,$22(a2)
00007C94 422A 0025                  		clr.b	$25(a2)
00007C98 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007C9E 6600                       		bne.s	loc_74DC
00007CA0 552A 0024                  		subq.b	#2,$24(a2)
00007CA4                            
00007CA4                            loc_74DC:
00007CA4 3008                       		move.w	a0,d0
00007CA6 0440 D000                  		subi.w	#-$3000,d0
00007CAA EC48                       		lsr.w	#6,d0
00007CAC 0240 007F                  		andi.w	#$7F,d0
00007CB0 1340 003D                  		move.b	d0,$3D(a1)
00007CB4 137C 0000 0026             		move.b	#0,$26(a1)
00007CBA 337C 0000 0012             		move.w	#0,$12(a1)
00007CC0 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007CC6 0829 0001 0022             		btst	#1,$22(a1)
00007CCC 6700                       		beq.s	loc_7512
00007CCE 2F08                       		move.l	a0,-(sp)
00007CD0 2049                       		movea.l	a1,a0
00007CD2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007CD8 205F                       		movea.l	(sp)+,a0
00007CDA                            
00007CDA                            loc_7512:
00007CDA 08E9 0003 0022             		bset	#3,$22(a1)
00007CE0 08E8 0003 0022             		bset	#3,$22(a0)
00007CE6                            
00007CE6                            locret_751E:
00007CE6 4E75                       		rts	
00007CE8                            ; End of function PlatformObject
00007CE8                            
00007CE8                            ; ---------------------------------------------------------------------------
00007CE8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007CE8                            ; ---------------------------------------------------------------------------
00007CE8                            
00007CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CE8                            
00007CE8                            
00007CE8                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007CE8 43F8 D000                  		lea	($FFFFD000).w,a1
00007CEC 4A69 0012                  		tst.w	$12(a1)
00007CF0 6B00 FFF4                  		bmi.w	locret_751E
00007CF4 3029 0008                  		move.w	8(a1),d0
00007CF8 9068 0008                  		sub.w	8(a0),d0
00007CFC D041                       		add.w	d1,d0
00007CFE 6BE6                       		bmi.s	locret_751E
00007D00 D241                       		add.w	d1,d1
00007D02 B041                       		cmp.w	d1,d0
00007D04 64E0                       		bcc.s	locret_751E
00007D06 0828 0000 0001             		btst	#0,1(a0)
00007D0C 6700                       		beq.s	loc_754A
00007D0E 4640                       		not.w	d0
00007D10 D041                       		add.w	d1,d0
00007D12                            
00007D12                            loc_754A:
00007D12 E248                       		lsr.w	#1,d0
00007D14 7600                       		moveq	#0,d3
00007D16 1632 0000                  		move.b	(a2,d0.w),d3
00007D1A 3028 000C                  		move.w	$C(a0),d0
00007D1E 9043                       		sub.w	d3,d0
00007D20 6000 FF1A                  		bra.w	Platform3
00007D24                            ; End of function SlopeObject
00007D24                            
00007D24                            
00007D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D24                            
00007D24                            
00007D24                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D24 43F8 D000                  		lea	($FFFFD000).w,a1
00007D28 4A69 0012                  		tst.w	$12(a1)
00007D2C 6B00 FFB8                  		bmi.w	locret_751E
00007D30 3029 0008                  		move.w	8(a1),d0
00007D34 9068 0008                  		sub.w	8(a0),d0
00007D38 D041                       		add.w	d1,d0
00007D3A 6B00 FFAA                  		bmi.w	locret_751E
00007D3E D241                       		add.w	d1,d1
00007D40 B041                       		cmp.w	d1,d0
00007D42 6400 FFA2                  		bcc.w	locret_751E
00007D46 3028 000C                  		move.w	$C(a0),d0
00007D4A 9043                       		sub.w	d3,d0
00007D4C 6000 FEEE                  		bra.w	Platform3
00007D50                            ; End of function Obj15_Solid
00007D50                            
00007D50                            ; ===========================================================================
00007D50                            
00007D50                            Obj11_Action2:				; XREF: Obj11_Index
00007D50 6100                       		bsr.s	Obj11_WalkOff
00007D52 6100 0000                  		bsr.w	DisplaySprite
00007D56 6000 0000                  		bra.w	Obj11_ChkDel
00007D5A                            
00007D5A                            ; ---------------------------------------------------------------------------
00007D5A                            ; Subroutine allowing Sonic to walk off a bridge
00007D5A                            ; ---------------------------------------------------------------------------
00007D5A                            
00007D5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D5A                            
00007D5A                            
00007D5A                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D5A 7200                       		moveq	#0,d1
00007D5C 1228 0028                  		move.b	$28(a0),d1
00007D60 E749                       		lsl.w	#3,d1
00007D62 3401                       		move.w	d1,d2
00007D64 5041                       		addq.w	#8,d1
00007D66 6100                       		bsr.s	ExitPlatform2
00007D68 6400                       		bcc.s	locret_75BE
00007D6A E848                       		lsr.w	#4,d0
00007D6C 1140 003F                  		move.b	d0,$3F(a0)
00007D70 1028 003E                  		move.b	$3E(a0),d0
00007D74 0C00 0040                  		cmpi.b	#$40,d0
00007D78 6700                       		beq.s	loc_75B6
00007D7A 5828 003E                  		addq.b	#4,$3E(a0)
00007D7E                            
00007D7E                            loc_75B6:
00007D7E 6100 0000                  		bsr.w	Obj11_Bend
00007D82 6100 0000                  		bsr.w	Obj11_MoveSonic
00007D86                            
00007D86                            locret_75BE:
00007D86 4E75                       		rts	
00007D88                            ; End of function Obj11_WalkOff
00007D88                            
00007D88                            ; ---------------------------------------------------------------------------
00007D88                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007D88                            ; ---------------------------------------------------------------------------
00007D88                            
00007D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D88                            
00007D88                            
00007D88                            ExitPlatform:
00007D88 3401                       		move.w	d1,d2
00007D8A                            
00007D8A                            ExitPlatform2:
00007D8A D442                       		add.w	d2,d2
00007D8C 43F8 D000                  		lea	($FFFFD000).w,a1
00007D90 0829 0001 0022             		btst	#1,$22(a1)
00007D96 6600                       		bne.s	loc_75E0
00007D98 3029 0008                  		move.w	8(a1),d0
00007D9C 9068 0008                  		sub.w	8(a0),d0
00007DA0 D041                       		add.w	d1,d0
00007DA2 6B00                       		bmi.s	loc_75E0
00007DA4 B042                       		cmp.w	d2,d0
00007DA6 6500                       		bcs.s	locret_75F2
00007DA8                            
00007DA8                            loc_75E0:
00007DA8 08A9 0003 0022             		bclr	#3,$22(a1)
00007DAE 117C 0002 0024             		move.b	#2,$24(a0)
00007DB4 08A8 0003 0022             		bclr	#3,$22(a0)
00007DBA                            
00007DBA                            locret_75F2:
00007DBA 4E75                       		rts	
00007DBC                            ; End of function ExitPlatform
00007DBC                            
00007DBC                            
00007DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DBC                            
00007DBC                            
00007DBC                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DBC 7000                       		moveq	#0,d0
00007DBE 1028 003F                  		move.b	$3F(a0),d0
00007DC2 1030 0029                  		move.b	$29(a0,d0.w),d0
00007DC6 ED48                       		lsl.w	#6,d0
00007DC8 0680 00FF D000             		addi.l	#$FFD000,d0
00007DCE 2440                       		movea.l	d0,a2
00007DD0 43F8 D000                  		lea	($FFFFD000).w,a1
00007DD4 302A 000C                  		move.w	$C(a2),d0
00007DD8 5140                       		subq.w	#8,d0
00007DDA 7200                       		moveq	#0,d1
00007DDC 1229 0016                  		move.b	$16(a1),d1
00007DE0 9041                       		sub.w	d1,d0
00007DE2 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007DE6 4E75                       		rts	
00007DE8                            ; End of function Obj11_MoveSonic
00007DE8                            
00007DE8                            
00007DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE8                            
00007DE8                            
00007DE8                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007DE8 1028 003E                  		move.b	$3E(a0),d0
00007DEC 6100 AF46                  		bsr.w	CalcSine
00007DF0 3800                       		move.w	d0,d4
00007DF2 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007DF8 7000                       		moveq	#0,d0
00007DFA 1028 0028                  		move.b	$28(a0),d0
00007DFE E948                       		lsl.w	#4,d0
00007E00 7600                       		moveq	#0,d3
00007E02 1628 003F                  		move.b	$3F(a0),d3
00007E06 3403                       		move.w	d3,d2
00007E08 D640                       		add.w	d0,d3
00007E0A 7A00                       		moveq	#0,d5
00007E0C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E12 1A35 3000                  		move.b	(a5,d3.w),d5
00007E16 0243 000F                  		andi.w	#$F,d3
00007E1A E94B                       		lsl.w	#4,d3
00007E1C 47F4 3000                  		lea	(a4,d3.w),a3
00007E20 45E8 0029                  		lea	$29(a0),a2
00007E24                            
00007E24                            loc_765C:
00007E24 7000                       		moveq	#0,d0
00007E26 101A                       		move.b	(a2)+,d0
00007E28 ED48                       		lsl.w	#6,d0
00007E2A 0680 00FF D000             		addi.l	#$FFD000,d0
00007E30 2240                       		movea.l	d0,a1
00007E32 7000                       		moveq	#0,d0
00007E34 101B                       		move.b	(a3)+,d0
00007E36 5240                       		addq.w	#1,d0
00007E38 C0C5                       		mulu.w	d5,d0
00007E3A C0C4                       		mulu.w	d4,d0
00007E3C 4840                       		swap	d0
00007E3E D069 003C                  		add.w	$3C(a1),d0
00007E42 3340 000C                  		move.w	d0,$C(a1)
00007E46 51CA FFDC                  		dbf	d2,loc_765C
00007E4A 7000                       		moveq	#0,d0
00007E4C 1028 0028                  		move.b	$28(a0),d0
00007E50 7600                       		moveq	#0,d3
00007E52 1628 003F                  		move.b	$3F(a0),d3
00007E56 5203                       		addq.b	#1,d3
00007E58 9600                       		sub.b	d0,d3
00007E5A 4403                       		neg.b	d3
00007E5C 6B00                       		bmi.s	locret_76CA
00007E5E 3403                       		move.w	d3,d2
00007E60 E94B                       		lsl.w	#4,d3
00007E62 47F4 3000                  		lea	(a4,d3.w),a3
00007E66 D6C2                       		adda.w	d2,a3
00007E68 5342                       		subq.w	#1,d2
00007E6A 6500                       		bcs.s	locret_76CA
00007E6C                            
00007E6C                            loc_76A4:
00007E6C 7000                       		moveq	#0,d0
00007E6E 101A                       		move.b	(a2)+,d0
00007E70 ED48                       		lsl.w	#6,d0
00007E72 0680 00FF D000             		addi.l	#$FFD000,d0
00007E78 2240                       		movea.l	d0,a1
00007E7A 7000                       		moveq	#0,d0
00007E7C 1023                       		move.b	-(a3),d0
00007E7E 5240                       		addq.w	#1,d0
00007E80 C0C5                       		mulu.w	d5,d0
00007E82 C0C4                       		mulu.w	d4,d0
00007E84 4840                       		swap	d0
00007E86 D069 003C                  		add.w	$3C(a1),d0
00007E8A 3340 000C                  		move.w	d0,$C(a1)
00007E8E 51CA FFDC                  		dbf	d2,loc_76A4
00007E92                            
00007E92                            locret_76CA:
00007E92 4E75                       		rts	
00007E94                            ; End of function Obj11_Bend
00007E94                            
00007E94                            ; ===========================================================================
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            ; GHZ bridge-bending data
00007E94                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007FA4                            		even
00007FA4                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000080A4                            		even
000080A4                            
000080A4                            ; ===========================================================================
000080A4                            
000080A4                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000080A4 3028 0008                  		move.w	8(a0),d0
000080A8 0240 FF80                  		andi.w	#$FF80,d0
000080AC 3238 F700                  		move.w	($FFFFF700).w,d1
000080B0 0441 0080                  		subi.w	#$80,d1
000080B4 0241 FF80                  		andi.w	#$FF80,d1
000080B8 9041                       		sub.w	d1,d0
000080BA 0C40 0280                  		cmpi.w	#$280,d0
000080BE 6200 0000                  		bhi.w	Obj11_DelAll
000080C2 4E75                       		rts	
000080C4                            ; ===========================================================================
000080C4                            
000080C4                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000080C4 7400                       		moveq	#0,d2
000080C6 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000080CA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000080CC 5302                       		subq.b	#1,d2		; subtract 1
000080CE 6500                       		bcs.s	Obj11_Delete
000080D0                            
000080D0                            Obj11_DelLoop:
000080D0 7000                       		moveq	#0,d0
000080D2 101A                       		move.b	(a2)+,d0
000080D4 ED48                       		lsl.w	#6,d0
000080D6 0680 00FF D000             		addi.l	#$FFD000,d0
000080DC 2240                       		movea.l	d0,a1
000080DE B048                       		cmp.w	a0,d0
000080E0 6700                       		beq.s	loc_791E
000080E2 6100 0000                  		bsr.w	DeleteObject2
000080E6                            
000080E6                            loc_791E:
000080E6 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000080EA                            
000080EA                            Obj11_Delete:
000080EA 6100 0000                  		bsr.w	DeleteObject
000080EE 4E75                       		rts	
000080F0                            ; ===========================================================================
000080F0                            
000080F0                            Obj11_Delete2:				; XREF: Obj11_Index
000080F0 6100 0000                  		bsr.w	DeleteObject
000080F4 4E75                       		rts	
000080F6                            ; ===========================================================================
000080F6                            
000080F6                            Obj11_Display2:				; XREF: Obj11_Index
000080F6 6100 0000                  		bsr.w	DisplaySprite
000080FA 4E75                       		rts	
000080FC                            ; ===========================================================================
000080FC                            ; ---------------------------------------------------------------------------
000080FC                            ; Sprite mappings - GHZ	bridge
000080FC                            ; ---------------------------------------------------------------------------
000080FC                            Map_obj11:
000080FC                            	include "_maps\obj11.asm"
000080FC                            ; ---------------------------------------------------------------------------
000080FC                            ; Sprite mappings - GHZ	bridge
000080FC                            ; ---------------------------------------------------------------------------
000080FC 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008100 0000                       		dc.w byte_794B-Map_obj11
00008102 01                         byte_793A:	dc.b 1
00008103 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008108 02                         byte_7940:	dc.b 2
00008109 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000810E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008113 01                         byte_794B:	dc.b 1
00008114 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000811A 00                         		even
0000811A 00                         		even
0000811A                            
0000811A                            ; ===========================================================================
0000811A                            ; ---------------------------------------------------------------------------
0000811A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000811A                            ;	    - spiked ball on a chain (SBZ)
0000811A                            ; ---------------------------------------------------------------------------
0000811A                            
0000811A                            Obj15:					; XREF: Obj_Index
0000811A 7000                       		moveq	#0,d0
0000811C 1028 0024                  		move.b	$24(a0),d0
00008120 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008124 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008128                            ; ===========================================================================
00008128 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000812C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008130 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008134 0000                       		dc.w Obj15_Action-Obj15_Index
00008136                            ; ===========================================================================
00008136                            
00008136                            Obj15_Main:				; XREF: Obj15_Index
00008136 5428 0024                  		addq.b	#2,$24(a0)
0000813A 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008142 317C 4380 0002             		move.w	#$4380,2(a0)
00008148 117C 0004 0001             		move.b	#4,1(a0)
0000814E 117C 0003 0018             		move.b	#3,$18(a0)
00008154 117C 0018 0019             		move.b	#$18,$19(a0)
0000815A 117C 0008 0016             		move.b	#8,$16(a0)
00008160 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008166 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000816C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008172 6600                       		bne.s	Obj15_NotSLZ
00008174 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000817C 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008182 117C 0020 0019             		move.b	#$20,$19(a0)
00008188 117C 0010 0016             		move.b	#$10,$16(a0)
0000818E 117C 0099 0020             		move.b	#$99,$20(a0)
00008194                            
00008194                            Obj15_NotSLZ:
00008194 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000819A 6600                       		bne.s	Obj15_SetLength
0000819C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000081A4 317C 0391 0002             		move.w	#$391,2(a0)
000081AA 117C 0018 0019             		move.b	#$18,$19(a0)
000081B0 117C 0018 0016             		move.b	#$18,$16(a0)
000081B6 117C 0086 0020             		move.b	#$86,$20(a0)
000081BC 117C 000C 0024             		move.b	#$C,$24(a0)
000081C2                            
000081C2                            Obj15_SetLength:
000081C2 1810                       		move.b	0(a0),d4
000081C4 7200                       		moveq	#0,d1
000081C6 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000081CA 1212                       		move.b	(a2),d1		; move a2 to d1
000081CC 3F01                       		move.w	d1,-(sp)
000081CE 0241 000F                  		andi.w	#$F,d1
000081D2 14FC 0000                  		move.b	#0,(a2)+
000081D6 3601                       		move.w	d1,d3
000081D8 E94B                       		lsl.w	#4,d3
000081DA 5003                       		addq.b	#8,d3
000081DC 1143 003C                  		move.b	d3,$3C(a0)
000081E0 5103                       		subq.b	#8,d3
000081E2 4A28 001A                  		tst.b	$1A(a0)
000081E6 6700                       		beq.s	Obj15_MakeChain
000081E8 5003                       		addq.b	#8,d3
000081EA 5341                       		subq.w	#1,d1
000081EC                            
000081EC                            Obj15_MakeChain:
000081EC 6100 0000                  		bsr.w	SingleObjLoad
000081F0 6600                       		bne.s	loc_7A92
000081F2 5228 0028                  		addq.b	#1,$28(a0)
000081F6 3A09                       		move.w	a1,d5
000081F8 0445 D000                  		subi.w	#-$3000,d5
000081FC EC4D                       		lsr.w	#6,d5
000081FE 0245 007F                  		andi.w	#$7F,d5
00008202 14C5                       		move.b	d5,(a2)+
00008204 137C 000A 0024             		move.b	#$A,$24(a1)
0000820A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000820C 2368 0004 0004             		move.l	4(a0),4(a1)
00008212 3368 0002 0002             		move.w	2(a0),2(a1)
00008218 08A9 0006 0002             		bclr	#6,2(a1)
0000821E 137C 0004 0001             		move.b	#4,1(a1)
00008224 137C 0004 0018             		move.b	#4,$18(a1)
0000822A 137C 0008 0019             		move.b	#8,$19(a1)
00008230 137C 0001 001A             		move.b	#1,$1A(a1)
00008236 1343 003C                  		move.b	d3,$3C(a1)
0000823A 0403 0010                  		subi.b	#$10,d3
0000823E 6400                       		bcc.s	loc_7A8E
00008240 137C 0002 001A             		move.b	#2,$1A(a1)
00008246 137C 0003 0018             		move.b	#3,$18(a1)
0000824C 08E9 0006 0002             		bset	#6,2(a1)
00008252                            
00008252                            loc_7A8E:
00008252 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008256                            
00008256                            loc_7A92:
00008256 3A08                       		move.w	a0,d5
00008258 0445 D000                  		subi.w	#-$3000,d5
0000825C EC4D                       		lsr.w	#6,d5
0000825E 0245 007F                  		andi.w	#$7F,d5
00008262 14C5                       		move.b	d5,(a2)+
00008264 317C 4080 0026             		move.w	#$4080,$26(a0)
0000826A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008270 321F                       		move.w	(sp)+,d1
00008272 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008276 6700                       		beq.s	loc_7AD4	; if not, branch
00008278 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008280 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008286 117C 0001 001A             		move.b	#1,$1A(a0)
0000828C 117C 0002 0018             		move.b	#2,$18(a0)
00008292 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008298                            
00008298                            loc_7AD4:
00008298 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000829E 6700                       		beq.s	Obj15_Action	; if yes, branch
000082A0                            
000082A0                            Obj15_SetSolid:				; XREF: Obj15_Index
000082A0 7200                       		moveq	#0,d1
000082A2 1228 0019                  		move.b	$19(a0),d1
000082A6 7600                       		moveq	#0,d3
000082A8 1628 0016                  		move.b	$16(a0),d3
000082AC 6100 FA76                  		bsr.w	Obj15_Solid
000082B0                            
000082B0                            Obj15_Action:				; XREF: Obj15_Index
000082B0 6100 0000                  		bsr.w	Obj15_Move
000082B4 6100 0000                  		bsr.w	DisplaySprite
000082B8 6000 0000                  		bra.w	Obj15_ChkDel
000082BC                            ; ===========================================================================
000082BC                            
000082BC                            Obj15_Action2:				; XREF: Obj15_Index
000082BC 7200                       		moveq	#0,d1
000082BE 1228 0019                  		move.b	$19(a0),d1
000082C2 6100 FAC4                  		bsr.w	ExitPlatform
000082C6 3F28 0008                  		move.w	8(a0),-(sp)
000082CA 6100 0000                  		bsr.w	Obj15_Move
000082CE 341F                       		move.w	(sp)+,d2
000082D0 7600                       		moveq	#0,d3
000082D2 1628 0016                  		move.b	$16(a0),d3
000082D6 5203                       		addq.b	#1,d3
000082D8 6100 0000                  		bsr.w	MvSonicOnPtfm
000082DC 6100 0000                  		bsr.w	DisplaySprite
000082E0 6000 0000                  		bra.w	Obj15_ChkDel
000082E4                            
000082E4 4E75                       		rts
000082E6                            
000082E6                            ; ---------------------------------------------------------------------------
000082E6                            ; Subroutine to	change Sonic's position with a platform
000082E6                            ; ---------------------------------------------------------------------------
000082E6                            
000082E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E6                            
000082E6                            
000082E6                            MvSonicOnPtfm:
000082E6 43F8 D000                  		lea	($FFFFD000).w,a1
000082EA 3028 000C                  		move.w	$C(a0),d0
000082EE 9043                       		sub.w	d3,d0
000082F0 6000                       		bra.s	MvSonic2
000082F2                            ; End of function MvSonicOnPtfm
000082F2                            
000082F2                            ; ---------------------------------------------------------------------------
000082F2                            ; Subroutine to	change Sonic's position with a platform
000082F2                            ; ---------------------------------------------------------------------------
000082F2                            
000082F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082F2                            
000082F2                            
000082F2                            MvSonicOnPtfm2:
000082F2 43F8 D000                  		lea	($FFFFD000).w,a1
000082F6 3028 000C                  		move.w	$C(a0),d0
000082FA 0440 0009                  		subi.w	#9,d0
000082FE                            
000082FE                            MvSonic2:
000082FE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008302 6B00                       		bmi.s	locret_7B62
00008304 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000830A 6400                       		bcc.s	locret_7B62
0000830C 4A78 FE08                  		tst.w	($FFFFFE08).w
00008310 6600                       		bne.s	locret_7B62
00008312 7200                       		moveq	#0,d1
00008314 1229 0016                  		move.b	$16(a1),d1
00008318 9041                       		sub.w	d1,d0
0000831A 3340 000C                  		move.w	d0,$C(a1)
0000831E 9468 0008                  		sub.w	8(a0),d2
00008322 9569 0008                  		sub.w	d2,8(a1)
00008326                            
00008326                            locret_7B62:
00008326 4E75                       		rts	
00008328                            ; End of function MvSonicOnPtfm2
00008328                            
00008328                            
00008328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008328                            
00008328                            
00008328                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008328 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000832C 323C 0080                  		move.w	#$80,d1
00008330 0828 0000 0022             		btst	#0,$22(a0)
00008336 6700                       		beq.s	loc_7B78
00008338 4440                       		neg.w	d0
0000833A D041                       		add.w	d1,d0
0000833C                            
0000833C                            loc_7B78:
0000833C 6000                       		bra.s	Obj15_Move2
0000833E                            ; End of function Obj15_Move
0000833E                            
0000833E                            
0000833E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000833E                            
0000833E                            
0000833E                            Obj48_Move:				; XREF: Obj48_Display2
0000833E 4A28 003D                  		tst.b	$3D(a0)
00008342 6600                       		bne.s	loc_7B9C
00008344 3028 003E                  		move.w	$3E(a0),d0
00008348 5040                       		addq.w	#8,d0
0000834A 3140 003E                  		move.w	d0,$3E(a0)
0000834E D168 0026                  		add.w	d0,$26(a0)
00008352 0C40 0200                  		cmpi.w	#$200,d0
00008356 6600                       		bne.s	loc_7BB6
00008358 117C 0001 003D             		move.b	#1,$3D(a0)
0000835E 6000                       		bra.s	loc_7BB6
00008360                            ; ===========================================================================
00008360                            
00008360                            loc_7B9C:
00008360 3028 003E                  		move.w	$3E(a0),d0
00008364 5140                       		subq.w	#8,d0
00008366 3140 003E                  		move.w	d0,$3E(a0)
0000836A D168 0026                  		add.w	d0,$26(a0)
0000836E 0C40 FE00                  		cmpi.w	#-$200,d0
00008372 6600                       		bne.s	loc_7BB6
00008374 117C 0000 003D             		move.b	#0,$3D(a0)
0000837A                            
0000837A                            loc_7BB6:
0000837A 1028 0026                  		move.b	$26(a0),d0
0000837E                            ; End of function Obj48_Move
0000837E                            
0000837E                            
0000837E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000837E                            
0000837E                            
0000837E                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000837E 6100 A9B4                  		bsr.w	CalcSine
00008382 3428 0038                  		move.w	$38(a0),d2
00008386 3628 003A                  		move.w	$3A(a0),d3
0000838A 45E8 0028                  		lea	$28(a0),a2
0000838E 7C00                       		moveq	#0,d6
00008390 1C1A                       		move.b	(a2)+,d6
00008392                            
00008392                            loc_7BCE:
00008392 7800                       		moveq	#0,d4
00008394 181A                       		move.b	(a2)+,d4
00008396 ED4C                       		lsl.w	#6,d4
00008398 0684 00FF D000             		addi.l	#$FFD000,d4
0000839E 2244                       		movea.l	d4,a1
000083A0 7800                       		moveq	#0,d4
000083A2 1829 003C                  		move.b	$3C(a1),d4
000083A6 2A04                       		move.l	d4,d5
000083A8 C9C0                       		muls.w	d0,d4
000083AA E084                       		asr.l	#8,d4
000083AC CBC1                       		muls.w	d1,d5
000083AE E085                       		asr.l	#8,d5
000083B0 D842                       		add.w	d2,d4
000083B2 DA43                       		add.w	d3,d5
000083B4 3344 000C                  		move.w	d4,$C(a1)
000083B8 3345 0008                  		move.w	d5,8(a1)
000083BC 51CE FFD4                  		dbf	d6,loc_7BCE
000083C0 4E75                       		rts	
000083C2                            ; End of function Obj15_Move2
000083C2                            
000083C2                            ; ===========================================================================
000083C2                            
000083C2                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000083C2 3028 003A                  		move.w	$3A(a0),d0
000083C6 0240 FF80                  		andi.w	#$FF80,d0
000083CA 3238 F700                  		move.w	($FFFFF700).w,d1
000083CE 0441 0080                  		subi.w	#$80,d1
000083D2 0241 FF80                  		andi.w	#$FF80,d1
000083D6 9041                       		sub.w	d1,d0
000083D8 0C40 0280                  		cmpi.w	#$280,d0
000083DC 6200 0000                  		bhi.w	Obj15_DelAll
000083E0 4E75                       		rts	
000083E2                            ; ===========================================================================
000083E2                            
000083E2                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000083E2 7400                       		moveq	#0,d2
000083E4 45E8 0028                  		lea	$28(a0),a2
000083E8 141A                       		move.b	(a2)+,d2
000083EA                            
000083EA                            Obj15_DelLoop:
000083EA 7000                       		moveq	#0,d0
000083EC 101A                       		move.b	(a2)+,d0
000083EE ED48                       		lsl.w	#6,d0
000083F0 0680 00FF D000             		addi.l	#$FFD000,d0
000083F6 2240                       		movea.l	d0,a1
000083F8 6100 0000                  		bsr.w	DeleteObject2
000083FC 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008400 4E75                       		rts	
00008402                            ; ===========================================================================
00008402                            
00008402                            Obj15_Delete:				; XREF: Obj15_Index
00008402 6100 0000                  		bsr.w	DeleteObject
00008406 4E75                       		rts	
00008408                            ; ===========================================================================
00008408                            
00008408                            Obj15_Display:				; XREF: Obj15_Index
00008408 6000 0000                  		bra.w	DisplaySprite
0000840C                            ; ===========================================================================
0000840C                            ; ---------------------------------------------------------------------------
0000840C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000840C                            ; ---------------------------------------------------------------------------
0000840C                            Map_obj15:
0000840C                            	include "_maps\obj15ghz.asm"
0000840C                            ; ---------------------------------------------------------------------------
0000840C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000840C                            ; ---------------------------------------------------------------------------
0000840C 0000                       		dc.w byte_7C4E-Map_obj15
0000840E 0000                       		dc.w byte_7C59-Map_obj15
00008410 0000                       		dc.w byte_7C5F-Map_obj15
00008412 02                         byte_7C4E:	dc.b 2
00008413 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008418 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000841D 01                         byte_7C59:	dc.b 1
0000841E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008423 01                         byte_7C5F:	dc.b 1
00008424 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000842A 00                         		even
0000842A 00                         		even
0000842A                            
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            ; Sprite mappings - SLZ	swinging platforms
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            Map_obj15a:
0000842A                            	include "_maps\obj15slz.asm"
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            ; Sprite mappings - SLZ	swinging platforms
0000842A                            ; ---------------------------------------------------------------------------
0000842A 0000                       		dc.w byte_7C6C-Map_obj15a
0000842C 0000                       		dc.w byte_7C95-Map_obj15a
0000842E 0000                       		dc.w byte_7C9B-Map_obj15a
00008430 08                         byte_7C6C:	dc.b 8
00008431 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008436 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000843B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008440 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008445 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000844A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000844F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008454 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008459 01                         byte_7C95:	dc.b 1
0000845A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000845F 01                         byte_7C9B:	dc.b 1
00008460 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008466 00                         		even
00008466 00                         		even
00008466                            
00008466                            ; ===========================================================================
00008466                            ; ---------------------------------------------------------------------------
00008466                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008466                            ; ---------------------------------------------------------------------------
00008466                            
00008466                            Obj17:					; XREF: Obj_Index
00008466 7000                       		moveq	#0,d0
00008468 1028 0024                  		move.b	$24(a0),d0
0000846C 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008470 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008474                            ; ===========================================================================
00008474 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008476 0000                       		dc.w Obj17_Action-Obj17_Index
00008478 0000                       		dc.w Obj17_Action-Obj17_Index
0000847A 0000                       		dc.w Obj17_Delete-Obj17_Index
0000847C 0000                       		dc.w Obj17_Display-Obj17_Index
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            Obj17_Main:				; XREF: Obj17_Index
0000847E 5428 0024                  		addq.b	#2,$24(a0)
00008482 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000848A 317C 4398 0002             		move.w	#$4398,2(a0)
00008490 117C 0007 0022             		move.b	#7,$22(a0)
00008496 117C 0004 0001             		move.b	#4,1(a0)
0000849C 117C 0003 0018             		move.b	#3,$18(a0)
000084A2 117C 0008 0019             		move.b	#8,$19(a0)
000084A8 3428 000C                  		move.w	$C(a0),d2
000084AC 3628 0008                  		move.w	8(a0),d3
000084B0 1810                       		move.b	0(a0),d4
000084B2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084B6 7200                       		moveq	#0,d1
000084B8 1212                       		move.b	(a2),d1		; move a2 to d1
000084BA 14FC 0000                  		move.b	#0,(a2)+
000084BE 3001                       		move.w	d1,d0
000084C0 E248                       		lsr.w	#1,d0
000084C2 E948                       		lsl.w	#4,d0
000084C4 9640                       		sub.w	d0,d3
000084C6 5501                       		subq.b	#2,d1
000084C8 6500                       		bcs.s	Obj17_Action
000084CA 7C00                       		moveq	#0,d6
000084CC                            
000084CC                            Obj17_MakeHelix:
000084CC 6100 0000                  		bsr.w	SingleObjLoad
000084D0 6600                       		bne.s	Obj17_Action
000084D2 5228 0028                  		addq.b	#1,$28(a0)
000084D6 3A09                       		move.w	a1,d5
000084D8 0445 D000                  		subi.w	#$D000,d5
000084DC EC4D                       		lsr.w	#6,d5
000084DE 0245 007F                  		andi.w	#$7F,d5
000084E2 14C5                       		move.b	d5,(a2)+
000084E4 137C 0008 0024             		move.b	#8,$24(a1)
000084EA 1284                       		move.b	d4,0(a1)
000084EC 3342 000C                  		move.w	d2,$C(a1)
000084F0 3343 0008                  		move.w	d3,8(a1)
000084F4 2368 0004 0004             		move.l	4(a0),4(a1)
000084FA 337C 4398 0002             		move.w	#$4398,2(a1)
00008500 137C 0004 0001             		move.b	#4,1(a1)
00008506 137C 0003 0018             		move.b	#3,$18(a1)
0000850C 137C 0008 0019             		move.b	#8,$19(a1)
00008512 1346 003E                  		move.b	d6,$3E(a1)
00008516 5206                       		addq.b	#1,d6
00008518 0206 0007                  		andi.b	#7,d6
0000851C 0643 0010                  		addi.w	#$10,d3
00008520 B668 0008                  		cmp.w	8(a0),d3
00008524 6600                       		bne.s	loc_7D78
00008526 1146 003E                  		move.b	d6,$3E(a0)
0000852A 5206                       		addq.b	#1,d6
0000852C 0206 0007                  		andi.b	#7,d6
00008530 0643 0010                  		addi.w	#$10,d3
00008534 5228 0028                  		addq.b	#1,$28(a0)
00008538                            
00008538                            loc_7D78:
00008538 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000853C                            
0000853C                            Obj17_Action:				; XREF: Obj17_Index
0000853C 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008540 6100 0000                  		bsr.w	DisplaySprite
00008544 6000 0000                  		bra.w	Obj17_ChkDel
00008548                            
00008548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008548                            
00008548                            
00008548                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008548 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000854C 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008552 D028 003E                  		add.b	$3E(a0),d0
00008556 0200 0007                  		andi.b	#7,d0
0000855A 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000855E 6600                       		bne.s	locret_7DA6
00008560 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008566                            
00008566                            locret_7DA6:
00008566 4E75                       		rts	
00008568                            ; End of function Obj17_RotateSpikes
00008568                            
00008568                            ; ===========================================================================
00008568                            
00008568                            Obj17_ChkDel:				; XREF: Obj17_Action
00008568 3028 0008                  		move.w	8(a0),d0
0000856C 0240 FF80                  		andi.w	#$FF80,d0
00008570 3238 F700                  		move.w	($FFFFF700).w,d1
00008574 0441 0080                  		subi.w	#$80,d1
00008578 0241 FF80                  		andi.w	#$FF80,d1
0000857C 9041                       		sub.w	d1,d0
0000857E 0C40 0280                  		cmpi.w	#$280,d0
00008582 6200 0000                  		bhi.w	Obj17_DelAll
00008586 4E75                       		rts	
00008588                            ; ===========================================================================
00008588                            
00008588                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008588 7400                       		moveq	#0,d2
0000858A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000858E 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008590 5502                       		subq.b	#2,d2
00008592 6500                       		bcs.s	Obj17_Delete
00008594                            
00008594                            Obj17_DelLoop:
00008594 7000                       		moveq	#0,d0
00008596 101A                       		move.b	(a2)+,d0
00008598 ED48                       		lsl.w	#6,d0
0000859A 0680 00FF D000             		addi.l	#$FFD000,d0
000085A0 2240                       		movea.l	d0,a1
000085A2 6100 0000                  		bsr.w	DeleteObject2	; delete object
000085A6 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085AA                            
000085AA                            Obj17_Delete:				; XREF: Obj17_Index
000085AA 6100 0000                  		bsr.w	DeleteObject
000085AE 4E75                       		rts	
000085B0                            ; ===========================================================================
000085B0                            
000085B0                            Obj17_Display:				; XREF: Obj17_Index
000085B0 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085B4 6000 0000                  		bra.w	DisplaySprite
000085B8                            ; ===========================================================================
000085B8                            ; ---------------------------------------------------------------------------
000085B8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085B8                            ; ---------------------------------------------------------------------------
000085B8                            Map_obj17:
000085B8                            	include "_maps\obj17.asm"
000085B8                            ; ---------------------------------------------------------------------------
000085B8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085B8                            ; ---------------------------------------------------------------------------
000085B8 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085BC 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000085C0 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000085C4 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000085C8 01                         byte_7E08:	dc.b 1
000085C9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000085CE 01                         byte_7E0E:	dc.b 1
000085CF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000085D4 01                         byte_7E14:	dc.b 1
000085D5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000085DA 01                         byte_7E1A:	dc.b 1
000085DB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000085E0 01                         byte_7E20:	dc.b 1
000085E1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000085E6 01                         byte_7E26:	dc.b 1
000085E7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000085EC 01                         byte_7E2C:	dc.b 1
000085ED F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000085F2                            		even
000085F2                            		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj18:					; XREF: Obj_Index
000085F2 7000                       		moveq	#0,d0
000085F4 1028 0024                  		move.b	$24(a0),d0
000085F8 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000085FC 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008600                            ; ===========================================================================
00008600 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008602 0000                       		dc.w Obj18_Solid-Obj18_Index
00008604 0000                       		dc.w Obj18_Action2-Obj18_Index
00008606 0000                       		dc.w Obj18_Delete-Obj18_Index
00008608 0000                       		dc.w Obj18_Action-Obj18_Index
0000860A                            ; ===========================================================================
0000860A                            
0000860A                            Obj18_Main:				; XREF: Obj18_Index
0000860A 5428 0024                  		addq.b	#2,$24(a0)
0000860E 317C 4000 0002             		move.w	#$4000,2(a0)
00008614 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000861C 117C 0020 0019             		move.b	#$20,$19(a0)
00008622 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008628 6600                       		bne.s	Obj18_NotSYZ
0000862A 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008632 117C 0020 0019             		move.b	#$20,$19(a0)
00008638                            
00008638                            Obj18_NotSYZ:
00008638 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000863E 6600                       		bne.s	Obj18_NotSLZ
00008640 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008648 117C 0020 0019             		move.b	#$20,$19(a0)
0000864E 317C 4000 0002             		move.w	#$4000,2(a0)
00008654 117C 0003 0028             		move.b	#3,$28(a0)
0000865A                            
0000865A                            Obj18_NotSLZ:
0000865A 117C 0004 0001             		move.b	#4,1(a0)
00008660 117C 0004 0018             		move.b	#4,$18(a0)
00008666 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000866C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008672 3168 0008 0032             		move.w	8(a0),$32(a0)
00008678 317C 0080 0026             		move.w	#$80,$26(a0)
0000867E 7200                       		moveq	#0,d1
00008680 1028 0028                  		move.b	$28(a0),d0
00008684 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008688 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000868A 5201                       		addq.b	#1,d1		; use frame #1
0000868C 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008692                            
00008692                            Obj18_SetFrame:
00008692 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008696                            
00008696                            Obj18_Solid:				; XREF: Obj18_Index
00008696 4A28 0038                  		tst.b	$38(a0)
0000869A 6700                       		beq.s	loc_7EE0
0000869C 5928 0038                  		subq.b	#4,$38(a0)
000086A0                            
000086A0                            loc_7EE0:
000086A0 7200                       		moveq	#0,d1
000086A2 1228 0019                  		move.b	$19(a0),d1
000086A6 6100 F56C                  		bsr.w	PlatformObject
000086AA                            
000086AA                            Obj18_Action:				; XREF: Obj18_Index
000086AA 6100 0000                  		bsr.w	Obj18_Move
000086AE 6100 0000                  		bsr.w	Obj18_Nudge
000086B2 6100 0000                  		bsr.w	DisplaySprite
000086B6 6000 0000                  		bra.w	Obj18_ChkDel
000086BA                            ; ===========================================================================
000086BA                            
000086BA                            Obj18_Action2:				; XREF: Obj18_Index
000086BA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000086C0 6700                       		beq.s	loc_7F06
000086C2 5828 0038                  		addq.b	#4,$38(a0)
000086C6                            
000086C6                            loc_7F06:
000086C6 7200                       		moveq	#0,d1
000086C8 1228 0019                  		move.b	$19(a0),d1
000086CC 6100 F6BA                  		bsr.w	ExitPlatform
000086D0 3F28 0008                  		move.w	8(a0),-(sp)
000086D4 6100 0000                  		bsr.w	Obj18_Move
000086D8 6100 0000                  		bsr.w	Obj18_Nudge
000086DC 341F                       		move.w	(sp)+,d2
000086DE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000086E2 6100 0000                  		bsr.w	DisplaySprite
000086E6 6000 0000                  		bra.w	Obj18_ChkDel
000086EA                            
000086EA 4E75                       		rts
000086EC                            
000086EC                            ; ---------------------------------------------------------------------------
000086EC                            ; Subroutine to	move platform slightly when you	stand on it
000086EC                            ; ---------------------------------------------------------------------------
000086EC                            
000086EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086EC                            
000086EC                            
000086EC                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000086EC 1028 0038                  		move.b	$38(a0),d0
000086F0 6100 A642                  		bsr.w	CalcSine
000086F4 323C 0400                  		move.w	#$400,d1
000086F8 C1C1                       		muls.w	d1,d0
000086FA 4840                       		swap	d0
000086FC D068 002C                  		add.w	$2C(a0),d0
00008700 3140 000C                  		move.w	d0,$C(a0)
00008704 4E75                       		rts	
00008706                            ; End of function Obj18_Nudge
00008706                            
00008706                            ; ---------------------------------------------------------------------------
00008706                            ; Subroutine to	move platforms
00008706                            ; ---------------------------------------------------------------------------
00008706                            
00008706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008706                            
00008706                            
00008706                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008706 7000                       		moveq	#0,d0
00008708 1028 0028                  		move.b	$28(a0),d0
0000870C 0240 000F                  		andi.w	#$F,d0
00008710 D040                       		add.w	d0,d0
00008712 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008716 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000871A                            ; End of function Obj18_Move
0000871A                            
0000871A                            ; ===========================================================================
0000871A 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000871E 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008722 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008726 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000872A 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000872E 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008732 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008734                            ; ===========================================================================
00008734                            
00008734                            Obj18_Type00:
00008734 4E75                       		rts			; platform 00 doesn't move
00008736                            ; ===========================================================================
00008736                            
00008736                            Obj18_Type05:
00008736 3028 0032                  		move.w	$32(a0),d0
0000873A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000873E 4401                       		neg.b	d1		; reverse platform-motion
00008740 0601 0040                  		addi.b	#$40,d1
00008744 6000                       		bra.s	Obj18_01_Move
00008746                            ; ===========================================================================
00008746                            
00008746                            Obj18_Type01:
00008746 3028 0032                  		move.w	$32(a0),d0
0000874A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000874E 0401 0040                  		subi.b	#$40,d1
00008752                            
00008752                            Obj18_01_Move:
00008752 4881                       		ext.w	d1
00008754 D041                       		add.w	d1,d0
00008756 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000875A 6000 0000                  		bra.w	Obj18_ChgMotion
0000875E                            ; ===========================================================================
0000875E                            
0000875E                            Obj18_Type0C:
0000875E 3028 0034                  		move.w	$34(a0),d0
00008762 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008766 4401                       		neg.b	d1		; reverse platform-motion
00008768 0601 0030                  		addi.b	#$30,d1
0000876C 6000                       		bra.s	Obj18_02_Move
0000876E                            ; ===========================================================================
0000876E                            
0000876E                            Obj18_Type0B:
0000876E 3028 0034                  		move.w	$34(a0),d0
00008772 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008776 0401 0030                  		subi.b	#$30,d1
0000877A 6000                       		bra.s	Obj18_02_Move
0000877C                            ; ===========================================================================
0000877C                            
0000877C                            Obj18_Type06:
0000877C 3028 0034                  		move.w	$34(a0),d0
00008780 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008784 4401                       		neg.b	d1		; reverse platform-motion
00008786 0601 0040                  		addi.b	#$40,d1
0000878A 6000                       		bra.s	Obj18_02_Move
0000878C                            ; ===========================================================================
0000878C                            
0000878C                            Obj18_Type02:
0000878C 3028 0034                  		move.w	$34(a0),d0
00008790 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008794 0401 0040                  		subi.b	#$40,d1
00008798                            
00008798                            Obj18_02_Move:
00008798 4881                       		ext.w	d1
0000879A D041                       		add.w	d1,d0
0000879C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000087A0 6000 0000                  		bra.w	Obj18_ChgMotion
000087A4                            ; ===========================================================================
000087A4                            
000087A4                            Obj18_Type03:
000087A4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087A8 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087AA 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087B0 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087B2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087B8                            
000087B8                            Obj18_03_NoMove:
000087B8 4E75                       		rts	
000087BA                            ; ===========================================================================
000087BA                            
000087BA                            Obj18_03_Wait:
000087BA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000087BE 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000087C0 317C 0020 003A             		move.w	#32,$3A(a0)
000087C6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000087CA 4E75                       		rts	
000087CC                            ; ===========================================================================
000087CC                            
000087CC                            Obj18_Type04:
000087CC 4A68 003A                  		tst.w	$3A(a0)
000087D0 6700                       		beq.s	loc_8048
000087D2 5368 003A                  		subq.w	#1,$3A(a0)
000087D6 6600                       		bne.s	loc_8048
000087D8 0828 0003 0022             		btst	#3,$22(a0)
000087DE 6700                       		beq.s	loc_8042
000087E0 08E9 0001 0022             		bset	#1,$22(a1)
000087E6 08A9 0003 0022             		bclr	#3,$22(a1)
000087EC 137C 0002 0024             		move.b	#2,$24(a1)
000087F2 08A8 0003 0022             		bclr	#3,$22(a0)
000087F8 4228 0025                  		clr.b	$25(a0)
000087FC 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008802                            
00008802                            loc_8042:
00008802 117C 0008 0024             		move.b	#8,$24(a0)
00008808                            
00008808                            loc_8048:
00008808 2628 002C                  		move.l	$2C(a0),d3
0000880C 3028 0012                  		move.w	$12(a0),d0
00008810 48C0                       		ext.l	d0
00008812 E180                       		asl.l	#8,d0
00008814 D680                       		add.l	d0,d3
00008816 2143 002C                  		move.l	d3,$2C(a0)
0000881A 0668 0038 0012             		addi.w	#$38,$12(a0)
00008820 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008824 0640 00E0                  		addi.w	#$E0,d0
00008828 B068 002C                  		cmp.w	$2C(a0),d0
0000882C 6400                       		bcc.s	locret_8074
0000882E 117C 0006 0024             		move.b	#6,$24(a0)
00008834                            
00008834                            locret_8074:
00008834 4E75                       		rts	
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj18_Type07:
00008836 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000883A 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000883C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008840 7000                       		moveq	#0,d0
00008842 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008846 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008848 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000884C 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000884E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008854                            
00008854                            Obj18_07_NoMove:
00008854 4E75                       		rts	
00008856                            ; ===========================================================================
00008856                            
00008856                            Obj18_07_Wait:
00008856 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000885A 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000885C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008860 4E75                       		rts	
00008862                            ; ===========================================================================
00008862                            
00008862                            Obj18_Type08:
00008862 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008866 3028 0034                  		move.w	$34(a0),d0
0000886A 0440 0200                  		subi.w	#$200,d0
0000886E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008872 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008874 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008878                            
00008878                            Obj18_08_NoStop:
00008878 4E75                       		rts	
0000887A                            ; ===========================================================================
0000887A                            
0000887A                            Obj18_Type0A:
0000887A 3028 0034                  		move.w	$34(a0),d0
0000887E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008882 0401 0040                  		subi.b	#$40,d1
00008886 4881                       		ext.w	d1
00008888 E241                       		asr.w	#1,d1
0000888A D041                       		add.w	d1,d0
0000888C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008890                            
00008890                            Obj18_ChgMotion:
00008890 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008896 4E75                       		rts	
00008898                            ; ===========================================================================
00008898                            
00008898                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008898 3028 0032                  		move.w	$32(a0),d0
0000889C 0240 FF80                  		andi.w	#$FF80,d0
000088A0 3238 F700                  		move.w	($FFFFF700).w,d1
000088A4 0441 0080                  		subi.w	#$80,d1
000088A8 0241 FF80                  		andi.w	#$FF80,d1
000088AC 9041                       		sub.w	d1,d0
000088AE 0C40 0280                  		cmpi.w	#$280,d0
000088B2 6200                       		bhi.s	Obj18_Delete
000088B4 4E75                       		rts	
000088B6                            ; ===========================================================================
000088B6                            
000088B6                            Obj18_Delete:				; XREF: Obj18_Index
000088B6 6000 0000                  		bra.w	DeleteObject
000088BA                            ; ===========================================================================
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Sprite mappings - unused
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            Map_obj18x:
000088BA                            	include "_maps\obj18x.asm"
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Sprite mappings - unused
000088BA                            ; ---------------------------------------------------------------------------
000088BA 0000                       		dc.w byte_80FE-Map_obj18x
000088BC 0000                       		dc.w byte_8109-Map_obj18x
000088BE 02                         byte_80FE:	dc.b 2
000088BF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000088C4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000088C9 0A                         byte_8109:	dc.b $A
000088CA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000088CF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000088D4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000088D9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000088DE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000088E3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000088E8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000088ED 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000088F2 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000088F7 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000088FC                            		even
000088FC                            		even
000088FC                            
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - GHZ	platforms
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            Map_obj18:
000088FC                            	include "_maps\obj18ghz.asm"
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - GHZ	platforms
000088FC                            ; ---------------------------------------------------------------------------
000088FC 0000                       		dc.w byte_8140-Map_obj18
000088FE 0000                       		dc.w byte_8155-Map_obj18
00008900 04                         byte_8140:	dc.b 4
00008901 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008906 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000890B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008910 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008915 0A                         byte_8155:	dc.b $A
00008916 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000891B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008920 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008925 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000892A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000892F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008934 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008939 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000893E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008943 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008948                            		even
00008948                            		even
00008948                            
00008948                            ; ---------------------------------------------------------------------------
00008948                            ; Sprite mappings - SYZ	platforms
00008948                            ; ---------------------------------------------------------------------------
00008948                            Map_obj18a:
00008948                            	include "_maps\obj18syz.asm"
00008948                            ; ---------------------------------------------------------------------------
00008948                            ; Sprite mappings - SYZ	platforms
00008948                            ; ---------------------------------------------------------------------------
00008948 0000                       		dc.w byte_818A-Map_obj18a
0000894A 03                         byte_818A:	dc.b 3
0000894B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008950 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008955 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000895A                            		even
0000895A                            		even
0000895A                            
0000895A                            ; ---------------------------------------------------------------------------
0000895A                            ; Sprite mappings - SLZ	platforms
0000895A                            ; ---------------------------------------------------------------------------
0000895A                            Map_obj18b:
0000895A                            	include "_maps\obj18slz.asm"
0000895A                            ; ---------------------------------------------------------------------------
0000895A                            ; Sprite mappings - SLZ	platforms
0000895A                            ; ---------------------------------------------------------------------------
0000895A 0000                       		dc.w byte_819C-Map_obj18b
0000895C 02                         byte_819C:	dc.b 2
0000895D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008962 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008968 00                         		even
00008968 00                         		even
00008968                            
00008968                            ; ===========================================================================
00008968                            ; ---------------------------------------------------------------------------
00008968                            ; Object 19 - Pearto bombs
00008968                            ; ---------------------------------------------------------------------------
00008968                            Obj19:					; XREF: Obj_Index
00008968 7000                       		moveq	#0,d0
0000896A 1028 0024                  		move.b	$24(a0),d0
0000896E 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008972 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008976                            ; ---------------------------------------------------------------------------
00008976                            
00008976 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
0000897C                            ; ---------------------------------------------------------------------------
0000897C                            
0000897C                            loc_7076:
0000897C 5428 0024                  		addq.b	#2,$24(a0)
00008980 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008988 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0000898E 117C 0004 0001             		move.b	#4,1(a0)
00008994 117C 0003 0019             		move.b	#3,$19(a0)
0000899A 117C 0087 0020             		move.b	#$87,$20(a0)
000089A0 117C 0008 0018             		move.b	#8,$18(a0)
000089A6 317C 0018 0030             		move.w	#$18,$30(a0)
000089AC                            
000089AC                            loc_70A6:
000089AC 0828 0007 0022             		btst	#7,$22(a0)
000089B2 6600                       		bne.s	loc_70C2
000089B4 4A68 0030                  		tst.w	$30(a0)
000089B8 6600                       		bne.s	loc_70D2
000089BA 4EB9 0000 0000             		jsr	ObjHitFloor
000089C0 4A41                       		tst.w	d1
000089C2 6A00                       		bpl.s	loc_70D6
000089C4 D368 000C                  		add.w	d1,$C(a0)
000089C8                            
000089C8                            loc_70C2:
000089C8 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000089CC 117C 0000 0024             		move.b	#0,$24(a0)
000089D2                            ; ---------------------------------------------------------------------------
000089D2                            
000089D2                            loc_70D2:
000089D2 5368 0030                  		subq.w	#1,$30(a0)
000089D6                            
000089D6                            loc_70D6:
000089D6 6100 0000                  		bsr.w	ObjectFall
000089DA 6100 0000                  		bsr.w	DisplaySprite
000089DE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000089E2 0640 00E0                  		addi.w	#$E0,d0
000089E6 B068 000C                  		cmp.w	$C(a0),d0
000089EA 6500                       		bcs.s	loc_70EE
000089EC 4E75                       		rts
000089EE                            ; ---------------------------------------------------------------------------
000089EE                            
000089EE                            loc_70EE:
000089EE 6100 0000                  		bsr.w	DeleteObject
000089F2 4E75                       		rts
000089F4                            		
000089F4                            Map_obj19:
000089F4                            	include "_maps\obj19.asm"
000089F4                            Map_02b4:
000089F4 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000089F6 01                         Map_02b4_2: 	dc.b $1
000089F7 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000089FC                            	even
000089FC                            	even
000089FC                            ; ===========================================================================
000089FC                            ; ---------------------------------------------------------------------------
000089FC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089FC                            ; ---------------------------------------------------------------------------
000089FC                            Map_obj48:
000089FC                            	include "_maps\obj48.asm"
000089FC                            ; ---------------------------------------------------------------------------
000089FC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089FC                            ; ---------------------------------------------------------------------------
000089FC 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008A00 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008A04 06                         byte_81B2:	dc.b 6
00008A05 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A0A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A0F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A14 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A19 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A1E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A23 04                         byte_81D1:	dc.b 4
00008A24 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A29 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A2E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A33 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A38 04                         byte_81E6:	dc.b 4
00008A39 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A3E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A43 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A48 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A4D 04                         byte_81FB:	dc.b 4
00008A4E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A53 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A58 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A5D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008A62                            		even
00008A62                            		even
00008A62                            
00008A62                            ; ===========================================================================
00008A62                            ; ---------------------------------------------------------------------------
00008A62                            ; Object 1A - GHZ collapsing ledge
00008A62                            ; ---------------------------------------------------------------------------
00008A62                            
00008A62                            Obj1A:					; XREF: Obj_Index
00008A62 7000                       		moveq	#0,d0
00008A64 1028 0024                  		move.b	$24(a0),d0
00008A68 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008A6C 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008A70                            ; ===========================================================================
00008A70 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008A74 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008A78 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008A7C                            ; ===========================================================================
00008A7C                            
00008A7C                            Obj1A_Main:				; XREF: Obj1A_Index
00008A7C 5428 0024                  		addq.b	#2,$24(a0)
00008A80 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008A88 317C 4000 0002             		move.w	#$4000,2(a0)
00008A8E 0028 0004 0001             		ori.b	#4,1(a0)
00008A94 117C 0004 0018             		move.b	#4,$18(a0)
00008A9A 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008AA0 117C 0064 0019             		move.b	#$64,$19(a0)
00008AA6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AAC 117C 0038 0016             		move.b	#$38,$16(a0)
00008AB2 08E8 0004 0001             		bset	#4,1(a0)
00008AB8                            
00008AB8                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AB8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008ABC 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008ABE 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008AC2 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008AC6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008ACA                            
00008ACA                            Obj1A_Slope:
00008ACA 323C 0030                  		move.w	#$30,d1
00008ACE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AD4 6100 F212                  		bsr.w	SlopeObject
00008AD8 6000 0000                  		bra.w	MarkObjGone
00008ADC                            ; ===========================================================================
00008ADC                            
00008ADC                            Obj1A_Touch:				; XREF: Obj1A_Index
00008ADC 4A28 0038                  		tst.b	$38(a0)
00008AE0 6700 0000                  		beq.w	loc_847A
00008AE4 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AEA 5328 0038                  		subq.b	#1,$38(a0)
00008AEE                            
00008AEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AEE                            
00008AEE                            
00008AEE                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008AEE 323C 0030                  		move.w	#$30,d1
00008AF2 6100 F294                  		bsr.w	ExitPlatform
00008AF6 323C 0030                  		move.w	#$30,d1
00008AFA 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B00 3428 0008                  		move.w	8(a0),d2
00008B04 6100 0000                  		bsr.w	SlopeObject2
00008B08 6000 0000                  		bra.w	MarkObjGone
00008B0C                            ; End of function Obj1A_WalkOff
00008B0C                            
00008B0C                            ; ===========================================================================
00008B0C                            
00008B0C                            Obj1A_Display:				; XREF: Obj1A_Index
00008B0C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B10 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B12 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B16 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B1A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B1E 6000 0000                  		bra.w	DisplaySprite
00008B22                            ; ===========================================================================
00008B22                            
00008B22                            loc_82D0:				; XREF: Obj1A_Display
00008B22 5328 0038                  		subq.b	#1,$38(a0)
00008B26 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B2A 43F8 D000                  		lea	($FFFFD000).w,a1
00008B2E 0829 0003 0022             		btst	#3,$22(a1)
00008B34 6700                       		beq.s	loc_82FC
00008B36 4A28 0038                  		tst.b	$38(a0)
00008B3A 6600                       		bne.s	locret_8308
00008B3C 08A9 0003 0022             		bclr	#3,$22(a1)
00008B42 08A9 0005 0022             		bclr	#5,$22(a1)
00008B48 137C 0001 001D             		move.b	#1,$1D(a1)
00008B4E                            
00008B4E                            loc_82FC:
00008B4E 117C 0000 003A             		move.b	#0,$3A(a0)
00008B54 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B5A                            
00008B5A                            locret_8308:
00008B5A 4E75                       		rts	
00008B5C                            ; ===========================================================================
00008B5C                            
00008B5C                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B5C 6100 0000                  		bsr.w	ObjectFall
00008B60 6100 0000                  		bsr.w	DisplaySprite
00008B64 4A28 0001                  		tst.b	1(a0)
00008B68 6A00                       		bpl.s	Obj1A_Delete
00008B6A 4E75                       		rts	
00008B6C                            ; ===========================================================================
00008B6C                            
00008B6C                            Obj1A_Delete:				; XREF: Obj1A_Index
00008B6C 6100 0000                  		bsr.w	DeleteObject
00008B70 4E75                       		rts	
00008B72                            ; ===========================================================================
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            
00008B72                            Obj53:					; XREF: Obj_Index
00008B72 7000                       		moveq	#0,d0
00008B74 1028 0024                  		move.b	$24(a0),d0
00008B78 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008B7C 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008B80                            ; ===========================================================================
00008B80 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008B84 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008B88 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008B8C                            ; ===========================================================================
00008B8C                            
00008B8C                            Obj53_Main:				; XREF: Obj53_Index
00008B8C 5428 0024                  		addq.b	#2,$24(a0)
00008B90 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008B98 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008B9E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008BA4 6600                       		bne.s	Obj53_NotSLZ
00008BA6 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BAC 5428 001A                  		addq.b	#2,$1A(a0)
00008BB0                            
00008BB0                            Obj53_NotSLZ:
00008BB0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BB6 6600                       		bne.s	Obj53_NotSBZ
00008BB8 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008BBE                            
00008BBE                            Obj53_NotSBZ:
00008BBE 0028 0004 0001             		ori.b	#4,1(a0)
00008BC4 117C 0004 0018             		move.b	#4,$18(a0)
00008BCA 117C 0007 0038             		move.b	#7,$38(a0)
00008BD0 117C 0044 0019             		move.b	#$44,$19(a0)
00008BD6                            
00008BD6                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008BD6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008BDA 6700                       		beq.s	Obj53_Solid	; if not, branch
00008BDC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008BE0 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008BE4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008BE8                            
00008BE8                            Obj53_Solid:
00008BE8 323C 0020                  		move.w	#$20,d1
00008BEC 6100 F026                  		bsr.w	PlatformObject
00008BF0 4A28 0028                  		tst.b	$28(a0)
00008BF4 6A00                       		bpl.s	Obj53_MarkAsGone
00008BF6 0829 0003 0022             		btst	#3,$22(a1)
00008BFC 6700                       		beq.s	Obj53_MarkAsGone
00008BFE 08A8 0000 0001             		bclr	#0,1(a0)
00008C04 3029 0008                  		move.w	8(a1),d0
00008C08 9068 0008                  		sub.w	8(a0),d0
00008C0C 6400                       		bcc.s	Obj53_MarkAsGone
00008C0E 08E8 0000 0001             		bset	#0,1(a0)
00008C14                            
00008C14                            Obj53_MarkAsGone:
00008C14 6000 0000                  		bra.w	MarkObjGone
00008C18                            ; ===========================================================================
00008C18                            
00008C18                            Obj53_Touch:				; XREF: Obj53_Index
00008C18 4A28 0038                  		tst.b	$38(a0)
00008C1C 6700 0000                  		beq.w	loc_8458
00008C20 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C26 5328 0038                  		subq.b	#1,$38(a0)
00008C2A                            
00008C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C2A                            
00008C2A                            
00008C2A                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C2A 323C 0020                  		move.w	#$20,d1
00008C2E 6100 F158                  		bsr.w	ExitPlatform
00008C32 3428 0008                  		move.w	8(a0),d2
00008C36 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C3A 6000 0000                  		bra.w	MarkObjGone
00008C3E                            ; End of function Obj53_WalkOff
00008C3E                            
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            Obj53_Display:				; XREF: Obj53_Index
00008C3E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C42 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C44 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C48 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C4C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C50 6000 0000                  		bra.w	DisplaySprite
00008C54                            ; ===========================================================================
00008C54                            
00008C54                            loc_8402:
00008C54 5328 0038                  		subq.b	#1,$38(a0)
00008C58 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C5C 43F8 D000                  		lea	($FFFFD000).w,a1
00008C60 0829 0003 0022             		btst	#3,$22(a1)
00008C66 6700                       		beq.s	loc_842E
00008C68 4A28 0038                  		tst.b	$38(a0)
00008C6C 6600                       		bne.s	locret_843A
00008C6E 08A9 0003 0022             		bclr	#3,$22(a1)
00008C74 08A9 0005 0022             		bclr	#5,$22(a1)
00008C7A 137C 0001 001D             		move.b	#1,$1D(a1)
00008C80                            
00008C80                            loc_842E:
00008C80 117C 0000 003A             		move.b	#0,$3A(a0)
00008C86 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008C8C                            
00008C8C                            locret_843A:
00008C8C 4E75                       		rts	
00008C8E                            ; ===========================================================================
00008C8E                            
00008C8E                            Obj53_TimeZero:				; XREF: Obj53_Display
00008C8E 6100 0000                  		bsr.w	ObjectFall
00008C92 6100 0000                  		bsr.w	DisplaySprite
00008C96 4A28 0001                  		tst.b	1(a0)
00008C9A 6A00                       		bpl.s	Obj53_Delete
00008C9C 4E75                       		rts	
00008C9E                            ; ===========================================================================
00008C9E                            
00008C9E                            Obj53_Delete:				; XREF: Obj53_Index
00008C9E 6100 0000                  		bsr.w	DeleteObject
00008CA2 4E75                       		rts	
00008CA4                            ; ===========================================================================
00008CA4                            
00008CA4                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008CA4 117C 0000 003A             		move.b	#0,$3A(a0)
00008CAA                            
00008CAA                            loc_8458:				; XREF: Obj53_Touch
00008CAA 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CB0 0828 0000 0028             		btst	#0,$28(a0)
00008CB6 6700                       		beq.s	loc_846C
00008CB8 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008CBE                            
00008CBE                            loc_846C:
00008CBE 7207                       		moveq	#7,d1
00008CC0 5228 001A                  		addq.b	#1,$1A(a0)
00008CC4 6000                       		bra.s	loc_8486
00008CC6                            ; ===========================================================================
00008CC6                            
00008CC6                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008CC6 117C 0000 003A             		move.b	#0,$3A(a0)
00008CCC                            
00008CCC                            loc_847A:				; XREF: Obj1A_Touch
00008CCC 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008CD2 7218                       		moveq	#$18,d1
00008CD4 5428 001A                  		addq.b	#2,$1A(a0)
00008CD8                            
00008CD8                            loc_8486:				; XREF: Obj53_Collapse
00008CD8 7000                       		moveq	#0,d0
00008CDA 1028 001A                  		move.b	$1A(a0),d0
00008CDE D040                       		add.w	d0,d0
00008CE0 2668 0004                  		movea.l	4(a0),a3
00008CE4 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008CE8 524B                       		addq.w	#1,a3
00008CEA 08E8 0005 0001             		bset	#5,1(a0)
00008CF0 1810                       		move.b	0(a0),d4
00008CF2 1A28 0001                  		move.b	1(a0),d5
00008CF6 2248                       		movea.l	a0,a1
00008CF8 6000                       		bra.s	loc_84B2
00008CFA                            ; ===========================================================================
00008CFA                            
00008CFA                            loc_84AA:
00008CFA 6100 0000                  		bsr.w	SingleObjLoad
00008CFE 6600                       		bne.s	loc_84F2
00008D00 5A4B                       		addq.w	#5,a3
00008D02                            
00008D02                            loc_84B2:
00008D02 137C 0006 0024             		move.b	#6,$24(a1)
00008D08 1284                       		move.b	d4,0(a1)
00008D0A 234B 0004                  		move.l	a3,4(a1)
00008D0E 1345 0001                  		move.b	d5,1(a1)
00008D12 3368 0008 0008             		move.w	8(a0),8(a1)
00008D18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D1E 3368 0002 0002             		move.w	2(a0),2(a1)
00008D24 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D2A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D30 135C 0038                  		move.b	(a4)+,$38(a1)
00008D34 B3C8                       		cmpa.l	a0,a1
00008D36 6400                       		bcc.s	loc_84EE
00008D38 6100 0000                  		bsr.w	DisplaySprite2
00008D3C                            
00008D3C                            loc_84EE:
00008D3C 51C9 FFBC                  		dbf	d1,loc_84AA
00008D40                            
00008D40                            loc_84F2:
00008D40 6100 0000                  		bsr.w	DisplaySprite
00008D44 303C 00B9                  		move.w	#$B9,d0
00008D48 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D4E                            ; ===========================================================================
00008D4E                            ; ---------------------------------------------------------------------------
00008D4E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D4E                            ; ---------------------------------------------------------------------------
00008D4E 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008D5E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008D68 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008D70 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008D78                            
00008D78                            ; ---------------------------------------------------------------------------
00008D78                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008D78                            ; ---------------------------------------------------------------------------
00008D78                            
00008D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D78                            
00008D78                            
00008D78                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008D78 43F8 D000                  		lea	($FFFFD000).w,a1
00008D7C 0829 0003 0022             		btst	#3,$22(a1)
00008D82 6700                       		beq.s	locret_856E
00008D84 3029 0008                  		move.w	8(a1),d0
00008D88 9068 0008                  		sub.w	8(a0),d0
00008D8C D041                       		add.w	d1,d0
00008D8E E248                       		lsr.w	#1,d0
00008D90 0828 0000 0001             		btst	#0,1(a0)
00008D96 6700                       		beq.s	loc_854E
00008D98 4640                       		not.w	d0
00008D9A D041                       		add.w	d1,d0
00008D9C                            
00008D9C                            loc_854E:
00008D9C 7200                       		moveq	#0,d1
00008D9E 1232 0000                  		move.b	(a2,d0.w),d1
00008DA2 3028 000C                  		move.w	$C(a0),d0
00008DA6 9041                       		sub.w	d1,d0
00008DA8 7200                       		moveq	#0,d1
00008DAA 1229 0016                  		move.b	$16(a1),d1
00008DAE 9041                       		sub.w	d1,d0
00008DB0 3340 000C                  		move.w	d0,$C(a1)
00008DB4 9468 0008                  		sub.w	8(a0),d2
00008DB8 9569 0008                  		sub.w	d2,8(a1)
00008DBC                            
00008DBC                            locret_856E:
00008DBC 4E75                       		rts	
00008DBE                            ; End of function SlopeObject2
00008DBE                            
00008DBE                            ; ===========================================================================
00008DBE                            ; ---------------------------------------------------------------------------
00008DBE                            ; Collision data for GHZ collapsing ledge
00008DBE                            ; ---------------------------------------------------------------------------
00008DBE                            Obj1A_SlopeData:
00008DBE                            		incbin	misc\ghzledge.bin
00008DEE                            		even
00008DEE                            
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE                            ; Sprite mappings - GHZ	collapsing ledge
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE                            Map_obj1A:
00008DEE                            	include "_maps\obj1A.asm"
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE                            ; Sprite mappings - GHZ	collapsing ledge
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008DF2 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008DF6 10                         byte_85A8:	dc.b $10
00008DF7 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008DFC D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E01 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E06 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E0B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E10 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E15 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E1A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E1F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E24 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E29 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E2E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E33 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E38 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E3D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E42 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E47 10                         byte_85F9:	dc.b $10
00008E48 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E4D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E52 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E57 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E5C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E61 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E66 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E6B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E70 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E75 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E7A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E7F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E84 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E89 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E8E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E93 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E98 19                         byte_864A:	dc.b $19
00008E99 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008E9E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008EA3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EA8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EAD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EB2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EB7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EBC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008EC1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EC6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008ECB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008ED0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ED5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008EDA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008EDF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EE4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008EE9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008EEE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008EF3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EF8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008EFD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F02 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008F07 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F0C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F11 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F16 19                         byte_86C8:	dc.b $19
00008F17 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F1C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F21 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F26 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F2B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F30 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F35 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F3A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F3F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F44 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F49 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F4E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F53 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F58 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F5D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F62 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008F67 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F6C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F71 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F76 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F7B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F80 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008F85 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F8A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F8F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F94                            		even
00008F94                            		even
00008F94                            
00008F94                            ; ---------------------------------------------------------------------------
00008F94                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F94                            ; ---------------------------------------------------------------------------
00008F94                            Map_obj53:
00008F94                            	include "_maps\obj53.asm"
00008F94                            ; ---------------------------------------------------------------------------
00008F94                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F94                            ; ---------------------------------------------------------------------------
00008F94 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008F98 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008F9C 04                         byte_874E:	dc.b 4
00008F9D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008FA2 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008FA7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FAC 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FB1 08                         byte_8763:	dc.b 8
00008FB2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FB7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FBC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FC1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008FC6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008FCB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008FD0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008FD5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008FDA 04                         byte_878C:	dc.b 4
00008FDB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008FE0 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008FE5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FEA 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008FEF 08                         byte_87A1:	dc.b 8
00008FF0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FF5 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008FFA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FFF F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009004 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009009 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000900E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009013 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009018                            		even
00009018                            		even
00009018                            
00009018                            ; ===========================================================================
00009018                            ; ---------------------------------------------------------------------------
00009018                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009018                            ; ---------------------------------------------------------------------------
00009018                            
00009018                            Obj1C:					; XREF: Obj_Index
00009018 7000                       		moveq	#0,d0
0000901A 1028 0024                  		move.b	$24(a0),d0
0000901E 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009022 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009026                            ; ===========================================================================
00009026 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009028 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000902A                            ; ===========================================================================
0000902A                            
0000902A                            Obj1C_Main:				; XREF: Obj1C_Index
0000902A 5428 0024                  		addq.b	#2,$24(a0)
0000902E 7000                       		moveq	#0,d0
00009030 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009034 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009038 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000903C 2159 0004                  		move.l	(a1)+,4(a0)
00009040 3159 0002                  		move.w	(a1)+,2(a0)
00009044 0028 0004 0001             		ori.b	#4,1(a0)
0000904A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000904E 1159 0019                  		move.b	(a1)+,$19(a0)
00009052 1159 0018                  		move.b	(a1)+,$18(a0)
00009056 1159 0020                  		move.b	(a1)+,$20(a0)
0000905A                            
0000905A                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000905A 3028 0008                  		move.w	8(a0),d0
0000905E 0240 FF80                  		andi.w	#$FF80,d0
00009062 3238 F700                  		move.w	($FFFFF700).w,d1
00009066 0441 0080                  		subi.w	#$80,d1
0000906A 0241 FF80                  		andi.w	#$FF80,d1
0000906E 9041                       		sub.w	d1,d0
00009070 0C40 0280                  		cmpi.w	#$280,d0
00009074 6200 0000                  		bhi.w	DeleteObject
00009078 6000 0000                  		bra.w	DisplaySprite
0000907C                            ; ===========================================================================
0000907C                            ; ---------------------------------------------------------------------------
0000907C                            ; Variables for	object $1C are stored in an array
0000907C                            ; ---------------------------------------------------------------------------
0000907C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009080 44D8                       		dc.w $44D8		; VRAM setting
00009082 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009086 0000 0000                  		dc.l Map_obj1C
0000908A 44D8                       		dc.w $44D8
0000908C 0008 0200                  		dc.b 0,	8, 2, 0
00009090 0000 0000                  		dc.l Map_obj1C
00009094 44D8                       		dc.w $44D8
00009096 0008 0200                  		dc.b 0,	8, 2, 0
0000909A 0000 80FC                  		dc.l Map_obj11
0000909E 438E                       		dc.w $438E
000090A0 0110 0100                  		dc.b 1,	$10, 1,	0
000090A4                            ; ---------------------------------------------------------------------------
000090A4                            ; Sprite mappings - SLZ	lava thrower
000090A4                            ; ---------------------------------------------------------------------------
000090A4                            Map_obj1C:
000090A4                            	include "_maps\obj1C.asm"
000090A4                            ; ---------------------------------------------------------------------------
000090A4                            ; Sprite mappings - SLZ	lava thrower
000090A4                            ; ---------------------------------------------------------------------------
000090A4 0000                       		dc.w byte_8858-Map_obj1C
000090A6 01                         byte_8858:	dc.b 1
000090A7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090AC                            		even
000090AC                            		even
000090AC                            
000090AC                            ; ===========================================================================
000090AC                            ; ---------------------------------------------------------------------------
000090AC                            ; Object 1D - switch that activates when Sonic touches it
000090AC                            ; (this	is not used anywhere in	the game)
000090AC                            ; ---------------------------------------------------------------------------
000090AC                            
000090AC                            Obj1D:					; XREF: Obj_Index
000090AC 7000                       		moveq	#0,d0
000090AE 1028 0024                  		move.b	$24(a0),d0
000090B2 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090B6 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090BA                            ; ===========================================================================
000090BA 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090BC 0000                       		dc.w Obj1D_Action-Obj1D_Index
000090BE 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000090C0                            ; ===========================================================================
000090C0                            
000090C0                            Obj1D_Main:				; XREF: Obj1D_Index
000090C0 5428 0024                  		addq.b	#2,$24(a0)
000090C4 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000090CC 317C 4000 0002             		move.w	#$4000,2(a0)
000090D2 117C 0004 0001             		move.b	#4,1(a0)
000090D8 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000090DE 117C 0010 0019             		move.b	#$10,$19(a0)
000090E4 117C 0005 0018             		move.b	#5,$18(a0)
000090EA                            
000090EA                            Obj1D_Action:				; XREF: Obj1D_Index
000090EA 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000090F0 323C 0010                  		move.w	#$10,d1
000090F4 6100 0000                  		bsr.w	Obj1D_ChkTouch
000090F8 6700                       		beq.s	Obj1D_ChkDel
000090FA 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000090FE 7001                       		moveq	#1,d0
00009100 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009104                            
00009104                            Obj1D_ChkDel:
00009104 6100 0000                  		bsr.w	DisplaySprite
00009108 3028 0008                  		move.w	8(a0),d0
0000910C 0240 FF80                  		andi.w	#$FF80,d0
00009110 3238 F700                  		move.w	($FFFFF700).w,d1
00009114 0441 0080                  		subi.w	#$80,d1
00009118 0241 FF80                  		andi.w	#$FF80,d1
0000911C 9041                       		sub.w	d1,d0
0000911E 0C40 0280                  		cmpi.w	#$280,d0
00009122 6200 0000                  		bhi.w	Obj1D_Delete
00009126 4E75                       		rts	
00009128                            ; ===========================================================================
00009128                            
00009128                            Obj1D_Delete:				; XREF: Obj1D_Index
00009128 6100 0000                  		bsr.w	DeleteObject
0000912C 4E75                       		rts	
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            ; Subroutine to	check if Sonic touches the object
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            
0000912E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000912E                            
0000912E                            
0000912E                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000912E 43F8 D000                  		lea	($FFFFD000).w,a1
00009132 3029 0008                  		move.w	8(a1),d0
00009136 9068 0008                  		sub.w	8(a0),d0
0000913A D041                       		add.w	d1,d0
0000913C 6B00                       		bmi.s	loc_8918
0000913E D241                       		add.w	d1,d1
00009140 B041                       		cmp.w	d1,d0
00009142 6400                       		bcc.s	loc_8918
00009144 3429 000C                  		move.w	$C(a1),d2
00009148 1229 0016                  		move.b	$16(a1),d1
0000914C 4881                       		ext.w	d1
0000914E D242                       		add.w	d2,d1
00009150 3028 000C                  		move.w	$C(a0),d0
00009154 0440 0010                  		subi.w	#$10,d0
00009158 9041                       		sub.w	d1,d0
0000915A 6200                       		bhi.s	loc_8918
0000915C 0C40 FFF0                  		cmpi.w	#-$10,d0
00009160 6500                       		bcs.s	loc_8918
00009162 70FF                       		moveq	#-1,d0
00009164 4E75                       		rts	
00009166                            ; ===========================================================================
00009166                            
00009166                            loc_8918:
00009166 7000                       		moveq	#0,d0
00009168 4E75                       		rts	
0000916A                            ; End of function Obj1D_ChkTouch
0000916A                            
0000916A                            ; ===========================================================================
0000916A                            ; ---------------------------------------------------------------------------
0000916A                            ; Sprite mappings - object 1D
0000916A                            ; ---------------------------------------------------------------------------
0000916A                            Map_obj1D:
0000916A                            	include "_maps\obj1D.asm"
0000916A                            ; ---------------------------------------------------------------------------
0000916A                            ; Sprite mappings - object 1D
0000916A                            ; ---------------------------------------------------------------------------
0000916A 0000                       		dc.w byte_891E-Map_obj1D
0000916C 04                         byte_891E:	dc.b 4
0000916D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009172 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009177 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000917C 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009182 00                         		even
00009182 00                         		even
00009182                            
00009182                            ; ===========================================================================
00009182                            ; ---------------------------------------------------------------------------
00009182                            ; Object 2A - doors (SBZ)
00009182                            ; ---------------------------------------------------------------------------
00009182                            
00009182                            Obj2A:					; XREF: Obj_Index
00009182 7000                       		moveq	#0,d0
00009184 1028 0024                  		move.b	$24(a0),d0
00009188 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000918C 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009190                            ; ===========================================================================
00009190 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009192 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009194                            ; ===========================================================================
00009194                            
00009194                            Obj2A_Main:				; XREF: Obj2A_Index
00009194 5428 0024                  		addq.b	#2,$24(a0)
00009198 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000091A0 317C 42E8 0002             		move.w	#$42E8,2(a0)
000091A6 0028 0004 0001             		ori.b	#4,1(a0)
000091AC 117C 0008 0019             		move.b	#8,$19(a0)
000091B2 117C 0004 0018             		move.b	#4,$18(a0)
000091B8                            
000091B8                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091B8 323C 0040                  		move.w	#$40,d1
000091BC 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000091C0 3038 D008                  		move.w	($FFFFD008).w,d0
000091C4 D041                       		add.w	d1,d0
000091C6 B068 0008                  		cmp.w	8(a0),d0
000091CA 6500                       		bcs.s	Obj2A_Animate
000091CC 9041                       		sub.w	d1,d0
000091CE 9041                       		sub.w	d1,d0
000091D0 B068 0008                  		cmp.w	8(a0),d0
000091D4 6400                       		bcc.s	Obj2A_Animate
000091D6 D041                       		add.w	d1,d0
000091D8 B068 0008                  		cmp.w	8(a0),d0
000091DC 6400                       		bcc.s	loc_899A
000091DE 0828 0000 0022             		btst	#0,$22(a0)
000091E4 6600                       		bne.s	Obj2A_Animate
000091E6 6000                       		bra.s	Obj2A_Open
000091E8                            ; ===========================================================================
000091E8                            
000091E8                            loc_899A:				; XREF: Obj2A_OpenShut
000091E8 0828 0000 0022             		btst	#0,$22(a0)
000091EE 6700                       		beq.s	Obj2A_Animate
000091F0                            
000091F0                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000091F0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000091F6                            
000091F6                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000091F6 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000091FC 6100 0000                  		bsr.w	AnimateSprite
00009200 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009204 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009206 323C 0011                  		move.w	#$11,d1
0000920A 343C 0020                  		move.w	#$20,d2
0000920E 3602                       		move.w	d2,d3
00009210 5243                       		addq.w	#1,d3
00009212 3828 0008                  		move.w	8(a0),d4
00009216 6100 0000                  		bsr.w	SolidObject
0000921A                            
0000921A                            Obj2A_MarkAsUsed:
0000921A 6000 0000                  		bra.w	MarkObjGone
0000921E                            ; ===========================================================================
0000921E                            Ani_obj2A:
0000921E                            	include "_anim\obj2A.asm"
0000921E                            ; ---------------------------------------------------------------------------
0000921E                            ; Animation script - doors (SBZ)
0000921E                            ; ---------------------------------------------------------------------------
0000921E 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009220 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009222 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000922E 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000923A                            		even
0000923A                            		even
0000923A                            
0000923A                            ; ---------------------------------------------------------------------------
0000923A                            ; Sprite mappings - doors (SBZ)
0000923A                            ; ---------------------------------------------------------------------------
0000923A                            Map_obj2A:
0000923A                            	include "_maps\obj2A.asm"
0000923A                            ; ---------------------------------------------------------------------------
0000923A                            ; Sprite mappings - doors (SBZ)
0000923A                            ; ---------------------------------------------------------------------------
0000923A 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000923E 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009242 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009246 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000924A 0000                       		dc.w byte_8A56-Map_obj2A
0000924C 02                         byte_89FE:	dc.b 2
0000924D E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009252 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009257 02                         byte_8A09:	dc.b 2
00009258 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000925D 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009262 02                         byte_8A14:	dc.b 2
00009263 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009268 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000926D 02                         byte_8A1F:	dc.b 2
0000926E D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009273 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009278 02                         byte_8A2A:	dc.b 2
00009279 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000927E 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009283 02                         byte_8A35:	dc.b 2
00009284 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009289 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000928E 02                         byte_8A40:	dc.b 2
0000928F C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009294 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009299 02                         byte_8A4B:	dc.b 2
0000929A C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000929F 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000092A4 02                         byte_8A56:	dc.b 2
000092A5 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092AA 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092B0 00                         		even
000092B0 00                         		even
000092B0                            
000092B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092B0                            
000092B0                            
000092B0                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092B0 6100 0000                  		bsr.w	Obj44_SolidWall2
000092B4 6700                       		beq.s	loc_8AA8
000092B6 6B00 0000                  		bmi.w	loc_8AC4
000092BA 4A40                       		tst.w	d0
000092BC 6700 0000                  		beq.w	loc_8A92
000092C0 6B00                       		bmi.s	loc_8A7C
000092C2 4A69 0010                  		tst.w	$10(a1)
000092C6 6B00                       		bmi.s	loc_8A92
000092C8 6000                       		bra.s	loc_8A82
000092CA                            ; ===========================================================================
000092CA                            
000092CA                            loc_8A7C:
000092CA 4A69 0010                  		tst.w	$10(a1)
000092CE 6A00                       		bpl.s	loc_8A92
000092D0                            
000092D0                            loc_8A82:
000092D0 9169 0008                  		sub.w	d0,8(a1)
000092D4 337C 0000 0014             		move.w	#0,$14(a1)
000092DA 337C 0000 0010             		move.w	#0,$10(a1)
000092E0                            
000092E0                            loc_8A92:
000092E0 0829 0001 0022             		btst	#1,$22(a1)
000092E6 6600                       		bne.s	loc_8AB6
000092E8 08E9 0005 0022             		bset	#5,$22(a1)
000092EE 08E8 0005 0022             		bset	#5,$22(a0)
000092F4 4E75                       		rts	
000092F6                            ; ===========================================================================
000092F6                            
000092F6                            loc_8AA8:
000092F6 0828 0005 0022             		btst	#5,$22(a0)
000092FC 6700                       		beq.s	locret_8AC2
000092FE 337C 0001 001C             		move.w	#1,$1C(a1)
00009304                            
00009304                            loc_8AB6:
00009304 08A8 0005 0022             		bclr	#5,$22(a0)
0000930A 08A9 0005 0022             		bclr	#5,$22(a1)
00009310                            
00009310                            locret_8AC2:
00009310 4E75                       		rts	
00009312                            ; ===========================================================================
00009312                            
00009312                            loc_8AC4:
00009312 4A69 0012                  		tst.w	$12(a1)
00009316 6A00                       		bpl.s	locret_8AD8
00009318 4A43                       		tst.w	d3
0000931A 6A00                       		bpl.s	locret_8AD8
0000931C 9769 000C                  		sub.w	d3,$C(a1)
00009320 337C 0000 0012             		move.w	#0,$12(a1)
00009326                            
00009326                            locret_8AD8:
00009326 4E75                       		rts	
00009328                            ; End of function Obj44_SolidWall
00009328                            
00009328                            
00009328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009328                            
00009328                            
00009328                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009328 43F8 D000                  		lea	($FFFFD000).w,a1
0000932C 3029 0008                  		move.w	8(a1),d0
00009330 9068 0008                  		sub.w	8(a0),d0
00009334 D041                       		add.w	d1,d0
00009336 6B00                       		bmi.s	loc_8B48
00009338 3601                       		move.w	d1,d3
0000933A D643                       		add.w	d3,d3
0000933C B043                       		cmp.w	d3,d0
0000933E 6200                       		bhi.s	loc_8B48
00009340 1629 0016                  		move.b	$16(a1),d3
00009344 4883                       		ext.w	d3
00009346 D443                       		add.w	d3,d2
00009348 3629 000C                  		move.w	$C(a1),d3
0000934C 9668 000C                  		sub.w	$C(a0),d3
00009350 D642                       		add.w	d2,d3
00009352 6B00                       		bmi.s	loc_8B48
00009354 3802                       		move.w	d2,d4
00009356 D844                       		add.w	d4,d4
00009358 B644                       		cmp.w	d4,d3
0000935A 6400                       		bcc.s	loc_8B48
0000935C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009360 6B00                       		bmi.s	loc_8B48
00009362 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009368 6400                       		bcc.s	loc_8B48
0000936A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000936E 6600                       		bne.s	loc_8B48
00009370 3A00                       		move.w	d0,d5
00009372 B240                       		cmp.w	d0,d1
00009374 6400                       		bcc.s	loc_8B30
00009376 D241                       		add.w	d1,d1
00009378 9041                       		sub.w	d1,d0
0000937A 3A00                       		move.w	d0,d5
0000937C 4445                       		neg.w	d5
0000937E                            
0000937E                            loc_8B30:
0000937E 3203                       		move.w	d3,d1
00009380 B443                       		cmp.w	d3,d2
00009382 6400                       		bcc.s	loc_8B3C
00009384 9644                       		sub.w	d4,d3
00009386 3203                       		move.w	d3,d1
00009388 4441                       		neg.w	d1
0000938A                            
0000938A                            loc_8B3C:
0000938A BA41                       		cmp.w	d1,d5
0000938C 6200                       		bhi.s	loc_8B44
0000938E 7801                       		moveq	#1,d4
00009390 4E75                       		rts	
00009392                            ; ===========================================================================
00009392                            
00009392                            loc_8B44:
00009392 78FF                       		moveq	#-1,d4
00009394 4E75                       		rts	
00009396                            ; ===========================================================================
00009396                            
00009396                            loc_8B48:
00009396 7800                       		moveq	#0,d4
00009398 4E75                       		rts	
0000939A                            ; End of function Obj44_SolidWall2
0000939A                            
0000939A                            ; ===========================================================================
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Object 1E - Ball Hog enemy (SBZ)
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            
0000939A                            Obj1E:					; XREF: Obj_Index
0000939A 7000                       		moveq	#0,d0
0000939C 1028 0024                  		move.b	$24(a0),d0
000093A0 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000093A4 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093A8                            ; ===========================================================================
000093A8 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093AA 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093AC                            ; ===========================================================================
000093AC                            
000093AC                            Obj1E_Main:				; XREF: Obj1E_Index
000093AC 117C 0013 0016             		move.b	#$13,$16(a0)
000093B2 117C 0008 0017             		move.b	#8,$17(a0)
000093B8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000093C0 317C 2302 0002             		move.w	#$2302,2(a0)
000093C6 117C 0004 0001             		move.b	#4,1(a0)
000093CC 117C 0004 0018             		move.b	#4,$18(a0)
000093D2 117C 0005 0020             		move.b	#5,$20(a0)
000093D8 117C 000C 0019             		move.b	#$C,$19(a0)
000093DE 6100 0000                  		bsr.w	ObjectFall
000093E2 4EB9 0000 0000             		jsr	ObjHitFloor
000093E8 4A41                       		tst.w	d1
000093EA 6A00                       		bpl.s	locret_8BAC
000093EC D368 000C                  		add.w	d1,$C(a0)
000093F0 317C 0000 0012             		move.w	#0,$12(a0)
000093F6 5428 0024                  		addq.b	#2,$24(a0)
000093FA                            
000093FA                            locret_8BAC:
000093FA 4E75                       		rts	
000093FC                            ; ===========================================================================
000093FC                            
000093FC                            Obj1E_Action:				; XREF: Obj1E_Index
000093FC 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009402 6100 0000                  		bsr.w	AnimateSprite
00009406 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000940C 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000940E 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009412 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009414 6000                       		bra.s	Obj1E_MarkAsGone
00009416                            ; ===========================================================================
00009416                            
00009416                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009416 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000941A                            
0000941A                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000941A 6000 0000                  		bra.w	MarkObjGone
0000941E                            ; ===========================================================================
0000941E                            
0000941E                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000941E 117C 0001 0032             		move.b	#1,$32(a0)
00009424 6100 0000                  		bsr.w	SingleObjLoad
00009428 6600                       		bne.s	loc_8C1A
0000942A 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000942E 3368 0008 0008             		move.w	8(a0),8(a1)
00009434 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000943A 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009440 337C 0000 0012             		move.w	#0,$12(a1)
00009446 70FC                       		moveq	#-4,d0
00009448 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000944E 6700                       		beq.s	loc_8C0A	; if not, branch
00009450 4440                       		neg.w	d0
00009452 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009456                            
00009456                            loc_8C0A:
00009456 D169 0008                  		add.w	d0,8(a1)
0000945A 0669 000C 000C             		addi.w	#$C,$C(a1)
00009460 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009466                            
00009466                            loc_8C1A:
00009466 60B2                       		bra.s	Obj1E_MarkAsGone
00009468                            ; ===========================================================================
00009468                            ; ---------------------------------------------------------------------------
00009468                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009468                            ; ---------------------------------------------------------------------------
00009468                            
00009468                            Obj20:					; XREF: Obj_Index
00009468 7000                       		moveq	#0,d0
0000946A 1028 0024                  		move.b	$24(a0),d0
0000946E 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009472 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009476                            ; ===========================================================================
00009476 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009478 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000947A                            ; ===========================================================================
0000947A                            
0000947A                            Obj20_Main:				; XREF: Obj20_Index
0000947A 5428 0024                  		addq.b	#2,$24(a0)
0000947E 117C 0007 0016             		move.b	#7,$16(a0)
00009484 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000948C 317C 2302 0002             		move.w	#$2302,2(a0)
00009492 117C 0004 0001             		move.b	#4,1(a0)
00009498 117C 0003 0018             		move.b	#3,$18(a0)
0000949E 117C 0087 0020             		move.b	#$87,$20(a0)
000094A4 117C 0008 0019             		move.b	#8,$19(a0)
000094AA 7000                       		moveq	#0,d0
000094AC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094B0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094B4 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094B8 117C 0004 001A             		move.b	#4,$1A(a0)
000094BE                            
000094BE                            Obj20_Bounce:				; XREF: Obj20_Index
000094BE 4EB9 0000 0000             		jsr	ObjectFall
000094C4 4A68 0012                  		tst.w	$12(a0)
000094C8 6B00                       		bmi.s	Obj20_ChkExplode
000094CA 4EB9 0000 0000             		jsr	ObjHitFloor
000094D0 4A41                       		tst.w	d1
000094D2 6A00                       		bpl.s	Obj20_ChkExplode
000094D4 D368 000C                  		add.w	d1,$C(a0)
000094D8 317C FD00 0012             		move.w	#-$300,$12(a0)
000094DE 4A03                       		tst.b	d3
000094E0 6700                       		beq.s	Obj20_ChkExplode
000094E2 6B00                       		bmi.s	loc_8CA4
000094E4 4A68 0010                  		tst.w	$10(a0)
000094E8 6A00                       		bpl.s	Obj20_ChkExplode
000094EA 4468 0010                  		neg.w	$10(a0)
000094EE 6000                       		bra.s	Obj20_ChkExplode
000094F0                            ; ===========================================================================
000094F0                            
000094F0                            loc_8CA4:				; XREF: Obj20_Bounce
000094F0 4A68 0010                  		tst.w	$10(a0)
000094F4 6B00                       		bmi.s	Obj20_ChkExplode
000094F6 4468 0010                  		neg.w	$10(a0)
000094FA                            
000094FA                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000094FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000094FE 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009500 10BC 0024                  		move.b	#$24,0(a0)
00009504 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009508 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000950E 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009512                            ; ===========================================================================
00009512                            
00009512                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009512 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009516 6A00                       		bpl.s	Obj20_Display
00009518 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000951E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009524                            
00009524                            Obj20_Display:
00009524 6100 0000                  		bsr.w	DisplaySprite
00009528 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000952C 0640 00E0                  		addi.w	#$E0,d0
00009530 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009534 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009538 4E75                       		rts	
0000953A                            ; ===========================================================================
0000953A                            ; ---------------------------------------------------------------------------
0000953A                            ; Object 24 - explosion	from a destroyed monitor
0000953A                            ; ---------------------------------------------------------------------------
0000953A                            
0000953A                            Obj24:					; XREF: Obj_Index
0000953A 7000                       		moveq	#0,d0
0000953C 1028 0024                  		move.b	$24(a0),d0
00009540 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009544 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009548                            ; ===========================================================================
00009548 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000954A 0000                       		dc.w Obj24_Animate-Obj24_Index
0000954C                            ; ===========================================================================
0000954C                            
0000954C                            Obj24_Main:				; XREF: Obj24_Index
0000954C 5428 0024                  		addq.b	#2,$24(a0)
00009550 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009558 317C 041C 0002             		move.w	#$41C,2(a0)
0000955E 117C 0004 0001             		move.b	#4,1(a0)
00009564 117C 0001 0018             		move.b	#1,$18(a0)
0000956A 117C 0000 0020             		move.b	#0,$20(a0)
00009570 117C 000C 0019             		move.b	#$C,$19(a0)
00009576 117C 0009 001E             		move.b	#9,$1E(a0)
0000957C 117C 0000 001A             		move.b	#0,$1A(a0)
00009582 303C 00A5                  		move.w	#$A5,d0
00009586 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play explosion sound
0000958C                            
0000958C                            Obj24_Animate:				; XREF: Obj24_Index
0000958C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009590 6A00                       		bpl.s	Obj24_Display
00009592 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009598 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000959C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000095A2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000095A6                            
000095A6                            Obj24_Display:
000095A6 6000 0000                  		bra.w	DisplaySprite
000095AA                            ; ===========================================================================
000095AA                            ; ---------------------------------------------------------------------------
000095AA                            ; Object 27 - explosion	from a destroyed enemy
000095AA                            ; ---------------------------------------------------------------------------
000095AA                            
000095AA                            Obj27:					; XREF: Obj_Index
000095AA 7000                       		moveq	#0,d0
000095AC 1028 0024                  		move.b	$24(a0),d0
000095B0 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095B4 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095B8                            ; ===========================================================================
000095B8 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095BA 0000                       		dc.w Obj27_Main-Obj27_Index
000095BC 0000                       		dc.w Obj27_Animate-Obj27_Index
000095BE                            ; ===========================================================================
000095BE                            
000095BE                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000095BE 5428 0024                  		addq.b	#2,$24(a0)
000095C2 6100 0000                  		bsr.w	SingleObjLoad
000095C6 6600                       		bne.s	Obj27_Main
000095C8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000095CC 3368 0008 0008             		move.w	8(a0),8(a1)
000095D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095D8 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000095DE                            
000095DE                            Obj27_Main:				; XREF: Obj27_Index
000095DE 5428 0024                  		addq.b	#2,$24(a0)
000095E2 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000095EA 317C 05A0 0002             		move.w	#$5A0,2(a0)
000095F0 117C 0004 0001             		move.b	#4,1(a0)
000095F6 117C 0001 0018             		move.b	#1,$18(a0)
000095FC 117C 0000 0020             		move.b	#0,$20(a0)
00009602 117C 000C 0019             		move.b	#$C,$19(a0)
00009608                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009608 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000960E 117C 0000 001A             		move.b	#0,$1A(a0)
00009614 303C 00C1                  		move.w	#$C1,d0
00009618 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000961E                            
0000961E 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009624 1028 0028                  		move.b	$28(a0),d0
00009628 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
0000962E 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009634                            
00009634                            Obj27_Animate:				; XREF: Obj27_Index
00009634 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009638 6A00                       		bpl.s	Obj27_Display
0000963A                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000963A 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009640 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009644 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000964A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000964E                            
0000964E                            Obj27_Display:
0000964E 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009654 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000965A 6000 0000                  		bra.w	DisplaySprite
0000965E                            ; ===========================================================================
0000965E                            ; ---------------------------------------------------------------------------
0000965E                            Obj27_ExplosionXYSpd:
0000965E                            		; dc.w	-$350, -$300	; Left
0000965E                            		; dc.w	-$200, -$450	; Near middle (left)
0000965E                            		; dc.w	0, -$500	; Middle
0000965E                            		; dc.w	$200, -$450	; Near middle (right)
0000965E                            		; dc.w	$350, -$300	; Right
0000965E                            
0000965E FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009662 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009666 0000 FA00                  		dc.w	0, -$600	; Middle
0000966A 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
0000966E 0150 FC00                  		dc.w	$150, -$400	; Right
00009672                            
00009672 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
0000968C                            ; ---------------------------------------------------------------------------
0000968C                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000968C                            ; ---------------------------------------------------------------------------
0000968C                            
0000968C                            Obj3F:					; XREF: Obj_Index
0000968C 7000                       		moveq	#0,d0
0000968E 1028 0024                  		move.b	$24(a0),d0
00009692 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009696 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000969A                            ; ===========================================================================
0000969A 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000969C FF9A                       		dc.w Obj27_Animate-Obj3F_Index
0000969E                            ; ===========================================================================
0000969E                            
0000969E                            Obj3F_Main:				; XREF: Obj3F_Index
0000969E 5428 0024                  		addq.b	#2,$24(a0)
000096A2 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096AA 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096B0 117C 0004 0001             		move.b	#4,1(a0)
000096B6 117C 0001 0018             		move.b	#1,$18(a0)
000096BC 117C 0000 0020             		move.b	#0,$20(a0)
000096C2 117C 000C 0019             		move.b	#$C,$19(a0)
000096C8 117C 0007 001E             		move.b	#7,$1E(a0)
000096CE 117C 0000 001A             		move.b	#0,$1A(a0)
000096D4 303C 00C4                  		move.w	#$C4,d0
000096D8 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000096DE                            ; ===========================================================================
000096DE                            Ani_obj1E:
000096DE                            	include "_anim\obj1E.asm"
000096DE                            ; ---------------------------------------------------------------------------
000096DE                            ; Animation script - doors (SBZ)
000096DE                            ; ---------------------------------------------------------------------------
000096DE 0000                       		dc.w byte_8E4A-Ani_obj1E
000096E0 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000096F8 00                         		even
000096F8 00                         		even
000096F8                            
000096F8                            ; ---------------------------------------------------------------------------
000096F8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000096F8                            ; ---------------------------------------------------------------------------
000096F8                            Map_obj1E:
000096F8                            	include "_maps\obj1E.asm"
000096F8                            Map_a7ad:
000096F8 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000096FA 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000096FC 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000096FE 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009700 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009702 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009704 02                         Map_a7ad_C: 	dc.b $2
00009705 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000970A FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000970F 02                         Map_a7ad_17: 	dc.b $2
00009710 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009715 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000971A 02                         Map_a7ad_22: 	dc.b $2
0000971B F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009720 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009725 02                         Map_a7ad_2D: 	dc.b $2
00009726 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
0000972B F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009730 02                         Map_a7ad_38: 	dc.b $2
00009731 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009736 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
0000973B 02                         Map_a7ad_43: 	dc.b $2
0000973C F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009741 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009746                            	even
00009746                            	even
00009746                            
00009746                            ; ---------------------------------------------------------------------------
00009746                            ; Sprite mappings - explosion
00009746                            ; ---------------------------------------------------------------------------
00009746                            Map_obj24:
00009746                            	include "_maps\obj24.asm"
00009746                            ; ---------------------------------------------------------------------------
00009746                            ; Sprite mappings - explosion
00009746                            ; ---------------------------------------------------------------------------
00009746 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000974A 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000974E 01                         byte_8EAE:	dc.b 1
0000974F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009754 01                         byte_8EB4:	dc.b 1
00009755 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000975A 01                         byte_8EBA:	dc.b 1
0000975B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009760 01                         byte_8EC0:	dc.b 1
00009761 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009766                            		even
00009766                            		even
00009766                            
00009766                            ; ---------------------------------------------------------------------------
00009766                            ; Sprite mappings - explosion
00009766                            ; ---------------------------------------------------------------------------
00009766 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000976A 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000976E 0000                       		dc.w byte_8EF7-Map_obj27
00009770 01                         byte_8ED0:	dc.b 1
00009771 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009776 01                         byte_8ED6:	dc.b 1
00009777 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000977C 01                         byte_8EDC:	dc.b 1
0000977D F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009782 04                         byte_8EE2:	dc.b 4
00009783 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009788 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000978D 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009792 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009797 04                         byte_8EF7:	dc.b 4
00009798 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000979D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000097A2 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000097A7 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097AC                            		even
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            ; Sprite mappings - explosion from when	a boss is destroyed
000097AC                            ; ---------------------------------------------------------------------------
000097AC FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097AE 0000                       		dc.w byte_8F16-Map_obj3F
000097B0 0000                       		dc.w byte_8F1C-Map_obj3F
000097B2 FFD6                       		dc.w byte_8EE2-Map_obj3F
000097B4 FFEB                       		dc.w byte_8EF7-Map_obj3F
000097B6 01                         byte_8F16:	dc.b 1
000097B7 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097BC 01                         byte_8F1C:	dc.b 1
000097BD F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000097C2                            		even
000097C2                            ; ===========================================================================
000097C2                            ; ---------------------------------------------------------------------------
000097C2                            ; Object 28 - animals
000097C2                            ; ---------------------------------------------------------------------------
000097C2                            
000097C2                            Obj28:					; XREF: Obj_Index
000097C2 7000                       		moveq	#0,d0
000097C4 1028 0024                  		move.b	$24(a0),d0
000097C8 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000097CC 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000097D0                            ; ===========================================================================
000097D0 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000097D4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097D8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000097DC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097E0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000097E4 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000097E8 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000097EC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097F0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097F4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000097F8 0000                       		dc.w loc_92D6-Obj28_Index
000097FA                            
000097FA 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
0000980A                            
0000980A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000980E 0000 0000                  		dc.l Map_obj28
00009812 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009816 0000 0000                  		dc.l Map_obj28a		; mappings address
0000981A FE80 FD00                  		dc.w $FE80, $FD00
0000981E 0000 0000                  		dc.l Map_obj28
00009822 FEC0 FE80                  		dc.w $FEC0, $FE80
00009826 0000 0000                  		dc.l Map_obj28a
0000982A FE40 FD00                  		dc.w $FE40, $FD00
0000982E 0000 0000                  		dc.l Map_obj28b
00009832 FD00 FC00                  		dc.w $FD00, $FC00
00009836 0000 0000                  		dc.l Map_obj28a
0000983A FD80 FC80                  		dc.w $FD80, $FC80
0000983E 0000 0000                  		dc.l Map_obj28b
00009842                            
00009842 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009852 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009862 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000986E                            
0000986E 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009882 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009896 0000 0000                  		dc.l Map_obj28b
0000989A                            
0000989A 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098AC 0565 05B3                  		dc.w $565, $5B3
000098B0                            ; ===========================================================================
000098B0                            
000098B0                            Obj28_Ending:				; XREF: Obj28_Index
000098B0 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098B4 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098B8 7000                       		moveq	#0,d0
000098BA 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000098BE D040                       		add.w	d0,d0		; multiply d0 by 2
000098C0 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000098C4 0440 0014                  		subi.w	#$14,d0
000098C8 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000098CE D040                       		add.w	d0,d0
000098D0 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000098D6 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000098DA 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000098E0 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000098E6 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000098EC 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000098F2 117C 000C 0016             		move.b	#$C,$16(a0)
000098F8 117C 0004 0001             		move.b	#4,1(a0)
000098FE 08E8 0000 0001             		bset	#0,1(a0)
00009904 117C 0006 0018             		move.b	#6,$18(a0)
0000990A 117C 0008 0019             		move.b	#8,$19(a0)
00009910 117C 0007 001E             		move.b	#7,$1E(a0)
00009916 6000 0000                  		bra.w	DisplaySprite
0000991A                            ; ===========================================================================
0000991A                            
0000991A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000991A 5428 0024                  		addq.b	#2,$24(a0)
0000991E 6100 93EE                  		bsr.w	RandomNumber
00009922 0240 0001                  		andi.w	#1,d0
00009926 7200                       		moveq	#0,d1
00009928 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000992C D241                       		add.w	d1,d1
0000992E D240                       		add.w	d0,d1
00009930 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009934 1031 1000                  		move.b	(a1,d1.w),d0
00009938 1140 0030                  		move.b	d0,$30(a0)
0000993C E748                       		lsl.w	#3,d0
0000993E 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009942 D2C0                       		adda.w	d0,a1
00009944 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009948 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000994C 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009950 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009956 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000995C 6700                       		beq.s	loc_90C0	; if yes, branch
0000995E 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009964                            
00009964                            loc_90C0:
00009964 117C 000C 0016             		move.b	#$C,$16(a0)
0000996A 117C 0004 0001             		move.b	#4,1(a0)
00009970 08E8 0000 0001             		bset	#0,1(a0)
00009976 117C 0006 0018             		move.b	#6,$18(a0)
0000997C 117C 0008 0019             		move.b	#8,$19(a0)
00009982 117C 0007 001E             		move.b	#7,$1E(a0)
00009988 117C 0002 001A             		move.b	#2,$1A(a0)
0000998E 317C FC00 0012             		move.w	#-$400,$12(a0)
00009994 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009998 6600                       		bne.s	loc_911C
0000999A 6100 0000                  		bsr.w	SingleObjLoad
0000999E 6600                       		bne.s	Obj28_Display
000099A0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000099A4 3368 0008 0008             		move.w	8(a0),8(a1)
000099AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099B0 3028 003E                  		move.w	$3E(a0),d0
000099B4 E248                       		lsr.w	#1,d0
000099B6 1340 001A                  		move.b	d0,$1A(a1)
000099BA                            
000099BA                            Obj28_Display:
000099BA 6000 0000                  		bra.w	DisplaySprite
000099BE                            ; ===========================================================================
000099BE                            
000099BE                            loc_911C:
000099BE 117C 0012 0024             		move.b	#$12,$24(a0)
000099C4 4268 0010                  		clr.w	$10(a0)
000099C8 6000 0000                  		bra.w	DisplaySprite
000099CC                            ; ===========================================================================
000099CC                            
000099CC                            loc_912A:				; XREF: Obj28_Index
000099CC 4A28 0001                  		tst.b	1(a0)
000099D0 6A00 0000                  		bpl.w	DeleteObject
000099D4 6100 0000                  		bsr.w	ObjectFall
000099D8 4A68 0012                  		tst.w	$12(a0)
000099DC 6B00                       		bmi.s	loc_9180
000099DE 4EB9 0000 0000             		jsr	ObjHitFloor
000099E4 4A41                       		tst.w	d1
000099E6 6A00                       		bpl.s	loc_9180
000099E8 D368 000C                  		add.w	d1,$C(a0)
000099EC 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099F8 117C 0001 001A             		move.b	#1,$1A(a0)
000099FE 1028 0030                  		move.b	$30(a0),d0
00009A02 D000                       		add.b	d0,d0
00009A04 5800                       		addq.b	#4,d0
00009A06 1140 0024                  		move.b	d0,$24(a0)
00009A0A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A0E 6700                       		beq.s	loc_9180
00009A10 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A16 6700                       		beq.s	loc_9180
00009A18 4468 0010                  		neg.w	$10(a0)
00009A1C 0868 0000 0001             		bchg	#0,1(a0)
00009A22                            
00009A22                            loc_9180:
00009A22 6000 0000                  		bra.w	DisplaySprite
00009A26                            ; ===========================================================================
00009A26                            
00009A26                            loc_9184:				; XREF: Obj28_Index
00009A26 6100 0000                  		bsr.w	ObjectFall
00009A2A 117C 0001 001A             		move.b	#1,$1A(a0)
00009A30 4A68 0012                  		tst.w	$12(a0)
00009A34 6B00                       		bmi.s	loc_91AE
00009A36 117C 0000 001A             		move.b	#0,$1A(a0)
00009A3C 4EB9 0000 0000             		jsr	ObjHitFloor
00009A42 4A41                       		tst.w	d1
00009A44 6A00                       		bpl.s	loc_91AE
00009A46 D368 000C                  		add.w	d1,$C(a0)
00009A4A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A50                            
00009A50                            loc_91AE:
00009A50 4A28 0028                  		tst.b	$28(a0)
00009A54 6600                       		bne.s	loc_9224
00009A56 4A28 0001                  		tst.b	1(a0)
00009A5A 6A00 0000                  		bpl.w	DeleteObject
00009A5E 6000 0000                  		bra.w	DisplaySprite
00009A62                            ; ===========================================================================
00009A62                            
00009A62                            loc_91C0:				; XREF: Obj28_Index
00009A62 6100 0000                  		bsr.w	SpeedToPos
00009A66 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A6C 4A68 0012                  		tst.w	$12(a0)
00009A70 6B00                       		bmi.s	loc_91FC
00009A72 4EB9 0000 0000             		jsr	ObjHitFloor
00009A78 4A41                       		tst.w	d1
00009A7A 6A00                       		bpl.s	loc_91FC
00009A7C D368 000C                  		add.w	d1,$C(a0)
00009A80 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A86 4A28 0028                  		tst.b	$28(a0)
00009A8A 6700                       		beq.s	loc_91FC
00009A8C 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009A92 6700                       		beq.s	loc_91FC
00009A94 4468 0010                  		neg.w	$10(a0)
00009A98 0868 0000 0001             		bchg	#0,1(a0)
00009A9E                            
00009A9E                            loc_91FC:
00009A9E 5328 001E                  		subq.b	#1,$1E(a0)
00009AA2 6A00                       		bpl.s	loc_9212
00009AA4 117C 0001 001E             		move.b	#1,$1E(a0)
00009AAA 5228 001A                  		addq.b	#1,$1A(a0)
00009AAE 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AB4                            
00009AB4                            loc_9212:
00009AB4 4A28 0028                  		tst.b	$28(a0)
00009AB8 6600                       		bne.s	loc_9224
00009ABA 4A28 0001                  		tst.b	1(a0)
00009ABE 6A00 0000                  		bpl.w	DeleteObject
00009AC2 6000 0000                  		bra.w	DisplaySprite
00009AC6                            ; ===========================================================================
00009AC6                            
00009AC6                            loc_9224:				; XREF: Obj28_Index
00009AC6 3028 0008                  		move.w	8(a0),d0
00009ACA 9078 D008                  		sub.w	($FFFFD008).w,d0
00009ACE 6500                       		bcs.s	loc_923C
00009AD0 0440 0180                  		subi.w	#$180,d0
00009AD4 6A00                       		bpl.s	loc_923C
00009AD6 4A28 0001                  		tst.b	1(a0)
00009ADA 6A00 0000                  		bpl.w	DeleteObject
00009ADE                            
00009ADE                            loc_923C:
00009ADE 6000 0000                  		bra.w	DisplaySprite
00009AE2                            ; ===========================================================================
00009AE2                            
00009AE2                            loc_9240:				; XREF: Obj28_Index
00009AE2 4A28 0001                  		tst.b	1(a0)
00009AE6 6A00 0000                  		bpl.w	DeleteObject
00009AEA 5368 0036                  		subq.w	#1,$36(a0)
00009AEE 6600 0000                  		bne.w	loc_925C
00009AF2 117C 0002 0024             		move.b	#2,$24(a0)
00009AF8 117C 0003 0018             		move.b	#3,$18(a0)
00009AFE                            
00009AFE                            loc_925C:
00009AFE 6000 0000                  		bra.w	DisplaySprite
00009B02                            ; ===========================================================================
00009B02                            
00009B02                            loc_9260:				; XREF: Obj28_Index
00009B02 6100 0000                  		bsr.w	sub_9404
00009B06 6400                       		bcc.s	loc_927C
00009B08 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B0E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B14 117C 000E 0024             		move.b	#$E,$24(a0)
00009B1A 6000 FF46                  		bra.w	loc_91C0
00009B1E                            ; ===========================================================================
00009B1E                            
00009B1E                            loc_927C:
00009B1E 6000 FFA6                  		bra.w	loc_9224
00009B22                            ; ===========================================================================
00009B22                            
00009B22                            loc_9280:				; XREF: Obj28_Index
00009B22 6100 0000                  		bsr.w	sub_9404
00009B26 6A00                       		bpl.s	loc_92B6
00009B28 4268 0010                  		clr.w	$10(a0)
00009B2C 4268 0032                  		clr.w	$32(a0)
00009B30 6100 0000                  		bsr.w	SpeedToPos
00009B34 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B3A 6100 0000                  		bsr.w	loc_93C4
00009B3E 6100 0000                  		bsr.w	loc_93EC
00009B42 5328 001E                  		subq.b	#1,$1E(a0)
00009B46 6A00                       		bpl.s	loc_92B6
00009B48 117C 0001 001E             		move.b	#1,$1E(a0)
00009B4E 5228 001A                  		addq.b	#1,$1A(a0)
00009B52 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B58                            
00009B58                            loc_92B6:
00009B58 6000 FF6C                  		bra.w	loc_9224
00009B5C                            ; ===========================================================================
00009B5C                            
00009B5C                            loc_92BA:				; XREF: Obj28_Index
00009B5C 6100 0000                  		bsr.w	sub_9404
00009B60 6A00                       		bpl.s	loc_9310
00009B62 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B68 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B6E 117C 0004 0024             		move.b	#4,$24(a0)
00009B74 6000 FEB0                  		bra.w	loc_9184
00009B78                            ; ===========================================================================
00009B78                            
00009B78                            loc_92D6:				; XREF: Obj28_Index
00009B78 6100 0000                  		bsr.w	ObjectFall
00009B7C 117C 0001 001A             		move.b	#1,$1A(a0)
00009B82 4A68 0012                  		tst.w	$12(a0)
00009B86 6B00                       		bmi.s	loc_9310
00009B88 117C 0000 001A             		move.b	#0,$1A(a0)
00009B8E 4EB9 0000 0000             		jsr	ObjHitFloor
00009B94 4A41                       		tst.w	d1
00009B96 6A00                       		bpl.s	loc_9310
00009B98 4628 0029                  		not.b	$29(a0)
00009B9C 6600                       		bne.s	loc_9306
00009B9E 4468 0010                  		neg.w	$10(a0)
00009BA2 0868 0000 0001             		bchg	#0,1(a0)
00009BA8                            
00009BA8                            loc_9306:
00009BA8 D368 000C                  		add.w	d1,$C(a0)
00009BAC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BB2                            
00009BB2                            loc_9310:
00009BB2 6000 FF12                  		bra.w	loc_9224
00009BB6                            ; ===========================================================================
00009BB6                            
00009BB6                            loc_9314:				; XREF: Obj28_Index
00009BB6 6100 0000                  		bsr.w	sub_9404
00009BBA 6A00                       		bpl.s	loc_932E
00009BBC 4268 0010                  		clr.w	$10(a0)
00009BC0 4268 0032                  		clr.w	$32(a0)
00009BC4 6100 0000                  		bsr.w	ObjectFall
00009BC8 6100 0000                  		bsr.w	loc_93C4
00009BCC 6100 0000                  		bsr.w	loc_93EC
00009BD0                            
00009BD0                            loc_932E:
00009BD0 6000 FEF4                  		bra.w	loc_9224
00009BD4                            ; ===========================================================================
00009BD4                            
00009BD4                            loc_9332:				; XREF: Obj28_Index
00009BD4 6100 0000                  		bsr.w	sub_9404
00009BD8 6A00                       		bpl.s	loc_936C
00009BDA 6100 0000                  		bsr.w	ObjectFall
00009BDE 117C 0001 001A             		move.b	#1,$1A(a0)
00009BE4 4A68 0012                  		tst.w	$12(a0)
00009BE8 6B00                       		bmi.s	loc_936C
00009BEA 117C 0000 001A             		move.b	#0,$1A(a0)
00009BF0 4EB9 0000 0000             		jsr	ObjHitFloor
00009BF6 4A41                       		tst.w	d1
00009BF8 6A00                       		bpl.s	loc_936C
00009BFA 4468 0010                  		neg.w	$10(a0)
00009BFE 0868 0000 0001             		bchg	#0,1(a0)
00009C04 D368 000C                  		add.w	d1,$C(a0)
00009C08 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C0E                            
00009C0E                            loc_936C:
00009C0E 6000 FEB6                  		bra.w	loc_9224
00009C12                            ; ===========================================================================
00009C12                            
00009C12                            loc_9370:				; XREF: Obj28_Index
00009C12 6100 0000                  		bsr.w	sub_9404
00009C16 6A00                       		bpl.s	loc_93C0
00009C18 6100 0000                  		bsr.w	SpeedToPos
00009C1C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C22 4A68 0012                  		tst.w	$12(a0)
00009C26 6B00                       		bmi.s	loc_93AA
00009C28 4EB9 0000 0000             		jsr	ObjHitFloor
00009C2E 4A41                       		tst.w	d1
00009C30 6A00                       		bpl.s	loc_93AA
00009C32 4628 0029                  		not.b	$29(a0)
00009C36 6600                       		bne.s	loc_93A0
00009C38 4468 0010                  		neg.w	$10(a0)
00009C3C 0868 0000 0001             		bchg	#0,1(a0)
00009C42                            
00009C42                            loc_93A0:
00009C42 D368 000C                  		add.w	d1,$C(a0)
00009C46 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C4C                            
00009C4C                            loc_93AA:
00009C4C 5328 001E                  		subq.b	#1,$1E(a0)
00009C50 6A00                       		bpl.s	loc_93C0
00009C52 117C 0001 001E             		move.b	#1,$1E(a0)
00009C58 5228 001A                  		addq.b	#1,$1A(a0)
00009C5C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C62                            
00009C62                            loc_93C0:
00009C62 6000 FE62                  		bra.w	loc_9224
00009C66                            ; ===========================================================================
00009C66                            
00009C66                            loc_93C4:
00009C66 117C 0001 001A             		move.b	#1,$1A(a0)
00009C6C 4A68 0012                  		tst.w	$12(a0)
00009C70 6B00                       		bmi.s	locret_93EA
00009C72 117C 0000 001A             		move.b	#0,$1A(a0)
00009C78 4EB9 0000 0000             		jsr	ObjHitFloor
00009C7E 4A41                       		tst.w	d1
00009C80 6A00                       		bpl.s	locret_93EA
00009C82 D368 000C                  		add.w	d1,$C(a0)
00009C86 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C8C                            
00009C8C                            locret_93EA:
00009C8C 4E75                       		rts	
00009C8E                            ; ===========================================================================
00009C8E                            
00009C8E                            loc_93EC:
00009C8E 08E8 0000 0001             		bset	#0,1(a0)
00009C94 3028 0008                  		move.w	8(a0),d0
00009C98 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C9C 6400                       		bcc.s	locret_9402
00009C9E 08A8 0000 0001             		bclr	#0,1(a0)
00009CA4                            
00009CA4                            locret_9402:
00009CA4 4E75                       		rts	
00009CA6                            
00009CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CA6                            
00009CA6                            
00009CA6                            sub_9404:
00009CA6 3038 D008                  		move.w	($FFFFD008).w,d0
00009CAA 9068 0008                  		sub.w	8(a0),d0
00009CAE 0440 00B8                  		subi.w	#$B8,d0
00009CB2 4E75                       		rts	
00009CB4                            ; End of function sub_9404
00009CB4                            
00009CB4                            ; ===========================================================================
00009CB4                            ; ---------------------------------------------------------------------------
00009CB4                            ; Object 29 - points that appear when you destroy something
00009CB4                            ; ---------------------------------------------------------------------------
00009CB4                            
00009CB4                            Obj29:					; XREF: Obj_Index
00009CB4 7000                       		moveq	#0,d0
00009CB6 1028 0024                  		move.b	$24(a0),d0
00009CBA 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009CBE 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009CC2 6000 0000                  		bra.w	DisplaySprite
00009CC6                            ; ===========================================================================
00009CC6 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009CC8 0000                       		dc.w Obj29_Slower-Obj29_Index
00009CCA                            ; ===========================================================================
00009CCA                            
00009CCA                            Obj29_Main:				; XREF: Obj29_Index
00009CCA 5428 0024                  		addq.b	#2,$24(a0)
00009CCE 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009CD6 317C 2797 0002             		move.w	#$2797,2(a0)
00009CDC 117C 0004 0001             		move.b	#4,1(a0)
00009CE2 117C 0001 0018             		move.b	#1,$18(a0)
00009CE8 117C 0008 0019             		move.b	#8,$19(a0)
00009CEE 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009CF4                            
00009CF4                            Obj29_Slower:				; XREF: Obj29_Index
00009CF4 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009CF8 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009CFC 6100 0000                  		bsr.w	SpeedToPos
00009D00 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009D06 4E75                       		rts	
00009D08                            ; ===========================================================================
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Sprite mappings - animals
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            Map_obj28:
00009D08                            	include "_maps\obj28.asm"
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Sprite mappings - animals
00009D08                            ; ---------------------------------------------------------------------------
00009D08 0000                       		dc.w byte_9472-Map_obj28
00009D0A 0000                       		dc.w byte_9478-Map_obj28
00009D0C 0000                       		dc.w byte_946C-Map_obj28
00009D0E 01                         byte_946C:	dc.b 1
00009D0F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D14 01                         byte_9472:	dc.b 1
00009D15 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D1A 01                         byte_9478:	dc.b 1
00009D1B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D20                            		even
00009D20                            		even
00009D20                            
00009D20                            Map_obj28a:
00009D20                            	include "_maps\obj28a.asm"
00009D20                            ; ---------------------------------------------------------------------------
00009D20                            ; Sprite mappings - animals
00009D20                            ; ---------------------------------------------------------------------------
00009D20 0000                       		dc.w byte_948A-Map_obj28a
00009D22 0000                       		dc.w byte_9490-Map_obj28a
00009D24 0000                       		dc.w byte_9484-Map_obj28a
00009D26 01                         byte_9484:	dc.b 1
00009D27 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D2C 01                         byte_948A:	dc.b 1
00009D2D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D32 01                         byte_9490:	dc.b 1
00009D33 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D38                            		even
00009D38                            		even
00009D38                            
00009D38                            Map_obj28b:
00009D38                            	include "_maps\obj28b.asm"
00009D38                            ; ---------------------------------------------------------------------------
00009D38                            ; Sprite mappings - animals
00009D38                            ; ---------------------------------------------------------------------------
00009D38 0000                       		dc.w byte_94A2-Map_obj28b
00009D3A 0000                       		dc.w byte_94A8-Map_obj28b
00009D3C 0000                       		dc.w byte_949C-Map_obj28b
00009D3E 01                         byte_949C:	dc.b 1
00009D3F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D44 01                         byte_94A2:	dc.b 1
00009D45 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D4A 01                         byte_94A8:	dc.b 1
00009D4B FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D50                            		even
00009D50                            		even
00009D50                            
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            ; Sprite mappings - points that	appear when you	destroy	something
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            Map_obj29:
00009D50                            	include "_maps\obj29.asm"
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            ; Sprite mappings - points that	appear when you	destroy	something
00009D50                            ; ---------------------------------------------------------------------------
00009D50 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D54 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D58 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D5C 0000                       		dc.w byte_94E5-Map_obj29
00009D5E 01                         byte_94BC:	dc.b 1
00009D5F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009D64 01                         byte_94C2:	dc.b 1
00009D65 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009D6A 01                         byte_94C8:	dc.b 1
00009D6B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009D70 01                         byte_94CE:	dc.b 1
00009D71 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009D76 01                         byte_94D4:	dc.b 1
00009D77 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009D7C 02                         byte_94DA:	dc.b 2
00009D7D FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009D82 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009D87 02                         byte_94E5:	dc.b 2
00009D88 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009D8D FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009D92                            		even
00009D92                            		even
00009D92                            
00009D92                            ; ===========================================================================
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            
00009D92                            Obj1F:					; XREF: Obj_Index
00009D92 7000                       		moveq	#0,d0
00009D94 1028 0024                  		move.b	$24(a0),d0
00009D98 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009D9C 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009DA0                            ; ===========================================================================
00009DA0 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009DA2 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009DA4 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009DA6 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009DA8 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009DAA                            ; ===========================================================================
00009DAA                            
00009DAA                            Obj1F_Main:				; XREF: Obj1F_Index
00009DAA 117C 0010 0016             		move.b	#$10,$16(a0)
00009DB0 117C 0008 0017             		move.b	#8,$17(a0)
00009DB6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DBE 317C 0400 0002             		move.w	#$400,2(a0)
00009DC4 117C 0004 0001             		move.b	#4,1(a0)
00009DCA 117C 0003 0018             		move.b	#3,$18(a0)
00009DD0 117C 0006 0020             		move.b	#6,$20(a0)
00009DD6 117C 0015 0019             		move.b	#$15,$19(a0)
00009DDC 6100 0000                  		bsr.w	ObjectFall
00009DE0 4EB9 0000 0000             		jsr	ObjHitFloor
00009DE6 4A41                       		tst.w	d1
00009DE8 6A00                       		bpl.s	locret_955A
00009DEA D368 000C                  		add.w	d1,$C(a0)
00009DEE 1143 0026                  		move.b	d3,$26(a0)
00009DF2 317C 0000 0012             		move.w	#0,$12(a0)
00009DF8 5428 0024                  		addq.b	#2,$24(a0)
00009DFC                            
00009DFC                            locret_955A:
00009DFC 4E75                       		rts	
00009DFE                            ; ===========================================================================
00009DFE                            
00009DFE                            Obj1F_Action:				; XREF: Obj1F_Index
00009DFE 7000                       		moveq	#0,d0
00009E00 1028 0025                  		move.b	$25(a0),d0
00009E04 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009E08 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E0C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E12 6100 0000                  		bsr.w	AnimateSprite
00009E16 6000 0000                  		bra.w	MarkObjGone
00009E1A                            ; ===========================================================================
00009E1A 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E1C 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E1E                            ; ===========================================================================
00009E1E                            
00009E1E                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E1E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E22 6A00                       		bpl.s	locret_95B6
00009E24 4A28 0001                  		tst.b	1(a0)
00009E28 6A00                       		bpl.s	Obj1F_Move
00009E2A 0868 0001 0032             		bchg	#1,$32(a0)
00009E30 6600                       		bne.s	Obj1F_MakeFire
00009E32                            
00009E32                            Obj1F_Move:
00009E32 5428 0025                  		addq.b	#2,$25(a0)
00009E36 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E3C 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E42 6100 0000                  		bsr.w	Obj1F_SetAni
00009E46 5600                       		addq.b	#3,d0
00009E48 1140 001C                  		move.b	d0,$1C(a0)
00009E4C 0868 0000 0022             		bchg	#0,$22(a0)
00009E52 6600                       		bne.s	locret_95B6
00009E54 4468 0010                  		neg.w	$10(a0)		; change direction
00009E58                            
00009E58                            locret_95B6:
00009E58 4E75                       		rts	
00009E5A                            ; ===========================================================================
00009E5A                            
00009E5A                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E5A 317C 003B 0030             		move.w	#$3B,$30(a0)
00009E60 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009E66 6100 0000                  		bsr.w	SingleObjLoad
00009E6A 6600                       		bne.s	Obj1F_MakeFire2
00009E6C 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009E70 137C 0006 0024             		move.b	#6,$24(a1)
00009E76 3368 0008 0008             		move.w	8(a0),8(a1)
00009E7C 0469 0010 0008             		subi.w	#$10,8(a1)
00009E82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E88 337C FF00 0010             		move.w	#-$100,$10(a1)
00009E8E                            
00009E8E                            Obj1F_MakeFire2:
00009E8E 6100 0000                  		bsr.w	SingleObjLoad
00009E92 6600                       		bne.s	locret_9618
00009E94 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009E98 137C 0006 0024             		move.b	#6,$24(a1)
00009E9E 3368 0008 0008             		move.w	8(a0),8(a1)
00009EA4 0669 0010 0008             		addi.w	#$10,8(a1)
00009EAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EB0 337C 0100 0010             		move.w	#$100,$10(a1)
00009EB6                            
00009EB6                            locret_9618:
00009EB6 4E75                       		rts	
00009EB8                            ; ===========================================================================
00009EB8                            
00009EB8                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EB8 5368 0030                  		subq.w	#1,$30(a0)
00009EBC 6B00                       		bmi.s	loc_966E
00009EBE 6100 0000                  		bsr.w	SpeedToPos
00009EC2 0868 0000 0032             		bchg	#0,$32(a0)
00009EC8 6600                       		bne.s	loc_9654
00009ECA 3628 0008                  		move.w	8(a0),d3
00009ECE 0643 0010                  		addi.w	#$10,d3
00009ED2 0828 0000 0022             		btst	#0,$22(a0)
00009ED8 6700                       		beq.s	loc_9640
00009EDA 0443 0020                  		subi.w	#$20,d3
00009EDE                            
00009EDE                            loc_9640:
00009EDE 4EB9 0000 0000             		jsr	ObjHitFloor2
00009EE4 0C41 FFF8                  		cmpi.w	#-8,d1
00009EE8 6D00                       		blt.s	loc_966E
00009EEA 0C41 000C                  		cmpi.w	#$C,d1
00009EEE 6C00                       		bge.s	loc_966E
00009EF0 4E75                       		rts	
00009EF2                            ; ===========================================================================
00009EF2                            
00009EF2                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009EF2 4EB9 0000 0000             		jsr	ObjHitFloor
00009EF8 D368 000C                  		add.w	d1,$C(a0)
00009EFC 1143 0026                  		move.b	d3,$26(a0)
00009F00 6100 0000                  		bsr.w	Obj1F_SetAni
00009F04 5600                       		addq.b	#3,d0
00009F06 1140 001C                  		move.b	d0,$1C(a0)
00009F0A 4E75                       		rts	
00009F0C                            ; ===========================================================================
00009F0C                            
00009F0C                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F0C 5528 0025                  		subq.b	#2,$25(a0)
00009F10 317C 003B 0030             		move.w	#59,$30(a0)
00009F16 317C 0000 0010             		move.w	#0,$10(a0)
00009F1C 6100 0000                  		bsr.w	Obj1F_SetAni
00009F20 1140 001C                  		move.b	d0,$1C(a0)
00009F24 4E75                       		rts	
00009F26                            ; ---------------------------------------------------------------------------
00009F26                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F26                            ; ---------------------------------------------------------------------------
00009F26                            
00009F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F26                            
00009F26                            
00009F26                            Obj1F_SetAni:				; XREF: loc_966E
00009F26 7000                       		moveq	#0,d0
00009F28 1628 0026                  		move.b	$26(a0),d3
00009F2C 6B00                       		bmi.s	loc_96A4
00009F2E 0C03 0006                  		cmpi.b	#6,d3
00009F32 6500                       		bcs.s	locret_96A2
00009F34 7001                       		moveq	#1,d0
00009F36 0828 0000 0022             		btst	#0,$22(a0)
00009F3C 6600                       		bne.s	locret_96A2
00009F3E 7002                       		moveq	#2,d0
00009F40                            
00009F40                            locret_96A2:
00009F40 4E75                       		rts	
00009F42                            ; ===========================================================================
00009F42                            
00009F42                            loc_96A4:				; XREF: Obj1F_SetAni
00009F42 0C03 00FA                  		cmpi.b	#-6,d3
00009F46 6200                       		bhi.s	locret_96B6
00009F48 7002                       		moveq	#2,d0
00009F4A 0828 0000 0022             		btst	#0,$22(a0)
00009F50 6600                       		bne.s	locret_96B6
00009F52 7001                       		moveq	#1,d0
00009F54                            
00009F54                            locret_96B6:
00009F54 4E75                       		rts	
00009F56                            ; End of function Obj1F_SetAni
00009F56                            
00009F56                            ; ===========================================================================
00009F56                            
00009F56                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F56 6100 0000                  		bsr.w	DeleteObject
00009F5A 4E75                       		rts	
00009F5C                            ; ===========================================================================
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            ; Sub-object - missile that the	Crabmeat throws
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            
00009F5C                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F5C 5428 0024                  		addq.b	#2,$24(a0)
00009F60 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F68 317C 0400 0002             		move.w	#$400,2(a0)
00009F6E 117C 0004 0001             		move.b	#4,1(a0)
00009F74 117C 0003 0018             		move.b	#3,$18(a0)
00009F7A 117C 0087 0020             		move.b	#$87,$20(a0)
00009F80 117C 0008 0019             		move.b	#8,$19(a0)
00009F86 317C FC00 0012             		move.w	#-$400,$12(a0)
00009F8C 117C 0007 001C             		move.b	#7,$1C(a0)
00009F92                            
00009F92                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009F92 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009F98 6100 0000                  		bsr.w	AnimateSprite
00009F9C 6100 0000                  		bsr.w	ObjectFall
00009FA0 6100 0000                  		bsr.w	DisplaySprite
00009FA4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009FA8 0640 00E0                  		addi.w	#$E0,d0
00009FAC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FB0 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FB2 4E75                       		rts	
00009FB4                            ; ===========================================================================
00009FB4                            
00009FB4                            Obj1F_Delete2:
00009FB4 6000 0000                  		bra.w	DeleteObject
00009FB8                            ; ===========================================================================
00009FB8                            Ani_obj1F:
00009FB8                            	include "_anim\obj1F.asm"
00009FB8                            ; ---------------------------------------------------------------------------
00009FB8                            ; Animation script - Crabmeat enemy
00009FB8                            ; ---------------------------------------------------------------------------
00009FB8 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009FBE 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009FC4 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009FC8 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009FCC 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009FD0 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009FD4 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009FDA 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009FE0 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009FE6 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009FEA 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009FEE                            		even
00009FEE                            		even
00009FEE                            
00009FEE                            ; ---------------------------------------------------------------------------
00009FEE                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009FEE                            ; ---------------------------------------------------------------------------
00009FEE                            Map_obj1F:
00009FEE                            	include "_maps\obj1F.asm"
00009FEE                            Map_1514:
00009FEE 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009FF0 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009FF2 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009FF4 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009FF6 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009FF8 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009FFA 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009FFC 03                         Map_1514_E: 	dc.b $3
00009FFD F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A002 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A007 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A00C 03                         Map_1514_1E: 	dc.b $3
0000A00D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A012 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A017 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A01C 03                         Map_1514_2E: 	dc.b $3
0000A01D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A022 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A027 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A02C 03                         Map_1514_3E: 	dc.b $3
0000A02D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A032 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A037 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A03C 03                         Map_1514_4E: 	dc.b $3
0000A03D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A042 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A047 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A04C 01                         Map_1514_5E: 	dc.b $1
0000A04D F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A052 01                         Map_1514_64: 	dc.b $1
0000A053 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A058                            	even
0000A058                            	even
0000A058                            
0000A058                            ; ===========================================================================
0000A058                            ; ---------------------------------------------------------------------------
0000A058                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A058                            ; ---------------------------------------------------------------------------
0000A058                            
0000A058                            Obj22:					; XREF: Obj_Index
0000A058 7000                       		moveq	#0,d0
0000A05A 1028 0024                  		move.b	$24(a0),d0
0000A05E 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A062 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A066                            ; ===========================================================================
0000A066 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A068 0000                       		dc.w Obj22_Action-Obj22_Index
0000A06A 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A06C                            ; ===========================================================================
0000A06C                            
0000A06C                            Obj22_Main:				; XREF: Obj22_Index
0000A06C 5428 0024                  		addq.b	#2,$24(a0)
0000A070 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A078 317C 0444 0002             		move.w	#$444,2(a0)
0000A07E 117C 0004 0001             		move.b	#4,1(a0)
0000A084 117C 0003 0018             		move.b	#3,$18(a0)
0000A08A 117C 0008 0020             		move.b	#8,$20(a0)
0000A090 117C 0018 0019             		move.b	#$18,$19(a0)
0000A096                            
0000A096                            Obj22_Action:				; XREF: Obj22_Index
0000A096 7000                       		moveq	#0,d0
0000A098 1028 0025                  		move.b	$25(a0),d0
0000A09C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A0A0 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A0A4 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A0AA 6100 0000                  		bsr.w	AnimateSprite
0000A0AE 6000 0000                  		bra.w	MarkObjGone
0000A0B2                            ; ===========================================================================
0000A0B2 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0B4 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0B6                            ; ===========================================================================
0000A0B6                            
0000A0B6                            Obj22_Move:				; XREF: Obj22_Index2
0000A0B6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0BA 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0BC 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A0C2 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A0C4 5428 0025                  		addq.b	#2,$25(a0)
0000A0C8 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A0CE 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A0D4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A0DA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A0E0 6600                       		bne.s	locret_986C	; if not, branch
0000A0E2 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A0E6                            
0000A0E6                            locret_986C:
0000A0E6 4E75                       		rts	
0000A0E8                            ; ===========================================================================
0000A0E8                            
0000A0E8                            Obj22_Fire:				; XREF: Obj22_Move
0000A0E8 6100 0000                  		bsr.w	SingleObjLoad
0000A0EC 6600                       		bne.s	locret_98D0
0000A0EE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A0F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0FE 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A104 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A10A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A110 303C 0018                  		move.w	#$18,d0
0000A114 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A11A 6600                       		bne.s	loc_98AA	; if not, branch
0000A11C 4440                       		neg.w	d0
0000A11E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A122                            
0000A122                            loc_98AA:
0000A122 D169 0008                  		add.w	d0,8(a1)
0000A126 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A12C 337C 000E 0032             		move.w	#$E,$32(a1)
0000A132 2348 003C                  		move.l	a0,$3C(a1)
0000A136 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A13C 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A142 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A148                            
0000A148                            locret_98D0:
0000A148 4E75                       		rts	
0000A14A                            ; ===========================================================================
0000A14A                            
0000A14A                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A14A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A14E 6B00                       		bmi.s	Obj22_ChgDir
0000A150 6100 0000                  		bsr.w	SpeedToPos
0000A154 4A28 0034                  		tst.b	$34(a0)
0000A158 6600                       		bne.s	locret_992A
0000A15A 3038 D008                  		move.w	($FFFFD008).w,d0
0000A15E 9068 0008                  		sub.w	8(a0),d0
0000A162 6A00                       		bpl.s	Obj22_SetNrSonic
0000A164 4440                       		neg.w	d0
0000A166                            
0000A166                            Obj22_SetNrSonic:
0000A166 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A16A 6400                       		bcc.s	locret_992A	; if not, branch
0000A16C 4A28 0001                  		tst.b	1(a0)
0000A170 6A00                       		bpl.s	locret_992A
0000A172 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A178 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A17E 6000                       		bra.s	Obj22_Stop
0000A180                            ; ===========================================================================
0000A180                            
0000A180                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A180 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A186 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A18C 317C 003B 0032             		move.w	#59,$32(a0)
0000A192                            
0000A192                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A192 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A196 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A19C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A1A2                            
0000A1A2                            locret_992A:
0000A1A2 4E75                       		rts	
0000A1A4                            ; ===========================================================================
0000A1A4                            
0000A1A4                            Obj22_Delete:				; XREF: Obj22_Index
0000A1A4 6100 0000                  		bsr.w	DeleteObject
0000A1A8 4E75                       		rts	
0000A1AA                            ; ===========================================================================
0000A1AA                            ; ---------------------------------------------------------------------------
0000A1AA                            ; Object 23 - missile that Buzz	Bomber throws
0000A1AA                            ; ---------------------------------------------------------------------------
0000A1AA                            
0000A1AA                            Obj23:					; XREF: Obj_Index
0000A1AA 7000                       		moveq	#0,d0
0000A1AC 1028 0024                  		move.b	$24(a0),d0
0000A1B0 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1B4 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1B8                            ; ===========================================================================
0000A1B8 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1BA 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1BC 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A1BE 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A1C0 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A1C2                            ; ===========================================================================
0000A1C2                            
0000A1C2                            Obj23_Main:				; XREF: Obj23_Index
0000A1C2 5368 0032                  		subq.w	#1,$32(a0)
0000A1C6 6A00                       		bpl.s	Obj23_ChkCancel
0000A1C8 5428 0024                  		addq.b	#2,$24(a0)
0000A1CC 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A1D4 317C 2444 0002             		move.w	#$2444,2(a0)
0000A1DA 117C 0004 0001             		move.b	#4,1(a0)
0000A1E0 117C 0003 0018             		move.b	#3,$18(a0)
0000A1E6 117C 0008 0019             		move.b	#8,$19(a0)
0000A1EC 0228 0003 0022             		andi.b	#3,$22(a0)
0000A1F2 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A1F6 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A1F8 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A1FE 117C 0087 0020             		move.b	#$87,$20(a0)
0000A204 117C 0001 001C             		move.b	#1,$1C(a0)
0000A20A 6000                       		bra.s	Obj23_Animate2
0000A20C                            ; ===========================================================================
0000A20C                            
0000A20C                            Obj23_Animate:				; XREF: Obj23_Index
0000A20C 6100                       		bsr.s	Obj23_ChkCancel
0000A20E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A214 6100 0000                  		bsr.w	AnimateSprite
0000A218 6000 0000                  		bra.w	DisplaySprite
0000A21C                            ; ---------------------------------------------------------------------------
0000A21C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A21C                            ; destroyed, and if it has, then cancel	the missile
0000A21C                            ; ---------------------------------------------------------------------------
0000A21C                            
0000A21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A21C                            
0000A21C                            
0000A21C                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A21C 2268 003C                  		movea.l	$3C(a0),a1
0000A220 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A224 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A226 4E75                       		rts	
0000A228                            ; End of function Obj23_ChkCancel
0000A228                            
0000A228                            ; ===========================================================================
0000A228                            
0000A228                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A228 0828 0007 0022             		btst	#7,$22(a0)
0000A22E 6600                       		bne.s	Obj23_Explode
0000A230 117C 0087 0020             		move.b	#$87,$20(a0)
0000A236 117C 0001 001C             		move.b	#1,$1C(a0)
0000A23C 6100 0000                  		bsr.w	SpeedToPos
0000A240 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A246 6100 0000                  		bsr.w	AnimateSprite
0000A24A 6100 0000                  		bsr.w	DisplaySprite
0000A24E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A252 0640 00E0                  		addi.w	#$E0,d0
0000A256 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A25A 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A25C 4E75                       		rts	
0000A25E                            ; ===========================================================================
0000A25E                            
0000A25E                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A25E 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A262 117C 0000 0024             		move.b	#0,$24(a0)
0000A268 6000 F2D0                  		bra.w	Obj24
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Obj23_Delete:				; XREF: Obj23_Index
0000A26C 6100 0000                  		bsr.w	DeleteObject
0000A270 4E75                       		rts	
0000A272                            ; ===========================================================================
0000A272                            
0000A272                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A272 4A28 0001                  		tst.b	1(a0)
0000A276 6AF4                       		bpl.s	Obj23_Delete
0000A278 6100 0000                  		bsr.w	SpeedToPos
0000A27C                            
0000A27C                            Obj23_Animate2:				; XREF: Obj23_Main
0000A27C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A282 6100 0000                  		bsr.w	AnimateSprite
0000A286 6100 0000                  		bsr.w	DisplaySprite
0000A28A 4E75                       		rts	
0000A28C                            ; ===========================================================================
0000A28C                            Ani_obj22:
0000A28C                            	include "_anim\obj22.asm"
0000A28C                            ; ---------------------------------------------------------------------------
0000A28C                            ; Animation script - Buzz Bomber enemy
0000A28C                            ; ---------------------------------------------------------------------------
0000A28C 0000                       		dc.w byte_9A1E-Ani_obj22
0000A28E 0000                       		dc.w byte_9A22-Ani_obj22
0000A290 0000                       		dc.w byte_9A26-Ani_obj22
0000A292 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A296 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A29A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A29E                            		even
0000A29E                            		even
0000A29E                            
0000A29E                            Ani_obj23:
0000A29E                            	include "_anim\obj23.asm"
0000A29E                            ; ---------------------------------------------------------------------------
0000A29E                            ; Animation script - missile that Buzz Bomber throws
0000A29E                            ; ---------------------------------------------------------------------------
0000A29E 0000                       		dc.w byte_9A2E-Ani_obj23
0000A2A0 0000                       		dc.w byte_9A32-Ani_obj23
0000A2A2 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A2A6 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A2AA                            		even
0000A2AA                            		even
0000A2AA                            
0000A2AA                            ; ---------------------------------------------------------------------------
0000A2AA                            ; Sprite mappings - Buzz Bomber	enemy
0000A2AA                            ; ---------------------------------------------------------------------------
0000A2AA                            Map_obj22:
0000A2AA                            	include "_maps\obj22.asm"
0000A2AA                            Map_e97a:
0000A2AA 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2AC 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2AE 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2B0 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2B2 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2B4 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2B6 06                         Map_e97a_C: 	dc.b $6
0000A2B7 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2BC F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2C1 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2C6 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2CB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A2D0 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A2D5 06                         Map_e97a_2B: 	dc.b $6
0000A2D6 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2DB F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2E0 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2E5 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2EA F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A2EF F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A2F4 07                         Map_e97a_4A: 	dc.b $7
0000A2F5 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A2FA F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2FF F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A304 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A309 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A30E F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A313 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A318 07                         Map_e97a_6E: 	dc.b $7
0000A319 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A31E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A323 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A328 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A32D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A332 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A337 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A33C 06                         Map_e97a_92: 	dc.b $6
0000A33D F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A342 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A347 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A34C 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A351 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A356 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A35B 04                         Map_e97a_B1: 	dc.b $4
0000A35C F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A361 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A366 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A36B 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A370                            	even
0000A370                            	even
0000A370                            
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            ; Sprite mappings - missile that Buzz Bomber throws
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            Map_obj23:
0000A370                            	include "_maps\obj23.asm"
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            ; Sprite mappings - missile that Buzz Bomber throws
0000A370                            ; ---------------------------------------------------------------------------
0000A370 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A374 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A378 01                         byte_9B0E:	dc.b 1
0000A379 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A37E 01                         byte_9B14:	dc.b 1
0000A37F F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A384 01                         byte_9B1A:	dc.b 1
0000A385 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A38A 01                         byte_9B20:	dc.b 1
0000A38B F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A390                            		even
0000A390                            		even
0000A390                            
0000A390                            ; ===========================================================================
0000A390                            ; ---------------------------------------------------------------------------
0000A390                            ; Object 25 - rings
0000A390                            ; ---------------------------------------------------------------------------
0000A390                            
0000A390                            Obj25:					; XREF: Obj_Index
0000A390 7000                       		moveq	#0,d0
0000A392 1028 0024                  		move.b	$24(a0),d0
0000A396 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A39A 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A39E                            ; ===========================================================================
0000A39E 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A3A0 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A3A2 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A3A4 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A3A6 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A3A8                            ; ---------------------------------------------------------------------------
0000A3A8                            ; Distances between rings (format: horizontal, vertical)
0000A3A8                            ; ---------------------------------------------------------------------------
0000A3A8 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A3AA 1800                       		dc.b $18, 0		; horizontal normal
0000A3AC 2000                       		dc.b $20, 0		; horizontal wide
0000A3AE 0010                       		dc.b 0,	$10		; vertical tight
0000A3B0 0018                       		dc.b 0,	$18		; vertical normal
0000A3B2 0020                       		dc.b 0,	$20		; vertical wide
0000A3B4 1010                       		dc.b $10, $10		; diagonal
0000A3B6 1818                       		dc.b $18, $18
0000A3B8 2020                       		dc.b $20, $20
0000A3BA F010                       		dc.b $F0, $10
0000A3BC E818                       		dc.b $E8, $18
0000A3BE E020                       		dc.b $E0, $20
0000A3C0 1008                       		dc.b $10, 8
0000A3C2 1810                       		dc.b $18, $10
0000A3C4 F008                       		dc.b $F0, 8
0000A3C6 E810                       		dc.b $E8, $10
0000A3C8                            ; ===========================================================================
0000A3C8                            
0000A3C8                            Obj25_Main:				; XREF: Obj25_Index
0000A3C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3CC 7000                       		moveq	#0,d0
0000A3CE 1028 0023                  		move.b	$23(a0),d0
0000A3D2 45F2 0002                  		lea	2(a2,d0.w),a2
0000A3D6 1812                       		move.b	(a2),d4
0000A3D8 1228 0028                  		move.b	$28(a0),d1
0000A3DC 1001                       		move.b	d1,d0
0000A3DE 0241 0007                  		andi.w	#7,d1
0000A3E2 0C41 0007                  		cmpi.w	#7,d1
0000A3E6 6600                       		bne.s	loc_9B80
0000A3E8 7206                       		moveq	#6,d1
0000A3EA                            
0000A3EA                            loc_9B80:
0000A3EA 4841                       		swap	d1
0000A3EC 323C 0000                  		move.w	#0,d1
0000A3F0 E808                       		lsr.b	#4,d0
0000A3F2 D040                       		add.w	d0,d0
0000A3F4 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A3F8 4885                       		ext.w	d5
0000A3FA 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A3FE 4886                       		ext.w	d6
0000A400 2248                       		movea.l	a0,a1
0000A402 3428 0008                  		move.w	8(a0),d2
0000A406 3628 000C                  		move.w	$C(a0),d3
0000A40A E20C                       		lsr.b	#1,d4
0000A40C 6500                       		bcs.s	loc_9C02
0000A40E 0892 0007                  		bclr	#7,(a2)
0000A412 6000                       		bra.s	loc_9BBA
0000A414                            ; ===========================================================================
0000A414                            
0000A414                            Obj25_MakeRings:
0000A414 4841                       		swap	d1
0000A416 E20C                       		lsr.b	#1,d4
0000A418 6500                       		bcs.s	loc_9C02
0000A41A 0892 0007                  		bclr	#7,(a2)
0000A41E 6100 0000                  		bsr.w	SingleObjLoad
0000A422 6600                       		bne.s	loc_9C0E
0000A424                            
0000A424                            loc_9BBA:				; XREF: Obj25_Main
0000A424 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A428 5429 0024                  		addq.b	#2,$24(a1)
0000A42C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A430 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A436 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A43A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A442 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A448 137C 0004 0001             		move.b	#4,1(a1)
0000A44E 137C 0002 0018             		move.b	#2,$18(a1)
0000A454 137C 0047 0020             		move.b	#$47,$20(a1)
0000A45A 137C 0008 0019             		move.b	#8,$19(a1)
0000A460 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A466 1341 0034                  		move.b	d1,$34(a1)
0000A46A                            
0000A46A                            loc_9C02:
0000A46A 5241                       		addq.w	#1,d1
0000A46C D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A46E D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A470 4841                       		swap	d1
0000A472 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A476                            
0000A476                            loc_9C0E:
0000A476 0812 0000                  		btst	#0,(a2)
0000A47A 6600 0000                  		bne.w	DeleteObject
0000A47E                            
0000A47E                            Obj25_Animate:				; XREF: Obj25_Index
0000A47E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A484 6100 0000                  		bsr.w	DisplaySprite
0000A488 3028 0032                  		move.w	$32(a0),d0
0000A48C 0240 FF80                  		andi.w	#$FF80,d0
0000A490 3238 F700                  		move.w	($FFFFF700).w,d1
0000A494 0441 0080                  		subi.w	#$80,d1
0000A498 0241 FF80                  		andi.w	#$FF80,d1
0000A49C 9041                       		sub.w	d1,d0
0000A49E 0C40 0280                  		cmpi.w	#$280,d0
0000A4A2 6200                       		bhi.s	Obj25_Delete
0000A4A4 4E75                       		rts	
0000A4A6                            ; ===========================================================================
0000A4A6                            
0000A4A6                            Obj25_Collect:				; XREF: Obj25_Index
0000A4A6 5428 0024                  		addq.b	#2,$24(a0)
0000A4AA 117C 0000 0020             		move.b	#0,$20(a0)
0000A4B0 117C 0001 0018             		move.b	#1,$18(a0)
0000A4B6 6100 0000                  		bsr.w	CollectRing
0000A4BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A4BE 7000                       		moveq	#0,d0
0000A4C0 1028 0023                  		move.b	$23(a0),d0
0000A4C4 1228 0034                  		move.b	$34(a0),d1
0000A4C8 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A4CC                            
0000A4CC                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A4CC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4D2 6100 0000                  		bsr.w	AnimateSprite
0000A4D6 6000 0000                  		bra.w	DisplaySprite
0000A4DA                            ; ===========================================================================
0000A4DA                            
0000A4DA                            Obj25_Delete:				; XREF: Obj25_Index
0000A4DA 6000 0000                  		bra.w	DeleteObject
0000A4DE                            
0000A4DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4DE                            
0000A4DE                            
0000A4DE                            CollectRing:				; XREF: Obj25_Collect
0000A4DE 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A4E2 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A4E8 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A4EC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A4F2 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A4F4 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A4FA 6700                       		beq.s	loc_9CA4
0000A4FC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A502 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A504 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A50A 6600                       		bne.s	Obj25_PlaySnd
0000A50C                            
0000A50C                            loc_9CA4:
0000A50C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A510 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A514 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A518                            
0000A518                            Obj25_PlaySnd:
0000A518 4EF9 0000 159A             		jmp	(PlaySound_Special).l
0000A51E                            ; End of function CollectRing
0000A51E                            
0000A51E                            ; ===========================================================================
0000A51E                            ; ---------------------------------------------------------------------------
0000A51E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A51E                            ; ---------------------------------------------------------------------------
0000A51E                            
0000A51E                            Obj37:					; XREF: Obj_Index
0000A51E 7000                       		moveq	#0,d0
0000A520 1028 0024                  		move.b	$24(a0),d0
0000A524 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A528 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A52C                            ; ===========================================================================
0000A52C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A52E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A530 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A532 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A534 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A536                            ; ===========================================================================
0000A536                            
0000A536                            Obj37_CountRings:			; XREF: Obj37_Index
0000A536 2248                       		movea.l	a0,a1
0000A538 7A00                       		moveq	#0,d5
0000A53A 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A53E 7020                       		moveq	#32,d0
0000A540 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A542 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A544 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A546                            
0000A546                            loc_9CDE:
0000A546 5345                       		subq.w	#1,d5
0000A548 383C 0288                  		move.w	#$288,d4
0000A54C 6000                       		bra.s	Obj37_MakeRings
0000A54E                            ; ===========================================================================
0000A54E                            
0000A54E                            Obj37_Loop:
0000A54E 6100 0000                  		bsr.w	SingleObjLoad
0000A552 6600 0000                  		bne.w	Obj37_ResetCounter
0000A556                            
0000A556                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A556 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A55A 5429 0024                  		addq.b	#2,$24(a1)
0000A55E 137C 0008 0016             		move.b	#8,$16(a1)
0000A564 137C 0008 0017             		move.b	#8,$17(a1)
0000A56A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A570 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A576 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A57E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A584 137C 0004 0001             		move.b	#4,1(a1)
0000A58A 137C 0003 0018             		move.b	#3,$18(a1)
0000A590 137C 0047 0020             		move.b	#$47,$20(a1)
0000A596 137C 0008 0019             		move.b	#8,$19(a1)
0000A59C 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A5A2 4A44                       		tst.w	d4
0000A5A4 6B00                       		bmi.s	loc_9D62
0000A5A6 3004                       		move.w	d4,d0
0000A5A8 6100 878A                  		bsr.w	CalcSine
0000A5AC 3404                       		move.w	d4,d2
0000A5AE E04A                       		lsr.w	#8,d2
0000A5B0 E560                       		asl.w	d2,d0
0000A5B2 E561                       		asl.w	d2,d1
0000A5B4 3400                       		move.w	d0,d2
0000A5B6 3601                       		move.w	d1,d3
0000A5B8 0604 0010                  		addi.b	#$10,d4
0000A5BC 6400                       		bcc.s	loc_9D62
0000A5BE 0444 0080                  		subi.w	#$80,d4
0000A5C2 6400                       		bcc.s	loc_9D62
0000A5C4 383C 0288                  		move.w	#$288,d4
0000A5C8                            
0000A5C8                            loc_9D62:
0000A5C8 3342 0010                  		move.w	d2,$10(a1)
0000A5CC 3343 0012                  		move.w	d3,$12(a1)
0000A5D0 4442                       		neg.w	d2
0000A5D2 4444                       		neg.w	d4
0000A5D4 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A5D8                            
0000A5D8                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A5D8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A5DE 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A5E4 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A5EA 303C 00C6                  		move.w	#$C6,d0
0000A5EE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A5F4                            
0000A5F4                            Obj37_Bounce:				; XREF: Obj37_Index
0000A5F4 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A5FA 6100 0000                  		bsr.w	SpeedToPos
0000A5FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A604 6B00                       		bmi.s	Obj37_ChkDel
0000A606 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A60A D007                       		add.b	d7,d0
0000A60C 0200 0003                  		andi.b	#3,d0
0000A610 6600                       		bne.s	Obj37_ChkDel
0000A612 4EB9 0000 0000             		jsr	ObjHitFloor
0000A618 4A41                       		tst.w	d1
0000A61A 6A00                       		bpl.s	Obj37_ChkDel
0000A61C D368 000C                  		add.w	d1,$C(a0)
0000A620 3028 0012                  		move.w	$12(a0),d0
0000A624 E440                       		asr.w	#2,d0
0000A626 9168 0012                  		sub.w	d0,$12(a0)
0000A62A 4468 0012                  		neg.w	$12(a0)
0000A62E                            
0000A62E                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A62E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A632 6700                       		beq.s	Obj37_Delete
0000A634 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A638 0640 00E0                  		addi.w	#$E0,d0
0000A63C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A640 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A642 6000 0000                  		bra.w	DisplaySprite
0000A646                            ; ===========================================================================
0000A646                            
0000A646                            Obj37_Collect:				; XREF: Obj37_Index
0000A646 5428 0024                  		addq.b	#2,$24(a0)
0000A64A 117C 0000 0020             		move.b	#0,$20(a0)
0000A650 117C 0001 0018             		move.b	#1,$18(a0)
0000A656 6100 FE86                  		bsr.w	CollectRing
0000A65A                            
0000A65A                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A65A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A660 6100 0000                  		bsr.w	AnimateSprite
0000A664 6000 0000                  		bra.w	DisplaySprite
0000A668                            ; ===========================================================================
0000A668                            
0000A668                            Obj37_Delete:				; XREF: Obj37_Index
0000A668 6000 0000                  		bra.w	DeleteObject
0000A66C                            ; ===========================================================================
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            ; Object 4B - giant ring for entry to special stage
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            
0000A66C                            Obj4B:					; XREF: Obj_Index
0000A66C 7000                       		moveq	#0,d0
0000A66E 1028 0024                  		move.b	$24(a0),d0
0000A672 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A676 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A67A                            ; ===========================================================================
0000A67A 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A67C 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A67E 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A680 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A682                            ; ===========================================================================
0000A682                            
0000A682                            Obj4B_Main:				; XREF: Obj4B_Index
0000A682 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A68A 317C 2400 0002             		move.w	#$2400,2(a0)
0000A690 0028 0004 0001             		ori.b	#4,1(a0)
0000A696 117C 0040 0019             		move.b	#$40,$19(a0)
0000A69C 4A28 0001                  		tst.b	1(a0)
0000A6A0 6A00                       		bpl.s	Obj4B_Animate
0000A6A2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A6A8 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6AC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6B2 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6B4 4E75                       		rts	
0000A6B6                            ; ===========================================================================
0000A6B6                            
0000A6B6                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6B6 5428 0024                  		addq.b	#2,$24(a0)
0000A6BA 117C 0002 0018             		move.b	#2,$18(a0)
0000A6C0 117C 0052 0020             		move.b	#$52,$20(a0)
0000A6C6 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A6CC                            
0000A6CC                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A6CC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A6D2 3028 0008                  		move.w	8(a0),d0
0000A6D6 0240 FF80                  		andi.w	#$FF80,d0
0000A6DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6DE 0441 0080                  		subi.w	#$80,d1
0000A6E2 0241 FF80                  		andi.w	#$FF80,d1
0000A6E6 9041                       		sub.w	d1,d0
0000A6E8 0C40 0280                  		cmpi.w	#$280,d0
0000A6EC 6200 0000                  		bhi.w	DeleteObject
0000A6F0 6000 0000                  		bra.w	DisplaySprite
0000A6F4                            ; ===========================================================================
0000A6F4                            
0000A6F4                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A6F4 5528 0024                  		subq.b	#2,$24(a0)
0000A6F8 117C 0000 0020             		move.b	#0,$20(a0)
0000A6FE 6100 0000                  		bsr.w	SingleObjLoad
0000A702 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A706 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A70A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A710 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A716 2348 003C                  		move.l	a0,$3C(a1)
0000A71A 3038 D008                  		move.w	($FFFFD008).w,d0
0000A71E B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A722 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A724 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A72A                            
0000A72A                            Obj4B_PlaySnd:
0000A72A 303C 00C3                  		move.w	#$C3,d0
0000A72E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A734 6096                       		bra.s	Obj4B_Animate
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A736 6000 0000                  		bra.w	DeleteObject
0000A73A                            ; ===========================================================================
0000A73A                            ; ---------------------------------------------------------------------------
0000A73A                            ; Object 7C - flash effect when	you collect the	giant ring
0000A73A                            ; ---------------------------------------------------------------------------
0000A73A                            
0000A73A                            Obj7C:					; XREF: Obj_Index
0000A73A 7000                       		moveq	#0,d0
0000A73C 1028 0024                  		move.b	$24(a0),d0
0000A740 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A744 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A748                            ; ===========================================================================
0000A748 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A74A 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A74C 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A74E                            ; ===========================================================================
0000A74E                            
0000A74E                            Obj7C_Main:				; XREF: Obj7C_Index
0000A74E 5428 0024                  		addq.b	#2,$24(a0)
0000A752 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A75A 317C 2462 0002             		move.w	#$2462,2(a0)
0000A760 0028 0004 0001             		ori.b	#4,1(a0)
0000A766 117C 0000 0018             		move.b	#0,$18(a0)
0000A76C 117C 0020 0019             		move.b	#$20,$19(a0)
0000A772 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A778                            
0000A778                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A778 6100                       		bsr.s	Obj7C_Collect
0000A77A 3028 0008                  		move.w	8(a0),d0
0000A77E 0240 FF80                  		andi.w	#$FF80,d0
0000A782 3238 F700                  		move.w	($FFFFF700).w,d1
0000A786 0441 0080                  		subi.w	#$80,d1
0000A78A 0241 FF80                  		andi.w	#$FF80,d1
0000A78E 9041                       		sub.w	d1,d0
0000A790 0C40 0280                  		cmpi.w	#$280,d0
0000A794 6200 0000                  		bhi.w	DeleteObject
0000A798 6000 0000                  		bra.w	DisplaySprite
0000A79C                            
0000A79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A79C                            
0000A79C                            
0000A79C                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A79C 5328 001E                  		subq.b	#1,$1E(a0)
0000A7A0 6A00                       		bpl.s	locret_9F76
0000A7A2 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7A8 5228 001A                  		addq.b	#1,$1A(a0)
0000A7AC 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7B2 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7B4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7BA 6600                       		bne.s	locret_9F76	; if not, branch
0000A7BC 2268 003C                  		movea.l	$3C(a0),a1
0000A7C0 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A7C6 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A7CC 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A7D2 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A7D6 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A7DA                            
0000A7DA                            locret_9F76:
0000A7DA 4E75                       		rts	
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj7C_End:				; XREF: Obj7C_Collect
0000A7DC 5428 0024                  		addq.b	#2,$24(a0)
0000A7E0 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A7E6 588F                       		addq.l	#4,sp
0000A7E8 4E75                       		rts	
0000A7EA                            ; End of function Obj7C_Collect
0000A7EA                            
0000A7EA                            ; ===========================================================================
0000A7EA                            
0000A7EA                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A7EA 6000 0000                  		bra.w	DeleteObject
0000A7EE                            ; ===========================================================================
0000A7EE                            Ani_obj25:
0000A7EE                            	include "_anim\obj25.asm"
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            ; Animation script - ring
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE 0000                       		dc.w byte_9F8C-Ani_obj25
0000A7F0 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A7F6                            		even
0000A7F6                            		even
0000A7F6                            
0000A7F6                            ; ---------------------------------------------------------------------------
0000A7F6                            ; Sprite mappings - rings
0000A7F6                            ; ---------------------------------------------------------------------------
0000A7F6                            Map_obj25:
0000A7F6                            	include "_maps\obj25.asm"
0000A7F6                            ; ---------------------------------------------------------------------------
0000A7F6                            ; Sprite mappings - rings
0000A7F6                            ; ---------------------------------------------------------------------------
0000A7F6 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A7FA 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A7FE 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A802 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A806 01                         byte_9FA2:	dc.b 1
0000A807 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A80C 01                         byte_9FA8:	dc.b 1
0000A80D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A812 01                         byte_9FAE:	dc.b 1
0000A813 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A818 01                         byte_9FB4:	dc.b 1
0000A819 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A81E 01                         byte_9FBA:	dc.b 1
0000A81F F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A824 01                         byte_9FC0:	dc.b 1
0000A825 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A82A 01                         byte_9FC6:	dc.b 1
0000A82B F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A830 01                         byte_9FCC:	dc.b 1
0000A831 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A836                            		even
0000A836                            		even
0000A836                            
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            ; Sprite mappings - giant ring
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            Map_obj4B:
0000A836                            	include "_maps\obj4B.asm"
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            ; Sprite mappings - giant ring
0000A836                            ; ---------------------------------------------------------------------------
0000A836 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A83A 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A83E 0A                         byte_9FDA:	dc.b $A
0000A83F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A844 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A849 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A84E E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A853 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A858 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A85D 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A862 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A867 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A86C 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A871 08                         byte_A00D:	dc.b 8
0000A872 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A877 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A87C E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A881 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A886 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A88B 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A890 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A895 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A89A 04                         byte_A036:	dc.b 4
0000A89B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A8A0 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A8A5 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A8AA 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8AF 08                         byte_A04B:	dc.b 8
0000A8B0 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8B5 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8BA E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A8BF F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A8C4 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A8C9 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A8CE 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A8D3 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A8D8                            		even
0000A8D8                            		even
0000A8D8                            
0000A8D8                            ; ---------------------------------------------------------------------------
0000A8D8                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8D8                            ; ---------------------------------------------------------------------------
0000A8D8                            Map_obj7C:
0000A8D8                            	include "_maps\obj7C.asm"
0000A8D8                            ; ---------------------------------------------------------------------------
0000A8D8                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8D8                            ; ---------------------------------------------------------------------------
0000A8D8 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A8DC 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A8E0 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A8E4 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A8E8 02                         byte_A084:	dc.b 2
0000A8E9 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A8EE 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A8F3 04                         byte_A08F:	dc.b 4
0000A8F4 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A8F9 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A8FE 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A903 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A908 04                         byte_A0A4:	dc.b 4
0000A909 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A90E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A913 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A918 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A91D 04                         byte_A0B9:	dc.b 4
0000A91E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A923 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A928 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A92D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A932 04                         byte_A0CE:	dc.b 4
0000A933 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A938 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A93D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A942 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A947 04                         byte_A0E3:	dc.b 4
0000A948 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A94D E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A952 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A957 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A95C 02                         byte_A0F8:	dc.b 2
0000A95D E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A962 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A967 04                         byte_A103:	dc.b 4
0000A968 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A96D E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A972 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A977 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A97C                            		even
0000A97C                            		even
0000A97C                            
0000A97C                            ; ===========================================================================
0000A97C                            ; ---------------------------------------------------------------------------
0000A97C                            ; Object 26 - monitors
0000A97C                            ; ---------------------------------------------------------------------------
0000A97C                            
0000A97C                            Obj26:					; XREF: Obj_Index
0000A97C 7000                       		moveq	#0,d0
0000A97E 1028 0024                  		move.b	$24(a0),d0
0000A982 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A986 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A98A                            ; ===========================================================================
0000A98A 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A98C 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A98E 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A990 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A992 0000                       		dc.w Obj26_Display-Obj26_Index
0000A994                            ; ===========================================================================
0000A994                            
0000A994                            Obj26_Main:				; XREF: Obj26_Index
0000A994 5428 0024                  		addq.b	#2,$24(a0)
0000A998 117C 000E 0016             		move.b	#$E,$16(a0)
0000A99E 117C 000E 0017             		move.b	#$E,$17(a0)
0000A9A4 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9AC 317C 0680 0002             		move.w	#$680,2(a0)
0000A9B2 117C 0004 0001             		move.b	#4,1(a0)
0000A9B8 117C 0003 0018             		move.b	#3,$18(a0)
0000A9BE 117C 000F 0019             		move.b	#$F,$19(a0)
0000A9C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9C8 7000                       		moveq	#0,d0
0000A9CA 1028 0023                  		move.b	$23(a0),d0
0000A9CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A9D4 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A9DA 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A9DC 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A9E2 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A9E8 4E75                       		rts	
0000A9EA                            ; ===========================================================================
0000A9EA                            
0000A9EA                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A9EA 117C 0046 0020             		move.b	#$46,$20(a0)
0000A9F0 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A9F6                            
0000A9F6                            Obj26_Solid:				; XREF: Obj26_Index
0000A9F6 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A9FA 6700                       		beq.s	loc_A1EC	; if not, branch
0000A9FC 5500                       		subq.b	#2,d0
0000A9FE 6600                       		bne.s	Obj26_Fall
0000AA00 7200                       		moveq	#0,d1
0000AA02 1228 0019                  		move.b	$19(a0),d1
0000AA06 0641 000B                  		addi.w	#$B,d1
0000AA0A 6100 D37C                  		bsr.w	ExitPlatform
0000AA0E 0829 0003 0022             		btst	#3,$22(a1)
0000AA14 6600 0000                  		bne.w	loc_A1BC
0000AA18 4228 0025                  		clr.b	$25(a0)
0000AA1C 6000 0000                  		bra.w	Obj26_Animate
0000AA20                            ; ===========================================================================
0000AA20                            
0000AA20                            loc_A1BC:				; XREF: Obj26_Solid
0000AA20 363C 0010                  		move.w	#$10,d3
0000AA24 3428 0008                  		move.w	8(a0),d2
0000AA28 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA2C 6000 0000                  		bra.w	Obj26_Animate
0000AA30                            ; ===========================================================================
0000AA30                            
0000AA30                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA30 6100 0000                  		bsr.w	ObjectFall
0000AA34 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA3A 4A41                       		tst.w	d1
0000AA3C 6A00 0000                  		bpl.w	Obj26_Animate
0000AA40 D368 000C                  		add.w	d1,$C(a0)
0000AA44 4268 0012                  		clr.w	$12(a0)
0000AA48 4228 0025                  		clr.b	$25(a0)
0000AA4C 6000 0000                  		bra.w	Obj26_Animate
0000AA50                            ; ===========================================================================
0000AA50                            
0000AA50                            loc_A1EC:				; XREF: Obj26_Solid
0000AA50 323C 001A                  		move.w	#$1A,d1
0000AA54 343C 000F                  		move.w	#$F,d2
0000AA58 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA5C 6700 0000                  		beq.w	loc_A25C
0000AA60 4A69 0012                  		tst.w	$12(a1)
0000AA64 6B00                       		bmi.s	loc_A20A
0000AA66 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AA6C 6700                       		beq.s	loc_A25C	; if yes, branch
0000AA6E                            
0000AA6E                            loc_A20A:
0000AA6E 4A41                       		tst.w	d1
0000AA70 6A00                       		bpl.s	loc_A220
0000AA72 9769 000C                  		sub.w	d3,$C(a1)
0000AA76 6100 D1FE                  		bsr.w	loc_74AE
0000AA7A 117C 0002 0025             		move.b	#2,$25(a0)
0000AA80 6000 0000                  		bra.w	Obj26_Animate
0000AA84                            ; ===========================================================================
0000AA84                            
0000AA84                            loc_A220:
0000AA84 4A40                       		tst.w	d0
0000AA86 6700 0000                  		beq.w	loc_A246
0000AA8A 6B00                       		bmi.s	loc_A230
0000AA8C 4A69 0010                  		tst.w	$10(a1)
0000AA90 6B00                       		bmi.s	loc_A246
0000AA92 6000                       		bra.s	loc_A236
0000AA94                            ; ===========================================================================
0000AA94                            
0000AA94                            loc_A230:
0000AA94 4A69 0010                  		tst.w	$10(a1)
0000AA98 6A00                       		bpl.s	loc_A246
0000AA9A                            
0000AA9A                            loc_A236:
0000AA9A 9169 0008                  		sub.w	d0,8(a1)
0000AA9E 337C 0000 0014             		move.w	#0,$14(a1)
0000AAA4 337C 0000 0010             		move.w	#0,$10(a1)
0000AAAA                            
0000AAAA                            loc_A246:
0000AAAA 0829 0001 0022             		btst	#1,$22(a1)
0000AAB0 6600                       		bne.s	loc_A26A
0000AAB2 08E9 0005 0022             		bset	#5,$22(a1)
0000AAB8 08E8 0005 0022             		bset	#5,$22(a0)
0000AABE 6000                       		bra.s	Obj26_Animate
0000AAC0                            ; ===========================================================================
0000AAC0                            
0000AAC0                            loc_A25C:
0000AAC0 0828 0005 0022             		btst	#5,$22(a0)
0000AAC6 6700                       		beq.s	Obj26_Animate
0000AAC8 337C 0001 001C             		move.w	#1,$1C(a1)
0000AACE                            
0000AACE                            loc_A26A:
0000AACE 08A8 0005 0022             		bclr	#5,$22(a0)
0000AAD4 08A9 0005 0022             		bclr	#5,$22(a1)
0000AADA                            
0000AADA                            Obj26_Animate:				; XREF: Obj26_Index
0000AADA 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AAE0 6100 0000                  		bsr.w	AnimateSprite
0000AAE4                            
0000AAE4                            Obj26_Display:				; XREF: Obj26_Index
0000AAE4 6100 0000                  		bsr.w	DisplaySprite
0000AAE8 3028 0008                  		move.w	8(a0),d0
0000AAEC 0240 FF80                  		andi.w	#$FF80,d0
0000AAF0 3238 F700                  		move.w	($FFFFF700).w,d1
0000AAF4 0441 0080                  		subi.w	#$80,d1
0000AAF8 0241 FF80                  		andi.w	#$FF80,d1
0000AAFC 9041                       		sub.w	d1,d0
0000AAFE 0C40 0280                  		cmpi.w	#$280,d0
0000AB02 6200 0000                  		bhi.w	DeleteObject
0000AB06 4E75                       		rts	
0000AB08                            ; ===========================================================================
0000AB08                            
0000AB08                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AB08 5428 0024                  		addq.b	#2,$24(a0)
0000AB0C 117C 0000 0020             		move.b	#0,$20(a0)
0000AB12 6100 0000                  		bsr.w	SingleObjLoad
0000AB16 6600                       		bne.s	Obj26_Explode
0000AB18 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB1C 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB22 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB28 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB2E 7400                       		moveq	#0,d2	; GMZ
0000AB30 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB32                            
0000AB32                            Obj26_Explode:
0000AB32 6100 0000                  		bsr.w	SingleObjLoad
0000AB36 6600                       		bne.s	Obj26_SetBroken
0000AB38 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB3C 5429 0024                  		addq.b	#2,$24(a1)
0000AB40 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB44 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB50                            
0000AB50                            Obj26_NextExplosion:
0000AB50 5802                       		addq.b	#4,d2
0000AB52 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB56                            
0000AB56                            Obj26_SetBroken:
0000AB56 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB5A 7000                       		moveq	#0,d0
0000AB5C 1028 0023                  		move.b	$23(a0),d0
0000AB60 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AB66 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AB6C 6000 0000                  		bra.w	DisplaySprite
0000AB70                            ; ===========================================================================
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            ; Object 2E - contents of monitors
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            
0000AB70                            Obj2E:					; XREF: Obj_Index
0000AB70 7000                       		moveq	#0,d0
0000AB72 1028 0024                  		move.b	$24(a0),d0
0000AB76 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AB7A 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AB7E 6000 0000                  		bra.w	DisplaySprite
0000AB82                            ; ===========================================================================
0000AB82 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AB84 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AB86 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AB88                            ; ===========================================================================
0000AB88                            
0000AB88                            Obj2E_Main:				; XREF: Obj2E_Index
0000AB88 5428 0024                  		addq.b	#2,$24(a0)
0000AB8C 317C 0680 0002             		move.w	#$680,2(a0)
0000AB92 117C 0024 0001             		move.b	#$24,1(a0)
0000AB98 117C 0003 0018             		move.b	#3,$18(a0)
0000AB9E 117C 0008 0019             		move.b	#8,$19(a0)
0000ABA4 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ABAA 7000                       		moveq	#0,d0
0000ABAC 1028 001C                  		move.b	$1C(a0),d0
0000ABB0 5400                       		addq.b	#2,d0
0000ABB2 1140 001A                  		move.b	d0,$1A(a0)
0000ABB6 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABBC D000                       		add.b	d0,d0
0000ABBE D2F1 0000                  		adda.w	(a1,d0.w),a1
0000ABC2 5249                       		addq.w	#1,a1
0000ABC4 2149 0004                  		move.l	a1,4(a0)
0000ABC8                            
0000ABC8                            Obj2E_Move:				; XREF: Obj2E_Index
0000ABC8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000ABCC 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000ABD0 6100 0000                  		bsr.w	SpeedToPos
0000ABD4 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000ABDA 4E75                       		rts	
0000ABDC                            ; ===========================================================================
0000ABDC                            
0000ABDC                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000ABDC 5428 0024                  		addq.b	#2,$24(a0)
0000ABE0 317C 001D 001E             		move.w	#29,$1E(a0)
0000ABE6 1028 001C                  		move.b	$1C(a0),d0
0000ABEA 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000ABEE 6600                       		bne.s	Obj2E_ChkSonic
0000ABF0 4E75                       		rts			; Eggman monitor does nothing
0000ABF2                            ; ===========================================================================
0000ABF2                            
0000ABF2                            Obj2E_ChkSonic:
0000ABF2 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000ABF6 6600                       		bne.s	Obj2E_ChkShoes
0000ABF8                            
0000ABF8                            ExtraLife:
0000ABF8 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ABFC 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC00 303C 0088                  		move.w	#$88,d0
0000AC04 4EF9 0000 1594             		jmp	(PlaySound).l	; play extra life music
0000AC0A                            ; ===========================================================================
0000AC0A                            
0000AC0A                            Obj2E_ChkShoes:
0000AC0A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC0E 6600                       		bne.s	Obj2E_ChkShield
0000AC10 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC16 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC1C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC22 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC28 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC2E 303C 00E2                  		move.w	#$E2,d0
0000AC32 4EF9 0000 1594             		jmp	(PlaySound).l	; Speed	up the music
0000AC38                            ; ===========================================================================
0000AC38                            
0000AC38                            Obj2E_ChkShield:
0000AC38 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC3C 6600                       		bne.s	Obj2E_ChkInvinc
0000AC3E 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC44 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC4A 303C 00AF                  		move.w	#$AF,d0
0000AC4E 4EF9 0000 1594             		jmp	(PlaySound).l	; play shield sound
0000AC54                            ; ===========================================================================
0000AC54                            
0000AC54                            Obj2E_ChkInvinc:
0000AC54 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC58 6600                       		bne.s	Obj2E_ChkRings
0000AC5A 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AC60 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AC66 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AC6C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AC72 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AC78 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AC7E 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AC84 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AC8A 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AC90 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AC96 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AC9A 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AC9C 303C 0087                  		move.w	#$87,d0
0000ACA0 4EF9 0000 1594             		jmp	(PlaySound).l	; play invincibility music
0000ACA6                            ; ===========================================================================
0000ACA6                            
0000ACA6                            Obj2E_NoMusic:
0000ACA6 4E75                       		rts	
0000ACA8                            ; ===========================================================================
0000ACA8                            
0000ACA8                            Obj2E_ChkRings:
0000ACA8 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACAC 6600                       		bne.s	Obj2E_ChkS
0000ACAE 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACB4 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACBA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000ACC0 6500                       		bcs.s	Obj2E_RingSound
0000ACC2 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000ACC8 6700 FF2E                  		beq.w	ExtraLife
0000ACCC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000ACD2 6500                       		bcs.s	Obj2E_RingSound
0000ACD4 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ACDA 6700 FF1C                  		beq.w	ExtraLife
0000ACDE                            
0000ACDE                            Obj2E_RingSound:
0000ACDE 303C 00B5                  		move.w	#$B5,d0
0000ACE2 4EF9 0000 1594             		jmp	(PlaySound).l	; play ring sound
0000ACE8                            ; ===========================================================================
0000ACE8                            
0000ACE8                            Obj2E_ChkS:
0000ACE8 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000ACEC 6600                       		bne.s	Obj2E_ChkEnd
0000ACEE                            		; nop	
0000ACEE 7201                       		moveq	#1,d1
0000ACF0 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000ACF4                            
0000ACF4                            Obj2E_ChkEnd:
0000ACF4 4E75                       		rts			; 'S' and goggles monitors do nothing
0000ACF6                            ; ===========================================================================
0000ACF6                            
0000ACF6                            Obj2E_Delete:				; XREF: Obj2E_Index
0000ACF6 5368 001E                  		subq.w	#1,$1E(a0)
0000ACFA 6B00 0000                  		bmi.w	DeleteObject
0000ACFE 4E75                       		rts	
0000AD00                            ; ---------------------------------------------------------------------------
0000AD00                            ; Subroutine to	make the sides of a monitor solid
0000AD00                            ; ---------------------------------------------------------------------------
0000AD00                            
0000AD00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD00                            
0000AD00                            
0000AD00                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AD00 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD04 3029 0008                  		move.w	8(a1),d0
0000AD08 9068 0008                  		sub.w	8(a0),d0
0000AD0C D041                       		add.w	d1,d0
0000AD0E 6B00                       		bmi.s	loc_A4E6
0000AD10 3601                       		move.w	d1,d3
0000AD12 D643                       		add.w	d3,d3
0000AD14 B043                       		cmp.w	d3,d0
0000AD16 6200                       		bhi.s	loc_A4E6
0000AD18 1629 0016                  		move.b	$16(a1),d3
0000AD1C 4883                       		ext.w	d3
0000AD1E D443                       		add.w	d3,d2
0000AD20 3629 000C                  		move.w	$C(a1),d3
0000AD24 9668 000C                  		sub.w	$C(a0),d3
0000AD28 D642                       		add.w	d2,d3
0000AD2A 6B00                       		bmi.s	loc_A4E6
0000AD2C D442                       		add.w	d2,d2
0000AD2E B642                       		cmp.w	d2,d3
0000AD30 6400                       		bcc.s	loc_A4E6
0000AD32 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD36 6B00                       		bmi.s	loc_A4E6
0000AD38 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD3E 6400                       		bcc.s	loc_A4E6
0000AD40 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD44 6600                       		bne.s	loc_A4E6
0000AD46 B240                       		cmp.w	d0,d1
0000AD48 6400                       		bcc.s	loc_A4DC
0000AD4A D241                       		add.w	d1,d1
0000AD4C 9041                       		sub.w	d1,d0
0000AD4E                            
0000AD4E                            loc_A4DC:
0000AD4E 0C43 0010                  		cmpi.w	#$10,d3
0000AD52 6500                       		bcs.s	loc_A4EA
0000AD54                            
0000AD54                            loc_A4E2:
0000AD54 7201                       		moveq	#1,d1
0000AD56 4E75                       		rts	
0000AD58                            ; ===========================================================================
0000AD58                            
0000AD58                            loc_A4E6:
0000AD58 7200                       		moveq	#0,d1
0000AD5A 4E75                       		rts	
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            loc_A4EA:
0000AD5C 7200                       		moveq	#0,d1
0000AD5E 1228 0019                  		move.b	$19(a0),d1
0000AD62 5841                       		addq.w	#4,d1
0000AD64 3401                       		move.w	d1,d2
0000AD66 D442                       		add.w	d2,d2
0000AD68 D269 0008                  		add.w	8(a1),d1
0000AD6C 9268 0008                  		sub.w	8(a0),d1
0000AD70 6BE2                       		bmi.s	loc_A4E2
0000AD72 B242                       		cmp.w	d2,d1
0000AD74 64DE                       		bcc.s	loc_A4E2
0000AD76 72FF                       		moveq	#-1,d1
0000AD78 4E75                       		rts	
0000AD7A                            ; End of function Obj26_SolidSides
0000AD7A                            
0000AD7A                            ; ===========================================================================
0000AD7A                            Ani_obj26:
0000AD7A                            	include "_anim\obj26.asm"
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Animation script - monitors
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AD80 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AD86 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AD8C 0000                       		dc.w byte_A582-Ani_obj26
0000AD8E 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AD94 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ADA0 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADAC 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADB8 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ADC4 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ADD0 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ADDC 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ADE8 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ADF4 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ADFC                            		even
0000ADFC                            		even
0000ADFC                            
0000ADFC                            ; ---------------------------------------------------------------------------
0000ADFC                            ; Sprite mappings - monitors
0000ADFC                            ; ---------------------------------------------------------------------------
0000ADFC                            Map_obj26:
0000ADFC                            	include "_maps\obj26.asm"
0000ADFC                            ; ================================================================================
0000ADFC                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ADFC                            ; ================================================================================
0000ADFC                            
0000ADFC                            DATAY1U343IF3L:
0000ADFC 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AE00 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AE04 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AE08 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE0C 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE10 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE14 05                         DATAY1U343IF3L_0: dc.b $5
0000AE15 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE1A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE1F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE24 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE29 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE2E 06                         DATAY1U343IF3L_1: dc.b $6
0000AE2F F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE34 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE39 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE3E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE43 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE48 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE4D 05                         DATAY1U343IF3L_2: dc.b $5
0000AE4E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE53 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE58 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE5D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE62 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE67 05                         DATAY1U343IF3L_3: dc.b $5
0000AE68 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE6D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE72 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE77 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE7C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE81 06                         DATAY1U343IF3L_4: dc.b $6
0000AE82 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AE87 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE8C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE91 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE96 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE9B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEA0 06                         DATAY1U343IF3L_5: dc.b $6
0000AEA1 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AEA6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEAB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEB0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEB5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEBA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEBF 06                         DATAY1U343IF3L_6: dc.b $6
0000AEC0 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AEC5 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AECA 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AECF E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AED4 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AED9 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEDE 06                         DATAY1U343IF3L_7: dc.b $6
0000AEDF F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AEE4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEE9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEEE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEF3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEF8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEFD 06                         DATAY1U343IF3L_8: dc.b $6
0000AEFE F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AF03 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF08 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF0D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF12 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF17 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF1C 06                         DATAY1U343IF3L_9: dc.b $6
0000AF1D F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF22 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF27 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF2C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF31 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF36 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF3B 05                         DATAY1U343IF3L_A: dc.b $5
0000AF3C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF41 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF46 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF4B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF50 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF55 01                         DATAY1U343IF3L_B: dc.b $1
0000AF56 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF5C 00                         	even
0000AF5C 00                         	even
0000AF5C                            
0000AF5C                            ; ===========================================================================
0000AF5C                            ; ---------------------------------------------------------------------------
0000AF5C                            ; Object 0E - Sonic on the title screen
0000AF5C                            ; ---------------------------------------------------------------------------
0000AF5C                            
0000AF5C                            Obj0E:					; XREF: Obj_Index
0000AF5C 7000                       		moveq	#0,d0
0000AF5E 1028 0024                  		move.b	$24(a0),d0
0000AF62 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AF66 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AF6A                            ; ===========================================================================
0000AF6A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AF6C 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AF6E 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AF70 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AF72                            ; ===========================================================================
0000AF72                            
0000AF72                            Obj0E_Main:				; XREF: Obj0E_Index
0000AF72 5428 0024                  		addq.b	#2,$24(a0)
0000AF76 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AF7C 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AF82 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AF8A 317C 2300 0002             		move.w	#$2300,2(a0)
0000AF90 117C 0001 0018             		move.b	#1,$18(a0)
0000AF96 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AF9C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFA2 6100 0000                  		bsr.w	AnimateSprite
0000AFA6                            
0000AFA6                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AFA6 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AFAA 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFAC 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFB0 6000 0000                  		bra.w	DisplaySprite
0000AFB4                            ; ===========================================================================
0000AFB4                            
0000AFB4                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFB4 4E75                       		rts	
0000AFB6                            ; ===========================================================================
0000AFB6                            
0000AFB6                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFB6 5168 000A                  		subq.w	#8,$A(a0)
0000AFBA 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AFC0 6600                       		bne.s	Obj0E_Display
0000AFC2 5428 0024                  		addq.b	#2,$24(a0)
0000AFC6                            
0000AFC6                            Obj0E_Display:
0000AFC6 6000 0000                  		bra.w	DisplaySprite
0000AFCA                            ; ===========================================================================
0000AFCA 4E75                       		rts	
0000AFCC                            ; ===========================================================================
0000AFCC                            
0000AFCC                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AFCC 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFD2 6100 0000                  		bsr.w	AnimateSprite
0000AFD6 6000 0000                  		bra.w	DisplaySprite
0000AFDA                            ; ===========================================================================
0000AFDA 4E75                       		rts	
0000AFDC                            ; ===========================================================================
0000AFDC                            ; ---------------------------------------------------------------------------
0000AFDC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AFDC                            ; ---------------------------------------------------------------------------
0000AFDC                            
0000AFDC                            Obj0F:					; XREF: Obj_Index
0000AFDC 7000                       		moveq	#0,d0
0000AFDE 1028 0024                  		move.b	$24(a0),d0
0000AFE2 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AFE6 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AFEA 6000 0000                  		bra.w	DisplaySprite
0000AFEE                            ; ===========================================================================
0000AFEE 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AFF0 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AFF2 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AFF4                            ; ===========================================================================
0000AFF4                            
0000AFF4                            Obj0F_Main:				; XREF: Obj0F_Index
0000AFF4 5428 0024                  		addq.b	#2,$24(a0)
0000AFF8 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AFFE 317C 0130 000A             		move.w	#$130,$A(a0)
0000B004 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B00C 317C 0200 0002             		move.w	#$200,2(a0)
0000B012 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B018 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B01A 5428 0024                  		addq.b	#2,$24(a0)
0000B01E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B024 6600                       		bne.s	locret_A6F8	; if not, branch
0000B026 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B02C 317C 0170 0008             		move.w	#$170,8(a0)
0000B032 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B038                            
0000B038                            locret_A6F8:				; XREF: Obj0F_Index
0000B038 4E75                       		rts	
0000B03A                            ; ===========================================================================
0000B03A                            
0000B03A                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B03A 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B040 6000 0000                  		bra.w	AnimateSprite
0000B044                            ; ===========================================================================
0000B044                            Ani_obj0E:
0000B044                            	include "_anim\obj0E.asm"
0000B044                            ; ---------------------------------------------------------------------------
0000B044                            ; Animation script - Sonic on the title screen
0000B044                            ; ---------------------------------------------------------------------------
0000B044 0000                       		dc.w byte_A706-Ani_obj0E
0000B046 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B052                            		even
0000B052                            		even
0000B052                            
0000B052                            Ani_obj0F:
0000B052                            	include "_anim\obj0F.asm"
0000B052                            ; ---------------------------------------------------------------------------
0000B052                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B052                            ; ---------------------------------------------------------------------------
0000B052 0000                       		dc.w byte_A714-Ani_obj0F
0000B054 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B058                            		even
0000B058                            		even
0000B058                            
0000B058                            ; ---------------------------------------------------------------------------
0000B058                            ; Subroutine to	animate	a sprite using an animation script
0000B058                            ; ---------------------------------------------------------------------------
0000B058                            
0000B058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B058                            
0000B058                            
0000B058                            AnimateSprite:
0000B058 7000                       		moveq	#0,d0
0000B05A 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B05E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B062 6700                       		beq.s	Anim_Run	; if not, branch
0000B064 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B068 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B06E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B074                            
0000B074                            Anim_Run:
0000B074 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B078 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B07A D040                       		add.w	d0,d0
0000B07C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B080 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B084 7200                       		moveq	#0,d1
0000B086 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B08A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B08E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B090                            
0000B090                            Anim_Next:
0000B090 1200                       		move.b	d0,d1
0000B092 0200 001F                  		andi.b	#$1F,d0
0000B096 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B09A 1028 0022                  		move.b	$22(a0),d0
0000B09E E719                       		rol.b	#3,d1
0000B0A0 B101                       		eor.b	d0,d1
0000B0A2 0201 0003                  		andi.b	#3,d1
0000B0A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0AC 8328 0001                  		or.b	d1,1(a0)
0000B0B0 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0B4                            
0000B0B4                            Anim_Wait:
0000B0B4 4E75                       		rts	
0000B0B6                            ; ===========================================================================
0000B0B6                            
0000B0B6                            Anim_End_FF:
0000B0B6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0B8 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0BA 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B0C0 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B0C4 60CA                       		bra.s	Anim_Next
0000B0C6                            ; ===========================================================================
0000B0C6                            
0000B0C6                            Anim_End_FE:
0000B0C6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B0C8 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B0CA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B0CE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B0D2 9200                       		sub.b	d0,d1
0000B0D4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B0D8 60B6                       		bra.s	Anim_Next
0000B0DA                            ; ===========================================================================
0000B0DA                            
0000B0DA                            Anim_End_FD:
0000B0DA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B0DC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B0DE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B0E4                            
0000B0E4                            Anim_End_FC:
0000B0E4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B0E6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B0E8 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B0EC                            
0000B0EC                            Anim_End_FB:
0000B0EC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B0EE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B0F0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0F6 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B0FA                            
0000B0FA                            Anim_End_FA:
0000B0FA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B0FC 6600                       		bne.s	Anim_End	; if not, branch
0000B0FE 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B102                            
0000B102                            Anim_End:
0000B102 4E75                       		rts	
0000B104                            ; End of function AnimateSprite
0000B104                            
0000B104                            ; ===========================================================================
0000B104                            ; ---------------------------------------------------------------------------
0000B104                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B104                            ; ---------------------------------------------------------------------------
0000B104                            Map_obj0F:
0000B104                            	include "_maps\obj0F.asm"
0000B104                            ; ---------------------------------------------------------------------------
0000B104                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B104                            ; ---------------------------------------------------------------------------
0000B104 0000                       		dc.w byte_A7CD-Map_obj0F
0000B106 0000                       		dc.w byte_A7CC-Map_obj0F
0000B108 0000                       		dc.w byte_A7EB-Map_obj0F
0000B10A 0000                       		dc.w byte_A882-Map_obj0F
0000B10C 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B10D 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B112 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B117 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B11C 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B121 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B126 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B12B 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B12C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B131 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B136 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B13B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B140 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B145 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B14A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B14F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B154 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B159 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B15E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B163 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B168 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B16D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B172 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B177 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B181 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B186 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B18B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B190 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B195 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B19A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B19F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1AE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1BD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1C2 01                         byte_A882:	dc.b 1			; "TM"
0000B1C3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B1C8                            		even
0000B1C8                            		even
0000B1C8                            
0000B1C8                            ; ---------------------------------------------------------------------------
0000B1C8                            ; Sprite mappings - Sonic on the title screen
0000B1C8                            ; ---------------------------------------------------------------------------
0000B1C8                            Map_obj0E:
0000B1C8                            	include "_maps\obj0E.asm"
0000B1C8                            ; ================================================================================
0000B1C8                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B1C8                            ; ================================================================================
0000B1C8                            
0000B1C8                            DATAGKI0HYDQBXP:
0000B1C8 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B1CC 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B1D0 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B1D4 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B1D8 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B1D9 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B1DE 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B1E3 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B1E8 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B1ED 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B1F2 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B1F7 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B1FC 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B201 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B202 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B207 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B20C 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B211 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B216 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B21B 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B220 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B225 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B22A 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B22F 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B234 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B239 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B23A F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B23F F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B244 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B249 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B24E 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B253 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B258 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B25D 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B262 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B267 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B26C 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B271 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B272 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B277 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B27C FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B281 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B286 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B28B 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B290 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B295 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B29A 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B29F 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B2A4 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B2A5 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B2AA F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2AF 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2B4 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2B9 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B2BE 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B2C3 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B2C8 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B2CD 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B2D2 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B2D7 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B2DC 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B2E1 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B2E6 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B2EB 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B2F0 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B2F5 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B2F6 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B2FB EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B300 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B305 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B30A EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B30F 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B314 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B319 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B31E 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B323 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B328 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B32D 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B32E EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B333 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B338 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B33D EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B342 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B347 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B34C EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B351 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B356 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B35B EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B360 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B365 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B36A EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B36F 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B374 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B379 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B37A EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B37F 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B384 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B389 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B38E 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B393 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B398 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B39D 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B3A2 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B3A7 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3AC 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3B1 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3B6 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3BB 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B3C0 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B3C6 00                         	even
0000B3C6 00                         	even
0000B3C6                            
0000B3C6                            ; ===========================================================================
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            ; Object 2B - Chopper enemy (GHZ)
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            
0000B3C6                            Obj2B:					; XREF: Obj_Index
0000B3C6 7000                       		moveq	#0,d0
0000B3C8 1028 0024                  		move.b	$24(a0),d0
0000B3CC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B3D0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B3D4 6000 0000                  		bra.w	MarkObjGone
0000B3D8                            ; ===========================================================================
0000B3D8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B3DA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B3DC                            ; ===========================================================================
0000B3DC                            
0000B3DC                            Obj2B_Main:				; XREF: Obj2B_Index
0000B3DC 5428 0024                  		addq.b	#2,$24(a0)
0000B3E0 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B3E8 317C 047B 0002             		move.w	#$47B,2(a0)
0000B3EE 117C 0004 0001             		move.b	#4,1(a0)
0000B3F4 117C 0004 0018             		move.b	#4,$18(a0)
0000B3FA 117C 0009 0020             		move.b	#9,$20(a0)
0000B400 117C 0010 0019             		move.b	#$10,$19(a0)
0000B406 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B40C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B412                            
0000B412                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B412 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B418 6100 FC3E                  		bsr.w	AnimateSprite
0000B41C 6100 0000                  		bsr.w	SpeedToPos
0000B420 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B426 3028 0030                  		move.w	$30(a0),d0
0000B42A B068 000C                  		cmp.w	$C(a0),d0
0000B42E 6400                       		bcc.s	Obj2B_ChgAni
0000B430 3140 000C                  		move.w	d0,$C(a0)
0000B434 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B43A                            
0000B43A                            Obj2B_ChgAni:
0000B43A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B440 0440 00C0                  		subi.w	#$C0,d0
0000B444 B068 000C                  		cmp.w	$C(a0),d0
0000B448 6400                       		bcc.s	locret_ABB6
0000B44A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B450 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B454 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B456 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B45C                            
0000B45C                            locret_ABB6:
0000B45C 4E75                       		rts	
0000B45E                            ; ===========================================================================
0000B45E                            Ani_obj2B:
0000B45E                            	include "_anim\obj2B.asm"
0000B45E                            ; ---------------------------------------------------------------------------
0000B45E                            ; Animation script - Chopper enemy
0000B45E                            ; ---------------------------------------------------------------------------
0000B45E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B460 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B462 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B464 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B468 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B46C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B470 00                         		even
0000B470 00                         		even
0000B470                            
0000B470                            ; ---------------------------------------------------------------------------
0000B470                            ; Sprite mappings - Chopper enemy (GHZ)
0000B470                            ; ---------------------------------------------------------------------------
0000B470                            Map_obj2B:
0000B470                            	include "_maps\obj2B.asm"
0000B470                            Map_1ff1:
0000B470 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B472 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B474 02                         Map_1ff1_4: 	dc.b $2
0000B475 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B47A 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B47F 02                         Map_1ff1_F: 	dc.b $2
0000B480 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B485 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B48A                            	even
0000B48A                            	even
0000B48A                            
0000B48A                            ; ===========================================================================
0000B48A                            ; ---------------------------------------------------------------------------
0000B48A                            ; Object 2C - Jaws enemy (LZ)
0000B48A                            ; ---------------------------------------------------------------------------
0000B48A                            
0000B48A                            Obj2C:					; XREF: Obj_Index
0000B48A 7000                       		moveq	#0,d0
0000B48C 1028 0024                  		move.b	$24(a0),d0
0000B490 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B494 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B498                            ; ===========================================================================
0000B498 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B49A 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B49C                            ; ===========================================================================
0000B49C                            
0000B49C                            Obj2C_Main:				; XREF: Obj2C_Index
0000B49C 5428 0024                  		addq.b	#2,$24(a0)
0000B4A0 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4A8 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4AE 0028 0004 0001             		ori.b	#4,1(a0)
0000B4B4 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4BA 117C 0004 0018             		move.b	#4,$18(a0)
0000B4C0 117C 0010 0019             		move.b	#$10,$19(a0)
0000B4C6 7000                       		moveq	#0,d0
0000B4C8 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B4CC ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B4CE 5340                       		subq.w	#1,d0
0000B4D0 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B4D4 3140 0032                  		move.w	d0,$32(a0)
0000B4D8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B4DE 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B4E4 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B4E6 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B4EA                            
0000B4EA                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B4EA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B4EE 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B4F0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B4F6 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B4FA 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B500 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B506                            
0000B506                            Obj2C_Animate:
0000B506 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B50C 6100 FB4A                  		bsr.w	AnimateSprite
0000B510 6100 0000                  		bsr.w	SpeedToPos
0000B514 6000 0000                  		bra.w	MarkObjGone
0000B518                            ; ===========================================================================
0000B518                            Ani_obj2C:
0000B518                            	include "_anim\obj2C.asm"
0000B518                            ; ---------------------------------------------------------------------------
0000B518                            ; Animation script - Jaws enemy
0000B518                            ; ---------------------------------------------------------------------------
0000B518 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B51A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B520                            		even
0000B520                            		even
0000B520                            
0000B520                            ; ---------------------------------------------------------------------------
0000B520                            ; Sprite mappings - Jaws enemy (LZ)
0000B520                            ; ---------------------------------------------------------------------------
0000B520                            Map_obj2C:
0000B520                            	include "_maps\obj2C.asm"
0000B520                            ; ---------------------------------------------------------------------------
0000B520                            ; Sprite mappings - Jaws enemy (LZ)
0000B520                            ; ---------------------------------------------------------------------------
0000B520 0000                       		dc.w byte_AC78-Map_obj2C
0000B522 0000                       		dc.w byte_AC83-Map_obj2C
0000B524 0000                       		dc.w byte_AC8E-Map_obj2C
0000B526 0000                       		dc.w byte_AC99-Map_obj2C
0000B528 02                         byte_AC78:	dc.b 2
0000B529 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B52E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B533 02                         byte_AC83:	dc.b 2
0000B534 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B539 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B53E 02                         byte_AC8E:	dc.b 2
0000B53F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B544 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B549 02                         byte_AC99:	dc.b 2
0000B54A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B54F F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B554                            		even
0000B554                            		even
0000B554                            
0000B554                            ; ===========================================================================
0000B554                            ; ---------------------------------------------------------------------------
0000B554                            ; Object 2D - Burrobot enemy (LZ)
0000B554                            ; ---------------------------------------------------------------------------
0000B554                            
0000B554                            Obj2D:					; XREF: Obj_Index
0000B554 7000                       		moveq	#0,d0
0000B556 1028 0024                  		move.b	$24(a0),d0
0000B55A 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B55E 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B562                            ; ===========================================================================
0000B562 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B564 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B566                            ; ===========================================================================
0000B566                            
0000B566                            Obj2D_Main:				; XREF: Obj2D_Index
0000B566 5428 0024                  		addq.b	#2,$24(a0)
0000B56A 117C 0013 0016             		move.b	#$13,$16(a0)
0000B570 117C 0008 0017             		move.b	#8,$17(a0)
0000B576 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B57E 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B584 0028 0004 0001             		ori.b	#4,1(a0)
0000B58A 117C 0004 0018             		move.b	#4,$18(a0)
0000B590 117C 0005 0020             		move.b	#5,$20(a0)
0000B596 117C 000C 0019             		move.b	#$C,$19(a0)
0000B59C 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B5A0 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5A6                            
0000B5A6                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5A6 7000                       		moveq	#0,d0
0000B5A8 1028 0025                  		move.b	$25(a0),d0
0000B5AC 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5B0 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5B4 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5BA 6100 FA9C                  		bsr.w	AnimateSprite
0000B5BE 6000 0000                  		bra.w	MarkObjGone
0000B5C2                            ; ===========================================================================
0000B5C2 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B5C4 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B5C6 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B5C8 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B5CA                            ; ===========================================================================
0000B5CA                            
0000B5CA                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B5CA 5368 0030                  		subq.w	#1,$30(a0)
0000B5CE 6A00                       		bpl.s	locret_AD42
0000B5D0 5428 0025                  		addq.b	#2,$25(a0)
0000B5D4 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B5DA 317C 0080 0010             		move.w	#$80,$10(a0)
0000B5E0 117C 0001 001C             		move.b	#1,$1C(a0)
0000B5E6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B5EC 6700                       		beq.s	locret_AD42
0000B5EE 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B5F2                            
0000B5F2                            locret_AD42:
0000B5F2 4E75                       		rts	
0000B5F4                            ; ===========================================================================
0000B5F4                            
0000B5F4                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B5F4 5368 0030                  		subq.w	#1,$30(a0)
0000B5F8 6B00                       		bmi.s	loc_AD84
0000B5FA 6100 0000                  		bsr.w	SpeedToPos
0000B5FE 0868 0000 0032             		bchg	#0,$32(a0)
0000B604 6600                       		bne.s	loc_AD78
0000B606 3628 0008                  		move.w	8(a0),d3
0000B60A 0643 000C                  		addi.w	#$C,d3
0000B60E 0828 0000 0022             		btst	#0,$22(a0)
0000B614 6600                       		bne.s	loc_AD6A
0000B616 0443 0018                  		subi.w	#$18,d3
0000B61A                            
0000B61A                            loc_AD6A:
0000B61A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B620 0C41 000C                  		cmpi.w	#$C,d1
0000B624 6C00                       		bge.s	loc_AD84
0000B626 4E75                       		rts	
0000B628                            ; ===========================================================================
0000B628                            
0000B628                            loc_AD78:				; XREF: Obj2D_Move
0000B628 4EB9 0000 0000             		jsr	ObjHitFloor
0000B62E D368 000C                  		add.w	d1,$C(a0)
0000B632 4E75                       		rts	
0000B634                            ; ===========================================================================
0000B634                            
0000B634                            loc_AD84:				; XREF: Obj2D_Move
0000B634 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B63A 6700                       		beq.s	loc_ADA4
0000B63C 5528 0025                  		subq.b	#2,$25(a0)
0000B640 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B646 317C 0000 0010             		move.w	#0,$10(a0)
0000B64C 117C 0000 001C             		move.b	#0,$1C(a0)
0000B652 4E75                       		rts	
0000B654                            ; ===========================================================================
0000B654                            
0000B654                            loc_ADA4:
0000B654 5428 0025                  		addq.b	#2,$25(a0)
0000B658 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B65E 117C 0002 001C             		move.b	#2,$1C(a0)
0000B664 4E75                       		rts	
0000B666                            ; ===========================================================================
0000B666                            
0000B666                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B666 6100 0000                  		bsr.w	SpeedToPos
0000B66A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B670 6B00                       		bmi.s	locret_ADF0
0000B672 117C 0003 001C             		move.b	#3,$1C(a0)
0000B678 4EB9 0000 0000             		jsr	ObjHitFloor
0000B67E 4A41                       		tst.w	d1
0000B680 6A00                       		bpl.s	locret_ADF0
0000B682 D368 000C                  		add.w	d1,$C(a0)
0000B686 317C 0000 0012             		move.w	#0,$12(a0)
0000B68C 117C 0001 001C             		move.b	#1,$1C(a0)
0000B692 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B698 5528 0025                  		subq.b	#2,$25(a0)
0000B69C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6A0                            
0000B6A0                            locret_ADF0:
0000B6A0 4E75                       		rts	
0000B6A2                            ; ===========================================================================
0000B6A2                            
0000B6A2                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6A2 343C 0060                  		move.w	#$60,d2
0000B6A6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6AA 6400                       		bcc.s	locret_AE20
0000B6AC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6B0 9068 000C                  		sub.w	$C(a0),d0
0000B6B4 6400                       		bcc.s	locret_AE20
0000B6B6 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6BA 6500                       		bcs.s	locret_AE20
0000B6BC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B6C0 6600                       		bne.s	locret_AE20
0000B6C2 5528 0025                  		subq.b	#2,$25(a0)
0000B6C6 3141 0010                  		move.w	d1,$10(a0)
0000B6CA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6D0                            
0000B6D0                            locret_AE20:
0000B6D0 4E75                       		rts	
0000B6D2                            
0000B6D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6D2                            
0000B6D2                            
0000B6D2                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B6D2 323C 0080                  		move.w	#$80,d1
0000B6D6 08E8 0000 0022             		bset	#0,$22(a0)
0000B6DC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B6E0 9068 0008                  		sub.w	8(a0),d0
0000B6E4 6400                       		bcc.s	loc_AE40
0000B6E6 4440                       		neg.w	d0
0000B6E8 4441                       		neg.w	d1
0000B6EA 08A8 0000 0022             		bclr	#0,$22(a0)
0000B6F0                            
0000B6F0                            loc_AE40:
0000B6F0 B042                       		cmp.w	d2,d0
0000B6F2 4E75                       		rts	
0000B6F4                            ; End of function Obj2D_ChkSonic2
0000B6F4                            
0000B6F4                            ; ===========================================================================
0000B6F4                            Ani_obj2D:
0000B6F4                            	include "_anim\obj2D.asm"
0000B6F4                            ; ---------------------------------------------------------------------------
0000B6F4                            ; Animation script - Burrobot enemy but craig
0000B6F4                            ; ---------------------------------------------------------------------------
0000B6F4 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B6F6 0000                       		dc.w byte_AE50-Ani_obj2D
0000B6F8 0000                       		dc.w byte_AE54-Ani_obj2D
0000B6FA 0000                       		dc.w byte_AE58-Ani_obj2D
0000B6FC 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B6FF 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B703 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B711 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B714                            		even
0000B714                            		even
0000B714                            
0000B714                            ; ---------------------------------------------------------------------------
0000B714                            ; Sprite mappings - Burrobot enemy (LZ)
0000B714                            ; ---------------------------------------------------------------------------
0000B714                            Map_obj2D:
0000B714                            	include "_maps\obj2D.asm"
0000B714                            Map_e3a3:
0000B714 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B716 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B718 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B71A 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B71C 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B71E 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B720 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B722 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B724 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B726 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B728 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B72A 02                         Map_e3a3_16: 	dc.b $2
0000B72B EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B730 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B735 02                         Map_e3a3_21: 	dc.b $2
0000B736 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B73B 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B740 02                         Map_e3a3_2C: 	dc.b $2
0000B741 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B746 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B74B 02                         Map_e3a3_37: 	dc.b $2
0000B74C EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B751 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B756 02                         Map_e3a3_42: 	dc.b $2
0000B757 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B75C FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B761 02                         Map_e3a3_4D: 	dc.b $2
0000B762 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B767 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B76C 02                         Map_e3a3_58: 	dc.b $2
0000B76D EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B772 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B777 02                         Map_e3a3_63: 	dc.b $2
0000B778 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B77D FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B782 02                         Map_e3a3_6E: 	dc.b $2
0000B783 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B788 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B78D 02                         Map_e3a3_79: 	dc.b $2
0000B78E EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B793 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B798 02                         Map_e3a3_84: 	dc.b $2
0000B799 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B79E 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B7A4 00                         	even
0000B7A4 00                         	even
0000B7A4                            
0000B7A4                            ; ===========================================================================
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            ; Object 2F - large moving platforms (MZ)
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            
0000B7A4                            Obj2F:					; XREF: Obj_Index
0000B7A4 7000                       		moveq	#0,d0
0000B7A6 1028 0024                  		move.b	$24(a0),d0
0000B7AA 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7AE 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7B2                            ; ===========================================================================
0000B7B2 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7B4 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7B6                            
0000B7B6 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7B8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7BA 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7BC 0140                       		dc.b 1,	$40
0000B7BE 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B7C0 0220                       		dc.b 2,	$20
0000B7C2                            ; ===========================================================================
0000B7C2                            
0000B7C2                            Obj2F_Main:				; XREF: Obj2F_Index
0000B7C2 5428 0024                  		addq.b	#2,$24(a0)
0000B7C6 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B7CE 317C C000 0002             		move.w	#$C000,2(a0)
0000B7D4 117C 0004 0001             		move.b	#4,1(a0)
0000B7DA 117C 0005 0018             		move.b	#5,$18(a0)
0000B7E0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B7E6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B7EC 7000                       		moveq	#0,d0
0000B7EE 1028 0028                  		move.b	$28(a0),d0
0000B7F2 E448                       		lsr.w	#2,d0
0000B7F4 0240 001C                  		andi.w	#$1C,d0
0000B7F8 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B7FC 3019                       		move.w	(a1)+,d0
0000B7FE 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B802 214A 0030                  		move.l	a2,$30(a0)
0000B806 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B80A 1151 0019                  		move.b	(a1),$19(a0)
0000B80E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B814 117C 0040 0016             		move.b	#$40,$16(a0)
0000B81A 08E8 0004 0001             		bset	#4,1(a0)
0000B820                            
0000B820                            Obj2F_Action:				; XREF: Obj2F_Index
0000B820 6100 0000                  		bsr.w	Obj2F_Types
0000B824 4A28 0025                  		tst.b	$25(a0)
0000B828 6700                       		beq.s	Obj2F_Solid
0000B82A 7200                       		moveq	#0,d1
0000B82C 1228 0019                  		move.b	$19(a0),d1
0000B830 0641 000B                  		addi.w	#$B,d1
0000B834 6100 C552                  		bsr.w	ExitPlatform
0000B838 0829 0003 0022             		btst	#3,$22(a1)
0000B83E 6600 0000                  		bne.w	Obj2F_Slope
0000B842 4228 0025                  		clr.b	$25(a0)
0000B846 6000                       		bra.s	Obj2F_Display
0000B848                            ; ===========================================================================
0000B848                            
0000B848                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B848 7200                       		moveq	#0,d1
0000B84A 1228 0019                  		move.b	$19(a0),d1
0000B84E 0641 000B                  		addi.w	#$B,d1
0000B852 2468 0030                  		movea.l	$30(a0),a2
0000B856 3428 0008                  		move.w	8(a0),d2
0000B85A 6100 D51C                  		bsr.w	SlopeObject2
0000B85E 6000                       		bra.s	Obj2F_Display
0000B860                            ; ===========================================================================
0000B860                            
0000B860                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B860 7200                       		moveq	#0,d1
0000B862 1228 0019                  		move.b	$19(a0),d1
0000B866 0641 000B                  		addi.w	#$B,d1
0000B86A 343C 0020                  		move.w	#$20,d2
0000B86E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B874 6600                       		bne.s	loc_AF8E
0000B876 343C 0030                  		move.w	#$30,d2
0000B87A                            
0000B87A                            loc_AF8E:
0000B87A 2468 0030                  		movea.l	$30(a0),a2
0000B87E 6100 0000                  		bsr.w	SolidObject2F
0000B882                            
0000B882                            Obj2F_Display:				; XREF: Obj2F_Action
0000B882 6100 0000                  		bsr.w	DisplaySprite
0000B886 6000 0000                  		bra.w	Obj2F_ChkDel
0000B88A                            
0000B88A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B88A                            
0000B88A                            
0000B88A                            Obj2F_Types:				; XREF: Obj2F_Action
0000B88A 7000                       		moveq	#0,d0
0000B88C 1028 0028                  		move.b	$28(a0),d0
0000B890 0240 0007                  		andi.w	#7,d0
0000B894 D040                       		add.w	d0,d0
0000B896 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B89A 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B89E                            ; End of function Obj2F_Types
0000B89E                            
0000B89E                            ; ===========================================================================
0000B89E 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B8A0 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B8A2 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B8A4 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B8A6 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B8A8 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B8AA 4E75                       		rts			; type 00 platform doesn't move
0000B8AC                            ; ===========================================================================
0000B8AC                            
0000B8AC                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8AC 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8B0 323C 0020                  		move.w	#$20,d1
0000B8B4 6000                       		bra.s	Obj2F_Move
0000B8B6                            ; ===========================================================================
0000B8B6                            
0000B8B6                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8B6 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8BA 323C 0030                  		move.w	#$30,d1
0000B8BE 6000                       		bra.s	Obj2F_Move
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B8C0 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B8C4 323C 0040                  		move.w	#$40,d1
0000B8C8 6000                       		bra.s	Obj2F_Move
0000B8CA                            ; ===========================================================================
0000B8CA                            
0000B8CA                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B8CA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B8CE 323C 0060                  		move.w	#$60,d1
0000B8D2                            
0000B8D2                            Obj2F_Move:
0000B8D2 0828 0003 0028             		btst	#3,$28(a0)
0000B8D8 6700                       		beq.s	loc_AFF2
0000B8DA 4440                       		neg.w	d0
0000B8DC D041                       		add.w	d1,d0
0000B8DE                            
0000B8DE                            loc_AFF2:
0000B8DE 3228 002C                  		move.w	$2C(a0),d1
0000B8E2 9240                       		sub.w	d0,d1
0000B8E4 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B8E8 4E75                       		rts	
0000B8EA                            ; ===========================================================================
0000B8EA                            
0000B8EA                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B8EA 1028 0034                  		move.b	$34(a0),d0
0000B8EE 4A28 0025                  		tst.b	$25(a0)
0000B8F2 6600                       		bne.s	loc_B010
0000B8F4 5500                       		subq.b	#2,d0
0000B8F6 6400                       		bcc.s	loc_B01C
0000B8F8 7000                       		moveq	#0,d0
0000B8FA 6000                       		bra.s	loc_B01C
0000B8FC                            ; ===========================================================================
0000B8FC                            
0000B8FC                            loc_B010:
0000B8FC 5800                       		addq.b	#4,d0
0000B8FE 0C00 0040                  		cmpi.b	#$40,d0
0000B902 6500                       		bcs.s	loc_B01C
0000B904 103C 0040                  		move.b	#$40,d0
0000B908                            
0000B908                            loc_B01C:
0000B908 1140 0034                  		move.b	d0,$34(a0)
0000B90C 4EB9 0000 2D34             		jsr	(CalcSine).l
0000B912 E848                       		lsr.w	#4,d0
0000B914 3200                       		move.w	d0,d1
0000B916 D068 002C                  		add.w	$2C(a0),d0
0000B91A 3140 000C                  		move.w	d0,$C(a0)
0000B91E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B924 6600                       		bne.s	loc_B07A
0000B926 4A28 0035                  		tst.b	$35(a0)
0000B92A 6600                       		bne.s	loc_B07A
0000B92C 117C 0001 0035             		move.b	#1,$35(a0)
0000B932 6100 0000                  		bsr.w	SingleObjLoad2
0000B936 6600                       		bne.s	loc_B07A
0000B938 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B93C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B942 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B948 5069 002C                  		addq.w	#8,$2C(a1)
0000B94C 5769 002C                  		subq.w	#3,$2C(a1)
0000B950 0469 0040 0008             		subi.w	#$40,8(a1)
0000B956 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B95C 2348 0038                  		move.l	a0,$38(a1)
0000B960 2448                       		movea.l	a0,a2
0000B962 6100                       		bsr.s	sub_B09C
0000B964                            
0000B964                            loc_B07A:
0000B964 7400                       		moveq	#0,d2
0000B966 45E8 0036                  		lea	$36(a0),a2
0000B96A 141A                       		move.b	(a2)+,d2
0000B96C 5302                       		subq.b	#1,d2
0000B96E 6500                       		bcs.s	locret_B09A
0000B970                            
0000B970                            loc_B086:
0000B970 7000                       		moveq	#0,d0
0000B972 101A                       		move.b	(a2)+,d0
0000B974 ED48                       		lsl.w	#6,d0
0000B976 0640 D000                  		addi.w	#-$3000,d0
0000B97A 3240                       		movea.w	d0,a1
0000B97C 3341 003C                  		move.w	d1,$3C(a1)
0000B980 51CA FFEE                  		dbf	d2,loc_B086
0000B984                            
0000B984                            locret_B09A:
0000B984 4E75                       		rts	
0000B986                            
0000B986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B986                            
0000B986                            
0000B986                            sub_B09C:
0000B986 45EA 0036                  		lea	$36(a2),a2
0000B98A 7000                       		moveq	#0,d0
0000B98C 1012                       		move.b	(a2),d0
0000B98E 5212                       		addq.b	#1,(a2)
0000B990 45F2 0001                  		lea	1(a2,d0.w),a2
0000B994 3009                       		move.w	a1,d0
0000B996 0440 D000                  		subi.w	#-$3000,d0
0000B99A EC48                       		lsr.w	#6,d0
0000B99C 0240 007F                  		andi.w	#$7F,d0
0000B9A0 1480                       		move.b	d0,(a2)
0000B9A2 4E75                       		rts	
0000B9A4                            ; End of function sub_B09C
0000B9A4                            
0000B9A4                            ; ===========================================================================
0000B9A4                            
0000B9A4                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B9A4 4A28 0035                  		tst.b	$35(a0)
0000B9A8 6700                       		beq.s	loc_B0C6
0000B9AA 4A28 0001                  		tst.b	1(a0)
0000B9AE 6A00                       		bpl.s	Obj2F_DelFlames
0000B9B0                            
0000B9B0                            loc_B0C6:
0000B9B0 3028 002A                  		move.w	$2A(a0),d0
0000B9B4 0240 FF80                  		andi.w	#$FF80,d0
0000B9B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9BC 0441 0080                  		subi.w	#$80,d1
0000B9C0 0241 FF80                  		andi.w	#$FF80,d1
0000B9C4 9041                       		sub.w	d1,d0
0000B9C6 0C40 0280                  		cmpi.w	#$280,d0
0000B9CA 6200 0000                  		bhi.w	DeleteObject
0000B9CE 4E75                       		rts	
0000B9D0                            ; ===========================================================================
0000B9D0                            
0000B9D0                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B9D0 7400                       		moveq	#0,d2
0000B9D2                            
0000B9D2                            loc_B0E8:
0000B9D2 45E8 0036                  		lea	$36(a0),a2
0000B9D6 1412                       		move.b	(a2),d2
0000B9D8 421A                       		clr.b	(a2)+
0000B9DA 5302                       		subq.b	#1,d2
0000B9DC 6500                       		bcs.s	locret_B116
0000B9DE                            
0000B9DE                            loc_B0F4:
0000B9DE 7000                       		moveq	#0,d0
0000B9E0 1012                       		move.b	(a2),d0
0000B9E2 421A                       		clr.b	(a2)+
0000B9E4 ED48                       		lsl.w	#6,d0
0000B9E6 0640 D000                  		addi.w	#-$3000,d0
0000B9EA 3240                       		movea.w	d0,a1
0000B9EC 6100 0000                  		bsr.w	DeleteObject2
0000B9F0 51CA FFEC                  		dbf	d2,loc_B0F4
0000B9F4 117C 0000 0035             		move.b	#0,$35(a0)
0000B9FA 117C 0000 0034             		move.b	#0,$34(a0)
0000BA00                            
0000BA00                            locret_B116:
0000BA00 4E75                       		rts	
0000BA02                            ; ===========================================================================
0000BA02                            ; ---------------------------------------------------------------------------
0000BA02                            ; Collision data for large moving platforms (MZ)
0000BA02                            ; ---------------------------------------------------------------------------
0000BA02                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA4E                            		even
0000BA4E                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BA7A                            		even
0000BA7A                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BAC6                            		even
0000BAC6                            ; ===========================================================================
0000BAC6                            ; ---------------------------------------------------------------------------
0000BAC6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BAC6                            ; (appears when	you walk on sinking platforms)
0000BAC6                            ; ---------------------------------------------------------------------------
0000BAC6                            
0000BAC6                            Obj35:					; XREF: Obj_Index
0000BAC6 7000                       		moveq	#0,d0
0000BAC8 1028 0024                  		move.b	$24(a0),d0
0000BACC 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BAD0 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BAD4                            ; ===========================================================================
0000BAD4 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BAD6 0000                       		dc.w loc_B238-Obj35_Index
0000BAD8 0000                       		dc.w Obj35_Move-Obj35_Index
0000BADA                            ; ===========================================================================
0000BADA                            
0000BADA                            Obj35_Main:				; XREF: Obj35_Index
0000BADA 5428 0024                  		addq.b	#2,$24(a0)
0000BADE 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BAE6 317C 0345 0002             		move.w	#$345,2(a0)
0000BAEC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BAF2 117C 0004 0001             		move.b	#4,1(a0)
0000BAF8 117C 0001 0018             		move.b	#1,$18(a0)
0000BAFE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BB04 117C 0008 0019             		move.b	#8,$19(a0)
0000BB0A 303C 00C8                  		move.w	#$C8,d0
0000BB0E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB14 4A28 0028                  		tst.b	$28(a0)
0000BB18 6700                       		beq.s	loc_B238
0000BB1A 5428 0024                  		addq.b	#2,$24(a0)
0000BB1E 6000 0000                  		bra.w	Obj35_Move
0000BB22                            ; ===========================================================================
0000BB22                            
0000BB22                            loc_B238:				; XREF: Obj35_Index
0000BB22 2268 0030                  		movea.l	$30(a0),a1
0000BB26 3228 0008                  		move.w	8(a0),d1
0000BB2A 9268 002A                  		sub.w	$2A(a0),d1
0000BB2E 0641 000C                  		addi.w	#$C,d1
0000BB32 3001                       		move.w	d1,d0
0000BB34 E248                       		lsr.w	#1,d0
0000BB36 1031 0000                  		move.b	(a1,d0.w),d0
0000BB3A 4440                       		neg.w	d0
0000BB3C D068 002C                  		add.w	$2C(a0),d0
0000BB40 3400                       		move.w	d0,d2
0000BB42 D068 003C                  		add.w	$3C(a0),d0
0000BB46 3140 000C                  		move.w	d0,$C(a0)
0000BB4A 0C41 0084                  		cmpi.w	#$84,d1
0000BB4E 6400                       		bcc.s	loc_B2B0
0000BB50 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB58 0C41 0080                  		cmpi.w	#$80,d1
0000BB5C 6400                       		bcc.s	loc_B2B0
0000BB5E 2028 0008                  		move.l	8(a0),d0
0000BB62 0680 0008 0000             		addi.l	#$80000,d0
0000BB68 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BB6E 6600                       		bne.s	loc_B2B0
0000BB70 6100 0000                  		bsr.w	SingleObjLoad2
0000BB74 6600                       		bne.s	loc_B2B0
0000BB76 12BC 0035                  		move.b	#$35,0(a1)
0000BB7A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB80 3342 002C                  		move.w	d2,$2C(a1)
0000BB84 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BB8A 137C 0001 0028             		move.b	#1,$28(a1)
0000BB90 2468 0038                  		movea.l	$38(a0),a2
0000BB94 6100 FDF0                  		bsr.w	sub_B09C
0000BB98                            
0000BB98                            loc_B2B0:
0000BB98 6000                       		bra.s	Obj35_Animate
0000BB9A                            ; ===========================================================================
0000BB9A                            
0000BB9A                            Obj35_Move:				; XREF: Obj35_Index
0000BB9A 3028 002C                  		move.w	$2C(a0),d0
0000BB9E D068 003C                  		add.w	$3C(a0),d0
0000BBA2 3140 000C                  		move.w	d0,$C(a0)
0000BBA6                            
0000BBA6                            Obj35_Animate:				; XREF: loc_B238
0000BBA6 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBAC 6100 F4AA                  		bsr.w	AnimateSprite
0000BBB0 6000 0000                  		bra.w	DisplaySprite
0000BBB4                            ; ===========================================================================
0000BBB4                            Ani_obj35:
0000BBB4                            	include "_anim\obj35.asm"
0000BBB4                            ; ---------------------------------------------------------------------------
0000BBB4                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBB4                            ; ---------------------------------------------------------------------------
0000BBB4 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBB6 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBBC                            		even
0000BBBC                            		even
0000BBBC                            
0000BBBC                            ; ---------------------------------------------------------------------------
0000BBBC                            ; Sprite mappings - large moving platforms (MZ)
0000BBBC                            ; ---------------------------------------------------------------------------
0000BBBC                            Map_obj2F:
0000BBBC                            	include "_maps\obj2F.asm"
0000BBBC                            ; ---------------------------------------------------------------------------
0000BBBC                            ; Sprite mappings - large moving platforms (MZ)
0000BBBC                            ; ---------------------------------------------------------------------------
0000BBBC 0000                       		dc.w byte_B2DA-Map_obj2F
0000BBBE 0000                       		dc.w byte_B31C-Map_obj2F
0000BBC0 0000                       		dc.w byte_B34F-Map_obj2F
0000BBC2 0D                         byte_B2DA:	dc.b $D
0000BBC3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BBC8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BBCD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BBD2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BBD7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BBDC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BBE1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BBE6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BBEB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BBF0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BBF5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BBFA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BBFF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BC04 0A                         byte_B31C:	dc.b $A
0000BC05 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BC0A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC0F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC14 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC19 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC1E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC23 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC28 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC2D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC32 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC37 06                         byte_B34F:	dc.b 6
0000BC38 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC3D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC42 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC47 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC4C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC51 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC56                            		even
0000BC56                            		even
0000BC56                            
0000BC56                            ; ---------------------------------------------------------------------------
0000BC56                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC56                            ; ---------------------------------------------------------------------------
0000BC56                            Map_obj14:
0000BC56                            	include "_maps\obj14.asm"
0000BC56                            ; --------------------------------------------------------------------------------
0000BC56                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC56                            ; --------------------------------------------------------------------------------
0000BC56                            
0000BC56                            SME_C6wT7:	
0000BC56 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC5A 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BC5E 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BC62 01                         SME_C6wT7_C:	dc.b 1	
0000BC63 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC68 01                         SME_C6wT7_12:	dc.b 1	
0000BC69 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC6E 02                         SME_C6wT7_18:	dc.b 2	
0000BC6F EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BC74 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BC79 01                         SME_C6wT7_23:	dc.b 1	
0000BC7A F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC7F 01                         SME_C6wT7_29:	dc.b 1	
0000BC80 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC85 01                         SME_C6wT7_2F:	dc.b 1	
0000BC86 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BC8C 00                         		even
0000BC8C 00                         		even
0000BC8C                            
0000BC8C                            ; ===========================================================================
0000BC8C                            ; ---------------------------------------------------------------------------
0000BC8C                            ; Object 30 - large green glassy blocks	(MZ)
0000BC8C                            ; ---------------------------------------------------------------------------
0000BC8C                            
0000BC8C                            Obj30:					; XREF: Obj_Index
0000BC8C 7000                       		moveq	#0,d0
0000BC8E 1028 0024                  		move.b	$24(a0),d0
0000BC92 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BC96 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BC9A 3028 0008                  		move.w	8(a0),d0
0000BC9E 0240 FF80                  		andi.w	#$FF80,d0
0000BCA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCA6 0441 0080                  		subi.w	#$80,d1
0000BCAA 0241 FF80                  		andi.w	#$FF80,d1
0000BCAE 9041                       		sub.w	d1,d0
0000BCB0 0C40 0280                  		cmpi.w	#$280,d0
0000BCB4 6200 0000                  		bhi.w	Obj30_Delete
0000BCB8 6000 0000                  		bra.w	DisplaySprite
0000BCBC                            ; ===========================================================================
0000BCBC                            
0000BCBC                            Obj30_Delete:
0000BCBC 6000 0000                  		bra.w	DeleteObject
0000BCC0                            ; ===========================================================================
0000BCC0 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BCC2 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BCC4 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BCC6 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BCC8 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BCCA                            
0000BCCA 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BCCD 0400 01                    		dc.b 4,	0, 1
0000BCD0 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BCD3 0800 01                    		dc.b 8,	0, 1
0000BCD6                            ; ===========================================================================
0000BCD6                            
0000BCD6                            Obj30_Main:				; XREF: Obj30_Index
0000BCD6 45F9 0000 BCCA             		lea	(Obj30_Vars1).l,a2
0000BCDC 7201                       		moveq	#1,d1
0000BCDE 117C 0048 0016             		move.b	#$48,$16(a0)
0000BCE4 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BCEA 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BCEC 45F9 0000 BCD0             		lea	(Obj30_Vars2).l,a2
0000BCF2 7201                       		moveq	#1,d1
0000BCF4 117C 0038 0016             		move.b	#$38,$16(a0)
0000BCFA                            
0000BCFA                            loc_B40C:
0000BCFA 2248                       		movea.l	a0,a1
0000BCFC 6000                       		bra.s	Obj30_Load	; load main object
0000BCFE                            ; ===========================================================================
0000BCFE                            
0000BCFE                            Obj30_Loop:
0000BCFE 6100 0000                  		bsr.w	SingleObjLoad2
0000BD02 6600                       		bne.s	loc_B480
0000BD04                            
0000BD04                            Obj30_Load:				; XREF: Obj30_Main
0000BD04 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD08 12BC 0030                  		move.b	#$30,0(a1)
0000BD0C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD12 101A                       		move.b	(a2)+,d0
0000BD14 4880                       		ext.w	d0
0000BD16 D068 000C                  		add.w	$C(a0),d0
0000BD1A 3340 000C                  		move.w	d0,$C(a1)
0000BD1E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD26 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD2C 137C 0004 0001             		move.b	#4,1(a1)
0000BD32 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD38 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD3E 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD44 137C 0004 0018             		move.b	#4,$18(a1)
0000BD4A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD4E 2348 003C                  		move.l	a0,$3C(a1)
0000BD52 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD56                            
0000BD56 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD5C 137C 0003 0018             		move.b	#3,$18(a1)
0000BD62 5029 0028                  		addq.b	#8,$28(a1)
0000BD66 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BD6C                            
0000BD6C                            loc_B480:
0000BD6C 317C 0090 0032             		move.w	#$90,$32(a0)
0000BD72 08E8 0004 0001             		bset	#4,1(a0)
0000BD78                            
0000BD78                            Obj30_Block012:				; XREF: Obj30_Index
0000BD78 6100 0000                  		bsr.w	Obj30_Types
0000BD7C 323C 002B                  		move.w	#$2B,d1
0000BD80 343C 0048                  		move.w	#$48,d2
0000BD84 363C 0049                  		move.w	#$49,d3
0000BD88 3828 0008                  		move.w	8(a0),d4
0000BD8C 6000 0000                  		bra.w	SolidObject
0000BD90                            ; ===========================================================================
0000BD90                            
0000BD90                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BD90 2268 003C                  		movea.l	$3C(a0),a1
0000BD94 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BD9A 6000 0000                  		bra.w	Obj30_Types
0000BD9E                            ; ===========================================================================
0000BD9E                            
0000BD9E                            Obj30_Block34:				; XREF: Obj30_Index
0000BD9E 6100 0000                  		bsr.w	Obj30_Types
0000BDA2 323C 002B                  		move.w	#$2B,d1
0000BDA6 343C 0038                  		move.w	#$38,d2
0000BDAA 363C 0039                  		move.w	#$39,d3
0000BDAE 3828 0008                  		move.w	8(a0),d4
0000BDB2 6000 0000                  		bra.w	SolidObject
0000BDB6                            ; ===========================================================================
0000BDB6                            
0000BDB6                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDB6 2268 003C                  		movea.l	$3C(a0),a1
0000BDBA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDC0 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BDC6 6000 0002                  		bra.w	*+4
0000BDCA                            
0000BDCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDCA                            
0000BDCA                            
0000BDCA                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BDCA 7000                       		moveq	#0,d0
0000BDCC 1028 0028                  		move.b	$28(a0),d0
0000BDD0 0240 0007                  		andi.w	#7,d0
0000BDD4 D040                       		add.w	d0,d0
0000BDD6 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BDDA 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BDDE                            ; End of function Obj30_Types
0000BDDE                            
0000BDDE                            ; ===========================================================================
0000BDDE 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BDE0 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BDE2 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BDE4 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BDE6 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BDE8 4E75                       		rts	
0000BDEA                            ; ===========================================================================
0000BDEA                            
0000BDEA                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BDEA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDEE 323C 0040                  		move.w	#$40,d1
0000BDF2 6000                       		bra.s	loc_B514
0000BDF4                            ; ===========================================================================
0000BDF4                            
0000BDF4                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BDF4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDF8 323C 0040                  		move.w	#$40,d1
0000BDFC 4440                       		neg.w	d0
0000BDFE D041                       		add.w	d1,d0
0000BE00                            
0000BE00                            loc_B514:				; XREF: Obj30_Type01
0000BE00 0828 0003 0028             		btst	#3,$28(a0)
0000BE06 6700                       		beq.s	loc_B526
0000BE08 4440                       		neg.w	d0
0000BE0A D041                       		add.w	d1,d0
0000BE0C E208                       		lsr.b	#1,d0
0000BE0E 0640 0020                  		addi.w	#$20,d0
0000BE12                            
0000BE12                            loc_B526:
0000BE12 6000 0000                  		bra.w	loc_B5EE
0000BE16                            ; ===========================================================================
0000BE16                            
0000BE16                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE16 0828 0003 0028             		btst	#3,$28(a0)
0000BE1C 6700                       		beq.s	loc_B53E
0000BE1E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE22 0440 0010                  		subi.w	#$10,d0
0000BE26 6000 0000                  		bra.w	loc_B5EE
0000BE2A                            ; ===========================================================================
0000BE2A                            
0000BE2A                            loc_B53E:
0000BE2A 0828 0003 0022             		btst	#3,$22(a0)
0000BE30 6600                       		bne.s	loc_B54E
0000BE32 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE38 6000                       		bra.s	loc_B582
0000BE3A                            ; ===========================================================================
0000BE3A                            
0000BE3A                            loc_B54E:
0000BE3A 4A28 0034                  		tst.b	$34(a0)
0000BE3E 6600                       		bne.s	loc_B582
0000BE40 117C 0001 0034             		move.b	#1,$34(a0)
0000BE46 08E8 0000 0035             		bset	#0,$35(a0)
0000BE4C 6700                       		beq.s	loc_B582
0000BE4E 08E8 0007 0034             		bset	#7,$34(a0)
0000BE54 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE5A 117C 000A 0038             		move.b	#$A,$38(a0)
0000BE60 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BE66 6600                       		bne.s	loc_B582
0000BE68 317C 0040 0036             		move.w	#$40,$36(a0)
0000BE6E                            
0000BE6E                            loc_B582:
0000BE6E 4A28 0034                  		tst.b	$34(a0)
0000BE72 6A00                       		bpl.s	loc_B5AA
0000BE74 4A28 0038                  		tst.b	$38(a0)
0000BE78 6700                       		beq.s	loc_B594
0000BE7A 5328 0038                  		subq.b	#1,$38(a0)
0000BE7E 6600                       		bne.s	loc_B5AA
0000BE80                            
0000BE80                            loc_B594:
0000BE80 4A68 0032                  		tst.w	$32(a0)
0000BE84 6700                       		beq.s	loc_B5A4
0000BE86 5368 0032                  		subq.w	#1,$32(a0)
0000BE8A 5368 0036                  		subq.w	#1,$36(a0)
0000BE8E 6600                       		bne.s	loc_B5AA
0000BE90                            
0000BE90                            loc_B5A4:
0000BE90 08A8 0007 0034             		bclr	#7,$34(a0)
0000BE96                            
0000BE96                            loc_B5AA:
0000BE96 3028 0032                  		move.w	$32(a0),d0
0000BE9A 6000                       		bra.s	loc_B5EE
0000BE9C                            ; ===========================================================================
0000BE9C                            
0000BE9C                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BE9C 0828 0003 0028             		btst	#3,$28(a0)
0000BEA2 6700                       		beq.s	Obj30_ChkSwitch
0000BEA4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BEA8 0440 0010                  		subi.w	#$10,d0
0000BEAC 6000                       		bra.s	loc_B5EE
0000BEAE                            ; ===========================================================================
0000BEAE                            
0000BEAE                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEAE 4A28 0034                  		tst.b	$34(a0)
0000BEB2 6600                       		bne.s	loc_B5E0
0000BEB4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEB8 7000                       		moveq	#0,d0
0000BEBA 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BEBE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BEC0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BEC4 6700                       		beq.s	loc_B5EA	; if not, branch
0000BEC6 117C 0001 0034             		move.b	#1,$34(a0)
0000BECC                            
0000BECC                            loc_B5E0:
0000BECC 4A68 0032                  		tst.w	$32(a0)
0000BED0 6700                       		beq.s	loc_B5EA
0000BED2 5568 0032                  		subq.w	#2,$32(a0)
0000BED6                            
0000BED6                            loc_B5EA:
0000BED6 3028 0032                  		move.w	$32(a0),d0
0000BEDA                            
0000BEDA                            loc_B5EE:
0000BEDA 3228 0030                  		move.w	$30(a0),d1
0000BEDE 9240                       		sub.w	d0,d1
0000BEE0 3141 000C                  		move.w	d1,$C(a0)
0000BEE4 4E75                       		rts	
0000BEE6                            ; ===========================================================================
0000BEE6                            ; ---------------------------------------------------------------------------
0000BEE6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEE6                            ; ---------------------------------------------------------------------------
0000BEE6                            Map_obj30:
0000BEE6                            	include "_maps\obj30.asm"
0000BEE6                            ; ---------------------------------------------------------------------------
0000BEE6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEE6                            ; ---------------------------------------------------------------------------
0000BEE6 0000                       		dc.w byte_B600-Map_obj30
0000BEE8 0000                       		dc.w byte_B63D-Map_obj30
0000BEEA 0000                       		dc.w byte_B648-Map_obj30
0000BEEC 0C                         byte_B600:	dc.b $C
0000BEED B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BEF2 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BEF7 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BEFC C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BF01 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BF06 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BF0B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF10 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF15 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF1A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF1F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF24 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF29 02                         byte_B63D:	dc.b 2
0000BF2A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF2F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF34 0A                         byte_B648:	dc.b $A
0000BF35 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF3A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF3F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF44 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF49 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF4E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF53 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF58 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF5D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BF62 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BF68 00                         		even
0000BF68 00                         		even
0000BF68                            
0000BF68                            ; ===========================================================================
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            
0000BF68                            Obj31:					; XREF: Obj_Index
0000BF68 7000                       		moveq	#0,d0
0000BF6A 1028 0024                  		move.b	$24(a0),d0
0000BF6E 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BF72 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BF76                            ; ===========================================================================
0000BF76 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BF78 0000                       		dc.w loc_B798-Obj31_Index
0000BF7A 0000                       		dc.w loc_B7FE-Obj31_Index
0000BF7C 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BF7E 0000                       		dc.w loc_B7E2-Obj31_Index
0000BF80                            
0000BF80 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BF82 0100                       		dc.b 1,	0
0000BF84                            
0000BF84 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BF87 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BF8A 08CC 03                    		dc.b 8,	$CC, 3
0000BF8D 06F0 02                    		dc.b 6,	$F0, 2
0000BF90                            
0000BF90 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BF94 5000 7800                  		dc.w $5000, $7800
0000BF98 3800 5800                  		dc.w $3800, $5800
0000BF9C B800                       		dc.w $B800
0000BF9E                            ; ===========================================================================
0000BF9E                            
0000BF9E                            Obj31_Main:				; XREF: Obj31_Index
0000BF9E 7000                       		moveq	#0,d0
0000BFA0 1028 0028                  		move.b	$28(a0),d0
0000BFA4 6A00                       		bpl.s	loc_B6CE
0000BFA6 0240 007F                  		andi.w	#$7F,d0
0000BFAA D040                       		add.w	d0,d0
0000BFAC 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFB0 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFB4 101A                       		move.b	(a2)+,d0
0000BFB6 1140 0028                  		move.b	d0,$28(a0)
0000BFBA                            
0000BFBA                            loc_B6CE:
0000BFBA 0200 000F                  		andi.b	#$F,d0
0000BFBE D040                       		add.w	d0,d0
0000BFC0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BFC4 4A40                       		tst.w	d0
0000BFC6 6600                       		bne.s	loc_B6E0
0000BFC8 3142 0032                  		move.w	d2,$32(a0)
0000BFCC                            
0000BFCC                            loc_B6E0:
0000BFCC 45F9 0000 BF84             		lea	(Obj31_Var).l,a2
0000BFD2 2248                       		movea.l	a0,a1
0000BFD4 7203                       		moveq	#3,d1
0000BFD6 6000                       		bra.s	Obj31_MakeStomper
0000BFD8                            ; ===========================================================================
0000BFD8                            
0000BFD8                            Obj31_Loop:
0000BFD8 6100 0000                  		bsr.w	SingleObjLoad2
0000BFDC 6600 0000                  		bne.w	Obj31_SetSize
0000BFE0                            
0000BFE0                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BFE0 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFE4 12BC 0031                  		move.b	#$31,0(a1)
0000BFE8 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFEE 101A                       		move.b	(a2)+,d0
0000BFF0 4880                       		ext.w	d0
0000BFF2 D068 000C                  		add.w	$C(a0),d0
0000BFF6 3340 000C                  		move.w	d0,$C(a1)
0000BFFA 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C002 337C 0300 0002             		move.w	#$300,2(a1)
0000C008 137C 0004 0001             		move.b	#4,1(a1)
0000C00E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C014 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C01A 137C 0010 0019             		move.b	#$10,$19(a1)
0000C020 3342 0034                  		move.w	d2,$34(a1)
0000C024 137C 0004 0018             		move.b	#4,$18(a1)
0000C02A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C02E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C034 6600                       		bne.s	loc_B76A
0000C036 5341                       		subq.w	#1,d1
0000C038 1028 0028                  		move.b	$28(a0),d0
0000C03C 0240 00F0                  		andi.w	#$F0,d0
0000C040 0C40 0020                  		cmpi.w	#$20,d0
0000C044 679A                       		beq.s	Obj31_MakeStomper
0000C046 137C 0038 0019             		move.b	#$38,$19(a1)
0000C04C 137C 0090 0020             		move.b	#$90,$20(a1)
0000C052 5241                       		addq.w	#1,d1
0000C054                            
0000C054                            loc_B76A:
0000C054 2348 003C                  		move.l	a0,$3C(a1)
0000C058 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C05C                            
0000C05C 137C 0003 0018             		move.b	#3,$18(a1)
0000C062                            
0000C062                            Obj31_SetSize:
0000C062 7000                       		moveq	#0,d0
0000C064 1028 0028                  		move.b	$28(a0),d0
0000C068 E648                       		lsr.w	#3,d0
0000C06A 0200 000E                  		andi.b	#$E,d0
0000C06E 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C072 115A 0019                  		move.b	(a2)+,$19(a0)
0000C076 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C07A 6000                       		bra.s	loc_B798
0000C07C                            ; ===========================================================================
0000C07C 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C07E 3009                       		dc.b $30, 9
0000C080 100A                       		dc.b $10, $A
0000C082                            ; ===========================================================================
0000C082                            
0000C082                            loc_B798:				; XREF: Obj31_Index
0000C082 6100 0000                  		bsr.w	Obj31_Types
0000C086 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C08C 7200                       		moveq	#0,d1
0000C08E 1228 0019                  		move.b	$19(a0),d1
0000C092 0641 000B                  		addi.w	#$B,d1
0000C096 343C 000C                  		move.w	#$C,d2
0000C09A 363C 000D                  		move.w	#$D,d3
0000C09E 3828 0008                  		move.w	8(a0),d4
0000C0A2 6100 0000                  		bsr.w	SolidObject
0000C0A6 0828 0003 0022             		btst	#3,$22(a0)
0000C0AC 6700                       		beq.s	Obj31_Display
0000C0AE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0B4 6400                       		bcc.s	Obj31_Display
0000C0B6 2448                       		movea.l	a0,a2
0000C0B8 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0BC 4EB9 0000 0000             		jsr	KillSonic
0000C0C2 204A                       		movea.l	a2,a0
0000C0C4                            
0000C0C4                            Obj31_Display:
0000C0C4 6100 0000                  		bsr.w	DisplaySprite
0000C0C8 6000 0000                  		bra.w	Obj31_ChkDel
0000C0CC                            ; ===========================================================================
0000C0CC                            
0000C0CC                            loc_B7E2:				; XREF: Obj31_Index
0000C0CC 117C 0080 0016             		move.b	#$80,$16(a0)
0000C0D2 08E8 0004 0001             		bset	#4,1(a0)
0000C0D8 2268 003C                  		movea.l	$3C(a0),a1
0000C0DC 1029 0032                  		move.b	$32(a1),d0
0000C0E0 EA08                       		lsr.b	#5,d0
0000C0E2 5600                       		addq.b	#3,d0
0000C0E4 1140 001A                  		move.b	d0,$1A(a0)
0000C0E8                            
0000C0E8                            loc_B7FE:				; XREF: Obj31_Index
0000C0E8 2268 003C                  		movea.l	$3C(a0),a1
0000C0EC 7000                       		moveq	#0,d0
0000C0EE 1029 0032                  		move.b	$32(a1),d0
0000C0F2 D068 0030                  		add.w	$30(a0),d0
0000C0F6 3140 000C                  		move.w	d0,$C(a0)
0000C0FA                            
0000C0FA                            Obj31_Display2:				; XREF: Obj31_Index
0000C0FA 6100 0000                  		bsr.w	DisplaySprite
0000C0FE                            
0000C0FE                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C0FE 3028 0008                  		move.w	8(a0),d0
0000C102 0240 FF80                  		andi.w	#$FF80,d0
0000C106 3238 F700                  		move.w	($FFFFF700).w,d1
0000C10A 0441 0080                  		subi.w	#$80,d1
0000C10E 0241 FF80                  		andi.w	#$FF80,d1
0000C112 9041                       		sub.w	d1,d0
0000C114 0C40 0280                  		cmpi.w	#$280,d0
0000C118 6200 0000                  		bhi.w	DeleteObject
0000C11C 4E75                       		rts	
0000C11E                            ; ===========================================================================
0000C11E                            
0000C11E                            Obj31_Types:				; XREF: loc_B798
0000C11E 1028 0028                  		move.b	$28(a0),d0
0000C122 0240 000F                  		andi.w	#$F,d0
0000C126 D040                       		add.w	d0,d0
0000C128 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C12C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C130                            ; ===========================================================================
0000C130 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C132 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C134 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C136 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C138 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C13A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C13C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C13E                            ; ===========================================================================
0000C13E                            
0000C13E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C13E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C142 7000                       		moveq	#0,d0
0000C144 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C148 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C14C 6700                       		beq.s	loc_B8A8	; if not, branch
0000C14E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C152 6A00                       		bpl.s	loc_B872
0000C154 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C15A 6700                       		beq.s	loc_B8A0
0000C15C                            
0000C15C                            loc_B872:
0000C15C 4A68 0032                  		tst.w	$32(a0)
0000C160 6700                       		beq.s	loc_B8A0
0000C162 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C166 0200 000F                  		andi.b	#$F,d0
0000C16A 6600                       		bne.s	loc_B892
0000C16C 4A28 0001                  		tst.b	1(a0)
0000C170 6A00                       		bpl.s	loc_B892
0000C172 303C 00C7                  		move.w	#$C7,d0
0000C176 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C17C                            
0000C17C                            loc_B892:
0000C17C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C182 6400                       		bcc.s	Obj31_Restart
0000C184 317C 0000 0032             		move.w	#0,$32(a0)
0000C18A                            
0000C18A                            loc_B8A0:
0000C18A 317C 0000 0012             		move.w	#0,$12(a0)
0000C190 6000                       		bra.s	Obj31_Restart
0000C192                            ; ===========================================================================
0000C192                            
0000C192                            loc_B8A8:				; XREF: Obj31_Type00
0000C192 3228 0034                  		move.w	$34(a0),d1
0000C196 B268 0032                  		cmp.w	$32(a0),d1
0000C19A 6700                       		beq.s	Obj31_Restart
0000C19C 3028 0012                  		move.w	$12(a0),d0
0000C1A0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1A6 D168 0032                  		add.w	d0,$32(a0)
0000C1AA B268 0032                  		cmp.w	$32(a0),d1
0000C1AE 6200                       		bhi.s	Obj31_Restart
0000C1B0 3141 0032                  		move.w	d1,$32(a0)
0000C1B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1BA 4A28 0001                  		tst.b	1(a0)
0000C1BE 6A00                       		bpl.s	Obj31_Restart
0000C1C0 303C 00BD                  		move.w	#$BD,d0
0000C1C4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C1CA                            
0000C1CA                            Obj31_Restart:
0000C1CA 7000                       		moveq	#0,d0
0000C1CC 1028 0032                  		move.b	$32(a0),d0
0000C1D0 D068 0030                  		add.w	$30(a0),d0
0000C1D4 3140 000C                  		move.w	d0,$C(a0)
0000C1D8 4E75                       		rts	
0000C1DA                            ; ===========================================================================
0000C1DA                            
0000C1DA                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C1DA 4A68 0036                  		tst.w	$36(a0)
0000C1DE 6700                       		beq.s	loc_B938
0000C1E0 4A68 0038                  		tst.w	$38(a0)
0000C1E4 6700                       		beq.s	loc_B902
0000C1E6 5368 0038                  		subq.w	#1,$38(a0)
0000C1EA 6000                       		bra.s	loc_B97C
0000C1EC                            ; ===========================================================================
0000C1EC                            
0000C1EC                            loc_B902:
0000C1EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1F0 0200 000F                  		andi.b	#$F,d0
0000C1F4 6600                       		bne.s	loc_B91C
0000C1F6 4A28 0001                  		tst.b	1(a0)
0000C1FA 6A00                       		bpl.s	loc_B91C
0000C1FC 303C 00C7                  		move.w	#$C7,d0
0000C200 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C206                            
0000C206                            loc_B91C:
0000C206 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C20C 6400                       		bcc.s	loc_B97C
0000C20E 317C 0000 0032             		move.w	#0,$32(a0)
0000C214 317C 0000 0012             		move.w	#0,$12(a0)
0000C21A 317C 0000 0036             		move.w	#0,$36(a0)
0000C220 6000                       		bra.s	loc_B97C
0000C222                            ; ===========================================================================
0000C222                            
0000C222                            loc_B938:				; XREF: Obj31_Type01
0000C222 3228 0034                  		move.w	$34(a0),d1
0000C226 B268 0032                  		cmp.w	$32(a0),d1
0000C22A 6700                       		beq.s	loc_B97C
0000C22C 3028 0012                  		move.w	$12(a0),d0
0000C230 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C236 D168 0032                  		add.w	d0,$32(a0)
0000C23A B268 0032                  		cmp.w	$32(a0),d1
0000C23E 6200                       		bhi.s	loc_B97C
0000C240 3141 0032                  		move.w	d1,$32(a0)
0000C244 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C24A 317C 0001 0036             		move.w	#1,$36(a0)
0000C250 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C256 4A28 0001                  		tst.b	1(a0)
0000C25A 6A00                       		bpl.s	loc_B97C
0000C25C 303C 00BD                  		move.w	#$BD,d0
0000C260 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C266                            
0000C266                            loc_B97C:
0000C266 6000 FF62                  		bra.w	Obj31_Restart
0000C26A                            ; ===========================================================================
0000C26A                            
0000C26A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C26A 3038 D008                  		move.w	($FFFFD008).w,d0
0000C26E 9068 0008                  		sub.w	8(a0),d0
0000C272 6400                       		bcc.s	loc_B98C
0000C274 4440                       		neg.w	d0
0000C276                            
0000C276                            loc_B98C:
0000C276 0C40 0090                  		cmpi.w	#$90,d0
0000C27A 6400                       		bcc.s	loc_B996
0000C27C 5228 0028                  		addq.b	#1,$28(a0)
0000C280                            
0000C280                            loc_B996:
0000C280 6000 FF48                  		bra.w	Obj31_Restart
0000C284                            ; ===========================================================================
0000C284                            ; ---------------------------------------------------------------------------
0000C284                            ; Object 45 - spiked metal block from beta version (MZ)
0000C284                            ; ---------------------------------------------------------------------------
0000C284                            
0000C284                            Obj45:					; XREF: Obj_Index
0000C284 7000                       		moveq	#0,d0
0000C286 1028 0024                  		move.b	$24(a0),d0
0000C28A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C28E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C292                            ; ===========================================================================
0000C292 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C294 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C296 0000                       		dc.w loc_BA8E-Obj45_Index
0000C298 0000                       		dc.w Obj45_Display-Obj45_Index
0000C29A 0000                       		dc.w loc_BA7A-Obj45_Index
0000C29C                            
0000C29C 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C29F 04E4 01                    		dc.b	4, $E4,	  1
0000C2A2 0834 03                    		dc.b	8, $34,	  3
0000C2A5 0628 02                    		dc.b	6, $28,	  2
0000C2A8                            
0000C2A8 3800                       word_B9BE:	dc.w $3800
0000C2AA A000                       		dc.w -$6000
0000C2AC 5000                       		dc.w $5000
0000C2AE                            ; ===========================================================================
0000C2AE                            
0000C2AE                            Obj45_Main:				; XREF: Obj45_Index
0000C2AE 7000                       		moveq	#0,d0
0000C2B0 1028 0028                  		move.b	$28(a0),d0
0000C2B4 D040                       		add.w	d0,d0
0000C2B6 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2BA 45F9 0000 C29C             		lea	(Obj45_Var).l,a2
0000C2C0 2248                       		movea.l	a0,a1
0000C2C2 7203                       		moveq	#3,d1
0000C2C4 6000                       		bra.s	Obj45_Load
0000C2C6                            ; ===========================================================================
0000C2C6                            
0000C2C6                            Obj45_Loop:
0000C2C6 6100 0000                  		bsr.w	SingleObjLoad2
0000C2CA 6600                       		bne.s	loc_BA52
0000C2CC                            
0000C2CC                            Obj45_Load:				; XREF: Obj45_Main
0000C2CC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C2D0 12BC 0045                  		move.b	#$45,0(a1)
0000C2D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C2DA 101A                       		move.b	(a2)+,d0
0000C2DC 4880                       		ext.w	d0
0000C2DE D068 0008                  		add.w	8(a0),d0
0000C2E2 3340 0008                  		move.w	d0,8(a1)
0000C2E6 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C2EE 337C 0300 0002             		move.w	#$300,2(a1)
0000C2F4 137C 0004 0001             		move.b	#4,1(a1)
0000C2FA 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C300 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C306 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C30C 137C 0020 0019             		move.b	#$20,$19(a1)
0000C312 3342 0034                  		move.w	d2,$34(a1)
0000C316 137C 0004 0018             		move.b	#4,$18(a1)
0000C31C 0C12 0001                  		cmpi.b	#1,(a2)
0000C320 6600                       		bne.s	loc_BA40
0000C322 137C 0091 0020             		move.b	#$91,$20(a1)
0000C328                            
0000C328                            loc_BA40:
0000C328 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C32C 2348 003C                  		move.l	a0,$3C(a1)
0000C330 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C334                            
0000C334 137C 0003 0018             		move.b	#3,$18(a1)
0000C33A                            
0000C33A                            loc_BA52:
0000C33A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C340                            
0000C340                            Obj45_Solid:				; XREF: Obj45_Index
0000C340 3F28 0008                  		move.w	8(a0),-(sp)
0000C344 6100 0000                  		bsr.w	Obj45_Move
0000C348 323C 0017                  		move.w	#$17,d1
0000C34C 343C 0020                  		move.w	#$20,d2
0000C350 363C 0020                  		move.w	#$20,d3
0000C354 381F                       		move.w	(sp)+,d4
0000C356 6100 0000                  		bsr.w	SolidObject
0000C35A 6100 0000                  		bsr.w	DisplaySprite
0000C35E 6000 0000                  		bra.w	Obj45_ChkDel
0000C362                            ; ===========================================================================
0000C362                            
0000C362                            loc_BA7A:				; XREF: Obj45_Index
0000C362 2268 003C                  		movea.l	$3C(a0),a1
0000C366 1029 0032                  		move.b	$32(a1),d0
0000C36A 0600 0010                  		addi.b	#$10,d0
0000C36E EA08                       		lsr.b	#5,d0
0000C370 5600                       		addq.b	#3,d0
0000C372 1140 001A                  		move.b	d0,$1A(a0)
0000C376                            
0000C376                            loc_BA8E:				; XREF: Obj45_Index
0000C376 2268 003C                  		movea.l	$3C(a0),a1
0000C37A 7000                       		moveq	#0,d0
0000C37C 1029 0032                  		move.b	$32(a1),d0
0000C380 4440                       		neg.w	d0
0000C382 D068 0030                  		add.w	$30(a0),d0
0000C386 3140 0008                  		move.w	d0,8(a0)
0000C38A                            
0000C38A                            Obj45_Display:				; XREF: Obj45_Index
0000C38A 6100 0000                  		bsr.w	DisplaySprite
0000C38E                            
0000C38E                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C38E 3028 003A                  		move.w	$3A(a0),d0
0000C392 0240 FF80                  		andi.w	#$FF80,d0
0000C396 3238 F700                  		move.w	($FFFFF700).w,d1
0000C39A 0441 0080                  		subi.w	#$80,d1
0000C39E 0241 FF80                  		andi.w	#$FF80,d1
0000C3A2 9041                       		sub.w	d1,d0
0000C3A4 0C40 0280                  		cmpi.w	#$280,d0
0000C3A8 6200 0000                  		bhi.w	DeleteObject
0000C3AC 4E75                       		rts	
0000C3AE                            
0000C3AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3AE                            
0000C3AE                            
0000C3AE                            Obj45_Move:				; XREF: Obj45_Solid
0000C3AE 7000                       		moveq	#0,d0
0000C3B0 1028 0028                  		move.b	$28(a0),d0
0000C3B4 D040                       		add.w	d0,d0
0000C3B6 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3BA 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C3BE                            ; End of function Obj45_Move
0000C3BE                            
0000C3BE                            ; ===========================================================================
0000C3BE 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C3C0 0000                       		dc.w loc_BADA-off_BAD6
0000C3C2                            ; ===========================================================================
0000C3C2                            
0000C3C2                            loc_BADA:				; XREF: off_BAD6
0000C3C2 4A68 0036                  		tst.w	$36(a0)
0000C3C6 6700                       		beq.s	loc_BB08
0000C3C8 4A68 0038                  		tst.w	$38(a0)
0000C3CC 6700                       		beq.s	loc_BAEC
0000C3CE 5368 0038                  		subq.w	#1,$38(a0)
0000C3D2 6000                       		bra.s	loc_BB3C
0000C3D4                            ; ===========================================================================
0000C3D4                            
0000C3D4                            loc_BAEC:
0000C3D4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3DA 6400                       		bcc.s	loc_BB3C
0000C3DC 317C 0000 0032             		move.w	#0,$32(a0)
0000C3E2 317C 0000 0010             		move.w	#0,$10(a0)
0000C3E8 317C 0000 0036             		move.w	#0,$36(a0)
0000C3EE 6000                       		bra.s	loc_BB3C
0000C3F0                            ; ===========================================================================
0000C3F0                            
0000C3F0                            loc_BB08:				; XREF: loc_BADA
0000C3F0 3228 0034                  		move.w	$34(a0),d1
0000C3F4 B268 0032                  		cmp.w	$32(a0),d1
0000C3F8 6700                       		beq.s	loc_BB3C
0000C3FA 3028 0010                  		move.w	$10(a0),d0
0000C3FE 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C404 D168 0032                  		add.w	d0,$32(a0)
0000C408 B268 0032                  		cmp.w	$32(a0),d1
0000C40C 6200                       		bhi.s	loc_BB3C
0000C40E 3141 0032                  		move.w	d1,$32(a0)
0000C412 317C 0000 0010             		move.w	#0,$10(a0)
0000C418 317C 0001 0036             		move.w	#1,$36(a0)
0000C41E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C424                            
0000C424                            loc_BB3C:
0000C424 7000                       		moveq	#0,d0
0000C426 1028 0032                  		move.b	$32(a0),d0
0000C42A 4440                       		neg.w	d0
0000C42C D068 0030                  		add.w	$30(a0),d0
0000C430 3140 0008                  		move.w	d0,8(a0)
0000C434 4E75                       		rts	
0000C436                            ; ===========================================================================
0000C436                            ; ---------------------------------------------------------------------------
0000C436                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C436                            ; ---------------------------------------------------------------------------
0000C436                            Map_obj31:
0000C436                            	include "_maps\obj31.asm"
0000C436                            ; ---------------------------------------------------------------------------
0000C436                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C436                            ; ---------------------------------------------------------------------------
0000C436 0000                       		dc.w byte_BB64-Map_obj31
0000C438 0000                       		dc.w byte_BB7E-Map_obj31
0000C43A 0000                       		dc.w byte_BB98-Map_obj31
0000C43C 0000                       		dc.w byte_BB9E-Map_obj31
0000C43E 0000                       		dc.w byte_BBA9-Map_obj31
0000C440 0000                       		dc.w byte_BBBE-Map_obj31
0000C442 0000                       		dc.w byte_BBDD-Map_obj31
0000C444 0000                       		dc.w byte_BC06-Map_obj31
0000C446 0000                       		dc.w byte_BC06-Map_obj31
0000C448 0000                       		dc.w byte_BC39-Map_obj31
0000C44A 0000                       		dc.w byte_BC53-Map_obj31
0000C44C 05                         byte_BB64:	dc.b 5
0000C44D F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C452 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C457 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C45C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C461 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C466 05                         byte_BB7E:	dc.b 5
0000C467 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C46C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C471 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C476 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C47B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C480 01                         byte_BB98:	dc.b 1
0000C481 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C486 02                         byte_BB9E:	dc.b 2
0000C487 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C48C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C491 04                         byte_BBA9:	dc.b 4
0000C492 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C497 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C49C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4A1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4A6 06                         byte_BBBE:	dc.b 6
0000C4A7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4AC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4B1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4B6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4BB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4C0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4C5 08                         byte_BBDD:	dc.b 8
0000C4C6 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4CB B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4D0 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4D5 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4DA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4DF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4E4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4E9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4EE 0A                         byte_BC06:	dc.b $A
0000C4EF 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C4F4 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C4F9 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4FE B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C503 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C508 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C50D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C512 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C517 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C51C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C521 05                         byte_BC39:	dc.b 5
0000C522 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C527 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C52C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C531 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C536 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C53B 01                         byte_BC53:	dc.b 1
0000C53C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C542 00                         		even
0000C542 00                         		even
0000C542                            
0000C542                            ; ---------------------------------------------------------------------------
0000C542                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C542                            ; ---------------------------------------------------------------------------
0000C542                            Map_obj45:
0000C542                            	include "_maps\obj45.asm"
0000C542                            ; ---------------------------------------------------------------------------
0000C542                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C542                            ; ---------------------------------------------------------------------------
0000C542 0000                       		dc.w byte_BC6C-Map_obj45
0000C544 0000                       		dc.w byte_BC7C-Map_obj45
0000C546 0000                       		dc.w byte_BC8C-Map_obj45
0000C548 0000                       		dc.w byte_BC92-Map_obj45
0000C54A 0000                       		dc.w byte_BC9D-Map_obj45
0000C54C 0000                       		dc.w byte_BCB2-Map_obj45
0000C54E 0000                       		dc.w byte_BCD1-Map_obj45
0000C550 0000                       		dc.w byte_BCFA-Map_obj45
0000C552 0000                       		dc.w byte_BCFA-Map_obj45
0000C554 03                         byte_BC6C:	dc.b 3
0000C555 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C55A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C55F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C564 03                         byte_BC7C:	dc.b 3
0000C565 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C56A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C56F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C574 01                         byte_BC8C:	dc.b 1
0000C575 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C57A 02                         byte_BC92:	dc.b 2
0000C57B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C580 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C585 04                         byte_BC9D:	dc.b 4
0000C586 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C58B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C590 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C595 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C59A 06                         byte_BCB2:	dc.b 6
0000C59B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5A0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5A5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5AA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5AF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5B4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5B9 08                         byte_BCD1:	dc.b 8
0000C5BA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5BF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5C4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5C9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5CE F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5D3 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5D8 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5DD F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5E2 08                         byte_BCFA:	dc.b 8
0000C5E3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5E8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5ED F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5F2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5F7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5FC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C601 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C606 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C60B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C610 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C616 00                         		even
0000C616 00                         		even
0000C616                            
0000C616                            ; ===========================================================================
0000C616                            ; ---------------------------------------------------------------------------
0000C616                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C616                            ; ---------------------------------------------------------------------------
0000C616                            
0000C616                            Obj32:					; XREF: Obj_Index
0000C616 7000                       		moveq	#0,d0
0000C618 1028 0024                  		move.b	$24(a0),d0
0000C61C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C620 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C624                            ; ===========================================================================
0000C624 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C626 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C628                            ; ===========================================================================
0000C628                            
0000C628                            Obj32_Main:				; XREF: Obj32_Index
0000C628 5428 0024                  		addq.b	#2,$24(a0)
0000C62C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C634 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C63A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C640 6700                       		beq.s	loc_BD60
0000C642 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C648                            
0000C648                            loc_BD60:
0000C648 117C 0004 0001             		move.b	#4,1(a0)
0000C64E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C654 117C 0004 0018             		move.b	#4,$18(a0)
0000C65A 5668 000C                  		addq.w	#3,$C(a0)
0000C65E                            
0000C65E                            Obj32_Pressed:				; XREF: Obj32_Index
0000C65E 4A28 0001                  		tst.b	1(a0)
0000C662 6A00                       		bpl.s	Obj32_Display
0000C664 323C 001B                  		move.w	#$1B,d1
0000C668 343C 0005                  		move.w	#5,d2
0000C66C 363C 0005                  		move.w	#5,d3
0000C670 3828 0008                  		move.w	8(a0),d4
0000C674 6100 0000                  		bsr.w	SolidObject
0000C678 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C67E 1028 0028                  		move.b	$28(a0),d0
0000C682 0240 000F                  		andi.w	#$F,d0
0000C686 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C68A 47F3 0000                  		lea	(a3,d0.w),a3
0000C68E 7600                       		moveq	#0,d3
0000C690 0828 0006 0028             		btst	#6,$28(a0)
0000C696 6700                       		beq.s	loc_BDB2
0000C698 7607                       		moveq	#7,d3
0000C69A                            
0000C69A                            loc_BDB2:
0000C69A 4A28 0028                  		tst.b	$28(a0)
0000C69E 6A00                       		bpl.s	loc_BDBE
0000C6A0 6100 0000                  		bsr.w	Obj32_MZBlock
0000C6A4 6600                       		bne.s	loc_BDC8
0000C6A6                            
0000C6A6                            loc_BDBE:
0000C6A6 4A28 0025                  		tst.b	$25(a0)
0000C6AA 6600                       		bne.s	loc_BDC8
0000C6AC 0793                       		bclr	d3,(a3)
0000C6AE 6000                       		bra.s	loc_BDDE
0000C6B0                            ; ===========================================================================
0000C6B0                            
0000C6B0                            loc_BDC8:
0000C6B0 4A13                       		tst.b	(a3)
0000C6B2 6600                       		bne.s	loc_BDD6
0000C6B4 303C 00CD                  		move.w	#$CD,d0
0000C6B8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play switch sound
0000C6BE                            
0000C6BE                            loc_BDD6:
0000C6BE 07D3                       		bset	d3,(a3)
0000C6C0 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C6C6                            
0000C6C6                            loc_BDDE:
0000C6C6 0828 0005 0028             		btst	#5,$28(a0)
0000C6CC 6700                       		beq.s	Obj32_Display
0000C6CE 5328 001E                  		subq.b	#1,$1E(a0)
0000C6D2 6A00                       		bpl.s	Obj32_Display
0000C6D4 117C 0007 001E             		move.b	#7,$1E(a0)
0000C6DA 0868 0001 001A             		bchg	#1,$1A(a0)
0000C6E0                            
0000C6E0                            Obj32_Display:
0000C6E0 6100 0000                  		bsr.w	DisplaySprite
0000C6E4 3028 0008                  		move.w	8(a0),d0
0000C6E8 0240 FF80                  		andi.w	#$FF80,d0
0000C6EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6F0 0441 0080                  		subi.w	#$80,d1
0000C6F4 0241 FF80                  		andi.w	#$FF80,d1
0000C6F8 9041                       		sub.w	d1,d0
0000C6FA 0C40 0280                  		cmpi.w	#$280,d0
0000C6FE 6200 0000                  		bhi.w	Obj32_Delete
0000C702 4E75                       		rts	
0000C704                            ; ===========================================================================
0000C704                            
0000C704                            Obj32_Delete:
0000C704 6100 0000                  		bsr.w	DeleteObject
0000C708 4E75                       		rts	
0000C70A                            
0000C70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C70A                            
0000C70A                            
0000C70A                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C70A 3F03                       		move.w	d3,-(sp)
0000C70C 3428 0008                  		move.w	8(a0),d2
0000C710 3628 000C                  		move.w	$C(a0),d3
0000C714 0442 0010                  		subi.w	#$10,d2
0000C718 5143                       		subq.w	#8,d3
0000C71A 383C 0020                  		move.w	#$20,d4
0000C71E 3A3C 0010                  		move.w	#$10,d5
0000C722 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C726 3C3C 005F                  		move.w	#$5F,d6
0000C72A                            
0000C72A                            Obj32_MZLoop:
0000C72A 4A29 0001                  		tst.b	1(a1)
0000C72E 6A00                       		bpl.s	loc_BE4E
0000C730 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C734 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C736                            
0000C736                            loc_BE4E:
0000C736 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C73A 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C73E                            
0000C73E 361F                       		move.w	(sp)+,d3
0000C740 7000                       		moveq	#0,d0
0000C742                            
0000C742                            locret_BE5A:
0000C742 4E75                       		rts	
0000C744                            ; ===========================================================================
0000C744 1010                       Obj32_MZData:	dc.b $10, $10
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C746 7001                       		moveq	#1,d0
0000C748 0240 003F                  		andi.w	#$3F,d0
0000C74C D040                       		add.w	d0,d0
0000C74E 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C752 121A                       		move.b	(a2)+,d1
0000C754 4881                       		ext.w	d1
0000C756 3029 0008                  		move.w	8(a1),d0
0000C75A 9041                       		sub.w	d1,d0
0000C75C 9042                       		sub.w	d2,d0
0000C75E 6400                       		bcc.s	loc_BE80
0000C760 D241                       		add.w	d1,d1
0000C762 D041                       		add.w	d1,d0
0000C764 6500                       		bcs.s	loc_BE84
0000C766 60CE                       		bra.s	loc_BE4E
0000C768                            ; ===========================================================================
0000C768                            
0000C768                            loc_BE80:
0000C768 B044                       		cmp.w	d4,d0
0000C76A 62CA                       		bhi.s	loc_BE4E
0000C76C                            
0000C76C                            loc_BE84:
0000C76C 121A                       		move.b	(a2)+,d1
0000C76E 4881                       		ext.w	d1
0000C770 3029 000C                  		move.w	$C(a1),d0
0000C774 9041                       		sub.w	d1,d0
0000C776 9043                       		sub.w	d3,d0
0000C778 6400                       		bcc.s	loc_BE9A
0000C77A D241                       		add.w	d1,d1
0000C77C D041                       		add.w	d1,d0
0000C77E 6500                       		bcs.s	loc_BE9E
0000C780 60B4                       		bra.s	loc_BE4E
0000C782                            ; ===========================================================================
0000C782                            
0000C782                            loc_BE9A:
0000C782 B045                       		cmp.w	d5,d0
0000C784 62B0                       		bhi.s	loc_BE4E
0000C786                            
0000C786                            loc_BE9E:
0000C786 361F                       		move.w	(sp)+,d3
0000C788 7001                       		moveq	#1,d0
0000C78A 4E75                       		rts	
0000C78C                            ; End of function Obj32_MZBlock
0000C78C                            
0000C78C                            ; ===========================================================================
0000C78C                            ; ---------------------------------------------------------------------------
0000C78C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C78C                            ; ---------------------------------------------------------------------------
0000C78C                            Map_obj32:
0000C78C                            	include "_maps\obj32.asm"
0000C78C                            ; ---------------------------------------------------------------------------
0000C78C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C78C                            ; ---------------------------------------------------------------------------
0000C78C 0000                       		dc.w byte_BEAC-Map_obj32
0000C78E 0000                       		dc.w byte_BEB7-Map_obj32
0000C790 0000                       		dc.w byte_BEC2-Map_obj32
0000C792 0000                       		dc.w byte_BEB7-Map_obj32
0000C794 02                         byte_BEAC:	dc.b 2
0000C795 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C79A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C79F 02                         byte_BEB7:	dc.b 2
0000C7A0 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C7A5 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C7AA 02                         byte_BEC2:	dc.b 2
0000C7AB F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7B0 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7B5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7BA                            		even
0000C7BA                            		even
0000C7BA                            
0000C7BA                            ; ===========================================================================
0000C7BA                            ; ---------------------------------------------------------------------------
0000C7BA                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7BA                            ; ---------------------------------------------------------------------------
0000C7BA                            
0000C7BA                            Obj33:					; XREF: Obj_Index
0000C7BA 7000                       		moveq	#0,d0
0000C7BC 1028 0024                  		move.b	$24(a0),d0
0000C7C0 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C7C4 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C7C8                            ; ===========================================================================
0000C7C8 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C7CA 0000                       		dc.w loc_BF6E-Obj33_Index
0000C7CC 0000                       		dc.w loc_C02C-Obj33_Index
0000C7CE                            
0000C7CE 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C7D0 4001                       		dc.b $40, 1
0000C7D2                            ; ===========================================================================
0000C7D2                            
0000C7D2                            Obj33_Main:				; XREF: Obj33_Index
0000C7D2 5428 0024                  		addq.b	#2,$24(a0)
0000C7D6 117C 000F 0016             		move.b	#$F,$16(a0)
0000C7DC 117C 000F 0017             		move.b	#$F,$17(a0)
0000C7E2 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C7EA 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C7F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C7F6 6600                       		bne.s	loc_BF16
0000C7F8 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C7FE                            
0000C7FE                            loc_BF16:
0000C7FE 117C 0004 0001             		move.b	#4,1(a0)
0000C804 117C 0003 0018             		move.b	#3,$18(a0)
0000C80A 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C810 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C816 7000                       		moveq	#0,d0
0000C818 1028 0028                  		move.b	$28(a0),d0
0000C81C D040                       		add.w	d0,d0
0000C81E 0240 000E                  		andi.w	#$E,d0
0000C822 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C826 115A 0019                  		move.b	(a2)+,$19(a0)
0000C82A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C82E 4A28 0028                  		tst.b	$28(a0)
0000C832 6700                       		beq.s	Obj33_ChkGone
0000C834 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C83A                            
0000C83A                            Obj33_ChkGone:
0000C83A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C83E 7000                       		moveq	#0,d0
0000C840 1028 0023                  		move.b	$23(a0),d0
0000C844 6700                       		beq.s	loc_BF6E
0000C846 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C84C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C852 6600 0000                  		bne.w	DeleteObject
0000C856                            
0000C856                            loc_BF6E:				; XREF: Obj33_Index
0000C856 4A28 0032                  		tst.b	$32(a0)
0000C85A 6600 0000                  		bne.w	loc_C046
0000C85E 7200                       		moveq	#0,d1
0000C860 1228 0019                  		move.b	$19(a0),d1
0000C864 0641 000B                  		addi.w	#$B,d1
0000C868 343C 0010                  		move.w	#$10,d2
0000C86C 363C 0011                  		move.w	#$11,d3
0000C870 3828 0008                  		move.w	8(a0),d4
0000C874 6100 0000                  		bsr.w	loc_C186
0000C878 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C87E 6600                       		bne.s	loc_BFC6	; if not, branch
0000C880 08A8 0007 0028             		bclr	#7,$28(a0)
0000C886 3028 0008                  		move.w	8(a0),d0
0000C88A 0C40 0A20                  		cmpi.w	#$A20,d0
0000C88E 6500                       		bcs.s	loc_BFC6
0000C890 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C894 6400                       		bcc.s	loc_BFC6
0000C896 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C89A 0440 001C                  		subi.w	#$1C,d0
0000C89E 3140 000C                  		move.w	d0,$C(a0)
0000C8A2 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C8A8 08E8 0007 0028             		bset	#7,$28(a0)
0000C8AE                            
0000C8AE                            loc_BFC6:
0000C8AE 3028 0008                  		move.w	8(a0),d0
0000C8B2 0240 FF80                  		andi.w	#$FF80,d0
0000C8B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8BA 0441 0080                  		subi.w	#$80,d1
0000C8BE 0241 FF80                  		andi.w	#$FF80,d1
0000C8C2 9041                       		sub.w	d1,d0
0000C8C4 0C40 0280                  		cmpi.w	#$280,d0
0000C8C8 6200                       		bhi.s	loc_BFE6
0000C8CA 6000 0000                  		bra.w	DisplaySprite
0000C8CE                            ; ===========================================================================
0000C8CE                            
0000C8CE                            loc_BFE6:
0000C8CE 3028 0034                  		move.w	$34(a0),d0
0000C8D2 0240 FF80                  		andi.w	#$FF80,d0
0000C8D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8DA 0441 0080                  		subi.w	#$80,d1
0000C8DE 0241 FF80                  		andi.w	#$FF80,d1
0000C8E2 9041                       		sub.w	d1,d0
0000C8E4 0C40 0280                  		cmpi.w	#$280,d0
0000C8E8 6200                       		bhi.s	loc_C016
0000C8EA 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C8F0 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C8F6 117C 0004 0024             		move.b	#4,$24(a0)
0000C8FC 6000                       		bra.s	loc_C02C
0000C8FE                            ; ===========================================================================
0000C8FE                            
0000C8FE                            loc_C016:
0000C8FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C902 7000                       		moveq	#0,d0
0000C904 1028 0023                  		move.b	$23(a0),d0
0000C908 6700                       		beq.s	loc_C028
0000C90A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C910                            
0000C910                            loc_C028:
0000C910 6000 0000                  		bra.w	DeleteObject
0000C914                            ; ===========================================================================
0000C914                            
0000C914                            loc_C02C:				; XREF: Obj33_Index
0000C914 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C918 6700                       		beq.s	locret_C044
0000C91A 117C 0002 0024             		move.b	#2,$24(a0)
0000C920 4228 0032                  		clr.b	$32(a0)
0000C924 4268 0010                  		clr.w	$10(a0)
0000C928 4268 0012                  		clr.w	$12(a0)
0000C92C                            
0000C92C                            locret_C044:
0000C92C 4E75                       		rts	
0000C92E                            ; ===========================================================================
0000C92E                            
0000C92E                            loc_C046:				; XREF: loc_BF6E
0000C92E 3F28 0008                  		move.w	8(a0),-(sp)
0000C932 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C938 6400                       		bcc.s	loc_C056
0000C93A 6100 0000                  		bsr.w	SpeedToPos
0000C93E                            
0000C93E                            loc_C056:
0000C93E 0828 0001 0022             		btst	#1,$22(a0)
0000C944 6700                       		beq.s	loc_C0A0
0000C946 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C94C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C952 4A41                       		tst.w	d1
0000C954 6A00 0000                  		bpl.w	loc_C09E
0000C958 D368 000C                  		add.w	d1,$C(a0)
0000C95C 4268 0012                  		clr.w	$12(a0)
0000C960 08A8 0001 0022             		bclr	#1,$22(a0)
0000C966 3011                       		move.w	(a1),d0
0000C968 0240 03FF                  		andi.w	#$3FF,d0
0000C96C 0C40 016A                  		cmpi.w	#$16A,d0
0000C970 6500                       		bcs.s	loc_C09E
0000C972 3028 0030                  		move.w	$30(a0),d0
0000C976 E640                       		asr.w	#3,d0
0000C978 3140 0010                  		move.w	d0,$10(a0)
0000C97C 117C 0001 0032             		move.b	#1,$32(a0)
0000C982 4268 000E                  		clr.w	$E(a0)
0000C986                            
0000C986                            loc_C09E:
0000C986 6000                       		bra.s	loc_C0E6
0000C988                            ; ===========================================================================
0000C988                            
0000C988                            loc_C0A0:
0000C988 4A68 0010                  		tst.w	$10(a0)
0000C98C 6700 0000                  		beq.w	loc_C0D6
0000C990 6B00                       		bmi.s	loc_C0BC
0000C992 7600                       		moveq	#0,d3
0000C994 1628 0019                  		move.b	$19(a0),d3
0000C998 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C99E 4A41                       		tst.w	d1		; has block touched a wall?
0000C9A0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9A2 6000                       		bra.s	loc_C0E6
0000C9A4                            ; ===========================================================================
0000C9A4                            
0000C9A4                            loc_C0BC:
0000C9A4 7600                       		moveq	#0,d3
0000C9A6 1628 0019                  		move.b	$19(a0),d3
0000C9AA 4643                       		not.w	d3
0000C9AC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9B2 4A41                       		tst.w	d1		; has block touched a wall?
0000C9B4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9B6 6000                       		bra.s	loc_C0E6
0000C9B8                            ; ===========================================================================
0000C9B8                            
0000C9B8                            Obj33_StopPush:
0000C9B8 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9BC 6000                       		bra.s	loc_C0E6
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            loc_C0D6:
0000C9BE 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C9C6 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C9CC 6400                       		bcc.s	loc_C104
0000C9CE                            
0000C9CE                            loc_C0E6:
0000C9CE 7200                       		moveq	#0,d1
0000C9D0 1228 0019                  		move.b	$19(a0),d1
0000C9D4 0641 000B                  		addi.w	#$B,d1
0000C9D8 343C 0010                  		move.w	#$10,d2
0000C9DC 363C 0011                  		move.w	#$11,d3
0000C9E0 381F                       		move.w	(sp)+,d4
0000C9E2 6100 0000                  		bsr.w	loc_C186
0000C9E6 6100                       		bsr.s	Obj33_ChkLava
0000C9E8 6000 FEC4                  		bra.w	loc_BFC6
0000C9EC                            ; ===========================================================================
0000C9EC                            
0000C9EC                            loc_C104:
0000C9EC 381F                       		move.w	(sp)+,d4
0000C9EE 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9F2 08A9 0003 0022             		bclr	#3,$22(a1)
0000C9F8 08A8 0003 0022             		bclr	#3,$22(a0)
0000C9FE 6000 FECE                  		bra.w	loc_BFE6
0000CA02                            ; ===========================================================================
0000CA02                            
0000CA02                            Obj33_ChkLava:
0000CA02 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CA08 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CA0A 343C FFE0                  		move.w	#-$20,d2
0000CA0E 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA14 6700                       		beq.s	Obj33_LoadLava
0000CA16 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA1C 6700                       		beq.s	Obj33_LoadLava
0000CA1E 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA24 6700                       		beq.s	Obj33_LoadLava
0000CA26 4E75                       		rts	
0000CA28                            ; ===========================================================================
0000CA28                            
0000CA28                            Obj33_ChkLava2:
0000CA28 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA2E 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA30 343C 0020                  		move.w	#$20,d2
0000CA34 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA3A 6700                       		beq.s	Obj33_LoadLava
0000CA3C 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA42 6700                       		beq.s	Obj33_LoadLava
0000CA44                            
0000CA44                            Obj33_NoLava:
0000CA44 4E75                       		rts	
0000CA46                            ; ===========================================================================
0000CA46                            
0000CA46                            Obj33_LoadLava:
0000CA46 6100 0000                  		bsr.w	SingleObjLoad
0000CA4A 6600                       		bne.s	locret_C184
0000CA4C 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA50 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA56 D569 0008                  		add.w	d2,8(a1)
0000CA5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA60 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CA66 2348 003C                  		move.l	a0,$3C(a1)
0000CA6A                            
0000CA6A                            locret_C184:
0000CA6A 4E75                       		rts	
0000CA6C                            ; ===========================================================================
0000CA6C                            
0000CA6C                            loc_C186:				; XREF: loc_BF6E
0000CA6C 1028 0025                  		move.b	$25(a0),d0
0000CA70 6700 0000                  		beq.w	loc_C218
0000CA74 5500                       		subq.b	#2,d0
0000CA76 6600                       		bne.s	loc_C1AA
0000CA78 6100 B30E                  		bsr.w	ExitPlatform
0000CA7C 0829 0003 0022             		btst	#3,$22(a1)
0000CA82 6600                       		bne.s	loc_C1A4
0000CA84 4228 0025                  		clr.b	$25(a0)
0000CA88 4E75                       		rts	
0000CA8A                            ; ===========================================================================
0000CA8A                            
0000CA8A                            loc_C1A4:
0000CA8A 3404                       		move.w	d4,d2
0000CA8C 6000 B858                  		bra.w	MvSonicOnPtfm
0000CA90                            ; ===========================================================================
0000CA90                            
0000CA90                            loc_C1AA:
0000CA90 5500                       		subq.b	#2,d0
0000CA92 6600                       		bne.s	loc_C1F2
0000CA94 6100 0000                  		bsr.w	SpeedToPos
0000CA98 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CA9E 4EB9 0000 0000             		jsr	ObjHitFloor
0000CAA4 4A41                       		tst.w	d1
0000CAA6 6A00 0000                  		bpl.w	locret_C1F0
0000CAAA D368 000C                  		add.w	d1,$C(a0)
0000CAAE 4268 0012                  		clr.w	$12(a0)
0000CAB2 4228 0025                  		clr.b	$25(a0)
0000CAB6 3011                       		move.w	(a1),d0
0000CAB8 0240 03FF                  		andi.w	#$3FF,d0
0000CABC 0C40 016A                  		cmpi.w	#$16A,d0
0000CAC0 6500                       		bcs.s	locret_C1F0
0000CAC2 3028 0030                  		move.w	$30(a0),d0
0000CAC6 E640                       		asr.w	#3,d0
0000CAC8 3140 0010                  		move.w	d0,$10(a0)
0000CACC 117C 0001 0032             		move.b	#1,$32(a0)
0000CAD2 4268 000E                  		clr.w	$E(a0)
0000CAD6                            
0000CAD6                            locret_C1F0:
0000CAD6 4E75                       		rts	
0000CAD8                            ; ===========================================================================
0000CAD8                            
0000CAD8                            loc_C1F2:
0000CAD8 6100 0000                  		bsr.w	SpeedToPos
0000CADC 3028 0008                  		move.w	8(a0),d0
0000CAE0 0240 000C                  		andi.w	#$C,d0
0000CAE4 6600 0000                  		bne.w	locret_C2E4
0000CAE8 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CAEE 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CAF4 4268 0010                  		clr.w	$10(a0)
0000CAF8 5528 0025                  		subq.b	#2,$25(a0)
0000CAFC 4E75                       		rts	
0000CAFE                            ; ===========================================================================
0000CAFE                            
0000CAFE                            loc_C218:
0000CAFE 6100 0000                  		bsr.w	loc_FAC8
0000CB02 4A44                       		tst.w	d4
0000CB04 6700 0000                  		beq.w	locret_C2E4
0000CB08 6B00 0000                  		bmi.w	locret_C2E4
0000CB0C 4A28 0032                  		tst.b	$32(a0)
0000CB10 6700                       		beq.s	loc_C230
0000CB12 6000 0000                  		bra.w	locret_C2E4
0000CB16                            ; ===========================================================================
0000CB16                            
0000CB16                            loc_C230:
0000CB16 4A40                       		tst.w	d0
0000CB18 6700 0000                  		beq.w	locret_C2E4
0000CB1C 6B00                       		bmi.s	loc_C268
0000CB1E 0829 0000 0022             		btst	#0,$22(a1)
0000CB24 6600 0000                  		bne.w	locret_C2E4
0000CB28 3F00                       		move.w	d0,-(sp)
0000CB2A 7600                       		moveq	#0,d3
0000CB2C 1628 0019                  		move.b	$19(a0),d3
0000CB30 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB36 301F                       		move.w	(sp)+,d0
0000CB38 4A41                       		tst.w	d1
0000CB3A 6B00 0000                  		bmi.w	locret_C2E4
0000CB3E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB46 7001                       		moveq	#1,d0
0000CB48 323C 0040                  		move.w	#$40,d1
0000CB4C 6000                       		bra.s	loc_C294
0000CB4E                            ; ===========================================================================
0000CB4E                            
0000CB4E                            loc_C268:
0000CB4E 0829 0000 0022             		btst	#0,$22(a1)
0000CB54 6700                       		beq.s	locret_C2E4
0000CB56 3F00                       		move.w	d0,-(sp)
0000CB58 7600                       		moveq	#0,d3
0000CB5A 1628 0019                  		move.b	$19(a0),d3
0000CB5E 4643                       		not.w	d3
0000CB60 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB66 301F                       		move.w	(sp)+,d0
0000CB68 4A41                       		tst.w	d1
0000CB6A 6B00                       		bmi.s	locret_C2E4
0000CB6C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CB74 70FF                       		moveq	#-1,d0
0000CB76 323C FFC0                  		move.w	#-$40,d1
0000CB7A                            
0000CB7A                            loc_C294:
0000CB7A 43F8 D000                  		lea	($FFFFD000).w,a1
0000CB7E D169 0008                  		add.w	d0,8(a1)
0000CB82 3341 0014                  		move.w	d1,$14(a1)
0000CB86 337C 0000 0010             		move.w	#0,$10(a1)
0000CB8C 3F00                       		move.w	d0,-(sp)
0000CB8E 303C 00A7                  		move.w	#$A7,d0
0000CB92 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CB98 301F                       		move.w	(sp)+,d0
0000CB9A 4A28 0028                  		tst.b	$28(a0)
0000CB9E 6B00                       		bmi.s	locret_C2E4
0000CBA0 3F00                       		move.w	d0,-(sp)
0000CBA2 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBA8 301F                       		move.w	(sp)+,d0
0000CBAA 0C41 0004                  		cmpi.w	#4,d1
0000CBAE 6F00                       		ble.s	loc_C2E0
0000CBB0 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBB6 4A40                       		tst.w	d0
0000CBB8 6A00                       		bpl.s	loc_C2D8
0000CBBA 4468 0010                  		neg.w	$10(a0)
0000CBBE                            
0000CBBE                            loc_C2D8:
0000CBBE 117C 0006 0025             		move.b	#6,$25(a0)
0000CBC4 6000                       		bra.s	locret_C2E4
0000CBC6                            ; ===========================================================================
0000CBC6                            
0000CBC6                            loc_C2E0:
0000CBC6 D368 000C                  		add.w	d1,$C(a0)
0000CBCA                            
0000CBCA                            locret_C2E4:
0000CBCA 4E75                       		rts	
0000CBCC                            ; ===========================================================================
0000CBCC                            ; ---------------------------------------------------------------------------
0000CBCC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBCC                            ; ---------------------------------------------------------------------------
0000CBCC                            Map_obj33:
0000CBCC                            	include "_maps\obj33.asm"
0000CBCC                            ; ---------------------------------------------------------------------------
0000CBCC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBCC                            ; ---------------------------------------------------------------------------
0000CBCC 0000                       		dc.w byte_C2EA-Map_obj33
0000CBCE 0000                       		dc.w byte_C2F0-Map_obj33
0000CBD0 01                         byte_C2EA:	dc.b 1
0000CBD1 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CBD6 04                         byte_C2F0:	dc.b 4
0000CBD7 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CBDC F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CBE1 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CBE6 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CBEC 00                         		even
0000CBEC 00                         		even
0000CBEC                            
0000CBEC                            ; ===========================================================================
0000CBEC                            ; ---------------------------------------------------------------------------
0000CBEC                            ; Object 34 - zone title cards
0000CBEC                            ; ---------------------------------------------------------------------------
0000CBEC                            Obj34:					; XREF: Obj_Index
0000CBEC 7000                       		moveq	#0,d0
0000CBEE 1028 0024                  		move.b	$24(a0),d0
0000CBF2 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CBF6 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CBFA                            ; ===========================================================================
0000CBFA 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CBFC 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CBFE 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC00 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC02                            ; ===========================================================================
0000CC02                            
0000CC02                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CC02 2248                       		movea.l	a0,a1
0000CC04 7000                       		moveq	#0,d0
0000CC06 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC0A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC10 6600                       		bne.s	Obj34_CheckFZ
0000CC12 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC14                            
0000CC14                            Obj34_CheckFZ:
0000CC14 3400                       		move.w	d0,d2
0000CC16 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC1C 6600                       		bne.s	Obj34_LoadConfig
0000CC1E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC20 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC22                            
0000CC22                            Obj34_LoadConfig:
0000CC22 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC28 E948                       		lsl.w	#4,d0
0000CC2A D6C0                       		adda.w	d0,a3
0000CC2C 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC32 7203                       		moveq	#3,d1
0000CC34                            
0000CC34                            Obj34_Loop:
0000CC34 12BC 0034                  		move.b	#$34,0(a1)
0000CC38 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC3C 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC40 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC44 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC48 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC4C 101A                       		move.b	(a2)+,d0
0000CC4E 6600                       		bne.s	Obj34_ActNumber
0000CC50 1002                       		move.b	d2,d0
0000CC52                            
0000CC52                            Obj34_ActNumber:
0000CC52 0C00 0007                  		cmpi.b	#7,d0
0000CC56 6600                       		bne.s	Obj34_MakeSprite
0000CC58 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC5C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CC62 6600                       		bne.s	Obj34_MakeSprite
0000CC64 5300                       		subq.b	#1,d0
0000CC66                            
0000CC66                            Obj34_MakeSprite:
0000CC66 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CC6A 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CC72 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC78 137C 0078 0019             		move.b	#$78,$19(a1)
0000CC7E 137C 0000 0001             		move.b	#0,1(a1)
0000CC84 137C 0000 0018             		move.b	#0,$18(a1)
0000CC8A 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CC90 43E9 0040                  		lea	$40(a1),a1	; next object
0000CC94 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CC98                            
0000CC98                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CC98 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC9A 3028 0030                  		move.w	$30(a0),d0
0000CC9E B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CCA2 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CCA4 6C00                       		bge.s	Obj34_Move
0000CCA6 4441                       		neg.w	d1
0000CCA8                            
0000CCA8                            Obj34_Move:
0000CCA8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCAC                            
0000CCAC                            loc_C3C8:
0000CCAC 3028 0008                  		move.w	8(a0),d0
0000CCB0 6B00                       		bmi.s	locret_C3D8
0000CCB2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCB6 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCB8 6000 0000                  		bra.w	DisplaySprite
0000CCBC                            ; ===========================================================================
0000CCBC                            
0000CCBC                            locret_C3D8:
0000CCBC 4E75                       		rts	
0000CCBE                            ; ===========================================================================
0000CCBE                            
0000CCBE                            Obj34_Wait:				; XREF: Obj34_Index
0000CCBE 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CCC2 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CCC4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CCC8 6000 0000                  		bra.w	DisplaySprite
0000CCCC                            ; ===========================================================================
0000CCCC                            
0000CCCC                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CCCC 4A28 0001                  		tst.b	1(a0)
0000CCD0 6A00                       		bpl.s	Obj34_ChangeArt
0000CCD2 7220                       		moveq	#$20,d1
0000CCD4 3028 0032                  		move.w	$32(a0),d0
0000CCD8 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CCDC 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CCDE 6C00                       		bge.s	Obj34_Move2
0000CCE0 4441                       		neg.w	d1
0000CCE2                            
0000CCE2                            Obj34_Move2:
0000CCE2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCE6 3028 0008                  		move.w	8(a0),d0
0000CCEA 6B00                       		bmi.s	locret_C412
0000CCEC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCF0 6400                       		bcc.s	locret_C412	; if yes, branch
0000CCF2 6000 0000                  		bra.w	DisplaySprite
0000CCF6                            ; ===========================================================================
0000CCF6                            
0000CCF6                            locret_C412:
0000CCF6 4E75                       		rts	
0000CCF8                            ; ===========================================================================
0000CCF8                            
0000CCF8                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CCF8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CCFE 6600                       		bne.s	Obj34_Delete
0000CD00 7002                       		moveq	#2,d0
0000CD02 4EB9 0000 177E             		jsr	(LoadPLC).l	; load explosion patterns
0000CD08 7000                       		moveq	#0,d0
0000CD0A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD0E 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CD12 4EB9 0000 177E             		jsr	(LoadPLC).l	; load animal patterns
0000CD18                            
0000CD18                            Obj34_Delete:
0000CD18 6000 0000                  		bra.w	DeleteObject
0000CD1C                            
0000CD1C                            ; ===========================================================================
0000CD1C                            Obj34_AnimalPLC:
0000CD1C 15                         		dc.b $15	; "GHZ"
0000CD1D 16                         		dc.b $16
0000CD1E 17                         		dc.b $17
0000CD1F 18                         		dc.b $18
0000CD20 19                         		dc.b $19
0000CD21 1A                         		dc.b $1A	; "SBZ"
0000CD22 15                         		dc.b $15	; Ending (placeholder?
0000CD23 1A                         		dc.b $1A	; MAKOTO
0000CD24                            	even
0000CD24 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD26 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD28 00E4                       		dc.w $E4
0000CD2A 0206                       		dc.b 2,	6
0000CD2C 00EA                       		dc.w $EA
0000CD2E 0207                       		dc.b 2,	7
0000CD30 00E0                       		dc.w $E0
0000CD32 020A                       		dc.b 2,	$A
0000CD34                            ; ---------------------------------------------------------------------------
0000CD34                            ; Title	card configuration data
0000CD34                            ; Format:
0000CD34                            ; 4 bytes per item (YYYY XXXX)
0000CD34                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD34                            ; ---------------------------------------------------------------------------
0000CD34 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD44 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD54 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CD64 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CD74 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CD84 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CD94 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CDA4 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDB4 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDC4                            ; ===========================================================================
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            
0000CDC4                            Obj39:					; XREF: Obj_Index
0000CDC4 7000                       		moveq	#0,d0
0000CDC6 1028 0024                  		move.b	$24(a0),d0
0000CDCA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CDCE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CDD2                            ; ===========================================================================
0000CDD2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CDD4 0000                       		dc.w loc_C50C-Obj39_Index
0000CDD6 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CDD8                            ; ===========================================================================
0000CDD8                            
0000CDD8                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CDD8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CDDC 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CDDE 4E75                       		rts	
0000CDE0                            ; ===========================================================================
0000CDE0                            
0000CDE0                            Obj39_Main:
0000CDE0 5428 0024                  		addq.b	#2,$24(a0)
0000CDE4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CDEA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CDF0 6700                       		beq.s	loc_C4EC	; if not, branch
0000CDF2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CDF8                            
0000CDF8                            loc_C4EC:
0000CDF8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CDFE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CE06 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE0C 117C 0000 0001             		move.b	#0,1(a0)
0000CE12 117C 0000 0018             		move.b	#0,$18(a0)
0000CE18                            
0000CE18                            loc_C50C:				; XREF: Obj39_Index
0000CE18 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE1A 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE20 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE22 6500                       		bcs.s	Obj39_Move
0000CE24 4441                       		neg.w	d1
0000CE26                            
0000CE26                            Obj39_Move:
0000CE26 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE2A 6000 0000                  		bra.w	DisplaySprite
0000CE2E                            ; ===========================================================================
0000CE2E                            
0000CE2E                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE2E 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE34 5428 0024                  		addq.b	#2,$24(a0)
0000CE38 4E75                       		rts	
0000CE3A                            ; ===========================================================================
0000CE3A                            
0000CE3A                            Obj39_Wait:				; XREF: Obj39_Index
0000CE3A 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE3E 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE42 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE44 0828 0000 001A             		btst	#0,$1A(a0)
0000CE4A 6600                       		bne.s	Obj39_Display
0000CE4C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE50 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE52 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE56 6000 0000                  		bra.w	DisplaySprite
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE5A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CE5E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CE60 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CE66 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CE6A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CE6C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CE72 6000                       		bra.s	Obj39_Display
0000CE74                            ; ===========================================================================
0000CE74                            
0000CE74                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CE74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE7A                            
0000CE7A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CE7A 6000 0000                  		bra.w	DisplaySprite
0000CE7E                            ; ===========================================================================
0000CE7E                            ; ---------------------------------------------------------------------------
0000CE7E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CE7E                            ; ---------------------------------------------------------------------------
0000CE7E                            
0000CE7E                            Obj3A:					; XREF: Obj_Index
0000CE7E 7000                       		moveq	#0,d0
0000CE80 1028 0024                  		move.b	$24(a0),d0
0000CE84 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CE88 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CE8C                            ; ===========================================================================
0000CE8C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CE8E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CE90 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE92 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CE94 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE96 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CE98 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE9A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CE9C 0000                       		dc.w loc_C766-Obj3A_Index
0000CE9E                            ; ===========================================================================
0000CE9E                            
0000CE9E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CE9E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CEA2 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CEA4 4E75                       		rts	
0000CEA6                            ; ===========================================================================
0000CEA6                            
0000CEA6                            Obj3A_Main:
0000CEA6 2248                       		movea.l	a0,a1
0000CEA8 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEAE 7206                       		moveq	#6,d1
0000CEB0                            
0000CEB0                            Obj3A_Loop:
0000CEB0 12BC 003A                  		move.b	#$3A,0(a1)
0000CEB4 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEB8 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEBC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEC0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEC4 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEC8 101A                       		move.b	(a2)+,d0
0000CECA 0C00 0006                  		cmpi.b	#6,d0
0000CECE 6600                       		bne.s	loc_C5CA
0000CED0 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CED4                            
0000CED4                            loc_C5CA:
0000CED4 1340 001A                  		move.b	d0,$1A(a1)
0000CED8 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CEE0 337C 8580 0002             		move.w	#$8580,2(a1)
0000CEE6 137C 0000 0001             		move.b	#0,1(a1)
0000CEEC 43E9 0040                  		lea	$40(a1),a1
0000CEF0 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CEF4                            
0000CEF4                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CEF4 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEF6 3028 0030                  		move.w	$30(a0),d0
0000CEFA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEFE 6700                       		beq.s	loc_C61A	; if yes, branch
0000CF00 6C00                       		bge.s	Obj3A_Move
0000CF02 4441                       		neg.w	d1
0000CF04                            
0000CF04                            Obj3A_Move:
0000CF04 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF08                            
0000CF08                            loc_C5FE:				; XREF: loc_C61A
0000CF08 3028 0008                  		move.w	8(a0),d0
0000CF0C 6B00                       		bmi.s	locret_C60E
0000CF0E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF12 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF14 6000 0000                  		bra.w	DisplaySprite
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            locret_C60E:
0000CF18 4E75                       		rts	
0000CF1A                            ; ===========================================================================
0000CF1A                            
0000CF1A                            loc_C610:				; XREF: loc_C61A
0000CF1A 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF20 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF24                            ; ===========================================================================
0000CF24                            
0000CF24                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF24 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF2A 67EE                       		beq.s	loc_C610
0000CF2C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF32 66D4                       		bne.s	loc_C5FE
0000CF34 5428 0024                  		addq.b	#2,$24(a0)
0000CF38 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF3E                            
0000CF3E                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF3E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF42 6600                       		bne.s	Obj3A_Display
0000CF44 5428 0024                  		addq.b	#2,$24(a0)
0000CF48                            
0000CF48                            Obj3A_Display:
0000CF48 6000 0000                  		bra.w	DisplaySprite
0000CF4C                            ; ===========================================================================
0000CF4C                            
0000CF4C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF4C 6100 0000                  		bsr.w	DisplaySprite
0000CF50 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF56 7000                       		moveq	#0,d0
0000CF58 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF5C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CF5E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF62 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CF68                            
0000CF68                            Obj3A_RingBonus:
0000CF68 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF6C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CF6E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF72 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF78                            
0000CF78                            Obj3A_ChkBonus:
0000CF78 4A40                       		tst.w	d0		; is there any bonus?
0000CF7A 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CF7C 303C 00C5                  		move.w	#$C5,d0
0000CF80 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF86 5428 0024                  		addq.b	#2,$24(a0)
0000CF8A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CF90 6600                       		bne.s	Obj3A_SetDelay
0000CF92 5828 0024                  		addq.b	#4,$24(a0)
0000CF96                            
0000CF96                            Obj3A_SetDelay:
0000CF96 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF9C                            
0000CF9C                            locret_C692:
0000CF9C 4E75                       		rts	
0000CF9E                            ; ===========================================================================
0000CF9E                            
0000CF9E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CF9E 4EB9 0000 0000             		jsr	AddPoints
0000CFA4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFA8 0200 0003                  		andi.b	#3,d0
0000CFAC 66EE                       		bne.s	locret_C692
0000CFAE 303C 00CD                  		move.w	#$CD,d0
0000CFB2 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFB8                            ; ===========================================================================
0000CFB8                            
0000CFB8                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFB8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFBC 0240 0007                  		andi.w	#7,d0
0000CFC0 E748                       		lsl.w	#3,d0
0000CFC2 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CFC6 0241 0003                  		andi.w	#3,d1
0000CFCA D241                       		add.w	d1,d1
0000CFCC D041                       		add.w	d1,d0
0000CFCE 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CFD2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CFD6 4A40                       		tst.w	d0
0000CFD8 6600                       		bne.s	Obj3A_ChkSS
0000CFDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CFE0 6000                       		bra.s	Obj3A_Display2
0000CFE2                            ; ===========================================================================
0000CFE2                            
0000CFE2                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CFE2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CFE6 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CFEA 6700                       		beq.s	loc_C6EA	; if not, branch
0000CFEC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CFF2 6000                       		bra.s	Obj3A_Display2
0000CFF4                            ; ===========================================================================
0000CFF4                            
0000CFF4                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CFF4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFFA                            
0000CFFA                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CFFA 6000 0000                  		bra.w	DisplaySprite
0000CFFE                            ; ===========================================================================
0000CFFE                            ; ---------------------------------------------------------------------------
0000CFFE                            ; Level	order array
0000CFFE                            ; ---------------------------------------------------------------------------
0000CFFE                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D036                            		even
0000D036                            ; ===========================================================================
0000D036                            
0000D036                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D036 7220                       		moveq	#$20,d1		; set horizontal speed
0000D038 3028 0032                  		move.w	$32(a0),d0
0000D03C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D040 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D042 6C00                       		bge.s	Obj3A_Move2
0000D044 4441                       		neg.w	d1
0000D046                            
0000D046                            Obj3A_Move2:
0000D046 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D04A 3028 0008                  		move.w	8(a0),d0
0000D04E 6B00                       		bmi.s	locret_C748
0000D050 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D054 6400                       		bcc.s	locret_C748	; if yes, branch
0000D056 6000 0000                  		bra.w	DisplaySprite
0000D05A                            ; ===========================================================================
0000D05A                            
0000D05A                            locret_C748:
0000D05A 4E75                       		rts	
0000D05C                            ; ===========================================================================
0000D05C                            
0000D05C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D05C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D062 6600 0000                  		bne.w	DeleteObject
0000D066 5428 0024                  		addq.b	#2,$24(a0)
0000D06A 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D06E 303C 008D                  		move.w	#$8D,d0
0000D072 4EF9 0000 1594             		jmp	(PlaySound).l	; play FZ music
0000D078                            ; ===========================================================================
0000D078                            
0000D078                            loc_C766:				; XREF: Obj3A_Index
0000D078 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D07C 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D082 6700 0000                  		beq.w	DeleteObject
0000D086 4E75                       		rts	
0000D088                            ; ===========================================================================
0000D088 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D08E 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D090 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D096 0201                       		dc.b 2,	1
0000D098 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D09E 0206                       		dc.b 2,	6
0000D0A0 0520 0120 00EC             		dc.w $520, $120, $EC
0000D0A6 0202                       		dc.b 2,	2
0000D0A8 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0AE 0203                       		dc.b 2,	3
0000D0B0 0560 0120 010C             		dc.w $560, $120, $10C
0000D0B6 0204                       		dc.b 2,	4
0000D0B8 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D0BE 0205                       		dc.b 2,	5
0000D0C0                            ; ===========================================================================
0000D0C0                            ; ---------------------------------------------------------------------------
0000D0C0                            ; Object 7E - special stage results screen
0000D0C0                            ; ---------------------------------------------------------------------------
0000D0C0                            
0000D0C0                            Obj7E:					; XREF: Obj_Index
0000D0C0 7000                       		moveq	#0,d0
0000D0C2 1028 0024                  		move.b	$24(a0),d0
0000D0C6 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D0CA 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D0CE                            ; ===========================================================================
0000D0CE 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D0D0 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D0D2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0D4 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D0D6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0D8 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0DA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0DC 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D0DE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0E0 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0E2 0000                       		dc.w loc_C91A-Obj7E_Index
0000D0E4                            ; ===========================================================================
0000D0E4                            
0000D0E4                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D0E4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D0E8 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D0EA 4E75                       		rts	
0000D0EC                            ; ===========================================================================
0000D0EC                            
0000D0EC                            Obj7E_Main:
0000D0EC 2248                       		movea.l	a0,a1
0000D0EE 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D0F4 7203                       		moveq	#3,d1
0000D0F6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D0FC 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D0FE 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D100                            
0000D100                            Obj7E_Loop:
0000D100 12BC 007E                  		move.b	#$7E,0(a1)
0000D104 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D108 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D10C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D110 135A 0024                  		move.b	(a2)+,$24(a1)
0000D114 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D118 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D120 337C 8580 0002             		move.w	#$8580,2(a1)
0000D126 137C 0000 0001             		move.b	#0,1(a1)
0000D12C 43E9 0040                  		lea	$40(a1),a1
0000D130 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D134                            
0000D134 7007                       		moveq	#7,d0
0000D136 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D13A 6700                       		beq.s	loc_C842
0000D13C 7000                       		moveq	#0,d0
0000D13E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D142 6600                       		bne.s	loc_C842	; if not, branch
0000D144 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D146 317C 0018 0008             		move.w	#$18,8(a0)
0000D14C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D152                            
0000D152                            loc_C842:
0000D152 1140 001A                  		move.b	d0,$1A(a0)
0000D156                            
0000D156                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D156 7210                       		moveq	#$10,d1		; set horizontal speed
0000D158 3028 0030                  		move.w	$30(a0),d0
0000D15C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D160 6700                       		beq.s	loc_C86C	; if yes, branch
0000D162 6C00                       		bge.s	Obj7E_Move
0000D164 4441                       		neg.w	d1
0000D166                            
0000D166                            Obj7E_Move:
0000D166 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D16A                            
0000D16A                            loc_C85A:				; XREF: loc_C86C
0000D16A 3028 0008                  		move.w	8(a0),d0
0000D16E 6B00                       		bmi.s	locret_C86A
0000D170 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D174 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D176 6000 0000                  		bra.w	DisplaySprite
0000D17A                            ; ===========================================================================
0000D17A                            
0000D17A                            locret_C86A:
0000D17A 4E75                       		rts	
0000D17C                            ; ===========================================================================
0000D17C                            
0000D17C                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D17C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D182 66E6                       		bne.s	loc_C85A
0000D184 5428 0024                  		addq.b	#2,$24(a0)
0000D188 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D18E 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D194                            
0000D194                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D194 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D198 6600                       		bne.s	Obj7E_Display
0000D19A 5428 0024                  		addq.b	#2,$24(a0)
0000D19E                            
0000D19E                            Obj7E_Display:
0000D19E 6000 0000                  		bra.w	DisplaySprite
0000D1A2                            ; ===========================================================================
0000D1A2                            
0000D1A2                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D1A2 6100 0000                  		bsr.w	DisplaySprite
0000D1A6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1AC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1B0 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D1B2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D1B8 700A                       		moveq	#10,d0		; add 10 to score
0000D1BA 4EB9 0000 0000             		jsr	AddPoints
0000D1C0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1C4 0200 0003                  		andi.b	#3,d0
0000D1C8 6600                       		bne.s	locret_C8EA
0000D1CA 303C 00CD                  		move.w	#$CD,d0
0000D1CE 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1D4                            ; ===========================================================================
0000D1D4                            
0000D1D4                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D1D4 303C 00C5                  		move.w	#$C5,d0
0000D1D8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D1DE 5428 0024                  		addq.b	#2,$24(a0)
0000D1E2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1E8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D1EE 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D1F0 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D1F6 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D1FA                            
0000D1FA                            locret_C8EA:
0000D1FA 4E75                       		rts	
0000D1FC                            ; ===========================================================================
0000D1FC                            
0000D1FC                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D1FC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D202 6000 0000                  		bra.w	DisplaySprite
0000D206                            ; ===========================================================================
0000D206                            
0000D206                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D206 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D20C 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D212 303C 00BF                  		move.w	#$BF,d0
0000D216 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play continues music
0000D21C 5428 0024                  		addq.b	#2,$24(a0)
0000D220 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D226 6000 0000                  		bra.w	DisplaySprite
0000D22A                            ; ===========================================================================
0000D22A                            
0000D22A                            loc_C91A:				; XREF: Obj7E_Index
0000D22A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D22E 0200 000F                  		andi.b	#$F,d0
0000D232 6600                       		bne.s	Obj7E_Display2
0000D234 0868 0000 001A             		bchg	#0,$1A(a0)
0000D23A                            
0000D23A                            Obj7E_Display2:
0000D23A 6000 0000                  		bra.w	DisplaySprite
0000D23E                            ; ===========================================================================
0000D23E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D244 0200                       		dc.b 2,	0		; rountine number, frame number
0000D246 0320 0120 0118             		dc.w $320, $120, $118
0000D24C 0201                       		dc.b 2,	1
0000D24E 0360 0120 0128             		dc.w $360, $120, $128
0000D254 0202                       		dc.b 2,	2
0000D256 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D25C 0203                       		dc.b 2,	3
0000D25E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D264 0206                       		dc.b 2,	6
0000D266                            ; ===========================================================================
0000D266                            ; ---------------------------------------------------------------------------
0000D266                            ; Object 7F - chaos emeralds from the special stage results screen
0000D266                            ; ---------------------------------------------------------------------------
0000D266                            
0000D266                            Obj7F:					; XREF: Obj_Index
0000D266 7000                       		moveq	#0,d0
0000D268 1028 0024                  		move.b	$24(a0),d0
0000D26C 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D270 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D274                            ; ===========================================================================
0000D274 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D276 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D278                            
0000D278                            ; ---------------------------------------------------------------------------
0000D278                            ; X-axis positions for chaos emeralds
0000D278                            ; ---------------------------------------------------------------------------
0000D278 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D284                            ; ===========================================================================
0000D284                            
0000D284                            Obj7F_Main:				; XREF: Obj7F_Index
0000D284 2248                       		movea.l	a0,a1
0000D286 45F9 0000 D278             		lea	(Obj7F_PosData).l,a2
0000D28C 7400                       		moveq	#0,d2
0000D28E 7200                       		moveq	#0,d1
0000D290 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D294 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D296 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D29A                            
0000D29A                            Obj7F_Loop:
0000D29A 12BC 007F                  		move.b	#$7F,0(a1)
0000D29E 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D2A2 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D2A8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2AC 1633 2000                  		move.b	(a3,d2.w),d3
0000D2B0 1343 001A                  		move.b	d3,$1A(a1)
0000D2B4 1343 001C                  		move.b	d3,$1C(a1)
0000D2B8 5202                       		addq.b	#1,d2
0000D2BA 5429 0024                  		addq.b	#2,$24(a1)
0000D2BE 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D2C6 337C 8541 0002             		move.w	#$8541,2(a1)
0000D2CC 137C 0000 0001             		move.b	#0,1(a1)
0000D2D2 43E9 0040                  		lea	$40(a1),a1	; next object
0000D2D6 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D2DA                            
0000D2DA                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D2DA 1028 001A                  		move.b	$1A(a0),d0
0000D2DE 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D2E4 0C00 0006                  		cmpi.b	#6,d0
0000D2E8 6600                       		bne.s	Obj7F_Display
0000D2EA 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D2F0                            
0000D2F0                            Obj7F_Display:
0000D2F0 6000 0000                  		bra.w	DisplaySprite
0000D2F4                            ; ===========================================================================
0000D2F4                            ; ---------------------------------------------------------------------------
0000D2F4                            ; Sprite mappings - zone title cards
0000D2F4                            ; ---------------------------------------------------------------------------
0000D2F4                            Map_obj34:
0000D2F4                                    include "_maps\obj34.asm"
0000D2F4                            Map_c5df:
0000D2F4 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D2F6 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D2F8 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D2FA 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D2FC 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D2FE 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D300 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D302 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D304 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D306 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D308 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D30A 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D30C 0C                         Map_c5df_18: 	dc.b $C
0000D30D F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D312 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D317 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D31C F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D321 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D326 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D32B F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D330 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D335 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D33A F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D33F F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D344 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D349 16                         Map_c5df_55: 	dc.b $16
0000D34A F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D34F F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D354 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D359 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D35E F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D363 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D368 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D36D F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D372 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D377 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D37C F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D381 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D386 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D38B F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D390 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D395 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D39A F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D39F F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D3A4 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D3A9 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3AE F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D3B3 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D3B8 05                         Map_c5df_C4: 	dc.b $5
0000D3B9 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D3BE F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D3C3 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D3C8 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D3CD F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D3D2 11                         Map_c5df_DE: 	dc.b $11
0000D3D3 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D3D8 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D3DD F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D3E2 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D3E7 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D3EC F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D3F1 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D3F6 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D3FB F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D400 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D405 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D40A F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D40F F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D414 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D419 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D41E F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D423 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D428 15                         Map_c5df_134: 	dc.b $15
0000D429 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D42E F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D433 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D438 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D43D F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D442 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D447 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D44C F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D451 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D456 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D45B F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D460 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D465 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D46A F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D46F F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D474 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D479 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D47E F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D483 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D488 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D48D F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D492 07                         Map_c5df_19E: 	dc.b $7
0000D493 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D498 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D49D F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D4A2 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D4A7 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4AC F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D4B1 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4B6 04                         Map_c5df_1C2: 	dc.b $4
0000D4B7 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4BC F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D4C1 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D4C6 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D4CB 02                         Map_c5df_1D7: 	dc.b $2
0000D4CC 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4D1 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D4D6 02                         Map_c5df_1E2: 	dc.b $2
0000D4D7 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4DC F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D4E1 02                         Map_c5df_1ED: 	dc.b $2
0000D4E2 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4E7 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D4EC 0D                         Map_c5df_1F8: 	dc.b $D
0000D4ED E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D4F2 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D4F7 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D4FC F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D501 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D506 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D50B 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D510 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D515 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D51A F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D51F FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D524 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D529 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D52E 05                         Map_c5df_23A: 	dc.b $5
0000D52F F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D534 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D539 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D53E F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D543 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D548                            	even
0000D548                            	even
0000D548                            ; ---------------------------------------------------------------------------
0000D548                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D548                            ; ---------------------------------------------------------------------------
0000D548                            Map_obj39:
0000D548                            	include "_maps\obj39.asm"
0000D548                            ; ---------------------------------------------------------------------------
0000D548                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D548                            ; ---------------------------------------------------------------------------
0000D548 0000                       		dc.w byte_CBAC-Map_obj39
0000D54A 0000                       		dc.w byte_CBB7-Map_obj39
0000D54C 0000                       		dc.w byte_CBC2-Map_obj39
0000D54E 0000                       		dc.w byte_CBCD-Map_obj39
0000D550 02                         byte_CBAC:	dc.b 2
0000D551 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D556 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D55B 02                         byte_CBB7:	dc.b 2
0000D55C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D561 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D566 02                         byte_CBC2:	dc.b 2
0000D567 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D56C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D571 02                         byte_CBCD:	dc.b 2
0000D572 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D577 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D57C                            		even
0000D57C                            		even
0000D57C                            
0000D57C                            ; ---------------------------------------------------------------------------
0000D57C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D57C                            ; ---------------------------------------------------------------------------
0000D57C 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D57E 0000                       		dc.w byte_CC13-Map_obj3A
0000D580 0000                       		dc.w byte_CC32-Map_obj3A
0000D582 0000                       		dc.w byte_CC51-Map_obj3A
0000D584 0000                       		dc.w byte_CC75-Map_obj3A
0000D586                            		;dc.w byte_CB47-Map_obj3A
0000D586                            		;dc.w byte_CB26-Map_obj3A
0000D586                            		;dc.w byte_CB31-Map_obj3A
0000D586                            		;dc.w byte_CB3C-Map_obj3A
0000D586 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D587 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D58C F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D591 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D596 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D59B F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D5A0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D5A5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D5AA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5AF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5B4 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D5B9 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D5BE F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D5C3 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D5C8 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D5CD F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D5D2 06                         byte_CC13:	dc.b 6			; PASSED
0000D5D3 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D5D8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D5DD F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D5E2 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D5E7 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5EC F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D5F1 06                         byte_CC32:	dc.b 6			; SCORE
0000D5F2 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D5F7 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D5FC F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D601 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D606 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D60B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D610 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D611 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D616 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D61B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D620 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D625 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D62A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D62F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D634 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D635 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D63A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D63F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D644 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D649 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D64E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D653 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D658                            		even
0000D658                            ; ---------------------------------------------------------------------------
0000D658                            ; Sprite mappings - special stage results screen
0000D658                            ; ---------------------------------------------------------------------------
0000D658 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D65A 0000                       		dc.w byte_CCEE-Map_obj7E
0000D65C 0000                       		dc.w byte_CD0D-Map_obj7E
0000D65E                            		;dc.w byte_CB47-Map_obj7E
0000D65E 0000                       		dc.w byte_CD31-Map_obj7E
0000D660 0000                       		dc.w byte_CD46-Map_obj7E
0000D662 0000                       		dc.w byte_CD5B-Map_obj7E
0000D664 0000                       		dc.w byte_CD6B-Map_obj7E
0000D666 0000                       		dc.w byte_CDA8-Map_obj7E
0000D668 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D669 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D66E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D673 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D678 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D67D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D682 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D687 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D68C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D691 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D696 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D69B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D6A0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D6A5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D6AA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D6AB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D6B0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6B5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D6BA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D6BF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D6C4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D6C9 07                         byte_CD0D:	dc.b 7
0000D6CA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D6CF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D6D4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D6D9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D6DE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D6E3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D6E8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D6ED 04                         byte_CD31:	dc.b 4
0000D6EE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6F3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D6F8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D6FD F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D702 04                         byte_CD46:	dc.b 4
0000D703 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D708 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D70D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D712 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D717 03                         byte_CD5B:	dc.b 3
0000D718 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D71D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D722 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D727 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D728 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D72D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D732 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D737 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D73C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D741 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D746 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D74B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D750 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D755 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D75A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D75F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D764 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D765 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D76A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D76F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D774 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D779 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D77E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D783 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D788 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D78D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D792 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D797 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D79C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D7A1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D7A6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D7AB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D7B0                            		even
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            Map_obj7F:
0000D7B0                            	include "_maps\obj7F.asm"
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0 0000                       		dc.w byte_CE02-Map_obj7F
0000D7B2 0000                       		dc.w byte_CE08-Map_obj7F
0000D7B4 0000                       		dc.w byte_CE0E-Map_obj7F
0000D7B6 0000                       		dc.w byte_CE14-Map_obj7F
0000D7B8 0000                       		dc.w byte_CE1A-Map_obj7F
0000D7BA 0000                       		dc.w byte_CE20-Map_obj7F
0000D7BC 0000                       		dc.w byte_CE26-Map_obj7F
0000D7BE 01                         byte_CE02:	dc.b 1
0000D7BF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D7C4 01                         byte_CE08:	dc.b 1
0000D7C5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D7CA 01                         byte_CE0E:	dc.b 1
0000D7CB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D7D0 01                         byte_CE14:	dc.b 1
0000D7D1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D7D6 01                         byte_CE1A:	dc.b 1
0000D7D7 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D7DC 01                         byte_CE20:	dc.b 1
0000D7DD F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D7E2 00                         byte_CE26:	dc.b 0			; Blank frame
0000D7E4 00                         		even
0000D7E4 00                         		even
0000D7E4                            
0000D7E4                            ; ===========================================================================
0000D7E4                            ; ---------------------------------------------------------------------------
0000D7E4                            ; Object 36 - spikes
0000D7E4                            ; ---------------------------------------------------------------------------
0000D7E4                            
0000D7E4                            Obj36:					; XREF: Obj_Index
0000D7E4 7000                       		moveq	#0,d0
0000D7E6 1028 0024                  		move.b	$24(a0),d0
0000D7EA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D7EE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D7F2                            ; ===========================================================================
0000D7F2 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D7F4 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D7F6                            
0000D7F6 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D7F8 0110                       		dc.b 1,	$10
0000D7FA 0204                       		dc.b 2,	4
0000D7FC 031C                       		dc.b 3,	$1C
0000D7FE 0440                       		dc.b 4,	$40
0000D800 0510                       		dc.b 5,	$10
0000D802                            ; ===========================================================================
0000D802                            
0000D802                            Obj36_Main:				; XREF: Obj36_Index
0000D802 5428 0024                  		addq.b	#2,$24(a0)
0000D806 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D80E 317C 051B 0002             		move.w	#$51B,2(a0)
0000D814 0028 0004 0001             		ori.b	#4,1(a0)
0000D81A 117C 0004 0018             		move.b	#4,$18(a0)
0000D820 1028 0028                  		move.b	$28(a0),d0
0000D824 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D82A 0240 00F0                  		andi.w	#$F0,d0
0000D82E 43F9 0000 D7F6             		lea	(Obj36_Var).l,a1
0000D834 E648                       		lsr.w	#3,d0
0000D836 D2C0                       		adda.w	d0,a1
0000D838 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D83C 1159 0019                  		move.b	(a1)+,$19(a0)
0000D840 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D846 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D84C                            
0000D84C                            Obj36_Solid:				; XREF: Obj36_Index
0000D84C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D850 343C 0004                  		move.w	#4,d2
0000D854 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D85A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D85C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D862 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D864 343C 0014                  		move.w	#$14,d2
0000D868                            
0000D868                            ; Spikes types $1x and $5x face	sideways
0000D868                            
0000D868                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D868 323C 001B                  		move.w	#$1B,d1
0000D86C 3602                       		move.w	d2,d3
0000D86E 5243                       		addq.w	#1,d3
0000D870 3828 0008                  		move.w	8(a0),d4
0000D874 6100 0000                  		bsr.w	SolidObject
0000D878 0828 0003 0022             		btst	#3,$22(a0)
0000D87E 6600                       		bne.s	Obj36_Display
0000D880 0C44 0001                  		cmpi.w	#1,d4
0000D884 6700                       		beq.s	Obj36_Hurt
0000D886 6000                       		bra.s	Obj36_Display
0000D888                            ; ===========================================================================
0000D888                            
0000D888                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D888                            
0000D888                            Obj36_Upright:				; XREF: Obj36_Solid
0000D888 7200                       		moveq	#0,d1
0000D88A 1228 0019                  		move.b	$19(a0),d1
0000D88E 0641 000B                  		addi.w	#$B,d1
0000D892 343C 0010                  		move.w	#$10,d2
0000D896 363C 0011                  		move.w	#$11,d3
0000D89A 3828 0008                  		move.w	8(a0),d4
0000D89E 6100 0000                  		bsr.w	SolidObject
0000D8A2 0828 0003 0022             		btst	#3,$22(a0)
0000D8A8 6600                       		bne.s	Obj36_Hurt
0000D8AA 4A44                       		tst.w	d4
0000D8AC 6A00                       		bpl.s	Obj36_Display
0000D8AE                            
0000D8AE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8AE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D8B2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8B4 2F08                       		move.l	a0,-(sp)
0000D8B6 2448                       		movea.l	a0,a2
0000D8B8 41F8 D000                  		lea	($FFFFD000).w,a0
0000D8BC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D8C2 6400                       		bcc.s	loc_CF20
0000D8C4 2628 000C                  		move.l	$C(a0),d3
0000D8C8 3028 0012                  		move.w	$12(a0),d0
0000D8CC 48C0                       		ext.l	d0
0000D8CE E180                       		asl.l	#8,d0
0000D8D0 9680                       		sub.l	d0,d3
0000D8D2 2143 000C                  		move.l	d3,$C(a0)
0000D8D6 4EB9 0000 0000             		jsr	HurtSonic
0000D8DC                            
0000D8DC                            loc_CF20:
0000D8DC 205F                       		movea.l	(sp)+,a0
0000D8DE                            
0000D8DE                            Obj36_Display:
0000D8DE 6100 0000                  		bsr.w	DisplaySprite
0000D8E2 3028 0030                  		move.w	$30(a0),d0
0000D8E6 0240 FF80                  		andi.w	#$FF80,d0
0000D8EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8EE 0441 0080                  		subi.w	#$80,d1
0000D8F2 0241 FF80                  		andi.w	#$FF80,d1
0000D8F6 9041                       		sub.w	d1,d0
0000D8F8 0C40 0280                  		cmpi.w	#$280,d0
0000D8FC 6200 0000                  		bhi.w	DeleteObject
0000D900 4E75                       		rts	
0000D902                            ; ===========================================================================
0000D902                            
0000D902                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D902 7000                       		moveq	#0,d0
0000D904 1028 0028                  		move.b	$28(a0),d0
0000D908 D040                       		add.w	d0,d0
0000D90A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D90E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D912                            ; ===========================================================================
0000D912 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D914 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D916 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D918                            ; ===========================================================================
0000D918                            
0000D918                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D918 4E75                       		rts			; don't move the object
0000D91A                            ; ===========================================================================
0000D91A                            
0000D91A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D91A 6100 0000                  		bsr.w	Obj36_Wait
0000D91E 7000                       		moveq	#0,d0
0000D920 1028 0034                  		move.b	$34(a0),d0
0000D924 D068 0032                  		add.w	$32(a0),d0
0000D928 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D92C 4E75                       		rts	
0000D92E                            ; ===========================================================================
0000D92E                            
0000D92E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D92E 6100 0000                  		bsr.w	Obj36_Wait
0000D932 7000                       		moveq	#0,d0
0000D934 1028 0034                  		move.b	$34(a0),d0
0000D938 D068 0030                  		add.w	$30(a0),d0
0000D93C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D940 4E75                       		rts	
0000D942                            ; ===========================================================================
0000D942                            
0000D942                            Obj36_Wait:
0000D942 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D946 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D948 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D94C 6600                       		bne.s	locret_CFE6
0000D94E 4A28 0001                  		tst.b	1(a0)
0000D952 6A00                       		bpl.s	locret_CFE6
0000D954 303C 00B6                  		move.w	#$B6,d0
0000D958 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D95E 6000                       		bra.s	locret_CFE6
0000D960                            ; ===========================================================================
0000D960                            
0000D960                            loc_CFA4:
0000D960 4A68 0036                  		tst.w	$36(a0)
0000D964 6700                       		beq.s	loc_CFC6
0000D966 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D96C 6400                       		bcc.s	locret_CFE6
0000D96E 317C 0000 0034             		move.w	#0,$34(a0)
0000D974 317C 0000 0036             		move.w	#0,$36(a0)
0000D97A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D980 6000                       		bra.s	locret_CFE6
0000D982                            ; ===========================================================================
0000D982                            
0000D982                            loc_CFC6:
0000D982 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D988 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D98E 6500                       		bcs.s	locret_CFE6
0000D990 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D996 317C 0001 0036             		move.w	#1,$36(a0)
0000D99C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9A2                            
0000D9A2                            locret_CFE6:
0000D9A2 4E75                       		rts	
0000D9A4                            ; ===========================================================================
0000D9A4                            ; ---------------------------------------------------------------------------
0000D9A4                            ; Sprite mappings - spikes
0000D9A4                            ; ---------------------------------------------------------------------------
0000D9A4                            Map_obj36:
0000D9A4                            	include "_maps\obj36.asm"
0000D9A4                            Map_obj36_inner:
0000D9A4 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D9A6 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D9A8 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D9AA 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9AC 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9AE 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D9B0 03                         Map_obj36_inner_C: 	dc.b $3
0000D9B1 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D9B6 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9BB F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D9C0 03                         Map_obj36_inner_1C: 	dc.b $3
0000D9C1 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D9C6 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D9CB 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D9D0 01                         Map_obj36_inner_2C: 	dc.b $1
0000D9D1 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9D6 03                         Map_obj36_inner_32: 	dc.b $3
0000D9D7 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D9DC F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9E1 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D9E6 06                         Map_obj36_inner_42: 	dc.b $6
0000D9E7 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D9EC F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D9F1 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D9F6 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D9FB F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DA00 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DA05 01                         Map_obj36_inner_61: 	dc.b $1
0000DA06 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA0C 00                         	even
0000DA0C 00                         	even
0000DA0C                            
0000DA0C                            ; ===========================================================================
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            ; Object 3B - purple rock (GHZ)
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            
0000DA0C                            Obj3B:					; XREF: Obj_Index
0000DA0C 7000                       		moveq	#0,d0
0000DA0E 1028 0024                  		move.b	$24(a0),d0
0000DA12 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA16 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA1A                            ; ===========================================================================
0000DA1A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA1C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA1E                            ; ===========================================================================
0000DA1E                            
0000DA1E                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA1E 5428 0024                  		addq.b	#2,$24(a0)
0000DA22 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA2A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA30 117C 0004 0001             		move.b	#4,1(a0)
0000DA36 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA3C 117C 0004 0018             		move.b	#4,$18(a0)
0000DA42                            
0000DA42                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA42 323C 001B                  		move.w	#$1B,d1
0000DA46 343C 0010                  		move.w	#$10,d2
0000DA4A 363C 0010                  		move.w	#$10,d3
0000DA4E 3828 0008                  		move.w	8(a0),d4
0000DA52 6100 0000                  		bsr.w	SolidObject
0000DA56 6100 0000                  		bsr.w	DisplaySprite
0000DA5A 3028 0008                  		move.w	8(a0),d0
0000DA5E 0240 FF80                  		andi.w	#$FF80,d0
0000DA62 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA66 0441 0080                  		subi.w	#$80,d1
0000DA6A 0241 FF80                  		andi.w	#$FF80,d1
0000DA6E 9041                       		sub.w	d1,d0
0000DA70 0C40 0280                  		cmpi.w	#$280,d0
0000DA74 6200 0000                  		bhi.w	DeleteObject
0000DA78 4E75                       		rts	
0000DA7A                            ; ===========================================================================
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            ; Object 49 - waterfall	sound effect (GHZ)
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            
0000DA7A                            Obj49:					; XREF: Obj_Index
0000DA7A 7000                       		moveq	#0,d0
0000DA7C 1028 0024                  		move.b	$24(a0),d0
0000DA80 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DA84 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DA88                            ; ===========================================================================
0000DA88 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DA8A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DA8C                            ; ===========================================================================
0000DA8C                            
0000DA8C                            Obj49_Main:				; XREF: Obj49_Index
0000DA8C 5428 0024                  		addq.b	#2,$24(a0)
0000DA90 117C 0004 0001             		move.b	#4,1(a0)
0000DA96                            
0000DA96                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DA96 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA9A 0200 003F                  		andi.b	#$3F,d0
0000DA9E 6600                       		bne.s	Obj49_ChkDel
0000DAA0 303C 00D0                  		move.w	#$D0,d0
0000DAA4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DAAA                            
0000DAAA                            Obj49_ChkDel:
0000DAAA 3028 0008                  		move.w	8(a0),d0
0000DAAE 0240 FF80                  		andi.w	#$FF80,d0
0000DAB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAB6 0441 0080                  		subi.w	#$80,d1
0000DABA 0241 FF80                  		andi.w	#$FF80,d1
0000DABE 9041                       		sub.w	d1,d0
0000DAC0 0C40 0280                  		cmpi.w	#$280,d0
0000DAC4 6200 0000                  		bhi.w	DeleteObject
0000DAC8 4E75                       		rts	
0000DACA                            ; ===========================================================================
0000DACA                            ; ---------------------------------------------------------------------------
0000DACA                            ; Sprite mappings - purple rock	(GHZ)
0000DACA                            ; ---------------------------------------------------------------------------
0000DACA                            Map_obj3B:
0000DACA                            	include "_maps\obj3B.asm"
0000DACA                            ; ---------------------------------------------------------------------------
0000DACA                            ; Sprite mappings - purple rock	(GHZ)
0000DACA                            ; ---------------------------------------------------------------------------
0000DACA 0000                       		dc.w byte_D110-Map_obj3B
0000DACC 02                         byte_D110:	dc.b 2
0000DACD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DAD2 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DAD8 00                         		even
0000DAD8 00                         		even
0000DAD8                            
0000DAD8                            ; ===========================================================================
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            
0000DAD8                            Obj3C:					; XREF: Obj_Index
0000DAD8 7000                       		moveq	#0,d0
0000DADA 1028 0024                  		move.b	$24(a0),d0
0000DADE 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DAE2 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DAE6 6000 0000                  		bra.w	MarkObjGone
0000DAEA                            ; ===========================================================================
0000DAEA 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DAEC 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DAEE 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DAF0                            ; ===========================================================================
0000DAF0                            
0000DAF0                            Obj3C_Main:				; XREF: Obj3C_Index
0000DAF0 5428 0024                  		addq.b	#2,$24(a0)
0000DAF4 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DAFC 317C 450F 0002             		move.w	#$450F,2(a0)
0000DB02 117C 0004 0001             		move.b	#4,1(a0)
0000DB08 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB0E 117C 0004 0018             		move.b	#4,$18(a0)
0000DB14 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB1A                            
0000DB1A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB1A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB20 323C 001B                  		move.w	#$1B,d1
0000DB24 343C 0020                  		move.w	#$20,d2
0000DB28 363C 0020                  		move.w	#$20,d3
0000DB2C 3828 0008                  		move.w	8(a0),d4
0000DB30 6100 0000                  		bsr.w	SolidObject
0000DB34 0828 0005 0022             		btst	#5,$22(a0)
0000DB3A 6600                       		bne.s	Obj3C_ChkRoll
0000DB3C                            
0000DB3C                            locret_D180:
0000DB3C 4E75                       		rts	
0000DB3E                            ; ===========================================================================
0000DB3E                            
0000DB3E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB3E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB44 66F6                       		bne.s	locret_D180	; if not, branch
0000DB46 3028 0030                  		move.w	$30(a0),d0
0000DB4A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB4C 4440                       		neg.w	d0
0000DB4E                            
0000DB4E                            Obj3C_ChkSpeed:
0000DB4E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB52 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB54 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DB5A 5869 0008                  		addq.w	#4,8(a1)
0000DB5E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DB64 3028 0008                  		move.w	8(a0),d0
0000DB68 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DB6C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DB6E 5169 0008                  		subq.w	#8,8(a1)
0000DB72 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DB78                            
0000DB78                            Obj3C_Smash:
0000DB78 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DB7E 08A8 0005 0022             		bclr	#5,$22(a0)
0000DB84 08A9 0005 0022             		bclr	#5,$22(a1)
0000DB8A 7207                       		moveq	#7,d1		; load 8 fragments
0000DB8C 343C 0070                  		move.w	#$70,d2
0000DB90 6100                       		bsr.s	SmashObject
0000DB92                            
0000DB92                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DB92 6100 0000                  		bsr.w	SpeedToPos
0000DB96 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DB9C 6100 0000                  		bsr.w	DisplaySprite
0000DBA0 4A28 0001                  		tst.b	1(a0)
0000DBA4 6A00 0000                  		bpl.w	DeleteObject
0000DBA8 4E75                       		rts	
0000DBAA                            
0000DBAA                            ; ---------------------------------------------------------------------------
0000DBAA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DBAA                            ; ---------------------------------------------------------------------------
0000DBAA                            
0000DBAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBAA                            
0000DBAA                            
0000DBAA                            SmashObject:				; XREF: Obj3C_Smash
0000DBAA 7000                       		moveq	#0,d0
0000DBAC 1028 001A                  		move.b	$1A(a0),d0
0000DBB0 D040                       		add.w	d0,d0
0000DBB2 2668 0004                  		movea.l	4(a0),a3
0000DBB6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DBBA 524B                       		addq.w	#1,a3
0000DBBC 08E8 0005 0001             		bset	#5,1(a0)
0000DBC2 1810                       		move.b	0(a0),d4
0000DBC4 1A28 0001                  		move.b	1(a0),d5
0000DBC8 2248                       		movea.l	a0,a1
0000DBCA 6000                       		bra.s	Smash_LoadFrag
0000DBCC                            ; ===========================================================================
0000DBCC                            
0000DBCC                            Smash_Loop:
0000DBCC 6100 0000                  		bsr.w	SingleObjLoad
0000DBD0 6600                       		bne.s	Smash_PlaySnd
0000DBD2 5A4B                       		addq.w	#5,a3
0000DBD4                            
0000DBD4                            Smash_LoadFrag:				; XREF: SmashObject
0000DBD4 137C 0004 0024             		move.b	#4,$24(a1)
0000DBDA 1284                       		move.b	d4,0(a1)
0000DBDC 234B 0004                  		move.l	a3,4(a1)
0000DBE0 1345 0001                  		move.b	d5,1(a1)
0000DBE4 3368 0008 0008             		move.w	8(a0),8(a1)
0000DBEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DBF0 3368 0002 0002             		move.w	2(a0),2(a1)
0000DBF6 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DBFC 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DC02 335C 0010                  		move.w	(a4)+,$10(a1)
0000DC06 335C 0012                  		move.w	(a4)+,$12(a1)
0000DC0A B3C8                       		cmpa.l	a0,a1
0000DC0C 6400                       		bcc.s	loc_D268
0000DC0E 2F08                       		move.l	a0,-(sp)
0000DC10 2049                       		movea.l	a1,a0
0000DC12 6100 0000                  		bsr.w	SpeedToPos
0000DC16 D568 0012                  		add.w	d2,$12(a0)
0000DC1A 205F                       		movea.l	(sp)+,a0
0000DC1C 6100 0000                  		bsr.w	DisplaySprite2
0000DC20                            
0000DC20                            loc_D268:
0000DC20 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC24                            
0000DC24                            Smash_PlaySnd:
0000DC24 303C 00CB                  		move.w	#$CB,d0
0000DC28 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC2E                            ; End of function SmashObject
0000DC2E                            
0000DC2E                            ; ===========================================================================
0000DC2E                            ; Smashed block	fragment speeds
0000DC2E                            ;
0000DC2E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC32 0600 FF00                  		dc.w $600, $FF00
0000DC36 0600 0100                  		dc.w $600, $100
0000DC3A 0400 0500                  		dc.w $400, $500
0000DC3E 0600 FA00                  		dc.w $600, $FA00
0000DC42 0800 FE00                  		dc.w $800, $FE00
0000DC46 0800 0200                  		dc.w $800, $200
0000DC4A 0600 0600                  		dc.w $600, $600
0000DC4E                            
0000DC4E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC52 F800 FE00                  		dc.w $F800, $FE00
0000DC56 F800 0200                  		dc.w $F800, $200
0000DC5A FA00 0600                  		dc.w $FA00, $600
0000DC5E FC00 FB00                  		dc.w $FC00, $FB00
0000DC62 FA00 FF00                  		dc.w $FA00, $FF00
0000DC66 FA00 0100                  		dc.w $FA00, $100
0000DC6A FC00 0500                  		dc.w $FC00, $500
0000DC6E                            ; ---------------------------------------------------------------------------
0000DC6E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC6E                            ; ---------------------------------------------------------------------------
0000DC6E                            Map_obj3C:
0000DC6E                            	include "_maps\obj3C.asm"
0000DC6E                            ; ---------------------------------------------------------------------------
0000DC6E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC6E                            ; ---------------------------------------------------------------------------
0000DC6E 0000                       		dc.w byte_D2BC-Map_obj3C
0000DC70 0000                       		dc.w byte_D2E5-Map_obj3C
0000DC72 0000                       		dc.w byte_D30E-Map_obj3C
0000DC74 08                         byte_D2BC:	dc.b 8
0000DC75 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DC7A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DC7F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DC84 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DC89 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DC8E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DC93 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DC98 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DC9D 08                         byte_D2E5:	dc.b 8
0000DC9E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCA3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCA8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCAD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCB2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCB7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCBC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCC1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCC6 08                         byte_D30E:	dc.b 8
0000DCC7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCCC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCD1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCD6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCDB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DCE0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DCE5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DCEA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DCF0 00                         		even
0000DCF0 00                         		even
0000DCF0                            
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            ; Object code loading subroutine
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            
0000DCF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCF0                            
0000DCF0                            
0000DCF0                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DCF0 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DCF4 7E7F                       		moveq	#$7F,d7
0000DCF6 7000                       		moveq	#0,d0
0000DCF8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DCFE 6400                       		bcc.s	loc_D362
0000DD00                            
0000DD00                            loc_D348:
0000DD00 1010                       		move.b	(a0),d0		; load object number from RAM
0000DD02 6700                       		beq.s	loc_D358
0000DD04 D040                       		add.w	d0,d0
0000DD06 D040                       		add.w	d0,d0
0000DD08 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD0C 4E91                       		jsr	(a1)		; run the object's code
0000DD0E 7000                       		moveq	#0,d0
0000DD10                            
0000DD10                            loc_D358:
0000DD10 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD14 51CF FFEA                  		dbf	d7,loc_D348
0000DD18 4E75                       		rts	
0000DD1A                            ; ===========================================================================
0000DD1A                            
0000DD1A                            loc_D362:
0000DD1A 7E1F                       		moveq	#$1F,d7
0000DD1C 61E2                       		bsr.s	loc_D348
0000DD1E 7E5F                       		moveq	#$5F,d7
0000DD20                            
0000DD20                            loc_D368:
0000DD20 7000                       		moveq	#0,d0
0000DD22 1010                       		move.b	(a0),d0
0000DD24 6700                       		beq.s	loc_D378
0000DD26 4A28 0001                  		tst.b	1(a0)
0000DD2A 6A00                       		bpl.s	loc_D378
0000DD2C 6100 0000                  		bsr.w	DisplaySprite
0000DD30                            
0000DD30                            loc_D378:
0000DD30 41E8 0040                  		lea	$40(a0),a0
0000DD34                            
0000DD34                            loc_D37C:
0000DD34 51CF FFEA                  		dbf	d7,loc_D368
0000DD38 4E75                       		rts	
0000DD3A                            ; End of function ObjectsLoad
0000DD3A                            
0000DD3A                            ; ===========================================================================
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            ; Object pointers
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            Obj_Index:
0000DD3A                            	include "_inc\Object pointers.asm"
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            ; Object pointers
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD4A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DD5A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DD6A 0000 0000 0000 AF5C 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DD7A 0000 7AF4 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DD8A 0000 811A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DD9A 0000 8968 0000 8A62 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DDAA 0000 90AC 0000 939A 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DDBA 0000 0000 0000 A058 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DDCA 0000 A390 0000 A97C 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DDDA 0000 9CB4 0000 9182 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DDEA 0000 B554 0000 AB70 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DDFA 0000 BF68 0000 C616 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DE0A 0000 BAC6 0000 D7E4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE1A 0000 CDC4 0000 CE7E 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE2A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE3A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE4A 0000 C284 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DE5A 0000 DA7A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DE6A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DE7A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DE8A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DE9A 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DEAA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DEBA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DECA 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DEDA 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DEEA 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DEFA 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DF0A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF1A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF2A 0000 0000 0000 D0C0 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF3A 0000 55A0 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF4A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DF5A 0000 5C5A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF5A 0000 5C5A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF6A                            
0000DF6A                            ; ---------------------------------------------------------------------------
0000DF6A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF6A                            ; ---------------------------------------------------------------------------
0000DF6A                            
0000DF6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF6A                            
0000DF6A                            
0000DF6A                            ObjectFall:
0000DF6A 2428 0008                  		move.l	8(a0),d2
0000DF6E 2628 000C                  		move.l	$C(a0),d3
0000DF72 3028 0010                  		move.w	$10(a0),d0
0000DF76 48C0                       		ext.l	d0
0000DF78 E180                       		asl.l	#8,d0
0000DF7A D480                       		add.l	d0,d2
0000DF7C 3028 0012                  		move.w	$12(a0),d0
0000DF80 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DF86 48C0                       		ext.l	d0
0000DF88 E180                       		asl.l	#8,d0
0000DF8A D680                       		add.l	d0,d3
0000DF8C 2142 0008                  		move.l	d2,8(a0)
0000DF90 2143 000C                  		move.l	d3,$C(a0)
0000DF94 4E75                       		rts	
0000DF96                            ; End of function ObjectFall
0000DF96                            
0000DF96                            ; ---------------------------------------------------------------------------
0000DF96                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF96                            ; ---------------------------------------------------------------------------
0000DF96                            
0000DF96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF96                            
0000DF96                            
0000DF96                            ObjectFallNoJump:
0000DF96 2428 0008                  		move.l	8(a0),d2
0000DF9A 2628 000C                  		move.l	$C(a0),d3
0000DF9E 3028 0010                  		move.w	$10(a0),d0
0000DFA2 48C0                       		ext.l	d0
0000DFA4 E180                       		asl.l	#8,d0
0000DFA6 D480                       		add.l	d0,d2
0000DFA8                            ;		cmpi.b	#1,obID(a0)
0000DFA8                            ;		beq.s	ObjectFallSonic
0000DFA8 3028 000C                  		move.w	$C(a0),d0
0000DFAC 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DFB0                            ;		ext.l	d0
0000DFB0                            ;		asl.l	#8,d0
0000DFB0                            ;		add.l	d0,d3
0000DFB0 2142 0008                  		move.l	d2,$8(a0)
0000DFB4                            ;		move.l	d3,obY(a0)
0000DFB4 4E75                       		rts	
0000DFB6                            
0000DFB6                            ; End of function ObjectFall
0000DFB6                            
0000DFB6                            JumpFallSonic:
0000DFB6 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DFBC                                    
0000DFBC E180                               asl.l    #8,d0                ; Apply X speed
0000DFBE D1A8 0008                          add.l    d0,$8(a0)
0000DFC2                                    
0000DFC2 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DFC6 4A41                               tst.w    d1                ; Are we falling?
0000DFC8 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DFCA 4440                               neg.w    d0                ; Make Y movement go up
0000DFCC                                    
0000DFCC                            .SetYSpeed:
0000DFCC 48C0                               ext.l    d0                ; Apply Y speed
0000DFCE E180                               asl.l    #8,d0
0000DFD0 D1A8 000C                          add.l    d0,$C(a0)
0000DFD4 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DFDA 4E75                               rts
0000DFDC                            
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            ; Subroutine translating object	speed to update	object position
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            
0000DFDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFDC                            
0000DFDC                            
0000DFDC                            SpeedToPos:
0000DFDC 2428 0008                  		move.l	8(a0),d2
0000DFE0 2628 000C                  		move.l	$C(a0),d3
0000DFE4 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DFE8 48C0                       		ext.l	d0
0000DFEA E180                       		asl.l	#8,d0		; multiply speed by $100
0000DFEC D480                       		add.l	d0,d2		; add to x-axis	position
0000DFEE 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DFF2 48C0                       		ext.l	d0
0000DFF4 E180                       		asl.l	#8,d0		; multiply by $100
0000DFF6 D680                       		add.l	d0,d3		; add to y-axis	position
0000DFF8 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DFFC 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E000 4E75                       		rts	
0000E002                            ; End of function SpeedToPos
0000E002                            
0000E002                            ; ---------------------------------------------------------------------------
0000E002                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E002                            ; ---------------------------------------------------------------------------
0000E002                            
0000E002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E002                            
0000E002                            
0000E002                            DisplaySprite:
0000E002 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E006 3028 0018                  		move.w	$18(a0),d0
0000E00A E248                       		lsr.w	#1,d0
0000E00C 0240 0380                  		andi.w	#$380,d0
0000E010 D2C0                       		adda.w	d0,a1
0000E012 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E016 6400                       		bcc.s	locret_D620
0000E018 5451                       		addq.w	#2,(a1)
0000E01A D2D1                       		adda.w	(a1),a1
0000E01C 3288                       		move.w	a0,(a1)
0000E01E                            
0000E01E                            locret_D620:
0000E01E 4E75                       		rts	
0000E020                            ; End of function DisplaySprite
0000E020                            
0000E020                            ; ---------------------------------------------------------------------------
0000E020                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E020                            ; ---------------------------------------------------------------------------
0000E020                            
0000E020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E020                            
0000E020                            
0000E020                            DisplaySprite2:
0000E020 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E024 3029 0018                  		move.w	$18(a1),d0
0000E028 E248                       		lsr.w	#1,d0
0000E02A 0240 0380                  		andi.w	#$380,d0
0000E02E D4C0                       		adda.w	d0,a2
0000E030 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E034 6400                       		bcc.s	locret_D63E
0000E036 5452                       		addq.w	#2,(a2)
0000E038 D4D2                       		adda.w	(a2),a2
0000E03A 3489                       		move.w	a1,(a2)
0000E03C                            
0000E03C                            locret_D63E:
0000E03C 4E75                       		rts	
0000E03E                            ; End of function DisplaySprite2
0000E03E                            
0000E03E                            ; ---------------------------------------------------------------------------
0000E03E                            ; Subroutine to	delete an object
0000E03E                            ; ---------------------------------------------------------------------------
0000E03E                            
0000E03E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E03E                            
0000E03E                            
0000E03E                            DeleteObject:
0000E03E 2248                       		movea.l	a0,a1
0000E040                            
0000E040                            DeleteObject2:
0000E040 7200                       		moveq	#0,d1
0000E042 700F                       		moveq	#$F,d0
0000E044                            
0000E044                            loc_D646:
0000E044 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E046 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E04A 4E75                       		rts	
0000E04C                            ; End of function DeleteObject
0000E04C                            
0000E04C                            ; ===========================================================================
0000E04C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E050 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E054 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E058 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E05C                            ; ---------------------------------------------------------------------------
0000E05C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E05C                            ; ---------------------------------------------------------------------------
0000E05C                            
0000E05C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E05C                            
0000E05C                            
0000E05C                            BuildSprites:				; XREF: TitleScreen; et al
0000E05C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E060 7A00                       		moveq	#0,d5
0000E062 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E066 7E07                       		moveq	#7,d7
0000E068                            
0000E068                            loc_D66A:
0000E068 4A54                       		tst.w	(a4)
0000E06A 6700 0000                  		beq.w	loc_D72E
0000E06E 7C02                       		moveq	#2,d6
0000E070                            
0000E070                            loc_D672:
0000E070 3074 6000                  		movea.w	(a4,d6.w),a0
0000E074 4A10                       		tst.b	(a0)
0000E076 6700 0000                  		beq.w	loc_D726
0000E07A 08A8 0007 0001             		bclr	#7,1(a0)
0000E080 1028 0001                  		move.b	1(a0),d0
0000E084 1800                       		move.b	d0,d4
0000E086 0240 000C                  		andi.w	#$C,d0
0000E08A 6700                       		beq.s	loc_D6DE
0000E08C 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E090 7000                       		moveq	#0,d0
0000E092 1028 0019                  		move.b	$19(a0),d0
0000E096 3628 0008                  		move.w	8(a0),d3
0000E09A 9651                       		sub.w	(a1),d3
0000E09C 3203                       		move.w	d3,d1
0000E09E D240                       		add.w	d0,d1
0000E0A0 6B00 0000                  		bmi.w	loc_D726
0000E0A4 3203                       		move.w	d3,d1
0000E0A6 9240                       		sub.w	d0,d1
0000E0A8 0C41 0140                  		cmpi.w	#$140,d1
0000E0AC 6C00                       		bge.s	loc_D726
0000E0AE 0643 0080                  		addi.w	#$80,d3
0000E0B2 0804 0004                  		btst	#4,d4
0000E0B6 6700                       		beq.s	loc_D6E8
0000E0B8 7000                       		moveq	#0,d0
0000E0BA 1028 0016                  		move.b	$16(a0),d0
0000E0BE 3428 000C                  		move.w	$C(a0),d2
0000E0C2 9469 0004                  		sub.w	4(a1),d2
0000E0C6 3202                       		move.w	d2,d1
0000E0C8 D240                       		add.w	d0,d1
0000E0CA 6B00                       		bmi.s	loc_D726
0000E0CC 3202                       		move.w	d2,d1
0000E0CE 9240                       		sub.w	d0,d1
0000E0D0 0C41 00E0                  		cmpi.w	#$E0,d1
0000E0D4 6C00                       		bge.s	loc_D726
0000E0D6 0642 0080                  		addi.w	#$80,d2
0000E0DA 6000                       		bra.s	loc_D700
0000E0DC                            ; ===========================================================================
0000E0DC                            
0000E0DC                            loc_D6DE:
0000E0DC 3428 000A                  		move.w	$A(a0),d2
0000E0E0 3628 0008                  		move.w	8(a0),d3
0000E0E4 6000                       		bra.s	loc_D700
0000E0E6                            ; ===========================================================================
0000E0E6                            
0000E0E6                            loc_D6E8:
0000E0E6 3428 000C                  		move.w	$C(a0),d2
0000E0EA 9469 0004                  		sub.w	4(a1),d2
0000E0EE 0642 0080                  		addi.w	#$80,d2
0000E0F2 0C42 0060                  		cmpi.w	#$60,d2
0000E0F6 6500                       		bcs.s	loc_D726
0000E0F8 0C42 0180                  		cmpi.w	#$180,d2
0000E0FC 6400                       		bcc.s	loc_D726
0000E0FE                            
0000E0FE                            loc_D700:
0000E0FE 2268 0004                  		movea.l	4(a0),a1
0000E102 7200                       		moveq	#0,d1
0000E104 0804 0005                  		btst	#5,d4
0000E108 6600                       		bne.s	loc_D71C
0000E10A 1228 001A                  		move.b	$1A(a0),d1
0000E10E D201                       		add.b	d1,d1
0000E110 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E114 1219                       		move.b	(a1)+,d1
0000E116 5301                       		subq.b	#1,d1
0000E118 6B00                       		bmi.s	loc_D720
0000E11A                            
0000E11A                            loc_D71C:
0000E11A 6100 0000                  		bsr.w	sub_D750
0000E11E                            
0000E11E                            loc_D720:
0000E11E 08E8 0007 0001             		bset	#7,1(a0)
0000E124                            
0000E124                            loc_D726:
0000E124 5446                       		addq.w	#2,d6
0000E126 5554                       		subq.w	#2,(a4)
0000E128 6600 FF46                  		bne.w	loc_D672
0000E12C                            
0000E12C                            loc_D72E:
0000E12C 49EC 0080                  		lea	$80(a4),a4
0000E130 51CF FF36                  		dbf	d7,loc_D66A
0000E134 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E138 0C05 0050                  		cmpi.b	#$50,d5
0000E13C 6700                       		beq.s	loc_D748
0000E13E 24BC 0000 0000             		move.l	#0,(a2)
0000E144 4E75                       		rts	
0000E146                            ; ===========================================================================
0000E146                            
0000E146                            loc_D748:
0000E146 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E14C 4E75                       		rts	
0000E14E                            ; End of function BuildSprites
0000E14E                            
0000E14E                            
0000E14E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E14E                            
0000E14E                            
0000E14E                            sub_D750:				; XREF: BuildSprites
0000E14E 3668 0002                  		movea.w	2(a0),a3
0000E152 0804 0000                  		btst	#0,d4
0000E156 6600                       		bne.s	loc_D796
0000E158 0804 0001                  		btst	#1,d4
0000E15C 6600 0000                  		bne.w	loc_D7E4
0000E160                            ; End of function sub_D750
0000E160                            
0000E160                            
0000E160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E160                            
0000E160                            
0000E160                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E160 0C05 0050                  		cmpi.b	#$50,d5
0000E164 6700                       		beq.s	locret_D794
0000E166 1019                       		move.b	(a1)+,d0
0000E168 4880                       		ext.w	d0
0000E16A D042                       		add.w	d2,d0
0000E16C 34C0                       		move.w	d0,(a2)+
0000E16E 14D9                       		move.b	(a1)+,(a2)+
0000E170 5205                       		addq.b	#1,d5
0000E172 14C5                       		move.b	d5,(a2)+
0000E174 1019                       		move.b	(a1)+,d0
0000E176 E148                       		lsl.w	#8,d0
0000E178 1019                       		move.b	(a1)+,d0
0000E17A D04B                       		add.w	a3,d0
0000E17C 34C0                       		move.w	d0,(a2)+
0000E17E 1019                       		move.b	(a1)+,d0
0000E180 4880                       		ext.w	d0
0000E182 D043                       		add.w	d3,d0
0000E184 0240 01FF                  		andi.w	#$1FF,d0
0000E188 6600                       		bne.s	loc_D78E
0000E18A 5240                       		addq.w	#1,d0
0000E18C                            
0000E18C                            loc_D78E:
0000E18C 34C0                       		move.w	d0,(a2)+
0000E18E 51C9 FFD0                  		dbf	d1,sub_D762
0000E192                            
0000E192                            locret_D794:
0000E192 4E75                       		rts	
0000E194                            ; End of function sub_D762
0000E194                            
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            loc_D796:
0000E194 0804 0001                  		btst	#1,d4
0000E198 6600 0000                  		bne.w	loc_D82A
0000E19C                            
0000E19C                            loc_D79E:
0000E19C 0C05 0050                  		cmpi.b	#$50,d5
0000E1A0 6700                       		beq.s	locret_D7E2
0000E1A2 1019                       		move.b	(a1)+,d0
0000E1A4 4880                       		ext.w	d0
0000E1A6 D042                       		add.w	d2,d0
0000E1A8 34C0                       		move.w	d0,(a2)+
0000E1AA 1819                       		move.b	(a1)+,d4
0000E1AC 14C4                       		move.b	d4,(a2)+
0000E1AE 5205                       		addq.b	#1,d5
0000E1B0 14C5                       		move.b	d5,(a2)+
0000E1B2 1019                       		move.b	(a1)+,d0
0000E1B4 E148                       		lsl.w	#8,d0
0000E1B6 1019                       		move.b	(a1)+,d0
0000E1B8 D04B                       		add.w	a3,d0
0000E1BA 0A40 0800                  		eori.w	#$800,d0
0000E1BE 34C0                       		move.w	d0,(a2)+
0000E1C0 1019                       		move.b	(a1)+,d0
0000E1C2 4880                       		ext.w	d0
0000E1C4 4440                       		neg.w	d0
0000E1C6 D804                       		add.b	d4,d4
0000E1C8 0244 0018                  		andi.w	#$18,d4
0000E1CC 5044                       		addq.w	#8,d4
0000E1CE 9044                       		sub.w	d4,d0
0000E1D0 D043                       		add.w	d3,d0
0000E1D2 0240 01FF                  		andi.w	#$1FF,d0
0000E1D6 6600                       		bne.s	loc_D7DC
0000E1D8 5240                       		addq.w	#1,d0
0000E1DA                            
0000E1DA                            loc_D7DC:
0000E1DA 34C0                       		move.w	d0,(a2)+
0000E1DC 51C9 FFBE                  		dbf	d1,loc_D79E
0000E1E0                            
0000E1E0                            locret_D7E2:
0000E1E0 4E75                       		rts	
0000E1E2                            ; ===========================================================================
0000E1E2                            
0000E1E2                            loc_D7E4:				; XREF: sub_D750
0000E1E2 0C05 0050                  		cmpi.b	#$50,d5
0000E1E6 6700                       		beq.s	locret_D828
0000E1E8 1019                       		move.b	(a1)+,d0
0000E1EA 1811                       		move.b	(a1),d4
0000E1EC 4880                       		ext.w	d0
0000E1EE 4440                       		neg.w	d0
0000E1F0 E70C                       		lsl.b	#3,d4
0000E1F2 0244 0018                  		andi.w	#$18,d4
0000E1F6 5044                       		addq.w	#8,d4
0000E1F8 9044                       		sub.w	d4,d0
0000E1FA D042                       		add.w	d2,d0
0000E1FC 34C0                       		move.w	d0,(a2)+
0000E1FE 14D9                       		move.b	(a1)+,(a2)+
0000E200 5205                       		addq.b	#1,d5
0000E202 14C5                       		move.b	d5,(a2)+
0000E204 1019                       		move.b	(a1)+,d0
0000E206 E148                       		lsl.w	#8,d0
0000E208 1019                       		move.b	(a1)+,d0
0000E20A D04B                       		add.w	a3,d0
0000E20C 0A40 1000                  		eori.w	#$1000,d0
0000E210 34C0                       		move.w	d0,(a2)+
0000E212 1019                       		move.b	(a1)+,d0
0000E214 4880                       		ext.w	d0
0000E216 D043                       		add.w	d3,d0
0000E218 0240 01FF                  		andi.w	#$1FF,d0
0000E21C 6600                       		bne.s	loc_D822
0000E21E 5240                       		addq.w	#1,d0
0000E220                            
0000E220                            loc_D822:
0000E220 34C0                       		move.w	d0,(a2)+
0000E222 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E226                            
0000E226                            locret_D828:
0000E226 4E75                       		rts	
0000E228                            ; ===========================================================================
0000E228                            
0000E228                            loc_D82A:
0000E228 0C05 0050                  		cmpi.b	#$50,d5
0000E22C 6700                       		beq.s	locret_D87C
0000E22E 1019                       		move.b	(a1)+,d0
0000E230 1811                       		move.b	(a1),d4
0000E232 4880                       		ext.w	d0
0000E234 4440                       		neg.w	d0
0000E236 E70C                       		lsl.b	#3,d4
0000E238 0244 0018                  		andi.w	#$18,d4
0000E23C 5044                       		addq.w	#8,d4
0000E23E 9044                       		sub.w	d4,d0
0000E240 D042                       		add.w	d2,d0
0000E242 34C0                       		move.w	d0,(a2)+
0000E244 1819                       		move.b	(a1)+,d4
0000E246 14C4                       		move.b	d4,(a2)+
0000E248 5205                       		addq.b	#1,d5
0000E24A 14C5                       		move.b	d5,(a2)+
0000E24C 1019                       		move.b	(a1)+,d0
0000E24E E148                       		lsl.w	#8,d0
0000E250 1019                       		move.b	(a1)+,d0
0000E252 D04B                       		add.w	a3,d0
0000E254 0A40 1800                  		eori.w	#$1800,d0
0000E258 34C0                       		move.w	d0,(a2)+
0000E25A 1019                       		move.b	(a1)+,d0
0000E25C 4880                       		ext.w	d0
0000E25E 4440                       		neg.w	d0
0000E260 D804                       		add.b	d4,d4
0000E262 0244 0018                  		andi.w	#$18,d4
0000E266 5044                       		addq.w	#8,d4
0000E268 9044                       		sub.w	d4,d0
0000E26A D043                       		add.w	d3,d0
0000E26C 0240 01FF                  		andi.w	#$1FF,d0
0000E270 6600                       		bne.s	loc_D876
0000E272 5240                       		addq.w	#1,d0
0000E274                            
0000E274                            loc_D876:
0000E274 34C0                       		move.w	d0,(a2)+
0000E276 51C9 FFB0                  		dbf	d1,loc_D82A
0000E27A                            
0000E27A                            locret_D87C:
0000E27A 4E75                       		rts	
0000E27C                            ; ---------------------------------------------------------------------------
0000E27C                            ; Subroutine to	check if an object is on the screen
0000E27C                            ; ---------------------------------------------------------------------------
0000E27C                            
0000E27C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E27C                            
0000E27C                            
0000E27C                            ChkObjOnScreen:
0000E27C 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E280 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E284 6B00                       		bmi.s	NotOnScreen
0000E286 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E28A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E28C                            
0000E28C 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E290 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E294 6B00                       		bmi.s	NotOnScreen
0000E296 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E29A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E29C                            
0000E29C 7000                       		moveq	#0,d0		; set flag to 0
0000E29E 4E75                       		rts	
0000E2A0                            ; ===========================================================================
0000E2A0                            
0000E2A0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E2A0 7001                       		moveq	#1,d0		; set flag to 1
0000E2A2 4E75                       		rts	
0000E2A4                            ; End of function ChkObjOnScreen
0000E2A4                            
0000E2A4                            
0000E2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2A4                            
0000E2A4                            
0000E2A4                            ChkObjOnScreen2:
0000E2A4 7200                       		moveq	#0,d1
0000E2A6 1228 0019                  		move.b	$19(a0),d1
0000E2AA 3028 0008                  		move.w	8(a0),d0
0000E2AE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E2B2 D041                       		add.w	d1,d0
0000E2B4 6B00                       		bmi.s	NotOnScreen2
0000E2B6 D241                       		add.w	d1,d1
0000E2B8 9041                       		sub.w	d1,d0
0000E2BA 0C40 0140                  		cmpi.w	#320,d0
0000E2BE 6C00                       		bge.s	NotOnScreen2
0000E2C0                            
0000E2C0 3228 000C                  		move.w	$C(a0),d1
0000E2C4 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E2C8 6B00                       		bmi.s	NotOnScreen2
0000E2CA 0C41 00E0                  		cmpi.w	#224,d1
0000E2CE 6C00                       		bge.s	NotOnScreen2
0000E2D0                            
0000E2D0 7000                       		moveq	#0,d0
0000E2D2 4E75                       		rts	
0000E2D4                            ; ===========================================================================
0000E2D4                            
0000E2D4                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E2D4 7001                       		moveq	#1,d0
0000E2D6 4E75                       		rts	
0000E2D8                            ; End of function ChkObjOnScreen2
0000E2D8                            
0000E2D8                            ; ---------------------------------------------------------------------------
0000E2D8                            ; Subroutine to	load a level's objects
0000E2D8                            ; ---------------------------------------------------------------------------
0000E2D8                            
0000E2D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2D8                            
0000E2D8                            
0000E2D8                            ObjPosLoad:				; XREF: Level; et al
0000E2D8 7000                       		moveq	#0,d0
0000E2DA 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E2DE 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E2E2 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E2E6                            ; End of function ObjPosLoad
0000E2E6                            
0000E2E6                            ; ===========================================================================
0000E2E6 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E2E8 0000                       		dc.w OPL_Next-OPL_Index
0000E2EA                            ; ===========================================================================
0000E2EA                            
0000E2EA                            OPL_Main:				; XREF: OPL_Index
0000E2EA 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E2EE 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E2F2 ED08                       		lsl.b	#6,d0
0000E2F4 E848                       		lsr.w	#4,d0
0000E2F6 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E2FC 2248                       		movea.l	a0,a1
0000E2FE D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E302 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E306 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E30A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E30E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E312 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E316 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E31A 34FC 0101                  		move.w	#$101,(a2)+
0000E31E 303C 005E                  		move.w	#$5E,d0
0000E322                            
0000E322                            OPL_ClrList:
0000E322 429A                       		clr.l	(a2)+
0000E324 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E328                            
0000E328 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E32C 7400                       		moveq	#0,d2
0000E32E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E332 0446 0080                  		subi.w	#$80,d6
0000E336 6400                       		bcc.s	loc_D93C
0000E338 7C00                       		moveq	#0,d6
0000E33A                            
0000E33A                            loc_D93C:
0000E33A 0246 FF80                  		andi.w	#$FF80,d6
0000E33E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E342                            
0000E342                            loc_D944:
0000E342 BC50                       		cmp.w	(a0),d6
0000E344 6300                       		bls.s	loc_D956
0000E346 4A28 0004                  		tst.b	4(a0)
0000E34A 6A00                       		bpl.s	loc_D952
0000E34C 1412                       		move.b	(a2),d2
0000E34E 5212                       		addq.b	#1,(a2)
0000E350                            
0000E350                            loc_D952:
0000E350 5C48                       		addq.w	#6,a0
0000E352 60EE                       		bra.s	loc_D944
0000E354                            ; ===========================================================================
0000E354                            
0000E354                            loc_D956:
0000E354 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E358 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E35C 0446 0080                  		subi.w	#$80,d6
0000E360 6500                       		bcs.s	loc_D976
0000E362                            
0000E362                            loc_D964:
0000E362 BC50                       		cmp.w	(a0),d6
0000E364 6300                       		bls.s	loc_D976
0000E366 4A28 0004                  		tst.b	4(a0)
0000E36A 6A00                       		bpl.s	loc_D972
0000E36C 522A 0001                  		addq.b	#1,1(a2)
0000E370                            
0000E370                            loc_D972:
0000E370 5C48                       		addq.w	#6,a0
0000E372 60EE                       		bra.s	loc_D964
0000E374                            ; ===========================================================================
0000E374                            
0000E374                            loc_D976:
0000E374 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E378 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E37E                            
0000E37E                            OPL_Next:				; XREF: OPL_Index
0000E37E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E382 7400                       		moveq	#0,d2
0000E384 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E388 0246 FF80                  		andi.w	#$FF80,d6
0000E38C BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E390 6700 0000                  		beq.w	locret_DA3A
0000E394 6C00                       		bge.s	loc_D9F6
0000E396 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E39A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E39E 0446 0080                  		subi.w	#$80,d6
0000E3A2 6500                       		bcs.s	loc_D9D2
0000E3A4                            
0000E3A4                            loc_D9A6:
0000E3A4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3A8 6C00                       		bge.s	loc_D9D2
0000E3AA 5D48                       		subq.w	#6,a0
0000E3AC 4A28 0004                  		tst.b	4(a0)
0000E3B0 6A00                       		bpl.s	loc_D9BC
0000E3B2 532A 0001                  		subq.b	#1,1(a2)
0000E3B6 142A 0001                  		move.b	1(a2),d2
0000E3BA                            
0000E3BA                            loc_D9BC:
0000E3BA 6100 0000                  		bsr.w	loc_DA3C
0000E3BE 6600                       		bne.s	loc_D9C6
0000E3C0 5D48                       		subq.w	#6,a0
0000E3C2 60E0                       		bra.s	loc_D9A6
0000E3C4                            ; ===========================================================================
0000E3C4                            
0000E3C4                            loc_D9C6:
0000E3C4 4A28 0004                  		tst.b	4(a0)
0000E3C8 6A00                       		bpl.s	loc_D9D0
0000E3CA 522A 0001                  		addq.b	#1,1(a2)
0000E3CE                            
0000E3CE                            loc_D9D0:
0000E3CE 5C48                       		addq.w	#6,a0
0000E3D0                            
0000E3D0                            loc_D9D2:
0000E3D0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3D4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3D8 0646 0300                  		addi.w	#$300,d6
0000E3DC                            
0000E3DC                            loc_D9DE:
0000E3DC BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3E0 6E00                       		bgt.s	loc_D9F0
0000E3E2 4A28 FFFE                  		tst.b	-2(a0)
0000E3E6 6A00                       		bpl.s	loc_D9EC
0000E3E8 5312                       		subq.b	#1,(a2)
0000E3EA                            
0000E3EA                            loc_D9EC:
0000E3EA 5D48                       		subq.w	#6,a0
0000E3EC 60EE                       		bra.s	loc_D9DE
0000E3EE                            ; ===========================================================================
0000E3EE                            
0000E3EE                            loc_D9F0:
0000E3EE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3F2 4E75                       		rts	
0000E3F4                            ; ===========================================================================
0000E3F4                            
0000E3F4                            loc_D9F6:
0000E3F4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3F8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3FC 0646 0280                  		addi.w	#$280,d6
0000E400                            
0000E400                            loc_DA02:
0000E400 BC50                       		cmp.w	(a0),d6
0000E402 6300                       		bls.s	loc_DA16
0000E404 4A28 0004                  		tst.b	4(a0)
0000E408 6A00                       		bpl.s	loc_DA10
0000E40A 1412                       		move.b	(a2),d2
0000E40C 5212                       		addq.b	#1,(a2)
0000E40E                            
0000E40E                            loc_DA10:
0000E40E 6100 0000                  		bsr.w	loc_DA3C
0000E412 67EC                       		beq.s	loc_DA02
0000E414                            
0000E414                            loc_DA16:
0000E414 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E418 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E41C 0446 0300                  		subi.w	#$300,d6
0000E420 6500                       		bcs.s	loc_DA36
0000E422                            
0000E422                            loc_DA24:
0000E422 BC50                       		cmp.w	(a0),d6
0000E424 6300                       		bls.s	loc_DA36
0000E426 4A28 0004                  		tst.b	4(a0)
0000E42A 6A00                       		bpl.s	loc_DA32
0000E42C 522A 0001                  		addq.b	#1,1(a2)
0000E430                            
0000E430                            loc_DA32:
0000E430 5C48                       		addq.w	#6,a0
0000E432 60EE                       		bra.s	loc_DA24
0000E434                            ; ===========================================================================
0000E434                            
0000E434                            loc_DA36:
0000E434 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E438                            
0000E438                            locret_DA3A:
0000E438 4E75                       		rts	
0000E43A                            ; ===========================================================================
0000E43A                            
0000E43A                            loc_DA3C:
0000E43A 4A28 0004                  		tst.b	4(a0)
0000E43E 6A00                       		bpl.s	OPL_MakeItem
0000E440 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E446 6700                       		beq.s	OPL_MakeItem
0000E448 5C48                       		addq.w	#6,a0
0000E44A 7000                       		moveq	#0,d0
0000E44C 4E75                       		rts	
0000E44E                            ; ===========================================================================
0000E44E                            
0000E44E                            OPL_MakeItem:
0000E44E 6100 0000                  		bsr.w	SingleObjLoad
0000E452 6600                       		bne.s	locret_DA8A
0000E454 3358 0008                  		move.w	(a0)+,8(a1)
0000E458 3018                       		move.w	(a0)+,d0
0000E45A 3200                       		move.w	d0,d1
0000E45C 0240 0FFF                  		andi.w	#$FFF,d0
0000E460 3340 000C                  		move.w	d0,$C(a1)
0000E464 E559                       		rol.w	#2,d1
0000E466 0201 0003                  		andi.b	#3,d1
0000E46A 1341 0001                  		move.b	d1,1(a1)
0000E46E 1341 0022                  		move.b	d1,$22(a1)
0000E472 1018                       		move.b	(a0)+,d0
0000E474 6A00                       		bpl.s	loc_DA80
0000E476 0200 007F                  		andi.b	#$7F,d0
0000E47A 1342 0023                  		move.b	d2,$23(a1)
0000E47E                            
0000E47E                            loc_DA80:
0000E47E 1280                       		move.b	d0,0(a1)
0000E480 1358 0028                  		move.b	(a0)+,$28(a1)
0000E484 7000                       		moveq	#0,d0
0000E486                            
0000E486                            locret_DA8A:
0000E486 4E75                       		rts	
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            ; Single object	loading	subroutine
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            
0000E488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E488                            
0000E488                            
0000E488                            SingleObjLoad:
0000E488 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E48C 303C 005F                  		move.w	#$5F,d0
0000E490                            
0000E490                            loc_DA94:
0000E490 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E492 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E494 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E498 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E49C                            
0000E49C                            locret_DAA0:
0000E49C 4E75                       		rts	
0000E49E                            ; End of function SingleObjLoad
0000E49E                            
0000E49E                            
0000E49E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E49E                            
0000E49E                            
0000E49E                            SingleObjLoad2:
0000E49E 2248                       		movea.l	a0,a1
0000E4A0 303C F000                  		move.w	#-$1000,d0
0000E4A4 9048                       		sub.w	a0,d0
0000E4A6 EC48                       		lsr.w	#6,d0
0000E4A8 5340                       		subq.w	#1,d0
0000E4AA 6500                       		bcs.s	locret_DABC
0000E4AC                            
0000E4AC                            loc_DAB0:
0000E4AC 4A11                       		tst.b	(a1)
0000E4AE 6700                       		beq.s	locret_DABC
0000E4B0 43E9 0040                  		lea	$40(a1),a1
0000E4B4 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E4B8                            
0000E4B8                            locret_DABC:
0000E4B8 4E75                       		rts	
0000E4BA                            ; End of function SingleObjLoad2
0000E4BA                            
0000E4BA                            ; ===========================================================================
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA                            ; Object 41 - springs
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA                            
0000E4BA                            Obj41:					; XREF: Obj_Index
0000E4BA 7000                       		moveq	#0,d0
0000E4BC 1028 0024                  		move.b	$24(a0),d0
0000E4C0 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E4C4 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E4C8 6100 FB38                  		bsr.w	DisplaySprite
0000E4CC 3028 0008                  		move.w	8(a0),d0
0000E4D0 0240 FF80                  		andi.w	#$FF80,d0
0000E4D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4D8 0441 0080                  		subi.w	#$80,d1
0000E4DC 0241 FF80                  		andi.w	#$FF80,d1
0000E4E0 9041                       		sub.w	d1,d0
0000E4E2 0C40 0280                  		cmpi.w	#$280,d0
0000E4E6 6200 FB56                  		bhi.w	DeleteObject
0000E4EA 4E75                       		rts	
0000E4EC                            ; ===========================================================================
0000E4EC 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E4EE 0000                       		dc.w Obj41_Up-Obj41_Index
0000E4F0 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E4F2 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E4F4 0000                       		dc.w Obj41_LR-Obj41_Index
0000E4F6 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E4F8 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E4FA 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E4FC 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E4FE 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E500                            
0000E500 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E502 F600                       		dc.w -$A00		; power	of yellow spring
0000E504                            ; ===========================================================================
0000E504                            
0000E504                            Obj41_Main:				; XREF: Obj41_Index
0000E504 5428 0024                  		addq.b	#2,$24(a0)
0000E508 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E510 317C 0523 0002             		move.w	#$523,2(a0)
0000E516 0028 0004 0001             		ori.b	#4,1(a0)
0000E51C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E522 117C 0004 0018             		move.b	#4,$18(a0)
0000E528 1028 0028                  		move.b	$28(a0),d0
0000E52C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E530 6700                       		beq.s	loc_DB54	; if not, branch
0000E532 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E538 117C 0001 001C             		move.b	#1,$1C(a0)
0000E53E 117C 0003 001A             		move.b	#3,$1A(a0)
0000E544 317C 0533 0002             		move.w	#$533,2(a0)
0000E54A 117C 0008 0019             		move.b	#8,$19(a0)
0000E550                            
0000E550                            loc_DB54:
0000E550 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E554 6700                       		beq.s	loc_DB66	; if not, branch
0000E556 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E55C 08E8 0001 0022             		bset	#1,$22(a0)
0000E562                            
0000E562                            loc_DB66:
0000E562 0800 0001                  		btst	#1,d0
0000E566 6700                       		beq.s	loc_DB72
0000E568 08E8 0005 0002             		bset	#5,2(a0)
0000E56E                            
0000E56E                            loc_DB72:
0000E56E 0240 000F                  		andi.w	#$F,d0
0000E572 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E578 4E75                       		rts	
0000E57A                            ; ===========================================================================
0000E57A                            
0000E57A                            Obj41_Up:				; XREF: Obj41_Index
0000E57A 323C 001B                  		move.w	#$1B,d1
0000E57E 343C 0008                  		move.w	#8,d2
0000E582 363C 0010                  		move.w	#$10,d3
0000E586 3828 0008                  		move.w	8(a0),d4
0000E58A 6100 0000                  		bsr.w	SolidObject
0000E58E 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E592 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E594 4E75                       		rts	
0000E596                            ; ===========================================================================
0000E596                            
0000E596                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E596 5428 0024                  		addq.b	#2,$24(a0)
0000E59A 5069 000C                  		addq.w	#8,$C(a1)
0000E59E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E5A4 08E9 0001 0022             		bset	#1,$22(a1)
0000E5AA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E5B0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E5B6 137C 0002 0024             		move.b	#2,$24(a1)
0000E5BC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E5C2 4228 0025                  		clr.b	$25(a0)
0000E5C6 303C 00CC                  		move.w	#$CC,d0
0000E5CA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E5D0                            
0000E5D0                            Obj41_AniUp:				; XREF: Obj41_Index
0000E5D0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E5D6 6000 CA80                  		bra.w	AnimateSprite
0000E5DA                            ; ===========================================================================
0000E5DA                            
0000E5DA                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E5DA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E5E0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E5E4 4E75                       		rts	
0000E5E6                            ; ===========================================================================
0000E5E6                            
0000E5E6                            Obj41_LR:				; XREF: Obj41_Index
0000E5E6 323C 0013                  		move.w	#$13,d1
0000E5EA 343C 000E                  		move.w	#$E,d2
0000E5EE 363C 000F                  		move.w	#$F,d3
0000E5F2 3828 0008                  		move.w	8(a0),d4
0000E5F6 6100 0000                  		bsr.w	SolidObject
0000E5FA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E600 6600                       		bne.s	loc_DC0C
0000E602 117C 0008 0024             		move.b	#8,$24(a0)
0000E608                            
0000E608                            loc_DC0C:
0000E608 0828 0005 0022             		btst	#5,$22(a0)
0000E60E 6600                       		bne.s	Obj41_BounceLR
0000E610 4E75                       		rts	
0000E612                            ; ===========================================================================
0000E612                            
0000E612                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E612 5428 0024                  		addq.b	#2,$24(a0)
0000E616 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E61C 5069 0008                  		addq.w	#8,8(a1)
0000E620 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E626 6600                       		bne.s	loc_DC36	; if yes, branch
0000E628 0469 0010 0008             		subi.w	#$10,8(a1)
0000E62E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E632                            
0000E632                            loc_DC36:
0000E632 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E638 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E63E 0869 0000 0022             		bchg	#0,$22(a1)
0000E644 0829 0002 0022             		btst	#2,$22(a1)
0000E64A 6600                       		bne.s	loc_DC56
0000E64C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E652                            
0000E652                            loc_DC56:
0000E652 08A8 0005 0022             		bclr	#5,$22(a0)
0000E658 08A9 0005 0022             		bclr	#5,$22(a1)
0000E65E 303C 00CC                  		move.w	#$CC,d0
0000E662 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E668                            
0000E668                            Obj41_AniLR:				; XREF: Obj41_Index
0000E668 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E66E 6000 C9E8                  		bra.w	AnimateSprite
0000E672                            ; ===========================================================================
0000E672                            
0000E672                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E672 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E678 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E67C 4E75                       		rts	
0000E67E                            ; ===========================================================================
0000E67E                            
0000E67E                            Obj41_Dwn:				; XREF: Obj41_Index
0000E67E 323C 001B                  		move.w	#$1B,d1
0000E682 343C 0008                  		move.w	#8,d2
0000E686 363C 0010                  		move.w	#$10,d3
0000E68A 3828 0008                  		move.w	8(a0),d4
0000E68E 6100 0000                  		bsr.w	SolidObject
0000E692 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E698 6600                       		bne.s	loc_DCA4
0000E69A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E6A0                            
0000E6A0                            loc_DCA4:
0000E6A0 4A28 0025                  		tst.b	$25(a0)
0000E6A4 6600                       		bne.s	locret_DCAE
0000E6A6 4A44                       		tst.w	d4
0000E6A8 6B00                       		bmi.s	Obj41_BounceDwn
0000E6AA                            
0000E6AA                            locret_DCAE:
0000E6AA 4E75                       		rts	
0000E6AC                            ; ===========================================================================
0000E6AC                            
0000E6AC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6AC 5428 0024                  		addq.b	#2,$24(a0)
0000E6B0 5169 000C                  		subq.w	#8,$C(a1)
0000E6B4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E6BA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E6BE 08E9 0001 0022             		bset	#1,$22(a1)
0000E6C4 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6CA 137C 0002 0024             		move.b	#2,$24(a1)
0000E6D0 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6D6 4228 0025                  		clr.b	$25(a0)
0000E6DA 303C 00CC                  		move.w	#$CC,d0
0000E6DE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6E4                            
0000E6E4                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E6E4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6EA 6000 C96C                  		bra.w	AnimateSprite
0000E6EE                            ; ===========================================================================
0000E6EE                            
0000E6EE                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E6EE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6F4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E6F8 4E75                       		rts	
0000E6FA                            ; ===========================================================================
0000E6FA                            Ani_obj41:
0000E6FA                            	include "_anim\obj41.asm"
0000E6FA                            ; ---------------------------------------------------------------------------
0000E6FA                            ; Animation script - springs
0000E6FA                            ; ---------------------------------------------------------------------------
0000E6FA 0000                       		dc.w byte_DD02-Ani_obj41
0000E6FC 0000                       		dc.w byte_DD0E-Ani_obj41
0000E6FE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E70A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E716                            		even
0000E716                            		even
0000E716                            
0000E716                            ; ---------------------------------------------------------------------------
0000E716                            ; Sprite mappings - springs
0000E716                            ; ---------------------------------------------------------------------------
0000E716                            Map_obj41:
0000E716                            	include "_maps\obj41.asm"
0000E716                            ; ---------------------------------------------------------------------------
0000E716                            ; Sprite mappings - springs
0000E716                            ; ---------------------------------------------------------------------------
0000E716 0000                       		dc.w byte_DD26-Map_obj41
0000E718 0000                       		dc.w byte_DD31-Map_obj41
0000E71A 0000                       		dc.w byte_DD37-Map_obj41
0000E71C 0000                       		dc.w byte_DD47-Map_obj41
0000E71E 0000                       		dc.w byte_DD4D-Map_obj41
0000E720 0000                       		dc.w byte_DD53-Map_obj41
0000E722 02                         byte_DD26:	dc.b 2
0000E723 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E728 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E72D 01                         byte_DD31:	dc.b 1
0000E72E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E733 03                         byte_DD37:	dc.b 3
0000E734 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E739 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E73E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E743 01                         byte_DD47:	dc.b 1
0000E744 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E749 01                         byte_DD4D:	dc.b 1
0000E74A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E74F 04                         byte_DD53:	dc.b 4
0000E750 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E755 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E75A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E75F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E764                            		even
0000E764                            		even
0000E764                            
0000E764                            ; ===========================================================================
0000E764                            ; ---------------------------------------------------------------------------
0000E764                            ; Object 42 - Newtron enemy (GHZ)
0000E764                            ; ---------------------------------------------------------------------------
0000E764                            
0000E764                            Obj42:					; XREF: Obj_Index
0000E764 7000                       		moveq	#0,d0
0000E766 1028 0024                  		move.b	$24(a0),d0
0000E76A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E76E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E772                            ; ===========================================================================
0000E772 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E774 0000                       		dc.w Obj42_Action-Obj42_Index
0000E776 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E778                            ; ===========================================================================
0000E778                            
0000E778                            Obj42_Main:				; XREF: Obj42_Index
0000E778 5428 0024                  		addq.b	#2,$24(a0)
0000E77C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E784 317C 049B 0002             		move.w	#$49B,2(a0)
0000E78A 117C 0004 0001             		move.b	#4,1(a0)
0000E790 117C 0004 0018             		move.b	#4,$18(a0)
0000E796 117C 0014 0019             		move.b	#$14,$19(a0)
0000E79C 117C 0010 0016             		move.b	#$10,$16(a0)
0000E7A2 117C 0008 0017             		move.b	#8,$17(a0)
0000E7A8                            
0000E7A8                            Obj42_Action:				; XREF: Obj42_Index
0000E7A8 7000                       		moveq	#0,d0
0000E7AA 1028 0025                  		move.b	$25(a0),d0
0000E7AE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E7B2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E7B6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E7BC 6100 C89A                  		bsr.w	AnimateSprite
0000E7C0 6000 0000                  		bra.w	MarkObjGone
0000E7C4                            ; ===========================================================================
0000E7C4 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E7C6 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E7C8 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E7CA 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E7CC 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E7CE 08E8 0000 0022             		bset	#0,$22(a0)
0000E7D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E7D8 9068 0008                  		sub.w	8(a0),d0
0000E7DC 6400                       		bcc.s	loc_DDEA
0000E7DE 4440                       		neg.w	d0
0000E7E0 08A8 0000 0022             		bclr	#0,$22(a0)
0000E7E6                            
0000E7E6                            loc_DDEA:
0000E7E6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E7EA 6400                       		bcc.s	locret_DE12	; if not, branch
0000E7EC 5428 0025                  		addq.b	#2,$25(a0)
0000E7F0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7F6 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E7FA 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E7FC 317C 249B 0002             		move.w	#$249B,2(a0)
0000E802 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E808 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E80E                            
0000E80E                            locret_DE12:
0000E80E 4E75                       		rts	
0000E810                            ; ===========================================================================
0000E810                            
0000E810                            Obj42_Type00:				; XREF: Obj42_Index2
0000E810 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E816 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E818 08E8 0000 0022             		bset	#0,$22(a0)
0000E81E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E822 9068 0008                  		sub.w	8(a0),d0
0000E826 6400                       		bcc.s	locret_DE32
0000E828 08A8 0000 0022             		bclr	#0,$22(a0)
0000E82E                            
0000E82E                            locret_DE32:
0000E82E 4E75                       		rts	
0000E830                            ; ===========================================================================
0000E830                            
0000E830                            Obj42_Fall:				; XREF: Obj42_Type00
0000E830 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E836 6600                       		bne.s	loc_DE42
0000E838 117C 000C 0020             		move.b	#$C,$20(a0)
0000E83E                            
0000E83E                            loc_DE42:
0000E83E 6100 F72A                  		bsr.w	ObjectFall
0000E842 6100 0000                  		bsr.w	ObjHitFloor
0000E846 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E848 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E84A D368 000C                  		add.w	d1,$C(a0)
0000E84E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E854 5428 0025                  		addq.b	#2,$25(a0)
0000E858 117C 0002 001C             		move.b	#2,$1C(a0)
0000E85E 0828 0005 0002             		btst	#5,2(a0)
0000E864 6700                       		beq.s	Obj42_Move
0000E866 5228 001C                  		addq.b	#1,$1C(a0)
0000E86A                            
0000E86A                            Obj42_Move:
0000E86A 117C 000D 0020             		move.b	#$D,$20(a0)
0000E870 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E876 0828 0000 0022             		btst	#0,$22(a0)
0000E87C 6600                       		bne.s	locret_DE86
0000E87E 4468 0010                  		neg.w	$10(a0)
0000E882                            
0000E882                            locret_DE86:
0000E882 4E75                       		rts	
0000E884                            ; ===========================================================================
0000E884                            
0000E884                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E884 6100 F756                  		bsr.w	SpeedToPos
0000E888 6100 0000                  		bsr.w	ObjHitFloor
0000E88C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E890 6D00                       		blt.s	loc_DEA2
0000E892 0C41 000C                  		cmpi.w	#$C,d1
0000E896 6C00                       		bge.s	loc_DEA2
0000E898 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E89C 4E75                       		rts	
0000E89E                            ; ===========================================================================
0000E89E                            
0000E89E                            loc_DEA2:
0000E89E 5428 0025                  		addq.b	#2,$25(a0)
0000E8A2 4E75                       		rts	
0000E8A4                            ; ===========================================================================
0000E8A4                            
0000E8A4                            Obj42_Speed:				; XREF: Obj42_Index2
0000E8A4 6100 F736                  		bsr.w	SpeedToPos
0000E8A8 4E75                       		rts	
0000E8AA                            ; ===========================================================================
0000E8AA                            
0000E8AA                            Obj42_Type01:				; XREF: Obj42_Index2
0000E8AA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E8B0 6600                       		bne.s	Obj42_FireMissile
0000E8B2 117C 000C 0020             		move.b	#$C,$20(a0)
0000E8B8                            
0000E8B8                            Obj42_FireMissile:
0000E8B8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E8BE 6600                       		bne.s	locret_DF14
0000E8C0 4A28 0032                  		tst.b	$32(a0)
0000E8C4 6600                       		bne.s	locret_DF14
0000E8C6 117C 0001 0032             		move.b	#1,$32(a0)
0000E8CC 6100 FBBA                  		bsr.w	SingleObjLoad
0000E8D0 6600                       		bne.s	locret_DF14
0000E8D2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E8D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8E2 5169 000C                  		subq.w	#8,$C(a1)
0000E8E6 337C 0200 0010             		move.w	#$200,$10(a1)
0000E8EC 303C 0014                  		move.w	#$14,d0
0000E8F0 0828 0000 0022             		btst	#0,$22(a0)
0000E8F6 6600                       		bne.s	loc_DF04
0000E8F8 4440                       		neg.w	d0
0000E8FA 4469 0010                  		neg.w	$10(a1)
0000E8FE                            
0000E8FE                            loc_DF04:
0000E8FE D169 0008                  		add.w	d0,8(a1)
0000E902 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E908 137C 0001 0028             		move.b	#1,$28(a1)
0000E90E                            
0000E90E                            locret_DF14:
0000E90E 4E75                       		rts	
0000E910                            ; ===========================================================================
0000E910                            
0000E910                            Obj42_Delete:				; XREF: Obj42_Index
0000E910 6000 F72C                  		bra.w	DeleteObject
0000E914                            ; ===========================================================================
0000E914                            Ani_obj42:
0000E914                            	include "_anim\obj42.asm"
0000E914                            ; ---------------------------------------------------------------------------
0000E914                            ; Animation script - Newtron enemy
0000E914                            ; ---------------------------------------------------------------------------
0000E914 0000                       		dc.w byte_DF24-Ani_obj42
0000E916 0000                       		dc.w byte_DF28-Ani_obj42
0000E918 0000                       		dc.w byte_DF30-Ani_obj42
0000E91A 0000                       		dc.w byte_DF34-Ani_obj42
0000E91C 0000                       		dc.w byte_DF38-Ani_obj42
0000E91E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E922 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E92A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E92E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E932 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E93C                            		even
0000E93C                            		even
0000E93C                            
0000E93C                            ; ---------------------------------------------------------------------------
0000E93C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E93C                            ; ---------------------------------------------------------------------------
0000E93C                            Map_obj42:
0000E93C                            	include "_maps\obj42.asm"
0000E93C                            ; ---------------------------------------------------------------------------
0000E93C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E93C                            ; ---------------------------------------------------------------------------
0000E93C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E940 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E944 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E948 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E94C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E950 0000                       		dc.w byte_DFF8-Map_obj42
0000E952 03                         byte_DF58:	dc.b 3
0000E953 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E958 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E95D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E962 03                         byte_DF68:	dc.b 3
0000E963 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E968 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E96D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E972 03                         byte_DF78:	dc.b 3
0000E973 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E978 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E97D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E982 04                         byte_DF88:	dc.b 4
0000E983 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E988 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E98D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E992 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E997 03                         byte_DF9D:	dc.b 3
0000E998 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E99D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E9A2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E9A7 02                         byte_DFAD:	dc.b 2
0000E9A8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9AD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9B2 03                         byte_DFB8:	dc.b 3
0000E9B3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9B8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9BD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E9C2 03                         byte_DFC8:	dc.b 3
0000E9C3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9C8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9CD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E9D2 03                         byte_DFD8:	dc.b 3
0000E9D3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9D8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9DD FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E9E2 03                         byte_DFE8:	dc.b 3
0000E9E3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9E8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9ED FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E9F2 00                         byte_DFF8:	dc.b 0
0000E9F4 00                         		even
0000E9F4 00                         		even
0000E9F4                            
0000E9F4                            ; ===========================================================================
0000E9F4                            ; ---------------------------------------------------------------------------
0000E9F4                            ; Object 43 - Roller enemy (SYZ)
0000E9F4                            ; ---------------------------------------------------------------------------
0000E9F4                            
0000E9F4                            Obj43:					; XREF: Obj_Index
0000E9F4 7000                       		moveq	#0,d0
0000E9F6 1028 0024                  		move.b	$24(a0),d0
0000E9FA 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E9FE 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EA02                            ; ===========================================================================
0000EA02 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EA04 0000                       		dc.w Obj43_Action-Obj43_Index
0000EA06                            ; ===========================================================================
0000EA06                            
0000EA06                            Obj43_Main:				; XREF: Obj43_Index
0000EA06 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA0C 117C 0008 0017             		move.b	#8,$17(a0)
0000EA12 6100 F556                  		bsr.w	ObjectFall
0000EA16 6100 0000                  		bsr.w	ObjHitFloor
0000EA1A 4A41                       		tst.w	d1
0000EA1C 6A00                       		bpl.s	locret_E052
0000EA1E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA22 317C 0000 0012             		move.w	#0,$12(a0)
0000EA28 5428 0024                  		addq.b	#2,$24(a0)
0000EA2C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA34 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA3A 117C 0004 0001             		move.b	#4,1(a0)
0000EA40 117C 0004 0018             		move.b	#4,$18(a0)
0000EA46 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA4C                            
0000EA4C                            locret_E052:
0000EA4C 4E75                       		rts	
0000EA4E                            ; ===========================================================================
0000EA4E                            
0000EA4E                            Obj43_Action:				; XREF: Obj43_Index
0000EA4E 7000                       		moveq	#0,d0
0000EA50 1028 0025                  		move.b	$25(a0),d0
0000EA54 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EA58 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EA5C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EA62 6100 C5F4                  		bsr.w	AnimateSprite
0000EA66 3028 0008                  		move.w	8(a0),d0
0000EA6A 0240 FF80                  		andi.w	#$FF80,d0
0000EA6E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA72 0441 0080                  		subi.w	#$80,d1
0000EA76 0241 FF80                  		andi.w	#$FF80,d1
0000EA7A 9041                       		sub.w	d1,d0
0000EA7C 0C40 0280                  		cmpi.w	#$280,d0
0000EA80 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EA84 6000 F57C                  		bra.w	DisplaySprite
0000EA88                            ; ===========================================================================
0000EA88                            
0000EA88                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EA88 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA8C 7000                       		moveq	#0,d0
0000EA8E 1028 0023                  		move.b	$23(a0),d0
0000EA92 6700                       		beq.s	Obj43_Delete
0000EA94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA9A                            
0000EA9A                            Obj43_Delete:
0000EA9A 6000 F5A2                  		bra.w	DeleteObject
0000EA9E                            ; ===========================================================================
0000EA9E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EAA0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EAA2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EAA4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EAA6                            ; ===========================================================================
0000EAA6                            
0000EAA6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EAA6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAAA 0440 0100                  		subi.w	#$100,d0
0000EAAE 6500                       		bcs.s	loc_E0D2
0000EAB0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAB4 6500                       		bcs.s	loc_E0D2
0000EAB6 5828 0025                  		addq.b	#4,$25(a0)
0000EABA 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAC0 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EAC6 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EACC                            
0000EACC                            loc_E0D2:
0000EACC 588F                       		addq.l	#4,sp
0000EACE 4E75                       		rts	
0000EAD0                            ; ===========================================================================
0000EAD0                            
0000EAD0                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EAD0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EAD6 6700                       		beq.s	loc_E0F8
0000EAD8 5368 0030                  		subq.w	#1,$30(a0)
0000EADC 6A00                       		bpl.s	locret_E0F6
0000EADE 117C 0001 001C             		move.b	#1,$1C(a0)
0000EAE4 317C 0700 0010             		move.w	#$700,$10(a0)
0000EAEA 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EAF0                            
0000EAF0                            locret_E0F6:
0000EAF0 4E75                       		rts	
0000EAF2                            ; ===========================================================================
0000EAF2                            
0000EAF2                            loc_E0F8:
0000EAF2 5428 0025                  		addq.b	#2,$25(a0)
0000EAF6 4E75                       		rts	
0000EAF8                            ; ===========================================================================
0000EAF8                            
0000EAF8                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EAF8 6100 0000                  		bsr.w	Obj43_Stop
0000EAFC 6100 F4DE                  		bsr.w	SpeedToPos
0000EB00 6100 0000                  		bsr.w	ObjHitFloor
0000EB04 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB08 6D00                       		blt.s	Obj43_Jump
0000EB0A 0C41 000C                  		cmpi.w	#$C,d1
0000EB0E 6C00                       		bge.s	Obj43_Jump
0000EB10 D368 000C                  		add.w	d1,$C(a0)
0000EB14 4E75                       		rts	
0000EB16                            ; ===========================================================================
0000EB16                            
0000EB16                            Obj43_Jump:
0000EB16 5428 0025                  		addq.b	#2,$25(a0)
0000EB1A 08E8 0000 0032             		bset	#0,$32(a0)
0000EB20 6700                       		beq.s	locret_E12E
0000EB22 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB28                            
0000EB28                            locret_E12E:
0000EB28 4E75                       		rts	
0000EB2A                            ; ===========================================================================
0000EB2A                            
0000EB2A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB2A 6100 F43E                  		bsr.w	ObjectFall
0000EB2E 4A68 0012                  		tst.w	$12(a0)
0000EB32 6B00                       		bmi.s	locret_E150
0000EB34 6100 0000                  		bsr.w	ObjHitFloor
0000EB38 4A41                       		tst.w	d1
0000EB3A 6A00                       		bpl.s	locret_E150
0000EB3C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB40 5528 0025                  		subq.b	#2,$25(a0)
0000EB44 317C 0000 0012             		move.w	#0,$12(a0)
0000EB4A                            
0000EB4A                            locret_E150:
0000EB4A 4E75                       		rts	
0000EB4C                            
0000EB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB4C                            
0000EB4C                            
0000EB4C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB4C 4A28 0032                  		tst.b	$32(a0)
0000EB50 6B00                       		bmi.s	locret_E188
0000EB52 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB56 0440 0030                  		subi.w	#$30,d0
0000EB5A 9068 0008                  		sub.w	8(a0),d0
0000EB5E 6400                       		bcc.s	locret_E188
0000EB60 117C 0000 001C             		move.b	#0,$1C(a0)
0000EB66 117C 000E 0020             		move.b	#$E,$20(a0)
0000EB6C 4268 0010                  		clr.w	$10(a0)
0000EB70 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EB76 117C 0002 0025             		move.b	#2,$25(a0)
0000EB7C 08E8 0007 0032             		bset	#7,$32(a0)
0000EB82                            
0000EB82                            locret_E188:
0000EB82 4E75                       		rts	
0000EB84                            ; End of function Obj43_Stop
0000EB84                            
0000EB84                            ; ===========================================================================
0000EB84                            Ani_obj43:
0000EB84                            	include "_anim\obj43.asm"
0000EB84                            ; ---------------------------------------------------------------------------
0000EB84                            ; Animation script - Roller enemy
0000EB84                            ; ---------------------------------------------------------------------------
0000EB84 0000                       		dc.w byte_E190-Ani_obj43
0000EB86 0000                       		dc.w byte_E196-Ani_obj43
0000EB88 0000                       		dc.w byte_E19C-Ani_obj43
0000EB8A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EB90 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EB96 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EB9C 00                         		even
0000EB9C 00                         		even
0000EB9C                            
0000EB9C                            ; ---------------------------------------------------------------------------
0000EB9C                            ; Sprite mappings - Roller enemy (SYZ)
0000EB9C                            ; ---------------------------------------------------------------------------
0000EB9C                            Map_obj43:
0000EB9C                            	include "_maps\obj43.asm"
0000EB9C                            Map_61da:
0000EB9C 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EB9E 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EBA0 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EBA2 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EBA4 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EBA6 02                         Map_61da_A: 	dc.b $2
0000EBA7 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBAC F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EBB1 02                         Map_61da_15: 	dc.b $2
0000EBB2 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EBB7 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EBBC 01                         Map_61da_20: 	dc.b $1
0000EBBD F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EBC2 01                         Map_61da_26: 	dc.b $1
0000EBC3 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EBC8 01                         Map_61da_2C: 	dc.b $1
0000EBC9 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EBCE                            	even
0000EBCE                            	even
0000EBCE                            
0000EBCE                            ; ===========================================================================
0000EBCE                            ; ---------------------------------------------------------------------------
0000EBCE                            ; Object 44 - walls (GHZ)
0000EBCE                            ; ---------------------------------------------------------------------------
0000EBCE                            
0000EBCE                            Obj44:					; XREF: Obj_Index
0000EBCE 7000                       		moveq	#0,d0
0000EBD0 1028 0024                  		move.b	$24(a0),d0
0000EBD4 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EBD8 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EBDC                            ; ===========================================================================
0000EBDC 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EBDE 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EBE0 0000                       		dc.w Obj44_Display-Obj44_Index
0000EBE2                            ; ===========================================================================
0000EBE2                            
0000EBE2                            Obj44_Main:				; XREF: Obj44_Index
0000EBE2 5428 0024                  		addq.b	#2,$24(a0)
0000EBE6 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EBEE 317C 434C 0002             		move.w	#$434C,2(a0)
0000EBF4 0028 0004 0001             		ori.b	#4,1(a0)
0000EBFA 117C 0008 0019             		move.b	#8,$19(a0)
0000EC00 117C 0006 0018             		move.b	#6,$18(a0)
0000EC06 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC0C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC12 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC14 5428 0024                  		addq.b	#2,$24(a0)
0000EC18 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC1A                            ; ===========================================================================
0000EC1A                            
0000EC1A                            Obj44_Solid:				; XREF: Obj44_Index
0000EC1A 323C 0013                  		move.w	#$13,d1
0000EC1E 343C 0028                  		move.w	#$28,d2
0000EC22 6100 A68C                  		bsr.w	Obj44_SolidWall
0000EC26                            
0000EC26                            Obj44_Display:				; XREF: Obj44_Index
0000EC26 6100 F3DA                  		bsr.w	DisplaySprite
0000EC2A 3028 0008                  		move.w	8(a0),d0
0000EC2E 0240 FF80                  		andi.w	#$FF80,d0
0000EC32 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC36 0441 0080                  		subi.w	#$80,d1
0000EC3A 0241 FF80                  		andi.w	#$FF80,d1
0000EC3E 9041                       		sub.w	d1,d0
0000EC40 0C40 0280                  		cmpi.w	#$280,d0
0000EC44 6200 F3F8                  		bhi.w	DeleteObject
0000EC48 4E75                       		rts	
0000EC4A                            ; ===========================================================================
0000EC4A                            ; ---------------------------------------------------------------------------
0000EC4A                            ; Sprite mappings - walls (GHZ)
0000EC4A                            ; ---------------------------------------------------------------------------
0000EC4A                            Map_obj44:
0000EC4A                            	include "_maps\obj44.asm"
0000EC4A                            ; ---------------------------------------------------------------------------
0000EC4A                            ; Sprite mappings - walls (GHZ)
0000EC4A                            ; ---------------------------------------------------------------------------
0000EC4A 0000                       		dc.w byte_E256-Map_obj44
0000EC4C 0000                       		dc.w byte_E26B-Map_obj44
0000EC4E 0000                       		dc.w byte_E280-Map_obj44
0000EC50 04                         byte_E256:	dc.b 4
0000EC51 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EC56 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC5B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC60 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC65 04                         byte_E26B:	dc.b 4
0000EC66 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EC6B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC70 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC75 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC7A 04                         byte_E280:	dc.b 4
0000EC7B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EC80 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EC85 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EC8A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EC90 00                         		even
0000EC90 00                         		even
0000EC90                            
0000EC90                            ; ===========================================================================
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            
0000EC90                            Obj13:					; XREF: Obj_Index
0000EC90 7000                       		moveq	#0,d0
0000EC92 1028 0024                  		move.b	$24(a0),d0
0000EC96 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EC9A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EC9E 6000 0000                  		bra.w	Obj14_ChkDel
0000ECA2                            ; ===========================================================================
0000ECA2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ECA4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6                            ;
0000ECA6                            ; Lava ball production rates
0000ECA6                            ;
0000ECA6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECAC                            ; ===========================================================================
0000ECAC                            
0000ECAC                            Obj13_Main:				; XREF: Obj13_Index
0000ECAC 5428 0024                  		addq.b	#2,$24(a0)
0000ECB0 1028 0028                  		move.b	$28(a0),d0
0000ECB4 E848                       		lsr.w	#4,d0
0000ECB6 0240 000F                  		andi.w	#$F,d0
0000ECBA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ECC0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ECC6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ECCC                            
0000ECCC                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ECCC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ECD0 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ECD2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ECD8 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ECDC 6600                       		bne.s	locret_E302
0000ECDE 6100 F7A8                  		bsr.w	SingleObjLoad
0000ECE2 6600                       		bne.s	locret_E302
0000ECE4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ECE8 3368 0008 0008             		move.w	8(a0),8(a1)
0000ECEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ECF4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ECFA                            
0000ECFA                            locret_E302:
0000ECFA 4E75                       		rts	
0000ECFC                            ; ===========================================================================
0000ECFC                            ; ---------------------------------------------------------------------------
0000ECFC                            ; Object 14 - lava balls (MZ, SLZ)
0000ECFC                            ; ---------------------------------------------------------------------------
0000ECFC                            
0000ECFC                            Obj14:					; XREF: Obj_Index
0000ECFC 7000                       		moveq	#0,d0
0000ECFE 1028 0024                  		move.b	$24(a0),d0
0000ED02 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ED06 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ED0A 6000 F2F6                  		bra.w	DisplaySprite
0000ED0E                            ; ===========================================================================
0000ED0E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED10 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED12 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED14                            
0000ED14 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED1E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED26                            ; ===========================================================================
0000ED26                            
0000ED26                            Obj14_Main:				; XREF: Obj14_Index
0000ED26 5428 0024                  		addq.b	#2,$24(a0)
0000ED2A 117C 0008 0016             		move.b	#8,$16(a0)
0000ED30 117C 0008 0017             		move.b	#8,$17(a0)
0000ED36 217C 0000 BC56 0004        		move.l	#Map_obj14,4(a0)
0000ED3E 317C 0345 0002             		move.w	#$345,2(a0)
0000ED44 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED4A 6600                       		bne.s	loc_E35A
0000ED4C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED52                            
0000ED52                            loc_E35A:
0000ED52 117C 0004 0001             		move.b	#4,1(a0)
0000ED58 117C 0003 0018             		move.b	#3,$18(a0)
0000ED5E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000ED64 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED6A 4A28 0029                  		tst.b	$29(a0)
0000ED6E 6700                       		beq.s	Obj14_SetSpeed
0000ED70 5428 0018                  		addq.b	#2,$18(a0)
0000ED74                            
0000ED74                            Obj14_SetSpeed:
0000ED74 7000                       		moveq	#0,d0
0000ED76 1028 0028                  		move.b	$28(a0),d0
0000ED7A D040                       		add.w	d0,d0
0000ED7C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000ED82 117C 0008 0019             		move.b	#8,$19(a0)
0000ED88 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000ED8E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000ED90 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED96 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000ED9C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EDA2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EDA8                            
0000EDA8                            Obj14_PlaySnd:
0000EDA8 303C 00AE                  		move.w	#$AE,d0
0000EDAC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EDB2                            
0000EDB2                            Obj14_Action:				; XREF: Obj14_Index
0000EDB2 7000                       		moveq	#0,d0
0000EDB4 1028 0028                  		move.b	$28(a0),d0
0000EDB8 D040                       		add.w	d0,d0
0000EDBA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EDBE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EDC2 6100 F218                  		bsr.w	SpeedToPos
0000EDC6 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EDCC 6100 C28A                  		bsr.w	AnimateSprite
0000EDD0                            
0000EDD0                            Obj14_ChkDel:				; XREF: Obj13
0000EDD0 3028 0008                  		move.w	8(a0),d0
0000EDD4 0240 FF80                  		andi.w	#$FF80,d0
0000EDD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDDC 0441 0080                  		subi.w	#$80,d1
0000EDE0 0241 FF80                  		andi.w	#$FF80,d1
0000EDE4 9041                       		sub.w	d1,d0
0000EDE6 0C40 0280                  		cmpi.w	#$280,d0
0000EDEA 6200 F252                  		bhi.w	DeleteObject
0000EDEE 4E75                       		rts	
0000EDF0                            ; ===========================================================================
0000EDF0 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDF4 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDF8 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EDFC 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EE00 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EE02                            ; ===========================================================================
0000EE02                            ; lavaball types 00-03 fly up and fall back down
0000EE02                            
0000EE02                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EE02 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EE08 3028 0030                  		move.w	$30(a0),d0
0000EE0C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE10 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE12 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE16                            
0000EE16                            loc_E41E:
0000EE16 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE1C 4A68 0012                  		tst.w	$12(a0)
0000EE20 6A00                       		bpl.s	locret_E430
0000EE22 08E8 0001 0022             		bset	#1,$22(a0)
0000EE28                            
0000EE28                            locret_E430:
0000EE28 4E75                       		rts	
0000EE2A                            ; ===========================================================================
0000EE2A                            ; lavaball type	04 flies up until it hits the ceiling
0000EE2A                            
0000EE2A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE2A 08E8 0001 0022             		bset	#1,$22(a0)
0000EE30 6100 0000                  		bsr.w	ObjHitCeiling
0000EE34 4A41                       		tst.w	d1
0000EE36 6A00                       		bpl.s	locret_E452
0000EE38 117C 0008 0028             		move.b	#8,$28(a0)
0000EE3E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE44 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE4A                            
0000EE4A                            locret_E452:
0000EE4A 4E75                       		rts	
0000EE4C                            ; ===========================================================================
0000EE4C                            ; lavaball type	05 falls down until it hits the	floor
0000EE4C                            
0000EE4C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE4C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE52 6100 0000                  		bsr.w	ObjHitFloor
0000EE56 4A41                       		tst.w	d1
0000EE58 6A00                       		bpl.s	locret_E474
0000EE5A 117C 0008 0028             		move.b	#8,$28(a0)
0000EE60 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE66 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EE6C                            
0000EE6C                            locret_E474:
0000EE6C 4E75                       		rts	
0000EE6E                            ; ===========================================================================
0000EE6E                            ; lavaball types 06-07 move sideways
0000EE6E                            
0000EE6E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EE6E 08E8 0000 0022             		bset	#0,$22(a0)
0000EE74 76F8                       		moveq	#-8,d3
0000EE76 6100 0000                  		bsr.w	ObjHitWallLeft
0000EE7A 4A41                       		tst.w	d1
0000EE7C 6A00                       		bpl.s	locret_E498
0000EE7E 117C 0008 0028             		move.b	#8,$28(a0)
0000EE84 117C 0003 001C             		move.b	#3,$1C(a0)
0000EE8A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EE90                            
0000EE90                            locret_E498:
0000EE90 4E75                       		rts	
0000EE92                            ; ===========================================================================
0000EE92                            
0000EE92                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EE92 08A8 0000 0022             		bclr	#0,$22(a0)
0000EE98 7608                       		moveq	#8,d3
0000EE9A 6100 0000                  		bsr.w	ObjHitWallRight
0000EE9E 4A41                       		tst.w	d1
0000EEA0 6A00                       		bpl.s	locret_E4BC
0000EEA2 117C 0008 0028             		move.b	#8,$28(a0)
0000EEA8 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEAE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEB4                            
0000EEB4                            locret_E4BC:
0000EEB4 4E75                       		rts	
0000EEB6                            ; ===========================================================================
0000EEB6                            
0000EEB6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EEB6 4E75                       		rts	
0000EEB8                            ; ===========================================================================
0000EEB8                            
0000EEB8                            Obj14_Delete:				; XREF: Obj14_Index
0000EEB8 6000 F184                  		bra.w	DeleteObject
0000EEBC                            ; ===========================================================================
0000EEBC                            Ani_obj14:
0000EEBC                            	include "_anim\obj14.asm"
0000EEBC                            ; ---------------------------------------------------------------------------
0000EEBC                            ; Animation script - lava balls
0000EEBC                            ; ---------------------------------------------------------------------------
0000EEBC 0000                       		dc.w byte_E4CC-Ani_obj14
0000EEBE 0000                       		dc.w byte_E4D2-Ani_obj14
0000EEC0 0000                       		dc.w byte_E4D6-Ani_obj14
0000EEC2 0000                       		dc.w byte_E4DC-Ani_obj14
0000EEC4 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EECA 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EECE 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EED4 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EED8                            		even
0000EED8                            		even
0000EED8                            
0000EED8                            ; ===========================================================================
0000EED8                            ; ---------------------------------------------------------------------------
0000EED8                            ; Object 6D - flame thrower (SBZ)
0000EED8                            ; ---------------------------------------------------------------------------
0000EED8                            
0000EED8                            Obj6D:					; XREF: Obj_Index
0000EED8 7000                       		moveq	#0,d0
0000EEDA 1028 0024                  		move.b	$24(a0),d0
0000EEDE 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EEE2 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EEE6                            ; ===========================================================================
0000EEE6 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EEE8 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EEEA                            ; ===========================================================================
0000EEEA                            
0000EEEA                            Obj6D_Main:				; XREF: Obj6D_Index
0000EEEA 5428 0024                  		addq.b	#2,$24(a0)
0000EEEE 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EEF6 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EEFC 0028 0004 0001             		ori.b	#4,1(a0)
0000EF02 117C 0001 0018             		move.b	#1,$18(a0)
0000EF08 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF0E 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF14 1028 0028                  		move.b	$28(a0),d0
0000EF18 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF1C D040                       		add.w	d0,d0		; multiply by 2
0000EF1E 3140 0030                  		move.w	d0,$30(a0)
0000EF22 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF26 1028 0028                  		move.b	$28(a0),d0
0000EF2A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF2E EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF30 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF34 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF3A 0828 0001 0022             		btst	#1,$22(a0)
0000EF40 6700                       		beq.s	Obj6D_Action
0000EF42 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF48 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF4E                            
0000EF4E                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF4E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF52 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF54 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EF5A 0868 0000 001C             		bchg	#0,$1C(a0)
0000EF60 6700                       		beq.s	loc_E57A
0000EF62 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EF68 303C 00B3                  		move.w	#$B3,d0
0000EF6C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000EF72                            
0000EF72                            loc_E57A:
0000EF72 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EF78 6100 C0DE                  		bsr.w	AnimateSprite
0000EF7C 117C 0000 0020             		move.b	#0,$20(a0)
0000EF82 1028 0036                  		move.b	$36(a0),d0
0000EF86 B028 001A                  		cmp.b	$1A(a0),d0
0000EF8A 6600                       		bne.s	Obj6D_ChkDel
0000EF8C 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EF92                            
0000EF92                            Obj6D_ChkDel:
0000EF92 3028 0008                  		move.w	8(a0),d0
0000EF96 0240 FF80                  		andi.w	#$FF80,d0
0000EF9A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF9E 0441 0080                  		subi.w	#$80,d1
0000EFA2 0241 FF80                  		andi.w	#$FF80,d1
0000EFA6 9041                       		sub.w	d1,d0
0000EFA8 0C40 0280                  		cmpi.w	#$280,d0
0000EFAC 6200 F090                  		bhi.w	DeleteObject
0000EFB0 6000 F050                  		bra.w	DisplaySprite
0000EFB4                            ; ===========================================================================
0000EFB4                            Ani_obj6D:
0000EFB4                            	include "_anim\obj6D.asm"
0000EFB4                            ; ---------------------------------------------------------------------------
0000EFB4                            ; Animation script - flamethrower (SBZ)
0000EFB4                            ; ---------------------------------------------------------------------------
0000EFB4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EFB6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EFB8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EFBA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EFBC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EFCA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EFD4 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EFE2 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EFEC                            		even
0000EFEC                            		even
0000EFEC                            
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            ; Sprite mappings - flame thrower (SBZ)
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            Map_obj6D:
0000EFEC                            	include "_maps\obj6D.asm"
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            ; Sprite mappings - flame thrower (SBZ)
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EFF0 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EFF4 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EFF8 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EFFC 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F000 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F004 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F008 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F00C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F010 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F014 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F018 01                         byte_E620:	dc.b 1
0000F019 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F01E 02                         byte_E626:	dc.b 2
0000F01F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F024 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F029 02                         byte_E631:	dc.b 2
0000F02A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F02F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F034 03                         byte_E63C:	dc.b 3
0000F035 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F03A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F03F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F044 03                         byte_E64C:	dc.b 3
0000F045 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F04A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F04F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F054 04                         byte_E65C:	dc.b 4
0000F055 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F05A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F05F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F064 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F069 04                         byte_E671:	dc.b 4
0000F06A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F06F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F074 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F079 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F07E 05                         byte_E686:	dc.b 5
0000F07F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F084 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F089 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F08E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F093 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F098 05                         byte_E6A0:	dc.b 5
0000F099 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F09E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0A3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0A8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0AD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0B2 06                         byte_E6BA:	dc.b 6
0000F0B3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F0B8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F0BD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0C2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F0C7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0CC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0D1 06                         byte_E6D9:	dc.b 6
0000F0D2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F0D7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0DC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F0E1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0E6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0EB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0F0 01                         byte_E6F8:	dc.b 1
0000F0F1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0F6 02                         byte_E6FE:	dc.b 2
0000F0F7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0FC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F101 02                         byte_E709:	dc.b 2
0000F102 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F107 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F10C 03                         byte_E714:	dc.b 3
0000F10D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F112 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F117 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F11C 03                         byte_E724:	dc.b 3
0000F11D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F122 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F127 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F12C 04                         byte_E734:	dc.b 4
0000F12D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F132 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F137 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F13C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F141 04                         byte_E749:	dc.b 4
0000F142 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F147 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F14C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F151 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F156 05                         byte_E75E:	dc.b 5
0000F157 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F15C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F161 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F166 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F16B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F170 05                         byte_E778:	dc.b 5
0000F171 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F176 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F17B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F180 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F185 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F18A 06                         byte_E792:	dc.b 6
0000F18B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F190 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F195 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F19A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F19F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1A4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1A9 06                         byte_E7B1:	dc.b 6
0000F1AA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1AF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1B4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1B9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1BE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1C3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1C8                            		even
0000F1C8                            		even
0000F1C8                            
0000F1C8                            ; ===========================================================================
0000F1C8                            ; ---------------------------------------------------------------------------
0000F1C8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F1C8                            ; ---------------------------------------------------------------------------
0000F1C8                            
0000F1C8                            Obj46:					; XREF: Obj_Index
0000F1C8 7000                       		moveq	#0,d0
0000F1CA 1028 0024                  		move.b	$24(a0),d0
0000F1CE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F1D2 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F1D6                            ; ===========================================================================
0000F1D6 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F1D8 0000                       		dc.w Obj46_Action-Obj46_Index
0000F1DA                            ; ===========================================================================
0000F1DA                            
0000F1DA                            Obj46_Main:				; XREF: Obj46_Index
0000F1DA 5428 0024                  		addq.b	#2,$24(a0)
0000F1DE 117C 000F 0016             		move.b	#$F,$16(a0)
0000F1E4 117C 000F 0017             		move.b	#$F,$17(a0)
0000F1EA 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F1F2 317C 4000 0002             		move.w	#$4000,2(a0)
0000F1F8 117C 0004 0001             		move.b	#4,1(a0)
0000F1FE 117C 0003 0018             		move.b	#3,$18(a0)
0000F204 117C 0010 0019             		move.b	#$10,$19(a0)
0000F20A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F210 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F216                            
0000F216                            Obj46_Action:				; XREF: Obj46_Index
0000F216 4A28 0001                  		tst.b	1(a0)
0000F21A 6A00                       		bpl.s	Obj46_ChkDel
0000F21C 7000                       		moveq	#0,d0
0000F21E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F222 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F226 D040                       		add.w	d0,d0
0000F228 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F22C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F230 323C 001B                  		move.w	#$1B,d1
0000F234 343C 0010                  		move.w	#$10,d2
0000F238 363C 0011                  		move.w	#$11,d3
0000F23C 3828 0008                  		move.w	8(a0),d4
0000F240 6100 0000                  		bsr.w	SolidObject
0000F244                            
0000F244                            Obj46_ChkDel:
0000F244 6100 EDBC                  		bsr.w	DisplaySprite
0000F248 3028 0008                  		move.w	8(a0),d0
0000F24C 0240 FF80                  		andi.w	#$FF80,d0
0000F250 3238 F700                  		move.w	($FFFFF700).w,d1
0000F254 0441 0080                  		subi.w	#$80,d1
0000F258 0241 FF80                  		andi.w	#$FF80,d1
0000F25C 9041                       		sub.w	d1,d0
0000F25E 0C40 0280                  		cmpi.w	#$280,d0
0000F262 6200 EDDA                  		bhi.w	DeleteObject
0000F266 4E75                       		rts	
0000F268                            ; ===========================================================================
0000F268 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F26A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F26C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F26E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F270 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F272                            ; ===========================================================================
0000F272                            
0000F272                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F272 4E75                       		rts	
0000F274                            ; ===========================================================================
0000F274                            
0000F274                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F274 3038 D008                  		move.w	($FFFFD008).w,d0
0000F278 9068 0008                  		sub.w	8(a0),d0
0000F27C 6400                       		bcc.s	loc_E888
0000F27E 4440                       		neg.w	d0
0000F280                            
0000F280                            loc_E888:
0000F280 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F284 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F286 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F28C                            
0000F28C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F28C 7000                       		moveq	#0,d0
0000F28E 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F292 0828 0003 0028             		btst	#3,$28(a0)
0000F298 6700                       		beq.s	loc_E8A8
0000F29A 4440                       		neg.w	d0
0000F29C 0640 0010                  		addi.w	#$10,d0
0000F2A0                            
0000F2A0                            loc_E8A8:
0000F2A0 3228 0030                  		move.w	$30(a0),d1
0000F2A4 9240                       		sub.w	d0,d1
0000F2A6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F2AA 4E75                       		rts	
0000F2AC                            ; ===========================================================================
0000F2AC                            
0000F2AC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2AC 6100 ED2E                  		bsr.w	SpeedToPos
0000F2B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F2B6 6100 0000                  		bsr.w	ObjHitFloor
0000F2BA 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F2BC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F2C0 D368 000C                  		add.w	d1,$C(a0)
0000F2C4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F2C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2CE 117C 0004 0028             		move.b	#4,$28(a0)
0000F2D4 3011                       		move.w	(a1),d0
0000F2D6 0240 03FF                  		andi.w	#$3FF,d0
0000F2DA 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F2DE 6400                       		bcc.s	locret_E8EE
0000F2E0 117C 0000 0028             		move.b	#0,$28(a0)
0000F2E6                            
0000F2E6                            locret_E8EE:
0000F2E6 4E75                       		rts	
0000F2E8                            ; ===========================================================================
0000F2E8                            
0000F2E8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F2E8 7000                       		moveq	#0,d0
0000F2EA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F2EE E648                       		lsr.w	#3,d0
0000F2F0 3228 0030                  		move.w	$30(a0),d1
0000F2F4 9240                       		sub.w	d0,d1
0000F2F6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F2FA 4E75                       		rts	
0000F2FC                            ; ===========================================================================
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            Map_obj46:
0000F2FC                            	include "_maps\obj46.asm"
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC 0000                       		dc.w byte_E906-Map_obj46
0000F2FE 01                         byte_E906:	dc.b 1
0000F2FF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F304                            		even
0000F304                            		even
0000F304                            
0000F304                            ; ===========================================================================
0000F304                            ; ---------------------------------------------------------------------------
0000F304                            ; Object 12 - lamp (SYZ)
0000F304                            ; ---------------------------------------------------------------------------
0000F304                            
0000F304                            Obj12:					; XREF: Obj_Index
0000F304 7000                       		moveq	#0,d0
0000F306 1028 0024                  		move.b	$24(a0),d0
0000F30A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F30E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F312                            ; ===========================================================================
0000F312 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F314 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F316                            ; ===========================================================================
0000F316                            
0000F316                            Obj12_Main:				; XREF: Obj12_Index
0000F316 5428 0024                  		addq.b	#2,$24(a0)
0000F31A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F322 317C 0000 0002             		move.w	#0,2(a0)
0000F328 117C 0004 0001             		move.b	#4,1(a0)
0000F32E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F334 117C 0006 0018             		move.b	#6,$18(a0)
0000F33A                            
0000F33A                            Obj12_Animate:				; XREF: Obj12_Index
0000F33A 5328 001E                  		subq.b	#1,$1E(a0)
0000F33E 6A00                       		bpl.s	Obj12_ChkDel
0000F340 117C 0007 001E             		move.b	#7,$1E(a0)
0000F346 5228 001A                  		addq.b	#1,$1A(a0)
0000F34A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F350 6500                       		bcs.s	Obj12_ChkDel
0000F352 117C 0000 001A             		move.b	#0,$1A(a0)
0000F358                            
0000F358                            Obj12_ChkDel:
0000F358 3028 0008                  		move.w	8(a0),d0
0000F35C 0240 FF80                  		andi.w	#$FF80,d0
0000F360 3238 F700                  		move.w	($FFFFF700).w,d1
0000F364 0441 0080                  		subi.w	#$80,d1
0000F368 0241 FF80                  		andi.w	#$FF80,d1
0000F36C 9041                       		sub.w	d1,d0
0000F36E 0C40 0280                  		cmpi.w	#$280,d0
0000F372 6200 ECCA                  		bhi.w	DeleteObject
0000F376 6000 EC8A                  		bra.w	DisplaySprite
0000F37A                            ; ===========================================================================
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A                            ; Sprite mappings - lamp (SYZ)
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A                            Map_obj12:
0000F37A                            	include "_maps\obj12.asm"
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A                            ; Sprite mappings - lamp (SYZ)
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F37E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F382 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F386 02                         byte_E98E:	dc.b 2
0000F387 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F38C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F391 02                         byte_E999:	dc.b 2
0000F392 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F397 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F39C 02                         byte_E9A4:	dc.b 2
0000F39D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F3A2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F3A7 02                         byte_E9AF:	dc.b 2
0000F3A8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3AD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F3B2 02                         byte_E9BA:	dc.b 2
0000F3B3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F3B8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F3BD 02                         byte_E9C5:	dc.b 2
0000F3BE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F3C3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F3C8                            		even
0000F3C8                            		even
0000F3C8                            
0000F3C8                            ; ===========================================================================
0000F3C8                            ; ---------------------------------------------------------------------------
0000F3C8                            ; Object 47 - pinball bumper (SYZ)
0000F3C8                            ; ---------------------------------------------------------------------------
0000F3C8                            
0000F3C8                            Obj47:					; XREF: Obj_Index
0000F3C8 7000                       		moveq	#0,d0
0000F3CA 1028 0024                  		move.b	$24(a0),d0
0000F3CE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F3D2 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F3D6                            ; ===========================================================================
0000F3D6 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F3D8 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F3DA                            ; ===========================================================================
0000F3DA                            
0000F3DA                            Obj47_Main:				; XREF: Obj47_Index
0000F3DA 5428 0024                  		addq.b	#2,$24(a0)
0000F3DE 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F3E6 317C 0380 0002             		move.w	#$380,2(a0)
0000F3EC 117C 0004 0001             		move.b	#4,1(a0)
0000F3F2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F3F8 117C 0001 0018             		move.b	#1,$18(a0)
0000F3FE 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F404                            
0000F404                            Obj47_Hit:				; XREF: Obj47_Index
0000F404 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F408 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F40C 4228 0021                  		clr.b	$21(a0)
0000F410 43F8 D000                  		lea	($FFFFD000).w,a1
0000F414 3228 0008                  		move.w	8(a0),d1
0000F418 3428 000C                  		move.w	$C(a0),d2
0000F41C 9269 0008                  		sub.w	8(a1),d1
0000F420 9469 000C                  		sub.w	$C(a1),d2
0000F424 4EB9 0000 3002             		jsr	(CalcAngle).l
0000F42A 4EB9 0000 2D34             		jsr	(CalcSine).l
0000F430 C3FC F900                  		muls.w	#-$700,d1
0000F434 E081                       		asr.l	#8,d1
0000F436 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F43A C1FC F900                  		muls.w	#-$700,d0
0000F43E E080                       		asr.l	#8,d0
0000F440 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F444 08E9 0001 0022             		bset	#1,$22(a1)
0000F44A 08A9 0004 0022             		bclr	#4,$22(a1)
0000F450 08A9 0005 0022             		bclr	#5,$22(a1)
0000F456 4229 003C                  		clr.b	$3C(a1)
0000F45A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F460 303C 00B4                  		move.w	#$B4,d0
0000F464 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F46A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F46E 7000                       		moveq	#0,d0
0000F470 1028 0023                  		move.b	$23(a0),d0
0000F474 6700                       		beq.s	Obj47_Score
0000F476 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F47C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F47E 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F482                            
0000F482                            Obj47_Score:
0000F482 7001                       		moveq	#1,d0
0000F484 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F48A 6100 EFFC                  		bsr.w	SingleObjLoad
0000F48E 6600                       		bne.s	Obj47_Display
0000F490 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F494 3368 0008 0008             		move.w	8(a0),8(a1)
0000F49A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4A0 137C 0004 001A             		move.b	#4,$1A(a1)
0000F4A6                            
0000F4A6                            Obj47_Display:
0000F4A6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4AC 6100 BBAA                  		bsr.w	AnimateSprite
0000F4B0 3028 0008                  		move.w	8(a0),d0
0000F4B4 0240 FF80                  		andi.w	#$FF80,d0
0000F4B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4BC 0441 0080                  		subi.w	#$80,d1
0000F4C0 0241 FF80                  		andi.w	#$FF80,d1
0000F4C4 9041                       		sub.w	d1,d0
0000F4C6 0C40 0280                  		cmpi.w	#$280,d0
0000F4CA 6200                       		bhi.s	Obj47_ChkHit
0000F4CC 6000 EB34                  		bra.w	DisplaySprite
0000F4D0                            ; ===========================================================================
0000F4D0                            
0000F4D0                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F4D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4D4 7000                       		moveq	#0,d0
0000F4D6 1028 0023                  		move.b	$23(a0),d0
0000F4DA 6700                       		beq.s	Obj47_Delete
0000F4DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F4E2                            
0000F4E2                            Obj47_Delete:
0000F4E2 6000 EB5A                  		bra.w	DeleteObject
0000F4E6                            ; ===========================================================================
0000F4E6                            Ani_obj47:
0000F4E6                            	include "_anim\obj47.asm"
0000F4E6                            ; ---------------------------------------------------------------------------
0000F4E6                            ; Animation script - flamethrower (SBZ)
0000F4E6                            ; ---------------------------------------------------------------------------
0000F4E6 0000                       		dc.w byte_EAF4-Ani_obj47
0000F4E8 0000                       		dc.w byte_EAF8-Ani_obj47
0000F4EA 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F4EE 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F4F6                            		even
0000F4F6                            		even
0000F4F6                            
0000F4F6                            ; ---------------------------------------------------------------------------
0000F4F6                            ; Sprite mappings - pinball bumper (SYZ)
0000F4F6                            ; ---------------------------------------------------------------------------
0000F4F6                            Map_obj47:
0000F4F6                            	include "_maps\obj47.asm"
0000F4F6                            ; ---------------------------------------------------------------------------
0000F4F6                            ; Sprite mappings - pinball bumper (SYZ)
0000F4F6                            ; ---------------------------------------------------------------------------
0000F4F6 0000                       		dc.w byte_EB06-Map_obj47
0000F4F8 0000                       		dc.w byte_EB11-Map_obj47
0000F4FA 0000                       		dc.w byte_EB1C-Map_obj47
0000F4FC 02                         byte_EB06:	dc.b 2
0000F4FD F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F502 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F507 02                         byte_EB11:	dc.b 2
0000F508 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F50D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F512 02                         byte_EB1C:	dc.b 2
0000F513 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F518 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F51E 00                         		even
0000F51E 00                         		even
0000F51E                            
0000F51E                            ; ===========================================================================
0000F51E                            ; ---------------------------------------------------------------------------
0000F51E                            ; Object 0D - signpost at the end of a level
0000F51E                            ; ---------------------------------------------------------------------------
0000F51E                            
0000F51E                            Obj0D:					; XREF: Obj_Index
0000F51E 7000                       		moveq	#0,d0
0000F520 1028 0024                  		move.b	$24(a0),d0
0000F524 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F528 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F52C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F532 6100 BB24                  		bsr.w	AnimateSprite
0000F536 6100 EACA                  		bsr.w	DisplaySprite
0000F53A 3028 0008                  		move.w	8(a0),d0
0000F53E 0240 FF80                  		andi.w	#$FF80,d0
0000F542 3238 F700                  		move.w	($FFFFF700).w,d1
0000F546 0441 0080                  		subi.w	#$80,d1
0000F54A 0241 FF80                  		andi.w	#$FF80,d1
0000F54E 9041                       		sub.w	d1,d0
0000F550 0C40 0280                  		cmpi.w	#$280,d0
0000F554 6200 EAE8                  		bhi.w	DeleteObject
0000F558 4E75                       		rts	
0000F55A                            ; ===========================================================================
0000F55A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F55C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F55E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F560 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F562 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F564                            ; ===========================================================================
0000F564                            
0000F564                            Obj0D_Main:				; XREF: Obj0D_Index
0000F564 5428 0024                  		addq.b	#2,$24(a0)
0000F568 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F570 317C 0680 0002             		move.w	#$680,2(a0)
0000F576 117C 0004 0001             		move.b	#4,1(a0)
0000F57C 117C 0018 0019             		move.b	#$18,$19(a0)
0000F582 117C 0004 0018             		move.b	#4,$18(a0)
0000F588                            
0000F588                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F588 3038 D008                  		move.w	($FFFFD008).w,d0
0000F58C 9068 0008                  		sub.w	8(a0),d0
0000F590 6500                       		bcs.s	locret_EBBA
0000F592 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F596 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F598 303C 00CF                  		move.w	#$CF,d0
0000F59C 4EB9 0000 1594             		jsr	(PlaySound).l	; play signpost	sound
0000F5A2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F5A6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5AC 5428 0024                  		addq.b	#2,$24(a0)
0000F5B0                            
0000F5B0                            locret_EBBA:
0000F5B0 4E75                       		rts	
0000F5B2                            ; ===========================================================================
0000F5B2                            
0000F5B2                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F5B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F5B6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F5B8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F5BE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F5C2 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F5C8 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F5CA 5428 0024                  		addq.b	#2,$24(a0)
0000F5CE                            
0000F5CE                            Obj0D_Sparkle:
0000F5CE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F5D2 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F5D4 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F5DA 7000                       		moveq	#0,d0
0000F5DC 1028 0034                  		move.b	$34(a0),d0
0000F5E0 5428 0034                  		addq.b	#2,$34(a0)
0000F5E4 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F5EA 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F5EE 6100 EE98                  		bsr.w	SingleObjLoad
0000F5F2 6600                       		bne.s	locret_EC42
0000F5F4 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F5F8 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F5FE 101A                       		move.b	(a2)+,d0
0000F600 4880                       		ext.w	d0
0000F602 D068 0008                  		add.w	8(a0),d0
0000F606 3340 0008                  		move.w	d0,8(a1)
0000F60A 101A                       		move.b	(a2)+,d0
0000F60C 4880                       		ext.w	d0
0000F60E D068 000C                  		add.w	$C(a0),d0
0000F612 3340 000C                  		move.w	d0,$C(a1)
0000F616 237C 0000 A7F6 0004        		move.l	#Map_obj25,4(a1)
0000F61E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F624 137C 0004 0001             		move.b	#4,1(a1)
0000F62A 137C 0002 0018             		move.b	#2,$18(a1)
0000F630 137C 0008 0019             		move.b	#8,$19(a1)
0000F636                            
0000F636                            locret_EC42:
0000F636 4E75                       		rts	
0000F638                            ; ===========================================================================
0000F638 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F63A 0808                       		dc.b	8,   8
0000F63C F000                       		dc.b -$10,   0
0000F63E 18F8                       		dc.b  $18,  -8
0000F640 00F8                       		dc.b	0,  -8
0000F642 1000                       		dc.b  $10,   0
0000F644 E808                       		dc.b -$18,   8
0000F646 1810                       		dc.b  $18, $10
0000F648                            ; ===========================================================================
0000F648                            
0000F648                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F648 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F64C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F650 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F656 6600                       		bne.s	loc_EC70
0000F658 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F65E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F664 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F666 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F66C 6000                       		bra.s	loc_EC70
0000F66E                            
0000F66E                            Obj0D_MoveLeft:
0000F66E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F674                            
0000F674                            loc_EC70:
0000F674 4A38 D000                  		tst.b	($FFFFD000).w
0000F678 6700                       		beq.s	loc_EC86
0000F67A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F67E 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F682 0641 0128                  		addi.w	#$128,d1
0000F686 B041                       		cmp.w	d1,d0
0000F688 6500                       		bcs.s	locret_ECEE
0000F68A                            
0000F68A                            loc_EC86:
0000F68A 5428 0024                  		addq.b	#2,$24(a0)
0000F68E                            
0000F68E                            ; ---------------------------------------------------------------------------
0000F68E                            ; Subroutine to	set up bonuses at the end of an	act
0000F68E                            ; ---------------------------------------------------------------------------
0000F68E                            
0000F68E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F68E                            
0000F68E                            
0000F68E                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F68E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F692 6600                       		bne.s	locret_ECEE
0000F694 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F69A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F69E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6A2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F6A8 7010                       		moveq	#$10,d0
0000F6AA 4EB9 0000 17B0             		jsr	(LoadPLC2).l	; load title card patterns
0000F6B0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F6B6 7000                       		moveq	#0,d0
0000F6B8 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F6BC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F6C0 7200                       		moveq	#0,d1
0000F6C2 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F6C6 D041                       		add.w	d1,d0		; add up your time
0000F6C8 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F6CC 7214                       		moveq	#$14,d1
0000F6CE B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F6D0 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F6D2 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F6D4                            
0000F6D4                            loc_ECD0:
0000F6D4 D040                       		add.w	d0,d0
0000F6D6 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F6DC 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F6E0 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F6E4 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F6E8 303C 008E                  		move.w	#$8E,d0
0000F6EC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F6F2                            
0000F6F2                            locret_ECEE:
0000F6F2 4E75                       		rts	
0000F6F4                            ; End of function GotThroughAct
0000F6F4                            
0000F6F4                            ; ===========================================================================
0000F6F4 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F708 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F71E                            ; ===========================================================================
0000F71E                            
0000F71E                            locret_ED1A:				; XREF: Obj0D_Index
0000F71E 4E75                       		rts	
0000F720                            ; ===========================================================================
0000F720                            Ani_obj0D:
0000F720                            	include "_anim\obj0D.asm"
0000F720                            ; ---------------------------------------------------------------------------
0000F720                            ; Animation script - signpost
0000F720                            ; ---------------------------------------------------------------------------
0000F720 0000                       		dc.w byte_ED24-Ani_obj0D
0000F722 0000                       		dc.w byte_ED28-Ani_obj0D
0000F724 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F726 0000                       		dc.w byte_ED34-Ani_obj0D
0000F728 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F72C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F732 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F738 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F73C 00                         		even
0000F73C 00                         		even
0000F73C                            
0000F73C                            ; ---------------------------------------------------------------------------
0000F73C                            ; Sprite mappings - signpost
0000F73C                            ; ---------------------------------------------------------------------------
0000F73C                            Map_obj0D:
0000F73C                            	include "_maps\obj0D.asm"
0000F73C                            ; ---------------------------------------------------------------------------
0000F73C                            ; Sprite mappings - signpost
0000F73C                            ; ---------------------------------------------------------------------------
0000F73C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F740 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F744 0000                       		dc.w byte_ED73-Map_obj0D
0000F746 03                         byte_ED42:	dc.b 3
0000F747 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F74C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F751 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F756 02                         byte_ED52:	dc.b 2
0000F757 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F75C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F761 02                         byte_ED5D:	dc.b 2
0000F762 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F767 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F76C 02                         byte_ED68:	dc.b 2
0000F76D F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F772 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F777 03                         byte_ED73:	dc.b 3
0000F778 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F77D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F782 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F788 00                         		even
0000F788 00                         		even
0000F788                            
0000F788                            ; ===========================================================================
0000F788                            ; ---------------------------------------------------------------------------
0000F788                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F788                            ; ---------------------------------------------------------------------------
0000F788                            
0000F788                            Obj4C:					; XREF: Obj_Index
0000F788 7000                       		moveq	#0,d0
0000F78A 1028 0024                  		move.b	$24(a0),d0
0000F78E 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F792 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F796 6000 0000                  		bra.w	Obj4D_ChkDel
0000F79A                            ; ===========================================================================
0000F79A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F79C 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F79E 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F7A0 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F7A2 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F7A4 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F7A6                            ; ===========================================================================
0000F7A6                            
0000F7A6                            Obj4C_Main:				; XREF: Obj4C_Index
0000F7A6 5428 0024                  		addq.b	#2,$24(a0)
0000F7AA 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F7B2 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F7B8 117C 0004 0001             		move.b	#4,1(a0)
0000F7BE 117C 0001 0018             		move.b	#1,$18(a0)
0000F7C4 117C 0038 0019             		move.b	#$38,$19(a0)
0000F7CA 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F7D0                            
0000F7D0                            loc_EDCC:				; XREF: Obj4C_Index
0000F7D0 5368 0032                  		subq.w	#1,$32(a0)
0000F7D4 6A00                       		bpl.s	locret_EDF0
0000F7D6 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F7DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F7E0 3228 000C                  		move.w	$C(a0),d1
0000F7E4 B041                       		cmp.w	d1,d0
0000F7E6 6400                       		bcc.s	locret_EDF0
0000F7E8 0441 0170                  		subi.w	#$170,d1
0000F7EC B041                       		cmp.w	d1,d0
0000F7EE 6500                       		bcs.s	locret_EDF0
0000F7F0 5428 0024                  		addq.b	#2,$24(a0)
0000F7F4                            
0000F7F4                            locret_EDF0:
0000F7F4 4E75                       		rts	
0000F7F6                            ; ===========================================================================
0000F7F6                            
0000F7F6                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F7F6 5428 0024                  		addq.b	#2,$24(a0)
0000F7FA 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F7FE 6600                       		bne.s	loc_EE18
0000F800 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F804 3368 0008 0008             		move.w	8(a0),8(a1)
0000F80A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F810 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F816 2348 003C                  		move.l	a0,$3C(a1)
0000F81A                            
0000F81A                            loc_EE18:
0000F81A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F820 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F824 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F826 117C 0004 001C             		move.b	#4,$1C(a0)
0000F82C 6000                       		bra.s	Obj4C_Display
0000F82E                            ; ===========================================================================
0000F82E                            
0000F82E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F82E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F832 08E9 0001 0022             		bset	#1,$22(a1)
0000F838 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F83E 6000                       		bra.s	Obj4C_Display
0000F840                            ; ===========================================================================
0000F840                            
0000F840                            loc_EE3E:				; XREF: Obj4C_Index
0000F840 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F844 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F846 5428 0024                  		addq.b	#2,$24(a0)
0000F84A 4E75                       		rts	
0000F84C                            ; ===========================================================================
0000F84C                            
0000F84C                            Obj4C_Display:				; XREF: Obj4C_Index
0000F84C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F852 6100 B804                  		bsr.w	AnimateSprite
0000F856 6100 E7AA                  		bsr.w	DisplaySprite
0000F85A 4E75                       		rts	
0000F85C                            ; ===========================================================================
0000F85C                            
0000F85C                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F85C 117C 0000 001C             		move.b	#0,$1C(a0)
0000F862 117C 0002 0024             		move.b	#2,$24(a0)
0000F868 4A28 0028                  		tst.b	$28(a0)
0000F86C 6700 E7D0                  		beq.w	DeleteObject
0000F870 4E75                       		rts	
0000F872                            ; ===========================================================================
0000F872                            ; ---------------------------------------------------------------------------
0000F872                            ; Object 4D - lava geyser / lavafall (MZ)
0000F872                            ; ---------------------------------------------------------------------------
0000F872                            
0000F872                            Obj4D:					; XREF: Obj_Index
0000F872 7000                       		moveq	#0,d0
0000F874 1028 0024                  		move.b	$24(a0),d0
0000F878 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F87C 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F880 6000 E780                  		bra.w	DisplaySprite
0000F884                            ; ===========================================================================
0000F884 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F886 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F888 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F88A 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F88C                            
0000F88C FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F890                            ; ===========================================================================
0000F890                            
0000F890                            Obj4D_Main:				; XREF: Obj4D_Index
0000F890 5428 0024                  		addq.b	#2,$24(a0)
0000F894 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F89A 4A28 0028                  		tst.b	$28(a0)
0000F89E 6700                       		beq.s	loc_EEA4
0000F8A0 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F8A6                            
0000F8A6                            loc_EEA4:
0000F8A6 7000                       		moveq	#0,d0
0000F8A8 1028 0028                  		move.b	$28(a0),d0
0000F8AC D040                       		add.w	d0,d0
0000F8AE 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8B4 2248                       		movea.l	a0,a1
0000F8B6 7201                       		moveq	#1,d1
0000F8B8 6100                       		bsr.s	Obj4D_MakeLava
0000F8BA 6000                       		bra.s	loc_EF10
0000F8BC                            ; ===========================================================================
0000F8BC                            
0000F8BC                            Obj4D_Loop:
0000F8BC 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F8C0 6600                       		bne.s	loc_EF0A
0000F8C2                            
0000F8C2                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F8C2 12BC 004D                  		move.b	#$4D,0(a1)
0000F8C6 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F8CE 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8D4 137C 0004 0001             		move.b	#4,1(a1)
0000F8DA 137C 0020 0019             		move.b	#$20,$19(a1)
0000F8E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8EC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F8F2 137C 0001 0018             		move.b	#1,$18(a1)
0000F8F8 137C 0005 001C             		move.b	#5,$1C(a1)
0000F8FE 4A28 0028                  		tst.b	$28(a0)
0000F902 6700                       		beq.s	loc_EF0A
0000F904 137C 0002 001C             		move.b	#2,$1C(a1)
0000F90A                            
0000F90A                            loc_EF0A:
0000F90A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F90E 4E75                       		rts	
0000F910                            ; ===========================================================================
0000F910                            
0000F910                            loc_EF10:				; XREF: Obj4D_Main
0000F910 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F916 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F91C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F922 137C 0093 0020             		move.b	#$93,$20(a1)
0000F928 137C 0080 0016             		move.b	#$80,$16(a1)
0000F92E 08E9 0004 0001             		bset	#4,1(a1)
0000F934 5829 0024                  		addq.b	#4,$24(a1)
0000F938 2348 003C                  		move.l	a0,$3C(a1)
0000F93C 4A28 0028                  		tst.b	$28(a0)
0000F940 6700                       		beq.s	Obj4D_PlaySnd
0000F942 7200                       		moveq	#0,d1
0000F944 6100 FF76                  		bsr.w	Obj4D_Loop
0000F948 5429 0024                  		addq.b	#2,$24(a1)
0000F94C 08E9 0004 0002             		bset	#4,2(a1)
0000F952 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F958 137C 0000 0018             		move.b	#0,$18(a1)
0000F95E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F964 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F96A 117C 0000 0028             		move.b	#0,$28(a0)
0000F970                            
0000F970                            Obj4D_PlaySnd:
0000F970 303C 00C8                  		move.w	#$C8,d0
0000F974 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000F97A                            
0000F97A                            Obj4D_Action:				; XREF: Obj4D_Index
0000F97A 7000                       		moveq	#0,d0
0000F97C 1028 0028                  		move.b	$28(a0),d0
0000F980 D040                       		add.w	d0,d0
0000F982 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F986 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F98A 6100 E650                  		bsr.w	SpeedToPos
0000F98E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F994 6100 B6C2                  		bsr.w	AnimateSprite
0000F998                            
0000F998                            Obj4D_ChkDel:				; XREF: Obj4C
0000F998 3028 0008                  		move.w	8(a0),d0
0000F99C 0240 FF80                  		andi.w	#$FF80,d0
0000F9A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9A4 0441 0080                  		subi.w	#$80,d1
0000F9A8 0241 FF80                  		andi.w	#$FF80,d1
0000F9AC 9041                       		sub.w	d1,d0
0000F9AE 0C40 0280                  		cmpi.w	#$280,d0
0000F9B2 6200 E68A                  		bhi.w	DeleteObject
0000F9B6 4E75                       		rts	
0000F9B8                            ; ===========================================================================
0000F9B8 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F9BA 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F9BC                            ; ===========================================================================
0000F9BC                            
0000F9BC                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F9BC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9C2 3028 0030                  		move.w	$30(a0),d0
0000F9C6 B068 000C                  		cmp.w	$C(a0),d0
0000F9CA 6400                       		bcc.s	locret_EFDA
0000F9CC 5828 0024                  		addq.b	#4,$24(a0)
0000F9D0 2268 003C                  		movea.l	$3C(a0),a1
0000F9D4 137C 0003 001C             		move.b	#3,$1C(a1)
0000F9DA                            
0000F9DA                            locret_EFDA:
0000F9DA 4E75                       		rts	
0000F9DC                            ; ===========================================================================
0000F9DC                            
0000F9DC                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F9DC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9E2 3028 0030                  		move.w	$30(a0),d0
0000F9E6 B068 000C                  		cmp.w	$C(a0),d0
0000F9EA 6400                       		bcc.s	locret_EFFA
0000F9EC 5828 0024                  		addq.b	#4,$24(a0)
0000F9F0 2268 003C                  		movea.l	$3C(a0),a1
0000F9F4 137C 0001 001C             		move.b	#1,$1C(a1)
0000F9FA                            
0000F9FA                            locret_EFFA:
0000F9FA 4E75                       		rts	
0000F9FC                            ; ===========================================================================
0000F9FC                            
0000F9FC                            loc_EFFC:				; XREF: Obj4D_Index
0000F9FC 2268 003C                  		movea.l	$3C(a0),a1
0000FA00 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FA06 6700 0000                  		beq.w	Obj4D_Delete
0000FA0A 3029 000C                  		move.w	$C(a1),d0
0000FA0E 0640 0060                  		addi.w	#$60,d0
0000FA12 3140 000C                  		move.w	d0,$C(a0)
0000FA16 9068 0030                  		sub.w	$30(a0),d0
0000FA1A 4440                       		neg.w	d0
0000FA1C 7208                       		moveq	#8,d1
0000FA1E 0C40 0040                  		cmpi.w	#$40,d0
0000FA22 6C00                       		bge.s	loc_F026
0000FA24 720B                       		moveq	#$B,d1
0000FA26                            
0000FA26                            loc_F026:
0000FA26 0C40 0080                  		cmpi.w	#$80,d0
0000FA2A 6F00                       		ble.s	loc_F02E
0000FA2C 720E                       		moveq	#$E,d1
0000FA2E                            
0000FA2E                            loc_F02E:
0000FA2E 5328 001E                  		subq.b	#1,$1E(a0)
0000FA32 6A00                       		bpl.s	loc_F04C
0000FA34 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA3A 5228 001B                  		addq.b	#1,$1B(a0)
0000FA3E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA44 6500                       		bcs.s	loc_F04C
0000FA46 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA4C                            
0000FA4C                            loc_F04C:
0000FA4C 1028 001B                  		move.b	$1B(a0),d0
0000FA50 D001                       		add.b	d1,d0
0000FA52 1140 001A                  		move.b	d0,$1A(a0)
0000FA56 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FA5A                            ; ===========================================================================
0000FA5A                            
0000FA5A                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FA5A 6000 E5E2                  		bra.w	DeleteObject
0000FA5E                            ; ===========================================================================
0000FA5E                            ; ---------------------------------------------------------------------------
0000FA5E                            ; Object 4E - advancing	wall of	lava (MZ)
0000FA5E                            ; ---------------------------------------------------------------------------
0000FA5E                            
0000FA5E                            Obj4E:					; XREF: Obj_Index
0000FA5E 7000                       		moveq	#0,d0
0000FA60 1028 0024                  		move.b	$24(a0),d0
0000FA64 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FA68 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FA6C                            ; ===========================================================================
0000FA6C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FA6E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FA70 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FA72 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FA74 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FA76                            ; ===========================================================================
0000FA76                            
0000FA76                            Obj4E_Main:				; XREF: Obj4E_Index
0000FA76 5828 0024                  		addq.b	#4,$24(a0)
0000FA7A 2248                       		movea.l	a0,a1
0000FA7C 7201                       		moveq	#1,d1
0000FA7E 6000                       		bra.s	Obj4E_Main2
0000FA80                            ; ===========================================================================
0000FA80                            
0000FA80                            Obj4E_Loop:
0000FA80 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FA84 6600                       		bne.s	loc_F0C8
0000FA86                            
0000FA86                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FA86 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FA8A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FA92 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FA98 137C 0004 0001             		move.b	#4,1(a1)
0000FA9E 137C 0050 0019             		move.b	#$50,$19(a1)
0000FAA4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAB0 137C 0001 0018             		move.b	#1,$18(a1)
0000FAB6 137C 0000 001C             		move.b	#0,$1C(a1)
0000FABC 137C 0094 0020             		move.b	#$94,$20(a1)
0000FAC2 2348 003C                  		move.l	a0,$3C(a1)
0000FAC6                            
0000FAC6                            loc_F0C8:
0000FAC6 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FACA                            
0000FACA 5C29 0024                  		addq.b	#6,$24(a1)
0000FACE 137C 0004 001A             		move.b	#4,$1A(a1)
0000FAD4                            
0000FAD4                            Obj4E_Action:				; XREF: Obj4E_Index
0000FAD4 3038 D008                  		move.w	($FFFFD008).w,d0
0000FAD8 9068 0008                  		sub.w	8(a0),d0
0000FADC 6400                       		bcc.s	Obj4E_ChkSonic
0000FADE 4440                       		neg.w	d0
0000FAE0                            
0000FAE0                            Obj4E_ChkSonic:
0000FAE0 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FAE4 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FAE6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FAEA 9068 000C                  		sub.w	$C(a0),d0
0000FAEE 6400                       		bcc.s	loc_F0F4
0000FAF0 4440                       		neg.w	d0
0000FAF2                            
0000FAF2                            loc_F0F4:
0000FAF2 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FAF6 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FAF8 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FAFE 6000                       		bra.s	Obj4E_Solid
0000FB00                            ; ===========================================================================
0000FB00                            
0000FB00                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FB00 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FB04 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FB06 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB0C 5528 0024                  		subq.b	#2,$24(a0)
0000FB10                            
0000FB10                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB10 323C 002B                  		move.w	#$2B,d1
0000FB14 343C 0018                  		move.w	#$18,d2
0000FB18 3602                       		move.w	d2,d3
0000FB1A 5243                       		addq.w	#1,d3
0000FB1C 3828 0008                  		move.w	8(a0),d4
0000FB20 1028 0024                  		move.b	$24(a0),d0
0000FB24 3F00                       		move.w	d0,-(sp)
0000FB26 6100 0000                  		bsr.w	SolidObject
0000FB2A 301F                       		move.w	(sp)+,d0
0000FB2C 1140 0024                  		move.b	d0,$24(a0)
0000FB30 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB36 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB38 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB3C 4228 0036                  		clr.b	$36(a0)
0000FB40                            
0000FB40                            Obj4E_Animate:
0000FB40 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB46 6100 B510                  		bsr.w	AnimateSprite
0000FB4A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB50 6400                       		bcc.s	Obj4E_ChkDel
0000FB52 6100 E488                  		bsr.w	SpeedToPos
0000FB56                            
0000FB56                            Obj4E_ChkDel:
0000FB56 6100 E4AA                  		bsr.w	DisplaySprite
0000FB5A 4A28 0036                  		tst.b	$36(a0)
0000FB5E 6600                       		bne.s	locret_F17E
0000FB60 3028 0008                  		move.w	8(a0),d0
0000FB64 0240 FF80                  		andi.w	#$FF80,d0
0000FB68 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB6C 0441 0080                  		subi.w	#$80,d1
0000FB70 0241 FF80                  		andi.w	#$FF80,d1
0000FB74 9041                       		sub.w	d1,d0
0000FB76 0C40 0280                  		cmpi.w	#$280,d0
0000FB7A 6200                       		bhi.s	Obj4E_ChkGone
0000FB7C                            
0000FB7C                            locret_F17E:
0000FB7C 4E75                       		rts	
0000FB7E                            ; ===========================================================================
0000FB7E                            
0000FB7E                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FB7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB82 7000                       		moveq	#0,d0
0000FB84 1028 0023                  		move.b	$23(a0),d0
0000FB88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB8E 117C 0008 0024             		move.b	#8,$24(a0)
0000FB94 4E75                       		rts	
0000FB96                            ; ===========================================================================
0000FB96                            
0000FB96                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FB96 2268 003C                  		movea.l	$3C(a0),a1
0000FB9A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FBA0 6700                       		beq.s	Obj4E_Delete
0000FBA2 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FBA8 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBAE 6000 E452                  		bra.w	DisplaySprite
0000FBB2                            ; ===========================================================================
0000FBB2                            
0000FBB2                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FBB2 6000 E48A                  		bra.w	DeleteObject
0000FBB6                            ; ===========================================================================
0000FBB6                            ; ---------------------------------------------------------------------------
0000FBB6                            ; Object 54 - invisible	lava tag (MZ)
0000FBB6                            ; ---------------------------------------------------------------------------
0000FBB6                            
0000FBB6                            Obj54:					; XREF: Obj_Index
0000FBB6 7000                       		moveq	#0,d0
0000FBB8 1028 0024                  		move.b	$24(a0),d0
0000FBBC 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FBC0 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FBC4                            ; ===========================================================================
0000FBC4 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FBC6 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FBC8                            
0000FBC8 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FBCC                            ; ===========================================================================
0000FBCC                            
0000FBCC                            Obj54_Main:				; XREF: Obj54_Index
0000FBCC 5428 0024                  		addq.b	#2,$24(a0)
0000FBD0 7000                       		moveq	#0,d0
0000FBD2 1028 0028                  		move.b	$28(a0),d0
0000FBD6 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FBDC 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FBE4 117C 0084 0001             		move.b	#$84,1(a0)
0000FBEA                            
0000FBEA                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FBEA 3028 0008                  		move.w	8(a0),d0
0000FBEE 0240 FF80                  		andi.w	#$FF80,d0
0000FBF2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBF6 0441 0080                  		subi.w	#$80,d1
0000FBFA 0241 FF80                  		andi.w	#$FF80,d1
0000FBFE 9041                       		sub.w	d1,d0
0000FC00 6B00 E43C                  		bmi.w	DeleteObject
0000FC04 0C40 0280                  		cmpi.w	#$280,d0
0000FC08 6200 E434                  		bhi.w	DeleteObject
0000FC0C 4E75                       		rts	
0000FC0E                            ; ===========================================================================
0000FC0E                            ; ---------------------------------------------------------------------------
0000FC0E                            ; Sprite mappings - invisible lava tag (MZ)
0000FC0E                            ; ---------------------------------------------------------------------------
0000FC0E                            Map_obj54:
0000FC0E                            	include "_maps\obj54.asm"
0000FC0E                            ; ---------------------------------------------------------------------------
0000FC0E                            ; Sprite mappings - invisible lava tag (MZ)
0000FC0E                            ; ---------------------------------------------------------------------------
0000FC0E 0000                       		dc.w byte_F212-Map_obj54
0000FC10 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC12 00                         		even
0000FC12 00                         		even
0000FC12                            
0000FC12                            Ani_obj4C:
0000FC12                            	include "_anim\obj4C.asm"
0000FC12                            ; ---------------------------------------------------------------------------
0000FC12                            ; Animation script - geyser of lava (MZ)
0000FC12                            ; ---------------------------------------------------------------------------
0000FC12 0000                       		dc.w byte_F220-Ani_obj4C
0000FC14 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC16 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC18 0000                       		dc.w byte_F232-Ani_obj4C
0000FC1A 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC1C 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC1E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC28 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC2C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC30 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC38 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC3C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC40                            		even
0000FC40                            		even
0000FC40                            
0000FC40                            Ani_obj4E:
0000FC40                            	include "_anim\obj4E.asm"
0000FC40                            ; ---------------------------------------------------------------------------
0000FC40                            ; Animation script - advancing wall of lava (MZ)
0000FC40                            ; ---------------------------------------------------------------------------
0000FC40 0000                       		dc.w byte_F244-Ani_obj4E
0000FC42 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC48                            		even
0000FC48                            		even
0000FC48                            
0000FC48                            ; ---------------------------------------------------------------------------
0000FC48                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC48                            ; ---------------------------------------------------------------------------
0000FC48                            Map_obj4C:
0000FC48                            	include "_maps\obj4C.asm"
0000FC48                            ; ---------------------------------------------------------------------------
0000FC48                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC48                            ; ---------------------------------------------------------------------------
0000FC48 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC4C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC50 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC54 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FC58 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FC5C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FC60 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FC64 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FC68 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FC6C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FC70 02                         byte_F272:	dc.b 2
0000FC71 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FC76 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FC7B 02                         byte_F27D:	dc.b 2
0000FC7C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FC81 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FC86 04                         byte_F288:	dc.b 4
0000FC87 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FC8C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FC91 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FC96 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FC9B 04                         byte_F29D:	dc.b 4
0000FC9C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCA1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCA6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCAB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCB0 06                         byte_F2B2:	dc.b 6
0000FCB1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCB6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCBB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCC0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCC5 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FCCA E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FCCF 06                         byte_F2D1:	dc.b 6
0000FCD0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCD5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCDA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCDF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCE4 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FCE9 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FCEE 02                         byte_F2F0:	dc.b 2
0000FCEF E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FCF4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FCF9 02                         byte_F2FB:	dc.b 2
0000FCFA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FCFF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FD04 0A                         byte_F306:	dc.b $A
0000FD05 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD0A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD0F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD14 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD19 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD1E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD23 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD28 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD2D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD32 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD37 0A                         byte_F339:	dc.b $A
0000FD38 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD3D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD42 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD47 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD4C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD51 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD56 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD5B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FD60 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FD65 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD6A 0A                         byte_F36C:	dc.b $A
0000FD6B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD70 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD75 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD7A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD7F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD84 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD89 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD8E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD93 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD98 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD9D 06                         byte_F39F:	dc.b 6
0000FD9E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDA3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDA8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDAD B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDB2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FDB7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FDBC 06                         byte_F3BE:	dc.b 6
0000FDBD 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FDC2 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FDC7 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FDCC B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FDD1 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FDD6 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FDDB 06                         byte_F3DD:	dc.b 6
0000FDDC 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDE1 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDE6 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDEB B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDF0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDF5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDFA 10                         byte_F3FC:	dc.b $10
0000FDFB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE00 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE05 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE0A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE0F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE14 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE19 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE1E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE23 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE28 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE2D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE32 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE37 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE3C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE41 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE46 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE4B 10                         byte_F44D:	dc.b $10
0000FE4C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE51 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE56 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE5B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE60 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE65 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE6A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE6F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE74 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE79 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE7E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FE83 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FE88 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FE8D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FE92 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FE97 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FE9C 10                         byte_F49E:	dc.b $10
0000FE9D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FEA2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FEA7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEAC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEB1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEB6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEBB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEC0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEC5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FECA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FECF 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FED4 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FED9 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FEDE 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FEE3 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FEE8 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FEED 06                         byte_F4EF:	dc.b 6
0000FEEE E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FEF3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FEF8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FEFD E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FF02 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FF07 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF0C 06                         byte_F50E:	dc.b 6
0000FF0D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF12 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF17 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF1C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF21 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF26 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF2B 00                         byte_F52D:	dc.b 0
0000FF2C                            		even
0000FF2C                            		even
0000FF2C                            
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            Map_obj4E:
0000FF2C                            	include "_maps\obj4E.asm"
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C 0000                       		dc.w byte_F538-Map_obj4E
0000FF2E 0000                       		dc.w byte_F566-Map_obj4E
0000FF30 0000                       		dc.w byte_F594-Map_obj4E
0000FF32 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF34 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF36 09                         byte_F538:	dc.b 9
0000FF37 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF3C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF41 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF46 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF4B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF50 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF55 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF5A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF5F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF64 09                         byte_F566:	dc.b 9
0000FF65 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FF6A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FF6F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF74 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF79 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF7E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF83 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF88 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF8D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF92 09                         byte_F594:	dc.b 9
0000FF93 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FF98 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF9D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFA2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFA7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFAC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFB1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFB6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFBB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFC0 09                         byte_F5C2:	dc.b 9
0000FFC1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFC6 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FFCB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFD0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFD5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFDA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFDF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFE4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFE9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFEE 08                         byte_F5F0:	dc.b 8
0000FFEF E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FFF4 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFF9 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFFE 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010003 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010008 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001000D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010012 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010018 00                         		even
00010018 00                         		even
00010018                            
00010018                            ; ===========================================================================
00010018                            ; ---------------------------------------------------------------------------
00010018                            ; Object 40 - Moto Bug enemy (GHZ)
00010018                            ; ---------------------------------------------------------------------------
00010018                            
00010018                            Obj40:					; XREF: Obj_Index
00010018 7000                       		moveq	#0,d0
0001001A 1028 0024                  		move.b	$24(a0),d0
0001001E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010022 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010026                            ; ===========================================================================
00010026 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010028 0000                       		dc.w Obj40_Action-Obj40_Index
0001002A 0000                       		dc.w Obj40_Animate-Obj40_Index
0001002C 0000                       		dc.w Obj40_Delete-Obj40_Index
0001002E                            ; ===========================================================================
0001002E                            
0001002E                            Obj40_Main:				; XREF: Obj40_Index
0001002E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010036 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001003C 117C 0004 0001             		move.b	#4,1(a0)
00010042 117C 0004 0018             		move.b	#4,$18(a0)
00010048 117C 0014 0019             		move.b	#$14,$19(a0)
0001004E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010052 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010054 117C 000E 0016             		move.b	#$E,$16(a0)
0001005A 117C 0008 0017             		move.b	#8,$17(a0)
00010060 117C 000C 0020             		move.b	#$C,$20(a0)
00010066 6100 DF02                  		bsr.w	ObjectFall
0001006A 4EB9 0000 0000             		jsr	ObjHitFloor
00010070 4A41                       		tst.w	d1
00010072 6A00                       		bpl.s	locret_F68A
00010074 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010078 317C 0000 0012             		move.w	#0,$12(a0)
0001007E 5428 0024                  		addq.b	#2,$24(a0)
00010082 0868 0000 0022             		bchg	#0,$22(a0)
00010088                            
00010088                            locret_F68A:
00010088 4E75                       		rts	
0001008A                            ; ===========================================================================
0001008A                            
0001008A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001008A 5828 0024                  		addq.b	#4,$24(a0)
0001008E 6000 0000                  		bra.w	Obj40_Animate
00010092                            ; ===========================================================================
00010092                            
00010092                            Obj40_Action:				; XREF: Obj40_Index
00010092 7000                       		moveq	#0,d0
00010094 1028 0025                  		move.b	$25(a0),d0
00010098 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001009C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000100A0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000100A6 6100 AFB0                  		bsr.w	AnimateSprite
000100AA                            
000100AA                            ; ---------------------------------------------------------------------------
000100AA                            ; Routine to mark an enemy/monitor/ring	as destroyed
000100AA                            ; ---------------------------------------------------------------------------
000100AA                            
000100AA                            MarkObjGone:
000100AA 3028 0008                  		move.w	8(a0),d0
000100AE 0240 FF80                  		andi.w	#$FF80,d0
000100B2 3238 F700                  		move.w	($FFFFF700).w,d1
000100B6 0441 0080                  		subi.w	#$80,d1
000100BA 0241 FF80                  		andi.w	#$FF80,d1
000100BE 9041                       		sub.w	d1,d0
000100C0 0C40 0280                  		cmpi.w	#$280,d0
000100C4 6200 0000                  		bhi.w	Mark_ChkGone
000100C8 6000 DF38                  		bra.w	DisplaySprite
000100CC                            ; ===========================================================================
000100CC                            
000100CC                            Mark_ChkGone:
000100CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000100D0 7000                       		moveq	#0,d0
000100D2 1028 0023                  		move.b	$23(a0),d0
000100D6 6700                       		beq.s	Mark_Delete
000100D8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000100DE                            
000100DE                            Mark_Delete:
000100DE 6000 DF5E                  		bra.w	DeleteObject
000100E2                            
000100E2                            ; ===========================================================================
000100E2 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000100E4 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj40_Move:				; XREF: Obj40_Index2
000100E6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100EA 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000100EC 5428 0025                  		addq.b	#2,$25(a0)
000100F0 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000100F6 117C 0001 001C             		move.b	#1,$1C(a0)
000100FC 0868 0000 0022             		bchg	#0,$22(a0)
00010102 6600                       		bne.s	locret_F70A
00010104 4468 0010                  		neg.w	$10(a0)		; change direction
00010108                            
00010108                            locret_F70A:
00010108 4E75                       		rts	
0001010A                            ; ===========================================================================
0001010A                            
0001010A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001010A 6100 DED0                  		bsr.w	SpeedToPos
0001010E 4EB9 0000 0000             		jsr	ObjHitFloor
00010114 0C41 FFF8                  		cmpi.w	#-8,d1
00010118 6D00                       		blt.s	Obj40_Pause
0001011A 0C41 000C                  		cmpi.w	#$C,d1
0001011E 6C00                       		bge.s	Obj40_Pause
00010120 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010124 5328 0033                  		subq.b	#1,$33(a0)
00010128 6A00                       		bpl.s	locret_F756
0001012A 117C 000F 0033             		move.b	#$F,$33(a0)
00010130 6100 E356                  		bsr.w	SingleObjLoad
00010134 6600                       		bne.s	locret_F756
00010136 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001013A 3368 0008 0008             		move.w	8(a0),8(a1)
00010140 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010146 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001014C 137C 0002 001C             		move.b	#2,$1C(a1)
00010152                            
00010152                            locret_F756:
00010152 4E75                       		rts	
00010154                            ; ===========================================================================
00010154                            
00010154                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010154 5528 0025                  		subq.b	#2,$25(a0)
00010158 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001015E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010164 117C 0000 001C             		move.b	#0,$1C(a0)
0001016A 4E75                       		rts	
0001016C                            ; ===========================================================================
0001016C                            
0001016C                            Obj40_Animate:				; XREF: Obj40_Index
0001016C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010172 6100 AEE4                  		bsr.w	AnimateSprite
00010176 6000 DE8A                  		bra.w	DisplaySprite
0001017A                            ; ===========================================================================
0001017A                            
0001017A                            Obj40_Delete:				; XREF: Obj40_Index
0001017A 6000 DEC2                  		bra.w	DeleteObject
0001017E                            ; ===========================================================================
0001017E                            Ani_obj40:
0001017E                            	include "_anim\obj40.asm"
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Animation script - Motobug enemy
0001017E                            ; ---------------------------------------------------------------------------
0001017E 0000                       		dc.w byte_F788-Ani_obj40
00010180 0000                       		dc.w byte_F78C-Ani_obj40
00010182 0000                       		dc.w byte_F792-Ani_obj40
00010184 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010188 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001018E 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001019C                            		even
0001019C                            		even
0001019C                            
0001019C                            ; ---------------------------------------------------------------------------
0001019C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001019C                            ; ---------------------------------------------------------------------------
0001019C                            Map_obj40:
0001019C                            	include "_maps\obj40.asm"
0001019C                            Map_cedc:
0001019C 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0001019E 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000101A0 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000101A2 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000101A4 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000101A6 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000101A8 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000101AA 04                         Map_cedc_E: 	dc.b $4
000101AB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101B0 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101B5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101BA 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000101BF 04                         Map_cedc_23: 	dc.b $4
000101C0 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
000101C5 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
000101CA F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
000101CF 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
000101D4 05                         Map_cedc_38: 	dc.b $5
000101D5 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101DA 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
000101DF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101E4 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
000101E9 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
000101EE 01                         Map_cedc_52: 	dc.b $1
000101EF FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
000101F4 01                         Map_cedc_58: 	dc.b $1
000101F5 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
000101FA 01                         Map_cedc_5E: 	dc.b $1
000101FB FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010200 00                         Map_cedc_64: 	dc.b $0
00010202 00                         	even
00010202 00                         	even
00010202                            
00010202                            ; ===========================================================================
00010202                            ; ---------------------------------------------------------------------------
00010202                            ; Object 4F - blank
00010202                            ; ---------------------------------------------------------------------------
00010202                            
00010202                            Obj4F:					; XREF: Obj_Index
00010202 4E75                       		rts	
00010204                            
00010204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010204                            
00010204                            
00010204                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010204 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010208 D047                       		add.w	d7,d0
0001020A 0240 0003                  		andi.w	#3,d0
0001020E 6600                       		bne.s	loc_F836
00010210 7600                       		moveq	#0,d3
00010212 1628 0019                  		move.b	$19(a0),d3
00010216 4A68 0010                  		tst.w	$10(a0)
0001021A 6B00                       		bmi.s	loc_F82C
0001021C 6100 0000                  		bsr.w	ObjHitWallRight
00010220 4A41                       		tst.w	d1
00010222 6A00                       		bpl.s	loc_F836
00010224                            
00010224                            loc_F828:
00010224 7001                       		moveq	#1,d0
00010226 4E75                       		rts	
00010228                            ; ===========================================================================
00010228                            
00010228                            loc_F82C:
00010228 4643                       		not.w	d3
0001022A 6100 0000                  		bsr.w	ObjHitWallLeft
0001022E 4A41                       		tst.w	d1
00010230 6BF2                       		bmi.s	loc_F828
00010232                            
00010232                            loc_F836:
00010232 7000                       		moveq	#0,d0
00010234 4E75                       		rts	
00010236                            ; End of function Obj50_ChkWall
00010236                            
00010236                            ; ===========================================================================
00010236                            ; ---------------------------------------------------------------------------
00010236                            ; Object 50 - Yadrin enemy (SYZ)
00010236                            ; ---------------------------------------------------------------------------
00010236                            
00010236                            Obj50:					; XREF: Obj_Index
00010236 7000                       		moveq	#0,d0
00010238 1028 0024                  		move.b	$24(a0),d0
0001023C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010240 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010244                            ; ===========================================================================
00010244 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010246 0000                       		dc.w Obj50_Action-Obj50_Index
00010248                            ; ===========================================================================
00010248                            
00010248                            Obj50_Main:				; XREF: Obj50_Index
00010248 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010250 317C 247B 0002             		move.w	#$247B,2(a0)
00010256 117C 0004 0001             		move.b	#4,1(a0)
0001025C 117C 0004 0018             		move.b	#4,$18(a0)
00010262 117C 0014 0019             		move.b	#$14,$19(a0)
00010268 117C 0011 0016             		move.b	#$11,$16(a0)
0001026E 117C 0008 0017             		move.b	#8,$17(a0)
00010274 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001027A 6100 DCEE                  		bsr.w	ObjectFall
0001027E 6100 0000                  		bsr.w	ObjHitFloor
00010282 4A41                       		tst.w	d1
00010284 6A00                       		bpl.s	locret_F89E
00010286 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001028A 317C 0000 0012             		move.w	#0,$12(a0)
00010290 5428 0024                  		addq.b	#2,$24(a0)
00010294 0868 0000 0022             		bchg	#0,$22(a0)
0001029A                            
0001029A                            locret_F89E:
0001029A 4E75                       		rts	
0001029C                            ; ===========================================================================
0001029C                            
0001029C                            Obj50_Action:				; XREF: Obj50_Index
0001029C 7000                       		moveq	#0,d0
0001029E 1028 0025                  		move.b	$25(a0),d0
000102A2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000102A6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000102AA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000102B0 6100 ADA6                  		bsr.w	AnimateSprite
000102B4 6000 FDF4                  		bra.w	MarkObjGone
000102B8                            ; ===========================================================================
000102B8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000102BA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000102BC                            ; ===========================================================================
000102BC                            
000102BC                            Obj50_Move:				; XREF: Obj50_Index2
000102BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000102C0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000102C2 5428 0025                  		addq.b	#2,$25(a0)
000102C6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000102CC 117C 0001 001C             		move.b	#1,$1C(a0)
000102D2 0868 0000 0022             		bchg	#0,$22(a0)
000102D8 6600                       		bne.s	locret_F8E2
000102DA 4468 0010                  		neg.w	$10(a0)		; change direction
000102DE                            
000102DE                            locret_F8E2:
000102DE 4E75                       		rts	
000102E0                            ; ===========================================================================
000102E0                            
000102E0                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000102E0 6100 DCFA                  		bsr.w	SpeedToPos
000102E4 6100 0000                  		bsr.w	ObjHitFloor
000102E8 0C41 FFF8                  		cmpi.w	#-8,d1
000102EC 6D00                       		blt.s	Obj50_Pause
000102EE 0C41 000C                  		cmpi.w	#$C,d1
000102F2 6C00                       		bge.s	Obj50_Pause
000102F4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000102F8 6100 FF0A                  		bsr.w	Obj50_ChkWall
000102FC 6600                       		bne.s	Obj50_Pause
000102FE 4E75                       		rts	
00010300                            ; ===========================================================================
00010300                            
00010300                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010300 5528 0025                  		subq.b	#2,$25(a0)
00010304 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001030A 317C 0000 0010             		move.w	#0,$10(a0)
00010310 117C 0000 001C             		move.b	#0,$1C(a0)
00010316 4E75                       		rts	
00010318                            ; ===========================================================================
00010318                            Ani_obj50:
00010318                            	include "_anim\obj50.asm"
00010318                            ; ---------------------------------------------------------------------------
00010318                            ; Animation script - Yadrin enemy
00010318                            ; ---------------------------------------------------------------------------
00010318 0000                       		dc.w byte_F920-Ani_obj50
0001031A 0000                       		dc.w byte_F924-Ani_obj50
0001031C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010320 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001032A                            		even
0001032A                            		even
0001032A                            
0001032A                            ; ---------------------------------------------------------------------------
0001032A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001032A                            ; ---------------------------------------------------------------------------
0001032A                            Map_obj50:
0001032A                            	include "_maps\obj50.asm"
0001032A                            Map_ff24:
0001032A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001032C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001032E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010330 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010332 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010334 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010336 05                         Map_ff24_C: 	dc.b $5
00010337 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001033C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010341 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010346 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001034B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010350 05                         Map_ff24_26: 	dc.b $5
00010351 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010356 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001035B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010360 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010365 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001036A 05                         Map_ff24_40: 	dc.b $5
0001036B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010370 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010375 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001037A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001037F 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010384 05                         Map_ff24_5A: 	dc.b $5
00010385 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001038A FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001038F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010394 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010399 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001039E 05                         Map_ff24_74: 	dc.b $5
0001039F F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103A4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103A9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103AE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103B3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103B8 05                         Map_ff24_8E: 	dc.b $5
000103B9 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103BE 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103C3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103C8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103CD 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103D2                            	even
000103D2                            	even
000103D2                            
000103D2                            ; ---------------------------------------------------------------------------
000103D2                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000103D2                            ;
000103D2                            ; variables:
000103D2                            ; d1 = width
000103D2                            ; d2 = height /	2 (when	jumping)
000103D2                            ; d3 = height /	2 (when	walking)
000103D2                            ; d4 = x-axis position
000103D2                            ; ---------------------------------------------------------------------------
000103D2                            
000103D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103D2                            
000103D2                            
000103D2                            SolidObject:
000103D2 4A28 0025                  		tst.b	$25(a0)
000103D6 6700 0000                  		beq.w	loc_FAC8
000103DA 3401                       		move.w	d1,d2
000103DC D442                       		add.w	d2,d2
000103DE 43F8 D000                  		lea	($FFFFD000).w,a1
000103E2 0829 0001 0022             		btst	#1,$22(a1)
000103E8 6600                       		bne.s	loc_F9FE
000103EA 3029 0008                  		move.w	8(a1),d0
000103EE 9068 0008                  		sub.w	8(a0),d0
000103F2 D041                       		add.w	d1,d0
000103F4 6B00                       		bmi.s	loc_F9FE
000103F6 B042                       		cmp.w	d2,d0
000103F8 6500                       		bcs.s	loc_FA12
000103FA                            
000103FA                            loc_F9FE:
000103FA 08A9 0003 0022             		bclr	#3,$22(a1)
00010400 08A8 0003 0022             		bclr	#3,$22(a0)
00010406 4228 0025                  		clr.b	$25(a0)
0001040A 7800                       		moveq	#0,d4
0001040C 4E75                       		rts	
0001040E                            ; ===========================================================================
0001040E                            
0001040E                            loc_FA12:
0001040E 3404                       		move.w	d4,d2
00010410 4EB9 0000 82E6             		jsr	MvSonicOnPtfm 
00010416 7800                       		moveq	#0,d4
00010418 4E75                       		rts	
0001041A                            ; ===========================================================================
0001041A                            
0001041A                            SolidObject71:				; XREF: Obj71_Solid
0001041A 4A28 0025                  		tst.b	$25(a0)
0001041E 6700 0000                  		beq.w	loc_FAD0
00010422 3401                       		move.w	d1,d2
00010424 D442                       		add.w	d2,d2
00010426 43F8 D000                  		lea	($FFFFD000).w,a1
0001042A 0829 0001 0022             		btst	#1,$22(a1)
00010430 6600                       		bne.s	loc_FA44
00010432 3029 0008                  		move.w	8(a1),d0
00010436 9068 0008                  		sub.w	8(a0),d0
0001043A D041                       		add.w	d1,d0
0001043C 6B00                       		bmi.s	loc_FA44
0001043E B042                       		cmp.w	d2,d0
00010440 6500                       		bcs.s	loc_FA58
00010442                            
00010442                            loc_FA44:
00010442 08A9 0003 0022             		bclr	#3,$22(a1)
00010448 08A8 0003 0022             		bclr	#3,$22(a0)
0001044E 4228 0025                  		clr.b	$25(a0)
00010452 7800                       		moveq	#0,d4
00010454 4E75                       		rts	
00010456                            ; ===========================================================================
00010456                            
00010456                            loc_FA58:
00010456 3404                       		move.w	d4,d2
00010458                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010458 7800                       		moveq	#0,d4
0001045A 4E75                       		rts	
0001045C                            ; ===========================================================================
0001045C                            
0001045C                            SolidObject2F:				; XREF: Obj2F_Solid
0001045C 43F8 D000                  		lea	($FFFFD000).w,a1
00010460 4A28 0001                  		tst.b	1(a0)
00010464 6A00 0000                  		bpl.w	loc_FB92
00010468 3029 0008                  		move.w	8(a1),d0
0001046C 9068 0008                  		sub.w	8(a0),d0
00010470 D041                       		add.w	d1,d0
00010472 6B00 0000                  		bmi.w	loc_FB92
00010476 3601                       		move.w	d1,d3
00010478 D643                       		add.w	d3,d3
0001047A B043                       		cmp.w	d3,d0
0001047C 6200 0000                  		bhi.w	loc_FB92
00010480 3A00                       		move.w	d0,d5
00010482 0828 0000 0001             		btst	#0,1(a0)
00010488 6700                       		beq.s	loc_FA94
0001048A 4645                       		not.w	d5
0001048C DA43                       		add.w	d3,d5
0001048E                            
0001048E                            loc_FA94:
0001048E E24D                       		lsr.w	#1,d5
00010490 7600                       		moveq	#0,d3
00010492 1632 5000                  		move.b	(a2,d5.w),d3
00010496 9612                       		sub.b	(a2),d3
00010498 3A28 000C                  		move.w	$C(a0),d5
0001049C 9A43                       		sub.w	d3,d5
0001049E 1629 0016                  		move.b	$16(a1),d3
000104A2 4883                       		ext.w	d3
000104A4 D443                       		add.w	d3,d2
000104A6 3629 000C                  		move.w	$C(a1),d3
000104AA 9645                       		sub.w	d5,d3
000104AC 5843                       		addq.w	#4,d3
000104AE D642                       		add.w	d2,d3
000104B0 6B00 0000                  		bmi.w	loc_FB92
000104B4 3802                       		move.w	d2,d4
000104B6 D844                       		add.w	d4,d4
000104B8 B644                       		cmp.w	d4,d3
000104BA 6400 0000                  		bcc.w	loc_FB92
000104BE 6000 0000                  		bra.w	loc_FB0E
000104C2                            ; ===========================================================================
000104C2                            
000104C2                            loc_FAC8:
000104C2 4A28 0001                  		tst.b	1(a0)
000104C6 6A00 0000                  		bpl.w	loc_FB92
000104CA                            
000104CA                            loc_FAD0:
000104CA 43F8 D000                  		lea	($FFFFD000).w,a1
000104CE 3029 0008                  		move.w	8(a1),d0
000104D2 9068 0008                  		sub.w	8(a0),d0
000104D6 D041                       		add.w	d1,d0
000104D8 6B00 0000                  		bmi.w	loc_FB92
000104DC 3601                       		move.w	d1,d3
000104DE D643                       		add.w	d3,d3
000104E0 B043                       		cmp.w	d3,d0
000104E2 6200 0000                  		bhi.w	loc_FB92
000104E6 1629 0016                  		move.b	$16(a1),d3
000104EA 4883                       		ext.w	d3
000104EC D443                       		add.w	d3,d2
000104EE 3629 000C                  		move.w	$C(a1),d3
000104F2 9668 000C                  		sub.w	$C(a0),d3
000104F6 5843                       		addq.w	#4,d3
000104F8 D642                       		add.w	d2,d3
000104FA 6B00 0000                  		bmi.w	loc_FB92
000104FE 3802                       		move.w	d2,d4
00010500 D844                       		add.w	d4,d4
00010502 B644                       		cmp.w	d4,d3
00010504 6400 0000                  		bcc.w	loc_FB92
00010508                            
00010508                            loc_FB0E:
00010508 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001050C 6B00 0000                  		bmi.w	loc_FB92
00010510 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010516 6400 0000                  		bcc.w	loc_FB92
0001051A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001051E 6600 0000                  		bne.w	loc_FBAC
00010522 3A00                       		move.w	d0,d5
00010524 B240                       		cmp.w	d0,d1
00010526 6400                       		bcc.s	loc_FB36
00010528 D241                       		add.w	d1,d1
0001052A 9041                       		sub.w	d1,d0
0001052C 3A00                       		move.w	d0,d5
0001052E 4445                       		neg.w	d5
00010530                            
00010530                            loc_FB36:
00010530 3203                       		move.w	d3,d1
00010532 B443                       		cmp.w	d3,d2
00010534 6400                       		bcc.s	loc_FB44
00010536 5943                       		subq.w	#4,d3
00010538 9644                       		sub.w	d4,d3
0001053A 3203                       		move.w	d3,d1
0001053C 4441                       		neg.w	d1
0001053E                            
0001053E                            loc_FB44:
0001053E BA41                       		cmp.w	d1,d5
00010540 6200 0000                  		bhi.w	loc_FBB0
00010544 0C41 0004                  		cmpi.w	#4,d1
00010548 6300                       		bls.s	loc_FB8C
0001054A 4A40                       		tst.w	d0
0001054C 6700                       		beq.s	loc_FB70
0001054E 6B00                       		bmi.s	loc_FB5E
00010550 4A69 0010                  		tst.w	$10(a1)
00010554 6B00                       		bmi.s	loc_FB70
00010556 6000                       		bra.s	loc_FB64
00010558                            ; ===========================================================================
00010558                            
00010558                            loc_FB5E:
00010558 4A69 0010                  		tst.w	$10(a1)
0001055C 6A00                       		bpl.s	loc_FB70
0001055E                            
0001055E                            loc_FB64:
0001055E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010564 337C 0000 0010             		move.w	#0,$10(a1)
0001056A                            
0001056A                            loc_FB70:
0001056A 9169 0008                  		sub.w	d0,8(a1)
0001056E 0829 0001 0022             		btst	#1,$22(a1)
00010574 6600                       		bne.s	loc_FB8C
00010576 08E9 0005 0022             		bset	#5,$22(a1)
0001057C 08E8 0005 0022             		bset	#5,$22(a0)
00010582 7801                       		moveq	#1,d4
00010584 4E75                       		rts	
00010586                            ; ===========================================================================
00010586                            
00010586                            loc_FB8C:
00010586 6100                       		bsr.s	loc_FBA0
00010588 7801                       		moveq	#1,d4
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            loc_FB92:
0001058C 0828 0005 0022             		btst	#5,$22(a0)
00010592 6700                       		beq.s	loc_FBAC
00010594 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001059A                            
0001059A                            loc_FBA0:
0001059A 08A8 0005 0022             		bclr	#5,$22(a0)
000105A0 08A9 0005 0022             		bclr	#5,$22(a1)
000105A6                            
000105A6                            loc_FBAC:
000105A6 7800                       		moveq	#0,d4
000105A8 4E75                       		rts	
000105AA                            ; ===========================================================================
000105AA                            
000105AA                            loc_FBB0:
000105AA 4A43                       		tst.w	d3
000105AC 6B00                       		bmi.s	loc_FBBC
000105AE 0C43 0010                  		cmpi.w	#$10,d3
000105B2 6500                       		bcs.s	loc_FBEE
000105B4 60D6                       		bra.s	loc_FB92
000105B6                            ; ===========================================================================
000105B6                            
000105B6                            loc_FBBC:
000105B6 4A69 0012                  		tst.w	$12(a1)
000105BA 6700                       		beq.s	loc_FBD6
000105BC 6A00                       		bpl.s	loc_FBD2
000105BE 4A43                       		tst.w	d3
000105C0 6A00                       		bpl.s	loc_FBD2
000105C2 9769 000C                  		sub.w	d3,$C(a1)
000105C6 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000105CC                            
000105CC                            loc_FBD2:
000105CC 78FF                       		moveq	#-1,d4
000105CE 4E75                       		rts	
000105D0                            ; ===========================================================================
000105D0                            
000105D0                            loc_FBD6:
000105D0 0829 0001 0022             		btst	#1,$22(a1)
000105D6 66F4                       		bne.s	loc_FBD2
000105D8 2F08                       		move.l	a0,-(sp)
000105DA 2049                       		movea.l	a1,a0
000105DC 4EB9 0000 0000             		jsr	KillSonic
000105E2 205F                       		movea.l	(sp)+,a0
000105E4 78FF                       		moveq	#-1,d4
000105E6 4E75                       		rts	
000105E8                            ; ===========================================================================
000105E8                            
000105E8                            loc_FBEE:
000105E8 5943                       		subq.w	#4,d3
000105EA 7200                       		moveq	#0,d1
000105EC 1228 0019                  		move.b	$19(a0),d1
000105F0 3401                       		move.w	d1,d2
000105F2 D442                       		add.w	d2,d2
000105F4 D269 0008                  		add.w	8(a1),d1
000105F8 9268 0008                  		sub.w	8(a0),d1
000105FC 6B00                       		bmi.s	loc_FC28
000105FE B242                       		cmp.w	d2,d1
00010600 6400                       		bcc.s	loc_FC28
00010602 4A69 0012                  		tst.w	$12(a1)
00010606 6B00                       		bmi.s	loc_FC28
00010608 9769 000C                  		sub.w	d3,$C(a1)
0001060C 5369 000C                  		subq.w	#1,$C(a1)
00010610 6100                       		bsr.s	sub_FC2C
00010612 117C 0002 0025             		move.b	#2,$25(a0)
00010618 08E8 0003 0022             		bset	#3,$22(a0)
0001061E 78FF                       		moveq	#-1,d4
00010620 4E75                       		rts	
00010622                            ; ===========================================================================
00010622                            
00010622                            loc_FC28:
00010622 7800                       		moveq	#0,d4
00010624 4E75                       		rts	
00010626                            ; End of function SolidObject
00010626                            
00010626                            
00010626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010626                            
00010626                            
00010626                            sub_FC2C:				; XREF: SolidObject
00010626 0829 0003 0022             		btst	#3,$22(a1)
0001062C 6700                       		beq.s	loc_FC4E
0001062E 7000                       		moveq	#0,d0
00010630 1029 003D                  		move.b	$3D(a1),d0
00010634 ED48                       		lsl.w	#6,d0
00010636 0680 00FF D000             		addi.l	#$FFD000,d0
0001063C 2440                       		movea.l	d0,a2
0001063E 08AA 0003 0022             		bclr	#3,$22(a2)
00010644 422A 0025                  		clr.b	$25(a2)
00010648                            
00010648                            loc_FC4E:
00010648 3008                       		move.w	a0,d0
0001064A 0440 D000                  		subi.w	#-$3000,d0
0001064E EC48                       		lsr.w	#6,d0
00010650 0240 007F                  		andi.w	#$7F,d0
00010654 1340 003D                  		move.b	d0,$3D(a1)
00010658 137C 0000 0026             		move.b	#0,$26(a1)
0001065E 337C 0000 0012             		move.w	#0,$12(a1)
00010664 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001066A 0829 0001 0022             		btst	#1,$22(a1)
00010670 6700                       		beq.s	loc_FC84
00010672 2F08                       		move.l	a0,-(sp)
00010674 2049                       		movea.l	a1,a0
00010676 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001067C 205F                       		movea.l	(sp)+,a0
0001067E                            
0001067E                            loc_FC84:
0001067E 08E9 0003 0022             		bset	#3,$22(a1)
00010684 08E8 0003 0022             		bset	#3,$22(a0)
0001068A 4E75                       		rts	
0001068C                            ; End of function sub_FC2C
0001068C                            
0001068C                            ; ===========================================================================
0001068C                            ; ---------------------------------------------------------------------------
0001068C                            ; Object 51 - smashable	green block (MZ)
0001068C                            ; ---------------------------------------------------------------------------
0001068C                            
0001068C                            Obj51:					; XREF: Obj_Index
0001068C 7000                       		moveq	#0,d0
0001068E 1028 0024                  		move.b	$24(a0),d0
00010692 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010696 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001069A 6000 FA0E                  		bra.w	MarkObjGone
0001069E                            ; ===========================================================================
0001069E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000106A0 0000                       		dc.w Obj51_Solid-Obj51_Index
000106A2 0000                       		dc.w Obj51_Display-Obj51_Index
000106A4                            ; ===========================================================================
000106A4                            
000106A4                            Obj51_Main:				; XREF: Obj51_Index
000106A4 5428 0024                  		addq.b	#2,$24(a0)
000106A8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000106B0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106B6 117C 0004 0001             		move.b	#4,1(a0)
000106BC 117C 0010 0019             		move.b	#$10,$19(a0)
000106C2 117C 0004 0018             		move.b	#4,$18(a0)
000106C8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000106CE                            
000106CE                            Obj51_Solid:				; XREF: Obj51_Index
000106CE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000106D4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000106DA 323C 001B                  		move.w	#$1B,d1
000106DE 343C 0010                  		move.w	#$10,d2
000106E2 363C 0011                  		move.w	#$11,d3
000106E6 3828 0008                  		move.w	8(a0),d4
000106EA 6100 FCE6                  		bsr.w	SolidObject
000106EE 0828 0003 0022             		btst	#3,$22(a0)
000106F4 6600                       		bne.s	Obj51_Smash
000106F6                            
000106F6                            locret_FCFC:
000106F6 4E75                       		rts	
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            Obj51_Smash:				; XREF: Obj51_Solid
000106F8 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000106FE 66F6                       		bne.s	locret_FCFC	; if not, branch
00010700 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010706 08E9 0002 0022             		bset	#2,$22(a1)
0001070C 137C 000E 0016             		move.b	#$E,$16(a1)
00010712 137C 0007 0017             		move.b	#7,$17(a1)
00010718 137C 0002 001C             		move.b	#2,$1C(a1)
0001071E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010724 08E9 0001 0022             		bset	#1,$22(a1)
0001072A 08A9 0003 0022             		bclr	#3,$22(a1)
00010730 137C 0002 0024             		move.b	#2,$24(a1)
00010736 08A8 0003 0022             		bclr	#3,$22(a0)
0001073C 4228 0025                  		clr.b	$25(a0)
00010740 117C 0001 001A             		move.b	#1,$1A(a0)
00010746 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001074C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001074E 343C 0038                  		move.w	#$38,d2
00010752 6100 D456                  		bsr.w	SmashObject
00010756 6100 DD30                  		bsr.w	SingleObjLoad
0001075A 6600                       		bne.s	Obj51_Display
0001075C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010760 3368 0008 0008             		move.w	8(a0),8(a1)
00010766 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001076C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010770 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010774 0C42 0006                  		cmpi.w	#6,d2
00010778 6500                       		bcs.s	Obj51_Bonus
0001077A 7406                       		moveq	#6,d2
0001077C                            
0001077C                            Obj51_Bonus:
0001077C 7000                       		moveq	#0,d0
0001077E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010782 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010788 6500                       		bcs.s	loc_FD98	; if not, branch
0001078A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001078E 740A                       		moveq	#10,d2
00010790                            
00010790                            loc_FD98:
00010790 4EB9 0000 0000             		jsr	AddPoints
00010796 E24A                       		lsr.w	#1,d2
00010798 1342 001A                  		move.b	d2,$1A(a1)
0001079C                            
0001079C                            Obj51_Display:				; XREF: Obj51_Index
0001079C 6100 D83E                  		bsr.w	SpeedToPos
000107A0 0668 0038 0012             		addi.w	#$38,$12(a0)
000107A6 6100 D85A                  		bsr.w	DisplaySprite
000107AA 4A28 0001                  		tst.b	1(a0)
000107AE 6A00 D88E                  		bpl.w	DeleteObject
000107B2 4E75                       		rts	
000107B4                            ; ===========================================================================
000107B4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000107B8 FF00 FF00                  		dc.w $FF00, $FF00
000107BC 0200 FE00                  		dc.w $200, $FE00
000107C0 0100 FF00                  		dc.w $100, $FF00
000107C4                            
000107C4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000107CC                            ; ---------------------------------------------------------------------------
000107CC                            ; Sprite mappings - smashable green block (MZ)
000107CC                            ; ---------------------------------------------------------------------------
000107CC                            Map_obj51:
000107CC                            	include "_maps\obj51.asm"
000107CC                            ; ---------------------------------------------------------------------------
000107CC                            ; Sprite mappings - smashable green block (MZ)
000107CC                            ; ---------------------------------------------------------------------------
000107CC 0000                       		dc.w byte_FDD8-Map_obj51
000107CE 0000                       		dc.w byte_FDE3-Map_obj51
000107D0 02                         byte_FDD8:	dc.b 2
000107D1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000107D6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000107DB 04                         byte_FDE3:	dc.b 4
000107DC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000107E1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000107E6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000107EB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000107F0                            		even
000107F0                            		even
000107F0                            
000107F0                            ; ===========================================================================
000107F0                            ; ---------------------------------------------------------------------------
000107F0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000107F0                            ; ---------------------------------------------------------------------------
000107F0                            
000107F0                            Obj52:					; XREF: Obj_Index
000107F0 7000                       		moveq	#0,d0
000107F2 1028 0024                  		move.b	$24(a0),d0
000107F6 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000107FA 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000107FE                            ; ===========================================================================
000107FE 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010800 0000                       		dc.w Obj52_Platform-Obj52_Index
00010802 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010804                            
00010804 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010806 2001                       		dc.b $20, 1
00010808 2002                       		dc.b $20, 2
0001080A 4003                       		dc.b $40, 3
0001080C 3004                       		dc.b $30, 4
0001080E                            ; ===========================================================================
0001080E                            
0001080E                            Obj52_Main:				; XREF: Obj52_Index
0001080E 5428 0024                  		addq.b	#2,$24(a0)
00010812 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001081A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010820 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010826 6600                       		bne.s	loc_FE44
00010828 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010830 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010836 117C 0007 0016             		move.b	#7,$16(a0)
0001083C                            
0001083C                            loc_FE44:
0001083C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010842 6600                       		bne.s	loc_FE60
00010844 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001084A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010850 6700                       		beq.s	loc_FE60	; if yes, branch
00010852 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010858                            
00010858                            loc_FE60:
00010858 117C 0004 0001             		move.b	#4,1(a0)
0001085E 7000                       		moveq	#0,d0
00010860 1028 0028                  		move.b	$28(a0),d0
00010864 E648                       		lsr.w	#3,d0
00010866 0240 001E                  		andi.w	#$1E,d0
0001086A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001086E 115A 0019                  		move.b	(a2)+,$19(a0)
00010872 115A 001A                  		move.b	(a2)+,$1A(a0)
00010876 117C 0004 0018             		move.b	#4,$18(a0)
0001087C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010882 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010888 0228 000F 0028             		andi.b	#$F,$28(a0)
0001088E                            
0001088E                            Obj52_Platform:				; XREF: Obj52_Index
0001088E 6100 0000                  		bsr.w	Obj52_Move
00010892 7200                       		moveq	#0,d1
00010894 1228 0019                  		move.b	$19(a0),d1
00010898 4EB9 0000 7C14             		jsr	(PlatformObject).l
0001089E 6000                       		bra.s	Obj52_ChkDel
000108A0                            ; ===========================================================================
000108A0                            
000108A0                            Obj52_StandOn:				; XREF: Obj52_Index
000108A0 7200                       		moveq	#0,d1
000108A2 1228 0019                  		move.b	$19(a0),d1
000108A6 4EB9 0000 7D88             		jsr	(ExitPlatform).l
000108AC 3F28 0008                  		move.w	8(a0),-(sp)
000108B0 6100 0000                  		bsr.w	Obj52_Move
000108B4 341F                       		move.w	(sp)+,d2
000108B6 4EB9 0000 82F2             		jsr	(MvSonicOnPtfm2).l
000108BC                            
000108BC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000108BC 3028 0030                  		move.w	$30(a0),d0
000108C0 0240 FF80                  		andi.w	#$FF80,d0
000108C4 3238 F700                  		move.w	($FFFFF700).w,d1
000108C8 0441 0080                  		subi.w	#$80,d1
000108CC 0241 FF80                  		andi.w	#$FF80,d1
000108D0 9041                       		sub.w	d1,d0
000108D2 0C40 0280                  		cmpi.w	#$280,d0
000108D6 6200 D766                  		bhi.w	DeleteObject
000108DA 6000 D726                  		bra.w	DisplaySprite
000108DE                            ; ===========================================================================
000108DE                            
000108DE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000108DE 7000                       		moveq	#0,d0
000108E0 1028 0028                  		move.b	$28(a0),d0
000108E4 0240 000F                  		andi.w	#$F,d0
000108E8 D040                       		add.w	d0,d0
000108EA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000108EE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000108F2                            ; ===========================================================================
000108F2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000108F6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000108FA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000108FE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010902 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010906 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010908                            ; ===========================================================================
00010908                            
00010908                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010908 4E75                       		rts	
0001090A                            ; ===========================================================================
0001090A                            
0001090A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001090A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001090E 323C 0060                  		move.w	#$60,d1
00010912 0828 0000 0022             		btst	#0,$22(a0)
00010918 6700                       		beq.s	loc_FF26
0001091A 4440                       		neg.w	d0
0001091C D041                       		add.w	d1,d0
0001091E                            
0001091E                            loc_FF26:
0001091E 3228 0030                  		move.w	$30(a0),d1
00010922 9240                       		sub.w	d0,d1
00010924 3141 0008                  		move.w	d1,8(a0)
00010928 4E75                       		rts	
0001092A                            ; ===========================================================================
0001092A                            
0001092A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001092A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010930 6600                       		bne.s	Obj52_02_Wait
00010932 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010936                            
00010936                            Obj52_02_Wait:
00010936 4E75                       		rts	
00010938                            ; ===========================================================================
00010938                            
00010938                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010938 7600                       		moveq	#0,d3
0001093A 1628 0019                  		move.b	$19(a0),d3
0001093E 6100 0000                  		bsr.w	ObjHitWallRight
00010942 4A41                       		tst.w	d1		; has the platform hit a wall?
00010944 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010946 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001094A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010950 4E75                       		rts	
00010952                            ; ===========================================================================
00010952                            
00010952                            Obj52_03_End:
00010952 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010956 4E75                       		rts	
00010958                            ; ===========================================================================
00010958                            
00010958                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010958 7600                       		moveq	#0,d3
0001095A 1628 0019                  		move.b	$19(a0),d3
0001095E 6100 0000                  		bsr.w	ObjHitWallRight
00010962 4A41                       		tst.w	d1		; has the platform hit a wall?
00010964 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010966 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001096A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010970 4E75                       		rts	
00010972                            ; ===========================================================================
00010972                            
00010972                            Obj52_05_End:
00010972 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010976 4E75                       		rts	
00010978                            ; ===========================================================================
00010978                            
00010978                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010978 6100 D662                  		bsr.w	SpeedToPos
0001097C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010982 6100 0000                  		bsr.w	ObjHitFloor
00010986 4A41                       		tst.w	d1		; has platform hit the floor?
00010988 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001098C D368 000C                  		add.w	d1,$C(a0)
00010990 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010994 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010998                            
00010998                            locret_FFA0:
00010998 4E75                       		rts	
0001099A                            ; ===========================================================================
0001099A                            
0001099A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001099A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001099E 6700                       		beq.s	Obj52_07_ChkDel
000109A0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000109A4                            
000109A4                            Obj52_07_ChkDel:
000109A4 588F                       		addq.l	#4,sp
000109A6 3028 0030                  		move.w	$30(a0),d0
000109AA 0240 FF80                  		andi.w	#$FF80,d0
000109AE 3238 F700                  		move.w	($FFFFF700).w,d1
000109B2 0441 0080                  		subi.w	#$80,d1
000109B6 0241 FF80                  		andi.w	#$FF80,d1
000109BA 9041                       		sub.w	d1,d0
000109BC 0C40 0280                  		cmpi.w	#$280,d0
000109C0 6200 D67C                  		bhi.w	DeleteObject
000109C4 4E75                       		rts	
000109C6                            ; ===========================================================================
000109C6                            
000109C6                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000109C6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109CA 323C 0080                  		move.w	#$80,d1
000109CE 0828 0000 0022             		btst	#0,$22(a0)
000109D4 6700                       		beq.s	loc_FFE2
000109D6 4440                       		neg.w	d0
000109D8 D041                       		add.w	d1,d0
000109DA                            
000109DA                            loc_FFE2:
000109DA 3228 0032                  		move.w	$32(a0),d1
000109DE 9240                       		sub.w	d0,d1
000109E0 3141 000C                  		move.w	d1,$C(a0)
000109E4 4E75                       		rts	
000109E6                            ; ===========================================================================
000109E6                            
000109E6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000109E6 7600                       		moveq	#0,d3
000109E8 1628 0019                  		move.b	$19(a0),d3
000109EC D643                       		add.w	d3,d3
000109EE 7208                       		moveq	#8,d1
000109F0 0828 0000 0022             		btst	#0,$22(a0)
000109F6 6700                       		beq.s	loc_10004
000109F8 4441                       		neg.w	d1
000109FA 4443                       		neg.w	d3
000109FC                            
000109FC                            loc_10004:
000109FC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010A00 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010A02 3028 0008                  		move.w	8(a0),d0
00010A06 9068 0030                  		sub.w	$30(a0),d0
00010A0A B043                       		cmp.w	d3,d0
00010A0C 6700                       		beq.s	Obj52_0A_Wait
00010A0E D368 0008                  		add.w	d1,8(a0)	; move platform
00010A12 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A18 4E75                       		rts	
00010A1A                            ; ===========================================================================
00010A1A                            
00010A1A                            Obj52_0A_Wait:
00010A1A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A1E 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A20 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A26                            
00010A26                            locret_1002E:
00010A26 4E75                       		rts	
00010A28                            ; ===========================================================================
00010A28                            
00010A28                            Obj52_0A_Back:
00010A28 3028 0008                  		move.w	8(a0),d0
00010A2C 9068 0030                  		sub.w	$30(a0),d0
00010A30 6700                       		beq.s	Obj52_0A_Reset
00010A32 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A36 4E75                       		rts	
00010A38                            ; ===========================================================================
00010A38                            
00010A38                            Obj52_0A_Reset:
00010A38 4268 0036                  		clr.w	$36(a0)
00010A3C 5328 0028                  		subq.b	#1,$28(a0)
00010A40 4E75                       		rts	
00010A42                            ; ===========================================================================
00010A42                            ; ---------------------------------------------------------------------------
00010A42                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A42                            ; ---------------------------------------------------------------------------
00010A42                            Map_obj52:
00010A42                            	include "_maps\obj52mz.asm"
00010A42                            ; ---------------------------------------------------------------------------
00010A42                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A42                            ; ---------------------------------------------------------------------------
00010A42 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A46 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A4A 0000                       		dc.w byte_1008F-Map_obj52
00010A4C 01                         byte_10054:	dc.b 1
00010A4D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A52 02                         byte_1005A:	dc.b 2
00010A53 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010A58 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010A5D 04                         byte_10065:	dc.b 4
00010A5E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010A63 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010A68 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010A6D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010A72 04                         byte_1007A:	dc.b 4
00010A73 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010A78 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010A7D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010A82 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010A87 03                         byte_1008F:	dc.b 3
00010A88 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010A8D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A92 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010A98 00                         		even
00010A98 00                         		even
00010A98                            
00010A98                            ; ---------------------------------------------------------------------------
00010A98                            ; Sprite mappings - moving block (LZ)
00010A98                            ; ---------------------------------------------------------------------------
00010A98                            Map_obj52a:
00010A98                            	include "_maps\obj52lz.asm"
00010A98                            ; ---------------------------------------------------------------------------
00010A98                            ; Sprite mappings - moving block (LZ)
00010A98                            ; ---------------------------------------------------------------------------
00010A98 0000                       		dc.w byte_100A2-Map_obj52a
00010A9A 01                         byte_100A2:	dc.b 1
00010A9B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010AA0                            		even
00010AA0                            		even
00010AA0                            
00010AA0                            ; ===========================================================================
00010AA0                            ; ---------------------------------------------------------------------------
00010AA0                            ; Object 55 - Basaran enemy (MZ)
00010AA0                            ; ---------------------------------------------------------------------------
00010AA0                            
00010AA0                            Obj55:					; XREF: Obj_Index
00010AA0 7000                       		moveq	#0,d0
00010AA2 1028 0024                  		move.b	$24(a0),d0
00010AA6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010AAA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010AAE                            ; ===========================================================================
00010AAE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010AB0 0000                       		dc.w Obj55_Action-Obj55_Index
00010AB2                            ; ===========================================================================
00010AB2                            
00010AB2                            Obj55_Main:				; XREF: Obj55_Index
00010AB2 5428 0024                  		addq.b	#2,$24(a0)
00010AB6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010ABE 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010AC4 117C 0004 0001             		move.b	#4,1(a0)
00010ACA 117C 000C 0016             		move.b	#$C,$16(a0)
00010AD0 117C 0002 0018             		move.b	#2,$18(a0)
00010AD6 117C 000B 0020             		move.b	#$B,$20(a0)
00010ADC 117C 0010 0019             		move.b	#$10,$19(a0)
00010AE2                            
00010AE2                            Obj55_Action:				; XREF: Obj55_Index
00010AE2 7000                       		moveq	#0,d0
00010AE4 1028 0025                  		move.b	$25(a0),d0
00010AE8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010AEC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010AF0 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010AF6 6100 A560                  		bsr.w	AnimateSprite
00010AFA 6000 F5AE                  		bra.w	MarkObjGone
00010AFE                            ; ===========================================================================
00010AFE 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010B00 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010B02 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010B04 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010B06                            ; ===========================================================================
00010B06                            
00010B06                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010B06 343C 0080                  		move.w	#$80,d2
00010B0A 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B0E 6400                       		bcc.s	Obj55_NoDrop
00010B10 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B14 3140 0036                  		move.w	d0,$36(a0)
00010B18 9068 000C                  		sub.w	$C(a0),d0
00010B1C 6500                       		bcs.s	Obj55_NoDrop
00010B1E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B22 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B24 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B28 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B2A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B2E D007                       		add.b	d7,d0
00010B30 0200 0007                  		andi.b	#7,d0
00010B34 6600                       		bne.s	Obj55_NoDrop
00010B36 117C 0001 001C             		move.b	#1,$1C(a0)
00010B3C 5428 0025                  		addq.b	#2,$25(a0)
00010B40                            
00010B40                            Obj55_NoDrop:
00010B40 4E75                       		rts	
00010B42                            ; ===========================================================================
00010B42                            
00010B42                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B42 6100 D498                  		bsr.w	SpeedToPos
00010B46 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B4C 343C 0080                  		move.w	#$80,d2
00010B50 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B54 3028 0036                  		move.w	$36(a0),d0
00010B58 9068 000C                  		sub.w	$C(a0),d0
00010B5C 6500                       		bcs.s	Obj55_ChkDel
00010B5E 0C40 0010                  		cmpi.w	#$10,d0
00010B62 6400                       		bcc.s	locret_10180
00010B64 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010B68 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010B6E 117C 0002 001C             		move.b	#2,$1C(a0)
00010B74 5428 0025                  		addq.b	#2,$25(a0)
00010B78                            
00010B78                            locret_10180:
00010B78 4E75                       		rts	
00010B7A                            ; ===========================================================================
00010B7A                            
00010B7A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010B7A 4A28 0001                  		tst.b	1(a0)
00010B7E 6A00 D4BE                  		bpl.w	DeleteObject
00010B82 4E75                       		rts	
00010B84                            ; ===========================================================================
00010B84                            
00010B84                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010B84 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B88 0200 000F                  		andi.b	#$F,d0
00010B8C 6600                       		bne.s	loc_101A0
00010B8E 303C 00C0                  		move.w	#$C0,d0
00010B92 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flapping sound
00010B98                            
00010B98                            loc_101A0:
00010B98 6100 D442                  		bsr.w	SpeedToPos
00010B9C 3038 D008                  		move.w	($FFFFD008).w,d0
00010BA0 9068 0008                  		sub.w	8(a0),d0
00010BA4 6400                       		bcc.s	loc_101B0
00010BA6 4440                       		neg.w	d0
00010BA8                            
00010BA8                            loc_101B0:
00010BA8 0C40 0080                  		cmpi.w	#$80,d0
00010BAC 6500                       		bcs.s	locret_101C6
00010BAE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BB2 D007                       		add.b	d7,d0
00010BB4 0200 0007                  		andi.b	#7,d0
00010BB8 6600                       		bne.s	locret_101C6
00010BBA 5428 0025                  		addq.b	#2,$25(a0)
00010BBE                            
00010BBE                            locret_101C6:
00010BBE 4E75                       		rts	
00010BC0                            ; ===========================================================================
00010BC0                            
00010BC0                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010BC0 6100 D41A                  		bsr.w	SpeedToPos
00010BC4 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010BCA 6100 0000                  		bsr.w	ObjHitCeiling
00010BCE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010BD0 6A00                       		bpl.s	locret_101F4	; if not, branch
00010BD2 9368 000C                  		sub.w	d1,$C(a0)
00010BD6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010BDC 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010BE0 4268 0012                  		clr.w	$12(a0)
00010BE4 4228 001C                  		clr.b	$1C(a0)
00010BE8 4228 0025                  		clr.b	$25(a0)
00010BEC                            
00010BEC                            locret_101F4:
00010BEC 4E75                       		rts	
00010BEE                            ; ===========================================================================
00010BEE                            
00010BEE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010BEE 323C 0100                  		move.w	#$100,d1
00010BF2 08E8 0000 0022             		bset	#0,$22(a0)
00010BF8 3038 D008                  		move.w	($FFFFD008).w,d0
00010BFC 9068 0008                  		sub.w	8(a0),d0
00010C00 6400                       		bcc.s	loc_10214
00010C02 4440                       		neg.w	d0
00010C04 4441                       		neg.w	d1
00010C06 08A8 0000 0022             		bclr	#0,$22(a0)
00010C0C                            
00010C0C                            loc_10214:
00010C0C B042                       		cmp.w	d2,d0
00010C0E 4E75                       		rts	
00010C10                            ; ===========================================================================
00010C10 6100 D3CA                  		bsr.w	SpeedToPos
00010C14 6100 D3EC                  		bsr.w	DisplaySprite
00010C18 4A28 0001                  		tst.b	1(a0)
00010C1C 6A00 D420                  		bpl.w	DeleteObject
00010C20 4E75                       		rts	
00010C22                            ; ===========================================================================
00010C22                            Ani_obj55:
00010C22                            	include "_anim\obj55.asm"
00010C22                            ; ---------------------------------------------------------------------------
00010C22                            ; Animation script - Basaran enemy
00010C22                            ; ---------------------------------------------------------------------------
00010C22 0000                       		dc.w byte_10230-Ani_obj55
00010C24 0000                       		dc.w byte_10234-Ani_obj55
00010C26 0000                       		dc.w byte_10238-Ani_obj55
00010C28 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C2C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C30 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C36                            		even
00010C36                            		even
00010C36                            
00010C36                            ; ---------------------------------------------------------------------------
00010C36                            ; Sprite mappings - Basaran enemy (MZ)
00010C36                            ; ---------------------------------------------------------------------------
00010C36                            Map_obj55:
00010C36                            	include "_maps\obj55.asm"
00010C36                            ; ---------------------------------------------------------------------------
00010C36                            ; Sprite mappings - Basaran enemy (MZ)
00010C36                            ; ---------------------------------------------------------------------------
00010C36 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C3A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C3E 01                         byte_10246:	dc.b 1
00010C3F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C44 03                         byte_1024C:	dc.b 3
00010C45 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C4A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C4F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C54 04                         byte_1025C:	dc.b 4
00010C55 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010C5A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010C5F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010C64 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010C69 04                         byte_10271:	dc.b 4
00010C6A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010C6F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010C74 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010C79 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010C7E                            		even
00010C7E                            		even
00010C7E                            
00010C7E                            ; ===========================================================================
00010C7E                            ; ---------------------------------------------------------------------------
00010C7E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010C7E                            ; ---------------------------------------------------------------------------
00010C7E                            
00010C7E                            Obj56:					; XREF: Obj_Index
00010C7E 7000                       		moveq	#0,d0
00010C80 1028 0024                  		move.b	$24(a0),d0
00010C84 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010C88 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010C8C                            ; ===========================================================================
00010C8C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010C8E 0000                       		dc.w Obj56_Action-Obj56_Index
00010C90                            
00010C90 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010C92 2020                       		dc.b  $20, $20
00010C94 1020                       		dc.b  $10, $20
00010C96 201A                       		dc.b  $20, $1A
00010C98 1027                       		dc.b  $10, $27
00010C9A 1010                       		dc.b  $10, $10
00010C9C 0820                       		dc.b	8, $20
00010C9E 4010                       		dc.b  $40, $10
00010CA0                            ; ===========================================================================
00010CA0                            
00010CA0                            Obj56_Main:				; XREF: Obj56_Index
00010CA0 5428 0024                  		addq.b	#2,$24(a0)
00010CA4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010CAC 317C 4000 0002             		move.w	#$4000,2(a0)
00010CB2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CB8 6600                       		bne.s	loc_102C8
00010CBA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010CC0                            
00010CC0                            loc_102C8:
00010CC0 117C 0004 0001             		move.b	#4,1(a0)
00010CC6 117C 0003 0018             		move.b	#3,$18(a0)
00010CCC 7000                       		moveq	#0,d0
00010CCE 1028 0028                  		move.b	$28(a0),d0
00010CD2 E648                       		lsr.w	#3,d0
00010CD4 0240 000E                  		andi.w	#$E,d0
00010CD8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010CDC 115A 0019                  		move.b	(a2)+,$19(a0)
00010CE0 1152 0016                  		move.b	(a2),$16(a0)
00010CE4 E248                       		lsr.w	#1,d0
00010CE6 1140 001A                  		move.b	d0,$1A(a0)
00010CEA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CF0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010CF6 7000                       		moveq	#0,d0
00010CF8 1012                       		move.b	(a2),d0
00010CFA D040                       		add.w	d0,d0
00010CFC 3140 003A                  		move.w	d0,$3A(a0)
00010D00 7000                       		moveq	#0,d0
00010D02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D08 6700                       		beq.s	loc_10332
00010D0A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010D0E 0240 000F                  		andi.w	#$F,d0
00010D12 5140                       		subq.w	#8,d0
00010D14 6500                       		bcs.s	loc_10332
00010D16 E548                       		lsl.w	#2,d0
00010D18 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D1C 45F2 0000                  		lea	(a2,d0.w),a2
00010D20 4A52                       		tst.w	(a2)
00010D22 6A00                       		bpl.s	loc_10332
00010D24 0868 0000 0022             		bchg	#0,$22(a0)
00010D2A                            
00010D2A                            loc_10332:
00010D2A 1028 0028                  		move.b	$28(a0),d0
00010D2E 6A00                       		bpl.s	Obj56_Action
00010D30 0200 000F                  		andi.b	#$F,d0
00010D34 1140 003C                  		move.b	d0,$3C(a0)
00010D38 117C 0005 0028             		move.b	#5,$28(a0)
00010D3E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D44 6600                       		bne.s	Obj56_ChkGone
00010D46 117C 000C 0028             		move.b	#$C,$28(a0)
00010D4C 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D52                            
00010D52                            Obj56_ChkGone:
00010D52 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D56 7000                       		moveq	#0,d0
00010D58 1028 0023                  		move.b	$23(a0),d0
00010D5C 6700                       		beq.s	Obj56_Action
00010D5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D64 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010D6A 6700                       		beq.s	Obj56_Action
00010D6C 5228 0028                  		addq.b	#1,$28(a0)
00010D70 4268 003A                  		clr.w	$3A(a0)
00010D74                            
00010D74                            Obj56_Action:				; XREF: Obj56_Index
00010D74 3F28 0008                  		move.w	8(a0),-(sp)
00010D78 7000                       		moveq	#0,d0
00010D7A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010D7E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010D82 D040                       		add.w	d0,d0
00010D84 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010D88 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010D8C 381F                       		move.w	(sp)+,d4
00010D8E 4A28 0001                  		tst.b	1(a0)
00010D92 6A00                       		bpl.s	Obj56_ChkDel
00010D94 7200                       		moveq	#0,d1
00010D96 1228 0019                  		move.b	$19(a0),d1
00010D9A 0641 000B                  		addi.w	#$B,d1
00010D9E 7400                       		moveq	#0,d2
00010DA0 1428 0016                  		move.b	$16(a0),d2
00010DA4 3602                       		move.w	d2,d3
00010DA6 5243                       		addq.w	#1,d3
00010DA8 6100 F628                  		bsr.w	SolidObject
00010DAC                            
00010DAC                            Obj56_ChkDel:
00010DAC 3028 0034                  		move.w	$34(a0),d0
00010DB0 0240 FF80                  		andi.w	#$FF80,d0
00010DB4 3238 F700                  		move.w	($FFFFF700).w,d1
00010DB8 0441 0080                  		subi.w	#$80,d1
00010DBC 0241 FF80                  		andi.w	#$FF80,d1
00010DC0 9041                       		sub.w	d1,d0
00010DC2 0C40 0280                  		cmpi.w	#$280,d0
00010DC6 6200 D276                  		bhi.w	DeleteObject
00010DCA 6000 D236                  		bra.w	DisplaySprite
00010DCE                            ; ===========================================================================
00010DCE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010DD2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010DD6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010DDA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010DDE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010DE2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010DE6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010DEA                            ; ===========================================================================
00010DEA                            
00010DEA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010DEA 4E75                       		rts	
00010DEC                            ; ===========================================================================
00010DEC                            
00010DEC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010DEC 323C 0040                  		move.w	#$40,d1
00010DF0 7000                       		moveq	#0,d0
00010DF2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010DF6 6000                       		bra.s	Obj56_Move_LR
00010DF8                            ; ===========================================================================
00010DF8                            
00010DF8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010DF8 323C 0080                  		move.w	#$80,d1
00010DFC 7000                       		moveq	#0,d0
00010DFE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E02                            
00010E02                            Obj56_Move_LR:
00010E02 0828 0000 0022             		btst	#0,$22(a0)
00010E08 6700                       		beq.s	loc_10416
00010E0A 4440                       		neg.w	d0
00010E0C D041                       		add.w	d1,d0
00010E0E                            
00010E0E                            loc_10416:
00010E0E 3228 0034                  		move.w	$34(a0),d1
00010E12 9240                       		sub.w	d0,d1
00010E14 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E18 4E75                       		rts	
00010E1A                            ; ===========================================================================
00010E1A                            
00010E1A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E1A 323C 0040                  		move.w	#$40,d1
00010E1E 7000                       		moveq	#0,d0
00010E20 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E24 6000                       		bra.s	Obj56_Move_UD
00010E26                            ; ===========================================================================
00010E26                            
00010E26                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E26 323C 0080                  		move.w	#$80,d1
00010E2A 7000                       		moveq	#0,d0
00010E2C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E30                            
00010E30                            Obj56_Move_UD:
00010E30 0828 0000 0022             		btst	#0,$22(a0)
00010E36 6700                       		beq.s	loc_10444
00010E38 4440                       		neg.w	d0
00010E3A D041                       		add.w	d1,d0
00010E3C                            
00010E3C                            loc_10444:
00010E3C 3228 0030                  		move.w	$30(a0),d1
00010E40 9240                       		sub.w	d0,d1
00010E42 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E46 4E75                       		rts	
00010E48                            ; ===========================================================================
00010E48                            
00010E48                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E48 4A28 0038                  		tst.b	$38(a0)
00010E4C 6600                       		bne.s	loc_104A4
00010E4E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E54 6600                       		bne.s	loc_1047A	; if not, branch
00010E56 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010E5C 6600                       		bne.s	loc_1047A
00010E5E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E62 3038 D008                  		move.w	($FFFFD008).w,d0
00010E66 B068 0008                  		cmp.w	8(a0),d0
00010E6A 6400                       		bcc.s	loc_1047A
00010E6C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010E72                            
00010E72                            loc_1047A:
00010E72 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E76 7000                       		moveq	#0,d0
00010E78 1028 003C                  		move.b	$3C(a0),d0
00010E7C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010E82 6700                       		beq.s	loc_104AE
00010E84 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E8A 6600                       		bne.s	loc_1049E	; if not, branch
00010E8C 0C00 0003                  		cmpi.b	#3,d0
00010E90 6600                       		bne.s	loc_1049E
00010E92 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E96                            
00010E96                            loc_1049E:
00010E96 117C 0001 0038             		move.b	#1,$38(a0)
00010E9C                            
00010E9C                            loc_104A4:
00010E9C 4A68 003A                  		tst.w	$3A(a0)
00010EA0 6700                       		beq.s	loc_104C8
00010EA2 5568 003A                  		subq.w	#2,$3A(a0)
00010EA6                            
00010EA6                            loc_104AE:
00010EA6 3028 003A                  		move.w	$3A(a0),d0
00010EAA 0828 0000 0022             		btst	#0,$22(a0)
00010EB0 6700                       		beq.s	loc_104BC
00010EB2 4440                       		neg.w	d0
00010EB4                            
00010EB4                            loc_104BC:
00010EB4 3228 0030                  		move.w	$30(a0),d1
00010EB8 D240                       		add.w	d0,d1
00010EBA 3141 000C                  		move.w	d1,$C(a0)
00010EBE 4E75                       		rts	
00010EC0                            ; ===========================================================================
00010EC0                            
00010EC0                            loc_104C8:
00010EC0 5228 0028                  		addq.b	#1,$28(a0)
00010EC4 4228 0038                  		clr.b	$38(a0)
00010EC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010ECC 7000                       		moveq	#0,d0
00010ECE 1028 0023                  		move.b	$23(a0),d0
00010ED2 67D2                       		beq.s	loc_104AE
00010ED4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010EDA 60CA                       		bra.s	loc_104AE
00010EDC                            ; ===========================================================================
00010EDC                            
00010EDC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010EDC 4A28 0038                  		tst.b	$38(a0)
00010EE0 6600                       		bne.s	loc_10500
00010EE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EE6 7000                       		moveq	#0,d0
00010EE8 1028 003C                  		move.b	$3C(a0),d0
00010EEC 4A32 0000                  		tst.b	(a2,d0.w)
00010EF0 6A00                       		bpl.s	loc_10512
00010EF2 117C 0001 0038             		move.b	#1,$38(a0)
00010EF8                            
00010EF8                            loc_10500:
00010EF8 7000                       		moveq	#0,d0
00010EFA 1028 0016                  		move.b	$16(a0),d0
00010EFE D040                       		add.w	d0,d0
00010F00 B068 003A                  		cmp.w	$3A(a0),d0
00010F04 6700                       		beq.s	loc_1052C
00010F06 5468 003A                  		addq.w	#2,$3A(a0)
00010F0A                            
00010F0A                            loc_10512:
00010F0A 3028 003A                  		move.w	$3A(a0),d0
00010F0E 0828 0000 0022             		btst	#0,$22(a0)
00010F14 6700                       		beq.s	loc_10520
00010F16 4440                       		neg.w	d0
00010F18                            
00010F18                            loc_10520:
00010F18 3228 0030                  		move.w	$30(a0),d1
00010F1C D240                       		add.w	d0,d1
00010F1E 3141 000C                  		move.w	d1,$C(a0)
00010F22 4E75                       		rts	
00010F24                            ; ===========================================================================
00010F24                            
00010F24                            loc_1052C:
00010F24 5328 0028                  		subq.b	#1,$28(a0)
00010F28 4228 0038                  		clr.b	$38(a0)
00010F2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F30 7000                       		moveq	#0,d0
00010F32 1028 0023                  		move.b	$23(a0),d0
00010F36 67D2                       		beq.s	loc_10512
00010F38 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F3E 60CA                       		bra.s	loc_10512
00010F40                            ; ===========================================================================
00010F40                            
00010F40                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F40 4A28 0038                  		tst.b	$38(a0)
00010F44 6600                       		bne.s	loc_1055E
00010F46 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F4A 6700                       		beq.s	locret_10578
00010F4C 117C 0001 0038             		move.b	#1,$38(a0)
00010F52 4268 003A                  		clr.w	$3A(a0)
00010F56                            
00010F56                            loc_1055E:
00010F56 5268 0008                  		addq.w	#1,8(a0)
00010F5A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F60 5268 003A                  		addq.w	#1,$3A(a0)
00010F64 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010F6A 6600                       		bne.s	locret_10578
00010F6C 4228 0028                  		clr.b	$28(a0)
00010F70                            
00010F70                            locret_10578:
00010F70 4E75                       		rts	
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010F72 4A28 0038                  		tst.b	$38(a0)
00010F76 6600                       		bne.s	loc_10598
00010F78 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F7C 7000                       		moveq	#0,d0
00010F7E 1028 003C                  		move.b	$3C(a0),d0
00010F82 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F88 6700                       		beq.s	loc_105A2
00010F8A 117C 0001 0038             		move.b	#1,$38(a0)
00010F90                            
00010F90                            loc_10598:
00010F90 4A68 003A                  		tst.w	$3A(a0)
00010F94 6700                       		beq.s	loc_105C0
00010F96 5568 003A                  		subq.w	#2,$3A(a0)
00010F9A                            
00010F9A                            loc_105A2:
00010F9A 3028 003A                  		move.w	$3A(a0),d0
00010F9E 0828 0000 0022             		btst	#0,$22(a0)
00010FA4 6700                       		beq.s	loc_105B4
00010FA6 4440                       		neg.w	d0
00010FA8 0640 0080                  		addi.w	#$80,d0
00010FAC                            
00010FAC                            loc_105B4:
00010FAC 3228 0034                  		move.w	$34(a0),d1
00010FB0 D240                       		add.w	d0,d1
00010FB2 3141 0008                  		move.w	d1,8(a0)
00010FB6 4E75                       		rts	
00010FB8                            ; ===========================================================================
00010FB8                            
00010FB8                            loc_105C0:
00010FB8 5228 0028                  		addq.b	#1,$28(a0)
00010FBC 4228 0038                  		clr.b	$38(a0)
00010FC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FC4 7000                       		moveq	#0,d0
00010FC6 1028 0023                  		move.b	$23(a0),d0
00010FCA 67CE                       		beq.s	loc_105A2
00010FCC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FD2 60C6                       		bra.s	loc_105A2
00010FD4                            ; ===========================================================================
00010FD4                            
00010FD4                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010FD4 4A28 0038                  		tst.b	$38(a0)
00010FD8 6600                       		bne.s	loc_105F8
00010FDA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FDE 7000                       		moveq	#0,d0
00010FE0 1028 003C                  		move.b	$3C(a0),d0
00010FE4 4A32 0000                  		tst.b	(a2,d0.w)
00010FE8 6A00                       		bpl.s	loc_10606
00010FEA 117C 0001 0038             		move.b	#1,$38(a0)
00010FF0                            
00010FF0                            loc_105F8:
00010FF0 303C 0080                  		move.w	#$80,d0
00010FF4 B068 003A                  		cmp.w	$3A(a0),d0
00010FF8 6700                       		beq.s	loc_10624
00010FFA 5468 003A                  		addq.w	#2,$3A(a0)
00010FFE                            
00010FFE                            loc_10606:
00010FFE 3028 003A                  		move.w	$3A(a0),d0
00011002 0828 0000 0022             		btst	#0,$22(a0)
00011008 6700                       		beq.s	loc_10618
0001100A 4440                       		neg.w	d0
0001100C 0640 0080                  		addi.w	#$80,d0
00011010                            
00011010                            loc_10618:
00011010 3228 0034                  		move.w	$34(a0),d1
00011014 D240                       		add.w	d0,d1
00011016 3141 0008                  		move.w	d1,8(a0)
0001101A 4E75                       		rts	
0001101C                            ; ===========================================================================
0001101C                            
0001101C                            loc_10624:
0001101C 5328 0028                  		subq.b	#1,$28(a0)
00011020 4228 0038                  		clr.b	$38(a0)
00011024 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011028 7000                       		moveq	#0,d0
0001102A 1028 0023                  		move.b	$23(a0),d0
0001102E 67CE                       		beq.s	loc_10606
00011030 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011036 60C6                       		bra.s	loc_10606
00011038                            ; ===========================================================================
00011038                            
00011038                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011038 323C 0010                  		move.w	#$10,d1
0001103C 7000                       		moveq	#0,d0
0001103E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011042 E248                       		lsr.w	#1,d0
00011044 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011048 6000                       		bra.s	Obj56_Move_Sqr
0001104A                            ; ===========================================================================
0001104A                            
0001104A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001104A 323C 0030                  		move.w	#$30,d1
0001104E 7000                       		moveq	#0,d0
00011050 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011054 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011058 6000                       		bra.s	Obj56_Move_Sqr
0001105A                            ; ===========================================================================
0001105A                            
0001105A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001105A 323C 0050                  		move.w	#$50,d1
0001105E 7000                       		moveq	#0,d0
00011060 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011064 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011068 6000                       		bra.s	Obj56_Move_Sqr
0001106A                            ; ===========================================================================
0001106A                            
0001106A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001106A 323C 0070                  		move.w	#$70,d1
0001106E 7000                       		moveq	#0,d0
00011070 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011074 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011078                            
00011078                            Obj56_Move_Sqr:
00011078 4A43                       		tst.w	d3
0001107A 6600                       		bne.s	loc_1068E
0001107C 5228 0022                  		addq.b	#1,$22(a0)
00011080 0228 0003 0022             		andi.b	#3,$22(a0)
00011086                            
00011086                            loc_1068E:
00011086 1428 0022                  		move.b	$22(a0),d2
0001108A 0202 0003                  		andi.b	#3,d2
0001108E 6600                       		bne.s	loc_106AE
00011090 9041                       		sub.w	d1,d0
00011092 D068 0034                  		add.w	$34(a0),d0
00011096 3140 0008                  		move.w	d0,8(a0)
0001109A 4441                       		neg.w	d1
0001109C D268 0030                  		add.w	$30(a0),d1
000110A0 3141 000C                  		move.w	d1,$C(a0)
000110A4 4E75                       		rts	
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            loc_106AE:
000110A6 5302                       		subq.b	#1,d2
000110A8 6600                       		bne.s	loc_106CC
000110AA 5341                       		subq.w	#1,d1
000110AC 9041                       		sub.w	d1,d0
000110AE 4440                       		neg.w	d0
000110B0 D068 0030                  		add.w	$30(a0),d0
000110B4 3140 000C                  		move.w	d0,$C(a0)
000110B8 5241                       		addq.w	#1,d1
000110BA D268 0034                  		add.w	$34(a0),d1
000110BE 3141 0008                  		move.w	d1,8(a0)
000110C2 4E75                       		rts	
000110C4                            ; ===========================================================================
000110C4                            
000110C4                            loc_106CC:
000110C4 5302                       		subq.b	#1,d2
000110C6 6600                       		bne.s	loc_106EA
000110C8 5341                       		subq.w	#1,d1
000110CA 9041                       		sub.w	d1,d0
000110CC 4440                       		neg.w	d0
000110CE D068 0034                  		add.w	$34(a0),d0
000110D2 3140 0008                  		move.w	d0,8(a0)
000110D6 5241                       		addq.w	#1,d1
000110D8 D268 0030                  		add.w	$30(a0),d1
000110DC 3141 000C                  		move.w	d1,$C(a0)
000110E0 4E75                       		rts	
000110E2                            ; ===========================================================================
000110E2                            
000110E2                            loc_106EA:
000110E2 9041                       		sub.w	d1,d0
000110E4 D068 0030                  		add.w	$30(a0),d0
000110E8 3140 000C                  		move.w	d0,$C(a0)
000110EC 4441                       		neg.w	d1
000110EE D268 0034                  		add.w	$34(a0),d1
000110F2 3141 0008                  		move.w	d1,8(a0)
000110F6 4E75                       		rts	
000110F8                            ; ===========================================================================
000110F8                            ; ---------------------------------------------------------------------------
000110F8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110F8                            ; ---------------------------------------------------------------------------
000110F8                            Map_obj56:
000110F8                            	include "_maps\obj56.asm"
000110F8                            ; ---------------------------------------------------------------------------
000110F8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110F8                            ; ---------------------------------------------------------------------------
000110F8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000110FC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011100 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011104 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011108 01                         byte_10710:	dc.b 1
00011109 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001110E 04                         byte_10716:	dc.b 4
0001110F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011114 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011119 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001111E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011123 02                         byte_1072B:	dc.b 2
00011124 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011129 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001112E 04                         byte_10736:	dc.b 4
0001112F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011134 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011139 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001113E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011143 03                         byte_1074B:	dc.b 3
00011144 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011149 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001114E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011153 01                         byte_1075B:	dc.b 1
00011154 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011159 02                         byte_10761:	dc.b 2
0001115A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001115F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011164 04                         byte_1076C:	dc.b 4
00011165 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001116A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001116F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011174 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001117A 00                         		even
0001117A 00                         		even
0001117A                            
0001117A                            ; ===========================================================================
0001117A                            ; ---------------------------------------------------------------------------
0001117A                            ; Object 57 - spiked balls (SYZ, LZ)
0001117A                            ; ---------------------------------------------------------------------------
0001117A                            
0001117A                            Obj57:					; XREF: Obj_Index
0001117A 7000                       		moveq	#0,d0
0001117C 1028 0024                  		move.b	$24(a0),d0
00011180 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011184 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011188                            ; ===========================================================================
00011188 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001118A 0000                       		dc.w Obj57_Move-Obj57_Index
0001118C 0000                       		dc.w Obj57_Display-Obj57_Index
0001118E                            ; ===========================================================================
0001118E                            
0001118E                            Obj57_Main:				; XREF: Obj57_Index
0001118E 5428 0024                  		addq.b	#2,$24(a0)
00011192 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001119A 317C 03BA 0002             		move.w	#$3BA,2(a0)
000111A0 117C 0004 0001             		move.b	#4,1(a0)
000111A6 117C 0004 0018             		move.b	#4,$18(a0)
000111AC 117C 0008 0019             		move.b	#8,$19(a0)
000111B2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111B8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111BE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000111C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000111CA 6600                       		bne.s	loc_107E8
000111CC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000111D2 317C 0310 0002             		move.w	#$310,2(a0)
000111D8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000111E0                            
000111E0                            loc_107E8:
000111E0 1228 0028                  		move.b	$28(a0),d1	; get object type
000111E4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111E8 4881                       		ext.w	d1
000111EA E741                       		asl.w	#3,d1		; multiply by 8
000111EC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000111F0 1028 0022                  		move.b	$22(a0),d0
000111F4 E418                       		ror.b	#2,d0
000111F6 0200 00C0                  		andi.b	#-$40,d0
000111FA 1140 0026                  		move.b	d0,$26(a0)
000111FE 45E8 0029                  		lea	$29(a0),a2
00011202 1228 0028                  		move.b	$28(a0),d1	; get object type
00011206 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001120A 14FC 0000                  		move.b	#0,(a2)+
0001120E 3601                       		move.w	d1,d3
00011210 E94B                       		lsl.w	#4,d3
00011212 1143 003C                  		move.b	d3,$3C(a0)
00011216 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011218 6500                       		bcs.s	loc_10894
0001121A 0828 0003 0028             		btst	#3,$28(a0)
00011220 6700                       		beq.s	Obj57_MakeChain
00011222 5341                       		subq.w	#1,d1
00011224 6500                       		bcs.s	loc_10894
00011226                            
00011226                            Obj57_MakeChain:
00011226 6100 D260                  		bsr.w	SingleObjLoad
0001122A 6600                       		bne.s	loc_10894
0001122C 5228 0029                  		addq.b	#1,$29(a0)
00011230 3A09                       		move.w	a1,d5
00011232 0445 D000                  		subi.w	#-$3000,d5
00011236 EC4D                       		lsr.w	#6,d5
00011238 0245 007F                  		andi.w	#$7F,d5
0001123C 14C5                       		move.b	d5,(a2)+
0001123E 137C 0004 0024             		move.b	#4,$24(a1)
00011244 1290                       		move.b	0(a0),0(a1)
00011246 2368 0004 0004             		move.l	4(a0),4(a1)
0001124C 3368 0002 0002             		move.w	2(a0),2(a1)
00011252 1368 0001 0001             		move.b	1(a0),1(a1)
00011258 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001125E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011264 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001126A 0403 0010                  		subi.b	#$10,d3
0001126E 1343 003C                  		move.b	d3,$3C(a1)
00011272 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011278 6600                       		bne.s	loc_10890
0001127A 4A03                       		tst.b	d3
0001127C 6600                       		bne.s	loc_10890
0001127E 137C 0002 001A             		move.b	#2,$1A(a1)
00011284                            
00011284                            loc_10890:
00011284 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011288                            
00011288                            loc_10894:
00011288 3A08                       		move.w	a0,d5
0001128A 0445 D000                  		subi.w	#-$3000,d5
0001128E EC4D                       		lsr.w	#6,d5
00011290 0245 007F                  		andi.w	#$7F,d5
00011294 14C5                       		move.b	d5,(a2)+
00011296 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001129C 6600                       		bne.s	Obj57_Move
0001129E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000112A4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000112AA                            
000112AA                            Obj57_Move:				; XREF: Obj57_Index
000112AA 6100 0000                  		bsr.w	Obj57_MoveSub
000112AE 6000 0000                  		bra.w	Obj57_ChkDel
000112B2                            ; ===========================================================================
000112B2                            
000112B2                            Obj57_MoveSub:				; XREF: Obj57_Move
000112B2 3028 003E                  		move.w	$3E(a0),d0
000112B6 D168 0026                  		add.w	d0,$26(a0)
000112BA 1028 0026                  		move.b	$26(a0),d0
000112BE 4EB9 0000 2D34             		jsr	(CalcSine).l
000112C4 3428 0038                  		move.w	$38(a0),d2
000112C8 3628 003A                  		move.w	$3A(a0),d3
000112CC 45E8 0029                  		lea	$29(a0),a2
000112D0 7C00                       		moveq	#0,d6
000112D2 1C1A                       		move.b	(a2)+,d6
000112D4                            
000112D4                            Obj57_MoveLoop:
000112D4 7800                       		moveq	#0,d4
000112D6 181A                       		move.b	(a2)+,d4
000112D8 ED4C                       		lsl.w	#6,d4
000112DA 0684 00FF D000             		addi.l	#$FFD000,d4
000112E0 2244                       		movea.l	d4,a1
000112E2 7800                       		moveq	#0,d4
000112E4 1829 003C                  		move.b	$3C(a1),d4
000112E8 2A04                       		move.l	d4,d5
000112EA C9C0                       		muls.w	d0,d4
000112EC E084                       		asr.l	#8,d4
000112EE CBC1                       		muls.w	d1,d5
000112F0 E085                       		asr.l	#8,d5
000112F2 D842                       		add.w	d2,d4
000112F4 DA43                       		add.w	d3,d5
000112F6 3344 000C                  		move.w	d4,$C(a1)
000112FA 3345 0008                  		move.w	d5,8(a1)
000112FE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011302 4E75                       		rts	
00011304                            ; ===========================================================================
00011304                            
00011304                            Obj57_ChkDel:				; XREF: Obj57_Move
00011304 3028 003A                  		move.w	$3A(a0),d0
00011308 0240 FF80                  		andi.w	#$FF80,d0
0001130C 3238 F700                  		move.w	($FFFFF700).w,d1
00011310 0441 0080                  		subi.w	#$80,d1
00011314 0241 FF80                  		andi.w	#$FF80,d1
00011318 9041                       		sub.w	d1,d0
0001131A 0C40 0280                  		cmpi.w	#$280,d0
0001131E 6200 0000                  		bhi.w	Obj57_Delete
00011322 6000 CCDE                  		bra.w	DisplaySprite
00011326                            ; ===========================================================================
00011326                            
00011326                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011326 7400                       		moveq	#0,d2
00011328 45E8 0029                  		lea	$29(a0),a2
0001132C 141A                       		move.b	(a2)+,d2
0001132E                            
0001132E                            Obj57_DelLoop:
0001132E 7000                       		moveq	#0,d0
00011330 101A                       		move.b	(a2)+,d0
00011332 ED48                       		lsl.w	#6,d0
00011334 0680 00FF D000             		addi.l	#$FFD000,d0
0001133A 2240                       		movea.l	d0,a1
0001133C 6100 CD02                  		bsr.w	DeleteObject2
00011340 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011344                            
00011344 4E75                       		rts	
00011346                            ; ===========================================================================
00011346                            
00011346                            Obj57_Display:				; XREF: Obj57_Index
00011346 6000 CCBA                  		bra.w	DisplaySprite
0001134A                            ; ===========================================================================
0001134A                            ; ---------------------------------------------------------------------------
0001134A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001134A                            ; ---------------------------------------------------------------------------
0001134A                            Map_obj57:
0001134A                            	include "_maps\obj57syz.asm"
0001134A                            ; ---------------------------------------------------------------------------
0001134A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001134A                            ; ---------------------------------------------------------------------------
0001134A 0000                       		dc.w byte_10958-Map_obj57
0001134C 01                         byte_10958:	dc.b 1
0001134D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011352                            		even
00011352                            		even
00011352                            
00011352                            ; ---------------------------------------------------------------------------
00011352                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011352                            ; ---------------------------------------------------------------------------
00011352                            Map_obj57a:
00011352                            	include "_maps\obj57lz.asm"
00011352                            ; ---------------------------------------------------------------------------
00011352                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011352                            ; ---------------------------------------------------------------------------
00011352 0000                       		dc.w byte_10964-Map_obj57a
00011354 0000                       		dc.w byte_1096A-Map_obj57a
00011356 0000                       		dc.w byte_10970-Map_obj57a
00011358 01                         byte_10964:	dc.b 1
00011359 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001135E 01                         byte_1096A:	dc.b 1
0001135F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011364 01                         byte_10970:	dc.b 1
00011365 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001136A                            		even
0001136A                            		even
0001136A                            
0001136A                            ; ===========================================================================
0001136A                            ; ---------------------------------------------------------------------------
0001136A                            ; Object 58 - giant spiked balls (SYZ)
0001136A                            ; ---------------------------------------------------------------------------
0001136A                            
0001136A                            Obj58:					; XREF: Obj_Index
0001136A 7000                       		moveq	#0,d0
0001136C 1028 0024                  		move.b	$24(a0),d0
00011370 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011374 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011378                            ; ===========================================================================
00011378 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001137A 0000                       		dc.w Obj58_Move-Obj58_Index
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj58_Main:				; XREF: Obj58_Index
0001137C 5428 0024                  		addq.b	#2,$24(a0)
00011380 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011388 317C 0396 0002             		move.w	#$396,2(a0)
0001138E 117C 0004 0001             		move.b	#4,1(a0)
00011394 117C 0004 0018             		move.b	#4,$18(a0)
0001139A 117C 0018 0019             		move.b	#$18,$19(a0)
000113A0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000113A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000113AC 117C 0086 0020             		move.b	#$86,$20(a0)
000113B2 1228 0028                  		move.b	$28(a0),d1	; get object type
000113B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000113BA 4881                       		ext.w	d1
000113BC E741                       		asl.w	#3,d1		; multiply by 8
000113BE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000113C2 1028 0022                  		move.b	$22(a0),d0
000113C6 E418                       		ror.b	#2,d0
000113C8 0200 00C0                  		andi.b	#$C0,d0
000113CC 1140 0026                  		move.b	d0,$26(a0)
000113D0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000113D6                            
000113D6                            Obj58_Move:				; XREF: Obj58_Index
000113D6 7000                       		moveq	#0,d0
000113D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000113DC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000113E0 D040                       		add.w	d0,d0
000113E2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000113E6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000113EA 3028 003A                  		move.w	$3A(a0),d0
000113EE 0240 FF80                  		andi.w	#$FF80,d0
000113F2 3238 F700                  		move.w	($FFFFF700).w,d1
000113F6 0441 0080                  		subi.w	#$80,d1
000113FA 0241 FF80                  		andi.w	#$FF80,d1
000113FE 9041                       		sub.w	d1,d0
00011400 0C40 0280                  		cmpi.w	#$280,d0
00011404 6200 CC38                  		bhi.w	DeleteObject
00011408 6000 CBF8                  		bra.w	DisplaySprite
0001140C                            ; ===========================================================================
0001140C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001140E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011410 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011412 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011414                            ; ===========================================================================
00011414                            
00011414                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011414 4E75                       		rts	
00011416                            ; ===========================================================================
00011416                            
00011416                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011416 323C 0060                  		move.w	#$60,d1
0001141A 7000                       		moveq	#0,d0
0001141C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011420 0828 0000 0022             		btst	#0,$22(a0)
00011426 6700                       		beq.s	loc_10A38
00011428 4440                       		neg.w	d0
0001142A D041                       		add.w	d1,d0
0001142C                            
0001142C                            loc_10A38:
0001142C 3228 003A                  		move.w	$3A(a0),d1
00011430 9240                       		sub.w	d0,d1
00011432 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011436 4E75                       		rts	
00011438                            ; ===========================================================================
00011438                            
00011438                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011438 323C 0060                  		move.w	#$60,d1
0001143C 7000                       		moveq	#0,d0
0001143E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011442 0828 0000 0022             		btst	#0,$22(a0)
00011448 6700                       		beq.s	loc_10A5C
0001144A 4440                       		neg.w	d0
0001144C 0640 0080                  		addi.w	#$80,d0
00011450                            
00011450                            loc_10A5C:
00011450 3228 0038                  		move.w	$38(a0),d1
00011454 9240                       		sub.w	d0,d1
00011456 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001145A 4E75                       		rts	
0001145C                            ; ===========================================================================
0001145C                            
0001145C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001145C 3028 003E                  		move.w	$3E(a0),d0
00011460 D168 0026                  		add.w	d0,$26(a0)
00011464 1028 0026                  		move.b	$26(a0),d0
00011468 4EB9 0000 2D34             		jsr	(CalcSine).l
0001146E 3428 0038                  		move.w	$38(a0),d2
00011472 3628 003A                  		move.w	$3A(a0),d3
00011476 7800                       		moveq	#0,d4
00011478 1828 003C                  		move.b	$3C(a0),d4
0001147C 2A04                       		move.l	d4,d5
0001147E C9C0                       		muls.w	d0,d4
00011480 E084                       		asr.l	#8,d4
00011482 CBC1                       		muls.w	d1,d5
00011484 E085                       		asr.l	#8,d5
00011486 D842                       		add.w	d2,d4
00011488 DA43                       		add.w	d3,d5
0001148A 3144 000C                  		move.w	d4,$C(a0)
0001148E 3145 0008                  		move.w	d5,8(a0)
00011492 4E75                       		rts	
00011494                            ; ===========================================================================
00011494                            ; ---------------------------------------------------------------------------
00011494                            ; Sprite mappings - SBZ	spiked ball on a chain
00011494                            ; ---------------------------------------------------------------------------
00011494                            Map_obj15b:
00011494                            	include "_maps\obj15sbz.asm"
00011494                            ; ---------------------------------------------------------------------------
00011494                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011494                            ; ---------------------------------------------------------------------------
00011494 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011498 0000                       		dc.w byte_10AC6-Map_obj15b
0001149A 05                         byte_10AA6:	dc.b 5
0001149B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000114A0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000114A5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000114AA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000114AF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000114B4 01                         byte_10AC0:	dc.b 1
000114B5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000114BA 02                         byte_10AC6:	dc.b 2
000114BB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000114C0 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000114C6 00                         		even
000114C6 00                         		even
000114C6                            
000114C6                            ; ===========================================================================
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            
000114C6                            Obj59:					; XREF: Obj_Index
000114C6 7000                       		moveq	#0,d0
000114C8 1028 0024                  		move.b	$24(a0),d0
000114CC 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000114D0 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000114D4 3028 0032                  		move.w	$32(a0),d0
000114D8 0240 FF80                  		andi.w	#$FF80,d0
000114DC 3238 F700                  		move.w	($FFFFF700).w,d1
000114E0 0441 0080                  		subi.w	#$80,d1
000114E4 0241 FF80                  		andi.w	#$FF80,d1
000114E8 9041                       		sub.w	d1,d0
000114EA 0C40 0280                  		cmpi.w	#$280,d0
000114EE 6200 CB4E                  		bhi.w	DeleteObject
000114F2 6000 CB0E                  		bra.w	DisplaySprite
000114F6                            ; ===========================================================================
000114F6 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000114F8 0000                       		dc.w Obj59_Platform-Obj59_Index
000114FA 0000                       		dc.w Obj59_Action-Obj59_Index
000114FC 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000114FE                            
000114FE 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011500                            
00011500 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011502 2001                       		dc.b $20, 1
00011504 3401                       		dc.b $34, 1
00011506 1003                       		dc.b $10, 3
00011508 2003                       		dc.b $20, 3
0001150A 3403                       		dc.b $34, 3
0001150C 1401                       		dc.b $14, 1
0001150E 2401                       		dc.b $24, 1
00011510 2C01                       		dc.b $2C, 1
00011512 1403                       		dc.b $14, 3
00011514 2403                       		dc.b $24, 3
00011516 2C03                       		dc.b $2C, 3
00011518 2005                       		dc.b $20, 5
0001151A 2007                       		dc.b $20, 7
0001151C 3009                       		dc.b $30, 9
0001151E                            ; ===========================================================================
0001151E                            
0001151E                            Obj59_Main:				; XREF: Obj59_Index
0001151E 5428 0024                  		addq.b	#2,$24(a0)
00011522 7000                       		moveq	#0,d0
00011524 1028 0028                  		move.b	$28(a0),d0
00011528 6A00                       		bpl.s	Obj59_Main2
0001152A 5828 0024                  		addq.b	#4,$24(a0)
0001152E 0240 007F                  		andi.w	#$7F,d0
00011532 C0FC 0006                  		mulu.w	#6,d0
00011536 3140 003C                  		move.w	d0,$3C(a0)
0001153A 3140 003E                  		move.w	d0,$3E(a0)
0001153E 588F                       		addq.l	#4,sp
00011540 4E75                       		rts	
00011542                            ; ===========================================================================
00011542                            
00011542                            Obj59_Main2:
00011542 E648                       		lsr.w	#3,d0
00011544 0240 001E                  		andi.w	#$1E,d0
00011548 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001154C 115A 0019                  		move.b	(a2)+,$19(a0)
00011550 115A 001A                  		move.b	(a2)+,$1A(a0)
00011554 7000                       		moveq	#0,d0
00011556 1028 0028                  		move.b	$28(a0),d0
0001155A D040                       		add.w	d0,d0
0001155C 0240 001E                  		andi.w	#$1E,d0
00011560 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011564 101A                       		move.b	(a2)+,d0
00011566 E548                       		lsl.w	#2,d0
00011568 3140 003C                  		move.w	d0,$3C(a0)
0001156C 115A 0028                  		move.b	(a2)+,$28(a0)
00011570 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011578 317C 4000 0002             		move.w	#$4000,2(a0)
0001157E 117C 0004 0001             		move.b	#4,1(a0)
00011584 117C 0004 0018             		move.b	#4,$18(a0)
0001158A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011590 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011596                            
00011596                            Obj59_Platform:				; XREF: Obj59_Index
00011596 7200                       		moveq	#0,d1
00011598 1228 0019                  		move.b	$19(a0),d1
0001159C 4EB9 0000 7C14             		jsr	(PlatformObject).l
000115A2 6000 0000                  		bra.w	Obj59_Types
000115A6                            ; ===========================================================================
000115A6                            
000115A6                            Obj59_Action:				; XREF: Obj59_Index
000115A6 7200                       		moveq	#0,d1
000115A8 1228 0019                  		move.b	$19(a0),d1
000115AC 4EB9 0000 7D88             		jsr	(ExitPlatform).l
000115B2 3F28 0008                  		move.w	8(a0),-(sp)
000115B6 6100 0000                  		bsr.w	Obj59_Types
000115BA 341F                       		move.w	(sp)+,d2
000115BC 4A10                       		tst.b	0(a0)
000115BE 6700                       		beq.s	locret_10BD4
000115C0 4EF9 0000 82F2             		jmp	(MvSonicOnPtfm2).l
000115C6                            ; ===========================================================================
000115C6                            
000115C6                            locret_10BD4:
000115C6 4E75                       		rts	
000115C8                            ; ===========================================================================
000115C8                            
000115C8                            Obj59_Types:
000115C8 7000                       		moveq	#0,d0
000115CA 1028 0028                  		move.b	$28(a0),d0
000115CE 0240 000F                  		andi.w	#$F,d0
000115D2 D040                       		add.w	d0,d0
000115D4 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000115D8 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000115DC                            ; ===========================================================================
000115DC 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115E0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115E4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115E8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115EC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000115F0                            ; ===========================================================================
000115F0                            
000115F0                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000115F0 4E75                       		rts	
000115F2                            ; ===========================================================================
000115F2                            
000115F2                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000115F2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000115F8 6600                       		bne.s	locret_10C0C
000115FA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000115FE                            
000115FE                            locret_10C0C:
000115FE 4E75                       		rts	
00011600                            ; ===========================================================================
00011600                            
00011600                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011600 6100 0000                  		bsr.w	Obj59_Move
00011604 3028 0034                  		move.w	$34(a0),d0
00011608 4440                       		neg.w	d0
0001160A D068 0030                  		add.w	$30(a0),d0
0001160E 3140 000C                  		move.w	d0,$C(a0)
00011612 4E75                       		rts	
00011614                            ; ===========================================================================
00011614                            
00011614                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011614 6100 0000                  		bsr.w	Obj59_Move
00011618 3028 0034                  		move.w	$34(a0),d0
0001161C D068 0030                  		add.w	$30(a0),d0
00011620 3140 000C                  		move.w	d0,$C(a0)
00011624 4E75                       		rts	
00011626                            ; ===========================================================================
00011626                            
00011626                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011626 6100 0000                  		bsr.w	Obj59_Move
0001162A 3028 0034                  		move.w	$34(a0),d0
0001162E E240                       		asr.w	#1,d0
00011630 4440                       		neg.w	d0
00011632 D068 0030                  		add.w	$30(a0),d0
00011636 3140 000C                  		move.w	d0,$C(a0)
0001163A 3028 0034                  		move.w	$34(a0),d0
0001163E D068 0032                  		add.w	$32(a0),d0
00011642 3140 0008                  		move.w	d0,8(a0)
00011646 4E75                       		rts	
00011648                            ; ===========================================================================
00011648                            
00011648                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011648 6100 0000                  		bsr.w	Obj59_Move
0001164C 3028 0034                  		move.w	$34(a0),d0
00011650 E240                       		asr.w	#1,d0
00011652 D068 0030                  		add.w	$30(a0),d0
00011656 3140 000C                  		move.w	d0,$C(a0)
0001165A 3028 0034                  		move.w	$34(a0),d0
0001165E 4440                       		neg.w	d0
00011660 D068 0032                  		add.w	$32(a0),d0
00011664 3140 0008                  		move.w	d0,8(a0)
00011668 4E75                       		rts	
0001166A                            ; ===========================================================================
0001166A                            
0001166A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001166A 6100 0000                  		bsr.w	Obj59_Move
0001166E 3028 0034                  		move.w	$34(a0),d0
00011672 4440                       		neg.w	d0
00011674 D068 0030                  		add.w	$30(a0),d0
00011678 3140 000C                  		move.w	d0,$C(a0)
0001167C 4A28 0028                  		tst.b	$28(a0)
00011680 6700 0000                  		beq.w	loc_10C94
00011684 4E75                       		rts	
00011686                            ; ===========================================================================
00011686                            
00011686                            loc_10C94:
00011686 0828 0003 0022             		btst	#3,$22(a0)
0001168C 6700                       		beq.s	Obj59_Delete
0001168E 08E9 0001 0022             		bset	#1,$22(a1)
00011694 08A9 0003 0022             		bclr	#3,$22(a1)
0001169A 137C 0002 0024             		move.b	#2,$24(a1)
000116A0                            
000116A0                            Obj59_Delete:
000116A0 6000 C99C                  		bra.w	DeleteObject
000116A4                            
000116A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116A4                            
000116A4                            
000116A4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000116A4 3028 0038                  		move.w	$38(a0),d0
000116A8 4A28 003A                  		tst.b	$3A(a0)
000116AC 6600                       		bne.s	loc_10CC8
000116AE 0C40 0800                  		cmpi.w	#$800,d0
000116B2 6400                       		bcc.s	loc_10CD0
000116B4 0640 0010                  		addi.w	#$10,d0
000116B8 6000                       		bra.s	loc_10CD0
000116BA                            ; ===========================================================================
000116BA                            
000116BA                            loc_10CC8:
000116BA 4A40                       		tst.w	d0
000116BC 6700                       		beq.s	loc_10CD0
000116BE 0440 0010                  		subi.w	#$10,d0
000116C2                            
000116C2                            loc_10CD0:
000116C2 3140 0038                  		move.w	d0,$38(a0)
000116C6 48C0                       		ext.l	d0
000116C8 E180                       		asl.l	#8,d0
000116CA D0A8 0034                  		add.l	$34(a0),d0
000116CE 2140 0034                  		move.l	d0,$34(a0)
000116D2 4840                       		swap	d0
000116D4 3428 003C                  		move.w	$3C(a0),d2
000116D8 B042                       		cmp.w	d2,d0
000116DA 6300                       		bls.s	loc_10CF0
000116DC 117C 0001 003A             		move.b	#1,$3A(a0)
000116E2                            
000116E2                            loc_10CF0:
000116E2 D442                       		add.w	d2,d2
000116E4 B042                       		cmp.w	d2,d0
000116E6 6600                       		bne.s	locret_10CFA
000116E8 4228 0028                  		clr.b	$28(a0)
000116EC                            
000116EC                            locret_10CFA:
000116EC 4E75                       		rts	
000116EE                            ; End of function Obj59_Move
000116EE                            
000116EE                            ; ===========================================================================
000116EE                            
000116EE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000116EE 5368 003C                  		subq.w	#1,$3C(a0)
000116F2 6600                       		bne.s	Obj59_ChkDel
000116F4 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000116FA 6100 CD8C                  		bsr.w	SingleObjLoad
000116FE 6600                       		bne.s	Obj59_ChkDel
00011700 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011704 3368 0008 0008             		move.w	8(a0),8(a1)
0001170A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011710 137C 000E 0028             		move.b	#$E,$28(a1)
00011716                            
00011716                            Obj59_ChkDel:
00011716 588F                       		addq.l	#4,sp
00011718 3028 0008                  		move.w	8(a0),d0
0001171C 0240 FF80                  		andi.w	#$FF80,d0
00011720 3238 F700                  		move.w	($FFFFF700).w,d1
00011724 0441 0080                  		subi.w	#$80,d1
00011728 0241 FF80                  		andi.w	#$FF80,d1
0001172C 9041                       		sub.w	d1,d0
0001172E 0C40 0280                  		cmpi.w	#$280,d0
00011732 6200 C90A                  		bhi.w	DeleteObject
00011736 4E75                       		rts	
00011738                            ; ===========================================================================
00011738                            ; ---------------------------------------------------------------------------
00011738                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011738                            ; ---------------------------------------------------------------------------
00011738                            Map_obj59:
00011738                            	include "_maps\obj59.asm"
00011738                            ; ---------------------------------------------------------------------------
00011738                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011738                            ; ---------------------------------------------------------------------------
00011738 0000                       		dc.w byte_10D4A-Map_obj59
0001173A 03                         byte_10D4A:	dc.b 3
0001173B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011740 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011745 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001174A                            		even
0001174A                            		even
0001174A                            
0001174A                            ; ===========================================================================
0001174A                            ; ---------------------------------------------------------------------------
0001174A                            ; Object 5A - platforms	moving in circles (SLZ)
0001174A                            ; ---------------------------------------------------------------------------
0001174A                            
0001174A                            Obj5A:					; XREF: Obj_Index
0001174A 7000                       		moveq	#0,d0
0001174C 1028 0024                  		move.b	$24(a0),d0
00011750 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011754 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011758 3028 0032                  		move.w	$32(a0),d0
0001175C 0240 FF80                  		andi.w	#$FF80,d0
00011760 3238 F700                  		move.w	($FFFFF700).w,d1
00011764 0441 0080                  		subi.w	#$80,d1
00011768 0241 FF80                  		andi.w	#$FF80,d1
0001176C 9041                       		sub.w	d1,d0
0001176E 0C40 0280                  		cmpi.w	#$280,d0
00011772 6200 C8CA                  		bhi.w	DeleteObject
00011776 6000 C88A                  		bra.w	DisplaySprite
0001177A                            ; ===========================================================================
0001177A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001177C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001177E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011780                            ; ===========================================================================
00011780                            
00011780                            Obj5A_Main:				; XREF: Obj5A_Index
00011780 5428 0024                  		addq.b	#2,$24(a0)
00011784 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001178C 317C 4000 0002             		move.w	#$4000,2(a0)
00011792 117C 0004 0001             		move.b	#4,1(a0)
00011798 117C 0004 0018             		move.b	#4,$18(a0)
0001179E 117C 0018 0019             		move.b	#$18,$19(a0)
000117A4 3168 0008 0032             		move.w	8(a0),$32(a0)
000117AA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117B0                            
000117B0                            Obj5A_Platform:				; XREF: Obj5A_Index
000117B0 7200                       		moveq	#0,d1
000117B2 1228 0019                  		move.b	$19(a0),d1
000117B6 4EB9 0000 7C14             		jsr	(PlatformObject).l
000117BC 6000 0000                  		bra.w	Obj5A_Types
000117C0                            ; ===========================================================================
000117C0                            
000117C0                            Obj5A_Action:				; XREF: Obj5A_Index
000117C0 7200                       		moveq	#0,d1
000117C2 1228 0019                  		move.b	$19(a0),d1
000117C6 4EB9 0000 7D88             		jsr	(ExitPlatform).l
000117CC 3F28 0008                  		move.w	8(a0),-(sp)
000117D0 6100 0000                  		bsr.w	Obj5A_Types
000117D4 341F                       		move.w	(sp)+,d2
000117D6 4EF9 0000 82F2             		jmp	(MvSonicOnPtfm2).l
000117DC                            ; ===========================================================================
000117DC                            
000117DC                            Obj5A_Types:
000117DC 7000                       		moveq	#0,d0
000117DE 1028 0028                  		move.b	$28(a0),d0
000117E2 0240 000C                  		andi.w	#$C,d0
000117E6 E248                       		lsr.w	#1,d0
000117E8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000117EC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000117F0                            ; ===========================================================================
000117F0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000117F2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000117F4                            ; ===========================================================================
000117F4                            
000117F4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000117F4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000117F8 0401 0050                  		subi.b	#$50,d1
000117FC 4881                       		ext.w	d1
000117FE 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011802 0402 0050                  		subi.b	#$50,d2
00011806 4882                       		ext.w	d2
00011808 0828 0000 0028             		btst	#0,$28(a0)
0001180E 6700                       		beq.s	loc_10E24
00011810 4441                       		neg.w	d1
00011812 4442                       		neg.w	d2
00011814                            
00011814                            loc_10E24:
00011814 0828 0001 0028             		btst	#1,$28(a0)
0001181A 6700                       		beq.s	loc_10E30
0001181C 4441                       		neg.w	d1
0001181E C342                       		exg	d1,d2
00011820                            
00011820                            loc_10E30:
00011820 D268 0032                  		add.w	$32(a0),d1
00011824 3141 0008                  		move.w	d1,8(a0)
00011828 D468 0030                  		add.w	$30(a0),d2
0001182C 3142 000C                  		move.w	d2,$C(a0)
00011830 4E75                       		rts	
00011832                            ; ===========================================================================
00011832                            
00011832                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011832 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011836 0401 0050                  		subi.b	#$50,d1
0001183A 4881                       		ext.w	d1
0001183C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011840 0402 0050                  		subi.b	#$50,d2
00011844 4882                       		ext.w	d2
00011846 0828 0000 0028             		btst	#0,$28(a0)
0001184C 6700                       		beq.s	loc_10E62
0001184E 4441                       		neg.w	d1
00011850 4442                       		neg.w	d2
00011852                            
00011852                            loc_10E62:
00011852 0828 0001 0028             		btst	#1,$28(a0)
00011858 6700                       		beq.s	loc_10E6E
0001185A 4441                       		neg.w	d1
0001185C C342                       		exg	d1,d2
0001185E                            
0001185E                            loc_10E6E:
0001185E 4441                       		neg.w	d1
00011860 D268 0032                  		add.w	$32(a0),d1
00011864 3141 0008                  		move.w	d1,8(a0)
00011868 D468 0030                  		add.w	$30(a0),d2
0001186C 3142 000C                  		move.w	d2,$C(a0)
00011870 4E75                       		rts	
00011872                            ; ===========================================================================
00011872                            ; ---------------------------------------------------------------------------
00011872                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011872                            ; ---------------------------------------------------------------------------
00011872                            Map_obj5A:
00011872                            	include "_maps\obj5A.asm"
00011872                            ; ---------------------------------------------------------------------------
00011872                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011872                            ; ---------------------------------------------------------------------------
00011872 0000                       		dc.w byte_10E84-Map_obj5A
00011874 02                         byte_10E84:	dc.b 2
00011875 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001187A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011880 00                         		even
00011880 00                         		even
00011880                            
00011880                            ; ===========================================================================
00011880                            ; ---------------------------------------------------------------------------
00011880                            ; Object 5B - blocks that form a staircase (SLZ)
00011880                            ; ---------------------------------------------------------------------------
00011880                            
00011880                            Obj5B:					; XREF: Obj_Index
00011880 7000                       		moveq	#0,d0
00011882 1028 0024                  		move.b	$24(a0),d0
00011886 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001188A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001188E 3028 0030                  		move.w	$30(a0),d0
00011892 0240 FF80                  		andi.w	#$FF80,d0
00011896 3238 F700                  		move.w	($FFFFF700).w,d1
0001189A 0441 0080                  		subi.w	#$80,d1
0001189E 0241 FF80                  		andi.w	#$FF80,d1
000118A2 9041                       		sub.w	d1,d0
000118A4 0C40 0280                  		cmpi.w	#$280,d0
000118A8 6200 C794                  		bhi.w	DeleteObject
000118AC 6000 C754                  		bra.w	DisplaySprite
000118B0                            ; ===========================================================================
000118B0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000118B2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000118B4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000118B6                            ; ===========================================================================
000118B6                            
000118B6                            Obj5B_Main:				; XREF: Obj5B_Index
000118B6 5428 0024                  		addq.b	#2,$24(a0)
000118BA 7638                       		moveq	#$38,d3
000118BC 7801                       		moveq	#1,d4
000118BE 0828 0000 0022             		btst	#0,$22(a0)
000118C4 6700                       		beq.s	loc_10EDA
000118C6 763B                       		moveq	#$3B,d3
000118C8 78FF                       		moveq	#-1,d4
000118CA                            
000118CA                            loc_10EDA:
000118CA 3428 0008                  		move.w	8(a0),d2
000118CE 2248                       		movea.l	a0,a1
000118D0 7203                       		moveq	#3,d1
000118D2 6000                       		bra.s	Obj5B_MakeBlocks
000118D4                            ; ===========================================================================
000118D4                            
000118D4                            Obj5B_Loop:
000118D4 6100 CBC8                  		bsr.w	SingleObjLoad2
000118D8 6600 0000                  		bne.w	Obj5B_Move
000118DC 137C 0004 0024             		move.b	#4,$24(a1)
000118E2                            
000118E2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000118E2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000118E6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000118EE 337C 4000 0002             		move.w	#$4000,2(a1)
000118F4 137C 0004 0001             		move.b	#4,1(a1)
000118FA 137C 0003 0018             		move.b	#3,$18(a1)
00011900 137C 0010 0019             		move.b	#$10,$19(a1)
00011906 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001190C 3342 0008                  		move.w	d2,8(a1)
00011910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011916 3368 0008 0030             		move.w	8(a0),$30(a1)
0001191C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011922 0642 0020                  		addi.w	#$20,d2
00011926 1343 0037                  		move.b	d3,$37(a1)
0001192A 2348 003C                  		move.l	a0,$3C(a1)
0001192E D604                       		add.b	d4,d3
00011930 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011934                            
00011934                            Obj5B_Move:				; XREF: Obj5B_Index
00011934 7000                       		moveq	#0,d0
00011936 1028 0028                  		move.b	$28(a0),d0
0001193A 0240 0007                  		andi.w	#7,d0
0001193E D040                       		add.w	d0,d0
00011940 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011944 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011948                            
00011948                            Obj5B_Solid:				; XREF: Obj5B_Index
00011948 2468 003C                  		movea.l	$3C(a0),a2
0001194C 7000                       		moveq	#0,d0
0001194E 1028 0037                  		move.b	$37(a0),d0
00011952 1032 0000                  		move.b	(a2,d0.w),d0
00011956 D068 0032                  		add.w	$32(a0),d0
0001195A 3140 000C                  		move.w	d0,$C(a0)
0001195E 7200                       		moveq	#0,d1
00011960 1228 0019                  		move.b	$19(a0),d1
00011964 0641 000B                  		addi.w	#$B,d1
00011968 343C 0010                  		move.w	#$10,d2
0001196C 363C 0011                  		move.w	#$11,d3
00011970 3828 0008                  		move.w	8(a0),d4
00011974 6100 EA5C                  		bsr.w	SolidObject
00011978 4A04                       		tst.b	d4
0001197A 6A00                       		bpl.s	loc_10F92
0001197C 1544 0036                  		move.b	d4,$36(a2)
00011980                            
00011980                            loc_10F92:
00011980 0828 0003 0022             		btst	#3,$22(a0)
00011986 6700                       		beq.s	locret_10FA0
00011988 157C 0001 0036             		move.b	#1,$36(a2)
0001198E                            
0001198E                            locret_10FA0:
0001198E 4E75                       		rts	
00011990                            ; ===========================================================================
00011990 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011992 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011994 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011996 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011998                            ; ===========================================================================
00011998                            
00011998                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011998 4A68 0034                  		tst.w	$34(a0)
0001199C 6600                       		bne.s	loc_10FC0
0001199E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000119A4 6600                       		bne.s	locret_10FBE
000119A6 317C 001E 0034             		move.w	#$1E,$34(a0)
000119AC                            
000119AC                            locret_10FBE:
000119AC 4E75                       		rts	
000119AE                            ; ===========================================================================
000119AE                            
000119AE                            loc_10FC0:
000119AE 5368 0034                  		subq.w	#1,$34(a0)
000119B2 66F8                       		bne.s	locret_10FBE
000119B4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119B8 4E75                       		rts	
000119BA                            ; ===========================================================================
000119BA                            
000119BA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000119BA 4A68 0034                  		tst.w	$34(a0)
000119BE 6600                       		bne.s	loc_10FE0
000119C0 4A28 0036                  		tst.b	$36(a0)
000119C4 6A00                       		bpl.s	locret_10FDE
000119C6 317C 003C 0034             		move.w	#$3C,$34(a0)
000119CC                            
000119CC                            locret_10FDE:
000119CC 4E75                       		rts	
000119CE                            ; ===========================================================================
000119CE                            
000119CE                            loc_10FE0:
000119CE 5368 0034                  		subq.w	#1,$34(a0)
000119D2 6600                       		bne.s	loc_10FEC
000119D4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119D8 4E75                       		rts	
000119DA                            ; ===========================================================================
000119DA                            
000119DA                            loc_10FEC:
000119DA 43E8 0038                  		lea	$38(a0),a1
000119DE 3028 0034                  		move.w	$34(a0),d0
000119E2 E408                       		lsr.b	#2,d0
000119E4 0200 0001                  		andi.b	#1,d0
000119E8 12C0                       		move.b	d0,(a1)+
000119EA 0A00 0001                  		eori.b	#1,d0
000119EE 12C0                       		move.b	d0,(a1)+
000119F0 0A00 0001                  		eori.b	#1,d0
000119F4 12C0                       		move.b	d0,(a1)+
000119F6 0A00 0001                  		eori.b	#1,d0
000119FA 12C0                       		move.b	d0,(a1)+
000119FC 4E75                       		rts	
000119FE                            ; ===========================================================================
000119FE                            
000119FE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000119FE 43E8 0038                  		lea	$38(a0),a1
00011A02 0C11 0080                  		cmpi.b	#$80,(a1)
00011A06 6700                       		beq.s	locret_11038
00011A08 5211                       		addq.b	#1,(a1)
00011A0A 7200                       		moveq	#0,d1
00011A0C 1219                       		move.b	(a1)+,d1
00011A0E 4841                       		swap	d1
00011A10 E289                       		lsr.l	#1,d1
00011A12 2401                       		move.l	d1,d2
00011A14 E289                       		lsr.l	#1,d1
00011A16 2601                       		move.l	d1,d3
00011A18 D682                       		add.l	d2,d3
00011A1A 4841                       		swap	d1
00011A1C 4842                       		swap	d2
00011A1E 4843                       		swap	d3
00011A20 12C3                       		move.b	d3,(a1)+
00011A22 12C2                       		move.b	d2,(a1)+
00011A24 12C1                       		move.b	d1,(a1)+
00011A26                            
00011A26                            locret_11038:
00011A26 4E75                       		rts	
00011A28 4E75                       		rts	
00011A2A                            ; ===========================================================================
00011A2A                            ; ---------------------------------------------------------------------------
00011A2A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A2A                            ; ---------------------------------------------------------------------------
00011A2A                            Map_obj5B:
00011A2A                            	include "_maps\obj5B.asm"
00011A2A                            ; ---------------------------------------------------------------------------
00011A2A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A2A                            ; ---------------------------------------------------------------------------
00011A2A 0000                       		dc.w byte_1103E-Map_obj5B
00011A2C 01                         byte_1103E:	dc.b 1
00011A2D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A32                            		even
00011A32                            		even
00011A32                            
00011A32                            ; ===========================================================================
00011A32                            ; ---------------------------------------------------------------------------
00011A32                            ; Object 5C - metal girders in foreground (SLZ)
00011A32                            ; ---------------------------------------------------------------------------
00011A32                            
00011A32                            Obj5C:					; XREF: Obj_Index
00011A32 7000                       		moveq	#0,d0
00011A34 1028 0024                  		move.b	$24(a0),d0
00011A38 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A3C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A40                            ; ===========================================================================
00011A40 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A42 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A44                            ; ===========================================================================
00011A44                            
00011A44                            Obj5C_Main:				; XREF: Obj5C_Index
00011A44 5428 0024                  		addq.b	#2,$24(a0)
00011A48 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A50 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011A56 117C 0010 0019             		move.b	#$10,$19(a0)
00011A5C                            
00011A5C                            Obj5C_Display:				; XREF: Obj5C_Index
00011A5C 2238 F700                  		move.l	($FFFFF700).w,d1
00011A60 D281                       		add.l	d1,d1
00011A62 4841                       		swap	d1
00011A64 4441                       		neg.w	d1
00011A66 3141 0008                  		move.w	d1,8(a0)
00011A6A 2238 F704                  		move.l	($FFFFF704).w,d1
00011A6E D281                       		add.l	d1,d1
00011A70 4841                       		swap	d1
00011A72 0241 003F                  		andi.w	#$3F,d1
00011A76 4441                       		neg.w	d1
00011A78 0641 0100                  		addi.w	#$100,d1
00011A7C 3141 000A                  		move.w	d1,$A(a0)
00011A80 6000 C580                  		bra.w	DisplaySprite
00011A84                            ; ===========================================================================
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            Map_obj5C:
00011A84                            	include "_maps\obj5C.asm"
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A84                            ; ---------------------------------------------------------------------------
00011A84 0000                       		dc.w byte_11098-Map_obj5C
00011A86 09                         byte_11098:	dc.b 9
00011A87 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011A8C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011A91 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011A96 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011A9B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011AA0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011AA5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011AAA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011AAF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011AB4                            		even
00011AB4                            		even
00011AB4                            
00011AB4                            ; ===========================================================================
00011AB4                            ; ---------------------------------------------------------------------------
00011AB4                            ; Object 1B - water surface (LZ)
00011AB4                            ; ---------------------------------------------------------------------------
00011AB4                            
00011AB4                            Obj1B:					; XREF: Obj_Index
00011AB4 7000                       		moveq	#0,d0
00011AB6 1028 0024                  		move.b	$24(a0),d0
00011ABA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011ABE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011AC2                            ; ===========================================================================
00011AC2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011AC4 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011AC6                            ; ===========================================================================
00011AC6                            
00011AC6                            Obj1B_Main:				; XREF: Obj1B_Index
00011AC6 5428 0024                  		addq.b	#2,$24(a0)
00011ACA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011AD2 317C C300 0002             		move.w	#$C300,2(a0)
00011AD8 117C 0004 0001             		move.b	#4,1(a0)
00011ADE 117C 0080 0019             		move.b	#$80,$19(a0)
00011AE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011AEA                            
00011AEA                            Obj1B_Action:				; XREF: Obj1B_Index
00011AEA 3238 F700                  		move.w	($FFFFF700).w,d1
00011AEE 0241 FFE0                  		andi.w	#$FFE0,d1
00011AF2 D268 0030                  		add.w	$30(a0),d1
00011AF6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011AFC 6700                       		beq.s	loc_11114
00011AFE 0641 0020                  		addi.w	#$20,d1
00011B02                            
00011B02                            loc_11114:
00011B02 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011B06 3238 F646                  		move.w	($FFFFF646).w,d1
00011B0A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011B0E 4A28 0032                  		tst.b	$32(a0)
00011B12 6600                       		bne.s	Obj1B_Animate
00011B14 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B1A 6700                       		beq.s	loc_1114A	; if not, branch
00011B1C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B20 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B26 6000                       		bra.s	Obj1B_Display
00011B28                            ; ===========================================================================
00011B28                            
00011B28                            Obj1B_Animate:				; XREF: loc_11114
00011B28 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B2C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B2E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B34 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B38                            
00011B38                            loc_1114A:				; XREF: loc_11114
00011B38 5328 001E                  		subq.b	#1,$1E(a0)
00011B3C 6A00                       		bpl.s	Obj1B_Display
00011B3E 117C 0007 001E             		move.b	#7,$1E(a0)
00011B44 5228 001A                  		addq.b	#1,$1A(a0)
00011B48 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B4E 6500                       		bcs.s	Obj1B_Display
00011B50 117C 0000 001A             		move.b	#0,$1A(a0)
00011B56                            
00011B56                            Obj1B_Display:
00011B56 6000 C4AA                  		bra.w	DisplaySprite
00011B5A                            ; ===========================================================================
00011B5A                            ; ---------------------------------------------------------------------------
00011B5A                            ; Sprite mappings - water surface (LZ)
00011B5A                            ; ---------------------------------------------------------------------------
00011B5A                            Map_obj1B:
00011B5A                            	include "_maps\obj1B.asm"
00011B5A                            ; ---------------------------------------------------------------------------
00011B5A                            ; Sprite mappings - water surface (LZ)
00011B5A                            ; ---------------------------------------------------------------------------
00011B5A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011B5E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011B62 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011B66 03                         byte_11178:	dc.b 3
00011B67 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B6C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B71 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011B76 03                         byte_11188:	dc.b 3
00011B77 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011B7C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011B81 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011B86 03                         byte_11198:	dc.b 3
00011B87 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011B8C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011B91 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011B96 06                         byte_111A8:	dc.b 6
00011B97 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B9C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011BA1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BA6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011BAB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BB0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011BB5 06                         byte_111C7:	dc.b 6
00011BB6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BBB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011BC0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BC5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011BCA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BCF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011BD4 06                         byte_111E6:	dc.b 6
00011BD5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BDA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011BDF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BE4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011BE9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BEE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011BF4 00                         		even
00011BF4 00                         		even
00011BF4                            
00011BF4                            ; ===========================================================================
00011BF4                            ; ---------------------------------------------------------------------------
00011BF4                            ; Object 0B - pole that	breaks (LZ)
00011BF4                            ; ---------------------------------------------------------------------------
00011BF4                            
00011BF4                            Obj0B:					; XREF: Obj_Index
00011BF4 7000                       		moveq	#0,d0
00011BF6 1028 0024                  		move.b	$24(a0),d0
00011BFA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011BFE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011C02                            ; ===========================================================================
00011C02 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011C04 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011C06 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011C08                            ; ===========================================================================
00011C08                            
00011C08                            Obj0B_Main:				; XREF: Obj0B_Index
00011C08 5428 0024                  		addq.b	#2,$24(a0)
00011C0C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C14 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C1A 117C 0004 0001             		move.b	#4,1(a0)
00011C20 117C 0008 0019             		move.b	#8,$19(a0)
00011C26 117C 0004 0018             		move.b	#4,$18(a0)
00011C2C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C32 7000                       		moveq	#0,d0
00011C34 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C38 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C3C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C40                            
00011C40                            Obj0B_Action:				; XREF: Obj0B_Index
00011C40 4A28 0032                  		tst.b	$32(a0)
00011C44 6700                       		beq.s	Obj0B_Grab
00011C46 4A68 0030                  		tst.w	$30(a0)
00011C4A 6700                       		beq.s	Obj0B_MoveUp
00011C4C 5368 0030                  		subq.w	#1,$30(a0)
00011C50 6600                       		bne.s	Obj0B_MoveUp
00011C52 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011C58 6000                       		bra.s	Obj0B_Release
00011C5A                            ; ===========================================================================
00011C5A                            
00011C5A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011C5A 43F8 D000                  		lea	($FFFFD000).w,a1
00011C5E 3028 000C                  		move.w	$C(a0),d0
00011C62 0440 0018                  		subi.w	#$18,d0
00011C66 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011C6C 6700                       		beq.s	Obj0B_MoveDown
00011C6E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011C72 B069 000C                  		cmp.w	$C(a1),d0
00011C76 6500                       		bcs.s	Obj0B_MoveDown
00011C78 3340 000C                  		move.w	d0,$C(a1)
00011C7C                            
00011C7C                            Obj0B_MoveDown:
00011C7C 0640 0024                  		addi.w	#$24,d0
00011C80 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011C86 6700                       		beq.s	Obj0B_LetGo
00011C88 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011C8C B069 000C                  		cmp.w	$C(a1),d0
00011C90 6400                       		bcc.s	Obj0B_LetGo
00011C92 3340 000C                  		move.w	d0,$C(a1)
00011C96                            
00011C96                            Obj0B_LetGo:
00011C96 1038 F603                  		move.b	($FFFFF603).w,d0
00011C9A 0240 0070                  		andi.w	#$70,d0
00011C9E 6700                       		beq.s	Obj0B_Display
00011CA0                            
00011CA0                            Obj0B_Release:				; XREF: Obj0B_Action
00011CA0 4228 0020                  		clr.b	$20(a0)
00011CA4 5428 0024                  		addq.b	#2,$24(a0)
00011CA8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011CAC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011CB0 4228 0032                  		clr.b	$32(a0)
00011CB4 6000                       		bra.s	Obj0B_Display
00011CB6                            ; ===========================================================================
00011CB6                            
00011CB6                            Obj0B_Grab:				; XREF: Obj0B_Action
00011CB6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011CBA 6700                       		beq.s	Obj0B_Display	; if not, branch
00011CBC 43F8 D000                  		lea	($FFFFD000).w,a1
00011CC0 3028 0008                  		move.w	8(a0),d0
00011CC4 0640 0014                  		addi.w	#$14,d0
00011CC8 B069 0008                  		cmp.w	8(a1),d0
00011CCC 6400                       		bcc.s	Obj0B_Display
00011CCE 4228 0021                  		clr.b	$21(a0)
00011CD2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011CD8 6400                       		bcc.s	Obj0B_Display
00011CDA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011CDE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011CE2 3028 0008                  		move.w	8(a0),d0
00011CE6 0640 0014                  		addi.w	#$14,d0
00011CEA 3340 0008                  		move.w	d0,8(a1)
00011CEE 08A9 0000 0022             		bclr	#0,$22(a1)
00011CF4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011CFA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011D00 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D06 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011D0C                            
00011D0C                            Obj0B_Display:				; XREF: Obj0B_Index
00011D0C 6000 E39C                  		bra.w	MarkObjGone
00011D10                            ; ===========================================================================
00011D10                            ; ---------------------------------------------------------------------------
00011D10                            ; Sprite mappings - pole that breaks (LZ)
00011D10                            ; ---------------------------------------------------------------------------
00011D10                            Map_obj0B:
00011D10                            	include "_maps\obj0B.asm"
00011D10                            ; ---------------------------------------------------------------------------
00011D10                            ; Sprite mappings - pole that breaks (LZ)
00011D10                            ; ---------------------------------------------------------------------------
00011D10 0000                       		dc.w byte_11326-Map_obj0B
00011D12 0000                       		dc.w byte_11331-Map_obj0B
00011D14 02                         byte_11326:	dc.b 2			; normal pole
00011D15 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D1A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D1F 04                         byte_11331:	dc.b 4			; broken pole
00011D20 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D25 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D2A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D2F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D34                            		even
00011D34                            		even
00011D34                            
00011D34                            ; ===========================================================================
00011D34                            ; ---------------------------------------------------------------------------
00011D34                            ; Object 0C - flapping door (LZ)
00011D34                            ; ---------------------------------------------------------------------------
00011D34                            
00011D34                            Obj0C:					; XREF: Obj_Index
00011D34 7000                       		moveq	#0,d0
00011D36 1028 0024                  		move.b	$24(a0),d0
00011D3A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D3E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D42                            ; ===========================================================================
00011D42 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D44 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D46                            ; ===========================================================================
00011D46                            
00011D46                            Obj0C_Main:				; XREF: Obj0C_Index
00011D46 5428 0024                  		addq.b	#2,$24(a0)
00011D4A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D52 317C 4328 0002             		move.w	#$4328,2(a0)
00011D58 0028 0004 0001             		ori.b	#4,1(a0)
00011D5E 117C 0028 0019             		move.b	#$28,$19(a0)
00011D64 7000                       		moveq	#0,d0
00011D66 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D6A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D6E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011D72                            
00011D72                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011D72 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D76 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011D78 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011D7E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011D84 4A28 0001                  		tst.b	1(a0)
00011D88 6A00                       		bpl.s	Obj0C_Solid
00011D8A 303C 00BB                  		move.w	#$BB,d0
00011D8E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play door sound
00011D94                            
00011D94                            Obj0C_Solid:
00011D94 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011D9A 6100 92BC                  		bsr.w	AnimateSprite
00011D9E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011DA2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011DA6 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011DA8 3038 D008                  		move.w	($FFFFD008).w,d0
00011DAC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011DB0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011DB2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011DB8 323C 0013                  		move.w	#$13,d1
00011DBC 343C 0020                  		move.w	#$20,d2
00011DC0 3602                       		move.w	d2,d3
00011DC2 5243                       		addq.w	#1,d3
00011DC4 3828 0008                  		move.w	8(a0),d4
00011DC8 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011DCC                            
00011DCC                            Obj0C_Display:
00011DCC 6000 E2DC                  		bra.w	MarkObjGone
00011DD0                            ; ===========================================================================
00011DD0                            Ani_obj0C:
00011DD0                            	include "_anim\obj0C.asm"
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            ; Animation script - flapping door (LZ)
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0 0000                       		dc.w byte_113E6-Ani_obj0C
00011DD2 0000                       		dc.w byte_113EC-Ani_obj0C
00011DD4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011DDA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011DE0                            		even
00011DE0                            		even
00011DE0                            
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            ; Sprite mappings - flapping door (LZ)
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            Map_obj0C:
00011DE0                            	include "_maps\obj0C.asm"
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            ; Sprite mappings - flapping door (LZ)
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0 0000                       		dc.w byte_113F8-Map_obj0C
00011DE2 0000                       		dc.w byte_11403-Map_obj0C
00011DE4 0000                       		dc.w byte_1140E-Map_obj0C
00011DE6 02                         byte_113F8:	dc.b 2
00011DE7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011DEC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011DF1 02                         byte_11403:	dc.b 2
00011DF2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011DF7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011DFC 02                         byte_1140E:	dc.b 2
00011DFD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011E02 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011E08 00                         		even
00011E08 00                         		even
00011E08                            
00011E08                            ; ===========================================================================
00011E08                            ; ---------------------------------------------------------------------------
00011E08                            ; Object 71 - invisible	solid blocks
00011E08                            ; ---------------------------------------------------------------------------
00011E08                            
00011E08                            Obj71:					; XREF: Obj_Index
00011E08 7000                       		moveq	#0,d0
00011E0A 1028 0024                  		move.b	$24(a0),d0
00011E0E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E12 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E16                            ; ===========================================================================
00011E16 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E18 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E1A                            ; ===========================================================================
00011E1A                            
00011E1A                            Obj71_Main:				; XREF: Obj71_Index
00011E1A 5428 0024                  		addq.b	#2,$24(a0)
00011E1E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E26 317C 8680 0002             		move.w	#$8680,2(a0)
00011E2C 0028 0004 0001             		ori.b	#4,1(a0)
00011E32 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E36 1200                       		move.b	d0,d1
00011E38 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E3C 0640 0010                  		addi.w	#$10,d0
00011E40 E248                       		lsr.w	#1,d0
00011E42 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E46 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E4A 5241                       		addq.w	#1,d1
00011E4C E749                       		lsl.w	#3,d1
00011E4E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E52                            
00011E52                            Obj71_Solid:				; XREF: Obj71_Index
00011E52 6100 C428                  		bsr.w	ChkObjOnScreen
00011E56 6600                       		bne.s	Obj71_ChkDel
00011E58 7200                       		moveq	#0,d1
00011E5A 1228 0019                  		move.b	$19(a0),d1
00011E5E 0641 000B                  		addi.w	#$B,d1
00011E62 7400                       		moveq	#0,d2
00011E64 1428 0016                  		move.b	$16(a0),d2
00011E68 3602                       		move.w	d2,d3
00011E6A 5243                       		addq.w	#1,d3
00011E6C 3828 0008                  		move.w	8(a0),d4
00011E70 6100 E5A8                  		bsr.w	SolidObject71
00011E74                            
00011E74                            Obj71_ChkDel:
00011E74 3028 0008                  		move.w	8(a0),d0
00011E78 0240 FF80                  		andi.w	#$FF80,d0
00011E7C 3238 F700                  		move.w	($FFFFF700).w,d1
00011E80 0441 0080                  		subi.w	#$80,d1
00011E84 0241 FF80                  		andi.w	#$FF80,d1
00011E88 9041                       		sub.w	d1,d0
00011E8A 0C40 0280                  		cmpi.w	#$280,d0
00011E8E 6200                       		bhi.s	Obj71_Delete
00011E90 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011E94 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011E96 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011E9A                            ; ===========================================================================
00011E9A                            
00011E9A                            Obj71_NoDisplay:
00011E9A 4E75                       		rts	
00011E9C                            ; ===========================================================================
00011E9C                            
00011E9C                            Obj71_Delete:
00011E9C 4EFA C1A0                  		jmp	DeleteObject
00011EA0                            ; ===========================================================================
00011EA0                            ; ---------------------------------------------------------------------------
00011EA0                            ; Sprite mappings - invisible solid blocks
00011EA0                            ; ---------------------------------------------------------------------------
00011EA0                            Map_obj71:
00011EA0                            	include "_maps\obj71.asm"
00011EA0                            ; ---------------------------------------------------------------------------
00011EA0                            ; Sprite mappings - invisible solid blocks
00011EA0                            ; ---------------------------------------------------------------------------
00011EA0 0000                       		dc.w byte_114BC-Map_obj71
00011EA2 0000                       		dc.w byte_114D1-Map_obj71
00011EA4 0000                       		dc.w byte_114E6-Map_obj71
00011EA6 04                         byte_114BC:	dc.b 4
00011EA7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011EAC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011EB1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011EB6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011EBB 04                         byte_114D1:	dc.b 4
00011EBC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011EC1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011EC6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011ECB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011ED0 04                         byte_114E6:	dc.b 4
00011ED1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011ED6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011EDB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011EE0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011EE6 00                         		even
00011EE6 00                         		even
00011EE6                            
00011EE6                            ; ===========================================================================
00011EE6                            ; ---------------------------------------------------------------------------
00011EE6                            ; Object 5D - fans (SLZ)
00011EE6                            ; ---------------------------------------------------------------------------
00011EE6                            
00011EE6                            Obj5D:					; XREF: Obj_Index
00011EE6 7000                       		moveq	#0,d0
00011EE8 1028 0024                  		move.b	$24(a0),d0
00011EEC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011EF0 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011EF4                            ; ===========================================================================
00011EF4 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011EF6 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011EF8                            ; ===========================================================================
00011EF8                            
00011EF8                            Obj5D_Main:				; XREF: Obj5D_Index
00011EF8 5428 0024                  		addq.b	#2,$24(a0)
00011EFC 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011F04 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011F0A 0028 0004 0001             		ori.b	#4,1(a0)
00011F10 117C 0010 0019             		move.b	#$10,$19(a0)
00011F16 117C 0004 0018             		move.b	#4,$18(a0)
00011F1C                            
00011F1C                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F1C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F22 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F24 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F28 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F2A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F30 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F36 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F38 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F3E                            
00011F3E                            Obj5D_Blow:
00011F3E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F42 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F46 43F8 D000                  		lea	($FFFFD000).w,a1
00011F4A 3029 0008                  		move.w	8(a1),d0
00011F4E 9068 0008                  		sub.w	8(a0),d0
00011F52 0828 0000 0022             		btst	#0,$22(a0)
00011F58 6600                       		bne.s	Obj5D_ChkSonic
00011F5A 4440                       		neg.w	d0
00011F5C                            
00011F5C                            Obj5D_ChkSonic:
00011F5C 0640 0050                  		addi.w	#$50,d0
00011F60 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011F64 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011F66 3229 000C                  		move.w	$C(a1),d1
00011F6A 0641 0060                  		addi.w	#$60,d1
00011F6E 9268 000C                  		sub.w	$C(a0),d1
00011F72 6500                       		bcs.s	Obj5D_Animate
00011F74 0C41 0070                  		cmpi.w	#$70,d1
00011F78 6400                       		bcc.s	Obj5D_Animate
00011F7A 0440 0050                  		subi.w	#$50,d0
00011F7E 6400                       		bcc.s	loc_1159A
00011F80 4640                       		not.w	d0
00011F82 D040                       		add.w	d0,d0
00011F84                            
00011F84                            loc_1159A:
00011F84 0640 0060                  		addi.w	#$60,d0
00011F88 0828 0000 0022             		btst	#0,$22(a0)
00011F8E 6600                       		bne.s	loc_115A8
00011F90 4440                       		neg.w	d0
00011F92                            
00011F92                            loc_115A8:
00011F92 4400                       		neg.b	d0
00011F94 E840                       		asr.w	#4,d0
00011F96 0828 0000 0028             		btst	#0,$28(a0)
00011F9C 6700                       		beq.s	Obj5D_MoveSonic
00011F9E 4440                       		neg.w	d0
00011FA0                            
00011FA0                            Obj5D_MoveSonic:
00011FA0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011FA4                            
00011FA4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011FA4 5328 001E                  		subq.b	#1,$1E(a0)
00011FA8 6A00                       		bpl.s	Obj5D_ChkDel
00011FAA 117C 0000 001E             		move.b	#0,$1E(a0)
00011FB0 5228 001B                  		addq.b	#1,$1B(a0)
00011FB4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011FBA 6500                       		bcs.s	loc_115D8
00011FBC 117C 0000 001B             		move.b	#0,$1B(a0)
00011FC2                            
00011FC2                            loc_115D8:
00011FC2 7000                       		moveq	#0,d0
00011FC4 0828 0000 0028             		btst	#0,$28(a0)
00011FCA 6700                       		beq.s	loc_115E4
00011FCC 7002                       		moveq	#2,d0
00011FCE                            
00011FCE                            loc_115E4:
00011FCE D028 001B                  		add.b	$1B(a0),d0
00011FD2 1140 001A                  		move.b	d0,$1A(a0)
00011FD6                            
00011FD6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011FD6 6100 C02A                  		bsr.w	DisplaySprite
00011FDA 3028 0008                  		move.w	8(a0),d0
00011FDE 0240 FF80                  		andi.w	#$FF80,d0
00011FE2 3238 F700                  		move.w	($FFFFF700).w,d1
00011FE6 0441 0080                  		subi.w	#$80,d1
00011FEA 0241 FF80                  		andi.w	#$FF80,d1
00011FEE 9041                       		sub.w	d1,d0
00011FF0 0C40 0280                  		cmpi.w	#$280,d0
00011FF4 6200 C048                  		bhi.w	DeleteObject
00011FF8 4E75                       		rts	
00011FFA                            ; ===========================================================================
00011FFA                            ; ---------------------------------------------------------------------------
00011FFA                            ; Sprite mappings - fans (SLZ)
00011FFA                            ; ---------------------------------------------------------------------------
00011FFA                            Map_obj5D:
00011FFA                            	include "_maps\obj5D.asm"
00011FFA                            ; ---------------------------------------------------------------------------
00011FFA                            ; Sprite mappings - fans (SLZ)
00011FFA                            ; ---------------------------------------------------------------------------
00011FFA 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011FFE 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012002 0000                       		dc.w byte_1161A-Map_obj5D
00012004 02                         byte_1161A:	dc.b 2
00012005 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001200A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001200F 02                         byte_11625:	dc.b 2
00012010 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012015 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001201A 02                         byte_11630:	dc.b 2
0001201B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012020 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012026 00                         		even
00012026 00                         		even
00012026                            
00012026                            ; ===========================================================================
00012026                            ; ---------------------------------------------------------------------------
00012026                            ; Object 5E - seesaws (SLZ)
00012026                            ; ---------------------------------------------------------------------------
00012026                            
00012026                            Obj5E:					; XREF: Obj_Index
00012026 7000                       		moveq	#0,d0
00012028 1028 0024                  		move.b	$24(a0),d0
0001202C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012030 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012034 3028 0030                  		move.w	$30(a0),d0
00012038 0240 FF80                  		andi.w	#$FF80,d0
0001203C 3238 F700                  		move.w	($FFFFF700).w,d1
00012040 0441 0080                  		subi.w	#$80,d1
00012044 0241 FF80                  		andi.w	#$FF80,d1
00012048 9041                       		sub.w	d1,d0
0001204A 6B00 BFF2                  		bmi.w	DeleteObject
0001204E 0C40 0280                  		cmpi.w	#$280,d0
00012052 6200 BFEA                  		bhi.w	DeleteObject
00012056 6000 BFAA                  		bra.w	DisplaySprite
0001205A                            ; ===========================================================================
0001205A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001205C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001205E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012060 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012062 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012064 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012066                            ; ===========================================================================
00012066                            
00012066                            Obj5E_Main:				; XREF: Obj5E_Index
00012066 5428 0024                  		addq.b	#2,$24(a0)
0001206A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012072 317C 0374 0002             		move.w	#$374,2(a0)
00012078 0028 0004 0001             		ori.b	#4,1(a0)
0001207E 117C 0004 0018             		move.b	#4,$18(a0)
00012084 117C 0030 0019             		move.b	#$30,$19(a0)
0001208A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012090 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012094 6600                       		bne.s	loc_116D2	; if not, branch
00012096 6100 C406                  		bsr.w	SingleObjLoad2
0001209A 6600                       		bne.s	loc_116D2
0001209C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000120A0 5C29 0024                  		addq.b	#6,$24(a1)
000120A4 3368 0008 0008             		move.w	8(a0),8(a1)
000120AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120B0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120B6 2348 003C                  		move.l	a0,$3C(a1)
000120BA                            
000120BA                            loc_116D2:
000120BA 0828 0000 0022             		btst	#0,$22(a0)
000120C0 6700                       		beq.s	loc_116E0
000120C2 117C 0002 001A             		move.b	#2,$1A(a0)
000120C8                            
000120C8                            loc_116E0:
000120C8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000120CE                            
000120CE                            Obj5E_Slope:				; XREF: Obj5E_Index
000120CE 1228 003A                  		move.b	$3A(a0),d1
000120D2 6100 0000                  		bsr.w	loc_11766
000120D6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120DC 0828 0000 001A             		btst	#0,$1A(a0)
000120E2 6700                       		beq.s	loc_11702
000120E4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000120EA                            
000120EA                            loc_11702:
000120EA 43F8 D000                  		lea	($FFFFD000).w,a1
000120EE 3169 0012 0038             		move.w	$12(a1),$38(a0)
000120F4 323C 0030                  		move.w	#$30,d1
000120F8 4EB9 0000 7CE8             		jsr	(SlopeObject).l
000120FE 4E75                       		rts	
00012100                            ; ===========================================================================
00012100                            
00012100                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012100 6100 0000                  		bsr.w	loc_1174A
00012104 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001210A 0828 0000 001A             		btst	#0,$1A(a0)
00012110 6700                       		beq.s	loc_11730
00012112 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012118                            
00012118                            loc_11730:
00012118 323C 0030                  		move.w	#$30,d1
0001211C 4EB9 0000 7D88             		jsr	(ExitPlatform).l
00012122 323C 0030                  		move.w	#$30,d1
00012126 3428 0008                  		move.w	8(a0),d2
0001212A 4EB9 0000 8D78             		jsr	SlopeObject2
00012130 4E75                       		rts	
00012132                            ; ===========================================================================
00012132                            
00012132                            loc_1174A:				; XREF: Obj5E_Slope2
00012132 7202                       		moveq	#2,d1
00012134 43F8 D000                  		lea	($FFFFD000).w,a1
00012138 3028 0008                  		move.w	8(a0),d0
0001213C 9069 0008                  		sub.w	8(a1),d0
00012140 6400                       		bcc.s	loc_1175E
00012142 4440                       		neg.w	d0
00012144 7200                       		moveq	#0,d1
00012146                            
00012146                            loc_1175E:
00012146 0C40 0008                  		cmpi.w	#8,d0
0001214A 6400                       		bcc.s	loc_11766
0001214C 7201                       		moveq	#1,d1
0001214E                            
0001214E                            loc_11766:
0001214E 1028 001A                  		move.b	$1A(a0),d0
00012152 B001                       		cmp.b	d1,d0
00012154 6700                       		beq.s	locret_11790
00012156 6400                       		bcc.s	loc_11772
00012158 5400                       		addq.b	#2,d0
0001215A                            
0001215A                            loc_11772:
0001215A 5300                       		subq.b	#1,d0
0001215C 1140 001A                  		move.b	d0,$1A(a0)
00012160 1141 003A                  		move.b	d1,$3A(a0)
00012164 08A8 0000 0001             		bclr	#0,1(a0)
0001216A 0828 0001 001A             		btst	#1,$1A(a0)
00012170 6700                       		beq.s	locret_11790
00012172 08E8 0000 0001             		bset	#0,1(a0)
00012178                            
00012178                            locret_11790:
00012178 4E75                       		rts	
0001217A                            ; ===========================================================================
0001217A                            
0001217A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001217A 5428 0024                  		addq.b	#2,$24(a0)
0001217E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012186 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001218C 0028 0004 0001             		ori.b	#4,1(a0)
00012192 117C 0004 0018             		move.b	#4,$18(a0)
00012198 117C 008B 0020             		move.b	#$8B,$20(a0)
0001219E 117C 000C 0019             		move.b	#$C,$19(a0)
000121A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000121AA 0668 0028 0008             		addi.w	#$28,8(a0)
000121B0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000121B6 117C 0001 001A             		move.b	#1,$1A(a0)
000121BC 0828 0000 0022             		btst	#0,$22(a0)
000121C2 6700                       		beq.s	Obj5E_MoveSpike
000121C4 0468 0050 0008             		subi.w	#$50,8(a0)
000121CA 117C 0002 003A             		move.b	#2,$3A(a0)
000121D0                            
000121D0                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000121D0 2268 003C                  		movea.l	$3C(a0),a1
000121D4 7000                       		moveq	#0,d0
000121D6 1028 003A                  		move.b	$3A(a0),d0
000121DA 9029 003A                  		sub.b	$3A(a1),d0
000121DE 6700                       		beq.s	loc_1183E
000121E0 6400                       		bcc.s	loc_117FC
000121E2 4400                       		neg.b	d0
000121E4                            
000121E4                            loc_117FC:
000121E4 323C F7E8                  		move.w	#-$818,d1
000121E8 343C FEEC                  		move.w	#-$114,d2
000121EC 0C00 0001                  		cmpi.b	#1,d0
000121F0 6700                       		beq.s	loc_11822
000121F2 323C F510                  		move.w	#-$AF0,d1
000121F6 343C FF34                  		move.w	#-$CC,d2
000121FA 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012200 6D00                       		blt.s	loc_11822
00012202 323C F200                  		move.w	#-$E00,d1
00012206 343C FF60                  		move.w	#-$A0,d2
0001220A                            
0001220A                            loc_11822:
0001220A 3141 0012                  		move.w	d1,$12(a0)
0001220E 3142 0010                  		move.w	d2,$10(a0)
00012212 3028 0008                  		move.w	8(a0),d0
00012216 9068 0030                  		sub.w	$30(a0),d0
0001221A 6400                       		bcc.s	loc_11838
0001221C 4468 0010                  		neg.w	$10(a0)
00012220                            
00012220                            loc_11838:
00012220 5428 0024                  		addq.b	#2,$24(a0)
00012224 6000                       		bra.s	Obj5E_SpikeFall
00012226                            ; ===========================================================================
00012226                            
00012226                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012226 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001222C 7000                       		moveq	#0,d0
0001222E 1029 001A                  		move.b	$1A(a1),d0
00012232 343C 0028                  		move.w	#$28,d2
00012236 3228 0008                  		move.w	8(a0),d1
0001223A 9268 0030                  		sub.w	$30(a0),d1
0001223E 6400                       		bcc.s	loc_1185C
00012240 4442                       		neg.w	d2
00012242 5440                       		addq.w	#2,d0
00012244                            
00012244                            loc_1185C:
00012244 D040                       		add.w	d0,d0
00012246 3228 0034                  		move.w	$34(a0),d1
0001224A D272 0000                  		add.w	(a2,d0.w),d1
0001224E 3141 000C                  		move.w	d1,$C(a0)
00012252 D468 0030                  		add.w	$30(a0),d2
00012256 3142 0008                  		move.w	d2,8(a0)
0001225A 4268 000E                  		clr.w	$E(a0)
0001225E 4268 000A                  		clr.w	$A(a0)
00012262 4E75                       		rts	
00012264                            ; ===========================================================================
00012264                            
00012264                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012264 4A68 0012                  		tst.w	$12(a0)
00012268 6A00                       		bpl.s	loc_1189A
0001226A 6100 BCFE                  		bsr.w	ObjectFall
0001226E 3028 0034                  		move.w	$34(a0),d0
00012272 0440 002F                  		subi.w	#$2F,d0
00012276 B068 000C                  		cmp.w	$C(a0),d0
0001227A 6E00                       		bgt.s	locret_11898
0001227C 6100 BCEC                  		bsr.w	ObjectFall
00012280                            
00012280                            locret_11898:
00012280 4E75                       		rts	
00012282                            ; ===========================================================================
00012282                            
00012282                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012282 6100 BCE6                  		bsr.w	ObjectFall
00012286 2268 003C                  		movea.l	$3C(a0),a1
0001228A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012290 7000                       		moveq	#0,d0
00012292 1029 001A                  		move.b	$1A(a1),d0
00012296 3228 0008                  		move.w	8(a0),d1
0001229A 9268 0030                  		sub.w	$30(a0),d1
0001229E 6400                       		bcc.s	loc_118BA
000122A0 5440                       		addq.w	#2,d0
000122A2                            
000122A2                            loc_118BA:
000122A2 D040                       		add.w	d0,d0
000122A4 3228 0034                  		move.w	$34(a0),d1
000122A8 D272 0000                  		add.w	(a2,d0.w),d1
000122AC B268 000C                  		cmp.w	$C(a0),d1
000122B0 6E00                       		bgt.s	locret_11938
000122B2 2268 003C                  		movea.l	$3C(a0),a1
000122B6 7202                       		moveq	#2,d1
000122B8 4A68 0010                  		tst.w	$10(a0)
000122BC 6B00                       		bmi.s	Obj5E_Spring
000122BE 7200                       		moveq	#0,d1
000122C0                            
000122C0                            Obj5E_Spring:
000122C0 1341 003A                  		move.b	d1,$3A(a1)
000122C4 1141 003A                  		move.b	d1,$3A(a0)
000122C8 B229 001A                  		cmp.b	$1A(a1),d1
000122CC 6700                       		beq.s	loc_1192C
000122CE 08A9 0003 0022             		bclr	#3,$22(a1)
000122D4 6700                       		beq.s	loc_1192C
000122D6 4229 0025                  		clr.b	$25(a1)
000122DA 137C 0002 0024             		move.b	#2,$24(a1)
000122E0 45F8 D000                  		lea	($FFFFD000).w,a2
000122E4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000122EA 446A 0012                  		neg.w	$12(a2)
000122EE 08EA 0001 0022             		bset	#1,$22(a2)
000122F4 08AA 0003 0022             		bclr	#3,$22(a2)
000122FA 422A 003C                  		clr.b	$3C(a2)
000122FE 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012304 157C 0002 0024             		move.b	#2,$24(a2)
0001230A 303C 00CC                  		move.w	#$CC,d0
0001230E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
00012314                            
00012314                            loc_1192C:
00012314 4268 0010                  		clr.w	$10(a0)
00012318 4268 0012                  		clr.w	$12(a0)
0001231C 5528 0024                  		subq.b	#2,$24(a0)
00012320                            
00012320                            locret_11938:
00012320 4E75                       		rts	
00012322                            ; ===========================================================================
00012322 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001232C                            
0001232C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001235C                            		even
0001235C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001238C                            		even
0001238C                            ; ---------------------------------------------------------------------------
0001238C                            ; Sprite mappings - seesaws (SLZ)
0001238C                            ; ---------------------------------------------------------------------------
0001238C                            Map_obj5E:
0001238C                            	include "_maps\obj5E.asm"
0001238C                            ; ---------------------------------------------------------------------------
0001238C                            ; Sprite mappings - seesaws (SLZ)
0001238C                            ; ---------------------------------------------------------------------------
0001238C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012390 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012394 07                         byte_119AC:	dc.b 7
00012395 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001239A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001239F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000123A4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000123A9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000123AE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000123B3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000123B8 04                         byte_119D0:	dc.b 4
000123B9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000123BE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000123C3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000123C8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000123CE 00                         		even
000123CE 00                         		even
000123CE                            
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            Map_obj5Ea:
000123CE                            	include "_maps\obj5Eballs.asm"
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE 0000                       		dc.w byte_119EA-Map_obj5Ea
000123D0 0000                       		dc.w byte_119F0-Map_obj5Ea
000123D2 01                         byte_119EA:	dc.b 1
000123D3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000123D8 01                         byte_119F0:	dc.b 1
000123D9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000123DE                            		even
000123DE                            		even
000123DE                            
000123DE                            ; ===========================================================================
000123DE                            ; ---------------------------------------------------------------------------
000123DE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000123DE                            ; ---------------------------------------------------------------------------
000123DE                            
000123DE                            Obj5F:					; XREF: Obj_Index
000123DE 7000                       		moveq	#0,d0
000123E0 1028 0024                  		move.b	$24(a0),d0
000123E4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000123E8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000123EC                            ; ===========================================================================
000123EC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000123EE 0000                       		dc.w Obj5F_Action-Obj5F_Index
000123F0 0000                       		dc.w Obj5F_Display-Obj5F_Index
000123F2 0000                       		dc.w Obj5F_End-Obj5F_Index
000123F4                            ; ===========================================================================
000123F4                            
000123F4                            Obj5F_Main:				; XREF: Obj5F_Index
000123F4 5428 0024                  		addq.b	#2,$24(a0)
000123F8 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012400 317C 0400 0002             		move.w	#$400,2(a0)
00012406 0028 0004 0001             		ori.b	#4,1(a0)
0001240C 117C 0003 0018             		move.b	#3,$18(a0)
00012412 117C 000C 0019             		move.b	#$C,$19(a0)
00012418 1028 0028                  		move.b	$28(a0),d0
0001241C 6700                       		beq.s	loc_11A3C
0001241E 1140 0024                  		move.b	d0,$24(a0)
00012422 4E75                       		rts	
00012424                            ; ===========================================================================
00012424                            
00012424                            loc_11A3C:
00012424 117C 009A 0020             		move.b	#$9A,$20(a0)
0001242A 0868 0000 0022             		bchg	#0,$22(a0)
00012430                            
00012430                            Obj5F_Action:				; XREF: Obj5F_Index
00012430 7000                       		moveq	#0,d0
00012432 1028 0025                  		move.b	$25(a0),d0
00012436 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001243A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001243E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012444 6100 8C12                  		bsr.w	AnimateSprite
00012448 6000 DC60                  		bra.w	MarkObjGone
0001244C                            ; ===========================================================================
0001244C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001244E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012450 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012452                            ; ===========================================================================
00012452                            
00012452                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012452 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012456 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001245A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001245C 5428 0025                  		addq.b	#2,$25(a0)
00012460 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012466 317C 0010 0010             		move.w	#$10,$10(a0)
0001246C 117C 0001 001C             		move.b	#1,$1C(a0)
00012472 0868 0000 0022             		bchg	#0,$22(a0)
00012478 6700                       		beq.s	locret_11A96
0001247A 4468 0010                  		neg.w	$10(a0)		; change direction
0001247E                            
0001247E                            locret_11A96:
0001247E 4E75                       		rts	
00012480                            ; ===========================================================================
00012480                            
00012480                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012480 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012484 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012488 6B00                       		bmi.s	loc_11AA8
0001248A 6100 BB50                  		bsr.w	SpeedToPos
0001248E 4E75                       		rts	
00012490                            ; ===========================================================================
00012490                            
00012490                            loc_11AA8:
00012490 5528 0025                  		subq.b	#2,$25(a0)
00012494 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001249A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001249E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000124A4 4E75                       		rts	
000124A6                            ; ===========================================================================
000124A6                            
000124A6                            Obj5F_Explode:				; XREF: Obj5F_Index2
000124A6 5368 0030                  		subq.w	#1,$30(a0)
000124AA 6A00                       		bpl.s	locret_11AD0
000124AC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000124B0 117C 0000 0024             		move.b	#0,$24(a0)
000124B6                            
000124B6                            locret_11AD0:
000124B6 4E75                       		rts	
000124B8                            ; ===========================================================================
000124B8                            
000124B8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000124B8 3038 D008                  		move.w	($FFFFD008).w,d0
000124BC 9068 0008                  		sub.w	8(a0),d0
000124C0 6400                       		bcc.s	loc_11ADE
000124C2 4440                       		neg.w	d0
000124C4                            
000124C4                            loc_11ADE:
000124C4 0C40 0060                  		cmpi.w	#$60,d0
000124C8 6400                       		bcc.s	locret_11B5E
000124CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000124CE 9068 000C                  		sub.w	$C(a0),d0
000124D2 6400                       		bcc.s	Obj5F_MakeFuse
000124D4 4440                       		neg.w	d0
000124D6                            
000124D6                            Obj5F_MakeFuse:
000124D6 0C40 0060                  		cmpi.w	#$60,d0
000124DA 6400                       		bcc.s	locret_11B5E
000124DC 4A78 FE08                  		tst.w	($FFFFFE08).w
000124E0 6600                       		bne.s	locret_11B5E
000124E2 117C 0004 0025             		move.b	#4,$25(a0)
000124E8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000124EE 4268 0010                  		clr.w	$10(a0)
000124F2 117C 0002 001C             		move.b	#2,$1C(a0)
000124F8 6100 BFA4                  		bsr.w	SingleObjLoad2
000124FC 6600                       		bne.s	locret_11B5E
000124FE 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012502 3368 0008 0008             		move.w	8(a0),8(a1)
00012508 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001250E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012514 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001251A 137C 0004 0028             		move.b	#4,$28(a1)
00012520 137C 0003 001C             		move.b	#3,$1C(a1)
00012526 337C 0010 0012             		move.w	#$10,$12(a1)
0001252C 0828 0001 0022             		btst	#1,$22(a0)
00012532 6700                       		beq.s	loc_11B54
00012534 4469 0012                  		neg.w	$12(a1)
00012538                            
00012538                            loc_11B54:
00012538 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001253E 2348 003C                  		move.l	a0,$3C(a1)
00012542                            
00012542                            locret_11B5E:
00012542 4E75                       		rts	
00012544                            ; ===========================================================================
00012544                            
00012544                            Obj5F_Display:				; XREF: Obj5F_Index
00012544 6100                       		bsr.s	loc_11B70
00012546 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001254C 6100 8B0A                  		bsr.w	AnimateSprite
00012550 6000 DB58                  		bra.w	MarkObjGone
00012554                            ; ===========================================================================
00012554                            
00012554                            loc_11B70:
00012554 5368 0030                  		subq.w	#1,$30(a0)
00012558 6B00                       		bmi.s	loc_11B7C
0001255A 6100 BA80                  		bsr.w	SpeedToPos
0001255E 4E75                       		rts	
00012560                            ; ===========================================================================
00012560                            
00012560                            loc_11B7C:
00012560 4268 0030                  		clr.w	$30(a0)
00012564 4228 0024                  		clr.b	$24(a0)
00012568 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001256E 7203                       		moveq	#3,d1
00012570 2248                       		movea.l	a0,a1
00012572 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012578 6000                       		bra.s	Obj5F_MakeShrap
0001257A                            ; ===========================================================================
0001257A                            
0001257A                            Obj5F_Loop:
0001257A 6100 BF22                  		bsr.w	SingleObjLoad2
0001257E 6600                       		bne.s	loc_11BCE
00012580                            
00012580                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012580 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012584 3368 0008 0008             		move.w	8(a0),8(a1)
0001258A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012590 137C 0006 0028             		move.b	#6,$28(a1)
00012596 137C 0004 001C             		move.b	#4,$1C(a1)
0001259C 335A 0010                  		move.w	(a2)+,$10(a1)
000125A0 335A 0012                  		move.w	(a2)+,$12(a1)
000125A4 137C 0098 0020             		move.b	#$98,$20(a1)
000125AA 08E9 0007 0001             		bset	#7,1(a1)
000125B0                            
000125B0                            loc_11BCE:
000125B0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000125B4                            
000125B4 117C 0006 0024             		move.b	#6,$24(a0)
000125BA                            
000125BA                            Obj5F_End:				; XREF: Obj5F_Index
000125BA 6100 BA20                  		bsr.w	SpeedToPos
000125BE 0668 0018 0012             		addi.w	#$18,$12(a0)
000125C4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000125CA 6100 8A8C                  		bsr.w	AnimateSprite
000125CE 4A28 0001                  		tst.b	1(a0)
000125D2 6A00 BA6A                  		bpl.w	DeleteObject
000125D6 6000 BA2A                  		bra.w	DisplaySprite
000125DA                            ; ===========================================================================
000125DA FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000125EA                            
000125EA                            Ani_obj5F:
000125EA                            	include "_anim\obj5F.asm"
000125EA                            ; ---------------------------------------------------------------------------
000125EA                            ; Animation script - Bomb enemy
000125EA                            ; ---------------------------------------------------------------------------
000125EA 0000                       		dc.w byte_11C12-Ani_obj5F
000125EC 0000                       		dc.w byte_11C16-Ani_obj5F
000125EE 0000                       		dc.w byte_11C1C-Ani_obj5F
000125F0 0000                       		dc.w byte_11C20-Ani_obj5F
000125F2 0000                       		dc.w byte_11C24-Ani_obj5F
000125F4 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000125F8 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000125FE 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012602 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012606 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001260A                            		even
0001260A                            		even
0001260A                            
0001260A                            ; ---------------------------------------------------------------------------
0001260A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001260A                            ; ---------------------------------------------------------------------------
0001260A                            Map_obj5F:
0001260A                            	include "_maps\obj5F.asm"
0001260A                            ; ---------------------------------------------------------------------------
0001260A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001260A                            ; ---------------------------------------------------------------------------
0001260A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001260E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012612 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012616 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001261A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001261E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012622 03                         byte_11C40:	dc.b 3
00012623 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012628 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001262D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012632 03                         byte_11C50:	dc.b 3
00012633 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012638 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001263D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012642 03                         byte_11C60:	dc.b 3
00012643 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012648 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001264D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012652 03                         byte_11C70:	dc.b 3
00012653 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012658 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001265D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012662 03                         byte_11C80:	dc.b 3
00012663 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012668 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001266D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012672 03                         byte_11C90:	dc.b 3
00012673 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012678 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001267D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012682 02                         byte_11CA0:	dc.b 2
00012683 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012688 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001268D 02                         byte_11CAB:	dc.b 2
0001268E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012693 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012698 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012699 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001269E 01                         byte_11CBC:	dc.b 1			; fuse
0001269F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000126A4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000126A5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000126AA 01                         byte_11CC8:	dc.b 1			; fireball
000126AB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000126B0                            		even
000126B0                            		even
000126B0                            
000126B0                            ; ===========================================================================
000126B0                            ; ---------------------------------------------------------------------------
000126B0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000126B0                            ; ---------------------------------------------------------------------------
000126B0                            
000126B0                            Obj60:					; XREF: Obj_Index
000126B0 7000                       		moveq	#0,d0
000126B2 1028 0024                  		move.b	$24(a0),d0
000126B6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000126BA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000126BE                            ; ===========================================================================
000126BE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000126C0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000126C2 0000                       		dc.w Obj60_Display-Obj60_Index
000126C4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000126C6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000126C8                            ; ===========================================================================
000126C8                            
000126C8                            Obj60_Main:				; XREF: Obj60_Index
000126C8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000126D0 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000126D6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000126DC 6700                       		beq.s	loc_11D02
000126DE 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000126E4                            
000126E4                            loc_11D02:
000126E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000126EA 6600                       		bne.s	loc_11D10
000126EC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000126F2                            
000126F2                            loc_11D10:
000126F2 0028 0004 0001             		ori.b	#4,1(a0)
000126F8 117C 0004 0018             		move.b	#4,$18(a0)
000126FE 117C 000B 0020             		move.b	#$B,$20(a0)
00012704 117C 000C 0019             		move.b	#$C,$19(a0)
0001270A 7400                       		moveq	#0,d2
0001270C 45E8 0037                  		lea	$37(a0),a2
00012710 264A                       		movea.l	a2,a3
00012712 524A                       		addq.w	#1,a2
00012714 7203                       		moveq	#3,d1
00012716                            
00012716                            Obj60_MakeOrbs:
00012716 6100 BD86                  		bsr.w	SingleObjLoad2
0001271A 6600                       		bne.s	loc_11D90
0001271C 5213                       		addq.b	#1,(a3)
0001271E 3A09                       		move.w	a1,d5
00012720 0445 D000                  		subi.w	#-$3000,d5
00012724 EC4D                       		lsr.w	#6,d5
00012726 0245 007F                  		andi.w	#$7F,d5
0001272A 14C5                       		move.b	d5,(a2)+
0001272C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001272E 137C 0006 0024             		move.b	#6,$24(a1)
00012734 2368 0004 0004             		move.l	4(a0),4(a1)
0001273A 3368 0002 0002             		move.w	2(a0),2(a1)
00012740 0029 0004 0001             		ori.b	#4,1(a1)
00012746 137C 0004 0018             		move.b	#4,$18(a1)
0001274C 137C 0008 0019             		move.b	#8,$19(a1)
00012752 137C 0003 001A             		move.b	#3,$1A(a1)
00012758 137C 0098 0020             		move.b	#$98,$20(a1)
0001275E 1342 0026                  		move.b	d2,$26(a1)
00012762 0602 0040                  		addi.b	#$40,d2
00012766 2348 003C                  		move.l	a0,$3C(a1)
0001276A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001276E                            
0001276E                            loc_11D90:
0001276E 7001                       		moveq	#1,d0
00012770 0828 0000 0022             		btst	#0,$22(a0)
00012776 6700                       		beq.s	Obj60_Move
00012778 4440                       		neg.w	d0
0001277A                            
0001277A                            Obj60_Move:
0001277A 1140 0036                  		move.b	d0,$36(a0)
0001277E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012784 5428 0024                  		addq.b	#2,$24(a0)
00012788 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001278E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012794 6700                       		beq.s	locret_11DBC	; if not, branch
00012796 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001279A                            
0001279A                            locret_11DBC:
0001279A 4E75                       		rts	
0001279C                            ; ===========================================================================
0001279C                            
0001279C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001279C 3038 D008                  		move.w	($FFFFD008).w,d0
000127A0 9068 0008                  		sub.w	8(a0),d0
000127A4 6400                       		bcc.s	loc_11DCA
000127A6 4440                       		neg.w	d0
000127A8                            
000127A8                            loc_11DCA:
000127A8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000127AC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127AE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127B2 9068 000C                  		sub.w	$C(a0),d0
000127B6 6400                       		bcc.s	loc_11DDC
000127B8 4440                       		neg.w	d0
000127BA                            
000127BA                            loc_11DDC:
000127BA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000127BE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000127C4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000127C6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000127CC                            
000127CC                            Obj60_Animate:
000127CC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000127D2 6100 8884                  		bsr.w	AnimateSprite
000127D6 6000 0000                  		bra.w	Obj60_ChkDel
000127DA                            ; ===========================================================================
000127DA                            
000127DA                            Obj60_Display:				; XREF: Obj60_Index
000127DA 6100 B800                  		bsr.w	SpeedToPos
000127DE                            
000127DE                            Obj60_ChkDel:				; XREF: Obj60_Animate
000127DE 3028 0008                  		move.w	8(a0),d0
000127E2 0240 FF80                  		andi.w	#$FF80,d0
000127E6 3238 F700                  		move.w	($FFFFF700).w,d1
000127EA 0441 0080                  		subi.w	#$80,d1
000127EE 0241 FF80                  		andi.w	#$FF80,d1
000127F2 9041                       		sub.w	d1,d0
000127F4 0C40 0280                  		cmpi.w	#$280,d0
000127F8 6200 0000                  		bhi.w	Obj60_ChkGone
000127FC 6000 B804                  		bra.w	DisplaySprite
00012800                            ; ===========================================================================
00012800                            
00012800                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012800 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012804 7000                       		moveq	#0,d0
00012806 1028 0023                  		move.b	$23(a0),d0
0001280A 6700                       		beq.s	loc_11E34
0001280C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012812                            
00012812                            loc_11E34:
00012812 45E8 0037                  		lea	$37(a0),a2
00012816 7400                       		moveq	#0,d2
00012818 141A                       		move.b	(a2)+,d2
0001281A 5342                       		subq.w	#1,d2
0001281C 6500                       		bcs.s	Obj60_Delete
0001281E                            
0001281E                            loc_11E40:
0001281E 7000                       		moveq	#0,d0
00012820 101A                       		move.b	(a2)+,d0
00012822 ED48                       		lsl.w	#6,d0
00012824 0680 00FF D000             		addi.l	#$FFD000,d0
0001282A 2240                       		movea.l	d0,a1
0001282C 6100 B812                  		bsr.w	DeleteObject2
00012830 51CA FFEC                  		dbf	d2,loc_11E40
00012834                            
00012834                            Obj60_Delete:
00012834 6000 B808                  		bra.w	DeleteObject
00012838                            ; ===========================================================================
00012838                            
00012838                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012838 2268 003C                  		movea.l	$3C(a0),a1
0001283C 0C11 0060                  		cmpi.b	#$60,0(a1)
00012840 6600 B7FC                  		bne.w	DeleteObject
00012844 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001284A 6600                       		bne.s	Obj60_Circle
0001284C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012852 6600                       		bne.s	Obj60_Circle
00012854 5428 0024                  		addq.b	#2,$24(a0)
00012858 5329 0037                  		subq.b	#1,$37(a1)
0001285C 6600                       		bne.s	Obj60_FireOrb
0001285E 5429 0024                  		addq.b	#2,$24(a1)
00012862                            
00012862                            Obj60_FireOrb:
00012862 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012868 0829 0000 0022             		btst	#0,$22(a1)
0001286E 6700                       		beq.s	Obj60_Display2
00012870 4468 0010                  		neg.w	$10(a0)
00012874                            
00012874                            Obj60_Display2:
00012874 6000 B78C                  		bra.w	DisplaySprite
00012878                            ; ===========================================================================
00012878                            
00012878                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012878 1028 0026                  		move.b	$26(a0),d0
0001287C 4EB9 0000 2D34             		jsr	(CalcSine).l
00012882 E841                       		asr.w	#4,d1
00012884 D269 0008                  		add.w	8(a1),d1
00012888 3141 0008                  		move.w	d1,8(a0)
0001288C E840                       		asr.w	#4,d0
0001288E D069 000C                  		add.w	$C(a1),d0
00012892 3140 000C                  		move.w	d0,$C(a0)
00012896 1029 0036                  		move.b	$36(a1),d0
0001289A D128 0026                  		add.b	d0,$26(a0)
0001289E 6000 B762                  		bra.w	DisplaySprite
000128A2                            ; ===========================================================================
000128A2                            
000128A2                            Obj60_ChkDel2:				; XREF: Obj60_Index
000128A2 6100 B738                  		bsr.w	SpeedToPos
000128A6 4A28 0001                  		tst.b	1(a0)
000128AA 6A00 B792                  		bpl.w	DeleteObject
000128AE 6000 B752                  		bra.w	DisplaySprite
000128B2                            ; ===========================================================================
000128B2                            Ani_obj60:
000128B2                            	include "_anim\obj60.asm"
000128B2                            ; ---------------------------------------------------------------------------
000128B2                            ; Animation script - Orbinaut enemy
000128B2                            ; ---------------------------------------------------------------------------
000128B2 0000                       		dc.w byte_11EDA-Ani_obj60
000128B4 0000                       		dc.w byte_11EDE-Ani_obj60
000128B6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000128BA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000128C0                            		even
000128C0                            		even
000128C0                            
000128C0                            ; ---------------------------------------------------------------------------
000128C0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128C0                            ; ---------------------------------------------------------------------------
000128C0                            Map_obj60:
000128C0                            	include "_maps\obj60.asm"
000128C0                            ; ---------------------------------------------------------------------------
000128C0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128C0                            ; ---------------------------------------------------------------------------
000128C0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000128C4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000128C8 01                         byte_11EEC:	dc.b 1
000128C9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000128CE 01                         byte_11EF2:	dc.b 1
000128CF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000128D4 01                         byte_11EF8:	dc.b 1
000128D5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000128DA 01                         byte_11EFE:	dc.b 1
000128DB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000128E0                            		even
000128E0                            		even
000128E0                            
000128E0                            ; ===========================================================================
000128E0                            ; ---------------------------------------------------------------------------
000128E0                            ; Object 16 - harpoon (LZ)
000128E0                            ; ---------------------------------------------------------------------------
000128E0                            
000128E0                            Obj16:					; XREF: Obj_Index
000128E0 7000                       		moveq	#0,d0
000128E2 1028 0024                  		move.b	$24(a0),d0
000128E6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000128EA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000128EE                            ; ===========================================================================
000128EE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000128F0 0000                       		dc.w Obj16_Move-Obj16_Index
000128F2 0000                       		dc.w Obj16_Wait-Obj16_Index
000128F4                            ; ===========================================================================
000128F4                            
000128F4                            Obj16_Main:				; XREF: Obj16_Index
000128F4 5428 0024                  		addq.b	#2,$24(a0)
000128F8 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012900 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012906 0028 0004 0001             		ori.b	#4,1(a0)
0001290C 117C 0004 0018             		move.b	#4,$18(a0)
00012912 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012918 117C 0014 0019             		move.b	#$14,$19(a0)
0001291E 317C 003C 0030             		move.w	#60,$30(a0)
00012924                            
00012924                            Obj16_Move:				; XREF: Obj16_Index
00012924 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001292A 6100 872C                  		bsr.w	AnimateSprite
0001292E 7000                       		moveq	#0,d0
00012930 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012934 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001293A 6000 D76E                  		bra.w	MarkObjGone
0001293E                            ; ===========================================================================
0001293E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012944                            ; ===========================================================================
00012944                            
00012944                            Obj16_Wait:				; XREF: Obj16_Index
00012944 5368 0030                  		subq.w	#1,$30(a0)
00012948 6A00                       		bpl.s	Obj16_ChkDel
0001294A 317C 003C 0030             		move.w	#60,$30(a0)
00012950 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012954 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001295A                            
0001295A                            Obj16_ChkDel:
0001295A 6000 D74E                  		bra.w	MarkObjGone
0001295E                            ; ===========================================================================
0001295E                            Ani_obj16:
0001295E                            	include "_anim\obj16.asm"
0001295E                            ; ---------------------------------------------------------------------------
0001295E                            ; Animation script - harpoon (LZ)
0001295E                            ; ---------------------------------------------------------------------------
0001295E 0000                       		dc.w byte_11F8A-Ani_obj16
00012960 0000                       		dc.w byte_11F8E-Ani_obj16
00012962 0000                       		dc.w byte_11F92-Ani_obj16
00012964 0000                       		dc.w byte_11F96-Ani_obj16
00012966 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001296A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001296E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012972 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012976                            		even
00012976                            		even
00012976                            
00012976                            ; ---------------------------------------------------------------------------
00012976                            ; Sprite mappings - harpoon (LZ)
00012976                            ; ---------------------------------------------------------------------------
00012976                            Map_obj16:
00012976                            	include "_maps\obj16.asm"
00012976                            ; ---------------------------------------------------------------------------
00012976                            ; Sprite mappings - harpoon (LZ)
00012976                            ; ---------------------------------------------------------------------------
00012976 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001297A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001297E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012982 01                         byte_11FA6:	dc.b 1
00012983 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012988 01                         byte_11FAC:	dc.b 1
00012989 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001298E 02                         byte_11FB2:	dc.b 2
0001298F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012994 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012999 01                         byte_11FBD:	dc.b 1
0001299A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001299F 01                         byte_11FC3:	dc.b 1
000129A0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000129A5 02                         byte_11FC9:	dc.b 2
000129A6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000129AB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000129B0                            		even
000129B0                            		even
000129B0                            
000129B0                            ; ===========================================================================
000129B0                            ; ---------------------------------------------------------------------------
000129B0                            ; Object 61 - blocks (LZ)
000129B0                            ; ---------------------------------------------------------------------------
000129B0                            
000129B0                            Obj61:					; XREF: Obj_Index
000129B0 7000                       		moveq	#0,d0
000129B2 1028 0024                  		move.b	$24(a0),d0
000129B6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000129BA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000129BE                            ; ===========================================================================
000129BE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000129C0 0000                       		dc.w Obj61_Action-Obj61_Index
000129C2                            
000129C2 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000129C4 200C                       		dc.b $20, $C
000129C6 1010                       		dc.b $10, $10
000129C8 1010                       		dc.b $10, $10
000129CA                            ; ===========================================================================
000129CA                            
000129CA                            Obj61_Main:				; XREF: Obj61_Index
000129CA 5428 0024                  		addq.b	#2,$24(a0)
000129CE 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000129D6 317C 43E6 0002             		move.w	#$43E6,2(a0)
000129DC 117C 0004 0001             		move.b	#4,1(a0)
000129E2 117C 0003 0018             		move.b	#3,$18(a0)
000129E8 7000                       		moveq	#0,d0
000129EA 1028 0028                  		move.b	$28(a0),d0
000129EE E648                       		lsr.w	#3,d0
000129F0 0240 000E                  		andi.w	#$E,d0
000129F4 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000129F8 115A 0019                  		move.b	(a2)+,$19(a0)
000129FC 1152 0016                  		move.b	(a2),$16(a0)
00012A00 E248                       		lsr.w	#1,d0
00012A02 1140 001A                  		move.b	d0,$1A(a0)
00012A06 3168 0008 0034             		move.w	8(a0),$34(a0)
00012A0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A12 1028 0028                  		move.b	$28(a0),d0
00012A16 0200 000F                  		andi.b	#$F,d0
00012A1A 6700                       		beq.s	Obj61_Action
00012A1C 0C00 0007                  		cmpi.b	#7,d0
00012A20 6700                       		beq.s	Obj61_Action
00012A22 117C 0001 0038             		move.b	#1,$38(a0)
00012A28                            
00012A28                            Obj61_Action:				; XREF: Obj61_Index
00012A28 3F28 0008                  		move.w	8(a0),-(sp)
00012A2C 7000                       		moveq	#0,d0
00012A2E 1028 0028                  		move.b	$28(a0),d0
00012A32 0240 000F                  		andi.w	#$F,d0
00012A36 D040                       		add.w	d0,d0
00012A38 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A3C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A40 381F                       		move.w	(sp)+,d4
00012A42 4A28 0001                  		tst.b	1(a0)
00012A46 6A00                       		bpl.s	Obj61_ChkDel
00012A48 7200                       		moveq	#0,d1
00012A4A 1228 0019                  		move.b	$19(a0),d1
00012A4E 0641 000B                  		addi.w	#$B,d1
00012A52 7400                       		moveq	#0,d2
00012A54 1428 0016                  		move.b	$16(a0),d2
00012A58 3602                       		move.w	d2,d3
00012A5A 5243                       		addq.w	#1,d3
00012A5C 6100 D974                  		bsr.w	SolidObject
00012A60 1144 003F                  		move.b	d4,$3F(a0)
00012A64 6100 0000                  		bsr.w	loc_12180
00012A68                            
00012A68                            Obj61_ChkDel:
00012A68 3028 0034                  		move.w	$34(a0),d0
00012A6C 0240 FF80                  		andi.w	#$FF80,d0
00012A70 3238 F700                  		move.w	($FFFFF700).w,d1
00012A74 0441 0080                  		subi.w	#$80,d1
00012A78 0241 FF80                  		andi.w	#$FF80,d1
00012A7C 9041                       		sub.w	d1,d0
00012A7E 0C40 0280                  		cmpi.w	#$280,d0
00012A82 6200 B5BA                  		bhi.w	DeleteObject
00012A86 6000 B57A                  		bra.w	DisplaySprite
00012A8A                            ; ===========================================================================
00012A8A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A8E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A92 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012A96 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012A9A                            ; ===========================================================================
00012A9A                            
00012A9A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012A9A 4E75                       		rts	
00012A9C                            ; ===========================================================================
00012A9C                            
00012A9C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012A9C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012AA0 6600                       		bne.s	loc_120D6	; if yes, branch
00012AA2 0828 0003 0022             		btst	#3,$22(a0)
00012AA8 6700                       		beq.s	locret_120D4
00012AAA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012AB0                            
00012AB0                            locret_120D4:
00012AB0 4E75                       		rts	
00012AB2                            ; ===========================================================================
00012AB2                            
00012AB2                            loc_120D6:
00012AB2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012AB6 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012AB8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012ABC 4228 0038                  		clr.b	$38(a0)
00012AC0 4E75                       		rts	
00012AC2                            ; ===========================================================================
00012AC2                            
00012AC2                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012AC2 6100 B518                  		bsr.w	SpeedToPos
00012AC6 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012ACA 6100 0000                  		bsr.w	ObjHitFloor
00012ACE 4A41                       		tst.w	d1
00012AD0 6A00 0000                  		bpl.w	locret_12106
00012AD4 5241                       		addq.w	#1,d1
00012AD6 D368 000C                  		add.w	d1,$C(a0)
00012ADA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012ADE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AE2                            
00012AE2                            locret_12106:
00012AE2 4E75                       		rts	
00012AE4                            ; ===========================================================================
00012AE4                            
00012AE4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012AE4 6100 B4F6                  		bsr.w	SpeedToPos
00012AE8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012AEC 6100 0000                  		bsr.w	ObjHitCeiling
00012AF0 4A41                       		tst.w	d1
00012AF2 6A00 0000                  		bpl.w	locret_12126
00012AF6 9368 000C                  		sub.w	d1,$C(a0)
00012AFA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012AFE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B02                            
00012B02                            locret_12126:
00012B02 4E75                       		rts	
00012B04                            ; ===========================================================================
00012B04                            
00012B04                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012B04 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012B0A 6600                       		bne.s	locret_12138	; if not, branch
00012B0C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B10 4228 0038                  		clr.b	$38(a0)
00012B14                            
00012B14                            locret_12138:
00012B14 4E75                       		rts	
00012B16                            ; ===========================================================================
00012B16                            
00012B16                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B16 3038 F646                  		move.w	($FFFFF646).w,d0
00012B1A 9068 000C                  		sub.w	$C(a0),d0
00012B1E 6700                       		beq.s	locret_1217E
00012B20 6400                       		bcc.s	loc_12162
00012B22 0C40 FFFE                  		cmpi.w	#-2,d0
00012B26 6C00                       		bge.s	loc_1214E
00012B28 70FE                       		moveq	#-2,d0
00012B2A                            
00012B2A                            loc_1214E:
00012B2A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B2E 6100 0000                  		bsr.w	ObjHitCeiling
00012B32 4A41                       		tst.w	d1
00012B34 6A00 0000                  		bpl.w	locret_12160
00012B38 9368 000C                  		sub.w	d1,$C(a0)
00012B3C                            
00012B3C                            locret_12160:
00012B3C 4E75                       		rts	
00012B3E                            ; ===========================================================================
00012B3E                            
00012B3E                            loc_12162:				; XREF: Obj61_Type07
00012B3E 0C40 0002                  		cmpi.w	#2,d0
00012B42 6F00                       		ble.s	loc_1216A
00012B44 7002                       		moveq	#2,d0
00012B46                            
00012B46                            loc_1216A:
00012B46 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B4A 6100 0000                  		bsr.w	ObjHitFloor
00012B4E 4A41                       		tst.w	d1
00012B50 6A00 0000                  		bpl.w	locret_1217E
00012B54 5241                       		addq.w	#1,d1
00012B56 D368 000C                  		add.w	d1,$C(a0)
00012B5A                            
00012B5A                            locret_1217E:
00012B5A 4E75                       		rts	
00012B5C                            ; ===========================================================================
00012B5C                            
00012B5C                            loc_12180:				; XREF: Obj61_Action
00012B5C 4A28 0038                  		tst.b	$38(a0)
00012B60 6700                       		beq.s	locret_121C0
00012B62 0828 0003 0022             		btst	#3,$22(a0)
00012B68 6600                       		bne.s	loc_1219A
00012B6A 4A28 003E                  		tst.b	$3E(a0)
00012B6E 6700                       		beq.s	locret_121C0
00012B70 5928 003E                  		subq.b	#4,$3E(a0)
00012B74 6000                       		bra.s	loc_121A6
00012B76                            ; ===========================================================================
00012B76                            
00012B76                            loc_1219A:
00012B76 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012B7C 6700                       		beq.s	locret_121C0
00012B7E 5828 003E                  		addq.b	#4,$3E(a0)
00012B82                            
00012B82                            loc_121A6:
00012B82 1028 003E                  		move.b	$3E(a0),d0
00012B86 4EB9 0000 2D34             		jsr	(CalcSine).l
00012B8C 323C 0400                  		move.w	#$400,d1
00012B90 C1C1                       		muls.w	d1,d0
00012B92 4840                       		swap	d0
00012B94 D068 0030                  		add.w	$30(a0),d0
00012B98 3140 000C                  		move.w	d0,$C(a0)
00012B9C                            
00012B9C                            locret_121C0:
00012B9C 4E75                       		rts	
00012B9E                            ; ===========================================================================
00012B9E                            ; ---------------------------------------------------------------------------
00012B9E                            ; Sprite mappings - blocks (LZ)
00012B9E                            ; ---------------------------------------------------------------------------
00012B9E                            Map_obj61:
00012B9E                            	include "_maps\obj61.asm"
00012B9E                            ; ---------------------------------------------------------------------------
00012B9E                            ; Sprite mappings - blocks (LZ)
00012B9E                            ; ---------------------------------------------------------------------------
00012B9E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012BA2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012BA6 01                         byte_121CA:	dc.b 1
00012BA7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BAC 02                         byte_121D0:	dc.b 2
00012BAD F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012BB2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012BB7 01                         byte_121DB:	dc.b 1
00012BB8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012BBD 01                         byte_121E1:	dc.b 1
00012BBE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012BC4 00                         		even
00012BC4 00                         		even
00012BC4                            
00012BC4                            ; ===========================================================================
00012BC4                            ; ---------------------------------------------------------------------------
00012BC4                            ; Object 62 - gargoyle head (LZ)
00012BC4                            ; ---------------------------------------------------------------------------
00012BC4                            
00012BC4                            Obj62:					; XREF: Obj_Index
00012BC4 7000                       		moveq	#0,d0
00012BC6 1028 0024                  		move.b	$24(a0),d0
00012BCA 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012BCE 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012BD2 6000 D4D6                  		bra.w	MarkObjGone
00012BD6                            ; ===========================================================================
00012BD6 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012BD8 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012BDA 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012BDC 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012BDE                            
00012BDE 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012BE6                            ; ===========================================================================
00012BE6                            
00012BE6                            Obj62_Main:				; XREF: Obj62_Index
00012BE6 5428 0024                  		addq.b	#2,$24(a0)
00012BEA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012BF2 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012BF8 0028 0004 0001             		ori.b	#4,1(a0)
00012BFE 117C 0003 0018             		move.b	#3,$18(a0)
00012C04 117C 0010 0019             		move.b	#$10,$19(a0)
00012C0A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C0E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C12 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C18 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C1E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C24                            
00012C24                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C24 5328 001E                  		subq.b	#1,$1E(a0)
00012C28 6600                       		bne.s	Obj62_NoFire
00012C2A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C30 6100 B64A                  		bsr.w	ChkObjOnScreen
00012C34 6600                       		bne.s	Obj62_NoFire
00012C36 6100 B850                  		bsr.w	SingleObjLoad
00012C3A 6600                       		bne.s	Obj62_NoFire
00012C3C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C40 5829 0024                  		addq.b	#4,$24(a1)
00012C44 3368 0008 0008             		move.w	8(a0),8(a1)
00012C4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C50 1368 0001 0001             		move.b	1(a0),1(a1)
00012C56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C5C                            
00012C5C                            Obj62_NoFire:
00012C5C 4E75                       		rts	
00012C5E                            ; ===========================================================================
00012C5E                            
00012C5E                            Obj62_FireBall:				; XREF: Obj62_Index
00012C5E 5428 0024                  		addq.b	#2,$24(a0)
00012C62 117C 0008 0016             		move.b	#8,$16(a0)
00012C68 117C 0008 0017             		move.b	#8,$17(a0)
00012C6E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C76 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012C7C 0028 0004 0001             		ori.b	#4,1(a0)
00012C82 117C 0004 0018             		move.b	#4,$18(a0)
00012C88 117C 0098 0020             		move.b	#$98,$20(a0)
00012C8E 117C 0008 0019             		move.b	#8,$19(a0)
00012C94 117C 0002 001A             		move.b	#2,$1A(a0)
00012C9A 5068 000C                  		addq.w	#8,$C(a0)
00012C9E 317C 0200 0010             		move.w	#$200,$10(a0)
00012CA4 0828 0000 0022             		btst	#0,$22(a0)
00012CAA 6600                       		bne.s	Obj62_Sound
00012CAC 4468 0010                  		neg.w	$10(a0)
00012CB0                            
00012CB0                            Obj62_Sound:
00012CB0 303C 00AE                  		move.w	#$AE,d0
00012CB4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012CBA                            
00012CBA                            Obj62_AniFire:				; XREF: Obj62_Index
00012CBA 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012CBE 0200 0007                  		andi.b	#7,d0
00012CC2 6600                       		bne.s	Obj62_StopFire
00012CC4 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012CCA                            
00012CCA                            Obj62_StopFire:
00012CCA 6100 B310                  		bsr.w	SpeedToPos
00012CCE 0828 0000 0022             		btst	#0,$22(a0)
00012CD4 6600                       		bne.s	Obj62_StopFire2
00012CD6 76F8                       		moveq	#-8,d3
00012CD8 6100 0000                  		bsr.w	ObjHitWallLeft
00012CDC 4A41                       		tst.w	d1
00012CDE 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012CE2 4E75                       		rts	
00012CE4                            ; ===========================================================================
00012CE4                            
00012CE4                            Obj62_StopFire2:
00012CE4 7608                       		moveq	#8,d3
00012CE6 6100 0000                  		bsr.w	ObjHitWallRight
00012CEA 4A41                       		tst.w	d1
00012CEC 6B00 B350                  		bmi.w	DeleteObject
00012CF0 4E75                       		rts	
00012CF2                            ; ===========================================================================
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2                            ; Sprite mappings - gargoyle head (LZ)
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2                            Map_obj62:
00012CF2                            	include "_maps\obj62.asm"
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2                            ; Sprite mappings - gargoyle head (LZ)
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012CF6 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012CFA 03                         byte_12320:	dc.b 3
00012CFB F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012D00 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012D05 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012D0A 01                         byte_12330:	dc.b 1
00012D0B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D10 01                         byte_12336:	dc.b 1
00012D11 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D16                            		even
00012D16                            		even
00012D16                            
00012D16                            ; ===========================================================================
00012D16                            ; ---------------------------------------------------------------------------
00012D16                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D16                            ; ---------------------------------------------------------------------------
00012D16                            
00012D16                            Obj63:					; XREF: Obj_Index
00012D16 7000                       		moveq	#0,d0
00012D18 1028 0024                  		move.b	$24(a0),d0
00012D1C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D20 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D24 3028 0030                  		move.w	$30(a0),d0
00012D28 0240 FF80                  		andi.w	#$FF80,d0
00012D2C 3238 F700                  		move.w	($FFFFF700).w,d1
00012D30 0441 0080                  		subi.w	#$80,d1
00012D34 0241 FF80                  		andi.w	#$FF80,d1
00012D38 9041                       		sub.w	d1,d0
00012D3A 0C40 0280                  		cmpi.w	#$280,d0
00012D3E 6200                       		bhi.s	loc_1236A
00012D40                            
00012D40                            Obj63_Display:				; XREF: loc_1236A
00012D40 6000 B2C0                  		bra.w	DisplaySprite
00012D44                            ; ===========================================================================
00012D44                            
00012D44                            loc_1236A:				; XREF: Obj63
00012D44 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D4A 6600                       		bne.s	loc_12378
00012D4C 0C40 FF80                  		cmpi.w	#-$80,d0
00012D50 64EE                       		bcc.s	Obj63_Display
00012D52                            
00012D52                            loc_12378:
00012D52 1028 002F                  		move.b	$2F(a0),d0
00012D56 6A00 B2E6                  		bpl.w	DeleteObject
00012D5A 0240 007F                  		andi.w	#$7F,d0
00012D5E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012D62 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012D68 6000 B2D4                  		bra.w	DeleteObject
00012D6C                            ; ===========================================================================
00012D6C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012D6E 0000                       		dc.w loc_124B2-Obj63_Index
00012D70 0000                       		dc.w loc_124C2-Obj63_Index
00012D72 0000                       		dc.w loc_124DE-Obj63_Index
00012D74                            ; ===========================================================================
00012D74                            
00012D74                            Obj63_Main:				; XREF: Obj63_Index
00012D74 1028 0028                  		move.b	$28(a0),d0
00012D78 6B00 0000                  		bmi.w	loc_12460
00012D7C 5428 0024                  		addq.b	#2,$24(a0)
00012D80 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012D88 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012D8E 0028 0004 0001             		ori.b	#4,1(a0)
00012D94 117C 0010 0019             		move.b	#$10,$19(a0)
00012D9A 117C 0004 0018             		move.b	#4,$18(a0)
00012DA0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012DA6 6600                       		bne.s	loc_123E2
00012DA8 5828 0024                  		addq.b	#4,$24(a0)
00012DAC 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012DB2 117C 0001 0018             		move.b	#1,$18(a0)
00012DB8 6000 0000                  		bra.w	loc_124DE
00012DBC                            ; ===========================================================================
00012DBC                            
00012DBC                            loc_123E2:
00012DBC 117C 0004 001A             		move.b	#4,$1A(a0)
00012DC2 7000                       		moveq	#0,d0
00012DC4 1028 0028                  		move.b	$28(a0),d0
00012DC8 3200                       		move.w	d0,d1
00012DCA E648                       		lsr.w	#3,d0
00012DCC 0240 001E                  		andi.w	#$1E,d0
00012DD0 45FA 0000                  		lea	Obj63_Data(pc),a2
00012DD4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012DD8 315A 0038                  		move.w	(a2)+,$38(a0)
00012DDC 315A 0030                  		move.w	(a2)+,$30(a0)
00012DE0 214A 003C                  		move.l	a2,$3C(a0)
00012DE4 0241 000F                  		andi.w	#$F,d1
00012DE8 E549                       		lsl.w	#2,d1
00012DEA 1141 0038                  		move.b	d1,$38(a0)
00012DEE 117C 0004 003A             		move.b	#4,$3A(a0)
00012DF4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012DF8 6700                       		beq.s	loc_1244C
00012DFA 117C 0001 003B             		move.b	#1,$3B(a0)
00012E00 4428 003A                  		neg.b	$3A(a0)
00012E04 7200                       		moveq	#0,d1
00012E06 1228 0038                  		move.b	$38(a0),d1
00012E0A D228 003A                  		add.b	$3A(a0),d1
00012E0E B228 0039                  		cmp.b	$39(a0),d1
00012E12 6500                       		bcs.s	loc_12448
00012E14 1001                       		move.b	d1,d0
00012E16 7200                       		moveq	#0,d1
00012E18 4A00                       		tst.b	d0
00012E1A 6A00                       		bpl.s	loc_12448
00012E1C 1228 0039                  		move.b	$39(a0),d1
00012E20 5901                       		subq.b	#4,d1
00012E22                            
00012E22                            loc_12448:
00012E22 1141 0038                  		move.b	d1,$38(a0)
00012E26                            
00012E26                            loc_1244C:
00012E26 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E2C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E32 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E36 6000 0000                  		bra.w	loc_124B2
00012E3A                            ; ===========================================================================
00012E3A                            
00012E3A                            loc_12460:				; XREF: Obj63_Main
00012E3A 1140 002F                  		move.b	d0,$2F(a0)
00012E3E 0240 007F                  		andi.w	#$7F,d0
00012E42 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E46 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E4C 6600 B1F0                  		bne.w	DeleteObject
00012E50 D040                       		add.w	d0,d0
00012E52 0240 001E                  		andi.w	#$1E,d0
00012E56 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
00012E5C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E60 321A                       		move.w	(a2)+,d1
00012E62 2248                       		movea.l	a0,a1
00012E64 6000                       		bra.s	Obj63_MakePtfms
00012E66                            ; ===========================================================================
00012E66                            
00012E66                            Obj63_Loop:
00012E66 6100 B620                  		bsr.w	SingleObjLoad
00012E6A 6600                       		bne.s	loc_124AA
00012E6C                            
00012E6C                            Obj63_MakePtfms:			; XREF: loc_12460
00012E6C 12BC 0063                  		move.b	#$63,0(a1)
00012E70 335A 0008                  		move.w	(a2)+,8(a1)
00012E74 335A 000C                  		move.w	(a2)+,$C(a1)
00012E78 301A                       		move.w	(a2)+,d0
00012E7A 1340 0028                  		move.b	d0,$28(a1)
00012E7E                            
00012E7E                            loc_124AA:
00012E7E 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012E82                            
00012E82 588F                       		addq.l	#4,sp
00012E84 4E75                       		rts	
00012E86                            ; ===========================================================================
00012E86                            
00012E86                            loc_124B2:				; XREF: Obj63_Index
00012E86 7200                       		moveq	#0,d1
00012E88 1228 0019                  		move.b	$19(a0),d1
00012E8C 4EB9 0000 7C14             		jsr	(PlatformObject).l
00012E92 6000 0000                  		bra.w	sub_12502
00012E96                            ; ===========================================================================
00012E96                            
00012E96                            loc_124C2:				; XREF: Obj63_Index
00012E96 7200                       		moveq	#0,d1
00012E98 1228 0019                  		move.b	$19(a0),d1
00012E9C 4EB9 0000 7D88             		jsr	(ExitPlatform).l
00012EA2 3F28 0008                  		move.w	8(a0),-(sp)
00012EA6 6100 0000                  		bsr.w	sub_12502
00012EAA 341F                       		move.w	(sp)+,d2
00012EAC 4EF9 0000 82F2             		jmp	(MvSonicOnPtfm2).l
00012EB2                            ; ===========================================================================
00012EB2                            
00012EB2                            loc_124DE:				; XREF: Obj63_Index
00012EB2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012EB6 0240 0003                  		andi.w	#3,d0
00012EBA 6600                       		bne.s	loc_124FC
00012EBC 7201                       		moveq	#1,d1
00012EBE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012EC2 6700                       		beq.s	loc_124F2
00012EC4 4401                       		neg.b	d1
00012EC6                            
00012EC6                            loc_124F2:
00012EC6 D328 001A                  		add.b	d1,$1A(a0)
00012ECA 0228 0003 001A             		andi.b	#3,$1A(a0)
00012ED0                            
00012ED0                            loc_124FC:
00012ED0 588F                       		addq.l	#4,sp
00012ED2 6000 D1D6                  		bra.w	MarkObjGone
00012ED6                            
00012ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ED6                            
00012ED6                            
00012ED6                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012ED6 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012EDA 6700                       		beq.s	loc_12520
00012EDC 4A28 003B                  		tst.b	$3B(a0)
00012EE0 6600                       		bne.s	loc_12520
00012EE2 117C 0001 003B             		move.b	#1,$3B(a0)
00012EE8 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012EEE 4428 003A                  		neg.b	$3A(a0)
00012EF2 6000                       		bra.s	loc_12534
00012EF4                            ; ===========================================================================
00012EF4                            
00012EF4                            loc_12520:
00012EF4 3028 0008                  		move.w	8(a0),d0
00012EF8 B068 0034                  		cmp.w	$34(a0),d0
00012EFC 6600                       		bne.s	loc_1256A
00012EFE 3028 000C                  		move.w	$C(a0),d0
00012F02 B068 0036                  		cmp.w	$36(a0),d0
00012F06 6600                       		bne.s	loc_1256A
00012F08                            
00012F08                            loc_12534:
00012F08 7200                       		moveq	#0,d1
00012F0A 1228 0038                  		move.b	$38(a0),d1
00012F0E D228 003A                  		add.b	$3A(a0),d1
00012F12 B228 0039                  		cmp.b	$39(a0),d1
00012F16 6500                       		bcs.s	loc_12552
00012F18 1001                       		move.b	d1,d0
00012F1A 7200                       		moveq	#0,d1
00012F1C 4A00                       		tst.b	d0
00012F1E 6A00                       		bpl.s	loc_12552
00012F20 1228 0039                  		move.b	$39(a0),d1
00012F24 5901                       		subq.b	#4,d1
00012F26                            
00012F26                            loc_12552:
00012F26 1141 0038                  		move.b	d1,$38(a0)
00012F2A 2268 003C                  		movea.l	$3C(a0),a1
00012F2E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F34 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F3A 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F3E                            
00012F3E                            loc_1256A:
00012F3E 6100 B09C                  		bsr.w	SpeedToPos
00012F42 4E75                       		rts	
00012F44                            ; End of function sub_12502
00012F44                            
00012F44                            
00012F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F44                            
00012F44                            
00012F44                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F44 7000                       		moveq	#0,d0
00012F46 343C FF00                  		move.w	#-$100,d2
00012F4A 3028 0008                  		move.w	8(a0),d0
00012F4E 9068 0034                  		sub.w	$34(a0),d0
00012F52 6400                       		bcc.s	loc_12584
00012F54 4440                       		neg.w	d0
00012F56 4442                       		neg.w	d2
00012F58                            
00012F58                            loc_12584:
00012F58 7200                       		moveq	#0,d1
00012F5A 363C FF00                  		move.w	#-$100,d3
00012F5E 3228 000C                  		move.w	$C(a0),d1
00012F62 9268 0036                  		sub.w	$36(a0),d1
00012F66 6400                       		bcc.s	loc_12598
00012F68 4441                       		neg.w	d1
00012F6A 4443                       		neg.w	d3
00012F6C                            
00012F6C                            loc_12598:
00012F6C B240                       		cmp.w	d0,d1
00012F6E 6500                       		bcs.s	loc_125C2
00012F70 3028 0008                  		move.w	8(a0),d0
00012F74 9068 0034                  		sub.w	$34(a0),d0
00012F78 6700                       		beq.s	loc_125AE
00012F7A 48C0                       		ext.l	d0
00012F7C E180                       		asl.l	#8,d0
00012F7E 81C1                       		divs.w	d1,d0
00012F80 4440                       		neg.w	d0
00012F82                            
00012F82                            loc_125AE:
00012F82 3140 0010                  		move.w	d0,$10(a0)
00012F86 3143 0012                  		move.w	d3,$12(a0)
00012F8A 4840                       		swap	d0
00012F8C 3140 000A                  		move.w	d0,$A(a0)
00012F90 4268 000E                  		clr.w	$E(a0)
00012F94 4E75                       		rts	
00012F96                            ; ===========================================================================
00012F96                            
00012F96                            loc_125C2:				; XREF: Obj63_ChangeDir
00012F96 3228 000C                  		move.w	$C(a0),d1
00012F9A 9268 0036                  		sub.w	$36(a0),d1
00012F9E 6700                       		beq.s	loc_125D4
00012FA0 48C1                       		ext.l	d1
00012FA2 E181                       		asl.l	#8,d1
00012FA4 83C0                       		divs.w	d0,d1
00012FA6 4441                       		neg.w	d1
00012FA8                            
00012FA8                            loc_125D4:
00012FA8 3141 0012                  		move.w	d1,$12(a0)
00012FAC 3142 0010                  		move.w	d2,$10(a0)
00012FB0 4841                       		swap	d1
00012FB2 3141 000E                  		move.w	d1,$E(a0)
00012FB6 4268 000A                  		clr.w	$A(a0)
00012FBA 4E75                       		rts	
00012FBC                            ; End of function Obj63_ChangeDir
00012FBC                            
00012FBC                            ; ===========================================================================
00012FBC 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012FBE 0000                       		dc.w word_12610-Obj63_Data
00012FC0 0000                       		dc.w word_12628-Obj63_Data
00012FC2 0000                       		dc.w word_1263C-Obj63_Data
00012FC4 0000                       		dc.w word_12650-Obj63_Data
00012FC6 0000                       		dc.w word_12668-Obj63_Data
00012FC8 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012FD8 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012FE4 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012FF4 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012FFC 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013010 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013024 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001303C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013050                            
00013050                            ; ---------------------------------------------------------------------------
00013050                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013050                            ; ---------------------------------------------------------------------------
00013050                            Map_obj63:
00013050                            	include "_maps\obj63.asm"
00013050                            ; ---------------------------------------------------------------------------
00013050                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013050                            ; ---------------------------------------------------------------------------
00013050 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013054 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013058 0000                       		dc.w byte_1269E-Map_obj63
0001305A 01                         byte_12686:	dc.b 1
0001305B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013060 01                         byte_1268C:	dc.b 1
00013061 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013066 01                         byte_12692:	dc.b 1
00013067 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001306C 01                         byte_12698:	dc.b 1
0001306D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013072 01                         byte_1269E:	dc.b 1
00013073 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013078                            		even
00013078                            		even
00013078                            
00013078                            ; ===========================================================================
00013078                            ; ---------------------------------------------------------------------------
00013078                            ; Object 64 - bubbles (LZ)
00013078                            ; ---------------------------------------------------------------------------
00013078                            
00013078                            Obj64:					; XREF: Obj_Index
00013078 7000                       		moveq	#0,d0
0001307A 1028 0024                  		move.b	$24(a0),d0
0001307E 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013082 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013086                            ; ===========================================================================
00013086 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013088 0000                       		dc.w Obj64_Animate-Obj64_Index
0001308A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001308C 0000                       		dc.w Obj64_Display2-Obj64_Index
0001308E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013090 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013092                            ; ===========================================================================
00013092                            
00013092                            Obj64_Main:				; XREF: Obj64_Index
00013092 5428 0024                  		addq.b	#2,$24(a0)
00013096 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001309E 317C 8348 0002             		move.w	#$8348,2(a0)
000130A4 117C 0084 0001             		move.b	#$84,1(a0)
000130AA 117C 0010 0019             		move.b	#$10,$19(a0)
000130B0 117C 0001 0018             		move.b	#1,$18(a0)
000130B6 1028 0028                  		move.b	$28(a0),d0	; get object type
000130BA 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000130BC 5028 0024                  		addq.b	#8,$24(a0)
000130C0 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000130C4 1140 0032                  		move.b	d0,$32(a0)
000130C8 1140 0033                  		move.b	d0,$33(a0)
000130CC 117C 0006 001C             		move.b	#6,$1C(a0)
000130D2 6000 0000                  		bra.w	Obj64_BblMaker
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            Obj64_Bubble:				; XREF: Obj64_Main
000130D6 1140 001C                  		move.b	d0,$1C(a0)
000130DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000130E0 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000130E6 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000130EC 1140 0026                  		move.b	d0,$26(a0)
000130F0                            
000130F0                            Obj64_Animate:				; XREF: Obj64_Index
000130F0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130F6 4EB9 0000 B058             		jsr	AnimateSprite
000130FC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013102 6600                       		bne.s	Obj64_ChkWater
00013104 117C 0001 002E             		move.b	#1,$2E(a0)
0001310A                            
0001310A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001310A 3038 F646                  		move.w	($FFFFF646).w,d0
0001310E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013112 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013114                            
00013114                            Obj64_Burst:				; XREF: Obj64_Wobble
00013114 117C 0006 0024             		move.b	#6,$24(a0)
0001311A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001311E 6000 0000                  		bra.w	Obj64_Display2
00013122                            ; ===========================================================================
00013122                            
00013122                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013122 1028 0026                  		move.b	$26(a0),d0
00013126 5228 0026                  		addq.b	#1,$26(a0)
0001312A 0240 007F                  		andi.w	#$7F,d0
0001312E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013134 1031 0000                  		move.b	(a1,d0.w),d0
00013138 4880                       		ext.w	d0
0001313A D068 0030                  		add.w	$30(a0),d0
0001313E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013142 4A28 002E                  		tst.b	$2E(a0)
00013146 6700                       		beq.s	Obj64_Display
00013148 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001314C 6700                       		beq.s	Obj64_Display	; if not, branch
0001314E                            
0001314E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013152 303C 00AD                  		move.w	#$AD,d0
00013156 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001315C 43F8 D000                  		lea	($FFFFD000).w,a1
00013160 4269 0010                  		clr.w	$10(a1)
00013164 4269 0012                  		clr.w	$12(a1)
00013168 4269 0014                  		clr.w	$14(a1)
0001316C 137C 0015 001C             		move.b	#$15,$1C(a1)
00013172 337C 0023 003E             		move.w	#$23,$3E(a1)
00013178 137C 0000 003C             		move.b	#0,$3C(a1)
0001317E 08A9 0005 0022             		bclr	#5,$22(a1)
00013184 08A9 0004 0022             		bclr	#4,$22(a1)
0001318A 0829 0002 0022             		btst	#2,$22(a1)
00013190 6700 FF82                  		beq.w	Obj64_Burst
00013194 08A9 0002 0022             		bclr	#2,$22(a1)
0001319A 137C 0013 0016             		move.b	#$13,$16(a1)
000131A0 137C 0009 0017             		move.b	#9,$17(a1)
000131A6 5B69 000C                  		subq.w	#5,$C(a1)
000131AA 6000 FF68                  		bra.w	Obj64_Burst
000131AE                            ; ===========================================================================
000131AE                            
000131AE                            Obj64_Display:				; XREF: Obj64_Wobble
000131AE 6100 AE2C                  		bsr.w	SpeedToPos
000131B2 4A28 0001                  		tst.b	1(a0)
000131B6 6A00                       		bpl.s	Obj64_Delete
000131B8 4EFA AE48                  		jmp	DisplaySprite
000131BC                            ; ===========================================================================
000131BC                            
000131BC                            Obj64_Delete:
000131BC 4EFA AE80                  		jmp	DeleteObject
000131C0                            ; ===========================================================================
000131C0                            
000131C0                            Obj64_Display2:				; XREF: Obj64_Index
000131C0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000131C6 4EB9 0000 B058             		jsr	AnimateSprite
000131CC 4A28 0001                  		tst.b	1(a0)
000131D0 6A00                       		bpl.s	Obj64_Delete2
000131D2 4EFA AE2E                  		jmp	DisplaySprite
000131D6                            ; ===========================================================================
000131D6                            
000131D6                            Obj64_Delete2:
000131D6 4EFA AE66                  		jmp	DeleteObject
000131DA                            ; ===========================================================================
000131DA                            
000131DA                            Obj64_Delete3:				; XREF: Obj64_Index
000131DA 6000 AE62                  		bra.w	DeleteObject
000131DE                            ; ===========================================================================
000131DE                            
000131DE                            Obj64_BblMaker:				; XREF: Obj64_Index
000131DE 4A68 0036                  		tst.w	$36(a0)
000131E2 6600                       		bne.s	loc_12874
000131E4 3038 F646                  		move.w	($FFFFF646).w,d0
000131E8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000131EC 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000131F0 4A28 0001                  		tst.b	1(a0)
000131F4 6A00 0000                  		bpl.w	Obj64_ChkDel
000131F8 5368 0038                  		subq.w	#1,$38(a0)
000131FC 6A00 0000                  		bpl.w	loc_12914
00013200 317C 0001 0036             		move.w	#1,$36(a0)
00013206                            
00013206                            loc_1283A:
00013206 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001320C 3200                       		move.w	d0,d1
0001320E 0240 0007                  		andi.w	#7,d0
00013212 0C40 0006                  		cmpi.w	#6,d0
00013216 64EE                       		bcc.s	loc_1283A
00013218                            
00013218 1140 0034                  		move.b	d0,$34(a0)
0001321C 0241 000C                  		andi.w	#$C,d1
00013220 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013226 D2C1                       		adda.w	d1,a1
00013228 2149 003C                  		move.l	a1,$3C(a0)
0001322C 5328 0032                  		subq.b	#1,$32(a0)
00013230 6A00                       		bpl.s	loc_12872
00013232 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013238 08E8 0007 0036             		bset	#7,$36(a0)
0001323E                            
0001323E                            loc_12872:
0001323E 6000                       		bra.s	loc_1287C
00013240                            ; ===========================================================================
00013240                            
00013240                            loc_12874:				; XREF: Obj64_BblMaker
00013240 5368 0038                  		subq.w	#1,$38(a0)
00013244 6A00 0000                  		bpl.w	loc_12914
00013248                            
00013248                            loc_1287C:
00013248 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001324E 0240 001F                  		andi.w	#$1F,d0
00013252 3140 0038                  		move.w	d0,$38(a0)
00013256 6100 B230                  		bsr.w	SingleObjLoad
0001325A 6600                       		bne.s	loc_128F8
0001325C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013260 3368 0008 0008             		move.w	8(a0),8(a1)
00013266 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001326C 0240 000F                  		andi.w	#$F,d0
00013270 5140                       		subq.w	#8,d0
00013272 D169 0008                  		add.w	d0,8(a1)
00013276 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001327C 7000                       		moveq	#0,d0
0001327E 1028 0034                  		move.b	$34(a0),d0
00013282 2468 003C                  		movea.l	$3C(a0),a2
00013286 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001328C 0828 0007 0036             		btst	#7,$36(a0)
00013292 6700                       		beq.s	loc_128F8
00013294 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001329A 0240 0003                  		andi.w	#3,d0
0001329E 6600                       		bne.s	loc_128E4
000132A0 08E8 0006 0036             		bset	#6,$36(a0)
000132A6 6600                       		bne.s	loc_128F8
000132A8 137C 0002 0028             		move.b	#2,$28(a1)
000132AE                            
000132AE                            loc_128E4:
000132AE 4A28 0034                  		tst.b	$34(a0)
000132B2 6600                       		bne.s	loc_128F8
000132B4 08E8 0006 0036             		bset	#6,$36(a0)
000132BA 6600                       		bne.s	loc_128F8
000132BC 137C 0002 0028             		move.b	#2,$28(a1)
000132C2                            
000132C2                            loc_128F8:
000132C2 5328 0034                  		subq.b	#1,$34(a0)
000132C6 6A00                       		bpl.s	loc_12914
000132C8 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000132CE 0240 007F                  		andi.w	#$7F,d0
000132D2 0640 0080                  		addi.w	#$80,d0
000132D6 D168 0038                  		add.w	d0,$38(a0)
000132DA 4268 0036                  		clr.w	$36(a0)
000132DE                            
000132DE                            loc_12914:
000132DE 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132E4 4EB9 0000 B058             		jsr	AnimateSprite
000132EA                            
000132EA                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000132EA 3028 0008                  		move.w	8(a0),d0
000132EE 0240 FF80                  		andi.w	#$FF80,d0
000132F2 3238 F700                  		move.w	($FFFFF700).w,d1
000132F6 0441 0080                  		subi.w	#$80,d1
000132FA 0241 FF80                  		andi.w	#$FF80,d1
000132FE 9041                       		sub.w	d1,d0
00013300 0C40 0280                  		cmpi.w	#$280,d0
00013304 6200 AD38                  		bhi.w	DeleteObject
00013308 3038 F646                  		move.w	($FFFFF646).w,d0
0001330C B068 000C                  		cmp.w	$C(a0),d0
00013310 6500 ACF0                  		bcs.w	DisplaySprite
00013314 4E75                       		rts	
00013316                            ; ===========================================================================
00013316                            ; bubble production sequence
00013316                            
00013316                            ; 0 = small bubble, 1 =	large bubble
00013316                            
00013316 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013328                            
00013328                            ; ===========================================================================
00013328                            
00013328                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013328 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001332C 6B00                       		bmi.s	loc_12998
0001332E 43F8 D000                  		lea	($FFFFD000).w,a1
00013332 3029 0008                  		move.w	8(a1),d0
00013336 3228 0008                  		move.w	8(a0),d1
0001333A 0441 0010                  		subi.w	#$10,d1
0001333E B240                       		cmp.w	d0,d1
00013340 6400                       		bcc.s	loc_12998
00013342 0641 0020                  		addi.w	#$20,d1
00013346 B240                       		cmp.w	d0,d1
00013348 6500                       		bcs.s	loc_12998
0001334A 3029 000C                  		move.w	$C(a1),d0
0001334E 3228 000C                  		move.w	$C(a0),d1
00013352 B240                       		cmp.w	d0,d1
00013354 6400                       		bcc.s	loc_12998
00013356 0641 0010                  		addi.w	#$10,d1
0001335A B240                       		cmp.w	d0,d1
0001335C 6500                       		bcs.s	loc_12998
0001335E 7001                       		moveq	#1,d0
00013360 4E75                       		rts	
00013362                            ; ===========================================================================
00013362                            
00013362                            loc_12998:
00013362 7000                       		moveq	#0,d0
00013364 4E75                       		rts	
00013366                            ; ===========================================================================
00013366                            Ani_obj64:
00013366                            	include "_anim\obj64.asm"
00013366                            ; ---------------------------------------------------------------------------
00013366                            ; Animation script - bubbles (LZ)
00013366                            ; ---------------------------------------------------------------------------
00013366 0000                       		dc.w byte_129AA-Ani_obj64
00013368 0000                       		dc.w byte_129B0-Ani_obj64
0001336A 0000                       		dc.w byte_129B6-Ani_obj64
0001336C 0000                       		dc.w byte_129BE-Ani_obj64
0001336E 0000                       		dc.w byte_129BE-Ani_obj64
00013370 0000                       		dc.w byte_129C0-Ani_obj64
00013372 0000                       		dc.w byte_129C6-Ani_obj64
00013374 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001337A 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013380 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013388 04FC                       byte_129BE:	dc.b 4,	$FC
0001338A 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013390 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013396 00                         		even
00013396 00                         		even
00013396                            
00013396                            ; ---------------------------------------------------------------------------
00013396                            ; Sprite mappings - bubbles (LZ)
00013396                            ; ---------------------------------------------------------------------------
00013396                            Map_obj64:
00013396                            	include "_maps\obj64.asm"
00013396                            ; ---------------------------------------------------------------------------
00013396                            ; Sprite mappings - bubbles (LZ)
00013396                            ; ---------------------------------------------------------------------------
00013396 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001339A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001339E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000133A2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000133A6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000133AA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133AE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000133B2 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000133B6 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000133BA 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000133BE 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000133C2 0000                       		dc.w byte_12A9C-Map_obj64
000133C4 01                         byte_129FA:	dc.b 1
000133C5 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000133CA 01                         byte_12A00:	dc.b 1
000133CB FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000133D0 01                         byte_12A06:	dc.b 1
000133D1 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000133D6 01                         byte_12A0C:	dc.b 1
000133D7 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000133DC 01                         byte_12A12:	dc.b 1
000133DD F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000133E2 01                         byte_12A18:	dc.b 1
000133E3 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000133E8 01                         byte_12A1E:	dc.b 1
000133E9 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000133EE 04                         byte_12A24:	dc.b 4
000133EF F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000133F4 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000133F9 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000133FE 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013403 04                         byte_12A39:	dc.b 4
00013404 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013409 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001340E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013413 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013418 01                         byte_12A4E:	dc.b 1
00013419 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001341E 01                         byte_12A54:	dc.b 1
0001341F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013424 01                         byte_12A5A:	dc.b 1
00013425 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001342A 01                         byte_12A60:	dc.b 1
0001342B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013430 01                         byte_12A66:	dc.b 1
00013431 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013436 01                         byte_12A6C:	dc.b 1
00013437 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001343C 01                         byte_12A72:	dc.b 1
0001343D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013442 01                         byte_12A78:	dc.b 1
00013443 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013448 01                         byte_12A7E:	dc.b 1
00013449 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001344E 01                         byte_12A84:	dc.b 1
0001344F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013454 01                         byte_12A8A:	dc.b 1
00013455 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001345A 01                         byte_12A90:	dc.b 1
0001345B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013460 01                         byte_12A96:	dc.b 1
00013461 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013466 00                         byte_12A9C:	dc.b 0
00013468 00                         		even
00013468 00                         		even
00013468                            
00013468                            ; ===========================================================================
00013468                            ; ---------------------------------------------------------------------------
00013468                            ; Object 65 - waterfalls (LZ)
00013468                            ; ---------------------------------------------------------------------------
00013468                            
00013468                            Obj65:					; XREF: Obj_Index
00013468 7000                       		moveq	#0,d0
0001346A 1028 0024                  		move.b	$24(a0),d0
0001346E 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013472 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013476                            ; ===========================================================================
00013476 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013478 0000                       		dc.w Obj65_Animate-Obj65_Index
0001347A 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001347C 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001347E 0000                       		dc.w loc_12B36-Obj65_Index
00013480                            ; ===========================================================================
00013480                            
00013480                            Obj65_Main:				; XREF: Obj65_Index
00013480 5828 0024                  		addq.b	#4,$24(a0)
00013484 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001348C 317C 4259 0002             		move.w	#$4259,2(a0)
00013492 0028 0004 0001             		ori.b	#4,1(a0)
00013498 117C 0018 0019             		move.b	#$18,$19(a0)
0001349E 117C 0001 0018             		move.b	#1,$18(a0)
000134A4 1028 0028                  		move.b	$28(a0),d0	; get object type
000134A8 6A00                       		bpl.s	loc_12AE6
000134AA 08E8 0007 0002             		bset	#7,2(a0)
000134B0                            
000134B0                            loc_12AE6:
000134B0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000134B4 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000134B8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000134BC 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000134BE 4228 0018                  		clr.b	$18(a0)
000134C2 5528 0024                  		subq.b	#2,$24(a0)
000134C6 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000134CC 6700                       		beq.s	loc_12B0A	; if not, branch
000134CE 117C 0006 0024             		move.b	#6,$24(a0)
000134D4                            
000134D4                            loc_12B0A:
000134D4 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000134DA 6700                       		beq.s	Obj65_Animate	; if not, branch
000134DC 117C 0008 0024             		move.b	#8,$24(a0)
000134E2                            
000134E2                            Obj65_Animate:				; XREF: Obj65_Index
000134E2 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000134E8 4EB9 0000 B058             		jsr	AnimateSprite
000134EE                            
000134EE                            Obj65_ChkDel:				; XREF: Obj65_Index
000134EE 6000 CBBA                  		bra.w	MarkObjGone
000134F2                            ; ===========================================================================
000134F2                            
000134F2                            Obj65_FixHeight:			; XREF: Obj65_Index
000134F2 3038 F646                  		move.w	($FFFFF646).w,d0
000134F6 0440 0010                  		subi.w	#$10,d0
000134FA 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000134FE 60E2                       		bra.s	Obj65_Animate
00013500                            ; ===========================================================================
00013500                            
00013500                            loc_12B36:				; XREF: Obj65_Index
00013500 08A8 0007 0002             		bclr	#7,2(a0)
00013506 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001350C 6600                       		bne.s	Obj65_Animate2
0001350E 08E8 0007 0002             		bset	#7,2(a0)
00013514                            
00013514                            Obj65_Animate2:
00013514 60CC                       		bra.s	Obj65_Animate
00013516                            ; ===========================================================================
00013516                            Ani_obj65:
00013516                            	include "_anim\obj65.asm"
00013516                            ; ---------------------------------------------------------------------------
00013516                            ; Animation script - waterfall (LZ)
00013516                            ; ---------------------------------------------------------------------------
00013516 0000                       		dc.w byte_12B4E-Ani_obj65
00013518 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001351E 00                         		even
0001351E 00                         		even
0001351E                            
0001351E                            ; ---------------------------------------------------------------------------
0001351E                            ; Sprite mappings - waterfalls (LZ)
0001351E                            ; ---------------------------------------------------------------------------
0001351E                            Map_obj65:
0001351E                            	include "_maps\obj65.asm"
0001351E                            ; ---------------------------------------------------------------------------
0001351E                            ; Sprite mappings - waterfalls (LZ)
0001351E                            ; ---------------------------------------------------------------------------
0001351E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013522 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013526 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001352A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001352E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013532 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013536 01                         byte_12B6C:	dc.b 1
00013537 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001353C 02                         byte_12B72:	dc.b 2
0001353D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013542 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013547 02                         byte_12B7D:	dc.b 2
00013548 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001354D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013552 01                         byte_12B88:	dc.b 1
00013553 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013558 02                         byte_12B8E:	dc.b 2
00013559 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001355E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013563 01                         byte_12B99:	dc.b 1
00013564 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013569 01                         byte_12B9F:	dc.b 1
0001356A F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001356F 01                         byte_12BA5:	dc.b 1
00013570 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013575 02                         byte_12BAB:	dc.b 2
00013576 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001357B 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013580 02                         byte_12BB6:	dc.b 2
00013581 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013586 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001358B 02                         byte_12BC1:	dc.b 2
0001358C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013591 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013596 02                         byte_12BCC:	dc.b 2
00013597 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001359C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000135A2 00                         		even
000135A2 00                         		even
000135A2                            
000135A2                            ; ===========================================================================
000135A2                            ; ---------------------------------------------------------------------------
000135A2                            ; Object 01 - Sonic
000135A2                            ; ---------------------------------------------------------------------------
000135A2                            
000135A2                            Obj01:					; XREF: Obj_Index
000135A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000135A6 6700                       		beq.s	Obj01_Normal	; if not, branch
000135A8 4EF9 0000 0000             		jmp	DebugMode
000135AE                            ; ===========================================================================
000135AE                            
000135AE                            Obj01_Normal:
000135AE 7000                       		moveq	#0,d0
000135B0 1028 0024                  		move.b	$24(a0),d0
000135B4 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000135B8 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000135BC                            ; ===========================================================================
000135BC 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000135BE 0000                       		dc.w Obj01_Control-Obj01_Index
000135C0 0000                       		dc.w Obj01_Hurt-Obj01_Index
000135C2 0000                       		dc.w Obj01_Death-Obj01_Index
000135C4 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000135C6                            ; ===========================================================================
000135C6                            
000135C6                            Player_Maps:
000135C6 0000 0000                  	dc.l	Map_Sonic
000135CA 0000 0000                  	dc.l	Map_Sonic ; gronic
000135CE 0000 0000                  	dc.l	Map_Sonic ; anakama
000135D2 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
000135D6                            	; insert player mapping here
000135D6                            	
000135D6                            Obj01_Main:				; XREF: Obj01_Index
000135D6 5428 0024                  		addq.b	#2,$24(a0)
000135DA 117C 0013 0016             		move.b	#$13,$16(a0)
000135E0 117C 0009 0017             		move.b	#9,$17(a0)
000135E6                            		
000135E6 7000                       		moveq	#0,d0
000135E8 1038 FFE8                  		move.b	(v_character),d0
000135EC E548                       		lsl.w	#2,d0
000135EE 43FA FFD6                  		lea 	Player_Maps(pc),a1
000135F2 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000135F8                            		
000135F8 317C 0780 0002             		move.w	#$780,2(a0)
000135FE 117C 0002 0018             		move.b	#2,$18(a0)
00013604 117C 0018 0019             		move.b	#$18,$19(a0)
0001360A 117C 0004 0001             		move.b	#4,1(a0)
00013610 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013616 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001361C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013622                            
00013622                            Obj01_Control:				; XREF: Obj01_Index
00013622 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013626 6700                       		beq.s	loc_12C58	; if not, branch
00013628 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001362E 6700                       		beq.s	loc_12C58	; if not, branch
00013630 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013636 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001363A 4E75                       		rts	
0001363C                            ; ===========================================================================
0001363C                            
0001363C                            loc_12C58:
0001363C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013640 6600                       		bne.s	loc_12C64	; if yes, branch
00013642 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013648                            
00013648                            loc_12C64:
00013648 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001364E 6600                       		bne.s	loc_12C7E	; if yes, branch
00013650 7000                       		moveq	#0,d0
00013652 1028 0022                  		move.b	$22(a0),d0
00013656 0240 0006                  		andi.w	#6,d0
0001365A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001365E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013662                            
00013662                            loc_12C7E:
00013662 6100                       		bsr.s	Sonic_Display
00013664 6100 0000                  		bsr.w	Sonic_RecordPos
00013668 6100 0000                  		bsr.w	Sonic_Water
0001366C 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013672 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013678 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001367C 6700                       		beq.s	loc_12CA6
0001367E 4A28 001C                  		tst.b	$1C(a0)
00013682 6600                       		bne.s	loc_12CA6
00013684 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001368A                            
0001368A                            loc_12CA6:
0001368A 6100 0000                  		bsr.w	Sonic_Animate
0001368E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013692 6B00                       		bmi.s	loc_12CB6
00013694 4EB9 0000 0000             		jsr	TouchResponse
0001369A                            
0001369A                            loc_12CB6:
0001369A 6100 0000                  		bsr.w	Sonic_Loops
0001369E 6100 0000                  		bsr.w	LoadSonicDynPLC
000136A2 4E75                       		rts	
000136A4                            ; ===========================================================================
000136A4 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000136A6 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000136A8 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000136AA 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136AC                            ; ---------------------------------------------------------------------------
000136AC                            ; Music	to play	after invincibility wears off
000136AC                            ; ---------------------------------------------------------------------------
000136AC                            ; ===========================================================================
000136AC                            
000136AC                            Sonic_Display:				; XREF: loc_12C7E
000136AC 3028 0030                  		move.w	$30(a0),d0
000136B0 6700                       		beq.s	Obj01_Display
000136B2 5368 0030                  		subq.w	#1,$30(a0)
000136B6 E648                       		lsr.w	#3,d0
000136B8 6400                       		bcc.s	Obj01_ChkInvin
000136BA                            
000136BA                            Obj01_Display:
000136BA 4EBA A946                  		jsr	DisplaySprite
000136BE                            
000136BE                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000136BE                             
000136BE                            Obj01_ChkInvin:
000136BE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000136C2 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000136C6 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000136CA 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000136CE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000136D2 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000136D6 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000136DA 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000136DE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000136E4 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000136E8 7000                       		moveq	#0,d0
000136EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000136EE                             
000136EE 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000136F4 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000136F6 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000136FC 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000136FE                             
000136FE                            Obj01_GetBgm2:
000136FE 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013704 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013706 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001370C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001370E                             
0001370E                            Obj01_GetBgm3:
0001370E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013714 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013716 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001371C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001371E                             
0001371E                            Obj01_GetBgm4:
0001371E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013724 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013726 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001372C                             
0001372C                            Obj01_PlayMusic:
0001372C 1031 0000                  		move.b	(a1,d0.w),d0
00013730 4EB9 0000 1594             		jsr	(PlaySound).l	; play normal music
00013736                             
00013736                            ; NineKode ends here.
00013736                            
00013736                            Obj01_RmvInvin:
00013736 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001373C                            
0001373C                            Obj01_ChkShoes:
0001373C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013740 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013742 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013746 6700                       		beq.s	Obj01_ExitChk
00013748 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001374C 6600                       		bne.s	Obj01_ExitChk
0001374E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013754 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001375A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013760 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013766 303C 00E3                  		move.w	#$E3,d0
0001376A 4EF9 0000 1594             		jmp	(PlaySound).l	; run music at normal speed
00013770                            ; ===========================================================================
00013770                            
00013770                            Obj01_ExitChk:
00013770 4E75                       		rts	
00013772                            
00013772                            ; ---------------------------------------------------------------------------
00013772                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013772                            ; ---------------------------------------------------------------------------
00013772                            
00013772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013772                            
00013772                            
00013772                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013772 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013776 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001377A 43F1 0000                  		lea	(a1,d0.w),a1
0001377E 32E8 0008                  		move.w	8(a0),(a1)+
00013782 32E8 000C                  		move.w	$C(a0),(a1)+
00013786 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001378A 4E75                       		rts	
0001378C                            ; End of function Sonic_RecordPos
0001378C                            
0001378C                            ; ---------------------------------------------------------------------------
0001378C                            ; Subroutine for Sonic when he's underwater
0001378C                            ; ---------------------------------------------------------------------------
0001378C                            
0001378C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001378C                            
0001378C                            
0001378C                            Sonic_Water:				; XREF: loc_12C7E
0001378C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013792 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013794                            
00013794                            locret_12D80:
00013794 4E75                       		rts	
00013796                            ; ===========================================================================
00013796                            
00013796                            Obj01_InWater:
00013796 3038 F646                  		move.w	($FFFFF646).w,d0
0001379A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001379E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000137A0 08E8 0006 0022             		bset	#6,$22(a0)
000137A6 66EC                       		bne.s	locret_12D80
000137A8 6100 0000                  		bsr.w	ResumeMusic
000137AC 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000137B2 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000137B8 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000137BE 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000137C4 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000137CA E0E8 0010                  		asr	$10(a0)
000137CE E0E8 0012                  		asr	$12(a0)
000137D2 E0E8 0012                  		asr	$12(a0)
000137D6 67BC                       		beq.s	locret_12D80
000137D8 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000137DE 303C 00AA                  		move.w	#$AA,d0
000137E2 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play splash sound
000137E8                            ; ===========================================================================
000137E8                            
000137E8                            Obj01_OutWater:
000137E8 08A8 0006 0022             		bclr	#6,$22(a0)
000137EE 67A4                       		beq.s	locret_12D80
000137F0 6100 0000                  		bsr.w	ResumeMusic
000137F4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000137FA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013800 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013806 E1E8 0012                  		asl	$12(a0)
0001380A 6700 FF88                  		beq.w	locret_12D80
0001380E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013814 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001381A 6E00                       		bgt.s	loc_12E0E
0001381C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013822                            
00013822                            loc_12E0E:
00013822 303C 00AA                  		move.w	#$AA,d0
00013826 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play splash sound
0001382C                            ; End of function Sonic_Water
0001382C                            
0001382C                            ; ===========================================================================
0001382C                            ; ---------------------------------------------------------------------------
0001382C                            ; Modes	for controlling	Sonic
0001382C                            ; ---------------------------------------------------------------------------
0001382C                            
0001382C                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001382C 6100 0000                  		bsr.w	Sonic_Jump
00013830 6100 0000                  		bsr.w	Sonic_SlopeResist
00013834 6100 0000                  		bsr.w	Sonic_Move
00013838 6100 0000                  		bsr.w	Sonic_Roll
0001383C 6100 0000                  		bsr.w	Sonic_LevelBound
00013840 4EBA A79A                  		jsr	SpeedToPos
00013844 6100 0000                  		bsr.w	Sonic_AnglePos
00013848 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001384C 4E75                       		rts	
0001384E                            ; ===========================================================================
0001384E                            
0001384E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001384E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013852 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013856 6100 0000                  		bsr.w	Sonic_LevelBound
0001385A 4EBA A70E                  		jsr	ObjectFall
0001385E 0828 0006 0022             		btst	#6,$22(a0)
00013864 6700                       		beq.s	loc_12E5C
00013866 0468 0028 0012             		subi.w	#$28,$12(a0)
0001386C                            
0001386C                            loc_12E5C:
0001386C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013870 6100 0000                  		bsr.w	Sonic_Floor
00013874 4E75                       		rts	
00013876                            ; ===========================================================================
00013876                            
00013876                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013876 6100 0000                  		bsr.w	Sonic_Jump
0001387A 6100 0000                  		bsr.w	Sonic_RollRepel
0001387E 6100 0000                  		bsr.w	Sonic_RollSpeed
00013882 6100 0000                  		bsr.w	Sonic_LevelBound
00013886 4EBA A754                  		jsr	SpeedToPos
0001388A 6100 0000                  		bsr.w	Sonic_AnglePos
0001388E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013892 4E75                       		rts	
00013894                            ; ===========================================================================
00013894                            
00013894                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013894 6100 0000                  		bsr.w	Sonic_JumpHeight
00013898 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001389C 6100 0000                  		bsr.w	Sonic_LevelBound
000138A0 6100 0000                  		bsr.w	Sonic_AirUnroll
000138A4 4EBA A6C4                  		jsr	ObjectFall
000138A8 0828 0006 0022             		btst	#6,$22(a0)
000138AE 6700                       		beq.s	loc_12EA6
000138B0 0468 0028 0012             		subi.w	#$28,$12(a0)
000138B6                            
000138B6                            loc_12EA6:
000138B6 6100 0000                  		bsr.w	Sonic_JumpAngle
000138BA 6100 0000                  		bsr.w	Sonic_Floor
000138BE 4E75                       		rts	
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            ; Subroutine to	make Sonic walk/run
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            
000138C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138C0                            
000138C0                            
000138C0                            Sonic_Move:				; XREF: Obj01_MdNormal
000138C0 3C38 F760                  		move.w	($FFFFF760).w,d6
000138C4 3A38 F762                  		move.w	($FFFFF762).w,d5
000138C8 3838 F764                  		move.w	($FFFFF764).w,d4
000138CC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138D0 6600 0000                  		bne.w	loc_12FEE
000138D4 4A68 003E                  		tst.w	$3E(a0)
000138D8 6600 0000                  		bne.w	Obj01_ResetScr
000138DC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138E2 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000138E4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138EA 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000138EC 6100 0000                  		bsr.w	Sonic_MoveLeft
000138F0                            
000138F0                            Obj01_NotLeft:
000138F0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138F6 6700                       		beq.s	Obj01_NotRight	; if not, branch
000138F8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138FE 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013900 6100 0000                  		bsr.w	Sonic_MoveLeft
00013904 6000                       		bra.s	Obj01_NotRight
00013906                            
00013906                            Obj01_MoveRight:
00013906 6100 0000                  		bsr.w	Sonic_MoveRight
0001390A                            
0001390A                            Obj01_NotRight:
0001390A 1028 0026                  		move.b	$26(a0),d0
0001390E 0600 0020                  		addi.b	#$20,d0
00013912 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013916 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001391A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001391E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013922 08A8 0005 0022             		bclr	#5,$22(a0)
00013928 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001392E 0828 0003 0022             		btst	#3,$22(a0)
00013934 6700                       		beq.s	Sonic_Balance
00013936 7000                       		moveq	#0,d0
00013938 1028 003D                  		move.b	$3D(a0),d0
0001393C ED48                       		lsl.w	#6,d0
0001393E 43F8 D000                  		lea	($FFFFD000).w,a1
00013942 43F1 0000                  		lea	(a1,d0.w),a1
00013946 4A29 0022                  		tst.b	$22(a1)
0001394A 6B00                       		bmi.s	Sonic_LookUp
0001394C 7200                       		moveq	#0,d1
0001394E 1229 0019                  		move.b	$19(a1),d1
00013952 3401                       		move.w	d1,d2
00013954 D442                       		add.w	d2,d2
00013956 5942                       		subq.w	#4,d2
00013958 D268 0008                  		add.w	8(a0),d1
0001395C 9269 0008                  		sub.w	8(a1),d1
00013960 0C41 0004                  		cmpi.w	#4,d1
00013964 6D00                       		blt.s	loc_12F6A
00013966 B242                       		cmp.w	d2,d1
00013968 6C00                       		bge.s	loc_12F5A
0001396A 6000                       		bra.s	Sonic_LookUp
0001396C                            ; ===========================================================================
0001396C                            
0001396C                            Sonic_Balance:
0001396C 4EB9 0000 0000             		jsr	ObjHitFloor
00013972 0C41 000C                  		cmpi.w	#$C,d1
00013976 6D00                       		blt.s	Sonic_LookUp
00013978 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001397E 6600                       		bne.s	loc_12F62
00013980                            
00013980                            loc_12F5A:
00013980 08A8 0000 0022             		bclr	#0,$22(a0)
00013986 6000                       		bra.s	loc_12F70
00013988                            ; ===========================================================================
00013988                            
00013988                            loc_12F62:
00013988 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001398E 6600                       		bne.s	Sonic_LookUp
00013990                            
00013990                            loc_12F6A:
00013990 08E8 0000 0022             		bset	#0,$22(a0)
00013996                            
00013996                            loc_12F70:
00013996 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001399C 6000                       		bra.s	Obj01_ResetScr
0001399E                            ; ===========================================================================
0001399E                            
0001399E                            Sonic_LookUp:
0001399E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000139A4 6700                       		beq.s	Sonic_Duck	; if not, branch
000139A6 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139AC 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000139B2 6700                       		beq.s	loc_12FC2
000139B4 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000139B8 6000                       		bra.s	loc_12FC2
000139BA                            ; ===========================================================================
000139BA                            
000139BA                            Sonic_Duck:
000139BA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139C0 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000139C2 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000139C8 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000139CE 6700                       		beq.s	loc_12FC2
000139D0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000139D4 6000                       		bra.s	loc_12FC2
000139D6                            ; ===========================================================================
000139D6                            
000139D6                            Obj01_ResetScr:
000139D6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000139DC 6700                       		beq.s	loc_12FC2	; if yes, branch
000139DE 6400                       		bcc.s	loc_12FBE
000139E0 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000139E4                            
000139E4                            loc_12FBE:
000139E4 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000139E8                            
000139E8                            loc_12FC2:
000139E8 1038 F602                  		move.b	($FFFFF602).w,d0
000139EC 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000139F0 6600                       		bne.s	loc_12FEE	; if yes, branch
000139F2 3028 0014                  		move.w	$14(a0),d0
000139F6 6700                       		beq.s	loc_12FEE
000139F8 6B00                       		bmi.s	loc_12FE2
000139FA 9045                       		sub.w	d5,d0
000139FC 6400                       		bcc.s	loc_12FDC
000139FE 303C 0000                  		move.w	#0,d0
00013A02                            
00013A02                            loc_12FDC:
00013A02 3140 0014                  		move.w	d0,$14(a0)
00013A06 6000                       		bra.s	loc_12FEE
00013A08                            ; ===========================================================================
00013A08                            
00013A08                            loc_12FE2:
00013A08 D045                       		add.w	d5,d0
00013A0A 6400                       		bcc.s	loc_12FEA
00013A0C 303C 0000                  		move.w	#0,d0
00013A10                            
00013A10                            loc_12FEA:
00013A10 3140 0014                  		move.w	d0,$14(a0)
00013A14                            
00013A14                            loc_12FEE:
00013A14 1028 0026                  		move.b	$26(a0),d0
00013A18 4EB9 0000 2D34             		jsr	(CalcSine).l
00013A1E C3E8 0014                  		muls.w	$14(a0),d1
00013A22 E081                       		asr.l	#8,d1
00013A24 3141 0010                  		move.w	d1,$10(a0)
00013A28 C1E8 0014                  		muls.w	$14(a0),d0
00013A2C E080                       		asr.l	#8,d0
00013A2E 3140 0012                  		move.w	d0,$12(a0)
00013A32                            
00013A32                            loc_1300C:
00013A32 1028 0026                  		move.b	$26(a0),d0
00013A36 0600 0040                  		addi.b	#$40,d0
00013A3A 6B00                       		bmi.s	locret_1307C
00013A3C 123C 0040                  		move.b	#$40,d1
00013A40 4A68 0014                  		tst.w	$14(a0)
00013A44 6700                       		beq.s	locret_1307C
00013A46 6B00                       		bmi.s	loc_13024
00013A48 4441                       		neg.w	d1
00013A4A                            
00013A4A                            loc_13024:
00013A4A 1028 0026                  		move.b	$26(a0),d0
00013A4E D001                       		add.b	d1,d0
00013A50 3F00                       		move.w	d0,-(sp)
00013A52 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A56 301F                       		move.w	(sp)+,d0
00013A58 4A41                       		tst.w	d1
00013A5A 6A00                       		bpl.s	locret_1307C
00013A5C E141                       		asl.w	#8,d1
00013A5E 0600 0020                  		addi.b	#$20,d0
00013A62 0200 00C0                  		andi.b	#$C0,d0
00013A66 6700                       		beq.s	loc_13078
00013A68 0C00 0040                  		cmpi.b	#$40,d0
00013A6C 6700                       		beq.s	loc_13066
00013A6E 0C00 0080                  		cmpi.b	#$80,d0
00013A72 6700                       		beq.s	loc_13060
00013A74 D368 0010                  		add.w	d1,$10(a0)
00013A78 08E8 0005 0022             		bset	#5,$22(a0)
00013A7E 317C 0000 0014             		move.w	#0,$14(a0)
00013A84 4E75                       		rts	
00013A86                            ; ===========================================================================
00013A86                            
00013A86                            loc_13060:
00013A86 9368 0012                  		sub.w	d1,$12(a0)
00013A8A 4E75                       		rts	
00013A8C                            ; ===========================================================================
00013A8C                            
00013A8C                            loc_13066:
00013A8C 9368 0010                  		sub.w	d1,$10(a0)
00013A90 08E8 0005 0022             		bset	#5,$22(a0)
00013A96 317C 0000 0014             		move.w	#0,$14(a0)
00013A9C 4E75                       		rts	
00013A9E                            ; ===========================================================================
00013A9E                            
00013A9E                            loc_13078:
00013A9E D368 0012                  		add.w	d1,$12(a0)
00013AA2                            
00013AA2                            locret_1307C:
00013AA2 4E75                       		rts	
00013AA4                            ; End of function Sonic_Move
00013AA4                            
00013AA4                            
00013AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AA4                            
00013AA4                            
00013AA4                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013AA4 3028 0014                  		move.w	$14(a0),d0
00013AA8 6700                       		beq.s	loc_13086
00013AAA 6A00                       		bpl.s	loc_130B2
00013AAC                            
00013AAC                            loc_13086:
00013AAC 08E8 0000 0022             		bset	#0,$22(a0)
00013AB2 6600                       		bne.s	loc_1309A
00013AB4 08A8 0005 0022             		bclr	#5,$22(a0)
00013ABA 117C 0001 001D             		move.b	#1,$1D(a0)
00013AC0                            
00013AC0                            loc_1309A:
00013AC0 9045                       		sub.w	d5,d0
00013AC2 3206                       		move.w	d6,d1
00013AC4 4441                       		neg.w	d1
00013AC6 B041                       		cmp.w	d1,d0
00013AC8 6E00                       		bgt.s	loc_130A6
00013ACA 3001                       		move.w	d1,d0
00013ACC                            
00013ACC                            loc_130A6:
00013ACC 3140 0014                  		move.w	d0,$14(a0)
00013AD0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013AD6 4E75                       		rts	
00013AD8                            ; ===========================================================================
00013AD8                            
00013AD8                            loc_130B2:				; XREF: Sonic_MoveLeft
00013AD8 9044                       		sub.w	d4,d0
00013ADA 6400                       		bcc.s	loc_130BA
00013ADC 303C FF80                  		move.w	#-$80,d0
00013AE0                            
00013AE0                            loc_130BA:
00013AE0 3140 0014                  		move.w	d0,$14(a0)
00013AE4 1028 0026                  		move.b	$26(a0),d0
00013AE8 0600 0020                  		addi.b	#$20,d0
00013AEC 0200 00C0                  		andi.b	#$C0,d0
00013AF0 6600                       		bne.s	locret_130E8
00013AF2 0C40 0400                  		cmpi.w	#$400,d0
00013AF6 6D00                       		blt.s	locret_130E8
00013AF8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013AFE 08A8 0000 0022             		bclr	#0,$22(a0)
00013B04 303C 00A4                  		move.w	#$A4,d0
00013B08 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B0E                            
00013B0E                            locret_130E8:
00013B0E 4E75                       		rts	
00013B10                            ; End of function Sonic_MoveLeft
00013B10                            
00013B10                            
00013B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B10                            
00013B10                            
00013B10                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B10 3028 0014                  		move.w	$14(a0),d0
00013B14 6B00                       		bmi.s	loc_13118
00013B16 08A8 0000 0022             		bclr	#0,$22(a0)
00013B1C 6700                       		beq.s	loc_13104
00013B1E 08A8 0005 0022             		bclr	#5,$22(a0)
00013B24 117C 0001 001D             		move.b	#1,$1D(a0)
00013B2A                            
00013B2A                            loc_13104:
00013B2A D045                       		add.w	d5,d0
00013B2C B046                       		cmp.w	d6,d0
00013B2E 6D00                       		blt.s	loc_1310C
00013B30 3006                       		move.w	d6,d0
00013B32                            
00013B32                            loc_1310C:
00013B32 3140 0014                  		move.w	d0,$14(a0)
00013B36 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B3C 4E75                       		rts	
00013B3E                            ; ===========================================================================
00013B3E                            
00013B3E                            loc_13118:				; XREF: Sonic_MoveRight
00013B3E D044                       		add.w	d4,d0
00013B40 6400                       		bcc.s	loc_13120
00013B42 303C 0080                  		move.w	#$80,d0
00013B46                            
00013B46                            loc_13120:
00013B46 3140 0014                  		move.w	d0,$14(a0)
00013B4A 1028 0026                  		move.b	$26(a0),d0
00013B4E 0600 0020                  		addi.b	#$20,d0
00013B52 0200 00C0                  		andi.b	#$C0,d0
00013B56 6600                       		bne.s	locret_1314E
00013B58 0C40 FC00                  		cmpi.w	#-$400,d0
00013B5C 6E00                       		bgt.s	locret_1314E
00013B5E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B64 08E8 0000 0022             		bset	#0,$22(a0)
00013B6A 303C 00A4                  		move.w	#$A4,d0
00013B6E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B74                            
00013B74                            locret_1314E:
00013B74 4E75                       		rts	
00013B76                            ; End of function Sonic_MoveRight
00013B76                            
00013B76                            ; ---------------------------------------------------------------------------
00013B76                            ; Subroutine to	change Sonic's speed as he rolls
00013B76                            ; ---------------------------------------------------------------------------
00013B76                            
00013B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B76                            
00013B76                            
00013B76                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013B76 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B7A E346                       		asl.w	#1,d6
00013B7C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B80 E245                       		asr.w	#1,d5
00013B82 3838 F764                  		move.w	($FFFFF764).w,d4
00013B86 E444                       		asr.w	#2,d4
00013B88 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B8C 6600 0000                  		bne.w	loc_131CC
00013B90 4A68 003E                  		tst.w	$3E(a0)
00013B94 6600                       		bne.s	loc_13188
00013B96 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B9C 6700                       		beq.s	loc_1317C	; if not, branch
00013B9E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BA4 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013BA6 6100 0000                  		bsr.w	Sonic_RollLeft
00013BAA                            
00013BAA                            loc_1317C:
00013BAA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BB0 6700                       		beq.s	loc_13188	; if not, branch
00013BB2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BB8 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013BBA 6100 0000                  		bsr.w	Sonic_RollLeft
00013BBE 6000                       		bra.s	loc_13188
00013BC0                            
00013BC0                            SonicRS_RollRight:
00013BC0 6100 0000                  		bsr.w	Sonic_RollRight
00013BC4                            
00013BC4                            loc_13188:
00013BC4 3028 0014                  		move.w	$14(a0),d0
00013BC8 6700                       		beq.s	loc_131AA
00013BCA 6B00                       		bmi.s	loc_1319E
00013BCC 9045                       		sub.w	d5,d0
00013BCE 6400                       		bcc.s	loc_13198
00013BD0 303C 0000                  		move.w	#0,d0
00013BD4                            
00013BD4                            loc_13198:
00013BD4 3140 0014                  		move.w	d0,$14(a0)
00013BD8 6000                       		bra.s	loc_131AA
00013BDA                            ; ===========================================================================
00013BDA                            
00013BDA                            loc_1319E:				; XREF: Sonic_RollSpeed
00013BDA D045                       		add.w	d5,d0
00013BDC 6400                       		bcc.s	loc_131A6
00013BDE 303C 0000                  		move.w	#0,d0
00013BE2                            
00013BE2                            loc_131A6:
00013BE2 3140 0014                  		move.w	d0,$14(a0)
00013BE6                            
00013BE6                            loc_131AA:
00013BE6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013BEA 6600                       		bne.s	loc_131CC	; if yes, branch
00013BEC 08A8 0002 0022             		bclr	#2,$22(a0)
00013BF2 117C 0013 0016             		move.b	#$13,$16(a0)
00013BF8 117C 0009 0017             		move.b	#9,$17(a0)
00013BFE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013C04 5B68 000C                  		subq.w	#5,$C(a0)
00013C08                            
00013C08                            loc_131CC:
00013C08 1028 0026                  		move.b	$26(a0),d0
00013C0C 4EB9 0000 2D34             		jsr	(CalcSine).l
00013C12 C1E8 0014                  		muls.w	$14(a0),d0
00013C16 E080                       		asr.l	#8,d0
00013C18 3140 0012                  		move.w	d0,$12(a0)
00013C1C C3E8 0014                  		muls.w	$14(a0),d1
00013C20 E081                       		asr.l	#8,d1
00013C22 0C41 1000                  		cmpi.w	#$1000,d1
00013C26 6F00                       		ble.s	loc_131F0
00013C28 323C 1000                  		move.w	#$1000,d1
00013C2C                            
00013C2C                            loc_131F0:
00013C2C 0C41 F000                  		cmpi.w	#-$1000,d1
00013C30 6C00                       		bge.s	loc_131FA
00013C32 323C F000                  		move.w	#-$1000,d1
00013C36                            
00013C36                            loc_131FA:
00013C36 3141 0010                  		move.w	d1,$10(a0)
00013C3A 6000 FDF6                  		bra.w	loc_1300C
00013C3E                            ; End of function Sonic_RollSpeed
00013C3E                            
00013C3E                            
00013C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C3E                            
00013C3E                            
00013C3E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C3E 3028 0014                  		move.w	$14(a0),d0
00013C42 6700                       		beq.s	loc_1320A
00013C44 6A00                       		bpl.s	loc_13218
00013C46                            
00013C46                            loc_1320A:
00013C46 08E8 0000 0022             		bset	#0,$22(a0)
00013C4C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C52 4E75                       		rts	
00013C54                            ; ===========================================================================
00013C54                            
00013C54                            loc_13218:
00013C54 9044                       		sub.w	d4,d0
00013C56 6400                       		bcc.s	loc_13220
00013C58 303C FF80                  		move.w	#-$80,d0
00013C5C                            
00013C5C                            loc_13220:
00013C5C 3140 0014                  		move.w	d0,$14(a0)
00013C60 4E75                       		rts	
00013C62                            ; End of function Sonic_RollLeft
00013C62                            
00013C62                            
00013C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C62                            
00013C62                            
00013C62                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013C62 3028 0014                  		move.w	$14(a0),d0
00013C66 6B00                       		bmi.s	loc_1323A
00013C68 08A8 0000 0022             		bclr	#0,$22(a0)
00013C6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C74 4E75                       		rts	
00013C76                            ; ===========================================================================
00013C76                            
00013C76                            loc_1323A:
00013C76 D044                       		add.w	d4,d0
00013C78 6400                       		bcc.s	loc_13242
00013C7A 303C 0080                  		move.w	#$80,d0
00013C7E                            
00013C7E                            loc_13242:
00013C7E 3140 0014                  		move.w	d0,$14(a0)
00013C82 4E75                       		rts	
00013C84                            ; End of function Sonic_RollRight
00013C84                            
00013C84                            Sonic_AirUnroll:
00013C84                            		
00013C84 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013C88 6600                       		bne.s	@timer
00013C8A 1038 F605                  		move.b	($FFFFF605).w,d0
00013C8E 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013C92 6700                       		beq.s	@end	; if not, branch
00013C94 08A8 0002 0022             		bclr	#2,$22(a0)
00013C9A 117C 0013 0016             		move.b	#$13,$16(a0)
00013CA0 117C 0009 0017             		move.b	#9,$17(a0)
00013CA6 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CAC 303C 00A5                  		move.w	#$A5,d0
00013CB0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play fart sound
00013CB6 2028 0010                  		move.l	$10(a0),d0
00013CBA D080                       		add.l	d0,d0
00013CBC 2140 0010                  		move.l	d0,$10(a0)
00013CC0 5B68 000C                  		subq.w	#5,$C(a0)
00013CC4                            	@end:
00013CC4 4E75                       		rts
00013CC6                            	@timer:
00013CC6 5328 003A                  		subq.b	#1,$3A(a0)
00013CCA 4E75                       		rts
00013CCC                            
00013CCC                            ; ---------------------------------------------------------------------------
00013CCC                            ; Subroutine to	change Sonic's direction while jumping
00013CCC                            ; ---------------------------------------------------------------------------
00013CCC                            
00013CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CCC                            
00013CCC                            
00013CCC                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CCC 3C38 F760                  		move.w	($FFFFF760).w,d6
00013CD0 3A38 F762                  		move.w	($FFFFF762).w,d5
00013CD4 E345                       		asl.w	#1,d5
00013CD6 0828 0004 0022             		btst	#4,$22(a0)
00013CDC 6600                       		bne.s	Obj01_ResetScr2
00013CDE 3028 0010                  		move.w	$10(a0),d0
00013CE2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013CE8 6700                       		beq.s	loc_13278	; if not, branch
00013CEA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013CF0 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013CF2 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013CF6 6E00                       		bgt.s	loc_13278
00013CF8 3001                       		move.w	d1,d0
00013CFA                            
00013CFA                            loc_13278:
00013CFA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D00 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013D02 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D08 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013D0A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D0E 6E00                       		bgt.s	Obj01_JumpMove
00013D10 3001                       		move.w	d1,d0
00013D12 6000                       		bra.s	Obj01_JumpMove
00013D14                            
00013D14                            SonicCJD_JumpLeft:
00013D14 08E8 0000 0022             		bset	#0,$22(a0)
00013D1A 9045                       		sub.w	d5,d0
00013D1C 3206                       		move.w	d6,d1
00013D1E 4441                       		neg.w	d1
00013D20 B041                       		cmp.w	d1,d0
00013D22                            		; bgt.s	loc_13278
00013D22                            		; move.w	d1,d0
00013D22 4E75                       		rts
00013D24                            
00013D24                            SonicCJD_JumpRight:
00013D24 08A8 0000 0022             		bclr	#0,$22(a0)
00013D2A D045                       		add.w	d5,d0
00013D2C B046                       		cmp.w	d6,d0
00013D2E 6D00                       		blt.s	Obj01_JumpMove
00013D30 3006                       		move.w	d6,d0
00013D32                            
00013D32                            Obj01_JumpMove:
00013D32 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D36                            
00013D36                            Obj01_ResetScr2:
00013D36 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D3C 6700                       		beq.s	loc_132A4	; if yes, branch
00013D3E 6400                       		bcc.s	loc_132A0
00013D40 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D44                            
00013D44                            loc_132A0:
00013D44 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D48                            
00013D48                            loc_132A4:
00013D48 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D4E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D50 3028 0010                  		move.w	$10(a0),d0
00013D54 3200                       		move.w	d0,d1
00013D56 EA41                       		asr.w	#5,d1
00013D58 6700                       		beq.s	locret_132D2
00013D5A 6B00                       		bmi.s	loc_132C6
00013D5C 9041                       		sub.w	d1,d0
00013D5E 6400                       		bcc.s	loc_132C0
00013D60 303C 0000                  		move.w	#0,d0
00013D64                            
00013D64                            loc_132C0:
00013D64 3140 0010                  		move.w	d0,$10(a0)
00013D68 4E75                       		rts	
00013D6A                            ; ===========================================================================
00013D6A                            
00013D6A                            loc_132C6:
00013D6A 9041                       		sub.w	d1,d0
00013D6C 6500                       		bcs.s	loc_132CE
00013D6E 303C 0000                  		move.w	#0,d0
00013D72                            
00013D72                            loc_132CE:
00013D72 3140 0010                  		move.w	d0,$10(a0)
00013D76                            
00013D76                            locret_132D2:
00013D76 4E75                       		rts	
00013D78                            ; End of function Sonic_ChgJumpDir
00013D78                            
00013D78                            ; ===========================================================================
00013D78                            ; ---------------------------------------------------------------------------
00013D78                            ; Unused subroutine to squash Sonic
00013D78                            ; ---------------------------------------------------------------------------
00013D78 1028 0026                  		move.b	$26(a0),d0
00013D7C 0600 0020                  		addi.b	#$20,d0
00013D80 0200 00C0                  		andi.b	#$C0,d0
00013D84 6600                       		bne.s	locret_13302
00013D86 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D8A 4A41                       		tst.w	d1
00013D8C 6A00                       		bpl.s	locret_13302
00013D8E 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013D94 317C 0000 0010             		move.w	#0,$10(a0)
00013D9A 317C 0000 0012             		move.w	#0,$12(a0)
00013DA0 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013DA6                            
00013DA6                            locret_13302:
00013DA6 4E75                       		rts	
00013DA8                            ; ---------------------------------------------------------------------------
00013DA8                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013DA8                            ; ---------------------------------------------------------------------------
00013DA8                            
00013DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA8                            
00013DA8                            
00013DA8                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013DA8 2228 0008                  		move.l	8(a0),d1
00013DAC 3028 0010                  		move.w	$10(a0),d0
00013DB0 48C0                       		ext.l	d0
00013DB2 E180                       		asl.l	#8,d0
00013DB4 D280                       		add.l	d0,d1
00013DB6 4841                       		swap	d1
00013DB8 3038 F728                  		move.w	($FFFFF728).w,d0
00013DBC 0640 0010                  		addi.w	#$10,d0
00013DC0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DC2 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013DC4 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013DC8 0640 0128                  		addi.w	#$128,d0
00013DCC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013DD0 6600                       		bne.s	loc_13332
00013DD2 0640 0040                  		addi.w	#$40,d0
00013DD6                            
00013DD6                            loc_13332:
00013DD6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DD8 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013DDA                            
00013DDA                            loc_13336:
00013DDA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DDE 0640 00E0                  		addi.w	#$E0,d0
00013DE2 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013DE6 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013DE8 4E75                       		rts	
00013DEA                            ; ===========================================================================
00013DEA                            
00013DEA                            Boundary_Bottom:
00013DEA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013DF0 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013DF4 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013DFA 6500 0000                  		bcs.w	KillSonic
00013DFE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013E02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013E08 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E0E 4E75                       		rts	
00013E10                            ; ===========================================================================
00013E10                            
00013E10                            Boundary_Sides:
00013E10 3140 0008                  		move.w	d0,8(a0)
00013E14 317C 0000 000A             		move.w	#0,$A(a0)
00013E1A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E20 317C 0000 0014             		move.w	#0,$14(a0)
00013E26 60B2                       		bra.s	loc_13336
00013E28                            ; End of function Sonic_LevelBound
00013E28                            
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            ; Subroutine allowing Sonic to roll when he's moving
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            
00013E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E28                            
00013E28                            
00013E28                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E28 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E2C 6600                       		bne.s	Obj01_NoRoll
00013E2E 3028 0014                  		move.w	$14(a0),d0
00013E32 6A00                       		bpl.s	loc_13392
00013E34 4440                       		neg.w	d0
00013E36                            
00013E36                            loc_13392:
00013E36 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E3A 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E3C 1038 F602                  		move.b	($FFFFF602).w,d0
00013E40 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E44 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E46 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E4C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E4E                            
00013E4E                            Obj01_NoRoll:
00013E4E 4E75                       		rts	
00013E50                            ; ===========================================================================
00013E50                            
00013E50                            Obj01_ChkRoll:
00013E50 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013E56 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013E58 4E75                       		rts	
00013E5A                            ; ===========================================================================
00013E5A                            
00013E5A                            Obj01_DoRoll:
00013E5A 08E8 0002 0022             		bset	#2,$22(a0)
00013E60 117C 000E 0016             		move.b	#$E,$16(a0)
00013E66 117C 0007 0017             		move.b	#7,$17(a0)
00013E6C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E72 5A68 000C                  		addq.w	#5,$C(a0)
00013E76 303C 00BE                  		move.w	#$BE,d0
00013E7A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rolling sound
00013E80 4A68 0014                  		tst.w	$14(a0)
00013E84 6600                       		bne.s	locret_133E8
00013E86 317C 0200 0014             		move.w	#$200,$14(a0)
00013E8C                            
00013E8C                            locret_133E8:
00013E8C 4E75                       		rts	
00013E8E                            ; End of function Sonic_Roll
00013E8E                            
00013E8E                            ; ---------------------------------------------------------------------------
00013E8E                            ; Subroutine allowing Sonic to jump
00013E8E                            ; ---------------------------------------------------------------------------
00013E8E                            
00013E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E8E                            
00013E8E                            
00013E8E                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E8E 1038 F603                  		move.b	($FFFFF603).w,d0
00013E92 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013E96 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013E9A 7000                       		moveq	#0,d0
00013E9C 1028 0026                  		move.b	$26(a0),d0
00013EA0 0600 0080                  		addi.b	#$80,d0
00013EA4 6100 0000                  		bsr.w	sub_14D48
00013EA8 0C41 0006                  		cmpi.w	#6,d1
00013EAC 6D00 0000                  		blt.w	locret_1348E
00013EB0 343C 0680                  		move.w	#$680,d2
00013EB4 0828 0006 0022             		btst	#6,$22(a0)
00013EBA 6700                       		beq.s	loc_1341C
00013EBC 343C 0380                  		move.w	#$380,d2
00013EC0                            
00013EC0                            loc_1341C:
00013EC0 7000                       		moveq	#0,d0
00013EC2 1028 0026                  		move.b	$26(a0),d0
00013EC6 0400 0040                  		subi.b	#$40,d0
00013ECA 4EB9 0000 2D34             		jsr	(CalcSine).l
00013ED0 C3C2                       		muls.w	d2,d1
00013ED2 E081                       		asr.l	#8,d1
00013ED4 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013ED8 C1C2                       		muls.w	d2,d0
00013EDA E080                       		asr.l	#8,d0
00013EDC D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013EE0 08E8 0001 0022             		bset	#1,$22(a0)
00013EE6 08A8 0005 0022             		bclr	#5,$22(a0)
00013EEC 588F                       		addq.l	#4,sp
00013EEE 117C 0001 003C             		move.b	#1,$3C(a0)
00013EF4 4228 0038                  		clr.b	$38(a0)
00013EF8 303C 00A0                  		move.w	#$A0,d0
00013EFC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play jumping sound
00013F02 117C 0013 0016             		move.b	#$13,$16(a0)
00013F08 117C 0009 0017             		move.b	#9,$17(a0)
00013F0E 0828 0002 0022             		btst	#2,$22(a0)
00013F14 6600                       		bne.s	loc_13490
00013F16 117C 000E 0016             		move.b	#$E,$16(a0)
00013F1C 117C 0007 0017             		move.b	#7,$17(a0)
00013F22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F28 08E8 0002 0022             		bset	#2,$22(a0)
00013F2E 5A68 000C                  		addq.w	#5,$C(a0)
00013F32 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F38                            
00013F38                            locret_1348E:
00013F38 4E75                       		rts	
00013F3A                            ; ===========================================================================
00013F3A                            
00013F3A                            loc_13490:
00013F3A 08E8 0004 0022             		bset	#4,$22(a0)
00013F40 4E75                       		rts	
00013F42                            ; End of function Sonic_Jump
00013F42                            
00013F42                            
00013F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F42                            
00013F42                            
00013F42                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F42 4A28 003C                  		tst.b	$3C(a0)
00013F46 6700                       		beq.s	loc_134C4
00013F48 323C FC00                  		move.w	#-$400,d1
00013F4C 0828 0006 0022             		btst	#6,$22(a0)
00013F52 6700                       		beq.s	loc_134AE
00013F54 323C FE00                  		move.w	#-$200,d1
00013F58                            
00013F58                            loc_134AE:
00013F58 B268 0012                  		cmp.w	$12(a0),d1
00013F5C 6F00                       		ble.s	locret_134C2
00013F5E 1038 F602                  		move.b	($FFFFF602).w,d0
00013F62 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013F66 6600                       		bne.s	locret_134C2	; if yes, branch
00013F68 3141 0012                  		move.w	d1,$12(a0)
00013F6C                            
00013F6C                            locret_134C2:
00013F6C 4E75                       		rts	
00013F6E                            ; ===========================================================================
00013F6E                            
00013F6E                            loc_134C4:
00013F6E 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013F74 6C00                       		bge.s	locret_134D2
00013F76 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013F7C                            
00013F7C                            locret_134D2:
00013F7C 4E75                       		rts	
00013F7E                            ; End of function Sonic_JumpHeight
00013F7E                            
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            ; Subroutine to	slow Sonic walking up a	slope
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            
00013F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F7E                            
00013F7E                            
00013F7E                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013F7E 1028 0026                  		move.b	$26(a0),d0
00013F82 0600 0060                  		addi.b	#$60,d0
00013F86 0C00 00C0                  		cmpi.b	#$C0,d0
00013F8A 6400                       		bcc.s	locret_13508
00013F8C 1028 0026                  		move.b	$26(a0),d0
00013F90 4EB9 0000 2D34             		jsr	(CalcSine).l
00013F96 C1FC 0020                  		muls.w	#$20,d0
00013F9A E080                       		asr.l	#8,d0
00013F9C 4A68 0014                  		tst.w	$14(a0)
00013FA0 6700                       		beq.s	locret_13508
00013FA2 6B00                       		bmi.s	loc_13504
00013FA4 4A40                       		tst.w	d0
00013FA6 6700                       		beq.s	locret_13502
00013FA8 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FAC                            
00013FAC                            locret_13502:
00013FAC 4E75                       		rts	
00013FAE                            ; ===========================================================================
00013FAE                            
00013FAE                            loc_13504:
00013FAE D168 0014                  		add.w	d0,$14(a0)
00013FB2                            
00013FB2                            locret_13508:
00013FB2 4E75                       		rts	
00013FB4                            ; End of function Sonic_SlopeResist
00013FB4                            
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            
00013FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FB4                            
00013FB4                            
00013FB4                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013FB4 1028 0026                  		move.b	$26(a0),d0
00013FB8 0600 0060                  		addi.b	#$60,d0
00013FBC 0C00 00C0                  		cmpi.b	#-$40,d0
00013FC0 6400                       		bcc.s	locret_13544
00013FC2 1028 0026                  		move.b	$26(a0),d0
00013FC6 4EB9 0000 2D34             		jsr	(CalcSine).l
00013FCC C1FC 0050                  		muls.w	#$50,d0
00013FD0 E080                       		asr.l	#8,d0
00013FD2 4A68 0014                  		tst.w	$14(a0)
00013FD6 6B00                       		bmi.s	loc_1353A
00013FD8 4A40                       		tst.w	d0
00013FDA 6A00                       		bpl.s	loc_13534
00013FDC E480                       		asr.l	#2,d0
00013FDE                            
00013FDE                            loc_13534:
00013FDE D168 0014                  		add.w	d0,$14(a0)
00013FE2 4E75                       		rts	
00013FE4                            ; ===========================================================================
00013FE4                            
00013FE4                            loc_1353A:
00013FE4 4A40                       		tst.w	d0
00013FE6 6B00                       		bmi.s	loc_13540
00013FE8 E480                       		asr.l	#2,d0
00013FEA                            
00013FEA                            loc_13540:
00013FEA D168 0014                  		add.w	d0,$14(a0)
00013FEE                            
00013FEE                            locret_13544:
00013FEE 4E75                       		rts	
00013FF0                            ; End of function Sonic_RollRepel
00013FF0                            
00013FF0                            ; ---------------------------------------------------------------------------
00013FF0                            ; Subroutine to	push Sonic down	a slope
00013FF0                            ; ---------------------------------------------------------------------------
00013FF0                            
00013FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FF0                            
00013FF0                            
00013FF0                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FF0 4E71                       		nop	
00013FF2 4A28 0038                  		tst.b	$38(a0)
00013FF6 6600                       		bne.s	locret_13580
00013FF8 4A68 003E                  		tst.w	$3E(a0)
00013FFC 6600                       		bne.s	loc_13582
00013FFE 1028 0026                  		move.b	$26(a0),d0
00014002 0600 0020                  		addi.b	#$20,d0
00014006 0200 00C0                  		andi.b	#$C0,d0
0001400A 6700                       		beq.s	locret_13580
0001400C 3028 0014                  		move.w	$14(a0),d0
00014010 6A00                       		bpl.s	loc_1356A
00014012 4440                       		neg.w	d0
00014014                            
00014014                            loc_1356A:
00014014 0C40 0280                  		cmpi.w	#$280,d0
00014018 6400                       		bcc.s	locret_13580
0001401A 4268 0014                  		clr.w	$14(a0)
0001401E 08E8 0001 0022             		bset	#1,$22(a0)
00014024 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001402A                            
0001402A                            locret_13580:
0001402A 4E75                       		rts	
0001402C                            ; ===========================================================================
0001402C                            
0001402C                            loc_13582:
0001402C 5368 003E                  		subq.w	#1,$3E(a0)
00014030 4E75                       		rts	
00014032                            ; End of function Sonic_SlopeRepel
00014032                            
00014032                            ; ---------------------------------------------------------------------------
00014032                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014032                            ; ---------------------------------------------------------------------------
00014032                            
00014032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014032                            
00014032                            
00014032                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014032 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014036 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014038 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001403A                            
0001403A 5400                       		addq.b	#2,d0		; increase angle
0001403C 6400                       		bcc.s	loc_13596
0001403E 7000                       		moveq	#0,d0
00014040                            
00014040                            loc_13596:
00014040 6000                       		bra.s	loc_1359E
00014042                            ; ===========================================================================
00014042                            
00014042                            loc_13598:
00014042 5500                       		subq.b	#2,d0		; decrease angle
00014044 6400                       		bcc.s	loc_1359E
00014046 7000                       		moveq	#0,d0
00014048                            
00014048                            loc_1359E:
00014048 1140 0026                  		move.b	d0,$26(a0)
0001404C                            
0001404C                            locret_135A2:
0001404C 4E75                       		rts	
0001404E                            ; End of function Sonic_JumpAngle
0001404E                            
0001404E                            ; ---------------------------------------------------------------------------
0001404E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001404E                            ; ---------------------------------------------------------------------------
0001404E                            
0001404E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001404E                            
0001404E                            
0001404E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001404E 3228 0010                  		move.w	$10(a0),d1
00014052 3428 0012                  		move.w	$12(a0),d2
00014056 4EB9 0000 3002             		jsr	(CalcAngle).l
0001405C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014060 0400 0020                  		subi.b	#$20,d0
00014064 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014068 0200 00C0                  		andi.b	#$C0,d0
0001406C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014070 0C00 0040                  		cmpi.b	#$40,d0
00014074 6700 0000                  		beq.w	loc_13680
00014078 0C00 0080                  		cmpi.b	#$80,d0
0001407C 6700 0000                  		beq.w	loc_136E2
00014080 0C00 00C0                  		cmpi.b	#-$40,d0
00014084 6700 0000                  		beq.w	loc_1373E
00014088 6100 0000                  		bsr.w	Sonic_HitWall
0001408C 4A41                       		tst.w	d1
0001408E 6A00                       		bpl.s	loc_135F0
00014090 9368 0008                  		sub.w	d1,8(a0)
00014094 317C 0000 0010             		move.w	#0,$10(a0)
0001409A                            
0001409A                            loc_135F0:
0001409A 6100 0000                  		bsr.w	sub_14EB4
0001409E 4A41                       		tst.w	d1
000140A0 6A00                       		bpl.s	loc_13602
000140A2 D368 0008                  		add.w	d1,8(a0)
000140A6 317C 0000 0010             		move.w	#0,$10(a0)
000140AC                            
000140AC                            loc_13602:
000140AC 6100 0000                  		bsr.w	Sonic_HitFloor
000140B0 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000140B4 4A41                       		tst.w	d1
000140B6 6A00                       		bpl.s	locret_1367E
000140B8 1428 0012                  		move.b	$12(a0),d2
000140BC 5002                       		addq.b	#8,d2
000140BE 4402                       		neg.b	d2
000140C0 B202                       		cmp.b	d2,d1
000140C2 6C00                       		bge.s	loc_1361E
000140C4 B002                       		cmp.b	d2,d0
000140C6 6D00                       		blt.s	locret_1367E
000140C8                            
000140C8                            loc_1361E:
000140C8 D368 000C                  		add.w	d1,$C(a0)
000140CC 1143 0026                  		move.b	d3,$26(a0)
000140D0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140D4 117C 0000 001C             		move.b	#0,$1C(a0)
000140DA 1003                       		move.b	d3,d0
000140DC 0600 0020                  		addi.b	#$20,d0
000140E0 0200 0040                  		andi.b	#$40,d0
000140E4 6600                       		bne.s	loc_1365C
000140E6 1003                       		move.b	d3,d0
000140E8 0600 0010                  		addi.b	#$10,d0
000140EC 0200 0020                  		andi.b	#$20,d0
000140F0 6700                       		beq.s	loc_1364E
000140F2 E0E8 0012                  		asr	$12(a0)
000140F6 6000                       		bra.s	loc_13670
000140F8                            ; ===========================================================================
000140F8                            
000140F8                            loc_1364E:
000140F8 317C 0000 0012             		move.w	#0,$12(a0)
000140FE 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014104 4E75                       		rts	
00014106                            ; ===========================================================================
00014106                            
00014106                            loc_1365C:
00014106 317C 0000 0010             		move.w	#0,$10(a0)
0001410C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014112 6F00                       		ble.s	loc_13670
00014114 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001411A                            
0001411A                            loc_13670:
0001411A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014120 4A03                       		tst.b	d3
00014122 6A00                       		bpl.s	locret_1367E
00014124 4468 0014                  		neg.w	$14(a0)
00014128                            
00014128                            locret_1367E:
00014128 4E75                       		rts	
0001412A                            ; ===========================================================================
0001412A                            
0001412A                            loc_13680:
0001412A 6100 0000                  		bsr.w	Sonic_HitWall
0001412E 4A41                       		tst.w	d1
00014130 6A00                       		bpl.s	loc_1369A
00014132 9368 0008                  		sub.w	d1,8(a0)
00014136 317C 0000 0010             		move.w	#0,$10(a0)
0001413C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014142 4E75                       		rts	
00014144                            ; ===========================================================================
00014144                            
00014144                            loc_1369A:
00014144 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014148 4A41                       		tst.w	d1
0001414A 6A00                       		bpl.s	loc_136B4
0001414C 9368 000C                  		sub.w	d1,$C(a0)
00014150 4A68 0012                  		tst.w	$12(a0)
00014154 6A00                       		bpl.s	locret_136B2
00014156 317C 0000 0012             		move.w	#0,$12(a0)
0001415C                            
0001415C                            locret_136B2:
0001415C 4E75                       		rts	
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            loc_136B4:
0001415E 4A68 0012                  		tst.w	$12(a0)
00014162 6B00                       		bmi.s	locret_136E0
00014164 6100 0000                  		bsr.w	Sonic_HitFloor
00014168 4A41                       		tst.w	d1
0001416A 6A00                       		bpl.s	locret_136E0
0001416C D368 000C                  		add.w	d1,$C(a0)
00014170 1143 0026                  		move.b	d3,$26(a0)
00014174 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014178 117C 0000 001C             		move.b	#0,$1C(a0)
0001417E 317C 0000 0012             		move.w	#0,$12(a0)
00014184 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001418A                            
0001418A                            locret_136E0:
0001418A 4E75                       		rts	
0001418C                            ; ===========================================================================
0001418C                            
0001418C                            loc_136E2:
0001418C 6100 0000                  		bsr.w	Sonic_HitWall
00014190 4A41                       		tst.w	d1
00014192 6A00                       		bpl.s	loc_136F4
00014194 9368 0008                  		sub.w	d1,8(a0)
00014198 317C 0000 0010             		move.w	#0,$10(a0)
0001419E                            
0001419E                            loc_136F4:
0001419E 6100 0000                  		bsr.w	sub_14EB4
000141A2 4A41                       		tst.w	d1
000141A4 6A00                       		bpl.s	loc_13706
000141A6 D368 0008                  		add.w	d1,8(a0)
000141AA 317C 0000 0010             		move.w	#0,$10(a0)
000141B0                            
000141B0                            loc_13706:
000141B0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141B4 4A41                       		tst.w	d1
000141B6 6A00                       		bpl.s	locret_1373C
000141B8 9368 000C                  		sub.w	d1,$C(a0)
000141BC 1003                       		move.b	d3,d0
000141BE 0600 0020                  		addi.b	#$20,d0
000141C2 0200 0040                  		andi.b	#$40,d0
000141C6 6600                       		bne.s	loc_13726
000141C8 317C 0000 0012             		move.w	#0,$12(a0)
000141CE 4E75                       		rts	
000141D0                            ; ===========================================================================
000141D0                            
000141D0                            loc_13726:
000141D0 1143 0026                  		move.b	d3,$26(a0)
000141D4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141D8 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141DE 4A03                       		tst.b	d3
000141E0 6A00                       		bpl.s	locret_1373C
000141E2 4468 0014                  		neg.w	$14(a0)
000141E6                            
000141E6                            locret_1373C:
000141E6 4E75                       		rts	
000141E8                            ; ===========================================================================
000141E8                            
000141E8                            loc_1373E:
000141E8 6100 0000                  		bsr.w	sub_14EB4
000141EC 4A41                       		tst.w	d1
000141EE 6A00                       		bpl.s	loc_13758
000141F0 D368 0008                  		add.w	d1,8(a0)
000141F4 317C 0000 0010             		move.w	#0,$10(a0)
000141FA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014200 4E75                       		rts	
00014202                            ; ===========================================================================
00014202                            
00014202                            loc_13758:
00014202 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014206 4A41                       		tst.w	d1
00014208 6A00                       		bpl.s	loc_13772
0001420A 9368 000C                  		sub.w	d1,$C(a0)
0001420E 4A68 0012                  		tst.w	$12(a0)
00014212 6A00                       		bpl.s	locret_13770
00014214 317C 0000 0012             		move.w	#0,$12(a0)
0001421A                            
0001421A                            locret_13770:
0001421A 4E75                       		rts	
0001421C                            ; ===========================================================================
0001421C                            
0001421C                            loc_13772:
0001421C 4A68 0012                  		tst.w	$12(a0)
00014220 6B00                       		bmi.s	locret_1379E
00014222 6100 0000                  		bsr.w	Sonic_HitFloor
00014226 4A41                       		tst.w	d1
00014228 6A00                       		bpl.s	locret_1379E
0001422A D368 000C                  		add.w	d1,$C(a0)
0001422E 1143 0026                  		move.b	d3,$26(a0)
00014232 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014236 117C 0000 001C             		move.b	#0,$1C(a0)
0001423C 317C 0000 0012             		move.w	#0,$12(a0)
00014242 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014248                            
00014248                            locret_1379E:
00014248 4E75                       		rts	
0001424A                            ; End of function Sonic_Floor
0001424A                            
0001424A                            ; ---------------------------------------------------------------------------
0001424A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001424A                            ; ---------------------------------------------------------------------------
0001424A                            
0001424A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001424A                            
0001424A                            
0001424A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001424A 0828 0004 0022             		btst	#4,$22(a0)
00014250 6700                       		beq.s	loc_137AE
00014252 4E71                       		nop	
00014254 4E71                       		nop	
00014256 4E71                       		nop	
00014258                            
00014258                            loc_137AE:
00014258 08A8 0005 0022             		bclr	#5,$22(a0)
0001425E 08A8 0001 0022             		bclr	#1,$22(a0)
00014264 08A8 0004 0022             		bclr	#4,$22(a0)
0001426A 0828 0002 0022             		btst	#2,$22(a0)
00014270 6700                       		beq.s	loc_137E4
00014272 08A8 0002 0022             		bclr	#2,$22(a0)
00014278 117C 0013 0016             		move.b	#$13,$16(a0)
0001427E 117C 0009 0017             		move.b	#9,$17(a0)
00014284 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001428A 5B68 000C                  		subq.w	#5,$C(a0)
0001428E                            
0001428E                            loc_137E4:
0001428E 117C 0000 003C             		move.b	#0,$3C(a0)
00014294 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001429A 4E75                       		rts	
0001429C                            ; End of function Sonic_ResetOnFloor
0001429C                            
0001429C                            ; ===========================================================================
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            ; Sonic	when he	gets hurt
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            
0001429C                            Obj01_Hurt:				; XREF: Obj01_Index
0001429C 4EBA 9D3E                  		jsr	SpeedToPos
000142A0 0668 0030 0012             		addi.w	#$30,$12(a0)
000142A6 0828 0006 0022             		btst	#6,$22(a0)
000142AC 6700                       		beq.s	loc_1380C
000142AE 0468 0020 0012             		subi.w	#$20,$12(a0)
000142B4                            
000142B4                            loc_1380C:
000142B4 6100 0000                  		bsr.w	Sonic_HurtStop
000142B8 6100 FAEE                  		bsr.w	Sonic_LevelBound
000142BC 6100 F4B4                  		bsr.w	Sonic_RecordPos
000142C0 6100 0000                  		bsr.w	Sonic_Animate
000142C4 6100 0000                  		bsr.w	LoadSonicDynPLC
000142C8 4EFA 9D38                  		jmp	DisplaySprite
000142CC                            
000142CC                            ; ---------------------------------------------------------------------------
000142CC                            ; Subroutine to	stop Sonic falling after he's been hurt
000142CC                            ; ---------------------------------------------------------------------------
000142CC                            
000142CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142CC                            
000142CC                            
000142CC                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000142CC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000142D0 0640 00E0                  		addi.w	#$E0,d0
000142D4 B068 000C                  		cmp.w	$C(a0),d0
000142D8 6500 0000                  		bcs.w	KillSonic
000142DC 6100 FD70                  		bsr.w	Sonic_Floor
000142E0 0828 0001 0022             		btst	#1,$22(a0)
000142E6 6600                       		bne.s	locret_13860
000142E8 7000                       		moveq	#0,d0
000142EA 3140 0012                  		move.w	d0,$12(a0)
000142EE 3140 0010                  		move.w	d0,$10(a0)
000142F2 3140 0014                  		move.w	d0,$14(a0)
000142F6 117C 0000 001C             		move.b	#0,$1C(a0)
000142FC 5528 0024                  		subq.b	#2,$24(a0)
00014300 317C 0078 0030             		move.w	#$78,$30(a0)
00014306                            
00014306                            locret_13860:
00014306 4E75                       		rts	
00014308                            ; End of function Sonic_HurtStop
00014308                            
00014308                            ; ===========================================================================
00014308                            ; ---------------------------------------------------------------------------
00014308                            ; Sonic	when he	dies
00014308                            ; ---------------------------------------------------------------------------
00014308                            
00014308                            Obj01_Death:				; XREF: Obj01_Index
00014308 6100 0000                  		bsr.w	GameOver
0001430C 4EBA 9C5C                  		jsr	ObjectFall
00014310 6100 F460                  		bsr.w	Sonic_RecordPos
00014314 6100 0000                  		bsr.w	Sonic_Animate
00014318 6100 0000                  		bsr.w	LoadSonicDynPLC
0001431C 4EFA 9CE4                  		jmp	DisplaySprite
00014320                            
00014320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014320                            
00014320                            
00014320                            GameOver:				; XREF: Obj01_Death
00014320 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014324 0640 0100                  		addi.w	#$100,d0
00014328 B068 000C                  		cmp.w	$C(a0),d0
0001432C 6400 0000                  		bcc.w	locret_13900
00014330 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014336 5428 0024                  		addq.b	#2,$24(a0)
0001433A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001433E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014342 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014346 6600                       		bne.s	loc_138D4
00014348 317C 0000 003A             		move.w	#0,$3A(a0)
0001434E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014354 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001435A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014360 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014364                            
00014364                            loc_138C2:
00014364 303C 008F                  		move.w	#$8F,d0
00014368 4EB9 0000 1594             		jsr	(PlaySound).l	; play game over music
0001436E 7003                       		moveq	#3,d0
00014370 4EF9 0000 177E             		jmp	(LoadPLC).l	; load game over patterns
00014376                            ; ===========================================================================
00014376                            
00014376                            loc_138D4:
00014376 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001437C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014380 6700                       		beq.s	locret_13900	; if not, branch
00014382 317C 0000 003A             		move.w	#0,$3A(a0)
00014388 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001438E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014394 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001439A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000143A0 60C2                       		bra.s	loc_138C2
000143A2                            ; ===========================================================================
000143A2                            
000143A2                            locret_13900:
000143A2 4E75                       		rts	
000143A4                            ; End of function GameOver
000143A4                            
000143A4                            ; ===========================================================================
000143A4                            ; ---------------------------------------------------------------------------
000143A4                            ; Sonic	when the level is restarted
000143A4                            ; ---------------------------------------------------------------------------
000143A4                            
000143A4                            Obj01_ResetLevel:			; XREF: Obj01_Index
000143A4 4A68 003A                  		tst.w	$3A(a0)
000143A8 6700                       		beq.s	locret_13914
000143AA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143AE 6600                       		bne.s	locret_13914
000143B0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000143B6                            
000143B6                            locret_13914:
000143B6 4E75                       		rts	
000143B8                            
000143B8                            ; ---------------------------------------------------------------------------
000143B8                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000143B8                            ; ---------------------------------------------------------------------------
000143B8                            
000143B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143B8                            
000143B8                            
000143B8                            Sonic_Loops:				; XREF: Obj01_Control
000143B8                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000143B8                            ;		beq.s	loc_13926	; if yes, branch
000143B8                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
000143B8                            ;		bne.w	locret_139C2	; if not, branch
000143B8                            ;		this is commented out, please do more plane messups id love that
000143B8                            ;loc_13926:
000143B8 3028 000C                  		move.w	$C(a0),d0
000143BC E248                       		lsr.w	#1,d0
000143BE 0240 0380                  		andi.w	#$380,d0
000143C2 1228 0008                  		move.b	8(a0),d1
000143C6 0241 007F                  		andi.w	#$7F,d1
000143CA D041                       		add.w	d1,d0
000143CC 43F8 A400                  		lea	($FFFFA400).w,a1
000143D0 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000143D4 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000143D8 6700 FA76                  		beq.w	Obj01_ChkRoll
000143DC B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000143E0 6700 FA6E                  		beq.w	Obj01_ChkRoll
000143E4 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000143E8 6700                       		beq.s	loc_13976
000143EA B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000143EE 6700                       		beq.s	loc_13966
000143F0 08A8 0006 0001             		bclr	#6,1(a0)
000143F6 4E75                       		rts	
000143F8                            ; ===========================================================================
000143F8                            
000143F8                            loc_13966:
000143F8 0828 0001 0022             		btst	#1,$22(a0)
000143FE 6700                       		beq.s	loc_13976
00014400 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014406 4E75                       		rts	
00014408                            ; ===========================================================================
00014408                            
00014408                            loc_13976:
00014408 3428 0008                  		move.w	8(a0),d2
0001440C 0C02 002C                  		cmpi.b	#$2C,d2
00014410 6400                       		bcc.s	loc_13988
00014412 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014418 4E75                       		rts	
0001441A                            ; ===========================================================================
0001441A                            
0001441A                            loc_13988:
0001441A 0C02 00E0                  		cmpi.b	#-$20,d2
0001441E 6500                       		bcs.s	loc_13996
00014420 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014426 4E75                       		rts	
00014428                            ; ===========================================================================
00014428                            
00014428                            loc_13996:
00014428 0828 0006 0001             		btst	#6,1(a0)
0001442E 6600                       		bne.s	loc_139B2
00014430 1228 0026                  		move.b	$26(a0),d1
00014434 6700                       		beq.s	locret_139C2
00014436 0C01 0080                  		cmpi.b	#-$80,d1
0001443A 6200                       		bhi.s	locret_139C2
0001443C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014442 4E75                       		rts	
00014444                            ; ===========================================================================
00014444                            
00014444                            loc_139B2:
00014444 1228 0026                  		move.b	$26(a0),d1
00014448 0C01 0080                  		cmpi.b	#-$80,d1
0001444C 6300                       		bls.s	locret_139C2
0001444E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014454                            
00014454                            locret_139C2:
00014454 4E75                       		rts	
00014456                            ; End of function Sonic_Loops
00014456                            
00014456                            ; ---------------------------------------------------------------------------
00014456                            ; Subroutine to	animate	Sonic's sprites
00014456                            ; ---------------------------------------------------------------------------
00014456                            
00014456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014456                            
00014456                            Player_Anim:
00014456 0000 0000                  	dc.l	SonicAniData
0001445A 0000 0000                  	dc.l	SonicAniData ; gronic
0001445E 0000 0000                  	dc.l	SonicAniData ; anakama
00014462 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014466                            
00014466                            	; Insert more animation data for other characters here
00014466                            	
00014466                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014466 7000                       			moveq	#0,d0
00014468 1038 FFE8                  		move.b	(v_character),d0
0001446C E548                       		lsl.w	#2,d0
0001446E 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014472                            		
00014472 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014476                            	
00014476 7000                       		moveq	#0,d0
00014478 1028 001C                  		move.b	$1C(a0),d0
0001447C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014480 6700                       		beq.s	SAnim_Do	; if not, branch
00014482 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014486 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001448C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014492                            
00014492                            SAnim_Do:
00014492 D040                       		add.w	d0,d0
00014494 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014498 1011                       		move.b	(a1),d0
0001449A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001449C 1228 0022                  		move.b	$22(a0),d1
000144A0 0201 0001                  		andi.b	#1,d1
000144A4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144AA 8328 0001                  		or.b	d1,1(a0)
000144AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144B2 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000144B4 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000144B8                            
000144B8                            SAnim_Do2:
000144B8 7200                       		moveq	#0,d1
000144BA 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000144BE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000144C2 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000144C4                            
000144C4                            SAnim_Next:
000144C4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000144C8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000144CC                            
000144CC                            SAnim_Delay:
000144CC 4E75                       		rts	
000144CE                            ; ===========================================================================
000144CE                            
000144CE                            SAnim_End_FF:
000144CE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000144D0 6600                       		bne.s	SAnim_End_FE	; if not, branch
000144D2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000144D8 1029 0001                  		move.b	1(a1),d0	; read sprite number
000144DC 60E6                       		bra.s	SAnim_Next
000144DE                            ; ===========================================================================
000144DE                            
000144DE                            SAnim_End_FE:
000144DE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000144E0 6600                       		bne.s	SAnim_End_FD	; if not, branch
000144E2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000144E6 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000144EA 9200                       		sub.b	d0,d1
000144EC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000144F0 60D2                       		bra.s	SAnim_Next
000144F2                            ; ===========================================================================
000144F2                            
000144F2                            SAnim_End_FD:
000144F2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000144F4 6600                       		bne.s	SAnim_End	; if not, branch
000144F6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000144FC                            
000144FC                            SAnim_End:
000144FC 4E75                       		rts	
000144FE                            ; ===========================================================================
000144FE                            
000144FE                            SAnim_WalkRun:				; XREF: SAnim_Do
000144FE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014502 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014504 5200                       		addq.b	#1,d0		; is animation walking/running?
00014506 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001450A 7200                       		moveq	#0,d1
0001450C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014510 1428 0022                  		move.b	$22(a0),d2
00014514 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014518 6600                       		bne.s	loc_13A70	; if yes, branch
0001451A 4600                       		not.b	d0		; reverse angle
0001451C                            
0001451C                            loc_13A70:
0001451C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014520 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014522 7203                       		moveq	#3,d1
00014524                            
00014524                            loc_13A78:
00014524 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001452A B302                       		eor.b	d1,d2
0001452C 8528 0001                  		or.b	d2,1(a0)
00014530 0828 0005 0022             		btst	#5,$22(a0)
00014536 6600 0000                  		bne.w	SAnim_Push
0001453A E808                       		lsr.b	#4,d0		; divide angle by $10
0001453C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014540 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014544 6A00                       		bpl.s	loc_13A9C
00014546 4442                       		neg.w	d2
00014548                            
00014548                            loc_13A9C:
00014548 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001454E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014552 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014554 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001455A 1200                       		move.b	d0,d1
0001455C E209                       		lsr.b	#1,d1
0001455E D001                       		add.b	d1,d0
00014560                            
00014560                            loc_13AB4:
00014560 D000                       		add.b	d0,d0
00014562 1600                       		move.b	d0,d3
00014564 4442                       		neg.w	d2
00014566 0642 0800                  		addi.w	#$800,d2
0001456A 6A00                       		bpl.s	loc_13AC2
0001456C 7400                       		moveq	#0,d2
0001456E                            
0001456E                            loc_13AC2:
0001456E E04A                       		lsr.w	#8,d2
00014570 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014574 6100 FF42                  		bsr.w	SAnim_Do2
00014578 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001457C 4E75                       		rts	
0001457E                            ; ===========================================================================
0001457E                            
0001457E                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001457E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014580 6600                       		bne.s	SAnim_Push	; if not, branch
00014582 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014586 6A00                       		bpl.s	loc_13ADE
00014588 4442                       		neg.w	d2
0001458A                            
0001458A                            loc_13ADE:
0001458A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014590 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014594 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014596 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001459C                            
0001459C                            loc_13AF0:
0001459C 4442                       		neg.w	d2
0001459E 0642 0400                  		addi.w	#$400,d2
000145A2 6A00                       		bpl.s	loc_13AFA
000145A4 7400                       		moveq	#0,d2
000145A6                            
000145A6                            loc_13AFA:
000145A6 E04A                       		lsr.w	#8,d2
000145A8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145AC 1228 0022                  		move.b	$22(a0),d1
000145B0 0201 0001                  		andi.b	#1,d1
000145B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145BA 8328 0001                  		or.b	d1,1(a0)
000145BE 6000 FEF8                  		bra.w	SAnim_Do2
000145C2                            ; ===========================================================================
000145C2                            
000145C2                            SAnim_Push:				; XREF: SAnim_RollJump
000145C2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145C6 6B00                       		bmi.s	loc_13B1E
000145C8 4442                       		neg.w	d2
000145CA                            
000145CA                            loc_13B1E:
000145CA 0642 0800                  		addi.w	#$800,d2
000145CE 6A00                       		bpl.s	loc_13B26
000145D0 7400                       		moveq	#0,d2
000145D2                            
000145D2                            loc_13B26:
000145D2 EC4A                       		lsr.w	#6,d2
000145D4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145D8 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000145DE 1228 0022                  		move.b	$22(a0),d1
000145E2 0201 0001                  		andi.b	#1,d1
000145E6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145EC 8328 0001                  		or.b	d1,1(a0)
000145F0 6000 FEC6                  		bra.w	SAnim_Do2
000145F4                            ; End of function Sonic_Animate
000145F4                            
000145F4                            ; ===========================================================================
000145F4                            SonicAniData:
000145F4                            	include "_anim\Sonic.asm"
000145F4                            ; ---------------------------------------------------------------------------
000145F4                            ; Animation script - Sonic
000145F4                            ; ---------------------------------------------------------------------------
000145F4 0000                       		dc.w SonAni_Walk-SonicAniData
000145F6 0000                       		dc.w SonAni_Run-SonicAniData
000145F8 0000                       		dc.w SonAni_Roll-SonicAniData
000145FA 0000                       		dc.w SonAni_Roll2-SonicAniData
000145FC 0000                       		dc.w SonAni_Push-SonicAniData
000145FE 0000                       		dc.w SonAni_Wait-SonicAniData
00014600 0000                       		dc.w SonAni_Balance-SonicAniData
00014602 0000                       		dc.w SonAni_LookUp-SonicAniData
00014604 0000                       		dc.w SonAni_Duck-SonicAniData
00014606 0000                       		dc.w SonAni_Warp1-SonicAniData
00014608 0000                       		dc.w SonAni_Warp2-SonicAniData
0001460A 0000                       		dc.w SonAni_Warp3-SonicAniData
0001460C 0000                       		dc.w SonAni_Warp4-SonicAniData
0001460E 0000                       		dc.w SonAni_Stop-SonicAniData
00014610 0000                       		dc.w SonAni_Float1-SonicAniData
00014612 0000                       		dc.w SonAni_Float2-SonicAniData
00014614 0000                       		dc.w SonAni_Spring-SonicAniData
00014616 0000                       		dc.w SonAni_LZHang-SonicAniData
00014618 0000                       		dc.w SonAni_Leap1-SonicAniData
0001461A 0000                       		dc.w SonAni_Leap2-SonicAniData
0001461C 0000                       		dc.w SonAni_Surf-SonicAniData
0001461E 0000                       		dc.w SonAni_Bubble-SonicAniData
00014620 0000                       		dc.w SonAni_Death1-SonicAniData
00014622 0000                       		dc.w SonAni_Drown-SonicAniData
00014624 0000                       		dc.w SonAni_Death2-SonicAniData
00014626 0000                       		dc.w SonAni_Shrink-SonicAniData
00014628 0000                       		dc.w SonAni_Hurt-SonicAniData
0001462A 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001462C 0000                       		dc.w SonAni_Blank-SonicAniData
0001462E 0000                       		dc.w SonAni_Float3-SonicAniData
00014630 0000                       		dc.w SonAni_Float4-SonicAniData
00014632 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001463C FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014644 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001464C FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014654 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001465C 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014672 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014676 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001467A 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001467E 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014682 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014686 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001468A 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001468E 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014692 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014696 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001469E 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000146A2 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000146A6 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146AC 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000146B2 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000146B6 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000146BE 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000146C2 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000146C6 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000146CA 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000146D4 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000146D8 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000146DC 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000146E0 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000146E8 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000146EC                            		even
000146EC                            		even
000146EC                            
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            ; Sonic	pattern	loading	subroutine
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            
000146EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146EC                            Player_DPLC:
000146EC 0000 0000                  	dc.l	SonicDynPLC
000146F0 0000 0000                  	dc.l	SonicDynPLC ; gronic
000146F4 0000 0000                  	dc.l	SonicDynPLC ; anakama
000146F8 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
000146FC                            	; add pointers for player dplc here
000146FC                            Player_Art:
000146FC 0000 0000                  	dc.l	Art_Sonic
00014700 0000 0000                  	dc.l	Art_Sonic ; gronic
00014704 0000 0000                  	dc.l	Art_Sonic ; anakama
00014708 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
0001470C                            	; add pointers for player art here
0001470C                            
0001470C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001470C 7000                       		moveq	#0,d0
0001470E 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014712 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014716 6700                       		beq.s	locret_13C96
00014718 11C0 F766                  		move.b	d0,($FFFFF766).w
0001471C                            		
0001471C 323C 0000                  		move.w	#0,d1
00014720 1238 FFE8                  		move.b	(v_character),d1
00014724 E549                       		lsl.w	#2,d1
00014726 45FA FFC4                  		lea 	Player_DPLC(pc),a2
0001472A                            
0001472A 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001472E                            		
0001472E D040                       		add.w	d0,d0
00014730 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014734 7200                       		moveq	#0,d1
00014736 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014738 5301                       		subq.b	#1,d1
0001473A 6B00                       		bmi.s	locret_13C96
0001473C 47F8 C800                  		lea	($FFFFC800).w,a3
00014740 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014746                            
00014746                            SPLC_ReadEntry:
00014746 303C 0000                  		move.w	#0,d0
0001474A 1038 FFE8                  		move.b	(v_character),d0
0001474E E548                       		lsl.w	#2,d0
00014750 43FA FFAA                  		lea 	Player_Art(pc),a1
00014754                            
00014754 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014758                            
00014758 7400                       		moveq	#0,d2
0001475A 141A                       		move.b	(a2)+,d2
0001475C 3002                       		move.w	d2,d0
0001475E E808                       		lsr.b	#4,d0
00014760 E14A                       		lsl.w	#8,d2
00014762 141A                       		move.b	(a2)+,d2
00014764 EB4A                       		lsl.w	#5,d2
00014766 D3C2                       		adda.l	d2,a1
00014768                            
00014768                            SPLC_LoadTile:
00014768 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001476C 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014770 47EB 0020                  		lea	$20(a3),a3	; next tile
00014774 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014778                            
00014778 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001477C                            
0001477C                            locret_13C96:
0001477C 4E75                       		rts	
0001477E                            ; End of function LoadSonicDynPLC
0001477E                            
0001477E                            ; ===========================================================================
0001477E                            ; ---------------------------------------------------------------------------
0001477E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001477E                            ; ---------------------------------------------------------------------------
0001477E                            
0001477E                            Obj0A:					; XREF: Obj_Index
0001477E 7000                       		moveq	#0,d0
00014780 1028 0024                  		move.b	$24(a0),d0
00014784 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014788 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001478C                            ; ===========================================================================
0001478C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014790 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014794 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014798 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001479C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001479E                            ; ===========================================================================
0001479E                            
0001479E                            Obj0A_Main:				; XREF: Obj0A_Index
0001479E 5428 0024                  		addq.b	#2,$24(a0)
000147A2 217C 0001 3396 0004        		move.l	#Map_obj64,4(a0)
000147AA 317C 8348 0002             		move.w	#$8348,2(a0)
000147B0 117C 0084 0001             		move.b	#$84,1(a0)
000147B6 117C 0010 0019             		move.b	#$10,$19(a0)
000147BC 117C 0001 0018             		move.b	#1,$18(a0)
000147C2 1028 0028                  		move.b	$28(a0),d0
000147C6 6A00                       		bpl.s	loc_13D00
000147C8 5028 0024                  		addq.b	#8,$24(a0)
000147CC 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000147D4 317C 0440 0002             		move.w	#$440,2(a0)
000147DA 0240 007F                  		andi.w	#$7F,d0
000147DE 1140 0033                  		move.b	d0,$33(a0)
000147E2 6000 0000                  		bra.w	Obj0A_Countdown
000147E6                            ; ===========================================================================
000147E6                            
000147E6                            loc_13D00:
000147E6 1140 001C                  		move.b	d0,$1C(a0)
000147EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000147F0 317C FF78 0012             		move.w	#-$88,$12(a0)
000147F6                            
000147F6                            Obj0A_Animate:				; XREF: Obj0A_Index
000147F6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000147FC 4EB9 0000 B058             		jsr	AnimateSprite
00014802                            
00014802                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014802 3038 F646                  		move.w	($FFFFF646).w,d0
00014806 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001480A 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001480C 117C 0006 0024             		move.b	#6,$24(a0)
00014812 5E28 001C                  		addq.b	#7,$1C(a0)
00014816 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001481C 6700                       		beq.s	Obj0A_Display
0001481E 6000                       		bra.s	Obj0A_Display
00014820                            ; ===========================================================================
00014820                            
00014820                            Obj0A_Wobble:
00014820 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014824 6700                       		beq.s	loc_13D44
00014826 5868 0030                  		addq.w	#4,$30(a0)
0001482A                            
0001482A                            loc_13D44:
0001482A 1028 0026                  		move.b	$26(a0),d0
0001482E 5228 0026                  		addq.b	#1,$26(a0)
00014832 0240 007F                  		andi.w	#$7F,d0
00014836 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001483C 1031 0000                  		move.b	(a1,d0.w),d0
00014840 4880                       		ext.w	d0
00014842 D068 0030                  		add.w	$30(a0),d0
00014846 3140 0008                  		move.w	d0,8(a0)
0001484A 6100                       		bsr.s	Obj0A_ShowNumber
0001484C 4EBA 978E                  		jsr	SpeedToPos
00014850 4A28 0001                  		tst.b	1(a0)
00014854 6A00                       		bpl.s	Obj0A_Delete
00014856 4EFA 97AA                  		jmp	DisplaySprite
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            Obj0A_Delete:
0001485A 4EFA 97E2                  		jmp	DeleteObject
0001485E                            ; ===========================================================================
0001485E                            
0001485E                            Obj0A_Display:				; XREF: Obj0A_Index
0001485E 6100                       		bsr.s	Obj0A_ShowNumber
00014860 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014866 4EB9 0000 B058             		jsr	AnimateSprite
0001486C 4EFA 9794                  		jmp	DisplaySprite
00014870                            ; ===========================================================================
00014870                            
00014870                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014870 4EFA 97CC                  		jmp	DeleteObject
00014874                            ; ===========================================================================
00014874                            
00014874                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014874 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001487A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001487C 5368 0038                  		subq.w	#1,$38(a0)
00014880 6600                       		bne.s	Obj0A_Display2
00014882 117C 000E 0024             		move.b	#$E,$24(a0)
00014888 5E28 001C                  		addq.b	#7,$1C(a0)
0001488C 60D0                       		bra.s	Obj0A_Display
0001488E                            ; ===========================================================================
0001488E                            
0001488E                            Obj0A_Display2:
0001488E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014894 4EB9 0000 B058             		jsr	AnimateSprite
0001489A 4A28 0001                  		tst.b	1(a0)
0001489E 6A00                       		bpl.s	Obj0A_Delete3
000148A0 4EFA 9760                  		jmp	DisplaySprite
000148A4                            ; ===========================================================================
000148A4                            
000148A4                            Obj0A_Delete3:
000148A4 4EFA 9798                  		jmp	DeleteObject
000148A8                            ; ===========================================================================
000148A8                            
000148A8                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148A8 4A68 0038                  		tst.w	$38(a0)
000148AC 6700                       		beq.s	locret_13E1A
000148AE 5368 0038                  		subq.w	#1,$38(a0)
000148B2 6600                       		bne.s	locret_13E1A
000148B4 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148BA 6400                       		bcc.s	locret_13E1A
000148BC 317C 000F 0038             		move.w	#$F,$38(a0)
000148C2 4268 0012                  		clr.w	$12(a0)
000148C6 117C 0080 0001             		move.b	#$80,1(a0)
000148CC 3028 0008                  		move.w	8(a0),d0
000148D0 9078 F700                  		sub.w	($FFFFF700).w,d0
000148D4 0640 0080                  		addi.w	#$80,d0
000148D8 3140 0008                  		move.w	d0,8(a0)
000148DC 3028 000C                  		move.w	$C(a0),d0
000148E0 9078 F704                  		sub.w	($FFFFF704).w,d0
000148E4 0640 0080                  		addi.w	#$80,d0
000148E8 3140 000A                  		move.w	d0,$A(a0)
000148EC 117C 000C 0024             		move.b	#$C,$24(a0)
000148F2                            
000148F2                            locret_13E1A:
000148F2 4E75                       		rts	
000148F4                            ; ===========================================================================
000148F4                            Obj0A_WobbleData:
000148F4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014905 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014916 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014927 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014937 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014944 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014951 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001495E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001496B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014974                            ; ===========================================================================
00014974                            
00014974                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014974 4A68 002C                  		tst.w	$2C(a0)
00014978 6600 0000                  		bne.w	loc_13F86
0001497C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014982 6400 0000                  		bcc.w	locret_1408C
00014986 0838 0006 D022             		btst	#6,($FFFFD022).w
0001498C 6700 0000                  		beq.w	locret_1408C
00014990 5368 0038                  		subq.w	#1,$38(a0)
00014994 6A00 0000                  		bpl.w	loc_13FAC
00014998 317C 003B 0038             		move.w	#59,$38(a0)
0001499E 317C 0001 0036             		move.w	#1,$36(a0)
000149A4 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000149AA 0240 0001                  		andi.w	#1,d0
000149AE 1140 0034                  		move.b	d0,$34(a0)
000149B2 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000149B6 0C40 0019                  		cmpi.w	#$19,d0
000149BA 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000149BC 0C40 0014                  		cmpi.w	#$14,d0
000149C0 6700                       		beq.s	Obj0A_WarnSound
000149C2 0C40 000F                  		cmpi.w	#$F,d0
000149C6 6700                       		beq.s	Obj0A_WarnSound
000149C8 0C40 000C                  		cmpi.w	#$C,d0
000149CC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000149CE 6600                       		bne.s	loc_13F02
000149D0 303C 0092                  		move.w	#$92,d0
000149D4 4EB9 0000 1594             		jsr	(PlaySound).l	; play countdown music
000149DA                            
000149DA                            loc_13F02:
000149DA 5328 0032                  		subq.b	#1,$32(a0)
000149DE 6A00                       		bpl.s	Obj0A_ReduceAir
000149E0 1168 0033 0032             		move.b	$33(a0),$32(a0)
000149E6 08E8 0007 0036             		bset	#7,$36(a0)
000149EC 6000                       		bra.s	Obj0A_ReduceAir
000149EE                            ; ===========================================================================
000149EE                            
000149EE                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000149EE 303C 00C2                  		move.w	#$C2,d0
000149F2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000149F8                            
000149F8                            Obj0A_ReduceAir:
000149F8 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000149FC 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014A00 6100 0000                  		bsr.w	ResumeMusic
00014A04 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014A0A 303C 00B2                  		move.w	#$B2,d0
00014A0E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A14 117C 000A 0034             		move.b	#$A,$34(a0)
00014A1A 317C 0001 0036             		move.w	#1,$36(a0)
00014A20 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A26 2F08                       		move.l	a0,-(sp)
00014A28 41F8 D000                  		lea	($FFFFD000).w,a0
00014A2C 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A30 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A36 08E8 0001 0022             		bset	#1,$22(a0)
00014A3C 08E8 0007 0002             		bset	#7,2(a0)
00014A42 317C 0000 0012             		move.w	#0,$12(a0)
00014A48 317C 0000 0010             		move.w	#0,$10(a0)
00014A4E 317C 0000 0014             		move.w	#0,$14(a0)
00014A54 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014A5A 205F                       		movea.l	(sp)+,a0
00014A5C 4E75                       		rts	
00014A5E                            ; ===========================================================================
00014A5E                            
00014A5E                            loc_13F86:
00014A5E 5368 002C                  		subq.w	#1,$2C(a0)
00014A62 6600                       		bne.s	loc_13F94
00014A64 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014A6A 4E75                       		rts	
00014A6C                            ; ===========================================================================
00014A6C                            
00014A6C                            loc_13F94:
00014A6C 2F08                       		move.l	a0,-(sp)
00014A6E 41F8 D000                  		lea	($FFFFD000).w,a0
00014A72 4EBA 9568                  		jsr	SpeedToPos
00014A76 0668 0010 0012             		addi.w	#$10,$12(a0)
00014A7C 205F                       		movea.l	(sp)+,a0
00014A7E 6000                       		bra.s	loc_13FAC
00014A80                            ; ===========================================================================
00014A80                            
00014A80                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014A80 6000                       		bra.s	Obj0A_MakeItem
00014A82                            ; ===========================================================================
00014A82                            
00014A82                            loc_13FAC:
00014A82 4A68 0036                  		tst.w	$36(a0)
00014A86 6700 0000                  		beq.w	locret_1408C
00014A8A 5368 003A                  		subq.w	#1,$3A(a0)
00014A8E 6A00 0000                  		bpl.w	locret_1408C
00014A92                            
00014A92                            Obj0A_MakeItem:
00014A92 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014A98 0240 000F                  		andi.w	#$F,d0
00014A9C 3140 003A                  		move.w	d0,$3A(a0)
00014AA0 4EBA 99E6                  		jsr	SingleObjLoad
00014AA4 6600 0000                  		bne.w	locret_1408C
00014AA8 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014AAC 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014AB2 7006                       		moveq	#6,d0
00014AB4 0838 0000 D022             		btst	#0,($FFFFD022).w
00014ABA 6700                       		beq.s	loc_13FF2
00014ABC 4440                       		neg.w	d0
00014ABE 137C 0040 0026             		move.b	#$40,$26(a1)
00014AC4                            
00014AC4                            loc_13FF2:
00014AC4 D169 0008                  		add.w	d0,8(a1)
00014AC8 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014ACE 137C 0006 0028             		move.b	#6,$28(a1)
00014AD4 4A68 002C                  		tst.w	$2C(a0)
00014AD8 6700 0000                  		beq.w	loc_1403E
00014ADC 0268 0007 003A             		andi.w	#7,$3A(a0)
00014AE2 0668 0000 003A             		addi.w	#0,$3A(a0)
00014AE8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014AEC 0440 000C                  		subi.w	#$C,d0
00014AF0 3340 000C                  		move.w	d0,$C(a1)
00014AF4 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014AFA 1340 0026                  		move.b	d0,$26(a1)
00014AFE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014B02 0200 0003                  		andi.b	#3,d0
00014B06 6600                       		bne.s	loc_14082
00014B08 137C 000E 0028             		move.b	#$E,$28(a1)
00014B0E 6000                       		bra.s	loc_14082
00014B10                            ; ===========================================================================
00014B10                            
00014B10                            loc_1403E:
00014B10 0828 0007 0036             		btst	#7,$36(a0)
00014B16 6700                       		beq.s	loc_14082
00014B18 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B1C E24A                       		lsr.w	#1,d2
00014B1E 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014B24 0240 0003                  		andi.w	#3,d0
00014B28 6600                       		bne.s	loc_1406A
00014B2A 08E8 0006 0036             		bset	#6,$36(a0)
00014B30 6600                       		bne.s	loc_14082
00014B32 1342 0028                  		move.b	d2,$28(a1)
00014B36 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B3C                            
00014B3C                            loc_1406A:
00014B3C 4A28 0034                  		tst.b	$34(a0)
00014B40 6600                       		bne.s	loc_14082
00014B42 08E8 0006 0036             		bset	#6,$36(a0)
00014B48 6600                       		bne.s	loc_14082
00014B4A 1342 0028                  		move.b	d2,$28(a1)
00014B4E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B54                            
00014B54                            loc_14082:
00014B54 5328 0034                  		subq.b	#1,$34(a0)
00014B58 6A00                       		bpl.s	locret_1408C
00014B5A 4268 0036                  		clr.w	$36(a0)
00014B5E                            
00014B5E                            locret_1408C:
00014B5E 4E75                       		rts	
00014B60                            
00014B60                            ; ---------------------------------------------------------------------------
00014B60                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014B60                            ; ---------------------------------------------------------------------------
00014B60                            
00014B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B60                            
00014B60                            
00014B60                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014B60 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014B66                             
00014B66                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014B66                             
00014B66 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014B6A                             
00014B6A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014B70 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014B72 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014B78 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B7A                             
00014B7A                            Air_GetBgm2:
00014B7A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014B80 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014B82 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014B88 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B8A                             
00014B8A                            Air_GetBgm3:
00014B8A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014B90 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014B92 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014B98 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B9A                             
00014B9A                            Air_GetBgm4:
00014B9A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014BA0 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014BA2 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014BA8                             
00014BA8                            Air_PlayMusic:
00014BA8 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BAC                             
00014BAC                            loc_140A6:
00014BAC 4EB9 0000 1594             		jsr	(PlaySound).l
00014BB2                             
00014BB2                            ; NineKode ends here
00014BB2                            
00014BB2                            loc_140AC:
00014BB2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014BB8 4238 D372                  		clr.b	($FFFFD372).w
00014BBC 4E75                       		rts	
00014BBE                            ; End of function ResumeMusic
00014BBE                            
00014BBE                            ; ===========================================================================
00014BBE                            Ani_obj0A:
00014BBE                            	include "_anim\obj0A.asm"
00014BBE                            ; ---------------------------------------------------------------------------
00014BBE                            ; Animation script - countdown numbers and bubbles (LZ)
00014BBE                            ; ---------------------------------------------------------------------------
00014BBE 0000                       		dc.w byte_140D6-Ani_obj0A
00014BC0 0000                       		dc.w byte_140E0-Ani_obj0A
00014BC2 0000                       		dc.w byte_140EA-Ani_obj0A
00014BC4 0000                       		dc.w byte_140F4-Ani_obj0A
00014BC6 0000                       		dc.w byte_140FE-Ani_obj0A
00014BC8 0000                       		dc.w byte_14108-Ani_obj0A
00014BCA 0000                       		dc.w byte_14112-Ani_obj0A
00014BCC 0000                       		dc.w byte_14118-Ani_obj0A
00014BCE 0000                       		dc.w byte_14120-Ani_obj0A
00014BD0 0000                       		dc.w byte_14128-Ani_obj0A
00014BD2 0000                       		dc.w byte_14130-Ani_obj0A
00014BD4 0000                       		dc.w byte_14138-Ani_obj0A
00014BD6 0000                       		dc.w byte_14140-Ani_obj0A
00014BD8 0000                       		dc.w byte_14148-Ani_obj0A
00014BDA 0000                       		dc.w byte_1414A-Ani_obj0A
00014BDC 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014BE6 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014BF0 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014BFA 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014C04 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C0E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C18 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C1E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C26 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C2E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C36 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C3E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C46 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C4E 0EFC                       byte_14148:	dc.b $E, $FC
00014C50 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014C56                            		even
00014C56                            		even
00014C56                            
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            Map_obj0A:
00014C56                            	include "_maps\obj0A.asm"
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C56                            ; ---------------------------------------------------------------------------
00014C56 0000                       		dc.w byte_14152-Map_obj0A
00014C58 01                         byte_14152:	dc.b 1
00014C59 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014C5E                            		even
00014C5E                            		even
00014C5E                            
00014C5E                            ; ===========================================================================
00014C5E                            ; ---------------------------------------------------------------------------
00014C5E                            ; Object 38 - shield and invincibility stars
00014C5E                            ; ---------------------------------------------------------------------------
00014C5E                            
00014C5E                            Obj38:					; XREF: Obj_Index
00014C5E 7000                       		moveq	#0,d0
00014C60 1028 0024                  		move.b	$24(a0),d0
00014C64 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014C68 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014C6C                            ; ===========================================================================
00014C6C 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014C6E 0000                       		dc.w Obj38_Shield-Obj38_Index
00014C70 0000                       		dc.w Obj38_Stars-Obj38_Index
00014C72                            ; ===========================================================================
00014C72                            
00014C72                            Obj38_Main:				; XREF: Obj38_Index
00014C72 5428 0024                  		addq.b	#2,$24(a0)
00014C76 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014C7E 117C 0004 0001             		move.b	#4,1(a0)
00014C84 117C 0001 0018             		move.b	#1,$18(a0)
00014C8A 117C 0010 0019             		move.b	#$10,$19(a0)
00014C90 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014C94 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014C96 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014C9C 4E75                       		rts	
00014C9E                            ; ===========================================================================
00014C9E                            
00014C9E                            Obj38_DoStars:
00014C9E 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014CA2 317C 055C 0002             		move.w	#$55C,2(a0)
00014CA8 4E75                       		rts	
00014CAA                            ; ===========================================================================
00014CAA                            
00014CAA                            Obj38_Shield:				; XREF: Obj38_Index
00014CAA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CAE 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014CB0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014CB4 6700                       		beq.s	Obj38_Delete	; if not, branch
00014CB6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014CBC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014CC2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014CC8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014CCE 4EB9 0000 B058             		jsr	AnimateSprite
00014CD4 4EFA 932C                  		jmp	DisplaySprite
00014CD8                            ; ===========================================================================
00014CD8                            
00014CD8                            Obj38_RmvShield:
00014CD8 4E75                       		rts	
00014CDA                            ; ===========================================================================
00014CDA                            
00014CDA                            Obj38_Delete:
00014CDA 4EFA 9362                  		jmp	DeleteObject
00014CDE                            ; ===========================================================================
00014CDE                            
00014CDE                            Obj38_Stars:				; XREF: Obj38_Index
00014CDE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CE2 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014CE4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014CE8 1228 001C                  		move.b	$1C(a0),d1
00014CEC 5301                       		subq.b	#1,d1
00014CEE 6000                       		bra.s	Obj38_StarTrail
00014CF0                            ; ===========================================================================
00014CF0 E909                       		lsl.b	#4,d1
00014CF2 5801                       		addq.b	#4,d1
00014CF4 9001                       		sub.b	d1,d0
00014CF6 1228 0030                  		move.b	$30(a0),d1
00014CFA 9001                       		sub.b	d1,d0
00014CFC 5801                       		addq.b	#4,d1
00014CFE 0201 000F                  		andi.b	#$F,d1
00014D02 1141 0030                  		move.b	d1,$30(a0)
00014D06 6000                       		bra.s	Obj38_StarTrail2a
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014D08 E709                       		lsl.b	#3,d1
00014D0A 1401                       		move.b	d1,d2
00014D0C D201                       		add.b	d1,d1
00014D0E D202                       		add.b	d2,d1
00014D10 5801                       		addq.b	#4,d1
00014D12 9001                       		sub.b	d1,d0
00014D14 1228 0030                  		move.b	$30(a0),d1
00014D18 9001                       		sub.b	d1,d0
00014D1A 5801                       		addq.b	#4,d1
00014D1C 0C01 0018                  		cmpi.b	#$18,d1
00014D20 6500                       		bcs.s	Obj38_StarTrail2
00014D22 7200                       		moveq	#0,d1
00014D24                            
00014D24                            Obj38_StarTrail2:
00014D24 1141 0030                  		move.b	d1,$30(a0)
00014D28                            
00014D28                            Obj38_StarTrail2a:
00014D28 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D2C 43F1 0000                  		lea	(a1,d0.w),a1
00014D30 3159 0008                  		move.w	(a1)+,8(a0)
00014D34 3159 000C                  		move.w	(a1)+,$C(a0)
00014D38 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D3E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D44 4EB9 0000 B058             		jsr	AnimateSprite
00014D4A 4EFA 92B6                  		jmp	DisplaySprite
00014D4E                            ; ===========================================================================
00014D4E                            
00014D4E                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D4E 4EFA 92EE                  		jmp	DeleteObject
00014D52                            ; ===========================================================================
00014D52                            ; ---------------------------------------------------------------------------
00014D52                            ; Object 4A - special stage entry from beta
00014D52                            ; ---------------------------------------------------------------------------
00014D52                            
00014D52                            Obj4A:					; XREF: Obj_Index
00014D52 7000                       		moveq	#0,d0
00014D54 1028 0024                  		move.b	$24(a0),d0
00014D58 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014D5C 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014D60                            ; ===========================================================================
00014D60 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014D62 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014D64 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014D66                            ; ===========================================================================
00014D66                            
00014D66                            Obj4A_Main:				; XREF: Obj4A_Index
00014D66 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014D6A 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014D6C 4E75                       		rts	
00014D6E                            ; ===========================================================================
00014D6E                            
00014D6E                            Obj4A_Main2:
00014D6E 5428 0024                  		addq.b	#2,$24(a0)
00014D72 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014D7A 117C 0004 0001             		move.b	#4,1(a0)
00014D80 117C 0001 0018             		move.b	#1,$18(a0)
00014D86 117C 0038 0019             		move.b	#$38,$19(a0)
00014D8C 317C 0541 0002             		move.w	#$541,2(a0)
00014D92 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014D98                            
00014D98                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014D98 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014D9E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014DA4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014DAA 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014DB0 4EB9 0000 B058             		jsr	AnimateSprite
00014DB6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014DBC 6600                       		bne.s	Obj4A_Display
00014DBE 4A38 D000                  		tst.b	($FFFFD000).w
00014DC2 6700                       		beq.s	Obj4A_Display
00014DC4 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014DCA 303C 00A8                  		move.w	#$A8,d0
00014DCE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014DD4                            
00014DD4                            Obj4A_Display:
00014DD4 4EFA 922C                  		jmp	DisplaySprite
00014DD8                            ; ===========================================================================
00014DD8                            
00014DD8                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014DD8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014DDC 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014DDE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014DE4 4EFA 9258                  		jmp	DeleteObject
00014DE8                            ; ===========================================================================
00014DE8                            
00014DE8                            Obj4A_Wait:
00014DE8 4E75                       		rts	
00014DEA                            ; ===========================================================================
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            ; Object 08 - water splash (LZ)
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            
00014DEA                            Obj08:					; XREF: Obj_Index
00014DEA 7000                       		moveq	#0,d0
00014DEC 1028 0024                  		move.b	$24(a0),d0
00014DF0 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014DF4 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014DF8                            ; ===========================================================================
00014DF8 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014DFA 0000                       		dc.w Obj08_Display-Obj08_Index
00014DFC 0000                       		dc.w Obj08_Delete-Obj08_Index
00014DFE                            ; ===========================================================================
00014DFE                            
00014DFE                            Obj08_Main:				; XREF: Obj08_Index
00014DFE 5428 0024                  		addq.b	#2,$24(a0)
00014E02 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E0A 0028 0004 0001             		ori.b	#4,1(a0)
00014E10 117C 0001 0018             		move.b	#1,$18(a0)
00014E16 117C 0010 0019             		move.b	#$10,$19(a0)
00014E1C 317C 4259 0002             		move.w	#$4259,2(a0)
00014E22 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E28                            
00014E28                            Obj08_Display:				; XREF: Obj08_Index
00014E28 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E2E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E34 4EB9 0000 B058             		jsr	AnimateSprite
00014E3A 4EFA 91C6                  		jmp	DisplaySprite
00014E3E                            ; ===========================================================================
00014E3E                            
00014E3E                            Obj08_Delete:				; XREF: Obj08_Index
00014E3E 4EFA 91FE                  		jmp	DeleteObject	; delete when animation	is complete
00014E42                            ; ===========================================================================
00014E42                            Ani_obj38:
00014E42                            	include "_anim\obj38.asm"
00014E42                            ; ---------------------------------------------------------------------------
00014E42                            ; Animation script - shield and invincibility stars
00014E42                            ; ---------------------------------------------------------------------------
00014E42 0000                       		dc.w byte_14356-Ani_obj38
00014E44 0000                       		dc.w byte_1435E-Ani_obj38
00014E46 0000                       		dc.w byte_14364-Ani_obj38
00014E48 0000                       		dc.w byte_1437E-Ani_obj38
00014E4A 0000                       		dc.w byte_14398-Ani_obj38
00014E4C 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E54 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014E5A 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014E6B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014E74 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014E85 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014E8E 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014E9F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014EA8                            		even
00014EA8                            		even
00014EA8                            
00014EA8                            ; ---------------------------------------------------------------------------
00014EA8                            ; Sprite mappings - shield and invincibility stars
00014EA8                            ; ---------------------------------------------------------------------------
00014EA8                            Map_obj38:
00014EA8                            	include "_maps\obj38.asm"
00014EA8                            ; ---------------------------------------------------------------------------
00014EA8                            ; Sprite mappings - shield and invincibility stars
00014EA8                            ; ---------------------------------------------------------------------------
00014EA8 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EAC 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EB0 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014EB4 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014EB8 04                         byte_143C2:	dc.b 4
00014EB9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EBE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EC3 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014EC8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014ECD 04                         byte_143D7:	dc.b 4
00014ECE E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014ED3 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014ED8 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014EDD 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014EE2 04                         byte_143EC:	dc.b 4
00014EE3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014EE8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014EED 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EF2 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014EF7 04                         byte_14401:	dc.b 4
00014EF8 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EFD E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F02 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F07 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F0C 04                         byte_14416:	dc.b 4
00014F0D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F12 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F17 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F1C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F21 04                         byte_1442B:	dc.b 4
00014F22 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F27 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F2C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F31 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F36 04                         byte_14440:	dc.b 4
00014F37 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F3C E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F41 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F46 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F4C 00                         		even
00014F4C 00                         		even
00014F4C                            
00014F4C                            Ani_obj4A:
00014F4C                            	include "_anim\obj4A.asm"
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C                            ; Animation script - special stage entry effect from beta
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C 0000                       		dc.w byte_14458-Ani_obj4A
00014F4E 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014F62                            		even
00014F62                            		even
00014F62                            
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            ; Sprite mappings - special stage entry	from beta
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            Map_obj4A:
00014F62                            	include "_maps\obj4A.asm"
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            ; Sprite mappings - special stage entry	from beta
00014F62                            ; ---------------------------------------------------------------------------
00014F62 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014F66 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014F6A 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014F6E 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014F72 03                         byte_1447C:	dc.b 3
00014F73 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014F78 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014F7D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014F82 03                         byte_1448C:	dc.b 3
00014F83 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014F88 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014F8D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014F92 05                         byte_1449C:	dc.b 5
00014F93 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014F98 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014F9D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014FA2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014FA7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FAC 09                         byte_144B6:	dc.b 9
00014FAD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014FB2 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014FB7 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014FBC 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014FC1 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014FC6 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014FCB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014FD0 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014FD5 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014FDA 12                         byte_144E4:	dc.b $12
00014FDB 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014FE0 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014FE5 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014FEA 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014FEF 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014FF4 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014FF9 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014FFE F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015003 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015008 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001500D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015012 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015017 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001501C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015021 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015026 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001502B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015030 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015035 11                         byte_1453F:	dc.b $11
00015036 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001503B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015040 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015045 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001504A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001504F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015054 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015059 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001505E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015063 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015068 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001506D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015072 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015077 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001507C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015081 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015086 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001508B 09                         byte_14595:	dc.b 9
0001508C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015091 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015096 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001509B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000150A0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000150A5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150AA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150AF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000150B4 04                         		dc.b 4
000150B5 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000150BA                            		even
000150BA                            		even
000150BA                            
000150BA                            Ani_obj08:
000150BA                            	include "_anim\obj08.asm"
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            ; Animation script - water splash (LZ)
000150BA                            ; ---------------------------------------------------------------------------
000150BA 0000                       		dc.w byte_145C6-Ani_obj08
000150BC 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000150C2                            		even
000150C2                            		even
000150C2                            
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            ; Sprite mappings - water splash (LZ)
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            Map_obj08:
000150C2                            	include "_maps\obj08.asm"
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            ; Sprite mappings - water splash (LZ)
000150C2                            ; ---------------------------------------------------------------------------
000150C2 0000                       		dc.w byte_145D2-Map_obj08
000150C4 0000                       		dc.w byte_145DD-Map_obj08
000150C6 0000                       		dc.w byte_145E8-Map_obj08
000150C8 02                         byte_145D2:	dc.b 2
000150C9 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000150CE FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000150D3 02                         byte_145DD:	dc.b 2
000150D4 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000150D9 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000150DE 01                         byte_145E8:	dc.b 1
000150DF E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000150E4                            		even
000150E4                            		even
000150E4                            
000150E4                            ; ---------------------------------------------------------------------------
000150E4                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000150E4                            ; ---------------------------------------------------------------------------
000150E4                            
000150E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150E4                            
000150E4                            
000150E4                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000150E4 0828 0003 0022             		btst	#3,$22(a0)
000150EA 6700                       		beq.s	loc_14602
000150EC 7000                       		moveq	#0,d0
000150EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000150F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150F6 4E75                       		rts	
000150F8                            ; ===========================================================================
000150F8                            
000150F8                            loc_14602:
000150F8 7003                       		moveq	#3,d0
000150FA 11C0 F768                  		move.b	d0,($FFFFF768).w
000150FE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015102 1028 0026                  		move.b	$26(a0),d0
00015106 0600 0020                  		addi.b	#$20,d0
0001510A 6A00                       		bpl.s	loc_14624
0001510C 1028 0026                  		move.b	$26(a0),d0
00015110 6A00                       		bpl.s	loc_1461E
00015112 5300                       		subq.b	#1,d0
00015114                            
00015114                            loc_1461E:
00015114 0600 0020                  		addi.b	#$20,d0
00015118 6000                       		bra.s	loc_14630
0001511A                            ; ===========================================================================
0001511A                            
0001511A                            loc_14624:
0001511A 1028 0026                  		move.b	$26(a0),d0
0001511E 6A00                       		bpl.s	loc_1462C
00015120 5200                       		addq.b	#1,d0
00015122                            
00015122                            loc_1462C:
00015122 0600 001F                  		addi.b	#$1F,d0
00015126                            
00015126                            loc_14630:
00015126 0200 00C0                  		andi.b	#$C0,d0
0001512A 0C00 0040                  		cmpi.b	#$40,d0
0001512E 6700 0000                  		beq.w	Sonic_WalkVertL
00015132 0C00 0080                  		cmpi.b	#$80,d0
00015136 6700 0000                  		beq.w	Sonic_WalkCeiling
0001513A 0C00 00C0                  		cmpi.b	#$C0,d0
0001513E 6700 0000                  		beq.w	Sonic_WalkVertR
00015142 3428 000C                  		move.w	$C(a0),d2
00015146 3628 0008                  		move.w	8(a0),d3
0001514A 7000                       		moveq	#0,d0
0001514C 1028 0016                  		move.b	$16(a0),d0
00015150 4880                       		ext.w	d0
00015152 D440                       		add.w	d0,d2
00015154 1028 0017                  		move.b	$17(a0),d0
00015158 4880                       		ext.w	d0
0001515A D640                       		add.w	d0,d3
0001515C 49F8 F768                  		lea	($FFFFF768).w,a4
00015160 367C 0010                  		movea.w	#$10,a3
00015164 3C3C 0000                  		move.w	#0,d6
00015168 7A0D                       		moveq	#$D,d5
0001516A 6100 0000                  		bsr.w	FindFloor
0001516E 3F01                       		move.w	d1,-(sp)
00015170 3428 000C                  		move.w	$C(a0),d2
00015174 3628 0008                  		move.w	8(a0),d3
00015178 7000                       		moveq	#0,d0
0001517A 1028 0016                  		move.b	$16(a0),d0
0001517E 4880                       		ext.w	d0
00015180 D440                       		add.w	d0,d2
00015182 1028 0017                  		move.b	$17(a0),d0
00015186 4880                       		ext.w	d0
00015188 4440                       		neg.w	d0
0001518A D640                       		add.w	d0,d3
0001518C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015190 367C 0010                  		movea.w	#$10,a3
00015194 3C3C 0000                  		move.w	#0,d6
00015198 7A0D                       		moveq	#$D,d5
0001519A 6100 0000                  		bsr.w	FindFloor
0001519E 301F                       		move.w	(sp)+,d0
000151A0 6100 0000                  		bsr.w	Sonic_Angle
000151A4 4A41                       		tst.w	d1
000151A6 6700                       		beq.s	locret_146BE
000151A8 6A00                       		bpl.s	loc_146C0
000151AA 0C41 FFF2                  		cmpi.w	#-$E,d1
000151AE 6D00                       		blt.s	locret_146E6
000151B0 D368 000C                  		add.w	d1,$C(a0)
000151B4                            
000151B4                            locret_146BE:
000151B4 4E75                       		rts	
000151B6                            ; ===========================================================================
000151B6                            
000151B6                            loc_146C0:
000151B6 0C41 000E                  		cmpi.w	#$E,d1
000151BA 6E00                       		bgt.s	loc_146CC
000151BC                            
000151BC                            loc_146C6:
000151BC D368 000C                  		add.w	d1,$C(a0)
000151C0 4E75                       		rts	
000151C2                            ; ===========================================================================
000151C2                            
000151C2                            loc_146CC:
000151C2 4A28 0038                  		tst.b	$38(a0)
000151C6 66F4                       		bne.s	loc_146C6
000151C8 08E8 0001 0022             		bset	#1,$22(a0)
000151CE 08A8 0005 0022             		bclr	#5,$22(a0)
000151D4 117C 0001 001D             		move.b	#1,$1D(a0)
000151DA 4E75                       		rts	
000151DC                            ; ===========================================================================
000151DC                            
000151DC                            locret_146E6:
000151DC 4E75                       		rts	
000151DE                            ; End of function Sonic_AnglePos
000151DE                            
000151DE                            ; ===========================================================================
000151DE 2428 0008                  		move.l	8(a0),d2
000151E2 3028 0010                  		move.w	$10(a0),d0
000151E6 48C0                       		ext.l	d0
000151E8 E180                       		asl.l	#8,d0
000151EA 9480                       		sub.l	d0,d2
000151EC 2142 0008                  		move.l	d2,8(a0)
000151F0 303C 0038                  		move.w	#$38,d0
000151F4 48C0                       		ext.l	d0
000151F6 E180                       		asl.l	#8,d0
000151F8 9680                       		sub.l	d0,d3
000151FA 2143 000C                  		move.l	d3,$C(a0)
000151FE 4E75                       		rts	
00015200                            ; ===========================================================================
00015200                            
00015200                            locret_1470A:
00015200 4E75                       		rts	
00015202                            ; ===========================================================================
00015202 2628 000C                  		move.l	$C(a0),d3
00015206 3028 0012                  		move.w	$12(a0),d0
0001520A 0440 0038                  		subi.w	#$38,d0
0001520E 3140 0012                  		move.w	d0,$12(a0)
00015212 48C0                       		ext.l	d0
00015214 E180                       		asl.l	#8,d0
00015216 9680                       		sub.l	d0,d3
00015218 2143 000C                  		move.l	d3,$C(a0)
0001521C 4E75                       		rts	
0001521E 4E75                       		rts	
00015220                            ; ===========================================================================
00015220 2428 0008                  		move.l	8(a0),d2
00015224 2628 000C                  		move.l	$C(a0),d3
00015228 3028 0010                  		move.w	$10(a0),d0
0001522C 48C0                       		ext.l	d0
0001522E E180                       		asl.l	#8,d0
00015230 9480                       		sub.l	d0,d2
00015232 3028 0012                  		move.w	$12(a0),d0
00015236 48C0                       		ext.l	d0
00015238 E180                       		asl.l	#8,d0
0001523A 9680                       		sub.l	d0,d3
0001523C 2142 0008                  		move.l	d2,8(a0)
00015240 2143 000C                  		move.l	d3,$C(a0)
00015244 4E75                       		rts	
00015246                            
00015246                            ; ---------------------------------------------------------------------------
00015246                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015246                            ; ---------------------------------------------------------------------------
00015246                            
00015246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015246                            
00015246                            
00015246                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015246 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001524A B240                       		cmp.w	d0,d1
0001524C 6F00                       		ble.s	loc_1475E
0001524E 1438 F768                  		move.b	($FFFFF768).w,d2
00015252 3200                       		move.w	d0,d1
00015254                            
00015254                            loc_1475E:
00015254 0802 0000                  		btst	#0,d2
00015258 6600                       		bne.s	loc_1476A
0001525A 1142 0026                  		move.b	d2,$26(a0)
0001525E 4E75                       		rts	
00015260                            ; ===========================================================================
00015260                            
00015260                            loc_1476A:
00015260 1428 0026                  		move.b	$26(a0),d2
00015264 0602 0020                  		addi.b	#$20,d2
00015268 0202 00C0                  		andi.b	#$C0,d2
0001526C 1142 0026                  		move.b	d2,$26(a0)
00015270 4E75                       		rts	
00015272                            ; End of function Sonic_Angle
00015272                            
00015272                            ; ---------------------------------------------------------------------------
00015272                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015272                            ; ---------------------------------------------------------------------------
00015272                            
00015272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015272                            
00015272                            
00015272                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015272 3428 000C                  		move.w	$C(a0),d2
00015276 3628 0008                  		move.w	8(a0),d3
0001527A 7000                       		moveq	#0,d0
0001527C 1028 0017                  		move.b	$17(a0),d0
00015280 4880                       		ext.w	d0
00015282 4440                       		neg.w	d0
00015284 D440                       		add.w	d0,d2
00015286 1028 0016                  		move.b	$16(a0),d0
0001528A 4880                       		ext.w	d0
0001528C D640                       		add.w	d0,d3
0001528E 49F8 F768                  		lea	($FFFFF768).w,a4
00015292 367C 0010                  		movea.w	#$10,a3
00015296 3C3C 0000                  		move.w	#0,d6
0001529A 7A0D                       		moveq	#$D,d5
0001529C 6100 0000                  		bsr.w	FindWall
000152A0 3F01                       		move.w	d1,-(sp)
000152A2 3428 000C                  		move.w	$C(a0),d2
000152A6 3628 0008                  		move.w	8(a0),d3
000152AA 7000                       		moveq	#0,d0
000152AC 1028 0017                  		move.b	$17(a0),d0
000152B0 4880                       		ext.w	d0
000152B2 D440                       		add.w	d0,d2
000152B4 1028 0016                  		move.b	$16(a0),d0
000152B8 4880                       		ext.w	d0
000152BA D640                       		add.w	d0,d3
000152BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152C0 367C 0010                  		movea.w	#$10,a3
000152C4 3C3C 0000                  		move.w	#0,d6
000152C8 7A0D                       		moveq	#$D,d5
000152CA 6100 0000                  		bsr.w	FindWall
000152CE 301F                       		move.w	(sp)+,d0
000152D0 6100 FF74                  		bsr.w	Sonic_Angle
000152D4 4A41                       		tst.w	d1
000152D6 6700                       		beq.s	locret_147F0
000152D8 6A00                       		bpl.s	loc_147F2
000152DA 0C41 FFF2                  		cmpi.w	#-$E,d1
000152DE 6D00 FF20                  		blt.w	locret_1470A
000152E2 D368 0008                  		add.w	d1,8(a0)
000152E6                            
000152E6                            locret_147F0:
000152E6 4E75                       		rts	
000152E8                            ; ===========================================================================
000152E8                            
000152E8                            loc_147F2:
000152E8 0C41 000E                  		cmpi.w	#$E,d1
000152EC 6E00                       		bgt.s	loc_147FE
000152EE                            
000152EE                            loc_147F8:
000152EE D368 0008                  		add.w	d1,8(a0)
000152F2 4E75                       		rts	
000152F4                            ; ===========================================================================
000152F4                            
000152F4                            loc_147FE:
000152F4 4A28 0038                  		tst.b	$38(a0)
000152F8 66F4                       		bne.s	loc_147F8
000152FA 08E8 0001 0022             		bset	#1,$22(a0)
00015300 08A8 0005 0022             		bclr	#5,$22(a0)
00015306 117C 0001 001D             		move.b	#1,$1D(a0)
0001530C 4E75                       		rts	
0001530E                            ; End of function Sonic_WalkVertR
0001530E                            
0001530E                            ; ---------------------------------------------------------------------------
0001530E                            ; Subroutine allowing Sonic to walk upside-down
0001530E                            ; ---------------------------------------------------------------------------
0001530E                            
0001530E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001530E                            
0001530E                            
0001530E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001530E 3428 000C                  		move.w	$C(a0),d2
00015312 3628 0008                  		move.w	8(a0),d3
00015316 7000                       		moveq	#0,d0
00015318 1028 0016                  		move.b	$16(a0),d0
0001531C 4880                       		ext.w	d0
0001531E 9440                       		sub.w	d0,d2
00015320 0A42 000F                  		eori.w	#$F,d2
00015324 1028 0017                  		move.b	$17(a0),d0
00015328 4880                       		ext.w	d0
0001532A D640                       		add.w	d0,d3
0001532C 49F8 F768                  		lea	($FFFFF768).w,a4
00015330 367C FFF0                  		movea.w	#-$10,a3
00015334 3C3C 1000                  		move.w	#$1000,d6
00015338 7A0D                       		moveq	#$D,d5
0001533A 6100 0000                  		bsr.w	FindFloor
0001533E 3F01                       		move.w	d1,-(sp)
00015340 3428 000C                  		move.w	$C(a0),d2
00015344 3628 0008                  		move.w	8(a0),d3
00015348 7000                       		moveq	#0,d0
0001534A 1028 0016                  		move.b	$16(a0),d0
0001534E 4880                       		ext.w	d0
00015350 9440                       		sub.w	d0,d2
00015352 0A42 000F                  		eori.w	#$F,d2
00015356 1028 0017                  		move.b	$17(a0),d0
0001535A 4880                       		ext.w	d0
0001535C 9640                       		sub.w	d0,d3
0001535E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015362 367C FFF0                  		movea.w	#-$10,a3
00015366 3C3C 1000                  		move.w	#$1000,d6
0001536A 7A0D                       		moveq	#$D,d5
0001536C 6100 0000                  		bsr.w	FindFloor
00015370 301F                       		move.w	(sp)+,d0
00015372 6100 FED2                  		bsr.w	Sonic_Angle
00015376 4A41                       		tst.w	d1
00015378 6700                       		beq.s	locret_14892
0001537A 6A00                       		bpl.s	loc_14894
0001537C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015380 6D00 FE5A                  		blt.w	locret_146E6
00015384 9368 000C                  		sub.w	d1,$C(a0)
00015388                            
00015388                            locret_14892:
00015388 4E75                       		rts	
0001538A                            ; ===========================================================================
0001538A                            
0001538A                            loc_14894:
0001538A 0C41 000E                  		cmpi.w	#$E,d1
0001538E 6E00                       		bgt.s	loc_148A0
00015390                            
00015390                            loc_1489A:
00015390 9368 000C                  		sub.w	d1,$C(a0)
00015394 4E75                       		rts	
00015396                            ; ===========================================================================
00015396                            
00015396                            loc_148A0:
00015396 4A28 0038                  		tst.b	$38(a0)
0001539A 66F4                       		bne.s	loc_1489A
0001539C 08E8 0001 0022             		bset	#1,$22(a0)
000153A2 08A8 0005 0022             		bclr	#5,$22(a0)
000153A8 117C 0001 001D             		move.b	#1,$1D(a0)
000153AE 4E75                       		rts	
000153B0                            ; End of function Sonic_WalkCeiling
000153B0                            
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            
000153B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153B0                            
000153B0                            
000153B0                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153B0 3428 000C                  		move.w	$C(a0),d2
000153B4 3628 0008                  		move.w	8(a0),d3
000153B8 7000                       		moveq	#0,d0
000153BA 1028 0017                  		move.b	$17(a0),d0
000153BE 4880                       		ext.w	d0
000153C0 9440                       		sub.w	d0,d2
000153C2 1028 0016                  		move.b	$16(a0),d0
000153C6 4880                       		ext.w	d0
000153C8 9640                       		sub.w	d0,d3
000153CA 0A43 000F                  		eori.w	#$F,d3
000153CE 49F8 F768                  		lea	($FFFFF768).w,a4
000153D2 367C FFF0                  		movea.w	#-$10,a3
000153D6 3C3C 0800                  		move.w	#$800,d6
000153DA 7A0D                       		moveq	#$D,d5
000153DC 6100 0000                  		bsr.w	FindWall
000153E0 3F01                       		move.w	d1,-(sp)
000153E2 3428 000C                  		move.w	$C(a0),d2
000153E6 3628 0008                  		move.w	8(a0),d3
000153EA 7000                       		moveq	#0,d0
000153EC 1028 0017                  		move.b	$17(a0),d0
000153F0 4880                       		ext.w	d0
000153F2 D440                       		add.w	d0,d2
000153F4 1028 0016                  		move.b	$16(a0),d0
000153F8 4880                       		ext.w	d0
000153FA 9640                       		sub.w	d0,d3
000153FC 0A43 000F                  		eori.w	#$F,d3
00015400 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015404 367C FFF0                  		movea.w	#-$10,a3
00015408 3C3C 0800                  		move.w	#$800,d6
0001540C 7A0D                       		moveq	#$D,d5
0001540E 6100 0000                  		bsr.w	FindWall
00015412 301F                       		move.w	(sp)+,d0
00015414 6100 FE30                  		bsr.w	Sonic_Angle
00015418 4A41                       		tst.w	d1
0001541A 6700                       		beq.s	locret_14934
0001541C 6A00                       		bpl.s	loc_14936
0001541E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015422 6D00 FDDC                  		blt.w	locret_1470A
00015426 9368 0008                  		sub.w	d1,8(a0)
0001542A                            
0001542A                            locret_14934:
0001542A 4E75                       		rts	
0001542C                            ; ===========================================================================
0001542C                            
0001542C                            loc_14936:
0001542C 0C41 000E                  		cmpi.w	#$E,d1
00015430 6E00                       		bgt.s	loc_14942
00015432                            
00015432                            loc_1493C:
00015432 9368 0008                  		sub.w	d1,8(a0)
00015436 4E75                       		rts	
00015438                            ; ===========================================================================
00015438                            
00015438                            loc_14942:
00015438 4A28 0038                  		tst.b	$38(a0)
0001543C 66F4                       		bne.s	loc_1493C
0001543E 08E8 0001 0022             		bset	#1,$22(a0)
00015444 08A8 0005 0022             		bclr	#5,$22(a0)
0001544A 117C 0001 001D             		move.b	#1,$1D(a0)
00015450 4E75                       		rts	
00015452                            ; End of function Sonic_WalkVertL
00015452                            
00015452                            ; ---------------------------------------------------------------------------
00015452                            ; Subroutine to	find which tile	the object is standing on
00015452                            ; ---------------------------------------------------------------------------
00015452                            
00015452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015452                            
00015452                            
00015452                            Floor_ChkTile:				; XREF: FindFloor; et al
00015452 3002                       		move.w	d2,d0
00015454 E248                       		lsr.w	#1,d0
00015456 0240 0380                  		andi.w	#$380,d0
0001545A 3203                       		move.w	d3,d1
0001545C E049                       		lsr.w	#8,d1
0001545E 0241 007F                  		andi.w	#$7F,d1
00015462 D041                       		add.w	d1,d0
00015464 72FF                       		moveq	#-1,d1
00015466 43F8 A400                  		lea	($FFFFA400).w,a1
0001546A 1231 0000                  		move.b	(a1,d0.w),d1
0001546E 6700                       		beq.s	loc_14996
00015470 6B00                       		bmi.s	loc_1499A
00015472 5301                       		subq.b	#1,d1
00015474 4881                       		ext.w	d1
00015476 EE59                       		ror.w	#7,d1
00015478 3002                       		move.w	d2,d0
0001547A D040                       		add.w	d0,d0
0001547C 0240 01E0                  		andi.w	#$1E0,d0
00015480 D240                       		add.w	d0,d1
00015482 3003                       		move.w	d3,d0
00015484 E648                       		lsr.w	#3,d0
00015486 0240 001E                  		andi.w	#$1E,d0
0001548A D240                       		add.w	d0,d1
0001548C                            
0001548C                            loc_14996:
0001548C 2241                       		movea.l	d1,a1
0001548E 4E75                       		rts	
00015490                            ; ===========================================================================
00015490                            
00015490                            loc_1499A:
00015490 0241 007F                  		andi.w	#$7F,d1
00015494 0828 0006 0001             		btst	#6,1(a0)
0001549A 6700                       		beq.s	loc_149B2
0001549C 5241                       		addq.w	#1,d1
0001549E 0C41 0029                  		cmpi.w	#$29,d1
000154A2 6600                       		bne.s	loc_149B2
000154A4 323C 0051                  		move.w	#$51,d1
000154A8                            
000154A8                            loc_149B2:
000154A8 5301                       		subq.b	#1,d1
000154AA EE59                       		ror.w	#7,d1
000154AC 3002                       		move.w	d2,d0
000154AE D040                       		add.w	d0,d0
000154B0 0240 01E0                  		andi.w	#$1E0,d0
000154B4 D240                       		add.w	d0,d1
000154B6 3003                       		move.w	d3,d0
000154B8 E648                       		lsr.w	#3,d0
000154BA 0240 001E                  		andi.w	#$1E,d0
000154BE D240                       		add.w	d0,d1
000154C0 2241                       		movea.l	d1,a1
000154C2 4E75                       		rts	
000154C4                            ; End of function Floor_ChkTile
000154C4                            
000154C4                            
000154C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154C4                            
000154C4                            
000154C4                            FindFloor:				; XREF: Sonic_AnglePos; et al
000154C4 618C                       		bsr.s	Floor_ChkTile
000154C6 3011                       		move.w	(a1),d0
000154C8 3800                       		move.w	d0,d4
000154CA 0240 07FF                  		andi.w	#$7FF,d0
000154CE 6700                       		beq.s	loc_149DE
000154D0 0B04                       		btst	d5,d4
000154D2 6600                       		bne.s	loc_149EC
000154D4                            
000154D4                            loc_149DE:
000154D4 D44B                       		add.w	a3,d2
000154D6 6100 0000                  		bsr.w	FindFloor2
000154DA 944B                       		sub.w	a3,d2
000154DC 0641 0010                  		addi.w	#$10,d1
000154E0 4E75                       		rts	
000154E2                            ; ===========================================================================
000154E2                            
000154E2                            loc_149EC:
000154E2 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000154E6 1032 0000                  		move.b	(a2,d0.w),d0
000154EA 0240 00FF                  		andi.w	#$FF,d0
000154EE 67E4                       		beq.s	loc_149DE
000154F0 45F9 0000 0000             		lea	(AngleMap).l,a2
000154F6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154FA E948                       		lsl.w	#4,d0
000154FC 3203                       		move.w	d3,d1
000154FE 0804 000B                  		btst	#$B,d4
00015502 6700                       		beq.s	loc_14A12
00015504 4641                       		not.w	d1
00015506 4414                       		neg.b	(a4)
00015508                            
00015508                            loc_14A12:
00015508 0804 000C                  		btst	#$C,d4
0001550C 6700                       		beq.s	loc_14A22
0001550E 0614 0040                  		addi.b	#$40,(a4)
00015512 4414                       		neg.b	(a4)
00015514 0414 0040                  		subi.b	#$40,(a4)
00015518                            
00015518                            loc_14A22:
00015518 0241 000F                  		andi.w	#$F,d1
0001551C D240                       		add.w	d0,d1
0001551E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015524 1032 1000                  		move.b	(a2,d1.w),d0
00015528 4880                       		ext.w	d0
0001552A BD44                       		eor.w	d6,d4
0001552C 0804 000C                  		btst	#$C,d4
00015530 6700                       		beq.s	loc_14A3E
00015532 4440                       		neg.w	d0
00015534                            
00015534                            loc_14A3E:
00015534 4A40                       		tst.w	d0
00015536 679C                       		beq.s	loc_149DE
00015538 6B00                       		bmi.s	loc_14A5A
0001553A 0C00 0010                  		cmpi.b	#$10,d0
0001553E 6700                       		beq.s	loc_14A66
00015540 3202                       		move.w	d2,d1
00015542 0241 000F                  		andi.w	#$F,d1
00015546 D041                       		add.w	d1,d0
00015548 323C 000F                  		move.w	#$F,d1
0001554C 9240                       		sub.w	d0,d1
0001554E 4E75                       		rts	
00015550                            ; ===========================================================================
00015550                            
00015550                            loc_14A5A:
00015550 3202                       		move.w	d2,d1
00015552 0241 000F                  		andi.w	#$F,d1
00015556 D041                       		add.w	d1,d0
00015558 6A00 FF7A                  		bpl.w	loc_149DE
0001555C                            
0001555C                            loc_14A66:
0001555C 944B                       		sub.w	a3,d2
0001555E 6100 0000                  		bsr.w	FindFloor2
00015562 D44B                       		add.w	a3,d2
00015564 0441 0010                  		subi.w	#$10,d1
00015568 4E75                       		rts	
0001556A                            ; End of function FindFloor
0001556A                            
0001556A                            
0001556A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001556A                            
0001556A                            
0001556A                            FindFloor2:				; XREF: FindFloor
0001556A 6100 FEE6                  		bsr.w	Floor_ChkTile
0001556E 3011                       		move.w	(a1),d0
00015570 3800                       		move.w	d0,d4
00015572 0240 07FF                  		andi.w	#$7FF,d0
00015576 6700                       		beq.s	loc_14A86
00015578 0B04                       		btst	d5,d4
0001557A 6600                       		bne.s	loc_14A94
0001557C                            
0001557C                            loc_14A86:
0001557C 323C 000F                  		move.w	#$F,d1
00015580 3002                       		move.w	d2,d0
00015582 0240 000F                  		andi.w	#$F,d0
00015586 9240                       		sub.w	d0,d1
00015588 4E75                       		rts	
0001558A                            ; ===========================================================================
0001558A                            
0001558A                            loc_14A94:
0001558A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001558E 1032 0000                  		move.b	(a2,d0.w),d0
00015592 0240 00FF                  		andi.w	#$FF,d0
00015596 67E4                       		beq.s	loc_14A86
00015598 45F9 0000 0000             		lea	(AngleMap).l,a2
0001559E 18B2 0000                  		move.b	(a2,d0.w),(a4)
000155A2 E948                       		lsl.w	#4,d0
000155A4 3203                       		move.w	d3,d1
000155A6 0804 000B                  		btst	#$B,d4
000155AA 6700                       		beq.s	loc_14ABA
000155AC 4641                       		not.w	d1
000155AE 4414                       		neg.b	(a4)
000155B0                            
000155B0                            loc_14ABA:
000155B0 0804 000C                  		btst	#$C,d4
000155B4 6700                       		beq.s	loc_14ACA
000155B6 0614 0040                  		addi.b	#$40,(a4)
000155BA 4414                       		neg.b	(a4)
000155BC 0414 0040                  		subi.b	#$40,(a4)
000155C0                            
000155C0                            loc_14ACA:
000155C0 0241 000F                  		andi.w	#$F,d1
000155C4 D240                       		add.w	d0,d1
000155C6 45F9 0000 0000             		lea	(CollArray1).l,a2
000155CC 1032 1000                  		move.b	(a2,d1.w),d0
000155D0 4880                       		ext.w	d0
000155D2 BD44                       		eor.w	d6,d4
000155D4 0804 000C                  		btst	#$C,d4
000155D8 6700                       		beq.s	loc_14AE6
000155DA 4440                       		neg.w	d0
000155DC                            
000155DC                            loc_14AE6:
000155DC 4A40                       		tst.w	d0
000155DE 679C                       		beq.s	loc_14A86
000155E0 6B00                       		bmi.s	loc_14AFC
000155E2 3202                       		move.w	d2,d1
000155E4 0241 000F                  		andi.w	#$F,d1
000155E8 D041                       		add.w	d1,d0
000155EA 323C 000F                  		move.w	#$F,d1
000155EE 9240                       		sub.w	d0,d1
000155F0 4E75                       		rts	
000155F2                            ; ===========================================================================
000155F2                            
000155F2                            loc_14AFC:
000155F2 3202                       		move.w	d2,d1
000155F4 0241 000F                  		andi.w	#$F,d1
000155F8 D041                       		add.w	d1,d0
000155FA 6A00 FF80                  		bpl.w	loc_14A86
000155FE 4641                       		not.w	d1
00015600 4E75                       		rts	
00015602                            ; End of function FindFloor2
00015602                            
00015602                            
00015602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015602                            
00015602                            
00015602                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015602 6100 FE4E                  		bsr.w	Floor_ChkTile
00015606 3011                       		move.w	(a1),d0
00015608 3800                       		move.w	d0,d4
0001560A 0240 07FF                  		andi.w	#$7FF,d0
0001560E 6700                       		beq.s	loc_14B1E
00015610 0B04                       		btst	d5,d4
00015612 6600                       		bne.s	loc_14B2C
00015614                            
00015614                            loc_14B1E:
00015614 D64B                       		add.w	a3,d3
00015616 6100 0000                  		bsr.w	FindWall2
0001561A 964B                       		sub.w	a3,d3
0001561C 0641 0010                  		addi.w	#$10,d1
00015620 4E75                       		rts	
00015622                            ; ===========================================================================
00015622                            
00015622                            loc_14B2C:
00015622 2478 F796                  		movea.l	($FFFFF796).w,a2
00015626 1032 0000                  		move.b	(a2,d0.w),d0
0001562A 0240 00FF                  		andi.w	#$FF,d0
0001562E 67E4                       		beq.s	loc_14B1E
00015630 45F9 0000 0000             		lea	(AngleMap).l,a2
00015636 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001563A E948                       		lsl.w	#4,d0
0001563C 3202                       		move.w	d2,d1
0001563E 0804 000C                  		btst	#$C,d4
00015642 6700                       		beq.s	loc_14B5A
00015644 4641                       		not.w	d1
00015646 0614 0040                  		addi.b	#$40,(a4)
0001564A 4414                       		neg.b	(a4)
0001564C 0414 0040                  		subi.b	#$40,(a4)
00015650                            
00015650                            loc_14B5A:
00015650 0804 000B                  		btst	#$B,d4
00015654 6700                       		beq.s	loc_14B62
00015656 4414                       		neg.b	(a4)
00015658                            
00015658                            loc_14B62:
00015658 0241 000F                  		andi.w	#$F,d1
0001565C D240                       		add.w	d0,d1
0001565E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015664 1032 1000                  		move.b	(a2,d1.w),d0
00015668 4880                       		ext.w	d0
0001566A BD44                       		eor.w	d6,d4
0001566C 0804 000B                  		btst	#$B,d4
00015670 6700                       		beq.s	loc_14B7E
00015672 4440                       		neg.w	d0
00015674                            
00015674                            loc_14B7E:
00015674 4A40                       		tst.w	d0
00015676 679C                       		beq.s	loc_14B1E
00015678 6B00                       		bmi.s	loc_14B9A
0001567A 0C00 0010                  		cmpi.b	#$10,d0
0001567E 6700                       		beq.s	loc_14BA6
00015680 3203                       		move.w	d3,d1
00015682 0241 000F                  		andi.w	#$F,d1
00015686 D041                       		add.w	d1,d0
00015688 323C 000F                  		move.w	#$F,d1
0001568C 9240                       		sub.w	d0,d1
0001568E 4E75                       		rts	
00015690                            ; ===========================================================================
00015690                            
00015690                            loc_14B9A:
00015690 3203                       		move.w	d3,d1
00015692 0241 000F                  		andi.w	#$F,d1
00015696 D041                       		add.w	d1,d0
00015698 6A00 FF7A                  		bpl.w	loc_14B1E
0001569C                            
0001569C                            loc_14BA6:
0001569C 964B                       		sub.w	a3,d3
0001569E 6100 0000                  		bsr.w	FindWall2
000156A2 D64B                       		add.w	a3,d3
000156A4 0441 0010                  		subi.w	#$10,d1
000156A8 4E75                       		rts	
000156AA                            ; End of function FindWall
000156AA                            
000156AA                            
000156AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156AA                            
000156AA                            
000156AA                            FindWall2:				; XREF: FindWall
000156AA 6100 FDA6                  		bsr.w	Floor_ChkTile
000156AE 3011                       		move.w	(a1),d0
000156B0 3800                       		move.w	d0,d4
000156B2 0240 07FF                  		andi.w	#$7FF,d0
000156B6 6700                       		beq.s	loc_14BC6
000156B8 0B04                       		btst	d5,d4
000156BA 6600                       		bne.s	loc_14BD4
000156BC                            
000156BC                            loc_14BC6:
000156BC 323C 000F                  		move.w	#$F,d1
000156C0 3003                       		move.w	d3,d0
000156C2 0240 000F                  		andi.w	#$F,d0
000156C6 9240                       		sub.w	d0,d1
000156C8 4E75                       		rts	
000156CA                            ; ===========================================================================
000156CA                            
000156CA                            loc_14BD4:
000156CA 2478 F796                  		movea.l	($FFFFF796).w,a2
000156CE 1032 0000                  		move.b	(a2,d0.w),d0
000156D2 0240 00FF                  		andi.w	#$FF,d0
000156D6 67E4                       		beq.s	loc_14BC6
000156D8 45F9 0000 0000             		lea	(AngleMap).l,a2
000156DE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000156E2 E948                       		lsl.w	#4,d0
000156E4 3202                       		move.w	d2,d1
000156E6 0804 000C                  		btst	#$C,d4
000156EA 6700                       		beq.s	loc_14C02
000156EC 4641                       		not.w	d1
000156EE 0614 0040                  		addi.b	#$40,(a4)
000156F2 4414                       		neg.b	(a4)
000156F4 0414 0040                  		subi.b	#$40,(a4)
000156F8                            
000156F8                            loc_14C02:
000156F8 0804 000B                  		btst	#$B,d4
000156FC 6700                       		beq.s	loc_14C0A
000156FE 4414                       		neg.b	(a4)
00015700                            
00015700                            loc_14C0A:
00015700 0241 000F                  		andi.w	#$F,d1
00015704 D240                       		add.w	d0,d1
00015706 45F9 0000 0000             		lea	(CollArray2).l,a2
0001570C 1032 1000                  		move.b	(a2,d1.w),d0
00015710 4880                       		ext.w	d0
00015712 BD44                       		eor.w	d6,d4
00015714 0804 000B                  		btst	#$B,d4
00015718 6700                       		beq.s	loc_14C26
0001571A 4440                       		neg.w	d0
0001571C                            
0001571C                            loc_14C26:
0001571C 4A40                       		tst.w	d0
0001571E 679C                       		beq.s	loc_14BC6
00015720 6B00                       		bmi.s	loc_14C3C
00015722 3203                       		move.w	d3,d1
00015724 0241 000F                  		andi.w	#$F,d1
00015728 D041                       		add.w	d1,d0
0001572A 323C 000F                  		move.w	#$F,d1
0001572E 9240                       		sub.w	d0,d1
00015730 4E75                       		rts	
00015732                            ; ===========================================================================
00015732                            
00015732                            loc_14C3C:
00015732 3203                       		move.w	d3,d1
00015734 0241 000F                  		andi.w	#$F,d1
00015738 D041                       		add.w	d1,d0
0001573A 6A00 FF80                  		bpl.w	loc_14BC6
0001573E 4641                       		not.w	d1
00015740 4E75                       		rts	
00015742                            ; End of function FindWall2
00015742                            
00015742                            ; ---------------------------------------------------------------------------
00015742                            ; Unused floor/wall subroutine - logs something	to do with collision
00015742                            ; ---------------------------------------------------------------------------
00015742                            
00015742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015742                            
00015742                            
00015742                            FloorLog_Unk:				; XREF: Level
00015742 4E75                       		rts	
00015744                            
00015744 43F9 0000 0000             		lea	(CollArray1).l,a1
0001574A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015750 363C 00FF                  		move.w	#$FF,d3
00015754                            
00015754                            loc_14C5E:
00015754 7A10                       		moveq	#$10,d5
00015756 343C 000F                  		move.w	#$F,d2
0001575A                            
0001575A                            loc_14C64:
0001575A 7800                       		moveq	#0,d4
0001575C 323C 000F                  		move.w	#$F,d1
00015760                            
00015760                            loc_14C6A:
00015760 3019                       		move.w	(a1)+,d0
00015762 EAA8                       		lsr.l	d5,d0
00015764 D944                       		addx.w	d4,d4
00015766 51C9 FFF8                  		dbf	d1,loc_14C6A
0001576A                            
0001576A 34C4                       		move.w	d4,(a2)+
0001576C 92FC 0020                  		suba.w	#$20,a1
00015770 5345                       		subq.w	#1,d5
00015772 51CA FFE6                  		dbf	d2,loc_14C64
00015776                            
00015776 D2FC 0020                  		adda.w	#$20,a1
0001577A 51CB FFD8                  		dbf	d3,loc_14C5E
0001577E                            
0001577E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015784 45F9 0000 0000             		lea	(CollArray2).l,a2
0001578A 6100                       		bsr.s	FloorLog_Unk2
0001578C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015792 45F9 0000 0000             		lea	(CollArray1).l,a2
00015798                            
00015798                            ; End of function FloorLog_Unk
00015798                            
00015798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015798                            
00015798                            
00015798                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015798 363C 0FFF                  		move.w	#$FFF,d3
0001579C                            
0001579C                            loc_14CA6:
0001579C 7400                       		moveq	#0,d2
0001579E 323C 000F                  		move.w	#$F,d1
000157A2 3019                       		move.w	(a1)+,d0
000157A4 6700                       		beq.s	loc_14CD4
000157A6 6B00                       		bmi.s	loc_14CBE
000157A8                            
000157A8                            loc_14CB2:
000157A8 E248                       		lsr.w	#1,d0
000157AA 6400                       		bcc.s	loc_14CB8
000157AC 5202                       		addq.b	#1,d2
000157AE                            
000157AE                            loc_14CB8:
000157AE 51C9 FFF8                  		dbf	d1,loc_14CB2
000157B2                            
000157B2 6000                       		bra.s	loc_14CD6
000157B4                            ; ===========================================================================
000157B4                            
000157B4                            loc_14CBE:
000157B4 0C40 FFFF                  		cmpi.w	#-1,d0
000157B8 6700                       		beq.s	loc_14CD0
000157BA                            
000157BA                            loc_14CC4:
000157BA E348                       		lsl.w	#1,d0
000157BC 6400                       		bcc.s	loc_14CCA
000157BE 5302                       		subq.b	#1,d2
000157C0                            
000157C0                            loc_14CCA:
000157C0 51C9 FFF8                  		dbf	d1,loc_14CC4
000157C4                            
000157C4 6000                       		bra.s	loc_14CD6
000157C6                            ; ===========================================================================
000157C6                            
000157C6                            loc_14CD0:
000157C6 303C 0010                  		move.w	#$10,d0
000157CA                            
000157CA                            loc_14CD4:
000157CA 3400                       		move.w	d0,d2
000157CC                            
000157CC                            loc_14CD6:
000157CC 14C2                       		move.b	d2,(a2)+
000157CE 51CB FFCC                  		dbf	d3,loc_14CA6
000157D2                            
000157D2 4E75                       		rts	
000157D4                            
000157D4                            ; End of function FloorLog_Unk2
000157D4                            
000157D4                            
000157D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157D4                            
000157D4                            
000157D4                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000157D4 2628 0008                  		move.l	8(a0),d3
000157D8 2428 000C                  		move.l	$C(a0),d2
000157DC 3228 0010                  		move.w	$10(a0),d1
000157E0 48C1                       		ext.l	d1
000157E2 E181                       		asl.l	#8,d1
000157E4 D681                       		add.l	d1,d3
000157E6 3228 0012                  		move.w	$12(a0),d1
000157EA 48C1                       		ext.l	d1
000157EC E181                       		asl.l	#8,d1
000157EE D481                       		add.l	d1,d2
000157F0 4842                       		swap	d2
000157F2 4843                       		swap	d3
000157F4 11C0 F768                  		move.b	d0,($FFFFF768).w
000157F8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000157FC 1200                       		move.b	d0,d1
000157FE 0600 0020                  		addi.b	#$20,d0
00015802 6A00                       		bpl.s	loc_14D1A
00015804 1001                       		move.b	d1,d0
00015806 6A00                       		bpl.s	loc_14D14
00015808 5300                       		subq.b	#1,d0
0001580A                            
0001580A                            loc_14D14:
0001580A 0600 0020                  		addi.b	#$20,d0
0001580E 6000                       		bra.s	loc_14D24
00015810                            ; ===========================================================================
00015810                            
00015810                            loc_14D1A:
00015810 1001                       		move.b	d1,d0
00015812 6A00                       		bpl.s	loc_14D20
00015814 5200                       		addq.b	#1,d0
00015816                            
00015816                            loc_14D20:
00015816 0600 001F                  		addi.b	#$1F,d0
0001581A                            
0001581A                            loc_14D24:
0001581A 0200 00C0                  		andi.b	#$C0,d0
0001581E 6700 0000                  		beq.w	loc_14DF0
00015822 0C00 0080                  		cmpi.b	#$80,d0
00015826 6700 0000                  		beq.w	loc_14F7C
0001582A 0201 0038                  		andi.b	#$38,d1
0001582E 6600                       		bne.s	loc_14D3C
00015830 5042                       		addq.w	#8,d2
00015832                            
00015832                            loc_14D3C:
00015832 0C00 0040                  		cmpi.b	#$40,d0
00015836 6700 0000                  		beq.w	loc_1504A
0001583A 6000 0000                  		bra.w	loc_14EBC
0001583E                            
0001583E                            ; End of function Sonic_WalkSpeed
0001583E                            
0001583E                            
0001583E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001583E                            
0001583E                            
0001583E                            sub_14D48:				; XREF: Sonic_Jump
0001583E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015842 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015846 0600 0020                  		addi.b	#$20,d0
0001584A 0200 00C0                  		andi.b	#$C0,d0
0001584E 0C00 0040                  		cmpi.b	#$40,d0
00015852 6700 0000                  		beq.w	loc_14FD6
00015856 0C00 0080                  		cmpi.b	#$80,d0
0001585A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001585E 0C00 00C0                  		cmpi.b	#$C0,d0
00015862 6700 0000                  		beq.w	sub_14E50
00015866                            
00015866                            ; End of function sub_14D48
00015866                            
00015866                            ; ---------------------------------------------------------------------------
00015866                            ; Subroutine to	make Sonic land	on the floor after jumping
00015866                            ; ---------------------------------------------------------------------------
00015866                            
00015866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015866                            
00015866                            
00015866                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015866 3428 000C                  		move.w	$C(a0),d2
0001586A 3628 0008                  		move.w	8(a0),d3
0001586E 7000                       		moveq	#0,d0
00015870 1028 0016                  		move.b	$16(a0),d0
00015874 4880                       		ext.w	d0
00015876 D440                       		add.w	d0,d2
00015878 1028 0017                  		move.b	$17(a0),d0
0001587C 4880                       		ext.w	d0
0001587E D640                       		add.w	d0,d3
00015880 49F8 F768                  		lea	($FFFFF768).w,a4
00015884 367C 0010                  		movea.w	#$10,a3
00015888 3C3C 0000                  		move.w	#0,d6
0001588C 7A0D                       		moveq	#$D,d5
0001588E 6100 FC34                  		bsr.w	FindFloor
00015892 3F01                       		move.w	d1,-(sp)
00015894 3428 000C                  		move.w	$C(a0),d2
00015898 3628 0008                  		move.w	8(a0),d3
0001589C 7000                       		moveq	#0,d0
0001589E 1028 0016                  		move.b	$16(a0),d0
000158A2 4880                       		ext.w	d0
000158A4 D440                       		add.w	d0,d2
000158A6 1028 0017                  		move.b	$17(a0),d0
000158AA 4880                       		ext.w	d0
000158AC 9640                       		sub.w	d0,d3
000158AE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158B2 367C 0010                  		movea.w	#$10,a3
000158B6 3C3C 0000                  		move.w	#0,d6
000158BA 7A0D                       		moveq	#$D,d5
000158BC 6100 FC06                  		bsr.w	FindFloor
000158C0 301F                       		move.w	(sp)+,d0
000158C2 143C 0000                  		move.b	#0,d2
000158C6                            
000158C6                            loc_14DD0:
000158C6 1638 F76A                  		move.b	($FFFFF76A).w,d3
000158CA B240                       		cmp.w	d0,d1
000158CC 6F00                       		ble.s	loc_14DDE
000158CE 1638 F768                  		move.b	($FFFFF768).w,d3
000158D2 C141                       		exg	d0,d1
000158D4                            
000158D4                            loc_14DDE:
000158D4 0803 0000                  		btst	#0,d3
000158D8 6700                       		beq.s	locret_14DE6
000158DA 1602                       		move.b	d2,d3
000158DC                            
000158DC                            locret_14DE6:
000158DC 4E75                       		rts	
000158DE                            
000158DE                            ; End of function Sonic_HitFloor
000158DE                            
000158DE                            ; ===========================================================================
000158DE 3428 000C                  		move.w	$C(a0),d2
000158E2 3628 0008                  		move.w	8(a0),d3
000158E6                            
000158E6                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000158E6 0642 000A                  		addi.w	#$A,d2
000158EA 49F8 F768                  		lea	($FFFFF768).w,a4
000158EE 367C 0010                  		movea.w	#$10,a3
000158F2 3C3C 0000                  		move.w	#0,d6
000158F6 7A0E                       		moveq	#$E,d5
000158F8 6100 FBCA                  		bsr.w	FindFloor
000158FC 143C 0000                  		move.b	#0,d2
00015900                            
00015900                            loc_14E0A:				; XREF: sub_14EB4
00015900 1638 F768                  		move.b	($FFFFF768).w,d3
00015904 0803 0000                  		btst	#0,d3
00015908 6700                       		beq.s	locret_14E16
0001590A 1602                       		move.b	d2,d3
0001590C                            
0001590C                            locret_14E16:
0001590C 4E75                       		rts	
0001590E                            
0001590E                            ; ---------------------------------------------------------------------------
0001590E                            ; Subroutine allowing objects to interact with the floor
0001590E                            ; ---------------------------------------------------------------------------
0001590E                            
0001590E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001590E                            
0001590E                            
0001590E                            ObjHitFloor:
0001590E 3628 0008                  		move.w	8(a0),d3
00015912                            
00015912                            ; End of function ObjHitFloor
00015912                            
00015912                            
00015912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015912                            
00015912                            
00015912                            ObjHitFloor2:
00015912 3428 000C                  		move.w	$C(a0),d2
00015916 7000                       		moveq	#0,d0
00015918 1028 0016                  		move.b	$16(a0),d0
0001591C 4880                       		ext.w	d0
0001591E D440                       		add.w	d0,d2
00015920 49F8 F768                  		lea	($FFFFF768).w,a4
00015924 18BC 0000                  		move.b	#0,(a4)
00015928 367C 0010                  		movea.w	#$10,a3
0001592C 3C3C 0000                  		move.w	#0,d6
00015930 7A0D                       		moveq	#$D,d5
00015932 6100 FB90                  		bsr.w	FindFloor
00015936 1638 F768                  		move.b	($FFFFF768).w,d3
0001593A 0803 0000                  		btst	#0,d3
0001593E 6700                       		beq.s	locret_14E4E
00015940 163C 0000                  		move.b	#0,d3
00015944                            
00015944                            locret_14E4E:
00015944 4E75                       		rts	
00015946                            ; End of function ObjHitFloor2
00015946                            
00015946                            
00015946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015946                            
00015946                            
00015946                            sub_14E50:				; XREF: sub_14D48
00015946 3428 000C                  		move.w	$C(a0),d2
0001594A 3628 0008                  		move.w	8(a0),d3
0001594E 7000                       		moveq	#0,d0
00015950 1028 0017                  		move.b	$17(a0),d0
00015954 4880                       		ext.w	d0
00015956 9440                       		sub.w	d0,d2
00015958 1028 0016                  		move.b	$16(a0),d0
0001595C 4880                       		ext.w	d0
0001595E D640                       		add.w	d0,d3
00015960 49F8 F768                  		lea	($FFFFF768).w,a4
00015964 367C 0010                  		movea.w	#$10,a3
00015968 3C3C 0000                  		move.w	#0,d6
0001596C 7A0E                       		moveq	#$E,d5
0001596E 6100 FC92                  		bsr.w	FindWall
00015972 3F01                       		move.w	d1,-(sp)
00015974 3428 000C                  		move.w	$C(a0),d2
00015978 3628 0008                  		move.w	8(a0),d3
0001597C 7000                       		moveq	#0,d0
0001597E 1028 0017                  		move.b	$17(a0),d0
00015982 4880                       		ext.w	d0
00015984 D440                       		add.w	d0,d2
00015986 1028 0016                  		move.b	$16(a0),d0
0001598A 4880                       		ext.w	d0
0001598C D640                       		add.w	d0,d3
0001598E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015992 367C 0010                  		movea.w	#$10,a3
00015996 3C3C 0000                  		move.w	#0,d6
0001599A 7A0E                       		moveq	#$E,d5
0001599C 6100 FC64                  		bsr.w	FindWall
000159A0 301F                       		move.w	(sp)+,d0
000159A2 143C 00C0                  		move.b	#-$40,d2
000159A6 6000 FF1E                  		bra.w	loc_14DD0
000159AA                            
000159AA                            ; End of function sub_14E50
000159AA                            
000159AA                            
000159AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159AA                            
000159AA                            
000159AA                            sub_14EB4:				; XREF: Sonic_Floor
000159AA 3428 000C                  		move.w	$C(a0),d2
000159AE 3628 0008                  		move.w	8(a0),d3
000159B2                            
000159B2                            loc_14EBC:
000159B2 0643 000A                  		addi.w	#$A,d3
000159B6 49F8 F768                  		lea	($FFFFF768).w,a4
000159BA 367C 0010                  		movea.w	#$10,a3
000159BE 3C3C 0000                  		move.w	#0,d6
000159C2 7A0E                       		moveq	#$E,d5
000159C4 6100 FC3C                  		bsr.w	FindWall
000159C8 143C 00C0                  		move.b	#-$40,d2
000159CC 6000 FF32                  		bra.w	loc_14E0A
000159D0                            
000159D0                            ; End of function sub_14EB4
000159D0                            
000159D0                            ; ---------------------------------------------------------------------------
000159D0                            ; Subroutine to	detect when an object hits a wall to its right
000159D0                            ; ---------------------------------------------------------------------------
000159D0                            
000159D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159D0                            
000159D0                            
000159D0                            ObjHitWallRight:
000159D0 D668 0008                  		add.w	8(a0),d3
000159D4 3428 000C                  		move.w	$C(a0),d2
000159D8 49F8 F768                  		lea	($FFFFF768).w,a4
000159DC 18BC 0000                  		move.b	#0,(a4)
000159E0 367C 0010                  		movea.w	#$10,a3
000159E4 3C3C 0000                  		move.w	#0,d6
000159E8 7A0E                       		moveq	#$E,d5
000159EA 6100 FC16                  		bsr.w	FindWall
000159EE 1638 F768                  		move.b	($FFFFF768).w,d3
000159F2 0803 0000                  		btst	#0,d3
000159F6 6700                       		beq.s	locret_14F06
000159F8 163C 00C0                  		move.b	#-$40,d3
000159FC                            
000159FC                            locret_14F06:
000159FC 4E75                       		rts	
000159FE                            
000159FE                            ; End of function ObjHitWallRight
000159FE                            
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000159FE                            ; touches them
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            
000159FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159FE                            
000159FE                            
000159FE                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000159FE 3428 000C                  		move.w	$C(a0),d2
00015A02 3628 0008                  		move.w	8(a0),d3
00015A06 7000                       		moveq	#0,d0
00015A08 1028 0016                  		move.b	$16(a0),d0
00015A0C 4880                       		ext.w	d0
00015A0E 9440                       		sub.w	d0,d2
00015A10 0A42 000F                  		eori.w	#$F,d2
00015A14 1028 0017                  		move.b	$17(a0),d0
00015A18 4880                       		ext.w	d0
00015A1A D640                       		add.w	d0,d3
00015A1C 49F8 F768                  		lea	($FFFFF768).w,a4
00015A20 367C FFF0                  		movea.w	#-$10,a3
00015A24 3C3C 1000                  		move.w	#$1000,d6
00015A28 7A0E                       		moveq	#$E,d5
00015A2A 6100 FA98                  		bsr.w	FindFloor
00015A2E 3F01                       		move.w	d1,-(sp)
00015A30 3428 000C                  		move.w	$C(a0),d2
00015A34 3628 0008                  		move.w	8(a0),d3
00015A38 7000                       		moveq	#0,d0
00015A3A 1028 0016                  		move.b	$16(a0),d0
00015A3E 4880                       		ext.w	d0
00015A40 9440                       		sub.w	d0,d2
00015A42 0A42 000F                  		eori.w	#$F,d2
00015A46 1028 0017                  		move.b	$17(a0),d0
00015A4A 4880                       		ext.w	d0
00015A4C 9640                       		sub.w	d0,d3
00015A4E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A52 367C FFF0                  		movea.w	#-$10,a3
00015A56 3C3C 1000                  		move.w	#$1000,d6
00015A5A 7A0E                       		moveq	#$E,d5
00015A5C 6100 FA66                  		bsr.w	FindFloor
00015A60 301F                       		move.w	(sp)+,d0
00015A62 143C 0080                  		move.b	#-$80,d2
00015A66 6000 FE5E                  		bra.w	loc_14DD0
00015A6A                            ; End of function Sonic_DontRunOnWalls
00015A6A                            
00015A6A                            ; ===========================================================================
00015A6A 3428 000C                  		move.w	$C(a0),d2
00015A6E 3628 0008                  		move.w	8(a0),d3
00015A72                            
00015A72                            loc_14F7C:
00015A72 0442 000A                  		subi.w	#$A,d2
00015A76 0A42 000F                  		eori.w	#$F,d2
00015A7A 49F8 F768                  		lea	($FFFFF768).w,a4
00015A7E 367C FFF0                  		movea.w	#-$10,a3
00015A82 3C3C 1000                  		move.w	#$1000,d6
00015A86 7A0E                       		moveq	#$E,d5
00015A88 6100 FA3A                  		bsr.w	FindFloor
00015A8C 143C 0080                  		move.b	#-$80,d2
00015A90 6000 FE6E                  		bra.w	loc_14E0A
00015A94                            
00015A94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A94                            
00015A94                            
00015A94                            ObjHitCeiling:
00015A94 3428 000C                  		move.w	$C(a0),d2
00015A98 3628 0008                  		move.w	8(a0),d3
00015A9C 7000                       		moveq	#0,d0
00015A9E 1028 0016                  		move.b	$16(a0),d0
00015AA2 4880                       		ext.w	d0
00015AA4 9440                       		sub.w	d0,d2
00015AA6 0A42 000F                  		eori.w	#$F,d2
00015AAA 49F8 F768                  		lea	($FFFFF768).w,a4
00015AAE 367C FFF0                  		movea.w	#-$10,a3
00015AB2 3C3C 1000                  		move.w	#$1000,d6
00015AB6 7A0E                       		moveq	#$E,d5
00015AB8 6100 FA0A                  		bsr.w	FindFloor
00015ABC 1638 F768                  		move.b	($FFFFF768).w,d3
00015AC0 0803 0000                  		btst	#0,d3
00015AC4 6700                       		beq.s	locret_14FD4
00015AC6 163C 0080                  		move.b	#-$80,d3
00015ACA                            
00015ACA                            locret_14FD4:
00015ACA 4E75                       		rts	
00015ACC                            ; End of function ObjHitCeiling
00015ACC                            
00015ACC                            ; ===========================================================================
00015ACC                            
00015ACC                            loc_14FD6:				; XREF: sub_14D48
00015ACC 3428 000C                  		move.w	$C(a0),d2
00015AD0 3628 0008                  		move.w	8(a0),d3
00015AD4 7000                       		moveq	#0,d0
00015AD6 1028 0017                  		move.b	$17(a0),d0
00015ADA 4880                       		ext.w	d0
00015ADC 9440                       		sub.w	d0,d2
00015ADE 1028 0016                  		move.b	$16(a0),d0
00015AE2 4880                       		ext.w	d0
00015AE4 9640                       		sub.w	d0,d3
00015AE6 0A43 000F                  		eori.w	#$F,d3
00015AEA 49F8 F768                  		lea	($FFFFF768).w,a4
00015AEE 367C FFF0                  		movea.w	#-$10,a3
00015AF2 3C3C 0800                  		move.w	#$800,d6
00015AF6 7A0E                       		moveq	#$E,d5
00015AF8 6100 FB08                  		bsr.w	FindWall
00015AFC 3F01                       		move.w	d1,-(sp)
00015AFE 3428 000C                  		move.w	$C(a0),d2
00015B02 3628 0008                  		move.w	8(a0),d3
00015B06 7000                       		moveq	#0,d0
00015B08 1028 0017                  		move.b	$17(a0),d0
00015B0C 4880                       		ext.w	d0
00015B0E D440                       		add.w	d0,d2
00015B10 1028 0016                  		move.b	$16(a0),d0
00015B14 4880                       		ext.w	d0
00015B16 9640                       		sub.w	d0,d3
00015B18 0A43 000F                  		eori.w	#$F,d3
00015B1C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B20 367C FFF0                  		movea.w	#-$10,a3
00015B24 3C3C 0800                  		move.w	#$800,d6
00015B28 7A0E                       		moveq	#$E,d5
00015B2A 6100 FAD6                  		bsr.w	FindWall
00015B2E 301F                       		move.w	(sp)+,d0
00015B30 143C 0040                  		move.b	#$40,d2
00015B34 6000 FD90                  		bra.w	loc_14DD0
00015B38                            
00015B38                            ; ---------------------------------------------------------------------------
00015B38                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B38                            ; ---------------------------------------------------------------------------
00015B38                            
00015B38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B38                            
00015B38                            
00015B38                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B38 3428 000C                  		move.w	$C(a0),d2
00015B3C 3628 0008                  		move.w	8(a0),d3
00015B40                            
00015B40                            loc_1504A:
00015B40 0443 000A                  		subi.w	#$A,d3
00015B44 0A43 000F                  		eori.w	#$F,d3
00015B48 49F8 F768                  		lea	($FFFFF768).w,a4
00015B4C 367C FFF0                  		movea.w	#-$10,a3
00015B50 3C3C 0800                  		move.w	#$800,d6
00015B54 7A0E                       		moveq	#$E,d5
00015B56 6100 FAAA                  		bsr.w	FindWall
00015B5A 143C 0040                  		move.b	#$40,d2
00015B5E 6000 FDA0                  		bra.w	loc_14E0A
00015B62                            ; End of function Sonic_HitWall
00015B62                            
00015B62                            ; ---------------------------------------------------------------------------
00015B62                            ; Subroutine to	detect when an object hits a wall to its left
00015B62                            ; ---------------------------------------------------------------------------
00015B62                            
00015B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B62                            
00015B62                            
00015B62                            ObjHitWallLeft:
00015B62 D668 0008                  		add.w	8(a0),d3
00015B66 3428 000C                  		move.w	$C(a0),d2
00015B6A 49F8 F768                  		lea	($FFFFF768).w,a4
00015B6E 18BC 0000                  		move.b	#0,(a4)
00015B72 367C FFF0                  		movea.w	#-$10,a3
00015B76 3C3C 0800                  		move.w	#$800,d6
00015B7A 7A0E                       		moveq	#$E,d5
00015B7C 6100 FA84                  		bsr.w	FindWall
00015B80 1638 F768                  		move.b	($FFFFF768).w,d3
00015B84 0803 0000                  		btst	#0,d3
00015B88 6700                       		beq.s	locret_15098
00015B8A 163C 0040                  		move.b	#$40,d3
00015B8E                            
00015B8E                            locret_15098:
00015B8E 4E75                       		rts	
00015B90                            ; End of function ObjHitWallLeft
00015B90                            
00015B90                            ; ===========================================================================
00015B90                            ; ---------------------------------------------------------------------------
00015B90                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015B90                            ; ---------------------------------------------------------------------------
00015B90                            
00015B90                            Obj66:					; XREF: Obj_Index
00015B90 7000                       		moveq	#0,d0
00015B92 1028 0024                  		move.b	$24(a0),d0
00015B96 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015B9A 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015B9E                            ; ===========================================================================
00015B9E 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015BA0 0000                       		dc.w Obj66_Action-Obj66_Index
00015BA2 0000                       		dc.w Obj66_Display-Obj66_Index
00015BA4 0000                       		dc.w Obj66_Release-Obj66_Index
00015BA6                            ; ===========================================================================
00015BA6                            
00015BA6                            Obj66_Main:				; XREF: Obj66_Index
00015BA6 5428 0024                  		addq.b	#2,$24(a0)
00015BAA 323C 0001                  		move.w	#1,d1
00015BAE 2248                       		movea.l	a0,a1
00015BB0 6000                       		bra.s	Obj66_MakeItem
00015BB2                            ; ===========================================================================
00015BB2                            
00015BB2                            Obj66_Loop:
00015BB2 6100 88D4                  		bsr.w	SingleObjLoad
00015BB6 6600                       		bne.s	loc_150FE
00015BB8 12BC 0066                  		move.b	#$66,0(a1)
00015BBC 5829 0024                  		addq.b	#4,$24(a1)
00015BC0 3368 0008 0008             		move.w	8(a0),8(a1)
00015BC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015BCC 137C 0003 0018             		move.b	#3,$18(a1)
00015BD2 137C 0010 001A             		move.b	#$10,$1A(a1)
00015BD8                            
00015BD8                            Obj66_MakeItem:				; XREF: Obj66_Main
00015BD8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015BE0 337C 4348 0002             		move.w	#$4348,2(a1)
00015BE6 0029 0004 0001             		ori.b	#4,1(a1)
00015BEC 137C 0038 0019             		move.b	#$38,$19(a1)
00015BF2                            
00015BF2                            loc_150FE:
00015BF2 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015BF6                            
00015BF6 117C 0030 0019             		move.b	#$30,$19(a0)
00015BFC 117C 0004 0018             		move.b	#4,$18(a0)
00015C02 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C08 117C 0001 0034             		move.b	#1,$34(a0)
00015C0E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C14                            
00015C14                            Obj66_Action:				; XREF: Obj66_Index
00015C14 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C18 4A28 0001                  		tst.b	1(a0)
00015C1C 6A00 0000                  		bpl.w	Obj66_Display
00015C20 323C 0030                  		move.w	#$30,d1
00015C24 3401                       		move.w	d1,d2
00015C26 3602                       		move.w	d2,d3
00015C28 5243                       		addq.w	#1,d3
00015C2A 3828 0008                  		move.w	8(a0),d4
00015C2E 6100 A7A2                  		bsr.w	SolidObject
00015C32 0828 0005 0022             		btst	#5,$22(a0)
00015C38 6700 0000                  		beq.w	Obj66_Display
00015C3C 43F8 D000                  		lea	($FFFFD000).w,a1
00015C40 720E                       		moveq	#$E,d1
00015C42 3029 0008                  		move.w	8(a1),d0
00015C46 B068 0008                  		cmp.w	8(a0),d0
00015C4A 6500                       		bcs.s	Obj66_GrabSonic
00015C4C 7207                       		moveq	#7,d1
00015C4E                            
00015C4E                            Obj66_GrabSonic:
00015C4E B228 001A                  		cmp.b	$1A(a0),d1
00015C52 6600                       		bne.s	Obj66_Display
00015C54 1141 0032                  		move.b	d1,$32(a0)
00015C58 5828 0024                  		addq.b	#4,$24(a0)
00015C5C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015C62 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015C68 337C 0800 0014             		move.w	#$800,$14(a1)
00015C6E 337C 0000 0010             		move.w	#0,$10(a1)
00015C74 337C 0000 0012             		move.w	#0,$12(a1)
00015C7A 08A8 0005 0022             		bclr	#5,$22(a0)
00015C80 08A9 0005 0022             		bclr	#5,$22(a1)
00015C86 08E9 0001 0022             		bset	#1,$22(a1)
00015C8C 3429 0008                  		move.w	8(a1),d2
00015C90 3629 000C                  		move.w	$C(a1),d3
00015C94 6100 0000                  		bsr.w	Obj66_ChgPos
00015C98 D569 0008                  		add.w	d2,8(a1)
00015C9C D769 000C                  		add.w	d3,$C(a1)
00015CA0 E0E9 0008                  		asr	8(a1)
00015CA4 E0E9 000C                  		asr	$C(a1)
00015CA8                            
00015CA8                            Obj66_Display:				; XREF: Obj66_Index
00015CA8 6000 A400                  		bra.w	MarkObjGone
00015CAC                            ; ===========================================================================
00015CAC                            
00015CAC                            Obj66_Release:				; XREF: Obj66_Index
00015CAC 1028 001A                  		move.b	$1A(a0),d0
00015CB0 0C00 0004                  		cmpi.b	#4,d0
00015CB4 6700                       		beq.s	loc_151C8
00015CB6 0C00 0007                  		cmpi.b	#7,d0
00015CBA 6600                       		bne.s	loc_151F8
00015CBC                            
00015CBC                            loc_151C8:
00015CBC B028 0032                  		cmp.b	$32(a0),d0
00015CC0 6700                       		beq.s	loc_151F8
00015CC2 43F8 D000                  		lea	($FFFFD000).w,a1
00015CC6 337C 0000 0010             		move.w	#0,$10(a1)
00015CCC 337C 0800 0012             		move.w	#$800,$12(a1)
00015CD2 0C00 0004                  		cmpi.b	#4,d0
00015CD6 6700                       		beq.s	loc_151F0
00015CD8 337C 0800 0010             		move.w	#$800,$10(a1)
00015CDE 337C 0800 0012             		move.w	#$800,$12(a1)
00015CE4                            
00015CE4                            loc_151F0:
00015CE4 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015CE8 5928 0024                  		subq.b	#4,$24(a0)
00015CEC                            
00015CEC                            loc_151F8:
00015CEC 6100                       		bsr.s	Obj66_ChkSwitch
00015CEE 6100                       		bsr.s	Obj66_ChgPos
00015CF0 6000 A3B8                  		bra.w	MarkObjGone
00015CF4                            
00015CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CF4                            
00015CF4                            
00015CF4                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015CF4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015CF8 7000                       		moveq	#0,d0
00015CFA 1028 0038                  		move.b	$38(a0),d0
00015CFE 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015D04 6700                       		beq.s	loc_15224	; if not, branch
00015D06 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D0A 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D0C 4428 0034                  		neg.b	$34(a0)
00015D10 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D16 6000                       		bra.s	Obj66_Animate
00015D18                            ; ===========================================================================
00015D18                            
00015D18                            loc_15224:
00015D18 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D1C                            
00015D1C                            Obj66_Animate:
00015D1C 5328 001E                  		subq.b	#1,$1E(a0)
00015D20 6A00                       		bpl.s	locret_15246
00015D22 117C 0007 001E             		move.b	#7,$1E(a0)
00015D28 1228 0034                  		move.b	$34(a0),d1
00015D2C 1028 001A                  		move.b	$1A(a0),d0
00015D30 D001                       		add.b	d1,d0
00015D32 0200 000F                  		andi.b	#$F,d0
00015D36 1140 001A                  		move.b	d0,$1A(a0)
00015D3A                            
00015D3A                            locret_15246:
00015D3A 4E75                       		rts	
00015D3C                            ; End of function Obj66_ChkSwitch
00015D3C                            
00015D3C                            
00015D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D3C                            
00015D3C                            
00015D3C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D3C 43F8 D000                  		lea	($FFFFD000).w,a1
00015D40 7000                       		moveq	#0,d0
00015D42 1028 001A                  		move.b	$1A(a0),d0
00015D46 D040                       		add.w	d0,d0
00015D48 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D4C 101A                       		move.b	(a2)+,d0
00015D4E 4880                       		ext.w	d0
00015D50 D068 0008                  		add.w	8(a0),d0
00015D54 3340 0008                  		move.w	d0,8(a1)
00015D58 101A                       		move.b	(a2)+,d0
00015D5A 4880                       		ext.w	d0
00015D5C D068 000C                  		add.w	$C(a0),d0
00015D60 3340 000C                  		move.w	d0,$C(a1)
00015D64 4E75                       		rts	
00015D66                            ; End of function Obj66_ChgPos
00015D66                            
00015D66                            ; ===========================================================================
00015D66 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015D6A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015D6E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015D72 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015D76 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015D7A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015D7E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015D82 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            Map_obj66:
00015D86                            	include "_maps\obj66.asm"
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D86                            ; ---------------------------------------------------------------------------
00015D86 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015D8A 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015D8E 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015D92 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015D96 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015D9A 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015D9E 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015DA2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015DA6 0000                       		dc.w byte_154A4-Map_obj66
00015DA8 06                         byte_152B4:	dc.b 6
00015DA9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DAE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015DB3 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015DB8 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015DBD 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015DC2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015DC7 06                         byte_152D3:	dc.b 6
00015DC8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015DCD 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015DD2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015DD7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015DDC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015DE1 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015DE6 06                         byte_152F2:	dc.b 6
00015DE7 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015DEC 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015DF1 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015DF6 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015DFB 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015E00 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015E05 06                         byte_15311:	dc.b 6
00015E06 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E0B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E10 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E15 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E1A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E1F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E24 06                         byte_15330:	dc.b 6
00015E25 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E2A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E2F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E34 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E39 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E3E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E43 06                         byte_1534F:	dc.b 6
00015E44 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E49 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E4E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E53 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015E58 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015E5D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015E62 06                         byte_1536E:	dc.b 6
00015E63 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015E68 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015E6D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015E72 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015E77 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015E7C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015E81 06                         byte_1538D:	dc.b 6
00015E82 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015E87 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015E8C F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015E91 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015E96 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015E9B 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015EA0 06                         byte_153AC:	dc.b 6
00015EA1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015EA6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015EAB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EB0 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015EB5 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015EBA 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015EBF 06                         byte_153CB:	dc.b 6
00015EC0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015EC5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015ECA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015ECF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015ED4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015ED9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015EDE 06                         byte_153EA:	dc.b 6
00015EDF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015EE4 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015EE9 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015EEE D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015EF3 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015EF8 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015EFD 06                         byte_15409:	dc.b 6
00015EFE D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015F03 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F08 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F0D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F12 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F17 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F1C 06                         byte_15428:	dc.b 6
00015F1D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F22 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F27 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F2C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F31 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F36 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F3B 06                         byte_15447:	dc.b 6
00015F3C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F41 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F46 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F4B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F50 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F55 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015F5A 06                         byte_15466:	dc.b 6
00015F5B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015F60 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015F65 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015F6A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015F6F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015F74 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015F79 06                         byte_15485:	dc.b 6
00015F7A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015F7F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015F84 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015F89 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015F8E F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015F93 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015F98 0C                         byte_154A4:	dc.b $C
00015F99 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015F9E D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015FA3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FA8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FAD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015FB2 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015FB7 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015FBC 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015FC1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015FC6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015FCB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015FD0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015FD6 00                         		even
00015FD6 00                         		even
00015FD6                            
00015FD6                            ; ===========================================================================
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            ; Object 67 - disc that	you run	around (SBZ)
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            
00015FD6                            Obj67:					; XREF: Obj_Index
00015FD6 7000                       		moveq	#0,d0
00015FD8 1028 0024                  		move.b	$24(a0),d0
00015FDC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015FE0 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015FE4                            ; ===========================================================================
00015FE4 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015FE6 0000                       		dc.w Obj67_Action-Obj67_Index
00015FE8                            ; ===========================================================================
00015FE8                            
00015FE8                            Obj67_Main:				; XREF: Obj67_Index
00015FE8 5428 0024                  		addq.b	#2,$24(a0)
00015FEC 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015FF4 317C C344 0002             		move.w	#$C344,2(a0)
00015FFA 117C 0004 0001             		move.b	#4,1(a0)
00016000 117C 0004 0018             		move.b	#4,$18(a0)
00016006 117C 0008 0019             		move.b	#8,$19(a0)
0001600C 3168 0008 0032             		move.w	8(a0),$32(a0)
00016012 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016018 117C 0018 0034             		move.b	#$18,$34(a0)
0001601E 117C 0048 0038             		move.b	#$48,$38(a0)
00016024 1228 0028                  		move.b	$28(a0),d1	; get object type
00016028 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001602C 6700                       		beq.s	loc_15546
0001602E 117C 0010 0034             		move.b	#$10,$34(a0)
00016034 117C 0038 0038             		move.b	#$38,$38(a0)
0001603A                            
0001603A                            loc_15546:
0001603A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001603E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016042 4881                       		ext.w	d1
00016044 E741                       		asl.w	#3,d1
00016046 3141 0036                  		move.w	d1,$36(a0)
0001604A 1028 0022                  		move.b	$22(a0),d0
0001604E E418                       		ror.b	#2,d0
00016050 0200 00C0                  		andi.b	#-$40,d0
00016054 1140 0026                  		move.b	d0,$26(a0)
00016058                            
00016058                            Obj67_Action:				; XREF: Obj67_Index
00016058 6100 0000                  		bsr.w	Obj67_MoveSonic
0001605C 6100 0000                  		bsr.w	Obj67_MoveSpot
00016060 6000 0000                  		bra.w	Obj67_ChkDel
00016064                            ; ===========================================================================
00016064                            
00016064                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016064 7400                       		moveq	#0,d2
00016066 1428 0038                  		move.b	$38(a0),d2
0001606A 3602                       		move.w	d2,d3
0001606C D643                       		add.w	d3,d3
0001606E 43F8 D000                  		lea	($FFFFD000).w,a1
00016072 3029 0008                  		move.w	8(a1),d0
00016076 9068 0032                  		sub.w	$32(a0),d0
0001607A D042                       		add.w	d2,d0
0001607C B043                       		cmp.w	d3,d0
0001607E 6400                       		bcc.s	loc_155A8
00016080 3229 000C                  		move.w	$C(a1),d1
00016084 9268 0030                  		sub.w	$30(a0),d1
00016088 D242                       		add.w	d2,d1
0001608A B243                       		cmp.w	d3,d1
0001608C 6400                       		bcc.s	loc_155A8
0001608E 0829 0001 0022             		btst	#1,$22(a1)
00016094 6700                       		beq.s	loc_155B8
00016096 4228 003A                  		clr.b	$3A(a0)
0001609A 4E75                       		rts	
0001609C                            ; ===========================================================================
0001609C                            
0001609C                            loc_155A8:
0001609C 4A28 003A                  		tst.b	$3A(a0)
000160A0 6700                       		beq.s	locret_155B6
000160A2 4229 0038                  		clr.b	$38(a1)
000160A6 4228 003A                  		clr.b	$3A(a0)
000160AA                            
000160AA                            locret_155B6:
000160AA 4E75                       		rts	
000160AC                            ; ===========================================================================
000160AC                            
000160AC                            loc_155B8:
000160AC 4A28 003A                  		tst.b	$3A(a0)
000160B0 6600                       		bne.s	loc_155E2
000160B2 117C 0001 003A             		move.b	#1,$3A(a0)
000160B8 0829 0002 0022             		btst	#2,$22(a1)
000160BE 6600                       		bne.s	loc_155D0
000160C0 4229 001C                  		clr.b	$1C(a1)
000160C4                            
000160C4                            loc_155D0:
000160C4 08A9 0005 0022             		bclr	#5,$22(a1)
000160CA 137C 0001 001D             		move.b	#1,$1D(a1)
000160D0 137C 0001 0038             		move.b	#1,$38(a1)
000160D6                            
000160D6                            loc_155E2:
000160D6 3029 0014                  		move.w	$14(a1),d0
000160DA 4A68 0036                  		tst.w	$36(a0)
000160DE 6A00                       		bpl.s	loc_15608
000160E0 0C40 FC00                  		cmpi.w	#-$400,d0
000160E4 6F00                       		ble.s	loc_155FA
000160E6 337C FC00 0014             		move.w	#-$400,$14(a1)
000160EC 4E75                       		rts	
000160EE                            ; ===========================================================================
000160EE                            
000160EE                            loc_155FA:
000160EE 0C40 F100                  		cmpi.w	#-$F00,d0
000160F2 6C00                       		bge.s	locret_15606
000160F4 337C F100 0014             		move.w	#-$F00,$14(a1)
000160FA                            
000160FA                            locret_15606:
000160FA 4E75                       		rts	
000160FC                            ; ===========================================================================
000160FC                            
000160FC                            loc_15608:
000160FC 0C40 0400                  		cmpi.w	#$400,d0
00016100 6C00                       		bge.s	loc_15616
00016102 337C 0400 0014             		move.w	#$400,$14(a1)
00016108 4E75                       		rts	
0001610A                            ; ===========================================================================
0001610A                            
0001610A                            loc_15616:
0001610A 0C40 0F00                  		cmpi.w	#$F00,d0
0001610E 6F00                       		ble.s	locret_15622
00016110 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016116                            
00016116                            locret_15622:
00016116 4E75                       		rts	
00016118                            ; ===========================================================================
00016118                            
00016118                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016118 3028 0036                  		move.w	$36(a0),d0
0001611C D168 0026                  		add.w	d0,$26(a0)
00016120 1028 0026                  		move.b	$26(a0),d0
00016124 4EB9 0000 2D34             		jsr	(CalcSine).l
0001612A 3428 0030                  		move.w	$30(a0),d2
0001612E 3628 0032                  		move.w	$32(a0),d3
00016132 7800                       		moveq	#0,d4
00016134 1828 0034                  		move.b	$34(a0),d4
00016138 E14C                       		lsl.w	#8,d4
0001613A 2A04                       		move.l	d4,d5
0001613C C9C0                       		muls.w	d0,d4
0001613E 4844                       		swap	d4
00016140 CBC1                       		muls.w	d1,d5
00016142 4845                       		swap	d5
00016144 D842                       		add.w	d2,d4
00016146 DA43                       		add.w	d3,d5
00016148 3144 000C                  		move.w	d4,$C(a0)
0001614C 3145 0008                  		move.w	d5,8(a0)
00016150 4E75                       		rts	
00016152                            ; ===========================================================================
00016152                            
00016152                            Obj67_ChkDel:				; XREF: Obj67_Action
00016152 3028 0032                  		move.w	$32(a0),d0
00016156 0240 FF80                  		andi.w	#-$80,d0
0001615A 3238 F700                  		move.w	($FFFFF700).w,d1
0001615E 0441 0080                  		subi.w	#$80,d1
00016162 0241 FF80                  		andi.w	#-$80,d1
00016166 9041                       		sub.w	d1,d0
00016168 0C40 0280                  		cmpi.w	#$280,d0
0001616C 6200                       		bhi.s	Obj67_Delete
0001616E 4EF9 0000 E002             		jmp	DisplaySprite
00016174                            ; ===========================================================================
00016174                            
00016174                            Obj67_Delete:
00016174 4EF9 0000 E03E             		jmp	DeleteObject
0001617A                            ; ===========================================================================
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            ; Sprite mappings - disc that you run around (SBZ)
0001617A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001617A                            ; part of the level tiles.)
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            Map_obj67:
0001617A                            	include "_maps\obj67.asm"
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            ; Sprite mappings - disc that you run around (SBZ)
0001617A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001617A                            ; part of the level tiles.)
0001617A                            ; ---------------------------------------------------------------------------
0001617A 0000                       		dc.w byte_15688-Map_obj67
0001617C 01                         byte_15688:	dc.b 1
0001617D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00016182                            		even
00016182                            		even
00016182                            
00016182                            ; ===========================================================================
00016182                            ; ---------------------------------------------------------------------------
00016182                            ; Object 68 - conveyor belts (SBZ)
00016182                            ; ---------------------------------------------------------------------------
00016182                            
00016182                            Obj68:					; XREF: Obj_Index
00016182 7000                       		moveq	#0,d0
00016184 1028 0024                  		move.b	$24(a0),d0
00016188 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0001618C 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016190                            ; ===========================================================================
00016190 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00016192 0000                       		dc.w Obj68_Action-Obj68_Index
00016194                            ; ===========================================================================
00016194                            
00016194                            Obj68_Main:				; XREF: Obj68_Index
00016194 5428 0024                  		addq.b	#2,$24(a0)
00016198 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
0001619E 1228 0028                  		move.b	$28(a0),d1	; get object type
000161A2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161A6 6700                       		beq.s	loc_156BA	; if zero, branch
000161A8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161AE                            
000161AE                            loc_156BA:
000161AE 1228 0028                  		move.b	$28(a0),d1	; get object type
000161B2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161B6 4881                       		ext.w	d1
000161B8 E841                       		asr.w	#4,d1
000161BA 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000161BE                            
000161BE                            Obj68_Action:				; XREF: Obj68_Index
000161BE 6100                       		bsr.s	Obj68_MoveSonic
000161C0 3028 0008                  		move.w	8(a0),d0
000161C4 0240 FF80                  		andi.w	#$FF80,d0
000161C8 3238 F700                  		move.w	($FFFFF700).w,d1
000161CC 0441 0080                  		subi.w	#$80,d1
000161D0 0241 FF80                  		andi.w	#$FF80,d1
000161D4 9041                       		sub.w	d1,d0
000161D6 0C40 0280                  		cmpi.w	#$280,d0
000161DA 6200                       		bhi.s	Obj68_Delete
000161DC 4E75                       		rts	
000161DE                            ; ===========================================================================
000161DE                            
000161DE                            Obj68_Delete:
000161DE 4EF9 0000 E03E             		jmp	DeleteObject
000161E4                            ; ===========================================================================
000161E4                            
000161E4                            Obj68_MoveSonic:			; XREF: Obj68_Action
000161E4 7400                       		moveq	#0,d2
000161E6 1428 0038                  		move.b	$38(a0),d2
000161EA 3602                       		move.w	d2,d3
000161EC D643                       		add.w	d3,d3
000161EE 43F8 D000                  		lea	($FFFFD000).w,a1
000161F2 3029 0008                  		move.w	8(a1),d0
000161F6 9068 0008                  		sub.w	8(a0),d0
000161FA D042                       		add.w	d2,d0
000161FC B043                       		cmp.w	d3,d0
000161FE 6400                       		bcc.s	locret_1572E
00016200 3229 000C                  		move.w	$C(a1),d1
00016204 9268 000C                  		sub.w	$C(a0),d1
00016208 0641 0030                  		addi.w	#$30,d1
0001620C 0C41 0030                  		cmpi.w	#$30,d1
00016210 6400                       		bcc.s	locret_1572E
00016212 0829 0001 0022             		btst	#1,$22(a1)
00016218 6600                       		bne.s	locret_1572E
0001621A 3028 0036                  		move.w	$36(a0),d0
0001621E D169 0008                  		add.w	d0,8(a1)
00016222                            
00016222                            locret_1572E:
00016222 4E75                       		rts	
00016224                            
00016224                            ; ===========================================================================
00016224                            ; ---------------------------------------------------------------------------
00016224                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016224                            ; ---------------------------------------------------------------------------
00016224                            
00016224                            Obj69:					; XREF: Obj_Index
00016224 7000                       		moveq	#0,d0
00016226 1028 0024                  		move.b	$24(a0),d0
0001622A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001622E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016232                            ; ===========================================================================
00016232 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016234 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016236 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016238                            ; ===========================================================================
00016238                            
00016238                            Obj69_Main:				; XREF: Obj69_Index
00016238 5428 0024                  		addq.b	#2,$24(a0)
0001623C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016244 317C 4492 0002             		move.w	#$4492,2(a0)
0001624A 0028 0004 0001             		ori.b	#4,1(a0)
00016250 117C 0080 0019             		move.b	#$80,$19(a0)
00016256 7000                       		moveq	#0,d0
00016258 1028 0028                  		move.b	$28(a0),d0
0001625C 0240 000F                  		andi.w	#$F,d0
00016260 C0FC 003C                  		mulu.w	#$3C,d0
00016264 3140 0032                  		move.w	d0,$32(a0)
00016268 4A28 0028                  		tst.b	$28(a0)
0001626C 6A00                       		bpl.s	Obj69_Trapdoor
0001626E 5428 0024                  		addq.b	#2,$24(a0)
00016272 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001627A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016280 117C 0010 0019             		move.b	#$10,$19(a0)
00016286 117C 0002 001C             		move.b	#2,$1C(a0)
0001628C 7000                       		moveq	#0,d0
0001628E 1028 0028                  		move.b	$28(a0),d0	; get object type
00016292 3200                       		move.w	d0,d1
00016294 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016298 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001629C 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000162A0 3140 0032                  		move.w	d0,$32(a0)
000162A4 0241 0070                  		andi.w	#$70,d1
000162A8 0641 0010                  		addi.w	#$10,d1
000162AC E549                       		lsl.w	#2,d1
000162AE 5341                       		subq.w	#1,d1
000162B0 3141 0036                  		move.w	d1,$36(a0)
000162B4 6000                       		bra.s	Obj69_Spinner
000162B6                            ; ===========================================================================
000162B6                            
000162B6                            Obj69_Trapdoor:				; XREF: Obj69_Index
000162B6 5368 0030                  		subq.w	#1,$30(a0)
000162BA 6A00                       		bpl.s	Obj69_Animate
000162BC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000162C2 0868 0000 001C             		bchg	#0,$1C(a0)
000162C8 4A28 0001                  		tst.b	1(a0)
000162CC 6A00                       		bpl.s	Obj69_Animate
000162CE 303C 00BB                  		move.w	#$BB,d0
000162D2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play door sound
000162D8                            
000162D8                            Obj69_Animate:
000162D8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000162DE 4EB9 0000 B058             		jsr	AnimateSprite
000162E4 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000162E8 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000162EA 323C 004B                  		move.w	#$4B,d1
000162EE 343C 000C                  		move.w	#$C,d2
000162F2 3602                       		move.w	d2,d3
000162F4 5243                       		addq.w	#1,d3
000162F6 3828 0008                  		move.w	8(a0),d4
000162FA 6100 A0D6                  		bsr.w	SolidObject
000162FE 6000 9DAA                  		bra.w	MarkObjGone
00016302                            ; ===========================================================================
00016302                            
00016302                            Obj69_NotSolid:
00016302 0828 0003 0022             		btst	#3,$22(a0)
00016308 6700                       		beq.s	Obj69_Display
0001630A 43F8 D000                  		lea	($FFFFD000).w,a1
0001630E 08A9 0003 0022             		bclr	#3,$22(a1)
00016314 08A8 0003 0022             		bclr	#3,$22(a0)
0001631A 4228 0025                  		clr.b	$25(a0)
0001631E                            
0001631E                            Obj69_Display:
0001631E 6000 9D8A                  		bra.w	MarkObjGone
00016322                            ; ===========================================================================
00016322                            
00016322                            Obj69_Spinner:				; XREF: Obj69_Index
00016322 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016326 C068 0036                  		and.w	$36(a0),d0
0001632A 6600                       		bne.s	Obj69_Delay
0001632C 117C 0001 0034             		move.b	#1,$34(a0)
00016332                            
00016332                            Obj69_Delay:
00016332 4A28 0034                  		tst.b	$34(a0)
00016336 6700                       		beq.s	Obj69_Animate2
00016338 5368 0030                  		subq.w	#1,$30(a0)
0001633C 6A00                       		bpl.s	Obj69_Animate2
0001633E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016344 4228 0034                  		clr.b	$34(a0)
00016348 0868 0000 001C             		bchg	#0,$1C(a0)
0001634E                            
0001634E                            Obj69_Animate2:
0001634E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016354 4EB9 0000 B058             		jsr	AnimateSprite
0001635A 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001635E 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016360 323C 001B                  		move.w	#$1B,d1
00016364 343C 0007                  		move.w	#7,d2
00016368 3602                       		move.w	d2,d3
0001636A 5243                       		addq.w	#1,d3
0001636C 3828 0008                  		move.w	8(a0),d4
00016370 6100 A060                  		bsr.w	SolidObject
00016374 6000 9D34                  		bra.w	MarkObjGone
00016378                            ; ===========================================================================
00016378                            
00016378                            Obj69_NotSolid2:
00016378 0828 0003 0022             		btst	#3,$22(a0)
0001637E 6700                       		beq.s	Obj69_Display2
00016380 43F8 D000                  		lea	($FFFFD000).w,a1
00016384 08A9 0003 0022             		bclr	#3,$22(a1)
0001638A 08A8 0003 0022             		bclr	#3,$22(a0)
00016390 4228 0025                  		clr.b	$25(a0)
00016394                            
00016394                            Obj69_Display2:
00016394 6000 9D14                  		bra.w	MarkObjGone
00016398                            ; ===========================================================================
00016398                            Ani_obj69:
00016398                            	include "_anim\obj69.asm"
00016398                            ; ---------------------------------------------------------------------------
00016398                            ; Animation script - trapdoor (SBZ)
00016398                            ; ---------------------------------------------------------------------------
00016398 0000                       		dc.w byte_158AC-Ani_obj69
0001639A 0000                       		dc.w byte_158B2-Ani_obj69
0001639C 0000                       		dc.w byte_158B8-Ani_obj69
0001639E 0000                       		dc.w byte_158CC-Ani_obj69
000163A0 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000163A6 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163AC 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163B9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163C0 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163CD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163D4                            		even
000163D4                            		even
000163D4                            
000163D4                            ; ---------------------------------------------------------------------------
000163D4                            ; Sprite mappings - trapdoor (SBZ)
000163D4                            ; ---------------------------------------------------------------------------
000163D4                            Map_obj69:
000163D4                            	include "_maps\obj69.asm"
000163D4                            ; ---------------------------------------------------------------------------
000163D4                            ; Sprite mappings - trapdoor (SBZ)
000163D4                            ; ---------------------------------------------------------------------------
000163D4 0000                       		dc.w byte_158E6-Map_obj69
000163D6 0000                       		dc.w byte_158FB-Map_obj69
000163D8 0000                       		dc.w byte_15924-Map_obj69
000163DA 04                         byte_158E6:	dc.b 4
000163DB F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000163E0 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000163E5 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000163EA F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000163EF 08                         byte_158FB:	dc.b 8
000163F0 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000163F5 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000163FA 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000163FF 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016404 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016409 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001640E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016413 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016418 04                         byte_15924:	dc.b 4
00016419 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001641E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016423 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016428 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001642E 00                         		even
0001642E 00                         		even
0001642E                            
0001642E                            ; ---------------------------------------------------------------------------
0001642E                            ; Sprite mappings - spinning platforms (SBZ)
0001642E                            ; ---------------------------------------------------------------------------
0001642E                            Map_obj69a:
0001642E                            	include "_maps\obj69a.asm"
0001642E                            ; ---------------------------------------------------------------------------
0001642E                            ; Sprite mappings - spinning platforms (SBZ)
0001642E                            ; ---------------------------------------------------------------------------
0001642E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016432 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016436 0000                       		dc.w byte_15970-Map_obj69a
00016438 02                         byte_15944:	dc.b 2
00016439 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001643E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016443 02                         byte_1594F:	dc.b 2
00016444 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016449 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001644E 02                         byte_1595A:	dc.b 2
0001644F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016454 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016459 02                         byte_15965:	dc.b 2
0001645A F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001645F 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016464 02                         byte_15970:	dc.b 2
00016465 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001646A 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016470 00                         		even
00016470 00                         		even
00016470                            
00016470                            ; ===========================================================================
00016470                            ; ---------------------------------------------------------------------------
00016470                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016470                            ; ---------------------------------------------------------------------------
00016470                            
00016470                            Obj6A:					; XREF: Obj_Index
00016470 7000                       		moveq	#0,d0
00016472 1028 0024                  		move.b	$24(a0),d0
00016476 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001647A 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001647E                            ; ===========================================================================
0001647E 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016480 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016482                            ; ===========================================================================
00016482                            
00016482                            Obj6A_Main:				; XREF: Obj6A_Index
00016482 5428 0024                  		addq.b	#2,$24(a0)
00016486 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001648E 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016494 117C 0004 0001             		move.b	#4,1(a0)
0001649A 117C 0004 0018             		move.b	#4,$18(a0)
000164A0 117C 0020 0019             		move.b	#$20,$19(a0)
000164A6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164AC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000164B2 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000164B8 6400                       		bcc.s	Obj6A_Action
000164BA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164C0                            
000164C0                            Obj6A_Action:				; XREF: Obj6A_Index
000164C0 7000                       		moveq	#0,d0
000164C2 1028 0028                  		move.b	$28(a0),d0
000164C6 0240 0007                  		andi.w	#7,d0
000164CA D040                       		add.w	d0,d0
000164CC 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000164D0 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000164D4 3028 003A                  		move.w	$3A(a0),d0
000164D8 0240 FF80                  		andi.w	#$FF80,d0
000164DC 3238 F700                  		move.w	($FFFFF700).w,d1
000164E0 0441 0080                  		subi.w	#$80,d1
000164E4 0241 FF80                  		andi.w	#$FF80,d1
000164E8 9041                       		sub.w	d1,d0
000164EA 0C40 0280                  		cmpi.w	#$280,d0
000164EE 6200                       		bhi.s	Obj6A_Delete
000164F0 4EF9 0000 E002             		jmp	DisplaySprite
000164F6                            ; ===========================================================================
000164F6                            
000164F6                            Obj6A_Delete:
000164F6 4EF9 0000 E03E             		jmp	DeleteObject
000164FC                            ; ===========================================================================
000164FC 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016500 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016504 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016506                            ; ===========================================================================
00016506                            
00016506                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016506 4E75                       		rts	
00016508                            ; ===========================================================================
00016508                            
00016508                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016508 323C 0060                  		move.w	#$60,d1
0001650C 7000                       		moveq	#0,d0
0001650E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016512 0828 0000 0022             		btst	#0,$22(a0)
00016518 6700                       		beq.s	Obj6A_Animate01
0001651A 4440                       		neg.w	d0
0001651C D041                       		add.w	d1,d0
0001651E                            
0001651E                            Obj6A_Animate01:
0001651E 3228 003A                  		move.w	$3A(a0),d1
00016522 9240                       		sub.w	d0,d1
00016524 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016528 5328 001E                  		subq.b	#1,$1E(a0)
0001652C 6A00                       		bpl.s	loc_15A46
0001652E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016534 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001653A                            
0001653A                            loc_15A46:
0001653A 4A28 0001                  		tst.b	1(a0)
0001653E 6A00                       		bpl.s	locret_15A60
00016540 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016544 0240 000F                  		andi.w	#$F,d0
00016548 6600                       		bne.s	locret_15A60
0001654A 303C 00B0                  		move.w	#$B0,d0
0001654E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
00016554                            
00016554                            locret_15A60:
00016554 4E75                       		rts	
00016556                            ; ===========================================================================
00016556                            
00016556                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016556 323C 0030                  		move.w	#$30,d1
0001655A 7000                       		moveq	#0,d0
0001655C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016560 0828 0000 0022             		btst	#0,$22(a0)
00016566 6700                       		beq.s	Obj6A_Animate02
00016568 4440                       		neg.w	d0
0001656A 0640 0080                  		addi.w	#$80,d0
0001656E                            
0001656E                            Obj6A_Animate02:
0001656E 3228 0038                  		move.w	$38(a0),d1
00016572 9240                       		sub.w	d0,d1
00016574 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016578 5328 001E                  		subq.b	#1,$1E(a0)
0001657C 6A00                       		bpl.s	loc_15A96
0001657E 117C 0002 001E             		move.b	#2,$1E(a0)
00016584 0868 0000 001A             		bchg	#0,$1A(a0)
0001658A                            
0001658A                            loc_15A96:
0001658A 4A28 0001                  		tst.b	1(a0)
0001658E 6A00                       		bpl.s	locret_15AB0
00016590 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016594 0C00 0018                  		cmpi.b	#$18,d0
00016598 6600                       		bne.s	locret_15AB0
0001659A 303C 00B0                  		move.w	#$B0,d0
0001659E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
000165A4                            
000165A4                            locret_15AB0:
000165A4 4E75                       		rts	
000165A6                            ; ===========================================================================
000165A6                            
000165A6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000165A6 4A28 003D                  		tst.b	$3D(a0)
000165AA 6600                       		bne.s	Obj6A_Animate03
000165AC 3038 D008                  		move.w	($FFFFD008).w,d0
000165B0 0440 00C0                  		subi.w	#$C0,d0
000165B4 6500                       		bcs.s	loc_15B02
000165B6 9068 0008                  		sub.w	8(a0),d0
000165BA 6500                       		bcs.s	loc_15B02
000165BC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000165C0 0440 0080                  		subi.w	#$80,d0
000165C4 B068 000C                  		cmp.w	$C(a0),d0
000165C8 6400                       		bcc.s	locret_15B04
000165CA 0640 0100                  		addi.w	#$100,d0
000165CE B068 000C                  		cmp.w	$C(a0),d0
000165D2 6500                       		bcs.s	locret_15B04
000165D4 117C 0001 003D             		move.b	#1,$3D(a0)
000165DA 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000165E0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000165E6 117C 0002 001A             		move.b	#2,$1A(a0)
000165EC 303C 00B0                  		move.w	#$B0,d0
000165F0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
000165F6                            
000165F6                            loc_15B02:
000165F6 588F                       		addq.l	#4,sp
000165F8                            
000165F8                            locret_15B04:
000165F8 4E75                       		rts	
000165FA                            ; ===========================================================================
000165FA                            
000165FA                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000165FA 4EB9 0000 DFDC             		jsr	SpeedToPos
00016600 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016606 5328 001E                  		subq.b	#1,$1E(a0)
0001660A 6A00                       		bpl.s	locret_15B24
0001660C 117C 0002 001E             		move.b	#2,$1E(a0)
00016612 0868 0000 001A             		bchg	#0,$1A(a0)
00016618                            
00016618                            locret_15B24:
00016618 4E75                       		rts	
0001661A                            ; ===========================================================================
0001661A                            
0001661A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001661A 4A28 003D                  		tst.b	$3D(a0)
0001661E 6600                       		bne.s	Obj6A_Animate04
00016620 3038 D008                  		move.w	($FFFFD008).w,d0
00016624 0640 00E0                  		addi.w	#$E0,d0
00016628 9068 0008                  		sub.w	8(a0),d0
0001662C 6400                       		bcc.s	loc_15B74
0001662E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016632 0440 0080                  		subi.w	#$80,d0
00016636 B068 000C                  		cmp.w	$C(a0),d0
0001663A 6400                       		bcc.s	locret_15B76
0001663C 0640 0100                  		addi.w	#$100,d0
00016640 B068 000C                  		cmp.w	$C(a0),d0
00016644 6500                       		bcs.s	locret_15B76
00016646 117C 0001 003D             		move.b	#1,$3D(a0)
0001664C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016652 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016658 117C 0002 001A             		move.b	#2,$1A(a0)
0001665E 303C 00B0                  		move.w	#$B0,d0
00016662 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
00016668                            
00016668                            loc_15B74:
00016668 588F                       		addq.l	#4,sp
0001666A                            
0001666A                            locret_15B76:
0001666A 4E75                       		rts	
0001666C                            ; ===========================================================================
0001666C                            
0001666C                            Obj6A_Animate04:
0001666C 4EB9 0000 DFDC             		jsr	SpeedToPos
00016672 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016678 5328 001E                  		subq.b	#1,$1E(a0)
0001667C 6A00                       		bpl.s	locret_15B96
0001667E 117C 0002 001E             		move.b	#2,$1E(a0)
00016684 0868 0000 001A             		bchg	#0,$1A(a0)
0001668A                            
0001668A                            locret_15B96:
0001668A 4E75                       		rts	
0001668C                            ; ===========================================================================
0001668C                            ; ---------------------------------------------------------------------------
0001668C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001668C                            ; ---------------------------------------------------------------------------
0001668C                            Map_obj6A:
0001668C                            	include "_maps\obj6A.asm"
0001668C                            ; ---------------------------------------------------------------------------
0001668C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001668C                            ; ---------------------------------------------------------------------------
0001668C 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016690 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016694 07                         byte_15BA0:	dc.b 7
00016695 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001669A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001669F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166A4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166A9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166AE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166B3 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166B8 07                         byte_15BC4:	dc.b 7
000166B9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166BE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166C3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166C8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166CD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166D2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166D7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166DC 04                         byte_15BE8:	dc.b 4
000166DD E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166E2 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166E7 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166EC 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166F1 04                         byte_15BFD:	dc.b 4
000166F2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166F7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166FC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016701 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016706                            		even
00016706                            		even
00016706                            
00016706                            ; ===========================================================================
00016706                            ; ---------------------------------------------------------------------------
00016706                            ; Object 6B - stomper (SBZ)
00016706                            ; ---------------------------------------------------------------------------
00016706                            
00016706                            Obj6B:					; XREF: Obj_Index
00016706 7000                       		moveq	#0,d0
00016708 1028 0024                  		move.b	$24(a0),d0
0001670C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016710 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016714                            ; ===========================================================================
00016714 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016716 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016718                            
00016718 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001671C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016720 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016724 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016728 8040 0005                  		dc.b  $80, $40,	  0,   5
0001672C                            ; ===========================================================================
0001672C                            
0001672C                            Obj6B_Main:				; XREF: Obj6B_Index
0001672C 5428 0024                  		addq.b	#2,$24(a0)
00016730 7000                       		moveq	#0,d0
00016732 1028 0028                  		move.b	$28(a0),d0
00016736 E448                       		lsr.w	#2,d0
00016738 0240 001C                  		andi.w	#$1C,d0
0001673C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016740 115B 0019                  		move.b	(a3)+,$19(a0)
00016744 115B 0016                  		move.b	(a3)+,$16(a0)
00016748 E448                       		lsr.w	#2,d0
0001674A 1140 001A                  		move.b	d0,$1A(a0)
0001674E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016756 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001675C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016762 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016764 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001676A 6700                       		beq.s	Obj6B_SBZ3
0001676C                            
0001676C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001676C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016770 7000                       		moveq	#0,d0
00016772 1028 0023                  		move.b	$23(a0),d0
00016776 6700                       		beq.s	Obj6B_Delete
00016778 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001677E                            
0001677E                            Obj6B_Delete:
0001677E 4EF9 0000 E03E             		jmp	DeleteObject
00016784                            ; ===========================================================================
00016784                            
00016784                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016784 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001678A 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016790 6600                       		bne.s	Obj6B_SBZ12
00016792 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016796 7000                       		moveq	#0,d0
00016798 1028 0023                  		move.b	$23(a0),d0
0001679C 6700                       		beq.s	Obj6B_SBZ12
0001679E 0832 0000 0002             		btst	#0,2(a2,d0.w)
000167A4 6700                       		beq.s	Obj6B_SBZ12
000167A6 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167AA 60C0                       		bra.s	Obj6B_ChkGone
000167AC                            ; ===========================================================================
000167AC                            
000167AC                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167AC 0028 0004 0001             		ori.b	#4,1(a0)
000167B2 117C 0004 0018             		move.b	#4,$18(a0)
000167B8 3168 0008 0034             		move.w	8(a0),$34(a0)
000167BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000167C4 7000                       		moveq	#0,d0
000167C6 101B                       		move.b	(a3)+,d0
000167C8 3140 003C                  		move.w	d0,$3C(a0)
000167CC 7000                       		moveq	#0,d0
000167CE 1028 0028                  		move.b	$28(a0),d0
000167D2 6A00                       		bpl.s	Obj6B_Action
000167D4 0200 000F                  		andi.b	#$F,d0
000167D8 1140 003E                  		move.b	d0,$3E(a0)
000167DC 1153 0028                  		move.b	(a3),$28(a0)
000167E0 0C13 0005                  		cmpi.b	#5,(a3)
000167E4 6600                       		bne.s	Obj6B_ChkGone2
000167E6 08E8 0004 0001             		bset	#4,1(a0)
000167EC                            
000167EC                            Obj6B_ChkGone2:
000167EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167F0 7000                       		moveq	#0,d0
000167F2 1028 0023                  		move.b	$23(a0),d0
000167F6 6700                       		beq.s	Obj6B_Action
000167F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167FE                            
000167FE                            Obj6B_Action:				; XREF: Obj6B_Index
000167FE 3F28 0008                  		move.w	8(a0),-(sp)
00016802 7000                       		moveq	#0,d0
00016804 1028 0028                  		move.b	$28(a0),d0
00016808 0240 000F                  		andi.w	#$F,d0
0001680C D040                       		add.w	d0,d0
0001680E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016812 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016816 381F                       		move.w	(sp)+,d4
00016818 4A28 0001                  		tst.b	1(a0)
0001681C 6A00                       		bpl.s	Obj6B_ChkDel
0001681E 7200                       		moveq	#0,d1
00016820 1228 0019                  		move.b	$19(a0),d1
00016824 0641 000B                  		addi.w	#$B,d1
00016828 7400                       		moveq	#0,d2
0001682A 1428 0016                  		move.b	$16(a0),d2
0001682E 3602                       		move.w	d2,d3
00016830 5243                       		addq.w	#1,d3
00016832 6100 9B9E                  		bsr.w	SolidObject
00016836                            
00016836                            Obj6B_ChkDel:
00016836 3028 0034                  		move.w	$34(a0),d0
0001683A 0240 FF80                  		andi.w	#$FF80,d0
0001683E 3238 F700                  		move.w	($FFFFF700).w,d1
00016842 0441 0080                  		subi.w	#$80,d1
00016846 0241 FF80                  		andi.w	#$FF80,d1
0001684A 9041                       		sub.w	d1,d0
0001684C 0C40 0280                  		cmpi.w	#$280,d0
00016850 6200                       		bhi.s	loc_15D64
00016852 4EF9 0000 E002             		jmp	DisplaySprite
00016858                            ; ===========================================================================
00016858                            
00016858                            loc_15D64:
00016858 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001685E 6600                       		bne.s	Obj6B_Delete2
00016860 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016864 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016868 7000                       		moveq	#0,d0
0001686A 1028 0023                  		move.b	$23(a0),d0
0001686E 6700                       		beq.s	Obj6B_Delete2
00016870 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016876                            
00016876                            Obj6B_Delete2:
00016876 4EF9 0000 E03E             		jmp	DeleteObject
0001687C                            ; ===========================================================================
0001687C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016880 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016884 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016888                            ; ===========================================================================
00016888                            
00016888                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016888 4E75                       		rts	
0001688A                            ; ===========================================================================
0001688A                            
0001688A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001688A 4A28 0038                  		tst.b	$38(a0)
0001688E 6600                       		bne.s	loc_15DB4
00016890 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016894 7000                       		moveq	#0,d0
00016896 1028 003E                  		move.b	$3E(a0),d0
0001689A 0832 0000 0000             		btst	#0,(a2,d0.w)
000168A0 6700                       		beq.s	loc_15DC2
000168A2 117C 0001 0038             		move.b	#1,$38(a0)
000168A8                            
000168A8                            loc_15DB4:
000168A8 3028 003C                  		move.w	$3C(a0),d0
000168AC B068 003A                  		cmp.w	$3A(a0),d0
000168B0 6700                       		beq.s	loc_15DE0
000168B2 5468 003A                  		addq.w	#2,$3A(a0)
000168B6                            
000168B6                            loc_15DC2:
000168B6 3028 003A                  		move.w	$3A(a0),d0
000168BA 0828 0000 0022             		btst	#0,$22(a0)
000168C0 6700                       		beq.s	loc_15DD4
000168C2 4440                       		neg.w	d0
000168C4 0640 0080                  		addi.w	#$80,d0
000168C8                            
000168C8                            loc_15DD4:
000168C8 3228 0034                  		move.w	$34(a0),d1
000168CC 9240                       		sub.w	d0,d1
000168CE 3141 0008                  		move.w	d1,8(a0)
000168D2 4E75                       		rts	
000168D4                            ; ===========================================================================
000168D4                            
000168D4                            loc_15DE0:
000168D4 5228 0028                  		addq.b	#1,$28(a0)
000168D8 317C 00B4 0036             		move.w	#$B4,$36(a0)
000168DE 4228 0038                  		clr.b	$38(a0)
000168E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168E6 7000                       		moveq	#0,d0
000168E8 1028 0023                  		move.b	$23(a0),d0
000168EC 67C8                       		beq.s	loc_15DC2
000168EE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168F4 60C0                       		bra.s	loc_15DC2
000168F6                            ; ===========================================================================
000168F6                            
000168F6                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000168F6 4A28 0038                  		tst.b	$38(a0)
000168FA 6600                       		bne.s	loc_15E14
000168FC 5368 0036                  		subq.w	#1,$36(a0)
00016900 6600                       		bne.s	loc_15E1E
00016902 117C 0001 0038             		move.b	#1,$38(a0)
00016908                            
00016908                            loc_15E14:
00016908 4A68 003A                  		tst.w	$3A(a0)
0001690C 6700                       		beq.s	loc_15E3C
0001690E 5568 003A                  		subq.w	#2,$3A(a0)
00016912                            
00016912                            loc_15E1E:
00016912 3028 003A                  		move.w	$3A(a0),d0
00016916 0828 0000 0022             		btst	#0,$22(a0)
0001691C 6700                       		beq.s	loc_15E30
0001691E 4440                       		neg.w	d0
00016920 0640 0080                  		addi.w	#$80,d0
00016924                            
00016924                            loc_15E30:
00016924 3228 0034                  		move.w	$34(a0),d1
00016928 9240                       		sub.w	d0,d1
0001692A 3141 0008                  		move.w	d1,8(a0)
0001692E 4E75                       		rts	
00016930                            ; ===========================================================================
00016930                            
00016930                            loc_15E3C:
00016930 5328 0028                  		subq.b	#1,$28(a0)
00016934 4228 0038                  		clr.b	$38(a0)
00016938 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001693C 7000                       		moveq	#0,d0
0001693E 1028 0023                  		move.b	$23(a0),d0
00016942 67CE                       		beq.s	loc_15E1E
00016944 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001694A 60C6                       		bra.s	loc_15E1E
0001694C                            ; ===========================================================================
0001694C                            
0001694C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001694C 4A28 0038                  		tst.b	$38(a0)
00016950 6600                       		bne.s	loc_15E7C
00016952 4A68 003A                  		tst.w	$3A(a0)
00016956 6700                       		beq.s	loc_15E6A
00016958 5368 003A                  		subq.w	#1,$3A(a0)
0001695C 6000                       		bra.s	loc_15E8E
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            loc_15E6A:
0001695E 5368 0036                  		subq.w	#1,$36(a0)
00016962 6A00                       		bpl.s	loc_15E8E
00016964 317C 003C 0036             		move.w	#$3C,$36(a0)
0001696A 117C 0001 0038             		move.b	#1,$38(a0)
00016970                            
00016970                            loc_15E7C:
00016970 5068 003A                  		addq.w	#8,$3A(a0)
00016974 3028 003A                  		move.w	$3A(a0),d0
00016978 B068 003C                  		cmp.w	$3C(a0),d0
0001697C 6600                       		bne.s	loc_15E8E
0001697E 4228 0038                  		clr.b	$38(a0)
00016982                            
00016982                            loc_15E8E:
00016982 3028 003A                  		move.w	$3A(a0),d0
00016986 0828 0000 0022             		btst	#0,$22(a0)
0001698C 6700                       		beq.s	loc_15EA0
0001698E 4440                       		neg.w	d0
00016990 0640 0038                  		addi.w	#$38,d0
00016994                            
00016994                            loc_15EA0:
00016994 3228 0030                  		move.w	$30(a0),d1
00016998 D240                       		add.w	d0,d1
0001699A 3141 000C                  		move.w	d1,$C(a0)
0001699E 4E75                       		rts	
000169A0                            ; ===========================================================================
000169A0                            
000169A0                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000169A0 4A28 0038                  		tst.b	$38(a0)
000169A4 6600                       		bne.s	loc_15ED0
000169A6 4A68 003A                  		tst.w	$3A(a0)
000169AA 6700                       		beq.s	loc_15EBE
000169AC 5168 003A                  		subq.w	#8,$3A(a0)
000169B0 6000                       		bra.s	loc_15EF0
000169B2                            ; ===========================================================================
000169B2                            
000169B2                            loc_15EBE:
000169B2 5368 0036                  		subq.w	#1,$36(a0)
000169B6 6A00                       		bpl.s	loc_15EF0
000169B8 317C 003C 0036             		move.w	#$3C,$36(a0)
000169BE 117C 0001 0038             		move.b	#1,$38(a0)
000169C4                            
000169C4                            loc_15ED0:
000169C4 3028 003A                  		move.w	$3A(a0),d0
000169C8 B068 003C                  		cmp.w	$3C(a0),d0
000169CC 6700                       		beq.s	loc_15EE0
000169CE 5068 003A                  		addq.w	#8,$3A(a0)
000169D2 6000                       		bra.s	loc_15EF0
000169D4                            ; ===========================================================================
000169D4                            
000169D4                            loc_15EE0:
000169D4 5368 0036                  		subq.w	#1,$36(a0)
000169D8 6A00                       		bpl.s	loc_15EF0
000169DA 317C 003C 0036             		move.w	#$3C,$36(a0)
000169E0 4228 0038                  		clr.b	$38(a0)
000169E4                            
000169E4                            loc_15EF0:
000169E4 3028 003A                  		move.w	$3A(a0),d0
000169E8 0828 0000 0022             		btst	#0,$22(a0)
000169EE 6700                       		beq.s	loc_15F02
000169F0 4440                       		neg.w	d0
000169F2 0640 0038                  		addi.w	#$38,d0
000169F6                            
000169F6                            loc_15F02:
000169F6 3228 0030                  		move.w	$30(a0),d1
000169FA D240                       		add.w	d0,d1
000169FC 3141 000C                  		move.w	d1,$C(a0)
00016A00 4E75                       		rts	
00016A02                            ; ===========================================================================
00016A02                            
00016A02                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016A02 4A28 0038                  		tst.b	$38(a0)
00016A06 6600                       		bne.s	loc_15F3E
00016A08 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A0C 7000                       		moveq	#0,d0
00016A0E 1028 003E                  		move.b	$3E(a0),d0
00016A12 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A18 6700                       		beq.s	locret_15F5C
00016A1A 117C 0001 0038             		move.b	#1,$38(a0)
00016A20 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A24 7000                       		moveq	#0,d0
00016A26 1028 0023                  		move.b	$23(a0),d0
00016A2A 6700                       		beq.s	loc_15F3E
00016A2C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A32                            
00016A32                            loc_15F3E:
00016A32 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A3A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A42 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A48 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A4E 6700                       		beq.s	loc_15F5E
00016A50                            
00016A50                            locret_15F5C:
00016A50 4E75                       		rts	
00016A52                            ; ===========================================================================
00016A52                            
00016A52                            loc_15F5E:
00016A52 4228 0028                  		clr.b	$28(a0)
00016A56 4228 0038                  		clr.b	$38(a0)
00016A5A 4E75                       		rts	
00016A5C                            ; ===========================================================================
00016A5C                            ; ---------------------------------------------------------------------------
00016A5C                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A5C                            ; ---------------------------------------------------------------------------
00016A5C                            Map_obj6B:
00016A5C                            	include "_maps\obj6B.asm"
00016A5C                            ; ---------------------------------------------------------------------------
00016A5C                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A5C                            ; ---------------------------------------------------------------------------
00016A5C 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016A60 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016A64 0000                       		dc.w byte_15FB0-Map_obj6B
00016A66 04                         byte_15F72:	dc.b 4
00016A67 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016A6C F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016A71 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016A76 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016A7B 08                         byte_15F87:	dc.b 8
00016A7C E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016A81 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016A86 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016A8B E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016A90 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016A95 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016A9A 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016A9F 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016AA4 0E                         byte_15FB0:	dc.b $E
00016AA5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AAA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AAF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016AB4 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016AB9 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016ABE C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016AC3 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016AC8 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016ACD E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016AD2 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016AD7 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016ADC 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016AE1 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016AE6 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016AEC 00                         		even
00016AEC 00                         		even
00016AEC                            
00016AEC                            ; ===========================================================================
00016AEC                            ; ---------------------------------------------------------------------------
00016AEC                            ; Object 6C - vanishing	platforms (SBZ)
00016AEC                            ; ---------------------------------------------------------------------------
00016AEC                            
00016AEC                            Obj6C:					; XREF: Obj_Index
00016AEC 7000                       		moveq	#0,d0
00016AEE 1028 0024                  		move.b	$24(a0),d0
00016AF2 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016AF6 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016AFA                            ; ===========================================================================
00016AFA 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016AFC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AFE 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B00 0000                       		dc.w loc_16068-Obj6C_Index
00016B02                            ; ===========================================================================
00016B02                            
00016B02                            Obj6C_Main:				; XREF: Obj6C_Index
00016B02 5C28 0024                  		addq.b	#6,$24(a0)
00016B06 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B0E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B14 0028 0004 0001             		ori.b	#4,1(a0)
00016B1A 117C 0010 0019             		move.b	#$10,$19(a0)
00016B20 117C 0004 0018             		move.b	#4,$18(a0)
00016B26 7000                       		moveq	#0,d0
00016B28 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B2C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B30 5240                       		addq.w	#1,d0		; add 1
00016B32 EF48                       		lsl.w	#7,d0		; multiply by $80
00016B34 3200                       		move.w	d0,d1
00016B36 5340                       		subq.w	#1,d0
00016B38 3140 0030                  		move.w	d0,$30(a0)
00016B3C 3140 0032                  		move.w	d0,$32(a0)
00016B40 7000                       		moveq	#0,d0
00016B42 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B46 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B4A 0641 0080                  		addi.w	#$80,d1
00016B4E C0C1                       		mulu.w	d1,d0
00016B50 E088                       		lsr.l	#8,d0
00016B52 3140 0036                  		move.w	d0,$36(a0)
00016B56 5341                       		subq.w	#1,d1
00016B58 3141 0038                  		move.w	d1,$38(a0)
00016B5C                            
00016B5C                            loc_16068:				; XREF: Obj6C_Index
00016B5C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B60 9068 0036                  		sub.w	$36(a0),d0
00016B64 C068 0038                  		and.w	$38(a0),d0
00016B68 6600                       		bne.s	Obj6C_Animate
00016B6A 5928 0024                  		subq.b	#4,$24(a0)
00016B6E 6000                       		bra.s	Obj6C_Vanish
00016B70                            ; ===========================================================================
00016B70                            
00016B70                            Obj6C_Animate:
00016B70 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B76 4EB9 0000 B058             		jsr	AnimateSprite
00016B7C 6000 952C                  		bra.w	MarkObjGone
00016B80                            ; ===========================================================================
00016B80                            
00016B80                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016B80 5368 0030                  		subq.w	#1,$30(a0)
00016B84 6A00                       		bpl.s	loc_160AA
00016B86 317C 007F 0030             		move.w	#127,$30(a0)
00016B8C 4A28 001C                  		tst.b	$1C(a0)
00016B90 6700                       		beq.s	loc_160A4
00016B92 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016B98                            
00016B98                            loc_160A4:
00016B98 0868 0000 001C             		bchg	#0,$1C(a0)
00016B9E                            
00016B9E                            loc_160AA:
00016B9E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BA4 4EB9 0000 B058             		jsr	AnimateSprite
00016BAA 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BB0 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016BB2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016BB8 6600                       		bne.s	loc_160D6
00016BBA 7200                       		moveq	#0,d1
00016BBC 1228 0019                  		move.b	$19(a0),d1
00016BC0 4EB9 0000 7C14             		jsr	(PlatformObject).l
00016BC6 6000 94E2                  		bra.w	MarkObjGone
00016BCA                            ; ===========================================================================
00016BCA                            
00016BCA                            loc_160D6:
00016BCA 7200                       		moveq	#0,d1
00016BCC 1228 0019                  		move.b	$19(a0),d1
00016BD0 4EB9 0000 7D88             		jsr	(ExitPlatform).l
00016BD6 3428 0008                  		move.w	8(a0),d2
00016BDA 4EB9 0000 82F2             		jsr	(MvSonicOnPtfm2).l
00016BE0 6000 94C8                  		bra.w	MarkObjGone
00016BE4                            ; ===========================================================================
00016BE4                            
00016BE4                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016BE4 0828 0003 0022             		btst	#3,$22(a0)
00016BEA 6700                       		beq.s	Obj6C_Display
00016BEC 43F8 D000                  		lea	($FFFFD000).w,a1
00016BF0 08A9 0003 0022             		bclr	#3,$22(a1)
00016BF6 08A8 0003 0022             		bclr	#3,$22(a0)
00016BFC 117C 0002 0024             		move.b	#2,$24(a0)
00016C02 4228 0025                  		clr.b	$25(a0)
00016C06                            
00016C06                            Obj6C_Display:
00016C06 6000 94A2                  		bra.w	MarkObjGone
00016C0A                            ; ===========================================================================
00016C0A                            Ani_obj6C:
00016C0A                            	include "_anim\obj6C.asm"
00016C0A                            ; ---------------------------------------------------------------------------
00016C0A                            ; Animation script - vanishing platforms (SBZ)
00016C0A                            ; ---------------------------------------------------------------------------
00016C0A 0000                       		dc.w byte_1611A-Ani_obj6C
00016C0C 0000                       		dc.w byte_16122-Ani_obj6C
00016C0E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C16 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C1E                            		even
00016C1E                            		even
00016C1E                            
00016C1E                            ; ---------------------------------------------------------------------------
00016C1E                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C1E                            ; ---------------------------------------------------------------------------
00016C1E                            Map_obj6C:
00016C1E                            	include "_maps\obj6C.asm"
00016C1E                            ; ---------------------------------------------------------------------------
00016C1E                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C1E                            ; ---------------------------------------------------------------------------
00016C1E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C22 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C26 01                         byte_16132:	dc.b 1
00016C27 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C2C 01                         byte_16138:	dc.b 1
00016C2D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C32 01                         byte_1613E:	dc.b 1
00016C33 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C38 00                         byte_16144:	dc.b 0
00016C3A 00                         		even
00016C3A 00                         		even
00016C3A                            
00016C3A                            ; ===========================================================================
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A                            ; Object 6E - electrocution orbs (SBZ)
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A                            
00016C3A                            Obj6E:					; XREF: Obj_Index
00016C3A 7000                       		moveq	#0,d0
00016C3C 1028 0024                  		move.b	$24(a0),d0
00016C40 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C44 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C48                            ; ===========================================================================
00016C48 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C4A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C4C                            ; ===========================================================================
00016C4C                            
00016C4C                            Obj6E_Main:				; XREF: Obj6E_Index
00016C4C 5428 0024                  		addq.b	#2,$24(a0)
00016C50 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016C58 317C 047E 0002             		move.w	#$47E,2(a0)
00016C5E 0028 0004 0001             		ori.b	#4,1(a0)
00016C64 117C 0028 0019             		move.b	#$28,$19(a0)
00016C6A 7000                       		moveq	#0,d0
00016C6C 1028 0028                  		move.b	$28(a0),d0	; read object type
00016C70 E948                       		lsl.w	#4,d0		; multiply by $10
00016C72 5340                       		subq.w	#1,d0
00016C74 3140 0034                  		move.w	d0,$34(a0)
00016C78                            
00016C78                            Obj6E_Shock:				; XREF: Obj6E_Index
00016C78 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016C7C C068 0034                  		and.w	$34(a0),d0
00016C80 6600                       		bne.s	Obj6E_Animate
00016C82 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016C88 4A28 0001                  		tst.b	1(a0)
00016C8C 6A00                       		bpl.s	Obj6E_Animate
00016C8E 303C 00B1                  		move.w	#$B1,d0
00016C92 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play electricity sound
00016C98                            
00016C98                            Obj6E_Animate:
00016C98 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016C9E 4EB9 0000 B058             		jsr	AnimateSprite
00016CA4 117C 0000 0020             		move.b	#0,$20(a0)
00016CAA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CB0 6600                       		bne.s	Obj6E_Display	; if not, branch
00016CB2 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016CB8                            
00016CB8                            Obj6E_Display:
00016CB8 6000 93F0                  		bra.w	MarkObjGone
00016CBC                            ; ===========================================================================
00016CBC                            Ani_obj6E:
00016CBC                            	include "_anim\obj6E.asm"
00016CBC                            ; ---------------------------------------------------------------------------
00016CBC                            ; Animation script - electrocution orbs (SBZ)
00016CBC                            ; ---------------------------------------------------------------------------
00016CBC 0000                       		dc.w byte_161CC-Ani_obj6E
00016CBE 0000                       		dc.w byte_161D0-Ani_obj6E
00016CC0 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016CC4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016CD4                            		even
00016CD4                            		even
00016CD4                            
00016CD4                            ; ---------------------------------------------------------------------------
00016CD4                            ; Sprite mappings - electrocution orbs (SBZ)
00016CD4                            ; ---------------------------------------------------------------------------
00016CD4                            Map_obj6E:
00016CD4                            	include "_maps\obj6E.asm"
00016CD4                            Map_26ed:
00016CD4 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016CD6 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016CD8 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016CDA 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016CDC 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016CDE 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016CE0 01                         Map_26ed_C: 	dc.b $1
00016CE1 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016CE6 02                         Map_26ed_12: 	dc.b $2
00016CE7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CEC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CF1 06                         Map_26ed_1D: 	dc.b $6
00016CF2 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CF7 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CFC F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D01 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D06 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D0B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D10 08                         Map_26ed_3C: 	dc.b $8
00016D11 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D16 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D1B F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D20 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D25 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D2A F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D2F F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D34 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D39 06                         Map_26ed_65: 	dc.b $6
00016D3A F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D3F 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D44 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D49 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D4E F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D53 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D58 04                         Map_26ed_84: 	dc.b $4
00016D59 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D5E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D63 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D68 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D6E 00                         	even
00016D6E 00                         	even
00016D6E                            
00016D6E                            ; ===========================================================================
00016D6E                            ; ---------------------------------------------------------------------------
00016D6E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016D6E                            ; ---------------------------------------------------------------------------
00016D6E                            
00016D6E                            Obj6F:					; XREF: Obj_Index
00016D6E 7000                       		moveq	#0,d0
00016D70 1028 0024                  		move.b	$24(a0),d0
00016D74 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016D78 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016D7C 3028 0030                  		move.w	$30(a0),d0
00016D80 0240 FF80                  		andi.w	#$FF80,d0
00016D84 3238 F700                  		move.w	($FFFFF700).w,d1
00016D88 0441 0080                  		subi.w	#$80,d1
00016D8C 0241 FF80                  		andi.w	#$FF80,d1
00016D90 9041                       		sub.w	d1,d0
00016D92 0C40 0280                  		cmpi.w	#$280,d0
00016D96 6200                       		bhi.s	loc_1629A
00016D98                            
00016D98                            Obj6F_Display:
00016D98 4EF9 0000 E002             		jmp	DisplaySprite
00016D9E                            ; ===========================================================================
00016D9E                            
00016D9E                            loc_1629A:
00016D9E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016DA4 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016DA6 0C40 FF80                  		cmpi.w	#-$80,d0
00016DAA 64EC                       		bcc.s	Obj6F_Display
00016DAC                            
00016DAC                            Obj6F_Act1or2:
00016DAC 1028 002F                  		move.b	$2F(a0),d0
00016DB0 6A00                       		bpl.s	Obj6F_Delete
00016DB2 0240 007F                  		andi.w	#$7F,d0
00016DB6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DBA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016DC0                            
00016DC0                            Obj6F_Delete:
00016DC0 4EF9 0000 E03E             		jmp	DeleteObject
00016DC6                            ; ===========================================================================
00016DC6 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016DC8 0000                       		dc.w loc_163D8-Obj6F_Index
00016DCA                            ; ===========================================================================
00016DCA                            
00016DCA                            Obj6F_Main:				; XREF: Obj6F_Index
00016DCA 1028 0028                  		move.b	$28(a0),d0
00016DCE 6B00 0000                  		bmi.w	loc_16380
00016DD2 5428 0024                  		addq.b	#2,$24(a0)
00016DD6 217C 0001 642E 0004        		move.l	#Map_obj69a,4(a0)
00016DDE 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016DE4 117C 0010 0019             		move.b	#$10,$19(a0)
00016DEA 0028 0004 0001             		ori.b	#4,1(a0)
00016DF0 117C 0004 0018             		move.b	#4,$18(a0)
00016DF6 7000                       		moveq	#0,d0
00016DF8 1028 0028                  		move.b	$28(a0),d0
00016DFC 3200                       		move.w	d0,d1
00016DFE E648                       		lsr.w	#3,d0
00016E00 0240 001E                  		andi.w	#$1E,d0
00016E04 45FA 0000                  		lea	off_164A6(pc),a2
00016E08 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E0C 315A 0038                  		move.w	(a2)+,$38(a0)
00016E10 315A 0030                  		move.w	(a2)+,$30(a0)
00016E14 214A 003C                  		move.l	a2,$3C(a0)
00016E18 0241 000F                  		andi.w	#$F,d1
00016E1C E549                       		lsl.w	#2,d1
00016E1E 1141 0038                  		move.b	d1,$38(a0)
00016E22 117C 0004 003A             		move.b	#4,$3A(a0)
00016E28 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E2C 6700                       		beq.s	loc_16356
00016E2E 117C 0001 003B             		move.b	#1,$3B(a0)
00016E34 4428 003A                  		neg.b	$3A(a0)
00016E38 7200                       		moveq	#0,d1
00016E3A 1228 0038                  		move.b	$38(a0),d1
00016E3E D228 003A                  		add.b	$3A(a0),d1
00016E42 B228 0039                  		cmp.b	$39(a0),d1
00016E46 6500                       		bcs.s	loc_16352
00016E48 1001                       		move.b	d1,d0
00016E4A 7200                       		moveq	#0,d1
00016E4C 4A00                       		tst.b	d0
00016E4E 6A00                       		bpl.s	loc_16352
00016E50 1228 0039                  		move.b	$39(a0),d1
00016E54 5901                       		subq.b	#4,d1
00016E56                            
00016E56                            loc_16352:
00016E56 1141 0038                  		move.b	d1,$38(a0)
00016E5A                            
00016E5A                            loc_16356:
00016E5A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016E60 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016E66 4A41                       		tst.w	d1
00016E68 6600                       		bne.s	loc_1636C
00016E6A 117C 0001 001C             		move.b	#1,$1C(a0)
00016E70                            
00016E70                            loc_1636C:
00016E70 0C41 0008                  		cmpi.w	#8,d1
00016E74 6600                       		bne.s	loc_16378
00016E76 117C 0000 001C             		move.b	#0,$1C(a0)
00016E7C                            
00016E7C                            loc_16378:
00016E7C 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016E80 6000 0000                  		bra.w	loc_163D8
00016E84                            ; ===========================================================================
00016E84                            
00016E84                            loc_16380:				; XREF: Obj6F_Main
00016E84 1140 002F                  		move.b	d0,$2F(a0)
00016E88 0240 007F                  		andi.w	#$7F,d0
00016E8C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016E90 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016E96 6700                       		beq.s	loc_1639A
00016E98 4EF9 0000 E03E             		jmp	DeleteObject
00016E9E                            ; ===========================================================================
00016E9E                            
00016E9E                            loc_1639A:
00016E9E D040                       		add.w	d0,d0
00016EA0 0240 001E                  		andi.w	#$1E,d0
00016EA4 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00016EAA D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EAE 321A                       		move.w	(a2)+,d1
00016EB0 2248                       		movea.l	a0,a1
00016EB2 6000                       		bra.s	Obj6F_LoadPform
00016EB4                            ; ===========================================================================
00016EB4                            
00016EB4                            Obj6F_Loop:
00016EB4 4EB9 0000 E488             		jsr	SingleObjLoad
00016EBA 6600                       		bne.s	loc_163D0
00016EBC                            
00016EBC                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EBC 12BC 006F                  		move.b	#$6F,0(a1)
00016EC0 335A 0008                  		move.w	(a2)+,8(a1)
00016EC4 335A 000C                  		move.w	(a2)+,$C(a1)
00016EC8 301A                       		move.w	(a2)+,d0
00016ECA 1340 0028                  		move.b	d0,$28(a1)
00016ECE                            
00016ECE                            loc_163D0:
00016ECE 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016ED2                            
00016ED2 588F                       		addq.l	#4,sp
00016ED4 4E75                       		rts	
00016ED6                            ; ===========================================================================
00016ED6                            
00016ED6                            loc_163D8:				; XREF: Obj6F_Index
00016ED6 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016EDC 4EB9 0000 B058             		jsr	AnimateSprite
00016EE2 4A28 001A                  		tst.b	$1A(a0)
00016EE6 6600                       		bne.s	loc_16404
00016EE8 3F28 0008                  		move.w	8(a0),-(sp)
00016EEC 6100 0000                  		bsr.w	loc_16424
00016EF0 323C 001B                  		move.w	#$1B,d1
00016EF4 343C 0007                  		move.w	#7,d2
00016EF8 3602                       		move.w	d2,d3
00016EFA 5243                       		addq.w	#1,d3
00016EFC 381F                       		move.w	(sp)+,d4
00016EFE 6000 94D2                  		bra.w	SolidObject
00016F02                            ; ===========================================================================
00016F02                            
00016F02                            loc_16404:
00016F02 0828 0003 0022             		btst	#3,$22(a0)
00016F08 6700                       		beq.s	loc_16420
00016F0A 43F8 D000                  		lea	($FFFFD000).w,a1
00016F0E 08A9 0003 0022             		bclr	#3,$22(a1)
00016F14 08A8 0003 0022             		bclr	#3,$22(a0)
00016F1A 4228 0025                  		clr.b	$25(a0)
00016F1E                            
00016F1E                            loc_16420:
00016F1E 6000 0002                  		bra.w	*+4
00016F22                            
00016F22                            loc_16424:
00016F22 3028 0008                  		move.w	8(a0),d0
00016F26 B068 0034                  		cmp.w	$34(a0),d0
00016F2A 6600                       		bne.s	loc_16484
00016F2C 3028 000C                  		move.w	$C(a0),d0
00016F30 B068 0036                  		cmp.w	$36(a0),d0
00016F34 6600                       		bne.s	loc_16484
00016F36 7200                       		moveq	#0,d1
00016F38 1228 0038                  		move.b	$38(a0),d1
00016F3C D228 003A                  		add.b	$3A(a0),d1
00016F40 B228 0039                  		cmp.b	$39(a0),d1
00016F44 6500                       		bcs.s	loc_16456
00016F46 1001                       		move.b	d1,d0
00016F48 7200                       		moveq	#0,d1
00016F4A 4A00                       		tst.b	d0
00016F4C 6A00                       		bpl.s	loc_16456
00016F4E 1228 0039                  		move.b	$39(a0),d1
00016F52 5901                       		subq.b	#4,d1
00016F54                            
00016F54                            loc_16456:
00016F54 1141 0038                  		move.b	d1,$38(a0)
00016F58 2268 003C                  		movea.l	$3C(a0),a1
00016F5C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016F62 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016F68 4A41                       		tst.w	d1
00016F6A 6600                       		bne.s	loc_16474
00016F6C 117C 0001 001C             		move.b	#1,$1C(a0)
00016F72                            
00016F72                            loc_16474:
00016F72 0C41 0008                  		cmpi.w	#8,d1
00016F76 6600                       		bne.s	loc_16480
00016F78 117C 0000 001C             		move.b	#0,$1C(a0)
00016F7E                            
00016F7E                            loc_16480:
00016F7E 6100 BFC4                  		bsr.w	Obj63_ChangeDir
00016F82                            
00016F82                            loc_16484:
00016F82 4EF9 0000 DFDC             		jmp	SpeedToPos
00016F88                            ; ===========================================================================
00016F88                            Ani_obj6F:
00016F88                            	include "_anim\obj6F.asm"
00016F88                            ; ---------------------------------------------------------------------------
00016F88                            ; Animation script - platform on conveyor belt (SBZ)
00016F88                            ; ---------------------------------------------------------------------------
00016F88 0000                       		dc.w byte_1648E-Ani_obj6F
00016F8A 0000                       		dc.w byte_164A2-Ani_obj6F
00016F8C 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016F99 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016FA0 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FA4 00                         		even
00016FA4 00                         		even
00016FA4                            
00016FA4 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FAA 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FB0 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016FC4 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016FD8 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016FEC 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017000 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017014 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017028                            ; ===========================================================================
00017028                            ; ---------------------------------------------------------------------------
00017028                            ; Object 70 - large girder block (SBZ)
00017028                            ; ---------------------------------------------------------------------------
00017028                            
00017028                            Obj70:					; XREF: Obj_Index
00017028 7000                       		moveq	#0,d0
0001702A 1028 0024                  		move.b	$24(a0),d0
0001702E 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017032 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017036                            ; ===========================================================================
00017036 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017038 0000                       		dc.w Obj70_Action-Obj70_Index
0001703A                            ; ===========================================================================
0001703A                            
0001703A                            Obj70_Main:				; XREF: Obj70_Index
0001703A 5428 0024                  		addq.b	#2,$24(a0)
0001703E 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017046 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001704C 0028 0004 0001             		ori.b	#4,1(a0)
00017052 117C 0004 0018             		move.b	#4,$18(a0)
00017058 117C 0060 0019             		move.b	#$60,$19(a0)
0001705E 117C 0018 0016             		move.b	#$18,$16(a0)
00017064 3168 0008 0032             		move.w	8(a0),$32(a0)
0001706A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017070 6100 0000                  		bsr.w	Obj70_Move2
00017074                            
00017074                            Obj70_Action:				; XREF: Obj70_Index
00017074 3F28 0008                  		move.w	8(a0),-(sp)
00017078 4A68 003A                  		tst.w	$3A(a0)
0001707C 6700                       		beq.s	Obj70_Move
0001707E 5368 003A                  		subq.w	#1,$3A(a0)
00017082 6600                       		bne.s	Obj70_Solid
00017084                            
00017084                            Obj70_Move:
00017084 4EB9 0000 DFDC             		jsr	SpeedToPos
0001708A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001708E 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017090 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017094                            
00017094                            Obj70_Solid:
00017094 381F                       		move.w	(sp)+,d4
00017096 4A28 0001                  		tst.b	1(a0)
0001709A 6A00                       		bpl.s	Obj70_ChkDel
0001709C 7200                       		moveq	#0,d1
0001709E 1228 0019                  		move.b	$19(a0),d1
000170A2 0641 000B                  		addi.w	#$B,d1
000170A6 7400                       		moveq	#0,d2
000170A8 1428 0016                  		move.b	$16(a0),d2
000170AC 3602                       		move.w	d2,d3
000170AE 5243                       		addq.w	#1,d3
000170B0 6100 9320                  		bsr.w	SolidObject
000170B4                            
000170B4                            Obj70_ChkDel:
000170B4 3028 0032                  		move.w	$32(a0),d0
000170B8 0240 FF80                  		andi.w	#$FF80,d0
000170BC 3238 F700                  		move.w	($FFFFF700).w,d1
000170C0 0441 0080                  		subi.w	#$80,d1
000170C4 0241 FF80                  		andi.w	#$FF80,d1
000170C8 9041                       		sub.w	d1,d0
000170CA 0C40 0280                  		cmpi.w	#$280,d0
000170CE 6200                       		bhi.s	Obj70_Delete
000170D0 4EF9 0000 E002             		jmp	DisplaySprite
000170D6                            ; ===========================================================================
000170D6                            
000170D6                            Obj70_Delete:
000170D6 4EF9 0000 E03E             		jmp	DeleteObject
000170DC                            ; ===========================================================================
000170DC                            
000170DC                            Obj70_Move2:				; XREF: Obj70_Main
000170DC 1028 0038                  		move.b	$38(a0),d0
000170E0 0240 0018                  		andi.w	#$18,d0
000170E4 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000170EA 43F1 0000                  		lea	(a1,d0.w),a1
000170EE 3159 0010                  		move.w	(a1)+,$10(a0)
000170F2 3159 0012                  		move.w	(a1)+,$12(a0)
000170F6 3159 0034                  		move.w	(a1)+,$34(a0)
000170FA 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000170FE 317C 0007 003A             		move.w	#7,$3A(a0)
00017104 4E75                       		rts	
00017106                            ; ===========================================================================
00017106 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001710E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017116 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001711E 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017126                            ; ---------------------------------------------------------------------------
00017126                            ; Sprite mappings - large girder block (SBZ)
00017126                            ; ---------------------------------------------------------------------------
00017126                            Map_obj70:
00017126                            	include "_maps\obj70.asm"
00017126                            ; ---------------------------------------------------------------------------
00017126                            ; Sprite mappings - large girder block (SBZ)
00017126                            ; ---------------------------------------------------------------------------
00017126 0000                       		dc.w byte_1662A-Map_obj70
00017128 0C                         byte_1662A:	dc.b $C
00017129 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001712E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017133 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017138 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001713D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017142 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017147 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001714C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017151 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017156 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001715B E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017160 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00017166 00                         		even
00017166 00                         		even
00017166                            
00017166                            ; ===========================================================================
00017166                            ; ---------------------------------------------------------------------------
00017166                            ; Object 72 - teleporter (SBZ)
00017166                            ; ---------------------------------------------------------------------------
00017166                            
00017166                            Obj72:					; XREF: Obj_Index
00017166 7000                       		moveq	#0,d0
00017168 1028 0024                  		move.b	$24(a0),d0
0001716C 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00017170 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00017174 3028 0008                  		move.w	8(a0),d0
00017178 0240 FF80                  		andi.w	#$FF80,d0
0001717C 3238 F700                  		move.w	($FFFFF700).w,d1
00017180 0441 0080                  		subi.w	#$80,d1
00017184 0241 FF80                  		andi.w	#$FF80,d1
00017188 9041                       		sub.w	d1,d0
0001718A 0C40 0280                  		cmpi.w	#$280,d0
0001718E 6200                       		bhi.s	Obj72_Delete
00017190 4E75                       		rts	
00017192                            ; ===========================================================================
00017192                            
00017192                            Obj72_Delete:
00017192 4EF9 0000 E03E             		jmp	DeleteObject
00017198                            ; ===========================================================================
00017198 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001719A 0000                       		dc.w loc_166C8-Obj72_Index
0001719C 0000                       		dc.w loc_1675E-Obj72_Index
0001719E 0000                       		dc.w loc_16798-Obj72_Index
000171A0                            ; ===========================================================================
000171A0                            
000171A0                            Obj72_Main:				; XREF: Obj72_Index
000171A0 5428 0024                  		addq.b	#2,$24(a0)
000171A4 1028 0028                  		move.b	$28(a0),d0
000171A8 D040                       		add.w	d0,d0
000171AA 0240 001E                  		andi.w	#$1E,d0
000171AE 45FA 0000                  		lea	Obj72_Data(pc),a2
000171B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000171B6 315A 003A                  		move.w	(a2)+,$3A(a0)
000171BA 214A 003C                  		move.l	a2,$3C(a0)
000171BE 315A 0036                  		move.w	(a2)+,$36(a0)
000171C2 315A 0038                  		move.w	(a2)+,$38(a0)
000171C6                            
000171C6                            loc_166C8:				; XREF: Obj72_Index
000171C6 43F8 D000                  		lea	($FFFFD000).w,a1
000171CA 3029 0008                  		move.w	8(a1),d0
000171CE 9068 0008                  		sub.w	8(a0),d0
000171D2 0828 0000 0022             		btst	#0,$22(a0)
000171D8 6700                       		beq.s	loc_166E0
000171DA 0640 000F                  		addi.w	#$F,d0
000171DE                            
000171DE                            loc_166E0:
000171DE 0C40 0010                  		cmpi.w	#$10,d0
000171E2 6400                       		bcc.s	locret_1675C
000171E4 3229 000C                  		move.w	$C(a1),d1
000171E8 9268 000C                  		sub.w	$C(a0),d1
000171EC 0641 0020                  		addi.w	#$20,d1
000171F0 0C41 0040                  		cmpi.w	#$40,d1
000171F4 6400                       		bcc.s	locret_1675C
000171F6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000171FA 6600                       		bne.s	locret_1675C
000171FC 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017202 6600                       		bne.s	loc_1670E
00017204 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001720A 6500                       		bcs.s	locret_1675C
0001720C                            
0001720C                            loc_1670E:
0001720C 5428 0024                  		addq.b	#2,$24(a0)
00017210 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017216 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001721C 337C 0800 0014             		move.w	#$800,$14(a1)
00017222 337C 0000 0010             		move.w	#0,$10(a1)
00017228 337C 0000 0012             		move.w	#0,$12(a1)
0001722E 08A8 0005 0022             		bclr	#5,$22(a0)
00017234 08A9 0005 0022             		bclr	#5,$22(a1)
0001723A 08E9 0001 0022             		bset	#1,$22(a1)
00017240 3368 0008 0008             		move.w	8(a0),8(a1)
00017246 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001724C 4228 0032                  		clr.b	$32(a0)
00017250 303C 00BE                  		move.w	#$BE,d0
00017254 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001725A                            
0001725A                            locret_1675C:
0001725A 4E75                       		rts	
0001725C                            ; ===========================================================================
0001725C                            
0001725C                            loc_1675E:				; XREF: Obj72_Index
0001725C 43F8 D000                  		lea	($FFFFD000).w,a1
00017260 1028 0032                  		move.b	$32(a0),d0
00017264 5428 0032                  		addq.b	#2,$32(a0)
00017268 4EB9 0000 2D34             		jsr	(CalcSine).l
0001726E EA40                       		asr.w	#5,d0
00017270 3428 000C                  		move.w	$C(a0),d2
00017274 9440                       		sub.w	d0,d2
00017276 3342 000C                  		move.w	d2,$C(a1)
0001727A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017280 6600                       		bne.s	locret_16796
00017282 6100 0000                  		bsr.w	sub_1681C
00017286 5428 0024                  		addq.b	#2,$24(a0)
0001728A 303C 00BC                  		move.w	#$BC,d0
0001728E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play teleport sound
00017294                            
00017294                            locret_16796:
00017294 4E75                       		rts	
00017296                            ; ===========================================================================
00017296                            
00017296                            loc_16798:				; XREF: Obj72_Index
00017296 588F                       		addq.l	#4,sp
00017298 43F8 D000                  		lea	($FFFFD000).w,a1
0001729C 5328 002E                  		subq.b	#1,$2E(a0)
000172A0 6A00                       		bpl.s	loc_167DA
000172A2 3368 0036 0008             		move.w	$36(a0),8(a1)
000172A8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172AE 7200                       		moveq	#0,d1
000172B0 1228 003A                  		move.b	$3A(a0),d1
000172B4 5801                       		addq.b	#4,d1
000172B6 B228 003B                  		cmp.b	$3B(a0),d1
000172BA 6500                       		bcs.s	loc_167C2
000172BC 7200                       		moveq	#0,d1
000172BE 6000                       		bra.s	loc_16800
000172C0                            ; ===========================================================================
000172C0                            
000172C0                            loc_167C2:
000172C0 1141 003A                  		move.b	d1,$3A(a0)
000172C4 2468 003C                  		movea.l	$3C(a0),a2
000172C8 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000172CE 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000172D4 6000 0000                  		bra.w	sub_1681C
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            loc_167DA:
000172D8 2429 0008                  		move.l	8(a1),d2
000172DC 2629 000C                  		move.l	$C(a1),d3
000172E0 3029 0010                  		move.w	$10(a1),d0
000172E4 48C0                       		ext.l	d0
000172E6 E180                       		asl.l	#8,d0
000172E8 D480                       		add.l	d0,d2
000172EA 3029 0012                  		move.w	$12(a1),d0
000172EE 48C0                       		ext.l	d0
000172F0 E180                       		asl.l	#8,d0
000172F2 D680                       		add.l	d0,d3
000172F4 2342 0008                  		move.l	d2,8(a1)
000172F8 2343 000C                  		move.l	d3,$C(a1)
000172FC 4E75                       		rts	
000172FE                            ; ===========================================================================
000172FE                            
000172FE                            loc_16800:
000172FE 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017304 4228 0024                  		clr.b	$24(a0)
00017308 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001730C 337C 0000 0010             		move.w	#0,$10(a1)
00017312 337C 0200 0012             		move.w	#$200,$12(a1)
00017318 4E75                       		rts	
0001731A                            
0001731A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001731A                            
0001731A                            
0001731A                            sub_1681C:
0001731A 7000                       		moveq	#0,d0
0001731C 343C 1000                  		move.w	#$1000,d2
00017320 3028 0036                  		move.w	$36(a0),d0
00017324 9069 0008                  		sub.w	8(a1),d0
00017328 6C00                       		bge.s	loc_16830
0001732A 4440                       		neg.w	d0
0001732C 4442                       		neg.w	d2
0001732E                            
0001732E                            loc_16830:
0001732E 7200                       		moveq	#0,d1
00017330 363C 1000                  		move.w	#$1000,d3
00017334 3228 0038                  		move.w	$38(a0),d1
00017338 9269 000C                  		sub.w	$C(a1),d1
0001733C 6C00                       		bge.s	loc_16844
0001733E 4441                       		neg.w	d1
00017340 4443                       		neg.w	d3
00017342                            
00017342                            loc_16844:
00017342 B240                       		cmp.w	d0,d1
00017344 6500                       		bcs.s	loc_1687A
00017346 7200                       		moveq	#0,d1
00017348 3228 0038                  		move.w	$38(a0),d1
0001734C 9269 000C                  		sub.w	$C(a1),d1
00017350 4841                       		swap	d1
00017352 83C3                       		divs.w	d3,d1
00017354 7000                       		moveq	#0,d0
00017356 3028 0036                  		move.w	$36(a0),d0
0001735A 9069 0008                  		sub.w	8(a1),d0
0001735E 6700                       		beq.s	loc_16866
00017360 4840                       		swap	d0
00017362 81C1                       		divs.w	d1,d0
00017364                            
00017364                            loc_16866:
00017364 3340 0010                  		move.w	d0,$10(a1)
00017368 3343 0012                  		move.w	d3,$12(a1)
0001736C 4A41                       		tst.w	d1
0001736E 6A00                       		bpl.s	loc_16874
00017370 4441                       		neg.w	d1
00017372                            
00017372                            loc_16874:
00017372 3141 002E                  		move.w	d1,$2E(a0)
00017376 4E75                       		rts	
00017378                            ; ===========================================================================
00017378                            
00017378                            loc_1687A:
00017378 7000                       		moveq	#0,d0
0001737A 3028 0036                  		move.w	$36(a0),d0
0001737E 9069 0008                  		sub.w	8(a1),d0
00017382 4840                       		swap	d0
00017384 81C2                       		divs.w	d2,d0
00017386 7200                       		moveq	#0,d1
00017388 3228 0038                  		move.w	$38(a0),d1
0001738C 9269 000C                  		sub.w	$C(a1),d1
00017390 6700                       		beq.s	loc_16898
00017392 4841                       		swap	d1
00017394 83C0                       		divs.w	d0,d1
00017396                            
00017396                            loc_16898:
00017396 3341 0012                  		move.w	d1,$12(a1)
0001739A 3342 0010                  		move.w	d2,$10(a1)
0001739E 4A40                       		tst.w	d0
000173A0 6A00                       		bpl.s	loc_168A6
000173A2 4440                       		neg.w	d0
000173A4                            
000173A4                            loc_168A6:
000173A4 3140 002E                  		move.w	d0,$2E(a0)
000173A8 4E75                       		rts	
000173AA                            ; End of function sub_1681C
000173AA                            
000173AA                            ; ===========================================================================
000173AA 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173B0 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173B6 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173BA 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000173C0 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000173C6 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000173CC 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000173D2 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000173D8 0884 0298 0894             		dc.w $884, $298, $894
000173DE 0270 0894 0190             		dc.w $270, $894, $190
000173E4 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000173EA 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000173F0 1184 0498 1158             		dc.w $1184, $498, $1158
000173F6 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000173FC 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017402 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017408 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001740E 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017414 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001741A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017420 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017426 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001742C 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017432                            ; ===========================================================================
00017432                            ; ---------------------------------------------------------------------------
00017432                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017432                            ; ---------------------------------------------------------------------------
00017432                            
00017432                            Obj78:					; XREF: Obj_Index
00017432 7000                       		moveq	#0,d0
00017434 1028 0024                  		move.b	$24(a0),d0
00017438 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001743C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017440                            ; ===========================================================================
00017440 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017442 0000                       		dc.w Obj78_Action-Obj78_Index
00017444 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017446 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017448 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001744A 0000                       		dc.w Obj78_Delete-Obj78_Index
0001744C 0000                       		dc.w loc_16CC0-Obj78_Index
0001744E                            ; ===========================================================================
0001744E                            
0001744E                            locret_16950:
0001744E 4E75                       		rts	
00017450                            ; ===========================================================================
00017450                            
00017450                            Obj78_Main:				; XREF: Obj78_Index
00017450 117C 0007 0016             		move.b	#7,$16(a0)
00017456 117C 0008 0017             		move.b	#8,$17(a0)
0001745C 4EB9 0000 DF6A             		jsr	ObjectFall
00017462 4EBA E4AA                  		jsr	ObjHitFloor
00017466 4A41                       		tst.w	d1
00017468 6AE4                       		bpl.s	locret_16950
0001746A D368 000C                  		add.w	d1,$C(a0)
0001746E 4268 0012                  		clr.w	$12(a0)
00017472 5428 0024                  		addq.b	#2,$24(a0)
00017476 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001747E 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017484 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001748A 6700                       		beq.s	loc_16996
0001748C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017492                            
00017492                            loc_16996:
00017492 0228 0003 0001             		andi.b	#3,1(a0)
00017498 0028 0004 0001             		ori.b	#4,1(a0)
0001749E 1168 0001 0022             		move.b	1(a0),$22(a0)
000174A4 117C 0004 0018             		move.b	#4,$18(a0)
000174AA 117C 0008 0019             		move.b	#8,$19(a0)
000174B0 117C 000B 0020             		move.b	#$B,$20(a0)
000174B6 3428 0008                  		move.w	8(a0),d2
000174BA 7A0C                       		moveq	#$C,d5
000174BC 0828 0000 0022             		btst	#0,$22(a0)
000174C2 6700                       		beq.s	loc_169CA
000174C4 4445                       		neg.w	d5
000174C6                            
000174C6                            loc_169CA:
000174C6 1C3C 0004                  		move.b	#4,d6
000174CA 7600                       		moveq	#0,d3
000174CC 7804                       		moveq	#4,d4
000174CE 2448                       		movea.l	a0,a2
000174D0 7202                       		moveq	#2,d1
000174D2                            
000174D2                            Obj78_LoadBody:
000174D2 4EB9 0000 E49E             		jsr	SingleObjLoad2
000174D8 6600                       		bne.s	Obj78_QuitLoad
000174DA 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000174DE 1346 0024                  		move.b	d6,$24(a1)
000174E2 5406                       		addq.b	#2,d6
000174E4 2368 0004 0004             		move.l	4(a0),4(a1)
000174EA 3368 0002 0002             		move.w	2(a0),2(a1)
000174F0 137C 0005 0018             		move.b	#5,$18(a1)
000174F6 137C 0008 0019             		move.b	#8,$19(a1)
000174FC 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017502 D445                       		add.w	d5,d2
00017504 3342 0008                  		move.w	d2,8(a1)
00017508 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001750E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017514 1368 0022 0001             		move.b	$22(a0),1(a1)
0001751A 137C 0008 001A             		move.b	#8,$1A(a1)
00017520 234A 003C                  		move.l	a2,$3C(a1)
00017524 1344 003C                  		move.b	d4,$3C(a1)
00017528 5804                       		addq.b	#4,d4
0001752A 2449                       		movea.l	a1,a2
0001752C                            
0001752C                            Obj78_QuitLoad:
0001752C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017530                            
00017530 117C 0007 002A             		move.b	#7,$2A(a0)
00017536 4228 003C                  		clr.b	$3C(a0)
0001753A                            
0001753A                            Obj78_Action:				; XREF: Obj78_Index
0001753A 4A28 0022                  		tst.b	$22(a0)
0001753E 6B00 0000                  		bmi.w	loc_16C96
00017542 7000                       		moveq	#0,d0
00017544 1028 0025                  		move.b	$25(a0),d0
00017548 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001754C 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017550 1228 002B                  		move.b	$2B(a0),d1
00017554 6A00                       		bpl.s	Obj78_Display
00017556 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001755C 1028 0026                  		move.b	$26(a0),d0
00017560 0240 007F                  		andi.w	#$7F,d0
00017564 5828 0026                  		addq.b	#4,$26(a0)
00017568 1031 0000                  		move.b	(a1,d0.w),d0
0001756C 6A00                       		bpl.s	Obj78_AniHead
0001756E 08A8 0007 002B             		bclr	#7,$2B(a0)
00017574 6000                       		bra.s	Obj78_Display
00017576                            ; ===========================================================================
00017576                            
00017576                            Obj78_AniHead:
00017576 0201 0010                  		andi.b	#$10,d1
0001757A D001                       		add.b	d1,d0
0001757C 1140 001A                  		move.b	d0,$1A(a0)
00017580                            
00017580                            Obj78_Display:
00017580 3028 0008                  		move.w	8(a0),d0
00017584 0240 FF80                  		andi.w	#$FF80,d0
00017588 3238 F700                  		move.w	($FFFFF700).w,d1
0001758C 0441 0080                  		subi.w	#$80,d1
00017590 0241 FF80                  		andi.w	#$FF80,d1
00017594 9041                       		sub.w	d1,d0
00017596 0C40 0280                  		cmpi.w	#$280,d0
0001759A 6200 0000                  		bhi.w	Obj78_ChkGone
0001759E 4EF9 0000 E002             		jmp	DisplaySprite
000175A4                            ; ===========================================================================
000175A4                            
000175A4                            Obj78_ChkGone:
000175A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175A8 7000                       		moveq	#0,d0
000175AA 1028 0023                  		move.b	$23(a0),d0
000175AE 6700                       		beq.s	loc_16ABC
000175B0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175B6                            
000175B6                            loc_16ABC:
000175B6 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175BC 4E75                       		rts	
000175BE                            ; ===========================================================================
000175BE                            
000175BE                            Obj78_Delete:				; XREF: Obj78_Index
000175BE 4EF9 0000 E03E             		jmp	DeleteObject
000175C4                            ; ===========================================================================
000175C4 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000175C6 0000                       		dc.w loc_16B02-Obj78_Index2
000175C8                            ; ===========================================================================
000175C8                            
000175C8                            Obj78_Move:				; XREF: Obj78_Index2
000175C8 5328 002A                  		subq.b	#1,$2A(a0)
000175CC 6B00                       		bmi.s	Obj78_Move2
000175CE 4E75                       		rts	
000175D0                            ; ===========================================================================
000175D0                            
000175D0                            Obj78_Move2:
000175D0 5428 0025                  		addq.b	#2,$25(a0)
000175D4 117C 0010 002A             		move.b	#$10,$2A(a0)
000175DA 317C FF40 0010             		move.w	#-$C0,$10(a0)
000175E0 317C 0040 0014             		move.w	#$40,$14(a0)
000175E6 0868 0004 002B             		bchg	#4,$2B(a0)
000175EC 6600                       		bne.s	loc_16AFC
000175EE 4268 0010                  		clr.w	$10(a0)
000175F2 4468 0014                  		neg.w	$14(a0)
000175F6                            
000175F6                            loc_16AFC:
000175F6 08E8 0007 002B             		bset	#7,$2B(a0)
000175FC                            
000175FC                            loc_16B02:				; XREF: Obj78_Index2
000175FC 5328 002A                  		subq.b	#1,$2A(a0)
00017600 6B00                       		bmi.s	loc_16B5E
00017602 2F28 0008                  		move.l	8(a0),-(sp)
00017606 2428 0008                  		move.l	8(a0),d2
0001760A 3028 0010                  		move.w	$10(a0),d0
0001760E 0828 0000 0022             		btst	#0,$22(a0)
00017614 6700                       		beq.s	loc_16B1E
00017616 4440                       		neg.w	d0
00017618                            
00017618                            loc_16B1E:
00017618 48C0                       		ext.l	d0
0001761A E180                       		asl.l	#8,d0
0001761C D480                       		add.l	d0,d2
0001761E 2142 0008                  		move.l	d2,8(a0)
00017622 4EBA E2EA                  		jsr	ObjHitFloor
00017626 241F                       		move.l	(sp)+,d2
00017628 0C41 FFF8                  		cmpi.w	#-8,d1
0001762C 6D00                       		blt.s	loc_16B70
0001762E 0C41 000C                  		cmpi.w	#$C,d1
00017632 6C00                       		bge.s	loc_16B70
00017634 D368 000C                  		add.w	d1,$C(a0)
00017638 4842                       		swap	d2
0001763A B468 0008                  		cmp.w	8(a0),d2
0001763E 6700                       		beq.s	locret_16B5C
00017640 7000                       		moveq	#0,d0
00017642 1028 003C                  		move.b	$3C(a0),d0
00017646 5228 003C                  		addq.b	#1,$3C(a0)
0001764A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017650 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017654                            
00017654                            locret_16B5C:
00017654 4E75                       		rts	
00017656                            ; ===========================================================================
00017656                            
00017656                            loc_16B5E:
00017656 5528 0025                  		subq.b	#2,$25(a0)
0001765A 117C 0007 002A             		move.b	#7,$2A(a0)
00017660 317C 0000 0010             		move.w	#0,$10(a0)
00017666 4E75                       		rts	
00017668                            ; ===========================================================================
00017668                            
00017668                            loc_16B70:
00017668 2142 0008                  		move.l	d2,8(a0)
0001766C 0868 0000 0022             		bchg	#0,$22(a0)
00017672 1168 0022 0001             		move.b	$22(a0),1(a0)
00017678 7000                       		moveq	#0,d0
0001767A 1028 003C                  		move.b	$3C(a0),d0
0001767E 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017684 5228 003C                  		addq.b	#1,$3C(a0)
00017688 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001768E 4E75                       		rts	
00017690                            ; ===========================================================================
00017690                            
00017690                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017690 2268 003C                  		movea.l	$3C(a0),a1
00017694 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001769A 6A00                       		bpl.s	Obj78_BodySeg1
0001769C 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176A2 1028 0026                  		move.b	$26(a0),d0
000176A6 0240 007F                  		andi.w	#$7F,d0
000176AA 5828 0026                  		addq.b	#4,$26(a0)
000176AE 4A31 0004                  		tst.b	4(a1,d0.w)
000176B2 6A00                       		bpl.s	Obj78_AniBody
000176B4 5828 0026                  		addq.b	#4,$26(a0)
000176B8                            
000176B8                            Obj78_AniBody:
000176B8 1031 0000                  		move.b	(a1,d0.w),d0
000176BC 5000                       		addq.b	#8,d0
000176BE 1140 001A                  		move.b	d0,$1A(a0)
000176C2                            
000176C2                            Obj78_BodySeg1:				; XREF: Obj78_Index
000176C2 2268 003C                  		movea.l	$3C(a0),a1
000176C6 4A28 0022                  		tst.b	$22(a0)
000176CA 6B00 0000                  		bmi.w	loc_16C90
000176CE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176D4 1169 0025 0025             		move.b	$25(a1),$25(a0)
000176DA 6700 0000                  		beq.w	loc_16C64
000176DE 3169 0014 0014             		move.w	$14(a1),$14(a0)
000176E4 3029 0010                  		move.w	$10(a1),d0
000176E8 D069 0014                  		add.w	$14(a1),d0
000176EC 3140 0010                  		move.w	d0,$10(a0)
000176F0 2428 0008                  		move.l	8(a0),d2
000176F4 2602                       		move.l	d2,d3
000176F6 3028 0010                  		move.w	$10(a0),d0
000176FA 0828 0000 0022             		btst	#0,$22(a0)
00017700 6700                       		beq.s	loc_16C0C
00017702 4440                       		neg.w	d0
00017704                            
00017704                            loc_16C0C:
00017704 48C0                       		ext.l	d0
00017706 E180                       		asl.l	#8,d0
00017708 D480                       		add.l	d0,d2
0001770A 2142 0008                  		move.l	d2,8(a0)
0001770E 4843                       		swap	d3
00017710 B668 0008                  		cmp.w	8(a0),d3
00017714 6700                       		beq.s	loc_16C64
00017716 7000                       		moveq	#0,d0
00017718 1028 003C                  		move.b	$3C(a0),d0
0001771C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017720 0C01 0080                  		cmpi.b	#-$80,d1
00017724 6600                       		bne.s	loc_16C50
00017726 4843                       		swap	d3
00017728 2143 0008                  		move.l	d3,8(a0)
0001772C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017730 0868 0000 0022             		bchg	#0,$22(a0)
00017736 1168 0022 0001             		move.b	$22(a0),1(a0)
0001773C 5228 003C                  		addq.b	#1,$3C(a0)
00017740 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017746 6000                       		bra.s	loc_16C64
00017748                            ; ===========================================================================
00017748                            
00017748                            loc_16C50:
00017748 4881                       		ext.w	d1
0001774A D368 000C                  		add.w	d1,$C(a0)
0001774E 5228 003C                  		addq.b	#1,$3C(a0)
00017752 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017758 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001775C                            
0001775C                            loc_16C64:
0001775C 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017762 6700                       		beq.s	loc_16C90
00017764 0C11 0027                  		cmpi.b	#$27,0(a1)
00017768 6700                       		beq.s	loc_16C7C
0001776A 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017770 6600                       		bne.s	loc_16C82
00017772                            
00017772                            loc_16C7C:
00017772 117C 000A 0024             		move.b	#$A,$24(a0)
00017778                            
00017778                            loc_16C82:
00017778 4EF9 0000 E002             		jmp	DisplaySprite
0001777E                            
0001777E                            ; ===========================================================================
0001777E FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017786                            ; ===========================================================================
00017786                            
00017786                            loc_16C90:
00017786 08E9 0007 0022             		bset	#7,$22(a1)
0001778C                            
0001778C                            loc_16C96:
0001778C 7000                       		moveq	#0,d0
0001778E 1028 0024                  		move.b	$24(a0),d0
00017792 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017796 0828 0000 0022             		btst	#0,$22(a0)
0001779C 6700                       		beq.s	loc_16CAA
0001779E 4440                       		neg.w	d0
000177A0                            
000177A0                            loc_16CAA:
000177A0 3140 0010                  		move.w	d0,$10(a0)
000177A4 317C FC00 0012             		move.w	#-$400,$12(a0)
000177AA 117C 000C 0024             		move.b	#$C,$24(a0)
000177B0 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177B6                            
000177B6                            loc_16CC0:				; XREF: Obj78_Index
000177B6 4EB9 0000 DF6A             		jsr	ObjectFall
000177BC 4A68 0012                  		tst.w	$12(a0)
000177C0 6B00                       		bmi.s	loc_16CE0
000177C2 4EBA E14A                  		jsr	ObjHitFloor
000177C6 4A41                       		tst.w	d1
000177C8 6A00                       		bpl.s	loc_16CE0
000177CA D368 000C                  		add.w	d1,$C(a0)
000177CE 317C FC00 0012             		move.w	#-$400,$12(a0)
000177D4                            
000177D4                            loc_16CE0:
000177D4 4A28 0001                  		tst.b	1(a0)
000177D8 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000177DC 4EF9 0000 E002             		jmp	DisplaySprite
000177E2                            ; ===========================================================================
000177E2                            Ani_obj78:
000177E2                            	include "_anim\obj78.asm"
000177E2                            ; ---------------------------------------------------------------------------
000177E2                            ; Animation script - Caterkiller enemy (uses non-standard format)
000177E2                            ; ---------------------------------------------------------------------------
000177E2 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000177F2 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017802 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017812 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017822 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017832 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017842 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017852 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017862                            	even
00017862                            	even
00017862                            
00017862                            ; ---------------------------------------------------------------------------
00017862                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017862                            ; ---------------------------------------------------------------------------
00017862                            Map_obj78:
00017862                            	include "_maps\obj78.asm"
00017862                            ; ---------------------------------------------------------------------------
00017862                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017862                            ; ---------------------------------------------------------------------------
00017862 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017866 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001786A 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001786E 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017872 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017876 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001787A 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001787E 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017882 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017886 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001788A 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001788E 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017892 01                         byte_16D9E:	dc.b 1
00017893 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017898 01                         byte_16DA4:	dc.b 1
00017899 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001789E 01                         byte_16DAA:	dc.b 1
0001789F F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178A4 01                         byte_16DB0:	dc.b 1
000178A5 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178AA 01                         byte_16DB6:	dc.b 1
000178AB EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178B0 01                         byte_16DBC:	dc.b 1
000178B1 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178B6 01                         byte_16DC2:	dc.b 1
000178B7 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178BC 01                         byte_16DC8:	dc.b 1
000178BD EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000178C2 01                         byte_16DCE:	dc.b 1
000178C3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000178C8 01                         byte_16DD4:	dc.b 1
000178C9 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000178CE 01                         byte_16DDA:	dc.b 1
000178CF F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000178D4 01                         byte_16DE0:	dc.b 1
000178D5 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000178DA 01                         byte_16DE6:	dc.b 1
000178DB F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000178E0 01                         byte_16DEC:	dc.b 1
000178E1 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000178E6 01                         byte_16DF2:	dc.b 1
000178E7 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000178EC 01                         byte_16DF8:	dc.b 1
000178ED F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000178F2 01                         byte_16DFE:	dc.b 1
000178F3 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000178F8 01                         byte_16E04:	dc.b 1
000178F9 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000178FE 01                         byte_16E0A:	dc.b 1
000178FF F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017904 01                         byte_16E10:	dc.b 1
00017905 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001790A 01                         byte_16E16:	dc.b 1
0001790B EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017910 01                         byte_16E1C:	dc.b 1
00017911 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017916 01                         byte_16E22:	dc.b 1
00017917 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001791C 01                         byte_16E28:	dc.b 1
0001791D EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017922                            		even
00017922                            		even
00017922                            
00017922                            ; ===========================================================================
00017922                            ; ---------------------------------------------------------------------------
00017922                            ; Object 79 - lamppost
00017922                            ; ---------------------------------------------------------------------------
00017922                            
00017922                            Obj79:					; XREF: Obj_Index
00017922 7000                       		moveq	#0,d0
00017924 1028 0024                  		move.b	$24(a0),d0
00017928 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001792C 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017930 4EFA 8778                  		jmp	MarkObjGone
00017934                            ; ===========================================================================
00017934 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017936 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017938 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001793A 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001793C                            ; ===========================================================================
0001793C                            
0001793C                            Obj79_Main:				; XREF: Obj79_Index
0001793C 5428 0024                  		addq.b	#2,$24(a0)
00017940 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017948 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001794E 117C 0004 0001             		move.b	#4,1(a0)
00017954 117C 0008 0019             		move.b	#8,$19(a0)
0001795A 117C 0005 0018             		move.b	#5,$18(a0)
00017960 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017964 7000                       		moveq	#0,d0
00017966 1028 0023                  		move.b	$23(a0),d0
0001796A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017970 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017976 6600                       		bne.s	Obj79_RedLamp
00017978 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001797C 0201 007F                  		andi.b	#$7F,d1
00017980 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017984 0202 007F                  		andi.b	#$7F,d2
00017988 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001798A 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001798C                            
0001798C                            Obj79_RedLamp:
0001798C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017992 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017998 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001799E 4E75                       		rts	
000179A0                            ; ===========================================================================
000179A0                            
000179A0                            Obj79_BlueLamp:				; XREF: Obj79_Index
000179A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179A4 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179AC 6B00 0000                  		bmi.w	locret_16F90
000179B0 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179B4 0201 007F                  		andi.b	#$7F,d1
000179B8 1428 0028                  		move.b	$28(a0),d2
000179BC 0202 007F                  		andi.b	#$7F,d2
000179C0 B202                       		cmp.b	d2,d1
000179C2 6500                       		bcs.s	Obj79_HitLamp
000179C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179C8 7000                       		moveq	#0,d0
000179CA 1028 0023                  		move.b	$23(a0),d0
000179CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179D4 117C 0004 0024             		move.b	#4,$24(a0)
000179DA 117C 0003 001A             		move.b	#3,$1A(a0)
000179E0 6000 0000                  		bra.w	locret_16F90
000179E4                            ; ===========================================================================
000179E4                            
000179E4                            Obj79_HitLamp:
000179E4 3038 D008                  		move.w	($FFFFD008).w,d0
000179E8 9068 0008                  		sub.w	8(a0),d0
000179EC 5040                       		addq.w	#8,d0
000179EE 0C40 0010                  		cmpi.w	#$10,d0
000179F2 6400 0000                  		bcc.w	locret_16F90
000179F6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000179FA 9068 000C                  		sub.w	$C(a0),d0
000179FE 0640 0040                  		addi.w	#$40,d0
00017A02 0C40 0068                  		cmpi.w	#$68,d0
00017A06 6400                       		bcc.s	locret_16F90
00017A08 303C 00A1                  		move.w	#$A1,d0
00017A0C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A12 5428 0024                  		addq.b	#2,$24(a0)
00017A16 4EB9 0000 E488             		jsr	SingleObjLoad
00017A1C 6600                       		bne.s	loc_16F76
00017A1E 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A22 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A28 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A2E 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A34 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A3A 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A42 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A48 137C 0004 0001             		move.b	#4,1(a1)
00017A4E 137C 0008 0019             		move.b	#8,$19(a1)
00017A54 137C 0004 0018             		move.b	#4,$18(a1)
00017A5A 137C 0002 001A             		move.b	#2,$1A(a1)
00017A60 337C 0020 0036             		move.w	#$20,$36(a1)
00017A66                            
00017A66                            loc_16F76:
00017A66 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017A6C 6100 0000                  		bsr.w	Obj79_StoreInfo
00017A70 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A74 7000                       		moveq	#0,d0
00017A76 1028 0023                  		move.b	$23(a0),d0
00017A7A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A80                            
00017A80                            locret_16F90:
00017A80 4E75                       		rts	
00017A82                            ; ===========================================================================
00017A82                            
00017A82                            Obj79_AfterHit:				; XREF: Obj79_Index
00017A82 4E75                       		rts	
00017A84                            ; ===========================================================================
00017A84                            
00017A84                            Obj79_Twirl:				; XREF: Obj79_Index
00017A84 5368 0036                  		subq.w	#1,$36(a0)
00017A88 6A00                       		bpl.s	loc_16FA0
00017A8A 117C 0004 0024             		move.b	#4,$24(a0)
00017A90                            
00017A90                            loc_16FA0:
00017A90 1028 0026                  		move.b	$26(a0),d0
00017A94 0428 0010 0026             		subi.b	#$10,$26(a0)
00017A9A 0400 0040                  		subi.b	#$40,d0
00017A9E 4EB9 0000 2D34             		jsr	(CalcSine).l
00017AA4 C3FC 0C00                  		muls.w	#$C00,d1
00017AA8 4841                       		swap	d1
00017AAA D268 0030                  		add.w	$30(a0),d1
00017AAE 3141 0008                  		move.w	d1,8(a0)
00017AB2 C1FC 0C00                  		muls.w	#$C00,d0
00017AB6 4840                       		swap	d0
00017AB8 D068 0032                  		add.w	$32(a0),d0
00017ABC 3140 000C                  		move.w	d0,$C(a0)
00017AC0 4E75                       		rts	
00017AC2                            ; ===========================================================================
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2                            ; Subroutine to	store information when you hit a lamppost
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2                            
00017AC2                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017AC2 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017AC8 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017ACE 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017AD4 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017ADA 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017AE0 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017AE6 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017AEC 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017AF2 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017AF8 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017AFE 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B04 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B0A 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B10 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B16 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B1C 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B22 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B28 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B2E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B34 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B3A 4E75                       		rts	
00017B3C                            
00017B3C                            ; ---------------------------------------------------------------------------
00017B3C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B3C                            ; ---------------------------------------------------------------------------
00017B3C                            
00017B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B3C                            
00017B3C                            
00017B3C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B3C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B42 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B48 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B4E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B54 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B5A 4278 FE20                  		clr.w	($FFFFFE20).w
00017B5E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017B62 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017B68 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017B6E 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017B72 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017B78 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017B7E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017B84 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017B8A 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017B90 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017B96 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017B9C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017BA2 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BA8 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BAE 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BB4 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017BC0 6600                       		bne.s	loc_170E4
00017BC2 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017BC8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BCE 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017BD4                            
00017BD4                            loc_170E4:
00017BD4 4A38 FE30                  		tst.b	($FFFFFE30).w
00017BD8 6A00                       		bpl.s	locret_170F6
00017BDA 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017BDE 0440 00A0                  		subi.w	#$A0,d0
00017BE2 31C0 F728                  		move.w	d0,($FFFFF728).w
00017BE6                            
00017BE6                            locret_170F6:
00017BE6 4E75                       		rts	
00017BE8                            ; End of function Obj79_LoadInfo
00017BE8                            
00017BE8                            ; ===========================================================================
00017BE8                            ; ---------------------------------------------------------------------------
00017BE8                            ; Sprite mappings - lamppost
00017BE8                            ; ---------------------------------------------------------------------------
00017BE8                            Map_obj79:
00017BE8                            	include "_maps\obj79.asm"
00017BE8                            ; ---------------------------------------------------------------------------
00017BE8                            ; Sprite mappings - lamppost
00017BE8                            ; ---------------------------------------------------------------------------
00017BE8 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017BEC 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017BF0 06                         byte_17100:	dc.b 6
00017BF1 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017BF6 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017BFB F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C00 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C05 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C0A D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C0F 04                         byte_1711F:	dc.b 4
00017C10 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C15 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C1A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C1F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C24 02                         byte_17134:	dc.b 2
00017C25 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C2A F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C2F 06                         byte_1713F:	dc.b 6
00017C30 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C35 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C3A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C3F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C44 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C49 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C4E                            		even
00017C4E                            		even
00017C4E                            
00017C4E                            ; ===========================================================================
00017C4E                            ; ---------------------------------------------------------------------------
00017C4E                            ; Object 7D - hidden points at the end of a level
00017C4E                            ; ---------------------------------------------------------------------------
00017C4E                            
00017C4E                            Obj7D:					; XREF: Obj_Index
00017C4E 7000                       		moveq	#0,d0
00017C50 1028 0024                  		move.b	$24(a0),d0
00017C54 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C58 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C5C                            ; ===========================================================================
00017C5C 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017C5E 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017C60                            ; ===========================================================================
00017C60                            
00017C60                            Obj7D_Main:				; XREF: Obj7D_Index
00017C60 7410                       		moveq	#$10,d2
00017C62 3602                       		move.w	d2,d3
00017C64 D643                       		add.w	d3,d3
00017C66 43F8 D000                  		lea	($FFFFD000).w,a1
00017C6A 3029 0008                  		move.w	8(a1),d0
00017C6E 9068 0008                  		sub.w	8(a0),d0
00017C72 D042                       		add.w	d2,d0
00017C74 B043                       		cmp.w	d3,d0
00017C76 6400                       		bcc.s	Obj7D_ChkDel
00017C78 3229 000C                  		move.w	$C(a1),d1
00017C7C 9268 000C                  		sub.w	$C(a0),d1
00017C80 D242                       		add.w	d2,d1
00017C82 B243                       		cmp.w	d3,d1
00017C84 6400                       		bcc.s	Obj7D_ChkDel
00017C86 4A78 FE08                  		tst.w	($FFFFFE08).w
00017C8A 6600                       		bne.s	Obj7D_ChkDel
00017C8C 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017C90 6600                       		bne.s	Obj7D_ChkDel
00017C92 5428 0024                  		addq.b	#2,$24(a0)
00017C96 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017C9E 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CA4 0028 0004 0001             		ori.b	#4,1(a0)
00017CAA 117C 0000 0018             		move.b	#0,$18(a0)
00017CB0 117C 0010 0019             		move.b	#$10,$19(a0)
00017CB6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CBC 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017CC2 303C 00C9                  		move.w	#$C9,d0
00017CC6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play bonus sound
00017CCC 7000                       		moveq	#0,d0
00017CCE 1028 0028                  		move.b	$28(a0),d0
00017CD2 D040                       		add.w	d0,d0
00017CD4 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017CD8 4EB9 0000 0000             		jsr	AddPoints
00017CDE                            
00017CDE                            Obj7D_ChkDel:
00017CDE 3028 0008                  		move.w	8(a0),d0
00017CE2 0240 FF80                  		andi.w	#$FF80,d0
00017CE6 3238 F700                  		move.w	($FFFFF700).w,d1
00017CEA 0441 0080                  		subi.w	#$80,d1
00017CEE 0241 FF80                  		andi.w	#$FF80,d1
00017CF2 9041                       		sub.w	d1,d0
00017CF4 0C40 0280                  		cmpi.w	#$280,d0
00017CF8 6200                       		bhi.s	Obj7D_Delete
00017CFA 4E75                       		rts	
00017CFC                            ; ===========================================================================
00017CFC                            
00017CFC                            Obj7D_Delete:
00017CFC 4EF9 0000 E03E             		jmp	DeleteObject
00017D02                            ; ===========================================================================
00017D02 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D04 03E8                       		dc.w 1000
00017D06 0064                       		dc.w 100
00017D08 0001                       		dc.w 1
00017D0A                            ; ===========================================================================
00017D0A                            
00017D0A                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D0A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D0E 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D10 3028 0008                  		move.w	8(a0),d0
00017D14 0240 FF80                  		andi.w	#-$80,d0
00017D18 3238 F700                  		move.w	($FFFFF700).w,d1
00017D1C 0441 0080                  		subi.w	#$80,d1
00017D20 0241 FF80                  		andi.w	#-$80,d1
00017D24 9041                       		sub.w	d1,d0
00017D26 0C40 0280                  		cmpi.w	#$280,d0
00017D2A 6200                       		bhi.s	Obj7D_Delete2
00017D2C 4EF9 0000 E002             		jmp	DisplaySprite
00017D32                            ; ===========================================================================
00017D32                            
00017D32                            Obj7D_Delete2:
00017D32 4EF9 0000 E03E             		jmp	DeleteObject
00017D38                            ; ===========================================================================
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            ; Sprite mappings - hidden points at the end of	a level
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            Map_obj7D:
00017D38                            	include "_maps\obj7D.asm"
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            ; Sprite mappings - hidden points at the end of	a level
00017D38                            ; ---------------------------------------------------------------------------
00017D38 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D3C 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D40 00                         byte_17250:	dc.b 0
00017D41 01                         byte_17251:	dc.b 1
00017D42 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D47 01                         byte_17257:	dc.b 1
00017D48 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D4D 01                         byte_1725D:	dc.b 1
00017D4E F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D54 00                         		even
00017D54 00                         		even
00017D54                            
00017D54                            ; ===========================================================================
00017D54                            ; ---------------------------------------------------------------------------
00017D54                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D54                            ; ---------------------------------------------------------------------------
00017D54                            
00017D54                            Obj8A:					; XREF: Obj_Index
00017D54 7000                       		moveq	#0,d0
00017D56 1028 0024                  		move.b	$24(a0),d0
00017D5A 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017D5E 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017D62                            ; ===========================================================================
00017D62 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017D64 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017D66                            ; ===========================================================================
00017D66                            
00017D66                            Obj8A_Main:				; XREF: Obj8A_Index
00017D66 5428 0024                  		addq.b	#2,$24(a0)
00017D6A 317C 0120 0008             		move.w	#$120,8(a0)
00017D70 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017D76 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017D7E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017D84 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017D88 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017D8C 117C 0000 0001             		move.b	#0,1(a0)
00017D92 117C 0000 0018             		move.b	#0,$18(a0)
00017D98 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017D9E 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DA0 317C 00A6 0002             		move.w	#$A6,2(a0)
00017DA6 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DAC 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DB0 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DB2 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DB8 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DBA 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017DC0 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017DC6 4EF9 0000 E03E             		jmp	DeleteObject
00017DCC                            ; ===========================================================================
00017DCC                            
00017DCC                            Obj8A_Display:				; XREF: Obj8A_Index
00017DCC 4EF9 0000 E002             		jmp	DisplaySprite
00017DD2                            ; ===========================================================================
00017DD2                            ; ---------------------------------------------------------------------------
00017DD2                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017DD2                            ; ---------------------------------------------------------------------------
00017DD2                            Map_obj8A:
00017DD2                            	include "_maps\obj8A.asm"
00017DD2                            Map_ca8f:
00017DD2 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017DD4 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017DD6 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017DD8 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017DDA 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017DDC 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017DDE 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017DE0 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017DE2 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017DE4 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017DE6 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017DE8 08                         Map_ca8f_16: 	dc.b $8
00017DE9 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017DEE E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017DF3 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017DF8 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017DFD B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017E02 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017E07 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E0C B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E11 10                         Map_ca8f_3F: 	dc.b $10
00017E12 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E17 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E1C D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E21 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E26 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E2B D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E30 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E35 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E3A 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E3F 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E44 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E49 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E4E 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E53 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017E58 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017E5D 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017E62 0A                         Map_ca8f_90: 	dc.b $A
00017E63 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017E68 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017E6D D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017E72 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017E77 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017E7C D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017E81 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017E86 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017E8B 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017E90 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017E95 18                         Map_ca8f_C3: 	dc.b $18
00017E96 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017E9B D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017EA0 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017EA5 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EAA D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EAF D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017EB4 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017EB9 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017EBE D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017EC3 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017EC8 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017ECD D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017ED2 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017ED7 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017EDC D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017EE1 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017EE6 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017EEB 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017EF0 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017EF5 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017EFA 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017EFF 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017F04 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F09 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F0E 14                         Map_ca8f_13C: 	dc.b $14
00017F0F D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F14 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F19 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F1E D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F23 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F28 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F2D 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F32 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F37 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F3C 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F41 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F46 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F4B 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F50 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017F55 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017F5A 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017F5F 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017F64 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017F69 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017F6E 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017F73 1A                         Map_ca8f_1A1: 	dc.b $1A
00017F74 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017F79 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017F7E D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017F83 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017F88 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017F8D D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017F92 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F97 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017F9C D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017FA1 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017FA6 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FAB D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017FB0 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017FB5 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017FBA 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017FBF 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017FC4 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017FC9 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017FCE 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017FD3 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017FD8 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017FDD 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017FE2 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017FE7 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017FEC 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017FF1 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017FF6 17                         Map_ca8f_224: 	dc.b $17
00017FF7 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017FFC D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018001 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018006 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
0001800B D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018010 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018015 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
0001801A D005 0026 18               	dc.b $D0, $5, $0, $26, $18
0001801F D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018024 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018029 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
0001802E D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018033 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018038 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001803D 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00018042 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018047 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
0001804C 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018051 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00018056 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
0001805B 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00018060 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00018065 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
0001806A 1F                         Map_ca8f_298: 	dc.b $1F
0001806B D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00018070 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00018075 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
0001807A D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
0001807F D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00018084 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018089 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
0001808E D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00018093 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00018098 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
0001809D D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000180A2 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000180A7 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180AC 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000180B1 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000180B6 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000180BB 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000180C0 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
000180C5 0009 0008 00               	dc.b $0, $9, $0, $8, $0
000180CA 0001 0046 14               	dc.b $0, $1, $0, $46, $14
000180CF 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
000180D4 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
000180D9 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
000180DE 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
000180E3 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
000180E8 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
000180ED 0001 0046 74               	dc.b $0, $1, $0, $46, $74
000180F2 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
000180F7 2005 0004 08               	dc.b $20, $5, $0, $4, $8
000180FC 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018101 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018106 0F                         Map_ca8f_334: 	dc.b $F
00018107 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
0001810C F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018111 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018116 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0001811B F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018120 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018125 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
0001812A F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
0001812F F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018134 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018139 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0001813E F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00018143 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018148 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
0001814D F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00018152 08                         Map_ca8f_380: 	dc.b $8
00018153 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00018158 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
0001815D 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00018162 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00018167 3005 0000 08               	dc.b $30, $5, $0, $0, $8
0001816C 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00018171 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00018176 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
0001817B 20                         Map_ca8f_3A9: 	dc.b $20
0001817C ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00018181 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00018186 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
0001818B ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00018190 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00018195 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
0001819A ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
0001819F FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000181A4 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181A9 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000181AE FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181B3 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000181B8 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000181BD 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
000181C2 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
000181C7 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
000181CC 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
000181D1 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
000181D6 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
000181DB 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
000181E0 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
000181E5 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
000181EA 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000181EF 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000181F4 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000181F9 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000181FE 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018203 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018208 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001820D 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018212 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018217 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001821C                            	even
0001821C                            	even
0001821C                            
0001821C                            ; ===========================================================================
0001821C                            ; ---------------------------------------------------------------------------
0001821C                            ; Object 3D - matthew boss - modified by GK89
0001821C                            ; ---------------------------------------------------------------------------
0001821C                            
0001821C                            Obj3D:					; XREF: Obj_Index
0001821C 7000                       		moveq	#0,d0
0001821E 1028 0024                  		move.b	$24(a0),d0
00018222 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018226 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001822A                            ; ===========================================================================
0001822A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001822C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001822E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018230 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018232                            
00018232 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018234 0401                       		dc.b 4,	1
00018236 0607                       		dc.b 6,	7
00018238                            ; ===========================================================================
00018238                            
00018238                            Obj3D_Main:				; XREF: Obj3D_Index
00018238 45F9 0001 8232             		lea	(Obj3D_ObjData).l,a2
0001823E 2248                       		movea.l	a0,a1
00018240 7202                       		moveq	#2,d1
00018242 6000                       		bra.s	Obj3D_LoadBoss
00018244                            ; ===========================================================================
00018244                            
00018244                            Obj3D_Loop:
00018244 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001824A 6600                       		bne.s	loc_17772
0001824C                            
0001824C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001824C 135A 0024                  		move.b	(a2)+,$24(a1)
00018250 12BC 003D                  		move.b	#$3D,0(a1)
00018254 3368 0008 0008             		move.w	8(a0),8(a1)
0001825A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018260 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018268 337C 0400 0002             		move.w	#$400,2(a1)
0001826E 137C 0004 0001             		move.b	#4,1(a1)
00018274 137C 0020 0019             		move.b	#$20,$19(a1)
0001827A 137C 0003 0018             		move.b	#3,$18(a1)
00018280 135A 001C                  		move.b	(a2)+,$1C(a1)
00018284 2348 0034                  		move.l	a0,$34(a1)
00018288 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001828C                            
0001828C                            loc_17772:
0001828C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018292 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018298 117C 000F 0020             		move.b	#$F,$20(a0)
0001829E 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000182A4                            
000182A4                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000182A4 7000                       		moveq	#0,d0
000182A6 1028 0025                  		move.b	$25(a0),d0
000182AA 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000182AE 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182B2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182B8 4EB9 0000 B058             		jsr	AnimateSprite
000182BE 1028 0022                  		move.b	$22(a0),d0
000182C2 0200 0003                  		andi.b	#3,d0
000182C6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182CC 8128 0001                  		or.b	d0,1(a0)
000182D0 4EF9 0000 E002             		jmp	DisplaySprite
000182D6                            ; ===========================================================================
000182D6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000182D8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000182DA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000182DC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000182DE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000182E0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000182E2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000182E4                            ; ===========================================================================
000182E4                            
000182E4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000182E4 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000182EA 6100 0000                  		bsr.w	BossMove
000182EE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000182F4 6600                       		bne.s	loc_177E6
000182F6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000182FC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018300                            
00018300                            loc_177E6:
00018300 1028 003F                  		move.b	$3F(a0),d0
00018304 4EB9 0000 2D34             		jsr	(CalcSine).l
0001830A EC40                       		asr.w	#6,d0
0001830C D068 0038                  		add.w	$38(a0),d0
00018310 3140 000C                  		move.w	d0,$C(a0)
00018314 3168 0030 0008             		move.w	$30(a0),8(a0)
0001831A 5428 003F                  		addq.b	#2,$3F(a0)
0001831E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018324 6400                       		bcc.s	locret_1784A
00018326 4A28 0022                  		tst.b	$22(a0)
0001832A 6B00                       		bmi.s	loc_1784C
0001832C 4A28 0020                  		tst.b	$20(a0)
00018330 6600                       		bne.s	locret_1784A
00018332 4A28 003E                  		tst.b	$3E(a0)
00018336 6600                       		bne.s	Obj3D_ShipFlash
00018338 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001833E 303C 00AC                  		move.w	#$AC,d0
00018342 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018348                            
00018348                            Obj3D_ShipFlash:
00018348 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001834C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001834E 4A51                       		tst.w	(a1)
00018350 6600                       		bne.s	loc_1783C
00018352 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018356                            
00018356                            loc_1783C:
00018356 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018358 5328 003E                  		subq.b	#1,$3E(a0)
0001835C 6600                       		bne.s	locret_1784A
0001835E 117C 000F 0020             		move.b	#$F,$20(a0)
00018364                            
00018364                            locret_1784A:
00018364 4E75                       		rts	
00018366                            ; ===========================================================================
00018366                            
00018366                            loc_1784C:				; XREF: loc_177E6
00018366 7064                       		moveq	#100,d0
00018368 6100 0000                  		bsr.w	AddPoints
0001836C 117C 0008 0025             		move.b	#8,$25(a0)
00018372 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018378 4E75                       		rts	
0001837A                            
0001837A                            ; ---------------------------------------------------------------------------
0001837A                            ; Defeated boss	subroutine
0001837A                            ; ---------------------------------------------------------------------------
0001837A                            
0001837A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001837A                            
0001837A                            
0001837A                            BossDefeated:
0001837A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001837E 0200 0007                  		andi.b	#7,d0
00018382 6600                       		bne.s	locret_178A2
00018384 4EB9 0000 E488             		jsr	SingleObjLoad
0001838A 6600                       		bne.s	locret_178A2
0001838C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018390 3368 0008 0008             		move.w	8(a0),8(a1)
00018396 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001839C 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000183A2 3200                       		move.w	d0,d1
000183A4 7200                       		moveq	#0,d1
000183A6 1200                       		move.b	d0,d1
000183A8 E409                       		lsr.b	#2,d1
000183AA 0441 0020                  		subi.w	#$20,d1
000183AE D369 0008                  		add.w	d1,8(a1)
000183B2 E048                       		lsr.w	#8,d0
000183B4 E608                       		lsr.b	#3,d0
000183B6 D169 000C                  		add.w	d0,$C(a1)
000183BA                            
000183BA                            locret_178A2:
000183BA 4E75                       		rts	
000183BC                            ; End of function BossDefeated
000183BC                            
000183BC                            ; ---------------------------------------------------------------------------
000183BC                            ; Subroutine to	move a boss
000183BC                            ; ---------------------------------------------------------------------------
000183BC                            
000183BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183BC                            
000183BC                            
000183BC                            BossMove:
000183BC 2428 0030                  		move.l	$30(a0),d2
000183C0 2628 0038                  		move.l	$38(a0),d3
000183C4 3028 0010                  		move.w	$10(a0),d0
000183C8 48C0                       		ext.l	d0
000183CA E180                       		asl.l	#8,d0
000183CC D480                       		add.l	d0,d2
000183CE 3028 0012                  		move.w	$12(a0),d0
000183D2 48C0                       		ext.l	d0
000183D4 E180                       		asl.l	#8,d0
000183D6 D680                       		add.l	d0,d3
000183D8 2142 0030                  		move.l	d2,$30(a0)
000183DC 2143 0038                  		move.l	d3,$38(a0)
000183E0 4E75                       		rts	
000183E2                            ; End of function BossMove
000183E2                            
000183E2                            ; ===========================================================================
000183E2                            
000183E2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000183E2 6100 FFD8                  		bsr.w	BossMove
000183E6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000183EC 6600                       		bne.s	loc_17916
000183EE 317C 0000 0010             		move.w	#0,$10(a0)
000183F4 317C 0000 0012             		move.w	#0,$12(a0)
000183FA 5428 0025                  		addq.b	#2,$25(a0)
000183FE 4EB9 0000 E49E             		jsr	SingleObjLoad2
00018404 6600                       		bne.s	loc_17910
00018406 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001840A 3368 0030 0008             		move.w	$30(a0),8(a1)
00018410 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018416 2348 0034                  		move.l	a0,$34(a1)
0001841A                            
0001841A                            loc_17910:
0001841A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018420                            
00018420                            loc_17916:
00018420 6000 FEDE                  		bra.w	loc_177E6
00018424                            ; ===========================================================================
00018424                            
00018424                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018424 5368 003C                  		subq.w	#1,$3C(a0)
00018428 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001842E 5428 0025                  		addq.b	#2,$25(a0)
00018432 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018438 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001843C 9068 0008                  		sub.w	8(a0),d0		 
00018440 6A00                       		bpl.s	Obj3D_left			 
00018442 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018448 6000                       		bra.s	Obj3D_right		 
0001844A 08A8 0005 0022             		bclr	#5,$22(a0)
00018450 4EB9 0000 0000              		jsr     loc_17950
00018456 4E75                       		rts
00018458                            ; ===========================================================================
00018458                            
00018458                            Obj3D_right:
00018458 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001845E 4E75                       		Rts
00018460                            
00018460                            Obj3D_left:
00018460 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018466 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001846C 6600                       		bne.s	RTSboss  	; if not, branch
0001846E 0868 0000 0022              		bchg	#0,$22(a0)
00018474                            
00018474                            RTSboss:	    
00018474 4E75                       		rts
00018476                             ; ===========================================================================
00018476                            
00018476                            Obj3D_UpStuff:
00018476 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001847A 9068 000C                  		sub.w	$C(a0),d0		 
0001847E 6A00                       		bpl.s	Obj3D_down			 
00018480 6000                        		bra.s	Obj3D_up		 
00018482 08A8 0005 0022             		bclr	#5,$22(a0)
00018488                             
00018488                            Obj3D_up:		
00018488 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001848E 4E75                        	    rts
00018490                            
00018490                            Obj3D_down:
00018490 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018496                            
00018496                            loc_17950:
00018496 6000 FE68                  		bra.w	loc_177E6
0001849A                            ; ===========================================================================
0001849A                            
0001849A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001849A 5368 003C                  		subq.w	#1,$3C(a0)
0001849E 6B00                       		bmi.s	loc_17960
000184A0 6100 FF1A                  		bsr.w	BossMove
000184A4 6000                       		bra.s	loc_17976
000184A6                            ; ===========================================================================
000184A6                            
000184A6                            loc_17960:
000184A6 0868 0000 0022             		bchg	#0,$22(a0)
000184AC 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184B2 5528 0025                  		subq.b	#2,$25(a0)
000184B6 317C 0000 0010             		move.w	#0,$10(a0)
000184BC                            
000184BC                            loc_17976:
000184BC 6000 FE42                  		bra.w	loc_177E6
000184C0                            ; ===========================================================================
000184C0                            
000184C0                            loc_1797A:				; XREF: Obj3D_ShipIndex
000184C0 5368 003C                  		subq.w	#1,$3C(a0)
000184C4 6B00                       		bmi.s	loc_17984
000184C6 6000 FEB2                  		bra.w	BossDefeated
000184CA                            ; ===========================================================================
000184CA                            
000184CA                            loc_17984:
000184CA 08E8 0000 0022             		bset	#0,$22(a0)
000184D0 08A8 0007 0022             		bclr	#7,$22(a0)
000184D6 4268 0010                  		clr.w	$10(a0)
000184DA 5428 0025                  		addq.b	#2,$25(a0)
000184DE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000184E4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000184E8 6600                       		bne.s	locret_179AA
000184EA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000184F0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000184F6 6000 FE82                  		bra.w	BossDefeated
000184FA                            
000184FA                            locret_179AA:
000184FA 4E75                       		rts	
000184FC                            ; ===========================================================================
000184FC                            
000184FC                            loc_179AC:				; XREF: Obj3D_ShipIndex
000184FC 4EB9 0000 DF6A             		jsr ObjectFall		
00018502 5268 003C                  		addq.w	#1,$3C(a0)
00018506 6700                       		beq.s	loc_179BC
00018508 6A00                       		bpl.s	loc_179C2
0001850A 6000                       		bra.s	loc_179EE
0001850C                            ; ===========================================================================
0001850C                            
0001850C                            loc_179BC:
0001850C 4268 0012                  		clr.w	$12(a0)
00018510 6000                       		bra.s	loc_179EE
00018512                            ; ===========================================================================
00018512                            
00018512                            loc_179C2:
00018512 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018518 6500                       		bcs.s	loc_179DA
0001851A 6700                       		beq.s	loc_179E0
0001851C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018522 6500                       		bcs.s	loc_179EE
00018524 5428 0025                  		addq.b	#2,$25(a0)
00018528 6000                       		bra.s	loc_179EE
0001852A                            ; ===========================================================================
0001852A                            
0001852A                            loc_179DA:
0001852A 5168 0012                  		subq.w	#8,$12(a0)
0001852E 6000                       		bra.s	loc_179EE
00018530 6000 FE48                  		bra.w	BossDefeated
00018534                            ; ===========================================================================
00018534                            
00018534                            loc_179E0:
00018534 4268 0012                  		clr.w	$12(a0)
00018538 303C 0081                  		move.w	#$81,d0
0001853C 4EB9 0000 1594             		jsr	(PlaySound).l	; play GHZ music
00018542                            
00018542                            loc_179EE:
00018542 6100 FE78                  		bsr.w	BossMove
00018546 6000 FDB8                  		bra.w	loc_177E6
0001854A                            ; ===========================================================================
0001854A                            
0001854A                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001854A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018550 6700                       		beq.s	loc_17A10
00018552 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018556 6000                       		bra.s	loc_17A16
00018558                            ; ===========================================================================
00018558                            
00018558                            loc_17A10:
00018558 4A28 0001                  		tst.b	1(a0)
0001855C 6A00                       		bpl.s	Obj3D_ShipDel
0001855E                            
0001855E                            loc_17A16:
0001855E 6100 FE5C                  		bsr.w	BossMove
00018562 6000 FD9C                  		bra.w	loc_177E6
00018566                            ; ===========================================================================
00018566                            
00018566                            Obj3D_ShipDel:
00018566 4EF9 0000 E03E             		jmp	DeleteObject
0001856C                            ; ===========================================================================
0001856C                            
0001856C                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001856C 7000                       		moveq	#0,d0
0001856E 7201                       		moveq	#1,d1
00018570 2268 0034                  		movea.l	$34(a0),a1
00018574 1029 0025                  		move.b	$25(a1),d0
00018578 5900                       		subq.b	#4,d0
0001857A 6600                       		bne.s	loc_17A3E
0001857C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018582 6600                       		bne.s	loc_17A46
00018584 7204                       		moveq	#4,d1
00018586                            
00018586                            loc_17A3E:
00018586 5D00                       		subq.b	#6,d0
00018588 6B00                       		bmi.s	loc_17A46
0001858A 720A                       		moveq	#$A,d1
0001858C 6000                       		bra.s	loc_17A5A
0001858E                            ; ===========================================================================
0001858E                            
0001858E                            loc_17A46:
0001858E 4A29 0020                  		tst.b	$20(a1)
00018592 6600                       		bne.s	loc_17A50
00018594 7205                       		moveq	#5,d1
00018596 6000                       		bra.s	loc_17A5A
00018598                            ; ===========================================================================
00018598                            
00018598                            loc_17A50:
00018598 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001859E 6500                       		bcs.s	loc_17A5A
000185A0 7204                       		moveq	#4,d1
000185A2                            
000185A2                            loc_17A5A:
000185A2 1141 001C                  		move.b	d1,$1C(a0)
000185A6 5500                       		subq.b	#2,d0
000185A8 6600                       		bne.s	Obj3D_FaceDisp
000185AA 117C 0006 001C             		move.b	#6,$1C(a0)
000185B0 4A28 0001                  		tst.b	1(a0)
000185B4 6A00                       		bpl.s	Obj3D_FaceDel
000185B6                            
000185B6                            Obj3D_FaceDisp:
000185B6 6000                       		bra.s	Obj3D_Display
000185B8                            ; ===========================================================================
000185B8                            
000185B8                            Obj3D_FaceDel:
000185B8 4EF9 0000 E03E             		jmp	DeleteObject
000185BE                            ; ===========================================================================
000185BE                            
000185BE                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000185BE 117C 0007 001C             		move.b	#7,$1C(a0)
000185C4 2268 0034                  		movea.l	$34(a0),a1
000185C8 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000185CE 6600                       		bne.s	loc_17A96
000185D0 117C 000B 001C             		move.b	#$B,$1C(a0)
000185D6 4A28 0001                  		tst.b	1(a0)
000185DA 6A00                       		bpl.s	Obj3D_FlameDel
000185DC 6000                       		bra.s	Obj3D_FlameDisp
000185DE                            ; ===========================================================================
000185DE                            
000185DE                            loc_17A96:
000185DE 3029 0010                  		move.w	$10(a1),d0
000185E2 6700                       		beq.s	Obj3D_FlameDisp
000185E4 117C 0008 001C             		move.b	#8,$1C(a0)
000185EA                            
000185EA                            Obj3D_FlameDisp:
000185EA 6000                       		bra.s	Obj3D_Display
000185EC                            ; ===========================================================================
000185EC                            
000185EC                            Obj3D_FlameDel:
000185EC 4EF9 0000 E03E             		jmp	DeleteObject
000185F2                            ; ===========================================================================
000185F2                            
000185F2                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000185F2 2268 0034                  		movea.l	$34(a0),a1
000185F6 3169 0008 0008             		move.w	8(a1),8(a0)
000185FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018602 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018608 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001860E 4EB9 0000 B058             		jsr	AnimateSprite
00018614 1028 0022                  		move.b	$22(a0),d0
00018618 0200 0003                  		andi.b	#3,d0
0001861C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018622 8128 0001                  		or.b	d0,1(a0)
00018626 4EF9 0000 E002             		jmp	DisplaySprite
0001862C                            ; ===========================================================================
0001862C                            ; ---------------------------------------------------------------------------
0001862C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001862C                            ; ---------------------------------------------------------------------------
0001862C                            
0001862C                            Obj48:					; XREF: Obj_Index
0001862C 7000                       		moveq	#0,d0
0001862E 1028 0024                  		move.b	$24(a0),d0
00018632 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018636 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001863A                            ; ===========================================================================
0001863A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001863C 0000                       		dc.w Obj48_Base-Obj48_Index
0001863E 0000                       		dc.w Obj48_Display2-Obj48_Index
00018640 0000                       		dc.w loc_17C68-Obj48_Index
00018642 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018644                            ; ===========================================================================
00018644                            
00018644                            Obj48_Main:				; XREF: Obj48_Index
00018644 5428 0024                  		addq.b	#2,$24(a0)
00018648 317C 4080 0026             		move.w	#$4080,$26(a0)
0001864E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018654 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001865C 317C 046C 0002             		move.w	#$46C,2(a0)
00018662 45E8 0028                  		lea	$28(a0),a2
00018666 14FC 0000                  		move.b	#0,(a2)+
0001866A 7205                       		moveq	#5,d1
0001866C 2248                       		movea.l	a0,a1
0001866E 6000                       		bra.s	loc_17B60
00018670                            ; ===========================================================================
00018670                            
00018670                            Obj48_MakeLinks:
00018670 4EB9 0000 E49E             		jsr	SingleObjLoad2
00018676 6600                       		bne.s	Obj48_MakeBall
00018678 3368 0008 0008             		move.w	8(a0),8(a1)
0001867E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018684 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018688 137C 0006 0024             		move.b	#6,$24(a1)
0001868E 237C 0000 840C 0004        		move.l	#Map_obj15,4(a1)
00018696 337C 0380 0002             		move.w	#$380,2(a1)
0001869C 137C 0001 001A             		move.b	#1,$1A(a1)
000186A2 5228 0028                  		addq.b	#1,$28(a0)
000186A6                            
000186A6                            loc_17B60:				; XREF: Obj48_Main
000186A6 3A09                       		move.w	a1,d5
000186A8 0445 D000                  		subi.w	#$D000,d5
000186AC EC4D                       		lsr.w	#6,d5
000186AE 0245 007F                  		andi.w	#$7F,d5
000186B2 14C5                       		move.b	d5,(a2)+
000186B4 137C 0004 0001             		move.b	#4,1(a1)
000186BA 137C 0008 0019             		move.b	#8,$19(a1)
000186C0 137C 0006 0018             		move.b	#6,$18(a1)
000186C6 2368 0034 0034             		move.l	$34(a0),$34(a1)
000186CC 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000186D0                            
000186D0                            Obj48_MakeBall:
000186D0 137C 0008 0024             		move.b	#8,$24(a1)
000186D6 237C 0000 89FC 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000186DE 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000186E4 137C 0001 001A             		move.b	#1,$1A(a1)
000186EA 137C 0005 0018             		move.b	#5,$18(a1)
000186F0 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000186F6 4E75                       		rts	
000186F8                            ; ===========================================================================
000186F8                            
000186F8 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000186FE                            
000186FE                            ; ===========================================================================
000186FE                            
000186FE                            Obj48_Base:				; XREF: Obj48_Index
000186FE 47F9 0001 86F8             		lea	(Obj48_PosData).l,a3
00018704 45E8 0028                  		lea	$28(a0),a2
00018708 7C00                       		moveq	#0,d6
0001870A 1C1A                       		move.b	(a2)+,d6
0001870C                            
0001870C                            loc_17BC6:
0001870C 7800                       		moveq	#0,d4
0001870E 181A                       		move.b	(a2)+,d4
00018710 ED4C                       		lsl.w	#6,d4
00018712 0684 00FF D000             		addi.l	#$FFD000,d4
00018718 2244                       		movea.l	d4,a1
0001871A 101B                       		move.b	(a3)+,d0
0001871C B029 003C                  		cmp.b	$3C(a1),d0
00018720 6700                       		beq.s	loc_17BE0
00018722 5229 003C                  		addq.b	#1,$3C(a1)
00018726                            
00018726                            loc_17BE0:
00018726 51CE FFE4                  		dbf	d6,loc_17BC6
0001872A                            
0001872A B029 003C                  		cmp.b	$3C(a1),d0
0001872E 6600                       		bne.s	loc_17BFA
00018730 2268 0034                  		movea.l	$34(a0),a1
00018734 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001873A 6600                       		bne.s	loc_17BFA
0001873C 5428 0024                  		addq.b	#2,$24(a0)
00018740                            
00018740                            loc_17BFA:
00018740 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018746 6700                       		beq.s	Obj48_Display
00018748 5268 0032                  		addq.w	#1,$32(a0)
0001874C                            
0001874C                            Obj48_Display:
0001874C 6100 0000                  		bsr.w	sub_17C2A
00018750 1028 0026                  		move.b	$26(a0),d0
00018754 4EB9 0000 837E             		jsr	(Obj15_Move2).l
0001875A 4EF9 0000 E002             		jmp	DisplaySprite
00018760                            ; ===========================================================================
00018760                            
00018760                            Obj48_Display2:				; XREF: Obj48_Index
00018760 6100 0000                  		bsr.w	sub_17C2A
00018764 4EB9 0000 833E             		jsr	(Obj48_Move).l
0001876A 4EF9 0000 E002             		jmp	DisplaySprite
00018770                            
00018770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018770                            
00018770                            
00018770                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018770 2268 0034                  		movea.l	$34(a0),a1
00018774 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001877A 6400                       		bcc.s	loc_17C3C
0001877C 0868 0000 001A             		bchg	#0,$1A(a0)
00018782                            
00018782                            loc_17C3C:
00018782 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018788 3029 000C                  		move.w	$C(a1),d0
0001878C D068 0032                  		add.w	$32(a0),d0
00018790 3140 0038                  		move.w	d0,$38(a0)
00018794 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001879A 4A29 0022                  		tst.b	$22(a1)
0001879E 6A00                       		bpl.s	locret_17C66
000187A0 10BC 003F                  		move.b	#$3F,0(a0)
000187A4 117C 0000 0024             		move.b	#0,$24(a0)
000187AA                            
000187AA                            locret_17C66:
000187AA 4E75                       		rts	
000187AC                            ; End of function sub_17C2A
000187AC                            
000187AC                            ; ===========================================================================
000187AC                            
000187AC                            loc_17C68:				; XREF: Obj48_Index
000187AC 2268 0034                  		movea.l	$34(a0),a1
000187B0 4A29 0022                  		tst.b	$22(a1)
000187B4 6A00                       		bpl.s	Obj48_Display3
000187B6 10BC 003F                  		move.b	#$3F,0(a0)
000187BA 117C 0000 0024             		move.b	#0,$24(a0)
000187C0                            
000187C0                            Obj48_Display3:
000187C0 4EF9 0000 E002             		jmp	DisplaySprite
000187C6                            ; ===========================================================================
000187C6                            
000187C6                            Obj48_ChkVanish:			; XREF: Obj48_Index
000187C6 7000                       		moveq	#0,d0
000187C8 4A28 001A                  		tst.b	$1A(a0)
000187CC 6600                       		bne.s	Obj48_Vanish
000187CE 5200                       		addq.b	#1,d0
000187D0                            
000187D0                            Obj48_Vanish:
000187D0 1140 001A                  		move.b	d0,$1A(a0)
000187D4 2268 0034                  		movea.l	$34(a0),a1
000187D8 4A29 0022                  		tst.b	$22(a1)
000187DC 6A00                       		bpl.s	Obj48_Display4
000187DE 117C 0000 0020             		move.b	#0,$20(a0)
000187E4 6100 FB94                  		bsr.w	BossDefeated
000187E8 5328 003C                  		subq.b	#1,$3C(a0)
000187EC 6A00                       		bpl.s	Obj48_Display4
000187EE 10BC 003F                  		move.b	#$3F,(a0)
000187F2 117C 0000 0024             		move.b	#0,$24(a0)
000187F8                            
000187F8                            Obj48_Display4:
000187F8 4EF9 0000 E002             		jmp	DisplaySprite
000187FE                            ; ===========================================================================
000187FE                            Ani_Eggman:
000187FE                            	include "_anim\Eggman.asm"
000187FE                            ; ---------------------------------------------------------------------------
000187FE                            ; Animation script - Eggman (bosses)
000187FE                            ; ---------------------------------------------------------------------------
000187FE 0000                       		dc.w byte_17CD4-Ani_Eggman
00018800 0000                       		dc.w byte_17CD8-Ani_Eggman
00018802 0000                       		dc.w byte_17CDC-Ani_Eggman
00018804 0000                       		dc.w byte_17CE0-Ani_Eggman
00018806 0000                       		dc.w byte_17CE4-Ani_Eggman
00018808 0000                       		dc.w byte_17CE8-Ani_Eggman
0001880A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001880C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001880E 0000                       		dc.w byte_17CF4-Ani_Eggman
00018810 0000                       		dc.w byte_17CF8-Ani_Eggman
00018812 0000                       		dc.w byte_17CFC-Ani_Eggman
00018814 0000                       		dc.w byte_17D00-Ani_Eggman
00018816 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001881A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001881E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018822 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018826 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001882A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001882E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018832 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018836 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001883A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001883E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018842 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001884E                            		even
0001884E                            		even
0001884E                            Ani_TetoB:
0001884E                            	include "_anim\TetoB.asm"
0001884E                            ; ---------------------------------------------------------------------------
0001884E                            ; Animation script - Eggman (bosses)
0001884E                            ; ---------------------------------------------------------------------------
0001884E 0000                       		dc.w spin-Ani_TetoB
00018850 0000                       		dc.w static-Ani_TetoB
00018852 0000                       		dc.w static2-Ani_TetoB
00018854 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001885B 0500 FF                    static:	dc.b 5,	0, $FF
0001885E 0501 FF                    static2:	dc.b 5,	1, $FF
00018862 00                         		even
00018862 00                         		even
00018862                            ; ---------------------------------------------------------------------------
00018862                            ; Sprite mappings - Eggman (boss levels)
00018862                            ; ---------------------------------------------------------------------------
00018862                            Map_Eggman:
00018862                            	include "_maps\Eggman.asm"
00018862                            Map_dc7e:
00018862 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018864 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018866 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018868 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001886A 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001886C 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001886E 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018870 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018872 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018874 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018876 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018878 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001887A 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001887C 06                         Map_dc7e_1A: 	dc.b $6
0001887D EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018882 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018887 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001888C FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018891 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018896 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001889B 02                         Map_dc7e_39: 	dc.b $2
0001889C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188A1 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000188A6 02                         Map_dc7e_44: 	dc.b $2
000188A7 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188AC EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188B1 03                         Map_dc7e_4F: 	dc.b $3
000188B2 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000188B7 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000188BC EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000188C1 03                         Map_dc7e_5F: 	dc.b $3
000188C2 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000188C7 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000188CC EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000188D1 03                         Map_dc7e_6F: 	dc.b $3
000188D2 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188D7 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188DC EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000188E1 03                         Map_dc7e_7F: 	dc.b $3
000188E2 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000188E7 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188EC EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188F1 04                         Map_dc7e_8F: 	dc.b $4
000188F2 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000188F7 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188FC EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018901 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018906 01                         Map_dc7e_A4: 	dc.b $1
00018907 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001890C 01                         Map_dc7e_AA: 	dc.b $1
0001890D 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018912 00                         Map_dc7e_B0: 	dc.b $0
00018913 02                         Map_dc7e_B1: 	dc.b $2
00018914 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018919 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001891E 02                         Map_dc7e_BC: 	dc.b $2
0001891F F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018924 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001892A 00                         	even
0001892A 00                         	even
0001892A                            
0001892A                            ; ---------------------------------------------------------------------------
0001892A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001892A                            ; ---------------------------------------------------------------------------
0001892A                            Map_BossItems:
0001892A                            	include "_maps\Boss items.asm"
0001892A                            ; ---------------------------------------------------------------------------
0001892A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001892A                            ; ---------------------------------------------------------------------------
0001892A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001892E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018932 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018936 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001893A 01                         byte_17DE4:	dc.b 1
0001893B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018940 02                         byte_17DEA:	dc.b 2
00018941 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018946 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001894B 00                         		dc.b 0
0001894C 01                         byte_17DF6:	dc.b 1
0001894D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018952 01                         byte_17DFC:	dc.b 1
00018953 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018958 01                         byte_17E02:	dc.b 1
00018959 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001895E 04                         byte_17E08:	dc.b 4
0001895F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018964 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018969 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001896E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018973 00                         		dc.b 0
00018974 02                         byte_17E1E:	dc.b 2
00018975 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001897A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001897F 00                         		dc.b 0
00018980 02                         byte_17E2A:	dc.b 2
00018981 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018986 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001898C 00                         		even
0001898C 00                         		even
0001898C                            
0001898C                            ; ===========================================================================
0001898C                            ; ---------------------------------------------------------------------------
0001898C                            ; Object 77 - Fatass teto boss fight in LZ -STDH
0001898C                            ; ---------------------------------------------------------------------------
0001898C                            
0001898C                            
0001898C                            obj77:					; XREF: Obj_Index
0001898C 7000                       		moveq	#0,d0
0001898E 1028 0024                  		move.b	$24(a0),d0
00018992 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018996 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
0001899A                            ; ===========================================================================
0001899A 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
0001899C 0000                       		dc.w obj77_ShipMain-obj77_Index
0001899E 0000                       		dc.w obj77_FaceMain-obj77_Index
000189A0 0000                       		dc.w obj77_FlameMain-obj77_Index
000189A2                            
000189A2 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000189A4 0401                       		dc.b 4,	1
000189A6 0607                       		dc.b 6,	7
000189A8                            ; ===========================================================================
000189A8                            
000189A8                            obj77_Main:				; XREF: obj77_Index
000189A8 45F9 0001 89A2             		lea	(obj77_ObjData).l,a2
000189AE 2248                       		movea.l	a0,a1
000189B0 7202                       		moveq	#2,d1
000189B2 6000                       		bra.s	obj77_LoadBoss
000189B4                            ; ===========================================================================
000189B4                            
000189B4                            obj77_Loop:
000189B4 4EB9 0000 E49E             		jsr	SingleObjLoad2
000189BA 6600                       		bne.s	loc2_17772
000189BC                            
000189BC                            obj77_LoadBoss:				; XREF: obj77_Main
000189BC 135A 0024                  		move.b	(a2)+,$24(a1)
000189C0 12BC 0077                  		move.b	#$77,0(a1)
000189C4 3368 0008 0008             		move.w	8(a0),8(a1)
000189CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189D0 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000189D8 337C 0400 0002             		move.w	#$400,2(a1)
000189DE 137C 0004 0001             		move.b	#4,1(a1)
000189E4 137C 0020 0019             		move.b	#$20,$19(a1)
000189EA 137C 0003 0018             		move.b	#3,$18(a1)
000189F0 135A 001C                  		move.b	(a2)+,$1C(a1)
000189F4 2348 0034                  		move.l	a0,$34(a1)
000189F8 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000189FC                            
000189FC                            loc2_17772:
000189FC 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A02 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A08 117C 000F 0020             		move.b	#$F,$20(a0)
00018A0E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A14                            
00018A14                            obj77_ShipMain:				; XREF: obj77_Index
00018A14 7000                       		moveq	#0,d0
00018A16 1028 0025                  		move.b	$25(a0),d0
00018A1A 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018A1E 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018A22 43F9 0001 884E             		lea	(Ani_TetoB).l,a1
00018A28 4EB9 0000 B058             		jsr	AnimateSprite
00018A2E 1028 0022                  		move.b	$22(a0),d0
00018A32 0200 0003                  		andi.b	#3,d0
00018A36 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A3C 8128 0001                  		or.b	d0,1(a0)
00018A40 4EF9 0000 E002             		jmp	DisplaySprite
00018A46                            ; ===========================================================================
00018A46 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018A48 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018A4A 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018A4C 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018A4E 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018A50 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018A52 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018A54 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018A56                            ; ===========================================================================
00018A56                            
00018A56                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018A56                            	;	move.w	#$100,$12(a0)	; move ship down
00018A56 6100 F964                  		bsr.w	BossMove
00018A5A 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018A60 6600                       		bne.s	loc2_177E6
00018A62 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018A68 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018A6C                            
00018A6C                            loc2_177E6:
00018A6C                            ;		move.b	$3F(a0),d0
00018A6C                            ;		jsr	(CalcSine).l
00018A6C EC40                       		asr.w	#6,d0
00018A6E D068 0038                  		add.w	$38(a0),d0
00018A72 3140 000C                  		move.w	d0,$C(a0)
00018A76 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A7C 5428 003F                  		addq.b	#2,$3F(a0)
00018A80 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018A86 6400                       		bcc.s	locret_1784A2
00018A88 4A28 0022                  		tst.b	$22(a0)
00018A8C 6B00                       		bmi.s	loc2_1784C
00018A8E 4A28 0020                  		tst.b	$20(a0)
00018A92 6600                       		bne.s	locret_1784A2
00018A94 4A28 003E                  		tst.b	$3E(a0)
00018A98 6600                       		bne.s	obj77_ShipFlash
00018A9A 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018AA0 303C 00AC                  		move.w	#$AC,d0
00018AA4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018AAA                            
00018AAA                            obj77_ShipFlash:
00018AAA 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018AAE 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018AB0 4A51                       		tst.w	(a1)
00018AB2 6600                       		bne.s	loc2_1783C
00018AB4 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018AB8                            
00018AB8                            loc2_1783C:
00018AB8 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018ABA 5328 003E                  		subq.b	#1,$3E(a0)
00018ABE 6600                       		bne.s	locret_1784A2
00018AC0 117C 000F 0020             		move.b	#$F,$20(a0)
00018AC6                            
00018AC6                            locret_1784A2:
00018AC6 4E75                       		rts	
00018AC8                            ; ===========================================================================
00018AC8                            
00018AC8                            loc2_1784C:				; XREF: loc2_177E6
00018AC8 7064                       		moveq	#100,d0
00018ACA 6100 0000                  		bsr.w	AddPoints
00018ACE 117C 000A 0025             		move.b	#$A,$25(a0)
00018AD4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018ADA 4E75                       		rts	
00018ADC                            ; ===========================================================================
00018ADC                            
00018ADC                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018ADC 317C FF00 0010             		move.w	#-$100,$10(a0)
00018AE2 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018AE8 6100 F8D2                  		bsr.w	BossMove
00018AEC 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018AF2 6600                       		bne.s	loc2_17916
00018AF4 317C 0000 0010             		move.w	#0,$10(a0)
00018AFA 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018B00 317C 0000 0012             		move.w	#0,$12(a0)
00018B06 5428 0025                  		addq.b	#2,$25(a0)
00018B0A                            
00018B0A                            loc2_17910:
00018B0A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018B10                            
00018B10                            loc2_17916:
00018B10 6000 FF5A                  		bra.w	loc2_177E6
00018B14                            ; ===========================================================================
00018B14                            
00018B14                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018B14 6100 F8A6                  		bsr.w	BossMove
00018B18 5368 003C                  		subq.w	#1,$3C(a0)
00018B1C 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018B1E 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018B24 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018B2A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018B30 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018B36 6600                       		bne.s	loc2_17950 ; if not branch
00018B38                            
00018B38                            fatass_attack:
00018B38 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018B3E 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018B44 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018B4A 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018B4C 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B50 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B56                            
00018B56                            loc2_17950:
00018B56 6000 FF14                  		bra.w	loc2_177E6
00018B5A                            ; ===========================================================================
00018B5A                            
00018B5A                            loc2_17954:				; XREF: obj77_ShipIndex
00018B5A 6100 F860                  		bsr.w	BossMove
00018B5E 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018B64                            		; i suck at programming
00018B64 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018B6A 6600                       		bne.s	loc2_17976    ; if not blah blah
00018B6C 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B72 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B76 303C 00B9                  		move.w	#$B9,d0
00018B7A 4EB9 0000 1594             		jsr	(PlaySound).l	; play the earthquake sound
00018B80                            
00018B80                            Peartobombs:	
00018B80 4EB9 0000 E49E                		jsr	SingleObjLoad2
00018B86 6600                       		bne.s	secondone
00018B88 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018B8C 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018B92 337C 0670 000C             		move.w	#$670,$C(a1)
00018B98                            secondone:		
00018B98 4EB9 0000 E49E                		jsr	SingleObjLoad2
00018B9E 6600                       		bne.s	loc2_17976		
00018BA0 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018BA4 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018BAA 337C 0670 000C             		move.w	#$670,$C(a1)
00018BB0                            lastone:
00018BB0 4EB9 0000 E49E                		jsr	SingleObjLoad2
00018BB6 6600                       		bne.s	loc2_17976		
00018BB8 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018BBC 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018BC2 337C 0670 000C             		move.w	#$670,$C(a1)
00018BC8                            		
00018BC8                            loc2_17976:
00018BC8 6000 FEA2                  		bra.w	loc2_177E6
00018BCC                            		
00018BCC                            ; ===========================================================================
00018BCC                            Fatassruns:
00018BCC 6100 F7EE                   		bsr.w	BossMove
00018BD0 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018BD6 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018BDC 6600                       		bne.s	processstuff ; is not go here
00018BDE 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018BE4 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018BEA 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018BEE 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018BF4 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018BFA                            		
00018BFA                            		
00018BFA                            processstuff:
00018BFA 6000 FE70                  		bra.w	loc2_177E6
00018BFE                            ; ===========================================================================
00018BFE                            
00018BFE                            loc2_1797A:				; XREF: obj77_ShipIndex
00018BFE 5368 003C                  		subq.w	#1,$3C(a0)
00018C02 6B00                       		bmi.s	loc2_17984
00018C04 6000 F774                  		bra.w	BossDefeated
00018C08                            ; ===========================================================================
00018C08                            
00018C08                            loc2_17984:
00018C08 08E8 0000 0022             		bset	#0,$22(a0)
00018C0E 08A8 0007 0022             		bclr	#7,$22(a0)
00018C14 4268 0010                  		clr.w	$10(a0)
00018C18 5428 0025                  		addq.b	#2,$25(a0)
00018C1C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C22 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C26 6600                       		bne.s	locret_179AA2
00018C28 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C2E                            
00018C2E                            locret_179AA2:
00018C2E 4E75                       		rts	
00018C30                            ; ===========================================================================
00018C30                            
00018C30                            loc2_179AC:				; XREF: obj77_ShipIndex
00018C30 5268 003C                  		addq.w	#1,$3C(a0)
00018C34 6700                       		beq.s	loc2_179BC
00018C36 6A00                       		bpl.s	loc2_179C2
00018C38 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C3E 6000                       		bra.s	loc2_179EE
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            loc2_179BC:
00018C40 4268 0012                  		clr.w	$12(a0)
00018C44 6000                       		bra.s	loc2_179EE
00018C46                            ; ===========================================================================
00018C46                            
00018C46                            loc2_179C2:
00018C46 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C4C 6500                       		bcs.s	loc2_179DA
00018C4E 6700                       		beq.s	loc2_179E0
00018C50 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C56 6500                       		bcs.s	loc2_179EE
00018C58 5428 0025                  		addq.b	#2,$25(a0)
00018C5C 6000                       		bra.s	loc2_179EE
00018C5E                            ; ===========================================================================
00018C5E                            
00018C5E                            loc2_179DA:
00018C5E 5168 0012                  		subq.w	#8,$12(a0)
00018C62 6000                       		bra.s	loc2_179EE
00018C64                            ; ===========================================================================
00018C64                            
00018C64                            loc2_179E0:
00018C64 4268 0012                  		clr.w	$12(a0)
00018C68 303C 0097                  		move.w	#$97,d0
00018C6C 4EB9 0000 1594             		jsr	(PlaySound).l	; play lz3 music
00018C72                            
00018C72                            loc2_179EE:
00018C72 6100 F748                  		bsr.w	BossMove
00018C76 6000 FDF4                  		bra.w	loc2_177E6
00018C7A                            ; ===========================================================================
00018C7A                            
00018C7A                            loc2_179F6:				; XREF: obj77_ShipIndex
00018C7A 317C 0400 0010             		move.w	#$400,$10(a0)
00018C80 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C86 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018C8C 6700                       		beq.s	loc2_17A10
00018C8E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C92 6000                       		bra.s	loc2_17A16
00018C94                            ; ===========================================================================
00018C94                            
00018C94                            loc2_17A10:
00018C94 4A28 0001                  		tst.b	1(a0)
00018C98 6A00                       		bpl.s	obj77_ShipDel
00018C9A                            
00018C9A                            loc2_17A16:
00018C9A 6100 F720                  		bsr.w	BossMove
00018C9E 6000 FDCC                  		bra.w	loc2_177E6
00018CA2                            ; ===========================================================================
00018CA2                            
00018CA2                            obj77_ShipDel:
00018CA2 4EF9 0000 E03E             		jmp	DeleteObject
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            obj77_FaceMain:				; XREF: obj77_Index
00018CA8 4E75                       		rts
00018CAA                            ; ===========================================================================
00018CAA                            
00018CAA                            obj77_FlameMain:			; XREF: obj77_Index
00018CAA 4E75                       		rts
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018CAC 43F9 0001 884E             		lea	(Ani_TetoB).l,a1
00018CB2 4EB9 0000 B058             		jsr	AnimateSprite
00018CB8 4EF9 0000 E002             		jmp	DisplaySprite
00018CBE                            ; ---------------------------------------------------------------------------
00018CBE                            ; Sprite mappings - Fatass teto boss
00018CBE                            ; ---------------------------------------------------------------------------
00018CBE                            Map_TetoBoss:
00018CBE                            	include "_maps\tetoboss.asm"
00018CBE                            Map_f09a:
00018CBE 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018CC0 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018CC2 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018CC4 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018CC6 03                         Map_f09a_8: 	dc.b $3
00018CC7 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018CCC 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018CD1 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018CD6 06                         Map_f09a_18: 	dc.b $6
00018CD7 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018CDC 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018CE1 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018CE6 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018CEB EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018CF0 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018CF5 03                         Map_f09a_37: 	dc.b $3
00018CF6 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018CFB 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018D00 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018D05 06                         Map_f09a_47: 	dc.b $6
00018D06 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018D0B 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018D10 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018D15 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018D1A ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018D1F 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018D24                            	even
00018D24                            	even
00018D24                            ; ===========================================================================
00018D24                            ; ---------------------------------------------------------------------------
00018D24                            ; Object 73 - Eggman (MZ)
00018D24                            ; ---------------------------------------------------------------------------
00018D24                            
00018D24                            Obj73:					; XREF: Obj_Index
00018D24 7000                       		moveq	#0,d0
00018D26 1028 0024                  		move.b	$24(a0),d0
00018D2A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D2E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D32                            ; ===========================================================================
00018D32 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D34 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D36 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D38 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D3A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D3C                            
00018D3C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D3F 0401 04                    		dc.b 4,	1, 4
00018D42 0607 04                    		dc.b 6,	7, 4
00018D45 0800 03                    		dc.b 8,	0, 3
00018D48                            ; ===========================================================================
00018D48                            
00018D48                            Obj73_Main:				; XREF: Obj73_Index
00018D48 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D4E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D54 117C 000F 0020             		move.b	#$F,$20(a0)
00018D5A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D60 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018D64 2248                       		movea.l	a0,a1
00018D66 7203                       		moveq	#3,d1
00018D68 6000                       		bra.s	Obj73_LoadBoss
00018D6A                            ; ===========================================================================
00018D6A                            
00018D6A                            Obj73_Loop:
00018D6A 4EB9 0000 E49E             		jsr	SingleObjLoad2
00018D70 6600                       		bne.s	Obj73_ShipMain
00018D72 12BC 0073                  		move.b	#$73,0(a1)
00018D76 3368 0008 0008             		move.w	8(a0),8(a1)
00018D7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018D82                            
00018D82                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018D82 08A8 0000 0022             		bclr	#0,$22(a0)
00018D88 4229 0025                  		clr.b	$25(a1)
00018D8C 135A 0024                  		move.b	(a2)+,$24(a1)
00018D90 135A 001C                  		move.b	(a2)+,$1C(a1)
00018D94 135A 0018                  		move.b	(a2)+,$18(a1)
00018D98 237C 0001 8862 0004        		move.l	#Map_Eggman,4(a1)
00018DA0 337C 0400 0002             		move.w	#$400,2(a1)
00018DA6 137C 0004 0001             		move.b	#4,1(a1)
00018DAC 137C 0020 0019             		move.b	#$20,$19(a1)
00018DB2 2348 0034                  		move.l	a0,$34(a1)
00018DB6 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DBA                            
00018DBA                            Obj73_ShipMain:
00018DBA 7000                       		moveq	#0,d0
00018DBC 1028 0025                  		move.b	$25(a0),d0
00018DC0 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018DC4 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018DC8 43F9 0001 87FE             		lea	(Ani_Eggman).l,a1
00018DCE 4EB9 0000 B058             		jsr	AnimateSprite
00018DD4 7003                       		moveq	#3,d0
00018DD6 C028 0022                  		and.b	$22(a0),d0
00018DDA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018DE0 8128 0001                  		or.b	d0,1(a0)
00018DE4 4EF9 0000 E002             		jmp	DisplaySprite
00018DEA                            ; ===========================================================================
00018DEA 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018DEC 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018DEE 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018DF0 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018DF2 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018DF4                            ; ===========================================================================
00018DF4                            
00018DF4                            loc_18302:				; XREF: Obj73_ShipIndex
00018DF4 1028 003F                  		move.b	$3F(a0),d0
00018DF8 5428 003F                  		addq.b	#2,$3F(a0)
00018DFC 4EB9 0000 2D34             		jsr	(CalcSine).l
00018E02 E440                       		asr.w	#2,d0
00018E04 3140 0012                  		move.w	d0,$12(a0)
00018E08 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E0E 6100 F5AC                  		bsr.w	BossMove
00018E12 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E18 6600                       		bne.s	loc_18334
00018E1A 5428 0025                  		addq.b	#2,$25(a0)
00018E1E 4228 0028                  		clr.b	$28(a0)
00018E22 42A8 0010                  		clr.l	$10(a0)
00018E26                            
00018E26                            loc_18334:
00018E26 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018E2C 1140 0034                  		move.b	d0,$34(a0)
00018E30                            
00018E30                            loc_1833E:
00018E30 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E36 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E3C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E42 6400                       		bcc.s	locret_18390
00018E44 4A28 0022                  		tst.b	$22(a0)
00018E48 6B00                       		bmi.s	loc_18392
00018E4A 4A28 0020                  		tst.b	$20(a0)
00018E4E 6600                       		bne.s	locret_18390
00018E50 4A28 003E                  		tst.b	$3E(a0)
00018E54 6600                       		bne.s	loc_18374
00018E56 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E5C 303C 00AC                  		move.w	#$AC,d0
00018E60 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018E66                            
00018E66                            loc_18374:
00018E66 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018E6A 7000                       		moveq	#0,d0
00018E6C 4A51                       		tst.w	(a1)
00018E6E 6600                       		bne.s	loc_18382
00018E70 303C 0EEE                  		move.w	#$EEE,d0
00018E74                            
00018E74                            loc_18382:
00018E74 3280                       		move.w	d0,(a1)
00018E76 5328 003E                  		subq.b	#1,$3E(a0)
00018E7A 6600                       		bne.s	locret_18390
00018E7C 117C 000F 0020             		move.b	#$F,$20(a0)
00018E82                            
00018E82                            locret_18390:
00018E82 4E75                       		rts	
00018E84                            ; ===========================================================================
00018E84                            
00018E84                            loc_18392:				; XREF: loc_1833E
00018E84 7064                       		moveq	#100,d0
00018E86 6100 0000                  		bsr.w	AddPoints
00018E8A 117C 0004 0025             		move.b	#4,$25(a0)
00018E90 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018E96 4268 0010                  		clr.w	$10(a0)
00018E9A 4E75                       		rts	
00018E9C                            ; ===========================================================================
00018E9C                            
00018E9C                            loc_183AA:				; XREF: Obj73_ShipIndex
00018E9C 7000                       		moveq	#0,d0
00018E9E 1028 0028                  		move.b	$28(a0),d0
00018EA2 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018EA6 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018EAA 0228 0006 0028             		andi.b	#6,$28(a0)
00018EB0 6000 FF7E                  		bra.w	loc_1833E
00018EB4                            ; ===========================================================================
00018EB4 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EB6 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EB8 0000                       		dc.w loc_183CA-off_183C2
00018EBA 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            loc_183CA:				; XREF: off_183C2
00018EBC 4A68 0010                  		tst.w	$10(a0)
00018EC0 6600                       		bne.s	loc_183FE
00018EC2 7040                       		moveq	#$40,d0
00018EC4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018ECA 6700                       		beq.s	loc_183E6
00018ECC 6500                       		bcs.s	loc_183DE
00018ECE 4440                       		neg.w	d0
00018ED0                            
00018ED0                            loc_183DE:
00018ED0 3140 0012                  		move.w	d0,$12(a0)
00018ED4 6000 F4E6                  		bra.w	BossMove
00018ED8                            ; ===========================================================================
00018ED8                            
00018ED8                            loc_183E6:
00018ED8 317C 0200 0010             		move.w	#$200,$10(a0)
00018EDE 317C 0100 0012             		move.w	#$100,$12(a0)
00018EE4 0828 0000 0022             		btst	#0,$22(a0)
00018EEA 6600                       		bne.s	loc_183FE
00018EEC 4468 0010                  		neg.w	$10(a0)
00018EF0                            
00018EF0                            loc_183FE:
00018EF0 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018EF6 6400                       		bcc.s	Obj73_MakeLava
00018EF8 6100 F4C2                  		bsr.w	BossMove
00018EFC 5968 0012                  		subq.w	#4,$12(a0)
00018F00                            
00018F00                            Obj73_MakeLava:
00018F00 5328 0034                  		subq.b	#1,$34(a0)
00018F04 6400                       		bcc.s	loc_1845C
00018F06 4EB9 0000 E488             		jsr	SingleObjLoad
00018F0C 6600                       		bne.s	loc_1844A
00018F0E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F12 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F18 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018F1E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F24 80FC 0050                  		divu.w	#$50,d0
00018F28 4840                       		swap	d0
00018F2A 0640 1878                  		addi.w	#$1878,d0
00018F2E 3340 0008                  		move.w	d0,8(a1)
00018F32 EE09                       		lsr.b	#7,d1
00018F34 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F3A                            
00018F3A                            loc_1844A:
00018F3A 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018F40 0200 001F                  		andi.b	#$1F,d0
00018F44 0600 0040                  		addi.b	#$40,d0
00018F48 1140 0034                  		move.b	d0,$34(a0)
00018F4C                            
00018F4C                            loc_1845C:
00018F4C 0828 0000 0022             		btst	#0,$22(a0)
00018F52 6700                       		beq.s	loc_18474
00018F54 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F5A 6D00                       		blt.s	locret_1849C
00018F5C 317C 1910 0030             		move.w	#$1910,$30(a0)
00018F62 6000                       		bra.s	loc_18482
00018F64                            ; ===========================================================================
00018F64                            
00018F64                            loc_18474:
00018F64 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018F6A 6E00                       		bgt.s	locret_1849C
00018F6C 317C 1830 0030             		move.w	#$1830,$30(a0)
00018F72                            
00018F72                            loc_18482:
00018F72 4268 0010                  		clr.w	$10(a0)
00018F76 317C FE80 0012             		move.w	#-$180,$12(a0)
00018F7C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018F82 6400                       		bcc.s	loc_18498
00018F84 4468 0012                  		neg.w	$12(a0)
00018F88                            
00018F88                            loc_18498:
00018F88 5428 0028                  		addq.b	#2,$28(a0)
00018F8C                            
00018F8C                            locret_1849C:
00018F8C 4E75                       		rts	
00018F8E                            ; ===========================================================================
00018F8E                            
00018F8E                            Obj73_MakeLava2:			; XREF: off_183C2
00018F8E 6100 F42C                  		bsr.w	BossMove
00018F92 3028 0038                  		move.w	$38(a0),d0
00018F96 0440 022C                  		subi.w	#$22C,d0
00018F9A 6E00                       		bgt.s	locret_184F4
00018F9C 303C 022C                  		move.w	#$22C,d0
00018FA0 4A68 0012                  		tst.w	$12(a0)
00018FA4 6700                       		beq.s	loc_184EA
00018FA6 4268 0012                  		clr.w	$12(a0)
00018FAA 317C 0050 003C             		move.w	#$50,$3C(a0)
00018FB0 0868 0000 0022             		bchg	#0,$22(a0)
00018FB6 4EB9 0000 E488             		jsr	SingleObjLoad
00018FBC 6600                       		bne.s	loc_184EA
00018FBE 3368 0030 0008             		move.w	$30(a0),8(a1)
00018FC4 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018FCA 0669 0018 000C             		addi.w	#$18,$C(a1)
00018FD0 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018FD4 137C 0001 0028             		move.b	#1,$28(a1)
00018FDA                            
00018FDA                            loc_184EA:
00018FDA 5368 003C                  		subq.w	#1,$3C(a0)
00018FDE 6600                       		bne.s	locret_184F4
00018FE0 5428 0028                  		addq.b	#2,$28(a0)
00018FE4                            
00018FE4                            locret_184F4:
00018FE4 4E75                       		rts	
00018FE6                            ; ===========================================================================
00018FE6                            
00018FE6                            loc_184F6:				; XREF: Obj73_ShipIndex
00018FE6 5368 003C                  		subq.w	#1,$3C(a0)
00018FEA 6B00                       		bmi.s	loc_18500
00018FEC 6000 F38C                  		bra.w	BossDefeated
00018FF0                            ; ===========================================================================
00018FF0                            
00018FF0                            loc_18500:
00018FF0 08E8 0000 0022             		bset	#0,$22(a0)
00018FF6 08A8 0007 0022             		bclr	#7,$22(a0)
00018FFC 4268 0010                  		clr.w	$10(a0)
00019000 5428 0025                  		addq.b	#2,$25(a0)
00019004 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001900A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001900E 6600                       		bne.s	locret_1852A
00019010 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019016 4268 0012                  		clr.w	$12(a0)
0001901A                            
0001901A                            locret_1852A:
0001901A 4E75                       		rts	
0001901C                            ; ===========================================================================
0001901C                            
0001901C                            loc_1852C:				; XREF: Obj73_ShipIndex
0001901C 5268 003C                  		addq.w	#1,$3C(a0)
00019020 6700                       		beq.s	loc_18544
00019022 6A00                       		bpl.s	loc_1854E
00019024 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001902A 6400                       		bcc.s	loc_18544
0001902C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019032 6000                       		bra.s	loc_1857A
00019034                            ; ===========================================================================
00019034                            
00019034                            loc_18544:
00019034 4268 0012                  		clr.w	$12(a0)
00019038 4268 003C                  		clr.w	$3C(a0)
0001903C 6000                       		bra.s	loc_1857A
0001903E                            ; ===========================================================================
0001903E                            
0001903E                            loc_1854E:
0001903E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019044 6500                       		bcs.s	loc_18566
00019046 6700                       		beq.s	loc_1856C
00019048 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001904E 6500                       		bcs.s	loc_1857A
00019050 5428 0025                  		addq.b	#2,$25(a0)
00019054 6000                       		bra.s	loc_1857A
00019056                            ; ===========================================================================
00019056                            
00019056                            loc_18566:
00019056 5168 0012                  		subq.w	#8,$12(a0)
0001905A 6000                       		bra.s	loc_1857A
0001905C                            ; ===========================================================================
0001905C                            
0001905C                            loc_1856C:
0001905C 4268 0012                  		clr.w	$12(a0)
00019060 303C 0083                  		move.w	#$83,d0
00019064 4EB9 0000 1594             		jsr	(PlaySound).l	; play MZ music
0001906A                            
0001906A                            loc_1857A:
0001906A 6100 F350                  		bsr.w	BossMove
0001906E 6000 FDC0                  		bra.w	loc_1833E
00019072                            ; ===========================================================================
00019072                            
00019072                            loc_18582:				; XREF: Obj73_ShipIndex
00019072 317C 0500 0010             		move.w	#$500,$10(a0)
00019078 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001907E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019084 6400                       		bcc.s	loc_1859C
00019086 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001908A 6000                       		bra.s	loc_185A2
0001908C                            ; ===========================================================================
0001908C                            
0001908C                            loc_1859C:
0001908C 4A28 0001                  		tst.b	1(a0)
00019090 6A00                       		bpl.s	Obj73_ShipDel
00019092                            
00019092                            loc_185A2:
00019092 6100 F328                  		bsr.w	BossMove
00019096 6000 FD98                  		bra.w	loc_1833E
0001909A                            ; ===========================================================================
0001909A                            
0001909A                            Obj73_ShipDel:
0001909A 4EF9 0000 E03E             		jmp	DeleteObject
000190A0                            ; ===========================================================================
000190A0                            
000190A0                            Obj73_FaceMain:				; XREF: Obj73_Index
000190A0 7000                       		moveq	#0,d0
000190A2 7201                       		moveq	#1,d1
000190A4 2268 0034                  		movea.l	$34(a0),a1
000190A8 1029 0025                  		move.b	$25(a1),d0
000190AC 5540                       		subq.w	#2,d0
000190AE 6600                       		bne.s	loc_185D2
000190B0 0829 0001 0028             		btst	#1,$28(a1)
000190B6 6700                       		beq.s	loc_185DA
000190B8 4A69 0012                  		tst.w	$12(a1)
000190BC 6600                       		bne.s	loc_185DA
000190BE 7204                       		moveq	#4,d1
000190C0 6000                       		bra.s	loc_185EE
000190C2                            ; ===========================================================================
000190C2                            
000190C2                            loc_185D2:
000190C2 5500                       		subq.b	#2,d0
000190C4 6B00                       		bmi.s	loc_185DA
000190C6 720A                       		moveq	#$A,d1
000190C8 6000                       		bra.s	loc_185EE
000190CA                            ; ===========================================================================
000190CA                            
000190CA                            loc_185DA:
000190CA 4A29 0020                  		tst.b	$20(a1)
000190CE 6600                       		bne.s	loc_185E4
000190D0 7205                       		moveq	#5,d1
000190D2 6000                       		bra.s	loc_185EE
000190D4                            ; ===========================================================================
000190D4                            
000190D4                            loc_185E4:
000190D4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000190DA 6500                       		bcs.s	loc_185EE
000190DC 7204                       		moveq	#4,d1
000190DE                            
000190DE                            loc_185EE:
000190DE 1141 001C                  		move.b	d1,$1C(a0)
000190E2 5900                       		subq.b	#4,d0
000190E4 6600                       		bne.s	loc_18602
000190E6 117C 0006 001C             		move.b	#6,$1C(a0)
000190EC 4A28 0001                  		tst.b	1(a0)
000190F0 6A00                       		bpl.s	Obj73_FaceDel
000190F2                            
000190F2                            loc_18602:
000190F2 6000                       		bra.s	Obj73_Display
000190F4                            ; ===========================================================================
000190F4                            
000190F4                            Obj73_FaceDel:
000190F4 4EF9 0000 E03E             		jmp	DeleteObject
000190FA                            ; ===========================================================================
000190FA                            
000190FA                            Obj73_FlameMain:			; XREF: Obj73_Index
000190FA 117C 0007 001C             		move.b	#7,$1C(a0)
00019100 2268 0034                  		movea.l	$34(a0),a1
00019104 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001910A 6D00                       		blt.s	loc_1862A
0001910C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019112 4A28 0001                  		tst.b	1(a0)
00019116 6A00                       		bpl.s	Obj73_FlameDel
00019118 6000                       		bra.s	loc_18636
0001911A                            ; ===========================================================================
0001911A                            
0001911A                            loc_1862A:
0001911A 4A69 0010                  		tst.w	$10(a1)
0001911E 6700                       		beq.s	loc_18636
00019120 117C 0008 001C             		move.b	#8,$1C(a0)
00019126                            
00019126                            loc_18636:
00019126 6000                       		bra.s	Obj73_Display
00019128                            ; ===========================================================================
00019128                            
00019128                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019128 4EF9 0000 E03E             		jmp	DeleteObject
0001912E                            ; ===========================================================================
0001912E                            
0001912E                            Obj73_Display:
0001912E 43F9 0001 87FE             		lea	(Ani_Eggman).l,a1
00019134 4EB9 0000 B058             		jsr	AnimateSprite
0001913A                            
0001913A                            loc_1864A:
0001913A 2268 0034                  		movea.l	$34(a0),a1
0001913E 3169 0008 0008             		move.w	8(a1),8(a0)
00019144 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001914A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019150 7003                       		moveq	#3,d0
00019152 C028 0022                  		and.b	$22(a0),d0
00019156 0228 00FC 0001             		andi.b	#-4,1(a0)
0001915C 8128 0001                  		or.b	d0,1(a0)
00019160 4EF9 0000 E002             		jmp	DisplaySprite
00019166                            ; ===========================================================================
00019166                            
00019166                            Obj73_TubeMain:				; XREF: Obj73_Index
00019166 2268 0034                  		movea.l	$34(a0),a1
0001916A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019170 6600                       		bne.s	loc_18688
00019172 4A28 0001                  		tst.b	1(a0)
00019176 6A00                       		bpl.s	Obj73_TubeDel
00019178                            
00019178                            loc_18688:
00019178 217C 0001 892A 0004        		move.l	#Map_BossItems,4(a0)
00019180 317C 246C 0002             		move.w	#$246C,2(a0)
00019186 117C 0004 001A             		move.b	#4,$1A(a0)
0001918C 60AC                       		bra.s	loc_1864A
0001918E                            ; ===========================================================================
0001918E                            
0001918E                            Obj73_TubeDel:
0001918E 4EF9 0000 E03E             		jmp	DeleteObject
00019194                            ; ===========================================================================
00019194                            ; ---------------------------------------------------------------------------
00019194                            ; Object 74 - lava that	Eggman drops (MZ)
00019194                            ; ---------------------------------------------------------------------------
00019194                            
00019194                            Obj74:					; XREF: Obj_Index
00019194 7000                       		moveq	#0,d0
00019196 1028 0024                  		move.b	$24(a0),d0
0001919A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001919E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000191A2 4EF9 0000 E002             		jmp	DisplaySprite
000191A8                            ; ===========================================================================
000191A8 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000191AA 0000                       		dc.w Obj74_Action-Obj74_Index
000191AC 0000                       		dc.w loc_18886-Obj74_Index
000191AE 0000                       		dc.w Obj74_Delete3-Obj74_Index
000191B0                            ; ===========================================================================
000191B0                            
000191B0                            Obj74_Main:				; XREF: Obj74_Index
000191B0 117C 0008 0016             		move.b	#8,$16(a0)
000191B6 117C 0008 0017             		move.b	#8,$17(a0)
000191BC 217C 0000 BC56 0004        		move.l	#Map_obj14,4(a0)
000191C4 317C 0345 0002             		move.w	#$345,2(a0)
000191CA 117C 0004 0001             		move.b	#4,1(a0)
000191D0 117C 0005 0018             		move.b	#5,$18(a0)
000191D6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191DC 117C 0008 0019             		move.b	#8,$19(a0)
000191E2 5428 0024                  		addq.b	#2,$24(a0)
000191E6 4A28 0028                  		tst.b	$28(a0)
000191EA 6600                       		bne.s	loc_1870A
000191EC 117C 008B 0020             		move.b	#$8B,$20(a0)
000191F2 5428 0024                  		addq.b	#2,$24(a0)
000191F6 6000 0000                  		bra.w	loc_18886
000191FA                            ; ===========================================================================
000191FA                            
000191FA                            loc_1870A:
000191FA 117C 001E 0029             		move.b	#$1E,$29(a0)
00019200 303C 00AE                  		move.w	#$AE,d0
00019204 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava sound
0001920A                            
0001920A                            Obj74_Action:				; XREF: Obj74_Index
0001920A 7000                       		moveq	#0,d0
0001920C 1028 0025                  		move.b	$25(a0),d0
00019210 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019214 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019218 4EB9 0000 DFDC             		jsr	SpeedToPos
0001921E 43F9 0000 EEBC             		lea	(Ani_obj14).l,a1
00019224 4EB9 0000 B058             		jsr	AnimateSprite
0001922A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019230 6200                       		bhi.s	Obj74_Delete
00019232 4E75                       		rts	
00019234                            ; ===========================================================================
00019234                            
00019234                            Obj74_Delete:
00019234 4EF9 0000 E03E             		jmp	DeleteObject
0001923A                            ; ===========================================================================
0001923A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001923C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001923E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019240 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019242                            ; ===========================================================================
00019242                            
00019242                            Obj74_Drop:				; XREF: Obj74_Index2
00019242 08E8 0001 0022             		bset	#1,$22(a0)
00019248 5328 0029                  		subq.b	#1,$29(a0)
0001924C 6A00                       		bpl.s	locret_18780
0001924E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019254 4228 0028                  		clr.b	$28(a0)
00019258 0668 0018 0012             		addi.w	#$18,$12(a0)
0001925E 08A8 0001 0022             		bclr	#1,$22(a0)
00019264 6100 C6A8                  		bsr.w	ObjHitFloor
00019268 4A41                       		tst.w	d1
0001926A 6A00                       		bpl.s	locret_18780
0001926C 5428 0025                  		addq.b	#2,$25(a0)
00019270                            
00019270                            locret_18780:
00019270 4E75                       		rts	
00019272                            ; ===========================================================================
00019272                            
00019272                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019272 5568 000C                  		subq.w	#2,$C(a0)
00019276 08E8 0007 0002             		bset	#7,2(a0)
0001927C 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019282 4268 0012                  		clr.w	$12(a0)
00019286 3168 0008 0030             		move.w	8(a0),$30(a0)
0001928C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019292 117C 0003 0029             		move.b	#3,$29(a0)
00019298 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001929E 6600                       		bne.s	loc_187CA
000192A0 47D1                       		lea	(a1),a3
000192A2 45D0                       		lea	(a0),a2
000192A4 7003                       		moveq	#3,d0
000192A6                            
000192A6                            Obj74_Loop:
000192A6 26DA                       		move.l	(a2)+,(a3)+
000192A8 26DA                       		move.l	(a2)+,(a3)+
000192AA 26DA                       		move.l	(a2)+,(a3)+
000192AC 26DA                       		move.l	(a2)+,(a3)+
000192AE 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192B2                            
000192B2 4469 0010                  		neg.w	$10(a1)
000192B6 5429 0025                  		addq.b	#2,$25(a1)
000192BA                            
000192BA                            loc_187CA:
000192BA 5428 0025                  		addq.b	#2,$25(a0)
000192BE 4E75                       		rts	
000192C0                            
000192C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000192C0                            
000192C0                            
000192C0                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000192C0 4EB9 0000 E49E             		jsr	SingleObjLoad2
000192C6 6600                       		bne.s	locret_187EE
000192C8 3368 0008 0008             		move.w	8(a0),8(a1)
000192CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192D4 12BC 0074                  		move.b	#$74,(a1)
000192D8 337C 0067 0028             		move.w	#$67,$28(a1)
000192DE                            
000192DE                            locret_187EE:
000192DE 4E75                       		rts	
000192E0                            ; End of function Obj74_Duplicate2
000192E0                            
000192E0                            ; ===========================================================================
000192E0                            
000192E0                            Obj74_Duplicate:			; XREF: Obj74_Index2
000192E0 6100 C62C                  		bsr.w	ObjHitFloor
000192E4 4A41                       		tst.w	d1
000192E6 6A00                       		bpl.s	loc_18826
000192E8 3028 0008                  		move.w	8(a0),d0
000192EC 0C40 1940                  		cmpi.w	#$1940,d0
000192F0 6E00                       		bgt.s	loc_1882C
000192F2 3228 0030                  		move.w	$30(a0),d1
000192F6 B240                       		cmp.w	d0,d1
000192F8 6700                       		beq.s	loc_1881E
000192FA 0240 0010                  		andi.w	#$10,d0
000192FE 0241 0010                  		andi.w	#$10,d1
00019302 B240                       		cmp.w	d0,d1
00019304 6700                       		beq.s	loc_1881E
00019306 61B8                       		bsr.s	Obj74_Duplicate2
00019308 3168 0008 0032             		move.w	8(a0),$32(a0)
0001930E                            
0001930E                            loc_1881E:
0001930E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019314 4E75                       		rts	
00019316                            ; ===========================================================================
00019316                            
00019316                            loc_18826:
00019316 5428 0025                  		addq.b	#2,$25(a0)
0001931A 4E75                       		rts	
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_1882C:
0001931C 5428 0024                  		addq.b	#2,$24(a0)
00019320 4E75                       		rts	
00019322                            ; ===========================================================================
00019322                            
00019322                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019322 08A8 0001 0022             		bclr	#1,$22(a0)
00019328 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001932E 3028 0008                  		move.w	8(a0),d0
00019332 9068 0032                  		sub.w	$32(a0),d0
00019336 6A00                       		bpl.s	loc_1884A
00019338 4440                       		neg.w	d0
0001933A                            
0001933A                            loc_1884A:
0001933A 0C40 0012                  		cmpi.w	#$12,d0
0001933E 6600                       		bne.s	loc_18856
00019340 08A8 0007 0002             		bclr	#7,2(a0)
00019346                            
00019346                            loc_18856:
00019346 6100 C5C6                  		bsr.w	ObjHitFloor
0001934A 4A41                       		tst.w	d1
0001934C 6A00                       		bpl.s	locret_1887E
0001934E 5328 0029                  		subq.b	#1,$29(a0)
00019352 6700                       		beq.s	Obj74_Delete2
00019354 4268 0012                  		clr.w	$12(a0)
00019358 3168 0032 0008             		move.w	$32(a0),8(a0)
0001935E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019364 08E8 0007 0002             		bset	#7,2(a0)
0001936A 5528 0025                  		subq.b	#2,$25(a0)
0001936E                            
0001936E                            locret_1887E:
0001936E 4E75                       		rts	
00019370                            ; ===========================================================================
00019370                            
00019370                            Obj74_Delete2:
00019370 4EF9 0000 E03E             		jmp	DeleteObject
00019376                            ; ===========================================================================
00019376                            
00019376                            loc_18886:				; XREF: Obj74_Index
00019376 08E8 0007 0002             		bset	#7,2(a0)
0001937C 5328 0029                  		subq.b	#1,$29(a0)
00019380 6600                       		bne.s	Obj74_Animate
00019382 117C 0001 001C             		move.b	#1,$1C(a0)
00019388 5968 000C                  		subq.w	#4,$C(a0)
0001938C 4228 0020                  		clr.b	$20(a0)
00019390                            
00019390                            Obj74_Animate:
00019390 43F9 0000 EEBC             		lea	(Ani_obj14).l,a1
00019396 4EF9 0000 B058             		jmp	AnimateSprite
0001939C                            ; ===========================================================================
0001939C                            
0001939C                            Obj74_Delete3:				; XREF: Obj74_Index
0001939C 4EF9 0000 E03E             		jmp	DeleteObject
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            Obj7A_Delete:
000193A2 4EF9 0000 E03E             		jmp	DeleteObject
000193A8                            ; ===========================================================================
000193A8                            ; ---------------------------------------------------------------------------
000193A8                            ; Object 7A - Eggman (SLZ)
000193A8                            ; ---------------------------------------------------------------------------
000193A8                            
000193A8                            Obj7A:					; XREF: Obj_Index
000193A8 7000                       		moveq	#0,d0
000193AA 1028 0024                  		move.b	$24(a0),d0
000193AE 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193B2 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193B6                            ; ===========================================================================
000193B6 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193B8 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193BA 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193BC 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000193BE 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000193C0                            
000193C0 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000193C3 0401 04                    		dc.b 4,	1, 4
000193C6 0607 04                    		dc.b 6,	7, 4
000193C9 0800 03                    		dc.b 8,	0, 3
000193CC                            ; ===========================================================================
000193CC                            
000193CC                            Obj7A_Main:				; XREF: Obj7A_Index
000193CC 317C 2188 0008             		move.w	#$2188,8(a0)
000193D2 317C 0228 000C             		move.w	#$228,$C(a0)
000193D8 3168 0008 0030             		move.w	8(a0),$30(a0)
000193DE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000193E4 117C 000F 0020             		move.b	#$F,$20(a0)
000193EA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000193F0 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000193F4 2248                       		movea.l	a0,a1
000193F6 7203                       		moveq	#3,d1
000193F8 6000                       		bra.s	Obj7A_LoadBoss
000193FA                            ; ===========================================================================
000193FA                            
000193FA                            Obj7A_Loop:
000193FA 4EB9 0000 E49E             		jsr	SingleObjLoad2
00019400 6600                       		bne.s	loc_1895C
00019402 12BC 007A                  		move.b	#$7A,0(a1)
00019406 3368 0008 0008             		move.w	8(a0),8(a1)
0001940C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019412                            
00019412                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019412 08A8 0000 0022             		bclr	#0,$22(a0)
00019418 4229 0025                  		clr.b	$25(a1)
0001941C 135A 0024                  		move.b	(a2)+,$24(a1)
00019420 135A 001C                  		move.b	(a2)+,$1C(a1)
00019424 135A 0018                  		move.b	(a2)+,$18(a1)
00019428 237C 0001 8862 0004        		move.l	#Map_Eggman,4(a1)
00019430 337C 0400 0002             		move.w	#$400,2(a1)
00019436 137C 0004 0001             		move.b	#4,1(a1)
0001943C 137C 0020 0019             		move.b	#$20,$19(a1)
00019442 2348 0034                  		move.l	a0,$34(a1)
00019446 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001944A                            
0001944A                            loc_1895C:
0001944A 43F8 D040                  		lea	($FFFFD040).w,a1
0001944E 45E8 002A                  		lea	$2A(a0),a2
00019452 705E                       		moveq	#$5E,d0
00019454 723E                       		moveq	#$3E,d1
00019456                            
00019456                            loc_18968:
00019456 B011                       		cmp.b	(a1),d0
00019458 6600                       		bne.s	loc_18974
0001945A 4A29 0028                  		tst.b	$28(a1)
0001945E 6700                       		beq.s	loc_18974
00019460 34C9                       		move.w	a1,(a2)+
00019462                            
00019462                            loc_18974:
00019462 D2FC 0040                  		adda.w	#$40,a1
00019466 51C9 FFEE                  		dbf	d1,loc_18968
0001946A                            
0001946A                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001946A 7000                       		moveq	#0,d0
0001946C 1028 0025                  		move.b	$25(a0),d0
00019470 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019474 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019478 43F9 0001 87FE             		lea	(Ani_Eggman).l,a1
0001947E 4EB9 0000 B058             		jsr	AnimateSprite
00019484 7003                       		moveq	#3,d0
00019486 C028 0022                  		and.b	$22(a0),d0
0001948A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019490 8128 0001                  		or.b	d0,1(a0)
00019494 4EF9 0000 E002             		jmp	DisplaySprite
0001949A                            ; ===========================================================================
0001949A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001949C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001949E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000194A0 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000194A2 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000194A4 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000194A6                            ; ===========================================================================
000194A6                            
000194A6                            loc_189B8:				; XREF: Obj7A_ShipIndex
000194A6 317C FF00 0010             		move.w	#-$100,$10(a0)
000194AC 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194B2 6400                       		bcc.s	loc_189CA
000194B4 5428 0025                  		addq.b	#2,$25(a0)
000194B8                            
000194B8                            loc_189CA:
000194B8 6100 EF02                  		bsr.w	BossMove
000194BC 1028 003F                  		move.b	$3F(a0),d0
000194C0 5428 003F                  		addq.b	#2,$3F(a0)
000194C4 4EB9 0000 2D34             		jsr	(CalcSine).l
000194CA EC40                       		asr.w	#6,d0
000194CC D068 0038                  		add.w	$38(a0),d0
000194D0 3140 000C                  		move.w	d0,$C(a0)
000194D4 3168 0030 0008             		move.w	$30(a0),8(a0)
000194DA 6000                       		bra.s	loc_189FE
000194DC                            ; ===========================================================================
000194DC                            
000194DC                            loc_189EE:
000194DC 6100 EEDE                  		bsr.w	BossMove
000194E0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000194E6 3168 0030 0008             		move.w	$30(a0),8(a0)
000194EC                            
000194EC                            loc_189FE:
000194EC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000194F2 6400                       		bcc.s	locret_18A44
000194F4 4A28 0022                  		tst.b	$22(a0)
000194F8 6B00                       		bmi.s	loc_18A46
000194FA 4A28 0020                  		tst.b	$20(a0)
000194FE 6600                       		bne.s	locret_18A44
00019500 4A28 003E                  		tst.b	$3E(a0)
00019504 6600                       		bne.s	loc_18A28
00019506 117C 0020 003E             		move.b	#$20,$3E(a0)
0001950C 303C 00AC                  		move.w	#$AC,d0
00019510 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019516                            
00019516                            loc_18A28:
00019516 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001951A 7000                       		moveq	#0,d0
0001951C 4A51                       		tst.w	(a1)
0001951E 6600                       		bne.s	loc_18A36
00019520 303C 0EEE                  		move.w	#$EEE,d0
00019524                            
00019524                            loc_18A36:
00019524 3280                       		move.w	d0,(a1)
00019526 5328 003E                  		subq.b	#1,$3E(a0)
0001952A 6600                       		bne.s	locret_18A44
0001952C 117C 000F 0020             		move.b	#$F,$20(a0)
00019532                            
00019532                            locret_18A44:
00019532 4E75                       		rts	
00019534                            ; ===========================================================================
00019534                            
00019534                            loc_18A46:
00019534 7064                       		moveq	#100,d0
00019536 6100 0000                  		bsr.w	AddPoints
0001953A 117C 0006 0025             		move.b	#6,$25(a0)
00019540 117C 0078 003C             		move.b	#$78,$3C(a0)
00019546 4268 0010                  		clr.w	$10(a0)
0001954A 4E75                       		rts	
0001954C                            ; ===========================================================================
0001954C                            
0001954C                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001954C 3028 0030                  		move.w	$30(a0),d0
00019550 317C 0200 0010             		move.w	#$200,$10(a0)
00019556 0828 0000 0022             		btst	#0,$22(a0)
0001955C 6600                       		bne.s	loc_18A7C
0001955E 4468 0010                  		neg.w	$10(a0)
00019562 0C40 2008                  		cmpi.w	#$2008,d0
00019566 6E00                       		bgt.s	loc_18A88
00019568 6000                       		bra.s	loc_18A82
0001956A                            ; ===========================================================================
0001956A                            
0001956A                            loc_18A7C:
0001956A 0C40 2138                  		cmpi.w	#$2138,d0
0001956E 6D00                       		blt.s	loc_18A88
00019570                            
00019570                            loc_18A82:
00019570 0868 0000 0022             		bchg	#0,$22(a0)
00019576                            
00019576                            loc_18A88:
00019576 3028 0008                  		move.w	8(a0),d0
0001957A 72FF                       		moveq	#-1,d1
0001957C 7402                       		moveq	#2,d2
0001957E 45E8 002A                  		lea	$2A(a0),a2
00019582 7828                       		moveq	#$28,d4
00019584 4A68 0010                  		tst.w	$10(a0)
00019588 6A00                       		bpl.s	loc_18A9E
0001958A 4444                       		neg.w	d4
0001958C                            
0001958C                            loc_18A9E:
0001958C 321A                       		move.w	(a2)+,d1
0001958E 2641                       		movea.l	d1,a3
00019590 082B 0003 0022             		btst	#3,$22(a3)
00019596 6600                       		bne.s	loc_18AB4
00019598 362B 0008                  		move.w	8(a3),d3
0001959C D644                       		add.w	d4,d3
0001959E 9640                       		sub.w	d0,d3
000195A0 6700                       		beq.s	loc_18AC0
000195A2                            
000195A2                            loc_18AB4:
000195A2 51CA FFE8                  		dbf	d2,loc_18A9E
000195A6                            
000195A6 1142 0028                  		move.b	d2,$28(a0)
000195AA 6000 FF0C                  		bra.w	loc_189CA
000195AE                            ; ===========================================================================
000195AE                            
000195AE                            loc_18AC0:
000195AE 1142 0028                  		move.b	d2,$28(a0)
000195B2 5428 0025                  		addq.b	#2,$25(a0)
000195B6 117C 0028 003C             		move.b	#$28,$3C(a0)
000195BC 6000 FEFA                  		bra.w	loc_189CA
000195C0                            ; ===========================================================================
000195C0                            
000195C0                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000195C0 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000195C6 6600                       		bne.s	loc_18B36
000195C8 70FF                       		moveq	#-1,d0
000195CA 1028 0028                  		move.b	$28(a0),d0
000195CE 4880                       		ext.w	d0
000195D0 6B00                       		bmi.s	loc_18B40
000195D2 5540                       		subq.w	#2,d0
000195D4 4440                       		neg.w	d0
000195D6 D040                       		add.w	d0,d0
000195D8 43E8 002A                  		lea	$2A(a0),a1
000195DC 3031 0000                  		move.w	(a1,d0.w),d0
000195E0 2440                       		movea.l	d0,a2
000195E2 43F8 D040                  		lea	($FFFFD040).w,a1
000195E6 723E                       		moveq	#$3E,d1
000195E8                            
000195E8                            loc_18AFA:
000195E8 B0A9 003C                  		cmp.l	$3C(a1),d0
000195EC 6700                       		beq.s	loc_18B40
000195EE D2FC 0040                  		adda.w	#$40,a1
000195F2 51C9 FFF4                  		dbf	d1,loc_18AFA
000195F6                            
000195F6 2F08                       		move.l	a0,-(sp)
000195F8 41D2                       		lea	(a2),a0
000195FA 4EB9 0000 E49E             		jsr	SingleObjLoad2
00019600 205F                       		movea.l	(sp)+,a0
00019602 6600                       		bne.s	loc_18B40
00019604 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019608 3368 0008 0008             		move.w	8(a0),8(a1)
0001960E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019614 0669 0020 000C             		addi.w	#$20,$C(a1)
0001961A 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019620 234A 003C                  		move.l	a2,$3C(a1)
00019624                            
00019624                            loc_18B36:
00019624 5328 003C                  		subq.b	#1,$3C(a0)
00019628 6700                       		beq.s	loc_18B40
0001962A 6000 FEC0                  		bra.w	loc_189FE
0001962E                            ; ===========================================================================
0001962E                            
0001962E                            loc_18B40:
0001962E 5528 0025                  		subq.b	#2,$25(a0)
00019632 6000 FE84                  		bra.w	loc_189CA
00019636                            ; ===========================================================================
00019636                            
00019636                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019636 5328 003C                  		subq.b	#1,$3C(a0)
0001963A 6B00                       		bmi.s	loc_18B52
0001963C 6000 ED3C                  		bra.w	BossDefeated
00019640                            ; ===========================================================================
00019640                            
00019640                            loc_18B52:
00019640 5428 0025                  		addq.b	#2,$25(a0)
00019644 4268 0012                  		clr.w	$12(a0)
00019648 08E8 0000 0022             		bset	#0,$22(a0)
0001964E 08A8 0007 0022             		bclr	#7,$22(a0)
00019654 4268 0010                  		clr.w	$10(a0)
00019658 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001965E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019662 6600                       		bne.s	loc_18B7C
00019664 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001966A                            
0001966A                            loc_18B7C:
0001966A 6000 FE80                  		bra.w	loc_189FE
0001966E                            ; ===========================================================================
0001966E                            
0001966E                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001966E 5228 003C                  		addq.b	#1,$3C(a0)
00019672 6700                       		beq.s	loc_18B90
00019674 6A00                       		bpl.s	loc_18B96
00019676 0668 0018 0012             		addi.w	#$18,$12(a0)
0001967C 6000                       		bra.s	loc_18BC2
0001967E                            ; ===========================================================================
0001967E                            
0001967E                            loc_18B90:
0001967E 4268 0012                  		clr.w	$12(a0)
00019682 6000                       		bra.s	loc_18BC2
00019684                            ; ===========================================================================
00019684                            
00019684                            loc_18B96:
00019684 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001968A 6500                       		bcs.s	loc_18BAE
0001968C 6700                       		beq.s	loc_18BB4
0001968E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019694 6500                       		bcs.s	loc_18BC2
00019696 5428 0025                  		addq.b	#2,$25(a0)
0001969A 6000                       		bra.s	loc_18BC2
0001969C                            ; ===========================================================================
0001969C                            
0001969C                            loc_18BAE:
0001969C 5168 0012                  		subq.w	#8,$12(a0)
000196A0 6000                       		bra.s	loc_18BC2
000196A2                            ; ===========================================================================
000196A2                            
000196A2                            loc_18BB4:
000196A2 4268 0012                  		clr.w	$12(a0)
000196A6 303C 0084                  		move.w	#$84,d0
000196AA 4EB9 0000 1594             		jsr	(PlaySound).l	; play SLZ music
000196B0                            
000196B0                            loc_18BC2:
000196B0 6000 FE2A                  		bra.w	loc_189EE
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196B4 317C 0400 0010             		move.w	#$400,$10(a0)
000196BA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196C0 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000196C6 6400                       		bcc.s	loc_18BE0
000196C8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000196CC 6000                       		bra.s	loc_18BE8
000196CE                            ; ===========================================================================
000196CE                            
000196CE                            loc_18BE0:
000196CE 4A28 0001                  		tst.b	1(a0)
000196D2 6A00 FCCE                  		bpl.w	Obj7A_Delete
000196D6                            
000196D6                            loc_18BE8:
000196D6 6100 ECE4                  		bsr.w	BossMove
000196DA 6000 FDDC                  		bra.w	loc_189CA
000196DE                            ; ===========================================================================
000196DE                            
000196DE                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000196DE 7000                       		moveq	#0,d0
000196E0 7201                       		moveq	#1,d1
000196E2 2268 0034                  		movea.l	$34(a0),a1
000196E6 1029 0025                  		move.b	$25(a1),d0
000196EA 0C00 0006                  		cmpi.b	#6,d0
000196EE 6B00                       		bmi.s	loc_18C06
000196F0 720A                       		moveq	#$A,d1
000196F2 6000                       		bra.s	loc_18C1A
000196F4                            ; ===========================================================================
000196F4                            
000196F4                            loc_18C06:
000196F4 4A29 0020                  		tst.b	$20(a1)
000196F8 6600                       		bne.s	loc_18C10
000196FA 7205                       		moveq	#5,d1
000196FC 6000                       		bra.s	loc_18C1A
000196FE                            ; ===========================================================================
000196FE                            
000196FE                            loc_18C10:
000196FE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019704 6500                       		bcs.s	loc_18C1A
00019706 7204                       		moveq	#4,d1
00019708                            
00019708                            loc_18C1A:
00019708 1141 001C                  		move.b	d1,$1C(a0)
0001970C 0C00 000A                  		cmpi.b	#$A,d0
00019710 6600                       		bne.s	loc_18C32
00019712 117C 0006 001C             		move.b	#6,$1C(a0)
00019718 4A28 0001                  		tst.b	1(a0)
0001971C 6A00 FC84                  		bpl.w	Obj7A_Delete
00019720                            
00019720                            loc_18C32:
00019720 6000                       		bra.s	loc_18C6C
00019722                            ; ===========================================================================
00019722                            
00019722                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019722 117C 0008 001C             		move.b	#8,$1C(a0)
00019728 2268 0034                  		movea.l	$34(a0),a1
0001972C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019732 6600                       		bne.s	loc_18C56
00019734 4A28 0001                  		tst.b	1(a0)
00019738 6A00 FC68                  		bpl.w	Obj7A_Delete
0001973C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019742 6000                       		bra.s	loc_18C6C
00019744                            ; ===========================================================================
00019744                            
00019744                            loc_18C56:
00019744 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001974A 6E00                       		bgt.s	loc_18C6C
0001974C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019752 6D00                       		blt.s	loc_18C6C
00019754 117C 0007 001C             		move.b	#7,$1C(a0)
0001975A                            
0001975A                            loc_18C6C:
0001975A 43F9 0001 87FE             		lea	(Ani_Eggman).l,a1
00019760 4EB9 0000 B058             		jsr	AnimateSprite
00019766                            
00019766                            loc_18C78:
00019766 2268 0034                  		movea.l	$34(a0),a1
0001976A 3169 0008 0008             		move.w	8(a1),8(a0)
00019770 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019776 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001977C 7003                       		moveq	#3,d0
0001977E C028 0022                  		and.b	$22(a0),d0
00019782 0228 00FC 0001             		andi.b	#-4,1(a0)
00019788 8128 0001                  		or.b	d0,1(a0)
0001978C 4EF9 0000 E002             		jmp	DisplaySprite
00019792                            ; ===========================================================================
00019792                            
00019792                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019792 2268 0034                  		movea.l	$34(a0),a1
00019796 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001979C 6600                       		bne.s	loc_18CB8
0001979E 4A28 0001                  		tst.b	1(a0)
000197A2 6A00 FBFE                  		bpl.w	Obj7A_Delete
000197A6                            
000197A6                            loc_18CB8:
000197A6 217C 0001 892A 0004        		move.l	#Map_BossItems,4(a0)
000197AE 317C 246C 0002             		move.w	#$246C,2(a0)
000197B4 117C 0003 001A             		move.b	#3,$1A(a0)
000197BA 60AA                       		bra.s	loc_18C78
000197BC                            ; ===========================================================================
000197BC                            ; ---------------------------------------------------------------------------
000197BC                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197BC                            ; ---------------------------------------------------------------------------
000197BC                            
000197BC                            Obj7B:					; XREF: Obj_Index
000197BC 7000                       		moveq	#0,d0
000197BE 1028 0024                  		move.b	$24(a0),d0
000197C2 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000197C6 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000197CA 3028 0030                  		move.w	$30(a0),d0
000197CE 0240 FF80                  		andi.w	#$FF80,d0
000197D2 3238 F700                  		move.w	($FFFFF700).w,d1
000197D6 0441 0080                  		subi.w	#$80,d1
000197DA 0241 FF80                  		andi.w	#$FF80,d1
000197DE 9041                       		sub.w	d1,d0
000197E0 6B00 FBC0                  		bmi.w	Obj7A_Delete
000197E4 0C40 0280                  		cmpi.w	#$280,d0
000197E8 6200 FBB8                  		bhi.w	Obj7A_Delete
000197EC 4EF9 0000 E002             		jmp	DisplaySprite
000197F2                            ; ===========================================================================
000197F2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000197F4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000197F6 0000                       		dc.w loc_18DC6-Obj7B_Index
000197F8 0000                       		dc.w loc_18EAA-Obj7B_Index
000197FA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000197FC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000197FE                            ; ===========================================================================
000197FE                            
000197FE                            Obj7B_Main:				; XREF: Obj7B_Index
000197FE 217C 0001 23CE 0004        		move.l	#Map_obj5Ea,4(a0)
00019806 317C 0518 0002             		move.w	#$518,2(a0)
0001980C 117C 0001 001A             		move.b	#1,$1A(a0)
00019812 0028 0004 0001             		ori.b	#4,1(a0)
00019818 117C 0004 0018             		move.b	#4,$18(a0)
0001981E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019824 117C 000C 0019             		move.b	#$C,$19(a0)
0001982A 2268 003C                  		movea.l	$3C(a0),a1
0001982E 3169 0008 0030             		move.w	8(a1),$30(a0)
00019834 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001983A 08E8 0000 0022             		bset	#0,$22(a0)
00019840 3028 0008                  		move.w	8(a0),d0
00019844 B069 0008                  		cmp.w	8(a1),d0
00019848 6E00                       		bgt.s	loc_18D68
0001984A 08A8 0000 0022             		bclr	#0,$22(a0)
00019850 117C 0002 003A             		move.b	#2,$3A(a0)
00019856                            
00019856                            loc_18D68:
00019856 5428 0024                  		addq.b	#2,$24(a0)
0001985A                            
0001985A                            Obj7B_Fall:				; XREF: Obj7B_Index
0001985A 4EB9 0000 DF6A             		jsr	ObjectFall
00019860 2268 003C                  		movea.l	$3C(a0),a1
00019864 45F9 0000 0000             		lea	(word_19018).l,a2
0001986A 7000                       		moveq	#0,d0
0001986C 1029 001A                  		move.b	$1A(a1),d0
00019870 3228 0008                  		move.w	8(a0),d1
00019874 9268 0030                  		sub.w	$30(a0),d1
00019878 6400                       		bcc.s	loc_18D8E
0001987A 5440                       		addq.w	#2,d0
0001987C                            
0001987C                            loc_18D8E:
0001987C D040                       		add.w	d0,d0
0001987E 3228 0034                  		move.w	$34(a0),d1
00019882 D272 0000                  		add.w	(a2,d0.w),d1
00019886 B268 000C                  		cmp.w	$C(a0),d1
0001988A 6E00                       		bgt.s	locret_18DC4
0001988C 2268 003C                  		movea.l	$3C(a0),a1
00019890 7202                       		moveq	#2,d1
00019892 0828 0000 0022             		btst	#0,$22(a0)
00019898 6700                       		beq.s	loc_18DAE
0001989A 7200                       		moveq	#0,d1
0001989C                            
0001989C                            loc_18DAE:
0001989C 317C 00F0 0028             		move.w	#$F0,$28(a0)
000198A2 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000198A8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198AE 6000 0000                  		bra.w	loc_18FA2
000198B2                            ; ===========================================================================
000198B2                            
000198B2                            locret_18DC4:
000198B2 4E75                       		rts	
000198B4                            ; ===========================================================================
000198B4                            
000198B4                            loc_18DC6:				; XREF: Obj7B_Index
000198B4 2268 003C                  		movea.l	$3C(a0),a1
000198B8 7000                       		moveq	#0,d0
000198BA 1028 003A                  		move.b	$3A(a0),d0
000198BE 9029 003A                  		sub.b	$3A(a1),d0
000198C2 6700                       		beq.s	loc_18E2A
000198C4 6400                       		bcc.s	loc_18DDA
000198C6 4400                       		neg.b	d0
000198C8                            
000198C8                            loc_18DDA:
000198C8 323C F7E8                  		move.w	#-$818,d1
000198CC 343C FEEC                  		move.w	#-$114,d2
000198D0 0C00 0001                  		cmpi.b	#1,d0
000198D4 6700                       		beq.s	loc_18E00
000198D6 323C F6A0                  		move.w	#-$960,d1
000198DA 343C FF0C                  		move.w	#-$F4,d2
000198DE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000198E4 6D00                       		blt.s	loc_18E00
000198E6 323C F5E0                  		move.w	#-$A20,d1
000198EA 343C FF80                  		move.w	#-$80,d2
000198EE                            
000198EE                            loc_18E00:
000198EE 3141 0012                  		move.w	d1,$12(a0)
000198F2 3142 0010                  		move.w	d2,$10(a0)
000198F6 3028 0008                  		move.w	8(a0),d0
000198FA 9068 0030                  		sub.w	$30(a0),d0
000198FE 6400                       		bcc.s	loc_18E16
00019900 4468 0010                  		neg.w	$10(a0)
00019904                            
00019904                            loc_18E16:
00019904 117C 0001 001A             		move.b	#1,$1A(a0)
0001990A 317C 0020 0028             		move.w	#$20,$28(a0)
00019910 5428 0024                  		addq.b	#2,$24(a0)
00019914 6000 0000                  		bra.w	loc_18EAA
00019918                            ; ===========================================================================
00019918                            
00019918                            loc_18E2A:				; XREF: loc_18DC6
00019918 45F9 0000 0000             		lea	(word_19018).l,a2
0001991E 7000                       		moveq	#0,d0
00019920 1029 001A                  		move.b	$1A(a1),d0
00019924 343C 0028                  		move.w	#$28,d2
00019928 3228 0008                  		move.w	8(a0),d1
0001992C 9268 0030                  		sub.w	$30(a0),d1
00019930 6400                       		bcc.s	loc_18E48
00019932 4442                       		neg.w	d2
00019934 5440                       		addq.w	#2,d0
00019936                            
00019936                            loc_18E48:
00019936 D040                       		add.w	d0,d0
00019938 3228 0034                  		move.w	$34(a0),d1
0001993C D272 0000                  		add.w	(a2,d0.w),d1
00019940 3141 000C                  		move.w	d1,$C(a0)
00019944 D468 0030                  		add.w	$30(a0),d2
00019948 3142 0008                  		move.w	d2,8(a0)
0001994C 4268 000E                  		clr.w	$E(a0)
00019950 4268 000A                  		clr.w	$A(a0)
00019954 5368 0028                  		subq.w	#1,$28(a0)
00019958 6600                       		bne.s	loc_18E7A
0001995A 317C 0020 0028             		move.w	#$20,$28(a0)
00019960 117C 0008 0024             		move.b	#8,$24(a0)
00019966 4E75                       		rts	
00019968                            ; ===========================================================================
00019968                            
00019968                            loc_18E7A:
00019968 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001996E 6600                       		bne.s	loc_18E88
00019970 117C 0005 001F             		move.b	#5,$1F(a0)
00019976                            
00019976                            loc_18E88:
00019976 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001997C 6600                       		bne.s	loc_18E96
0001997E 117C 0002 001F             		move.b	#2,$1F(a0)
00019984                            
00019984                            loc_18E96:
00019984 5328 001E                  		subq.b	#1,$1E(a0)
00019988 6E00                       		bgt.s	locret_18EA8
0001998A 0868 0000 001A             		bchg	#0,$1A(a0)
00019990 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019996                            
00019996                            locret_18EA8:
00019996 4E75                       		rts	
00019998                            ; ===========================================================================
00019998                            
00019998                            loc_18EAA:				; XREF: Obj7B_Index
00019998 43F8 D040                  		lea	($FFFFD040).w,a1
0001999C 707A                       		moveq	#$7A,d0
0001999E 7240                       		moveq	#$40,d1
000199A0 743E                       		moveq	#$3E,d2
000199A2                            
000199A2                            loc_18EB4:
000199A2 B011                       		cmp.b	(a1),d0
000199A4 6700                       		beq.s	loc_18EC0
000199A6 D2C1                       		adda.w	d1,a1
000199A8 51CA FFF8                  		dbf	d2,loc_18EB4
000199AC                            
000199AC 6000                       		bra.s	loc_18F38
000199AE                            ; ===========================================================================
000199AE                            
000199AE                            loc_18EC0:
000199AE 3029 0008                  		move.w	8(a1),d0
000199B2 3229 000C                  		move.w	$C(a1),d1
000199B6 3428 0008                  		move.w	8(a0),d2
000199BA 3628 000C                  		move.w	$C(a0),d3
000199BE 45FA 0000                  		lea	byte_19022(pc),a2
000199C2 47FA 0000                  		lea	byte_19026(pc),a3
000199C6 181A                       		move.b	(a2)+,d4
000199C8 4884                       		ext.w	d4
000199CA D044                       		add.w	d4,d0
000199CC 181B                       		move.b	(a3)+,d4
000199CE 4884                       		ext.w	d4
000199D0 D444                       		add.w	d4,d2
000199D2 B440                       		cmp.w	d0,d2
000199D4 6500                       		bcs.s	loc_18F38
000199D6 181A                       		move.b	(a2)+,d4
000199D8 4884                       		ext.w	d4
000199DA D044                       		add.w	d4,d0
000199DC 181B                       		move.b	(a3)+,d4
000199DE 4884                       		ext.w	d4
000199E0 D444                       		add.w	d4,d2
000199E2 B042                       		cmp.w	d2,d0
000199E4 6500                       		bcs.s	loc_18F38
000199E6 181A                       		move.b	(a2)+,d4
000199E8 4884                       		ext.w	d4
000199EA D244                       		add.w	d4,d1
000199EC 181B                       		move.b	(a3)+,d4
000199EE 4884                       		ext.w	d4
000199F0 D644                       		add.w	d4,d3
000199F2 B641                       		cmp.w	d1,d3
000199F4 6500                       		bcs.s	loc_18F38
000199F6 181A                       		move.b	(a2)+,d4
000199F8 4884                       		ext.w	d4
000199FA D244                       		add.w	d4,d1
000199FC 181B                       		move.b	(a3)+,d4
000199FE 4884                       		ext.w	d4
00019A00 D644                       		add.w	d4,d3
00019A02 B243                       		cmp.w	d3,d1
00019A04 6500                       		bcs.s	loc_18F38
00019A06 5428 0024                  		addq.b	#2,$24(a0)
00019A0A 4268 0028                  		clr.w	$28(a0)
00019A0E 4229 0020                  		clr.b	$20(a1)
00019A12 5329 0021                  		subq.b	#1,$21(a1)
00019A16 6600                       		bne.s	loc_18F38
00019A18 08E9 0007 0022             		bset	#7,$22(a1)
00019A1E 4268 0010                  		clr.w	$10(a0)
00019A22 4268 0012                  		clr.w	$12(a0)
00019A26                            
00019A26                            loc_18F38:
00019A26 4A68 0012                  		tst.w	$12(a0)
00019A2A 6A00                       		bpl.s	loc_18F5C
00019A2C 4EB9 0000 DF6A             		jsr	ObjectFall
00019A32 3028 0034                  		move.w	$34(a0),d0
00019A36 0440 002F                  		subi.w	#$2F,d0
00019A3A B068 000C                  		cmp.w	$C(a0),d0
00019A3E 6E00                       		bgt.s	loc_18F58
00019A40 4EB9 0000 DF6A             		jsr	ObjectFall
00019A46                            
00019A46                            loc_18F58:
00019A46 6000 FF20                  		bra.w	loc_18E7A
00019A4A                            ; ===========================================================================
00019A4A                            
00019A4A                            loc_18F5C:
00019A4A 4EB9 0000 DF6A             		jsr	ObjectFall
00019A50 2268 003C                  		movea.l	$3C(a0),a1
00019A54 45F9 0000 0000             		lea	(word_19018).l,a2
00019A5A 7000                       		moveq	#0,d0
00019A5C 1029 001A                  		move.b	$1A(a1),d0
00019A60 3228 0008                  		move.w	8(a0),d1
00019A64 9268 0030                  		sub.w	$30(a0),d1
00019A68 6400                       		bcc.s	loc_18F7E
00019A6A 5440                       		addq.w	#2,d0
00019A6C                            
00019A6C                            loc_18F7E:
00019A6C D040                       		add.w	d0,d0
00019A6E 3228 0034                  		move.w	$34(a0),d1
00019A72 D272 0000                  		add.w	(a2,d0.w),d1
00019A76 B268 000C                  		cmp.w	$C(a0),d1
00019A7A 6ECA                       		bgt.s	loc_18F58
00019A7C 2268 003C                  		movea.l	$3C(a0),a1
00019A80 7202                       		moveq	#2,d1
00019A82 4A68 0010                  		tst.w	$10(a0)
00019A86 6B00                       		bmi.s	loc_18F9C
00019A88 7200                       		moveq	#0,d1
00019A8A                            
00019A8A                            loc_18F9C:
00019A8A 317C 0000 0028             		move.w	#0,$28(a0)
00019A90                            
00019A90                            loc_18FA2:
00019A90 1341 003A                  		move.b	d1,$3A(a1)
00019A94 1141 003A                  		move.b	d1,$3A(a0)
00019A98 B229 001A                  		cmp.b	$1A(a1),d1
00019A9C 6700                       		beq.s	loc_19008
00019A9E 08A9 0003 0022             		bclr	#3,$22(a1)
00019AA4 6700                       		beq.s	loc_19008
00019AA6 4229 0025                  		clr.b	$25(a1)
00019AAA 137C 0002 0024             		move.b	#2,$24(a1)
00019AB0 45F8 D000                  		lea	($FFFFD000).w,a2
00019AB4 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019ABA 446A 0012                  		neg.w	$12(a2)
00019ABE 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019AC4 6600                       		bne.s	loc_18FDC
00019AC6 E0EA 0012                  		asr	$12(a2)
00019ACA                            
00019ACA                            loc_18FDC:
00019ACA 08EA 0001 0022             		bset	#1,$22(a2)
00019AD0 08AA 0003 0022             		bclr	#3,$22(a2)
00019AD6 422A 003C                  		clr.b	$3C(a2)
00019ADA 2F08                       		move.l	a0,-(sp)
00019ADC 41D2                       		lea	(a2),a0
00019ADE 4EBA A370                  		jsr	Obj01_ChkRoll
00019AE2 205F                       		movea.l	(sp)+,a0
00019AE4 157C 0002 0024             		move.b	#2,$24(a2)
00019AEA 303C 00CC                  		move.w	#$CC,d0
00019AEE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019AF4                            
00019AF4                            loc_19008:
00019AF4 4268 0010                  		clr.w	$10(a0)
00019AF8 4268 0012                  		clr.w	$12(a0)
00019AFC 5428 0024                  		addq.b	#2,$24(a0)
00019B00 6000 FE66                  		bra.w	loc_18E7A
00019B04                            ; ===========================================================================
00019B04 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019B0E                            		even
00019B0E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B12                            		even
00019B12 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B16                            		even
00019B16                            ; ===========================================================================
00019B16                            
00019B16                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B16 10BC 003F                  		move.b	#$3F,(a0)
00019B1A 4228 0024                  		clr.b	$24(a0)
00019B1E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B24 6700                       		beq.s	Obj7B_MakeFrag
00019B26 4E75                       		rts	
00019B28                            ; ===========================================================================
00019B28                            
00019B28                            Obj7B_MakeFrag:
00019B28 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B2E 7203                       		moveq	#3,d1
00019B30 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B34                            
00019B34                            Obj7B_Loop:
00019B34 4EB9 0000 E488             		jsr	SingleObjLoad
00019B3A 6600                       		bne.s	loc_1909A
00019B3C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B40 137C 000A 0024             		move.b	#$A,$24(a1)
00019B46 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B4E 137C 0003 0018             		move.b	#3,$18(a1)
00019B54 337C 0518 0002             		move.w	#$518,2(a1)
00019B5A 3368 0008 0008             		move.w	8(a0),8(a1)
00019B60 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B66 335A 0010                  		move.w	(a2)+,$10(a1)
00019B6A 335A 0012                  		move.w	(a2)+,$12(a1)
00019B6E 137C 0098 0020             		move.b	#$98,$20(a1)
00019B74 0029 0004 0001             		ori.b	#4,1(a1)
00019B7A 08E9 0007 0001             		bset	#7,1(a1)
00019B80 137C 000C 0019             		move.b	#$C,$19(a1)
00019B86                            
00019B86                            loc_1909A:
00019B86 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019B8A                            
00019B8A 4E75                       		rts	
00019B8C                            ; ===========================================================================
00019B8C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019B90 FF60 FDC0                  		dc.w $FF60, $FDC0
00019B94 0100 FCC0                  		dc.w $100, $FCC0
00019B98 00A0 FDC0                  		dc.w $A0, $FDC0
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019B9C 4EB9 0000 DFDC             		jsr	SpeedToPos
00019BA2 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BA8 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019BAE 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BB4 7004                       		moveq	#4,d0
00019BB6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BBA E448                       		lsr.w	#2,d0
00019BBC 1140 001A                  		move.b	d0,$1A(a0)
00019BC0 4A28 0001                  		tst.b	1(a0)
00019BC4 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019BC8 4E75                       		rts	
00019BCA                            ; ===========================================================================
00019BCA                            ; ---------------------------------------------------------------------------
00019BCA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BCA                            ; ---------------------------------------------------------------------------
00019BCA                            Map_obj7B:
00019BCA                            	include "_maps\obj7B.asm"
00019BCA                            ; ---------------------------------------------------------------------------
00019BCA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BCA                            ; ---------------------------------------------------------------------------
00019BCA 0000                       		dc.w byte_190E2-Map_obj7B
00019BCC 0000                       		dc.w byte_190E8-Map_obj7B
00019BCE 01                         byte_190E2:	dc.b 1
00019BCF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019BD4 01                         byte_190E8:	dc.b 1
00019BD5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019BDA                            		even
00019BDA                            		even
00019BDA                            
00019BDA                            ; ===========================================================================
00019BDA                            ; ---------------------------------------------------------------------------
00019BDA                            ; Object 75 - Eggman (SYZ)
00019BDA                            ; ---------------------------------------------------------------------------
00019BDA                            
00019BDA                            Obj75:					; XREF: Obj_Index
00019BDA 7000                       		moveq	#0,d0
00019BDC 1028 0024                  		move.b	$24(a0),d0
00019BE0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019BE4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019BE8                            ; ===========================================================================
00019BE8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019BEA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019BEC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019BEE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019BF0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019BF2                            
00019BF2 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019BF5 0401 05                    		dc.b 4,	1, 5
00019BF8 0607 05                    		dc.b 6,	7, 5
00019BFB 0800 05                    		dc.b 8,	0, 5
00019BFE                            ; ===========================================================================
00019BFE                            
00019BFE                            Obj75_Main:				; XREF: Obj75_Index
00019BFE 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019C04 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019C0A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C10 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C16 117C 000F 0020             		move.b	#$F,$20(a0)
00019C1C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C22 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C26 2248                       		movea.l	a0,a1
00019C28 7203                       		moveq	#3,d1
00019C2A 6000                       		bra.s	Obj75_LoadBoss
00019C2C                            ; ===========================================================================
00019C2C                            
00019C2C                            Obj75_Loop:
00019C2C 4EB9 0000 E49E             		jsr	SingleObjLoad2
00019C32 6600                       		bne.s	Obj75_ShipMain
00019C34 12BC 0075                  		move.b	#$75,(a1)
00019C38 3368 0008 0008             		move.w	8(a0),8(a1)
00019C3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C44                            
00019C44                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C44 08A8 0000 0022             		bclr	#0,$22(a0)
00019C4A 4229 0025                  		clr.b	$25(a1)
00019C4E 135A 0024                  		move.b	(a2)+,$24(a1)
00019C52 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C56 135A 0018                  		move.b	(a2)+,$18(a1)
00019C5A 237C 0001 8862 0004        		move.l	#Map_Eggman,4(a1)
00019C62 337C 0400 0002             		move.w	#$400,2(a1)
00019C68 137C 0004 0001             		move.b	#4,1(a1)
00019C6E 137C 0020 0019             		move.b	#$20,$19(a1)
00019C74 2348 0034                  		move.l	a0,$34(a1)
00019C78 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019C7C                            
00019C7C                            Obj75_ShipMain:				; XREF: Obj75_Index
00019C7C 7000                       		moveq	#0,d0
00019C7E 1028 0025                  		move.b	$25(a0),d0
00019C82 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019C86 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019C8A 43F9 0001 87FE             		lea	(Ani_Eggman).l,a1
00019C90 4EB9 0000 B058             		jsr	AnimateSprite
00019C96 7003                       		moveq	#3,d0
00019C98 C028 0022                  		and.b	$22(a0),d0
00019C9C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CA2 8128 0001                  		or.b	d0,1(a0)
00019CA6 4EF9 0000 E002             		jmp	DisplaySprite
00019CAC                            ; ===========================================================================
00019CAC 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019CB0 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CB4 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CB8                            ; ===========================================================================
00019CB8                            
00019CB8                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CB8 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CBE 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019CC4 6400                       		bcc.s	loc_191DE
00019CC6 5428 0025                  		addq.b	#2,$25(a0)
00019CCA                            
00019CCA                            loc_191DE:
00019CCA 1028 003F                  		move.b	$3F(a0),d0
00019CCE 5428 003F                  		addq.b	#2,$3F(a0)
00019CD2 4EB9 0000 2D34             		jsr	(CalcSine).l
00019CD8 E440                       		asr.w	#2,d0
00019CDA 3140 0012                  		move.w	d0,$12(a0)
00019CDE                            
00019CDE                            loc_191F2:
00019CDE 6100 E6DC                  		bsr.w	BossMove
00019CE2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CE8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CEE                            
00019CEE                            loc_19202:
00019CEE 3028 0008                  		move.w	8(a0),d0
00019CF2 0440 2C00                  		subi.w	#$2C00,d0
00019CF6 EA48                       		lsr.w	#5,d0
00019CF8 1140 0034                  		move.b	d0,$34(a0)
00019CFC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019D02 6400                       		bcc.s	locret_19256
00019D04 4A28 0022                  		tst.b	$22(a0)
00019D08 6B00                       		bmi.s	loc_19258
00019D0A 4A28 0020                  		tst.b	$20(a0)
00019D0E 6600                       		bne.s	locret_19256
00019D10 4A28 003E                  		tst.b	$3E(a0)
00019D14 6600                       		bne.s	loc_1923A
00019D16 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D1C 303C 00AC                  		move.w	#$AC,d0
00019D20 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D26                            
00019D26                            loc_1923A:
00019D26 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D2A 7000                       		moveq	#0,d0
00019D2C 4A51                       		tst.w	(a1)
00019D2E 6600                       		bne.s	loc_19248
00019D30 303C 0EEE                  		move.w	#$EEE,d0
00019D34                            
00019D34                            loc_19248:
00019D34 3280                       		move.w	d0,(a1)
00019D36 5328 003E                  		subq.b	#1,$3E(a0)
00019D3A 6600                       		bne.s	locret_19256
00019D3C 117C 000F 0020             		move.b	#$F,$20(a0)
00019D42                            
00019D42                            locret_19256:
00019D42 4E75                       		rts	
00019D44                            ; ===========================================================================
00019D44                            
00019D44                            loc_19258:				; XREF: loc_19202
00019D44 7064                       		moveq	#100,d0
00019D46 6100 0000                  		bsr.w	AddPoints
00019D4A 117C 0006 0025             		move.b	#6,$25(a0)
00019D50 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D56 4268 0010                  		clr.w	$10(a0)
00019D5A 4E75                       		rts	
00019D5C                            ; ===========================================================================
00019D5C                            
00019D5C                            loc_19270:				; XREF: Obj75_ShipIndex
00019D5C 3028 0030                  		move.w	$30(a0),d0
00019D60 317C 0140 0010             		move.w	#$140,$10(a0)
00019D66 0828 0000 0022             		btst	#0,$22(a0)
00019D6C 6600                       		bne.s	loc_1928E
00019D6E 4468 0010                  		neg.w	$10(a0)
00019D72 0C40 2C08                  		cmpi.w	#$2C08,d0
00019D76 6E00                       		bgt.s	loc_1929E
00019D78 6000                       		bra.s	loc_19294
00019D7A                            ; ===========================================================================
00019D7A                            
00019D7A                            loc_1928E:
00019D7A 0C40 2D38                  		cmpi.w	#$2D38,d0
00019D7E 6D00                       		blt.s	loc_1929E
00019D80                            
00019D80                            loc_19294:
00019D80 0868 0000 0022             		bchg	#0,$22(a0)
00019D86 4228 003D                  		clr.b	$3D(a0)
00019D8A                            
00019D8A                            loc_1929E:
00019D8A 0440 2C10                  		subi.w	#$2C10,d0
00019D8E 0240 001F                  		andi.w	#$1F,d0
00019D92 0440 001F                  		subi.w	#$1F,d0
00019D96 6A00                       		bpl.s	loc_192AE
00019D98 4440                       		neg.w	d0
00019D9A                            
00019D9A                            loc_192AE:
00019D9A 5340                       		subq.w	#1,d0
00019D9C 6E00                       		bgt.s	loc_192E8
00019D9E 4A28 003D                  		tst.b	$3D(a0)
00019DA2 6600                       		bne.s	loc_192E8
00019DA4 3238 D008                  		move.w	($FFFFD008).w,d1
00019DA8 0441 2C00                  		subi.w	#$2C00,d1
00019DAC EA41                       		asr.w	#5,d1
00019DAE B228 0034                  		cmp.b	$34(a0),d1
00019DB2 6600                       		bne.s	loc_192E8
00019DB4 7000                       		moveq	#0,d0
00019DB6 1028 0034                  		move.b	$34(a0),d0
00019DBA EB40                       		asl.w	#5,d0
00019DBC 0640 2C10                  		addi.w	#$2C10,d0
00019DC0 3140 0030                  		move.w	d0,$30(a0)
00019DC4 6100 0000                  		bsr.w	Obj75_FindBlocks
00019DC8 5428 0025                  		addq.b	#2,$25(a0)
00019DCC 4268 0028                  		clr.w	$28(a0)
00019DD0 4268 0010                  		clr.w	$10(a0)
00019DD4                            
00019DD4                            loc_192E8:
00019DD4 6000 FEF4                  		bra.w	loc_191DE
00019DD8                            ; ===========================================================================
00019DD8                            
00019DD8                            loc_192EC:				; XREF: Obj75_ShipIndex
00019DD8 7000                       		moveq	#0,d0
00019DDA 1028 0028                  		move.b	$28(a0),d0
00019DDE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019DE2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019DE6                            ; ===========================================================================
00019DE6 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019DE8 0000                       		dc.w loc_19348-off_192FA
00019DEA 0000                       		dc.w loc_1938E-off_192FA
00019DEC 0000                       		dc.w loc_193D0-off_192FA
00019DEE                            ; ===========================================================================
00019DEE                            
00019DEE                            loc_19302:				; XREF: off_192FA
00019DEE 317C 0180 0012             		move.w	#$180,$12(a0)
00019DF4 3028 0038                  		move.w	$38(a0),d0
00019DF8 0C40 0556                  		cmpi.w	#$556,d0
00019DFC 6500                       		bcs.s	loc_19344
00019DFE 317C 0556 0038             		move.w	#$556,$38(a0)
00019E04 4268 003C                  		clr.w	$3C(a0)
00019E08 70FF                       		moveq	#-1,d0
00019E0A 3028 0036                  		move.w	$36(a0),d0
00019E0E 6700                       		beq.s	loc_1933C
00019E10 2240                       		movea.l	d0,a1
00019E12 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E18 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E1E 2348 0034                  		move.l	a0,$34(a1)
00019E22 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E28                            
00019E28                            loc_1933C:
00019E28 4268 0012                  		clr.w	$12(a0)
00019E2C 5428 0028                  		addq.b	#2,$28(a0)
00019E30                            
00019E30                            loc_19344:
00019E30 6000 FEAC                  		bra.w	loc_191F2
00019E34                            ; ===========================================================================
00019E34                            
00019E34                            loc_19348:				; XREF: off_192FA
00019E34 5368 003C                  		subq.w	#1,$3C(a0)
00019E38 6A00                       		bpl.s	loc_19366
00019E3A 5428 0028                  		addq.b	#2,$28(a0)
00019E3E 317C F800 0012             		move.w	#-$800,$12(a0)
00019E44 4A68 0036                  		tst.w	$36(a0)
00019E48 6600                       		bne.s	loc_19362
00019E4A E0E8 0012                  		asr	$12(a0)
00019E4E                            
00019E4E                            loc_19362:
00019E4E 7000                       		moveq	#0,d0
00019E50 6000                       		bra.s	loc_1937C
00019E52                            ; ===========================================================================
00019E52                            
00019E52                            loc_19366:
00019E52 7000                       		moveq	#0,d0
00019E54 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E5A 6E00                       		bgt.s	loc_1937C
00019E5C 7002                       		moveq	#2,d0
00019E5E 0828 0001 003D             		btst	#1,$3D(a0)
00019E64 6700                       		beq.s	loc_1937C
00019E66 4440                       		neg.w	d0
00019E68                            
00019E68                            loc_1937C:
00019E68 D068 0038                  		add.w	$38(a0),d0
00019E6C 3140 000C                  		move.w	d0,$C(a0)
00019E70 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E76 6000 FE76                  		bra.w	loc_19202
00019E7A                            ; ===========================================================================
00019E7A                            
00019E7A                            loc_1938E:				; XREF: off_192FA
00019E7A 303C 04DA                  		move.w	#$4DA,d0
00019E7E 4A68 0036                  		tst.w	$36(a0)
00019E82 6700                       		beq.s	loc_1939C
00019E84 0440 0018                  		subi.w	#$18,d0
00019E88                            
00019E88                            loc_1939C:
00019E88 B068 0038                  		cmp.w	$38(a0),d0
00019E8C 6D00                       		blt.s	loc_193BE
00019E8E 317C 0008 003C             		move.w	#8,$3C(a0)
00019E94 4A68 0036                  		tst.w	$36(a0)
00019E98 6700                       		beq.s	loc_193B4
00019E9A 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019EA0                            
00019EA0                            loc_193B4:
00019EA0 5428 0028                  		addq.b	#2,$28(a0)
00019EA4 4268 0012                  		clr.w	$12(a0)
00019EA8 6000                       		bra.s	loc_193CC
00019EAA                            ; ===========================================================================
00019EAA                            
00019EAA                            loc_193BE:
00019EAA 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019EB0 6C00                       		bge.s	loc_193CC
00019EB2 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EB8                            
00019EB8                            loc_193CC:
00019EB8 6000 FE24                  		bra.w	loc_191F2
00019EBC                            ; ===========================================================================
00019EBC                            
00019EBC                            loc_193D0:				; XREF: off_192FA
00019EBC 5368 003C                  		subq.w	#1,$3C(a0)
00019EC0 6E00                       		bgt.s	loc_19406
00019EC2 6B00                       		bmi.s	loc_193EE
00019EC4 70FF                       		moveq	#-1,d0
00019EC6 3028 0036                  		move.w	$36(a0),d0
00019ECA 6700                       		beq.s	loc_193E8
00019ECC 2240                       		movea.l	d0,a1
00019ECE 137C 000A 0029             		move.b	#$A,$29(a1)
00019ED4                            
00019ED4                            loc_193E8:
00019ED4 4268 0036                  		clr.w	$36(a0)
00019ED8 6000                       		bra.s	loc_19406
00019EDA                            ; ===========================================================================
00019EDA                            
00019EDA                            loc_193EE:
00019EDA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019EE0 6600                       		bne.s	loc_19406
00019EE2 4228 0029                  		clr.b	$29(a0)
00019EE6 5528 0025                  		subq.b	#2,$25(a0)
00019EEA 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019EF0 6000                       		bra.s	loc_19446
00019EF2                            ; ===========================================================================
00019EF2                            
00019EF2                            loc_19406:
00019EF2 7001                       		moveq	#1,d0
00019EF4 4A68 0036                  		tst.w	$36(a0)
00019EF8 6700                       		beq.s	loc_19410
00019EFA 7002                       		moveq	#2,d0
00019EFC                            
00019EFC                            loc_19410:
00019EFC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019F02 6700                       		beq.s	loc_19424
00019F04 6D00                       		blt.s	loc_1941C
00019F06 4440                       		neg.w	d0
00019F08                            
00019F08                            loc_1941C:
00019F08 4A68 0036                  		tst.w	$36(a0)
00019F0C D168 0038                  		add.w	d0,$38(a0)
00019F10                            
00019F10                            loc_19424:
00019F10 7000                       		moveq	#0,d0
00019F12 4A68 0036                  		tst.w	$36(a0)
00019F16 6700                       		beq.s	loc_19438
00019F18 7002                       		moveq	#2,d0
00019F1A 0828 0000 003D             		btst	#0,$3D(a0)
00019F20 6700                       		beq.s	loc_19438
00019F22 4440                       		neg.w	d0
00019F24                            
00019F24                            loc_19438:
00019F24 D068 0038                  		add.w	$38(a0),d0
00019F28 3140 000C                  		move.w	d0,$C(a0)
00019F2C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F32                            
00019F32                            loc_19446:
00019F32 6000 FDBA                  		bra.w	loc_19202
00019F36                            
00019F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F36                            
00019F36                            
00019F36                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F36 4268 0036                  		clr.w	$36(a0)
00019F3A 43F8 D040                  		lea	($FFFFD040).w,a1
00019F3E 703E                       		moveq	#$3E,d0
00019F40 7276                       		moveq	#$76,d1
00019F42 1428 0034                  		move.b	$34(a0),d2
00019F46                            
00019F46                            Obj75_FindLoop:
00019F46 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F48 6600                       		bne.s	loc_1946A	; if not, branch
00019F4A B429 0028                  		cmp.b	$28(a1),d2
00019F4E 6600                       		bne.s	loc_1946A
00019F50 3149 0036                  		move.w	a1,$36(a0)
00019F54 6000                       		bra.s	locret_19472
00019F56                            ; ===========================================================================
00019F56                            
00019F56                            loc_1946A:
00019F56 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F5A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019F5E                            
00019F5E                            locret_19472:
00019F5E 4E75                       		rts	
00019F60                            ; End of function Obj75_FindBlocks
00019F60                            
00019F60                            ; ===========================================================================
00019F60                            
00019F60                            loc_19474:				; XREF: Obj75_ShipIndex
00019F60 5368 003C                  		subq.w	#1,$3C(a0)
00019F64 6B00                       		bmi.s	loc_1947E
00019F66 6000 E412                  		bra.w	BossDefeated
00019F6A                            ; ===========================================================================
00019F6A                            
00019F6A                            loc_1947E:
00019F6A 5428 0025                  		addq.b	#2,$25(a0)
00019F6E 4268 0012                  		clr.w	$12(a0)
00019F72 08E8 0000 0022             		bset	#0,$22(a0)
00019F78 08A8 0007 0022             		bclr	#7,$22(a0)
00019F7E 4268 0010                  		clr.w	$10(a0)
00019F82 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019F88 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019F8C 6600                       		bne.s	loc_194A8
00019F8E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019F94                            
00019F94                            loc_194A8:
00019F94 6000 FD58                  		bra.w	loc_19202
00019F98                            ; ===========================================================================
00019F98                            
00019F98                            loc_194AC:				; XREF: Obj75_ShipIndex
00019F98 5268 003C                  		addq.w	#1,$3C(a0)
00019F9C 6700                       		beq.s	loc_194BC
00019F9E 6A00                       		bpl.s	loc_194C2
00019FA0 0668 0018 0012             		addi.w	#$18,$12(a0)
00019FA6 6000                       		bra.s	loc_194EE
00019FA8                            ; ===========================================================================
00019FA8                            
00019FA8                            loc_194BC:
00019FA8 4268 0012                  		clr.w	$12(a0)
00019FAC 6000                       		bra.s	loc_194EE
00019FAE                            ; ===========================================================================
00019FAE                            
00019FAE                            loc_194C2:
00019FAE 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FB4 6500                       		bcs.s	loc_194DA
00019FB6 6700                       		beq.s	loc_194E0
00019FB8 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019FBE 6500                       		bcs.s	loc_194EE
00019FC0 5428 0025                  		addq.b	#2,$25(a0)
00019FC4 6000                       		bra.s	loc_194EE
00019FC6                            ; ===========================================================================
00019FC6                            
00019FC6                            loc_194DA:
00019FC6 5168 0012                  		subq.w	#8,$12(a0)
00019FCA 6000                       		bra.s	loc_194EE
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            loc_194E0:
00019FCC 4268 0012                  		clr.w	$12(a0)
00019FD0 303C 0085                  		move.w	#$85,d0
00019FD4 4EB9 0000 1594             		jsr	(PlaySound).l	; play SYZ music
00019FDA                            
00019FDA                            loc_194EE:
00019FDA 6000 FD02                  		bra.w	loc_191F2
00019FDE                            ; ===========================================================================
00019FDE                            
00019FDE                            loc_194F2:				; XREF: Obj75_ShipIndex
00019FDE 317C 0400 0010             		move.w	#$400,$10(a0)
00019FE4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019FEA 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019FF0 6400                       		bcc.s	loc_1950C
00019FF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019FF6 6000                       		bra.s	loc_19512
00019FF8                            ; ===========================================================================
00019FF8                            
00019FF8                            loc_1950C:
00019FF8 4A28 0001                  		tst.b	1(a0)
00019FFC 6A00                       		bpl.s	Obj75_ShipDelete
00019FFE                            
00019FFE                            loc_19512:
00019FFE 6100 E3BC                  		bsr.w	BossMove
0001A002 6000 FCC6                  		bra.w	loc_191DE
0001A006                            ; ===========================================================================
0001A006                            
0001A006                            Obj75_ShipDelete:
0001A006 4EF9 0000 E03E             		jmp	DeleteObject
0001A00C                            ; ===========================================================================
0001A00C                            
0001A00C                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A00C 7201                       		moveq	#1,d1
0001A00E 2268 0034                  		movea.l	$34(a0),a1
0001A012 7000                       		moveq	#0,d0
0001A014 1029 0025                  		move.b	$25(a1),d0
0001A018 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A01C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A020 1141 001C                  		move.b	d1,$1C(a0)
0001A024 1010                       		move.b	(a0),d0
0001A026 B011                       		cmp.b	(a1),d0
0001A028 6600                       		bne.s	Obj75_FaceDelete
0001A02A 6000                       		bra.s	loc_195BE
0001A02C                            ; ===========================================================================
0001A02C                            
0001A02C                            Obj75_FaceDelete:
0001A02C 4EF9 0000 E03E             		jmp	DeleteObject
0001A032                            ; ===========================================================================
0001A032 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A036 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A03A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A03E                            ; ===========================================================================
0001A03E                            
0001A03E                            loc_19552:				; XREF: off_19546
0001A03E 720A                       		moveq	#$A,d1
0001A040 4E75                       		rts	
0001A042                            ; ===========================================================================
0001A042                            
0001A042                            loc_19556:				; XREF: off_19546
0001A042 7206                       		moveq	#6,d1
0001A044 4E75                       		rts	
0001A046                            ; ===========================================================================
0001A046                            
0001A046                            loc_1955A:				; XREF: off_19546
0001A046 7000                       		moveq	#0,d0
0001A048 1029 0028                  		move.b	$28(a1),d0
0001A04C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A050 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A054                            ; ===========================================================================
0001A054 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A058 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A05C                            ; ===========================================================================
0001A05C                            
0001A05C                            loc_19570:				; XREF: off_19568
0001A05C 6000                       		bra.s	loc_19574
0001A05E                            ; ===========================================================================
0001A05E                            
0001A05E                            loc_19572:				; XREF: off_19568
0001A05E 7206                       		moveq	#6,d1
0001A060                            
0001A060                            loc_19574:				; XREF: off_19546
0001A060 4A29 0020                  		tst.b	$20(a1)
0001A064 6600                       		bne.s	loc_1957E
0001A066 7205                       		moveq	#5,d1
0001A068 4E75                       		rts	
0001A06A                            ; ===========================================================================
0001A06A                            
0001A06A                            loc_1957E:
0001A06A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A070 6500                       		bcs.s	locret_19588
0001A072 7204                       		moveq	#4,d1
0001A074                            
0001A074                            locret_19588:
0001A074 4E75                       		rts	
0001A076                            ; ===========================================================================
0001A076                            
0001A076                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A076 117C 0007 001C             		move.b	#7,$1C(a0)
0001A07C 2268 0034                  		movea.l	$34(a0),a1
0001A080 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A086 6600                       		bne.s	loc_195AA
0001A088 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A08E 4A28 0001                  		tst.b	1(a0)
0001A092 6A00                       		bpl.s	Obj75_FlameDelete
0001A094 6000                       		bra.s	loc_195B6
0001A096                            ; ===========================================================================
0001A096                            
0001A096                            loc_195AA:
0001A096 4A69 0010                  		tst.w	$10(a1)
0001A09A 6700                       		beq.s	loc_195B6
0001A09C 117C 0008 001C             		move.b	#8,$1C(a0)
0001A0A2                            
0001A0A2                            loc_195B6:
0001A0A2 6000                       		bra.s	loc_195BE
0001A0A4                            ; ===========================================================================
0001A0A4                            
0001A0A4                            Obj75_FlameDelete:
0001A0A4 4EF9 0000 E03E             		jmp	DeleteObject
0001A0AA                            ; ===========================================================================
0001A0AA                            
0001A0AA                            loc_195BE:
0001A0AA 43F9 0001 87FE             		lea	(Ani_Eggman).l,a1
0001A0B0 4EB9 0000 B058             		jsr	AnimateSprite
0001A0B6 2268 0034                  		movea.l	$34(a0),a1
0001A0BA 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0C0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A0C6                            
0001A0C6                            loc_195DA:
0001A0C6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A0CC 7003                       		moveq	#3,d0
0001A0CE C028 0022                  		and.b	$22(a0),d0
0001A0D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A0D8 8128 0001                  		or.b	d0,1(a0)
0001A0DC 4EF9 0000 E002             		jmp	DisplaySprite
0001A0E2                            ; ===========================================================================
0001A0E2                            
0001A0E2                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A0E2 217C 0001 892A 0004        		move.l	#Map_BossItems,4(a0)
0001A0EA 317C 246C 0002             		move.w	#$246C,2(a0)
0001A0F0 117C 0005 001A             		move.b	#5,$1A(a0)
0001A0F6 2268 0034                  		movea.l	$34(a0),a1
0001A0FA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A100 6600                       		bne.s	loc_1961C
0001A102 4A28 0001                  		tst.b	1(a0)
0001A106 6A00                       		bpl.s	Obj75_SpikeDelete
0001A108                            
0001A108                            loc_1961C:
0001A108 3169 0008 0008             		move.w	8(a1),8(a0)
0001A10E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A114 3028 003C                  		move.w	$3C(a0),d0
0001A118 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A11E 6600                       		bne.s	loc_19652
0001A120 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A126 6700                       		beq.s	loc_1964C
0001A128 4A29 0028                  		tst.b	$28(a1)
0001A12C 6600                       		bne.s	loc_19658
0001A12E 0C40 0094                  		cmpi.w	#$94,d0
0001A132 6C00                       		bge.s	loc_19658
0001A134 5E40                       		addq.w	#7,d0
0001A136 6000                       		bra.s	loc_19658
0001A138                            ; ===========================================================================
0001A138                            
0001A138                            loc_1964C:
0001A138 4A69 003C                  		tst.w	$3C(a1)
0001A13C 6A00                       		bpl.s	loc_19658
0001A13E                            
0001A13E                            loc_19652:
0001A13E 4A40                       		tst.w	d0
0001A140 6F00                       		ble.s	loc_19658
0001A142 5B40                       		subq.w	#5,d0
0001A144                            
0001A144                            loc_19658:
0001A144 3140 003C                  		move.w	d0,$3C(a0)
0001A148 E440                       		asr.w	#2,d0
0001A14A D168 000C                  		add.w	d0,$C(a0)
0001A14E 117C 0008 0019             		move.b	#8,$19(a0)
0001A154 117C 000C 0016             		move.b	#$C,$16(a0)
0001A15A 4228 0020                  		clr.b	$20(a0)
0001A15E 2268 0034                  		movea.l	$34(a0),a1
0001A162 4A29 0020                  		tst.b	$20(a1)
0001A166 6700                       		beq.s	loc_19688
0001A168 4A29 0029                  		tst.b	$29(a1)
0001A16C 6600                       		bne.s	loc_19688
0001A16E 117C 0084 0020             		move.b	#$84,$20(a0)
0001A174                            
0001A174                            loc_19688:
0001A174 6000 FF50                  		bra.w	loc_195DA
0001A178                            ; ===========================================================================
0001A178                            
0001A178                            Obj75_SpikeDelete:
0001A178 4EF9 0000 E03E             		jmp	DeleteObject
0001A17E                            ; ===========================================================================
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            
0001A17E                            Obj76:					; XREF: Obj_Index
0001A17E 7000                       		moveq	#0,d0
0001A180 1028 0024                  		move.b	$24(a0),d0
0001A184 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A188 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A18C                            ; ===========================================================================
0001A18C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A18E 0000                       		dc.w Obj76_Action-Obj76_Index
0001A190 0000                       		dc.w loc_19762-Obj76_Index
0001A192                            ; ===========================================================================
0001A192                            
0001A192                            Obj76_Main:				; XREF: Obj76_Index
0001A192 7800                       		moveq	#0,d4
0001A194 3A3C 2C10                  		move.w	#$2C10,d5
0001A198 7C09                       		moveq	#9,d6
0001A19A 43D0                       		lea	(a0),a1
0001A19C 6000                       		bra.s	Obj76_MakeBlock
0001A19E                            ; ===========================================================================
0001A19E                            
0001A19E                            Obj76_Loop:
0001A19E 4EB9 0000 E488             		jsr	SingleObjLoad
0001A1A4 6600                       		bne.s	Obj76_ExitLoop
0001A1A6                            
0001A1A6                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A1A6 12BC 0076                  		move.b	#$76,(a1)
0001A1AA 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1B2 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1B8 137C 0004 0001             		move.b	#4,1(a1)
0001A1BE 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1C4 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1CA 137C 0003 0018             		move.b	#3,$18(a1)
0001A1D0 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A1D4 337C 0582 000C             		move.w	#$582,$C(a1)
0001A1DA 3344 0028                  		move.w	d4,$28(a1)
0001A1DE 0644 0101                  		addi.w	#$101,d4
0001A1E2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A1E6 5429 0024                  		addq.b	#2,$24(a1)
0001A1EA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A1EE                            
0001A1EE                            Obj76_ExitLoop:
0001A1EE 4E75                       		rts	
0001A1F0                            ; ===========================================================================
0001A1F0                            
0001A1F0                            Obj76_Action:				; XREF: Obj76_Index
0001A1F0 1028 0029                  		move.b	$29(a0),d0
0001A1F4 B028 0028                  		cmp.b	$28(a0),d0
0001A1F8 6700                       		beq.s	Obj76_Solid
0001A1FA 4A00                       		tst.b	d0
0001A1FC 6B00                       		bmi.s	loc_19718
0001A1FE                            
0001A1FE                            loc_19712:
0001A1FE 6100 0000                  		bsr.w	Obj76_Break
0001A202 6000                       		bra.s	Obj76_Display
0001A204                            ; ===========================================================================
0001A204                            
0001A204                            loc_19718:
0001A204 2268 0034                  		movea.l	$34(a0),a1
0001A208 4A29 0021                  		tst.b	$21(a1)
0001A20C 67F0                       		beq.s	loc_19712
0001A20E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A214 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A21A 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A220 B2C8                       		cmpa.w	a0,a1
0001A222 6500                       		bcs.s	Obj76_Display
0001A224 3029 0012                  		move.w	$12(a1),d0
0001A228 48C0                       		ext.l	d0
0001A22A E080                       		asr.l	#8,d0
0001A22C D168 000C                  		add.w	d0,$C(a0)
0001A230 6000                       		bra.s	Obj76_Display
0001A232                            ; ===========================================================================
0001A232                            
0001A232                            Obj76_Solid:				; XREF: Obj76_Action
0001A232 323C 001B                  		move.w	#$1B,d1
0001A236 343C 0010                  		move.w	#$10,d2
0001A23A 363C 0011                  		move.w	#$11,d3
0001A23E 3828 0008                  		move.w	8(a0),d4
0001A242 4EB9 0001 03D2             		jsr	SolidObject
0001A248                            
0001A248                            Obj76_Display:				; XREF: Obj76_Action
0001A248 4EF9 0000 E002             		jmp	DisplaySprite
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            loc_19762:				; XREF: Obj76_Index
0001A24E 4A28 0001                  		tst.b	1(a0)
0001A252 6A00                       		bpl.s	Obj76_Delete
0001A254 4EB9 0000 DF6A             		jsr	ObjectFall
0001A25A 4EF9 0000 E002             		jmp	DisplaySprite
0001A260                            ; ===========================================================================
0001A260                            
0001A260                            Obj76_Delete:
0001A260 4EF9 0000 E03E             		jmp	DeleteObject
0001A266                            
0001A266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A266                            
0001A266                            
0001A266                            Obj76_Break:				; XREF: Obj76_Action
0001A266 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A26A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A26E 7801                       		moveq	#1,d4
0001A270 7203                       		moveq	#3,d1
0001A272 7438                       		moveq	#$38,d2
0001A274 5428 0024                  		addq.b	#2,$24(a0)
0001A278 117C 0008 0019             		move.b	#8,$19(a0)
0001A27E 117C 0008 0016             		move.b	#8,$16(a0)
0001A284 43D0                       		lea	(a0),a1
0001A286 6000                       		bra.s	Obj76_MakeFrag
0001A288                            ; ===========================================================================
0001A288                            
0001A288                            Obj76_LoopFrag:
0001A288 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001A28E 6600                       		bne.s	loc_197D4
0001A290                            
0001A290                            Obj76_MakeFrag:
0001A290 45D0                       		lea	(a0),a2
0001A292 47D1                       		lea	(a1),a3
0001A294 7603                       		moveq	#3,d3
0001A296                            
0001A296                            loc_197AA:
0001A296 26DA                       		move.l	(a2)+,(a3)+
0001A298 26DA                       		move.l	(a2)+,(a3)+
0001A29A 26DA                       		move.l	(a2)+,(a3)+
0001A29C 26DA                       		move.l	(a2)+,(a3)+
0001A29E 51CB FFF6                  		dbf	d3,loc_197AA
0001A2A2                            
0001A2A2 335C 0010                  		move.w	(a4)+,$10(a1)
0001A2A6 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2AA 361D                       		move.w	(a5)+,d3
0001A2AC D769 0008                  		add.w	d3,8(a1)
0001A2B0 361D                       		move.w	(a5)+,d3
0001A2B2 D769 000C                  		add.w	d3,$C(a1)
0001A2B6 1344 001A                  		move.b	d4,$1A(a1)
0001A2BA 5244                       		addq.w	#1,d4
0001A2BC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A2C0                            
0001A2C0                            loc_197D4:
0001A2C0 303C 00CB                  		move.w	#$CB,d0
0001A2C4 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A2CA                            ; End of function Obj76_Break
0001A2CA                            
0001A2CA                            ; ===========================================================================
0001A2CA FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A2CE 0180 FE00                  		dc.w $180, $FE00
0001A2D2 FF00 FF00                  		dc.w $FF00, $FF00
0001A2D6 0100 FF00                  		dc.w $100, $FF00
0001A2DA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A2DE 0010 0000                  		dc.w $10, 0
0001A2E2 0000 0010                  		dc.w 0,	$10
0001A2E6 0010 0010                  		dc.w $10, $10
0001A2EA                            ; ---------------------------------------------------------------------------
0001A2EA                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A2EA                            ; ---------------------------------------------------------------------------
0001A2EA                            Map_obj76:
0001A2EA                            	include "_maps\obj76.asm"
0001A2EA                            ; ---------------------------------------------------------------------------
0001A2EA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A2EA                            ; ---------------------------------------------------------------------------
0001A2EA 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A2EE 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A2F2 0000                       		dc.w byte_19826-Map_obj76
0001A2F4 02                         byte_19808:	dc.b 2
0001A2F5 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A2FA 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A2FF 00                         		dc.b 0
0001A300 01                         byte_19814:	dc.b 1
0001A301 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A306 01                         byte_1981A:	dc.b 1
0001A307 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A30C 01                         byte_19820:	dc.b 1
0001A30D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A312 01                         byte_19826:	dc.b 1
0001A313 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A318                            		even
0001A318                            		even
0001A318                            
0001A318                            ; ===========================================================================
0001A318                            
0001A318                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A318 4EF9 0000 E03E             		jmp	DeleteObject
0001A31E                            ; ===========================================================================
0001A31E                            ; ---------------------------------------------------------------------------
0001A31E                            ; Object 82 - Eggman (SBZ2)
0001A31E                            ; ---------------------------------------------------------------------------
0001A31E                            
0001A31E                            Obj82:					; XREF: Obj_Index
0001A31E 7000                       		moveq	#0,d0
0001A320 1028 0024                  		move.b	$24(a0),d0
0001A324 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A328 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A32C                            ; ===========================================================================
0001A32C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A32E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A330 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A332                            
0001A332 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A335 0400 03                    		dc.b 4,	0, 3
0001A338                            ; ===========================================================================
0001A338                            
0001A338                            Obj82_Main:				; XREF: Obj82_Index
0001A338 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A33C 317C 2160 0008             		move.w	#$2160,8(a0)
0001A342 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A348 117C 000F 0020             		move.b	#$F,$20(a0)
0001A34E 117C 0010 0021             		move.b	#$10,$21(a0)
0001A354 08A8 0000 0022             		bclr	#0,$22(a0)
0001A35A 4228 0025                  		clr.b	$25(a0)
0001A35E 115A 0024                  		move.b	(a2)+,$24(a0)
0001A362 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A366 115A 0018                  		move.b	(a2)+,$18(a0)
0001A36A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A372 317C 0400 0002             		move.w	#$400,2(a0)
0001A378 117C 0004 0001             		move.b	#4,1(a0)
0001A37E 08E8 0007 0001             		bset	#7,1(a0)
0001A384 117C 0020 0019             		move.b	#$20,$19(a0)
0001A38A 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001A390 6600                       		bne.s	Obj82_Eggman
0001A392 2348 0034                  		move.l	a0,$34(a1)
0001A396 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A39A 337C 2130 0008             		move.w	#$2130,8(a1)
0001A3A0 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A3A6 4228 0025                  		clr.b	$25(a0)
0001A3AA 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3AE 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3B2 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3B6 237C 0000 C78C 0004        		move.l	#Map_obj32,4(a1)
0001A3BE 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A3C4 137C 0004 0001             		move.b	#4,1(a1)
0001A3CA 08E9 0007 0001             		bset	#7,1(a1)
0001A3D0 137C 0010 0019             		move.b	#$10,$19(a1)
0001A3D6 137C 0000 001A             		move.b	#0,$1A(a1)
0001A3DC                            
0001A3DC                            Obj82_Eggman:				; XREF: Obj82_Index
0001A3DC 7000                       		moveq	#0,d0
0001A3DE 1028 0025                  		move.b	$25(a0),d0
0001A3E2 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A3E6 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A3EA 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A3EE 4EB9 0000 B058             		jsr	AnimateSprite
0001A3F4 4EF9 0000 E002             		jmp	DisplaySprite
0001A3FA                            ; ===========================================================================
0001A3FA 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A3FC 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A3FE 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A400 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A402                            ; ===========================================================================
0001A402                            
0001A402                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A402 3028 0008                  		move.w	8(a0),d0
0001A406 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A40A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A40E 6400                       		bcc.s	loc_19934	; if not, branch
0001A410 5428 0025                  		addq.b	#2,$25(a0)
0001A414 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A41A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A420                            
0001A420                            loc_19934:				; XREF: Obj82_EggIndex
0001A420 4EF9 0000 DFDC             		jmp	SpeedToPos
0001A426                            ; ===========================================================================
0001A426                            
0001A426                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A426 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A42A 6600                       		bne.s	loc_19954	; if time remains, branch
0001A42C 5428 0025                  		addq.b	#2,$25(a0)
0001A430 117C 0002 001C             		move.b	#2,$1C(a0)
0001A436 5868 000C                  		addq.w	#4,$C(a0)
0001A43A 317C 000F 003C             		move.w	#15,$3C(a0)
0001A440                            
0001A440                            loc_19954:
0001A440 60DE                       		bra.s	loc_19934
0001A442                            ; ===========================================================================
0001A442                            
0001A442                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A442 5368 003C                  		subq.w	#1,$3C(a0)
0001A446 6E00                       		bgt.s	loc_199D0
0001A448 6600                       		bne.s	loc_1996A
0001A44A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A450 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A456                            
0001A456                            loc_1996A:
0001A456 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A45C 6E00                       		bgt.s	loc_19976
0001A45E 4268 0010                  		clr.w	$10(a0)
0001A462                            
0001A462                            loc_19976:
0001A462 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A468 4A68 0012                  		tst.w	$12(a0)
0001A46C 6B00                       		bmi.s	Obj82_FindBlocks
0001A46E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A474 6500                       		bcs.s	Obj82_FindBlocks
0001A476 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A47C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A482 6500                       		bcs.s	Obj82_FindBlocks
0001A484 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A48A 4268 0012                  		clr.w	$12(a0)
0001A48E                            
0001A48E                            Obj82_FindBlocks:
0001A48E 3028 0010                  		move.w	$10(a0),d0
0001A492 8068 0012                  		or.w	$12(a0),d0
0001A496 6600                       		bne.s	loc_199D0
0001A498 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A49C 703E                       		moveq	#$3E,d0
0001A49E 7240                       		moveq	#$40,d1
0001A4A0                            
0001A4A0                            Obj82_FindLoop:	
0001A4A0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A4A2 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A4A6 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A4AA                            
0001A4AA 6600                       		bne.s	loc_199D0
0001A4AC 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4B2 5428 0025                  		addq.b	#2,$25(a0)
0001A4B6 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4BC                            
0001A4BC                            loc_199D0:
0001A4BC 6000 FF62                  		bra.w	loc_19934
0001A4C0                            ; ===========================================================================
0001A4C0                            
0001A4C0                            Obj82_Switch:				; XREF: Obj82_Index
0001A4C0 7000                       		moveq	#0,d0
0001A4C2 1028 0025                  		move.b	$25(a0),d0
0001A4C6 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A4CA 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A4CE                            ; ===========================================================================
0001A4CE 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A4D0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A4D2                            ; ===========================================================================
0001A4D2                            
0001A4D2                            loc_199E6:				; XREF: Obj82_SwIndex
0001A4D2 2268 0034                  		movea.l	$34(a0),a1
0001A4D6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A4DC 6600                       		bne.s	Obj82_SwDisplay
0001A4DE 117C 0001 001A             		move.b	#1,$1A(a0)
0001A4E4 5428 0025                  		addq.b	#2,$25(a0)
0001A4E8                            
0001A4E8                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A4E8 4EF9 0000 E002             		jmp	DisplaySprite
0001A4EE                            ; ===========================================================================
0001A4EE                            Ani_obj82:
0001A4EE                            	include "_anim\obj82.asm"
0001A4EE                            ; ---------------------------------------------------------------------------
0001A4EE                            ; Animation script - Eggman (SBZ2)
0001A4EE                            ; ---------------------------------------------------------------------------
0001A4EE 0000                       		dc.w byte_19A10-Ani_obj82
0001A4F0 0000                       		dc.w byte_19A14-Ani_obj82
0001A4F2 0000                       		dc.w byte_19A18-Ani_obj82
0001A4F4 0000                       		dc.w byte_19A20-Ani_obj82
0001A4F6 0000                       		dc.w byte_19A24-Ani_obj82
0001A4F8 0000                       		dc.w byte_19A2A-Ani_obj82
0001A4FA 0000                       		dc.w byte_19A30-Ani_obj82
0001A4FC 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A500 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A504 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A50C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A510 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A516 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A51C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A520                            		even
0001A520                            		even
0001A520                            
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            ; Sprite mappings - Eggman (SBZ2)
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            Map_obj82:
0001A520                            	include "_maps\obj82.asm"
0001A520                            ; ================================================================================
0001A520                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A520                            ; ================================================================================
0001A520                            
0001A520                            DATAA16Z12RYSAF:
0001A520 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A524 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A528 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A52C 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A530 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A534 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A536 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A537 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A53C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A541 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A546 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A547 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A54C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A551 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A556 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A55B 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A55C E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A561 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A566 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A56B FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A570 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A571 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A576 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A57B F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A580 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A581 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A586 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A58B 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A590 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A595 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A596 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A59B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5A0 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A5A5 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A5AA 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A5AB E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5B0 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5B5 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A5BA 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A5BF F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A5C4 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A5C9 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A5CE 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A5CF 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A5D4 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A5D9 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A5DE F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A5E3 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A5E4 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A5E9 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A5EE 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A5F3 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A5F8 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A5FD 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A5FE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A603 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A608 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A60D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A612 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A617 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A61C 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A621 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A626 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A627 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A62C F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A631 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A636                            	even
0001A636                            	even
0001A636                            
0001A636                            ; ===========================================================================
0001A636                            ; ---------------------------------------------------------------------------
0001A636                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A636                            ; ---------------------------------------------------------------------------
0001A636                            
0001A636                            Obj83:					; XREF: Obj_Index
0001A636 7000                       		moveq	#0,d0
0001A638 1028 0024                  		move.b	$24(a0),d0
0001A63C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A640 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A644                            ; ===========================================================================
0001A644 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A646 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A648 0000                       		dc.w loc_19C36-Obj83_Index
0001A64A 0000                       		dc.w loc_19C62-Obj83_Index
0001A64C 0000                       		dc.w loc_19C72-Obj83_Index
0001A64E 0000                       		dc.w loc_19C80-Obj83_Index
0001A650                            ; ===========================================================================
0001A650                            
0001A650                            Obj83_Main:				; XREF: Obj83_Index
0001A650 317C 2080 0008             		move.w	#$2080,8(a0)
0001A656 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A65C 117C 0080 0019             		move.b	#$80,$19(a0)
0001A662 117C 0010 0016             		move.b	#$10,$16(a0)
0001A668 117C 0004 0001             		move.b	#4,1(a0)
0001A66E 08E8 0007 0001             		bset	#7,1(a0)
0001A674 7800                       		moveq	#0,d4
0001A676 3A3C 2010                  		move.w	#$2010,d5
0001A67A 7C07                       		moveq	#7,d6
0001A67C 45E8 0030                  		lea	$30(a0),a2
0001A680                            
0001A680                            Obj83_MakeBlock:
0001A680 4EB9 0000 E488             		jsr	SingleObjLoad
0001A686 6600                       		bne.s	Obj83_ExitMake
0001A688 34C9                       		move.w	a1,(a2)+
0001A68A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A68E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A696 337C 4518 0002             		move.w	#$4518,2(a1)
0001A69C 137C 0004 0001             		move.b	#4,1(a1)
0001A6A2 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6A8 137C 0010 0016             		move.b	#$10,$16(a1)
0001A6AE 137C 0003 0018             		move.b	#3,$18(a1)
0001A6B4 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A6B8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A6BE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A6C2 137C 0008 0024             		move.b	#8,$24(a1)
0001A6C8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A6CC                            
0001A6CC                            Obj83_ExitMake:
0001A6CC 5428 0024                  		addq.b	#2,$24(a0)
0001A6D0 4E75                       		rts	
0001A6D2                            ; ===========================================================================
0001A6D2                            
0001A6D2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A6D2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A6D8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A6DA 4228 001A                  		clr.b	$1A(a0)
0001A6DE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A6E2                            
0001A6E2                            Obj83_Solid:
0001A6E2 7000                       		moveq	#0,d0
0001A6E4 1028 001A                  		move.b	$1A(a0),d0
0001A6E8 4400                       		neg.b	d0
0001A6EA 4880                       		ext.w	d0
0001A6EC 5040                       		addq.w	#8,d0
0001A6EE E940                       		asl.w	#4,d0
0001A6F0 383C 2100                  		move.w	#$2100,d4
0001A6F4 9840                       		sub.w	d0,d4
0001A6F6 1140 0019                  		move.b	d0,$19(a0)
0001A6FA 3144 0008                  		move.w	d4,8(a0)
0001A6FE 720B                       		moveq	#$B,d1
0001A700 D240                       		add.w	d0,d1
0001A702 7410                       		moveq	#$10,d2
0001A704 7611                       		moveq	#$11,d3
0001A706 4EF9 0001 03D2             		jmp	SolidObject
0001A70C                            ; ===========================================================================
0001A70C                            
0001A70C                            loc_19C36:				; XREF: Obj83_Index
0001A70C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A712 6400                       		bcc.s	Obj83_Solid2
0001A714 70FF                       		moveq	#-1,d0
0001A716 1028 001A                  		move.b	$1A(a0),d0
0001A71A 4880                       		ext.w	d0
0001A71C D040                       		add.w	d0,d0
0001A71E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A722 2240                       		movea.l	d0,a1
0001A724 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A72A 5228 001A                  		addq.b	#1,$1A(a0)
0001A72E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A734 6700                       		beq.s	loc_19C62
0001A736                            
0001A736                            Obj83_Solid2:
0001A736 60AA                       		bra.s	Obj83_Solid
0001A738                            ; ===========================================================================
0001A738                            
0001A738                            loc_19C62:				; XREF: Obj83_Index
0001A738 08A8 0003 0022             		bclr	#3,$22(a0)
0001A73E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A744 6000 FBD2                  		bra.w	loc_1982C
0001A748                            ; ===========================================================================
0001A748                            
0001A748                            loc_19C72:				; XREF: Obj83_Index
0001A748 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A74E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A750 4EF9 0000 E002             		jmp	DisplaySprite
0001A756                            ; ===========================================================================
0001A756                            
0001A756                            loc_19C80:				; XREF: Obj83_Index
0001A756 4A28 0001                  		tst.b	1(a0)
0001A75A 6A00 FBBC                  		bpl.w	loc_1982C
0001A75E 4EB9 0000 DF6A             		jsr	ObjectFall
0001A764 4EF9 0000 E002             		jmp	DisplaySprite
0001A76A                            ; ===========================================================================
0001A76A                            
0001A76A                            Obj83_Break:				; XREF: loc_19C72
0001A76A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A76E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A772 7801                       		moveq	#1,d4
0001A774 7203                       		moveq	#3,d1
0001A776 7438                       		moveq	#$38,d2
0001A778 5428 0024                  		addq.b	#2,$24(a0)
0001A77C 117C 0008 0019             		move.b	#8,$19(a0)
0001A782 117C 0008 0016             		move.b	#8,$16(a0)
0001A788 43D0                       		lea	(a0),a1
0001A78A 6000                       		bra.s	Obj83_MakeFrag
0001A78C                            ; ===========================================================================
0001A78C                            
0001A78C                            Obj83_LoopFrag:
0001A78C 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001A792 6600                       		bne.s	Obj83_BreakSnd
0001A794                            
0001A794                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A794 45D0                       		lea	(a0),a2
0001A796 47D1                       		lea	(a1),a3
0001A798 7603                       		moveq	#3,d3
0001A79A                            
0001A79A                            loc_19CC4:
0001A79A 26DA                       		move.l	(a2)+,(a3)+
0001A79C 26DA                       		move.l	(a2)+,(a3)+
0001A79E 26DA                       		move.l	(a2)+,(a3)+
0001A7A0 26DA                       		move.l	(a2)+,(a3)+
0001A7A2 51CB FFF6                  		dbf	d3,loc_19CC4
0001A7A6                            
0001A7A6 335C 0012                  		move.w	(a4)+,$12(a1)
0001A7AA 361D                       		move.w	(a5)+,d3
0001A7AC D769 0008                  		add.w	d3,8(a1)
0001A7B0 361D                       		move.w	(a5)+,d3
0001A7B2 D769 000C                  		add.w	d3,$C(a1)
0001A7B6 1344 001A                  		move.b	d4,$1A(a1)
0001A7BA 5244                       		addq.w	#1,d4
0001A7BC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A7C0                            
0001A7C0                            Obj83_BreakSnd:
0001A7C0 303C 00CB                  		move.w	#$CB,d0
0001A7C4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A7CA 4EF9 0000 E002             		jmp	DisplaySprite
0001A7D0                            ; ===========================================================================
0001A7D0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A7D4 0120 00C0                  		dc.w $120, $C0
0001A7D8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A7DC 0010 0000                  		dc.w $10, 0
0001A7E0 0000 0010                  		dc.w 0,	$10
0001A7E4 0010 0010                  		dc.w $10, $10
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            Map_obj83:
0001A7E8                            	include "_maps\obj83.asm"
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A7EC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A7F0 0000                       		dc.w byte_19D46-Map_obj83
0001A7F2 01                         byte_19D1C:	dc.b 1
0001A7F3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A7F8 02                         byte_19D22:	dc.b 2
0001A7F9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A7FE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A803 00                         		dc.b 0
0001A804 02                         byte_19D2E:	dc.b 2
0001A805 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A80A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A80F 00                         		dc.b 0
0001A810 02                         byte_19D3A:	dc.b 2
0001A811 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A816 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A81B 00                         		dc.b 0
0001A81C 02                         byte_19D46:	dc.b 2
0001A81D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A822 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A828 00                         		even
0001A828 00                         		even
0001A828                            
0001A828                            ; ===========================================================================
0001A828                            ; ---------------------------------------------------------------------------
0001A828                            ; Object 85 - Eggman (FZ)
0001A828                            ; ---------------------------------------------------------------------------
0001A828                            
0001A828                            Obj85_Delete:
0001A828 4EF9 0000 E03E             		jmp	DeleteObject
0001A82E                            ; ===========================================================================
0001A82E                            
0001A82E                            Obj85:					; XREF: Obj_Index
0001A82E 7000                       		moveq	#0,d0
0001A830 1028 0024                  		move.b	$24(a0),d0
0001A834 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A838 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A83C                            ; ===========================================================================
0001A83C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A83E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A840 0000                       		dc.w loc_1A38E-Obj85_Index
0001A842 0000                       		dc.w loc_1A346-Obj85_Index
0001A844 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A846 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A848 0000                       		dc.w loc_1A264-Obj85_Index
0001A84A                            
0001A84A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A850 0001 A520                  		dc.l Map_obj82		; mappings pointer
0001A854 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A85A 0000 0000                  		dc.l Map_obj84
0001A85E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A864 0000 0000                  		dc.l Map_FZBoss
0001A868 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A86E 0001 A520                  		dc.l Map_obj82
0001A872 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A878 0001 8862                  		dc.l Map_Eggman
0001A87C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A882 0001 8862                  		dc.l Map_Eggman
0001A886                            
0001A886 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A88B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A890 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A895 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A89A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A89F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A8A4                            ; ===========================================================================
0001A8A4                            
0001A8A4                            Obj85_Main:				; XREF: Obj85_Index
0001A8A4 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A8A8 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A8AC 2248                       		movea.l	a0,a1
0001A8AE 7205                       		moveq	#5,d1
0001A8B0 6000                       		bra.s	Obj85_LoadBoss
0001A8B2                            ; ===========================================================================
0001A8B2                            
0001A8B2                            Obj85_Loop:
0001A8B2 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001A8B8 6600                       		bne.s	loc_19E20
0001A8BA                            
0001A8BA                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A8BA 12BC 0085                  		move.b	#$85,(a1)
0001A8BE 335A 0008                  		move.w	(a2)+,8(a1)
0001A8C2 335A 000C                  		move.w	(a2)+,$C(a1)
0001A8C6 335A 0002                  		move.w	(a2)+,2(a1)
0001A8CA 235A 0004                  		move.l	(a2)+,4(a1)
0001A8CE 135B 0024                  		move.b	(a3)+,$24(a1)
0001A8D2 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A8D6 135B 0018                  		move.b	(a3)+,$18(a1)
0001A8DA 135B 0017                  		move.b	(a3)+,$17(a1)
0001A8DE 135B 0016                  		move.b	(a3)+,$16(a1)
0001A8E2 137C 0004 0001             		move.b	#4,1(a1)
0001A8E8 08E8 0007 0001             		bset	#7,1(a0)
0001A8EE 2348 0034                  		move.l	a0,$34(a1)
0001A8F2 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A8F6                            
0001A8F6                            loc_19E20:
0001A8F6 45E8 0036                  		lea	$36(a0),a2
0001A8FA 4EB9 0000 E488             		jsr	SingleObjLoad
0001A900 6600                       		bne.s	loc_19E5A
0001A902 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A906 3489                       		move.w	a1,(a2)
0001A908 2348 0034                  		move.l	a0,$34(a1)
0001A90C 45E8 0038                  		lea	$38(a0),a2
0001A910 7400                       		moveq	#0,d2
0001A912 7203                       		moveq	#3,d1
0001A914                            
0001A914                            loc_19E3E:
0001A914 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001A91A 6600                       		bne.s	loc_19E5A
0001A91C 34C9                       		move.w	a1,(a2)+
0001A91E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A922 2348 0034                  		move.l	a0,$34(a1)
0001A926 1342 0028                  		move.b	d2,$28(a1)
0001A92A 5442                       		addq.w	#2,d2
0001A92C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A930                            
0001A930                            loc_19E5A:
0001A930 317C 0000 0034             		move.w	#0,$34(a0)
0001A936 4EB8 2D0E                  		jsr	RandomNumber	; get a number between 0 and 250
0001A93A 4240                       		clr.w	d0
0001A93C 4840                       		swap	d0
0001A93E 80FC 00FB                  		divu.w	#251,d0
0001A942 4840                       		swap	d0
0001A944 0640 0118                  		add.w	#280,d0		; add 280
0001A948 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001A94E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A954                            
0001A954                            Obj85_Eggman:				; XREF: Obj85_Index
0001A954 7000                       		moveq	#0,d0
0001A956 1028 0034                  		move.b	$34(a0),d0
0001A95A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A95E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A962 4EF9 0000 E002             		jmp	DisplaySprite
0001A968                            ; ===========================================================================
0001A968 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A96C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A970 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A974 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A978                            ; ===========================================================================
0001A978                            
0001A978                            loc_19E90:				; XREF: off_19E80
0001A978 4AB8 F680                  		tst.l	($FFFFF680).w
0001A97C 6600                       		bne.s	loc_19EA2
0001A97E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A984 6500                       		bcs.s	loc_19EA2
0001A986 5428 0034                  		addq.b	#2,$34(a0)
0001A98A                            
0001A98A                            loc_19EA2:
0001A98A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A98E 4E75                       		rts	
0001A990                            ; ===========================================================================
0001A990                            
0001A990                            loc_19EA8:				; XREF: off_19E80
0001A990 4A68 0030                  		tst.w	$30(a0)
0001A994 6A00                       		bpl.s	loc_19F10
0001A996 4268 0030                  		clr.w	$30(a0)
0001A99A 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001A9A0 0240 000C                  		andi.w	#$C,d0
0001A9A4 3200                       		move.w	d0,d1
0001A9A6 5441                       		addq.w	#2,d1
0001A9A8 4A80                       		tst.l	d0
0001A9AA 6A00                       		bpl.s	loc_19EC6
0001A9AC C141                       		exg	d1,d0
0001A9AE                            
0001A9AE                            loc_19EC6:
0001A9AE 43FA 0000                  		lea	word_19FD6(pc),a1
0001A9B2 3031 0000                  		move.w	(a1,d0.w),d0
0001A9B6 3231 1000                  		move.w	(a1,d1.w),d1
0001A9BA 3140 0030                  		move.w	d0,$30(a0)
0001A9BE 74FF                       		moveq	#-1,d2
0001A9C0 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A9C4 2242                       		movea.l	d2,a1
0001A9C6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9CC 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A9D2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A9D6 2242                       		movea.l	d2,a1
0001A9D8 137C 0001 0029             		move.b	#1,$29(a1)
0001A9DE 337C 0000 0030             		move.w	#0,$30(a1)
0001A9E4 317C 0001 0032             		move.w	#1,$32(a0)
0001A9EA 4228 0035                  		clr.b	$35(a0)
0001A9EE 303C 00B7                  		move.w	#$B7,d0
0001A9F2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A9F8                            
0001A9F8                            loc_19F10:
0001A9F8 4A68 0032                  		tst.w	$32(a0)
0001A9FC 6B00 0000                  		bmi.w	loc_19FA6
0001AA00 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA06 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA0A 9068 0008                  		sub.w	8(a0),d0
0001AA0E 6500                       		bcs.s	loc_19F2E
0001AA10 08E8 0000 0022             		bset	#0,$22(a0)
0001AA16                            
0001AA16                            loc_19F2E:
0001AA16 323C 002B                  		move.w	#$2B,d1
0001AA1A 343C 0014                  		move.w	#$14,d2
0001AA1E 363C 0014                  		move.w	#$14,d3
0001AA22 3828 0008                  		move.w	8(a0),d4
0001AA26 4EB9 0001 03D2             		jsr	SolidObject
0001AA2C 4A44                       		tst.w	d4
0001AA2E 6E00                       		bgt.s	loc_19F50
0001AA30                            
0001AA30                            loc_19F48:
0001AA30 4A28 0035                  		tst.b	$35(a0)
0001AA34 6600                       		bne.s	loc_19F88
0001AA36 6000                       		bra.s	loc_19F96
0001AA38                            ; ===========================================================================
0001AA38                            
0001AA38                            loc_19F50:
0001AA38 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AA3C                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AA3C                            ;		bne.s	loc_19F48
0001AA3C                            ;		move.w	#$300,d0		; knock player back (nah)
0001AA3C                            ;		btst	#0,$22(a0)
0001AA3C                            ;		bne.s	loc_19F6A
0001AA3C                            ;		neg.w	d0
0001AA3C                            ;
0001AA3C                            ;loc_19F6A:
0001AA3C                            ;		move.w	d0,($FFFFD010).w
0001AA3C 4A28 0035                  		tst.b	$35(a0)
0001AA40 6600                       		bne.s	loc_19F88
0001AA42 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AA48 6400                       		bcc.s	@notoverflown
0001AA4A 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AA50                            @notoverflown:
0001AA50 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AA56 303C 00AC                  		move.w	#$AC,d0
0001AA5A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA60                            
0001AA60                            loc_19F88:
0001AA60 5328 0035                  		subq.b	#1,$35(a0)
0001AA64 6700                       		beq.s	loc_19F96
0001AA66 117C 0003 001C             		move.b	#3,$1C(a0)
0001AA6C 6000                       		bra.s	loc_19F9C
0001AA6E                            ; ===========================================================================
0001AA6E                            
0001AA6E                            loc_19F96:
0001AA6E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA74                            
0001AA74                            loc_19F9C:
0001AA74 43FA FA78                  		lea	Ani_obj82(pc),a1
0001AA78 4EF9 0000 B058             		jmp	AnimateSprite
0001AA7E                            ; ===========================================================================
0001AA7E                            
0001AA7E                            loc_19FA6:
0001AA7E 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AA84 6700                       		beq.s	loc_19FBC
0001AA86 5428 0034                  		addq.b	#2,$34(a0)
0001AA8A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA90 4268 0032                  		clr.w	$32(a0)
0001AA94 4E75                       		rts	
0001AA96                            ; ===========================================================================
0001AA96                            
0001AA96                            loc_19FBC:
0001AA96 117C 0006 0034             		move.b	#6,$34(a0)
0001AA9C 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AAA2 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AAA8 117C 0014 0016             		move.b	#$14,$16(a0)
0001AAAE 4E75                       		rts	
0001AAB0                            ; ===========================================================================
0001AAB0 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AAC0                            ; ===========================================================================
0001AAC0                            
0001AAC0                            loc_19FE6:				; XREF: off_19E80
0001AAC0 70FF                       		moveq	#-1,d0
0001AAC2 3028 0036                  		move.w	$36(a0),d0
0001AAC6 2240                       		movea.l	d0,a1
0001AAC8 4A68 0030                  		tst.w	$30(a0)
0001AACC 6A00                       		bpl.s	loc_1A000
0001AACE 4268 0030                  		clr.w	$30(a0)
0001AAD2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AAD8 6100                       		bsr.s	loc_1A020
0001AADA                            
0001AADA                            loc_1A000:
0001AADA 700F                       		moveq	#$F,d0
0001AADC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AAE0 6600                       		bne.s	loc_1A00A
0001AAE2 6100                       		bsr.s	loc_1A020
0001AAE4                            
0001AAE4                            loc_1A00A:
0001AAE4 4A68 0032                  		tst.w	$32(a0)
0001AAE8 6700                       		beq.s	locret_1A01E
0001AAEA 5528 0034                  		subq.b	#2,$34(a0)
0001AAEE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AAF4 4268 0032                  		clr.w	$32(a0)
0001AAF8                            
0001AAF8                            locret_1A01E:
0001AAF8 4E75                       		rts	
0001AAFA                            ; ===========================================================================
0001AAFA                            
0001AAFA                            loc_1A020:
0001AAFA 303C 00B1                  		move.w	#$B1,d0
0001AAFE 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AB04                            ; ===========================================================================
0001AB04                            
0001AB04                            loc_1A02A:				; XREF: off_19E80
0001AB04 117C 0030 0017             		move.b	#$30,$17(a0)
0001AB0A 08E8 0000 0022             		bset	#0,$22(a0)
0001AB10 4EB9 0000 DFDC             		jsr	SpeedToPos
0001AB16 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB1C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB22 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB28 6500                       		bcs.s	loc_1A070
0001AB2A 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB30 5428 0034                  		addq.b	#2,$34(a0)
0001AB34 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB3A 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB40 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AB46 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AB4A                            
0001AB4A                            loc_1A070:
0001AB4A 6000 0000                  		bra.w	loc_1A166
0001AB4E                            ; ===========================================================================
0001AB4E                            
0001AB4E                            loc_1A074:				; XREF: off_19E80
0001AB4E 08E8 0000 0022             		bset	#0,$22(a0)
0001AB54 117C 0004 001C             		move.b	#4,$1C(a0)
0001AB5A 4EB9 0000 DFDC             		jsr	SpeedToPos
0001AB60 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB66 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AB6C 6500                       		bcs.s	loc_1A09A
0001AB6E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB74                            
0001AB74                            loc_1A09A:
0001AB74 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB7A 3028 0008                  		move.w	8(a0),d0
0001AB7E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AB82 6A00                       		bpl.s	loc_1A0B4
0001AB84 317C 0500 0010             		move.w	#$500,$10(a0)
0001AB8A 6000 0000                  		bra.w	loc_1A0F2
0001AB8E                            ; ===========================================================================
0001AB8E                            
0001AB8E                            loc_1A0B4:
0001AB8E 0440 0070                  		subi.w	#$70,d0
0001AB92 6500                       		bcs.s	loc_1A0F2
0001AB94 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AB9A 5140                       		subq.w	#8,d0
0001AB9C 6500                       		bcs.s	loc_1A0F2
0001AB9E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABA4 5140                       		subq.w	#8,d0
0001ABA6 6500                       		bcs.s	loc_1A0F2
0001ABA8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABAE 5140                       		subq.w	#8,d0
0001ABB0 6500                       		bcs.s	loc_1A0F2
0001ABB2 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABB8 5140                       		subq.w	#8,d0
0001ABBA 6500                       		bcs.s	loc_1A0F2
0001ABBC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABC2 0440 0038                  		subi.w	#$38,d0
0001ABC6 6500                       		bcs.s	loc_1A0F2
0001ABC8 4268 0010                  		clr.w	$10(a0)
0001ABCC                            
0001ABCC                            loc_1A0F2:
0001ABCC 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001ABD2 6500                       		bcs.s	loc_1A110
0001ABD4 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001ABDA 317C 0240 0010             		move.w	#$240,$10(a0)
0001ABE0 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001ABE6 5428 0034                  		addq.b	#2,$34(a0)
0001ABEA                            
0001ABEA                            loc_1A110:
0001ABEA 6000                       		bra.s	loc_1A15C
0001ABEC                            ; ===========================================================================
0001ABEC                            
0001ABEC                            loc_1A112:				; XREF: off_19E80
0001ABEC 4EB9 0000 DFDC             		jsr	SpeedToPos
0001ABF2 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ABF8 6500                       		bcs.s	loc_1A124
0001ABFA 4268 0010                  		clr.w	$10(a0)
0001ABFE                            
0001ABFE                            loc_1A124:
0001ABFE 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AC04 4A68 0012                  		tst.w	$12(a0)
0001AC08 6B00                       		bmi.s	loc_1A142
0001AC0A 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AC10 6500                       		bcs.s	loc_1A142
0001AC12 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC18 4268 0012                  		clr.w	$12(a0)
0001AC1C                            
0001AC1C                            loc_1A142:
0001AC1C 3028 0010                  		move.w	$10(a0),d0
0001AC20 8068 0012                  		or.w	$12(a0),d0
0001AC24 6600                       		bne.s	loc_1A15C
0001AC26 5428 0034                  		addq.b	#2,$34(a0)
0001AC2A 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC30 117C 0001 0021             		move.b	#1,$21(a0)
0001AC36                            
0001AC36                            loc_1A15C:
0001AC36 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AC3A 4EB9 0000 B058             		jsr	AnimateSprite
0001AC40                            
0001AC40                            loc_1A166:
0001AC40 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AC46 6C00                       		bge.s	loc_1A172
0001AC48 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC4C                            
0001AC4C                            loc_1A172:
0001AC4C 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AC52 6C00                       		bge.s	locret_1A190
0001AC54 323C 001B                  		move.w	#$1B,d1
0001AC58 343C 0070                  		move.w	#$70,d2
0001AC5C 363C 0071                  		move.w	#$71,d3
0001AC60 3828 0008                  		move.w	8(a0),d4
0001AC64 4EF9 0001 03D2             		jmp	SolidObject
0001AC6A                            ; ===========================================================================
0001AC6A                            
0001AC6A                            locret_1A190:
0001AC6A 4E75                       		rts	
0001AC6C                            ; ===========================================================================
0001AC6C                            
0001AC6C                            loc_1A192:				; XREF: off_19E80
0001AC6C 217C 0001 8862 0004        		move.l	#Map_Eggman,4(a0)
0001AC74 317C 0400 0002             		move.w	#$400,2(a0)
0001AC7A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC80 08E8 0000 0022             		bset	#0,$22(a0)
0001AC86 4EB9 0000 DFDC             		jsr	SpeedToPos
0001AC8C 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AC92 6400                       		bcc.s	loc_1A1D0
0001AC94 317C 0180 0010             		move.w	#$180,$10(a0)
0001AC9A 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001ACA0 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACA6 5428 0034                  		addq.b	#2,$34(a0)
0001ACAA                            
0001ACAA                            loc_1A1D0:
0001ACAA 6000 FF8A                  		bra.w	loc_1A15C
0001ACAE                            ; ===========================================================================
0001ACAE                            
0001ACAE                            loc_1A1D4:				; XREF: off_19E80
0001ACAE 08E8 0000 0022             		bset	#0,$22(a0)
0001ACB4 4EB9 0000 DFDC             		jsr	SpeedToPos
0001ACBA 4A68 0030                  		tst.w	$30(a0)
0001ACBE 6600                       		bne.s	loc_1A1FC
0001ACC0 4A28 0020                  		tst.b	$20(a0)
0001ACC4 6600                       		bne.s	loc_1A216
0001ACC6 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ACCC 303C 00AC                  		move.w	#$AC,d0
0001ACD0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ACD6                            
0001ACD6                            loc_1A1FC:
0001ACD6 5368 0030                  		subq.w	#1,$30(a0)
0001ACDA 6600                       		bne.s	loc_1A216
0001ACDC 4A28 0022                  		tst.b	$22(a0)
0001ACE0 6A00                       		bpl.s	loc_1A210
0001ACE2 317C 0060 0012             		move.w	#$60,$12(a0)
0001ACE8 6000                       		bra.s	loc_1A216
0001ACEA                            ; ===========================================================================
0001ACEA                            
0001ACEA                            loc_1A210:
0001ACEA 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACF0                            
0001ACF0                            loc_1A216:
0001ACF0 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ACF6 6D00                       		blt.s	loc_1A23A
0001ACF8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ACFE 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AD04 4278 D014                  		clr.w	($FFFFD014).w
0001AD08 4A68 0012                  		tst.w	$12(a0)
0001AD0C 6A00                       		bpl.s	loc_1A248
0001AD0E 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AD14                            
0001AD14                            loc_1A23A:
0001AD14 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD1A 6D00                       		blt.s	loc_1A248
0001AD1C 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD22                            
0001AD22                            loc_1A248:
0001AD22 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD28 6500                       		bcs.s	loc_1A260
0001AD2A 4A28 0001                  		tst.b	1(a0)
0001AD2E 6B00                       		bmi.s	loc_1A260
0001AD30 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD36 6000 FAF0                  		bra.w	Obj85_Delete
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            loc_1A260:
0001AD3A 6000 FEFA                  		bra.w	loc_1A15C
0001AD3E                            ; ===========================================================================
0001AD3E                            
0001AD3E                            loc_1A264:				; XREF: Obj85_Index
0001AD3E 2268 0034                  		movea.l	$34(a0),a1
0001AD42 1011                       		move.b	(a1),d0
0001AD44 B010                       		cmp.b	(a0),d0
0001AD46 6600 FAE0                  		bne.w	Obj85_Delete
0001AD4A 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD50 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD56 6C00                       		bge.s	loc_1A280
0001AD58 6000                       		bra.s	loc_1A2A6
0001AD5A                            ; ===========================================================================
0001AD5A                            
0001AD5A                            loc_1A280:
0001AD5A 4A69 0010                  		tst.w	$10(a1)
0001AD5E 6700                       		beq.s	loc_1A28C
0001AD60 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD66                            
0001AD66                            loc_1A28C:
0001AD66 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AD6A 4EB9 0000 B058             		jsr	AnimateSprite
0001AD70                            
0001AD70                            loc_1A296:
0001AD70 2268 0034                  		movea.l	$34(a0),a1
0001AD74 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD7A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD80                            
0001AD80                            loc_1A2A6:
0001AD80 2268 0034                  		movea.l	$34(a0),a1
0001AD84 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AD8A 7003                       		moveq	#3,d0
0001AD8C C028 0022                  		and.b	$22(a0),d0
0001AD90 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AD96 8128 0001                  		or.b	d0,1(a0)
0001AD9A 4EF9 0000 E002             		jmp	DisplaySprite
0001ADA0                            ; ===========================================================================
0001ADA0                            
0001ADA0                            loc_1A2C6:				; XREF: Obj85_Index
0001ADA0 2268 0034                  		movea.l	$34(a0),a1
0001ADA4 1011                       		move.b	(a1),d0
0001ADA6 B010                       		cmp.b	(a0),d0
0001ADA8 6600 FA7E                  		bne.w	Obj85_Delete
0001ADAC 0CA9 0001 8862 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADB4 6700                       		beq.s	loc_1A2E4
0001ADB6 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ADBC 60C2                       		bra.s	loc_1A2A6
0001ADBE                            ; ===========================================================================
0001ADBE                            
0001ADBE                            loc_1A2E4:
0001ADBE 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADC4 4A29 0021                  		tst.b	$21(a1)
0001ADC8 6F00                       		ble.s	loc_1A312
0001ADCA 117C 0006 001C             		move.b	#6,$1C(a0)
0001ADD0 217C 0001 8862 0004        		move.l	#Map_Eggman,4(a0)
0001ADD8 317C 0400 0002             		move.w	#$400,2(a0)
0001ADDE 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001ADE2 4EB9 0000 B058             		jsr	AnimateSprite
0001ADE8 6000 FF86                  		bra.w	loc_1A296
0001ADEC                            ; ===========================================================================
0001ADEC                            
0001ADEC                            loc_1A312:
0001ADEC 4A28 0001                  		tst.b	1(a0)
0001ADF0 6A00 FA36                  		bpl.w	Obj85_Delete
0001ADF4 6100 D584                  		bsr.w	BossDefeated
0001ADF8 117C 0002 0018             		move.b	#2,$18(a0)
0001ADFE 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE04 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AE0C 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AE12 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE16 4EB9 0000 B058             		jsr	AnimateSprite
0001AE1C 6000 FF52                  		bra.w	loc_1A296
0001AE20                            ; ===========================================================================
0001AE20                            
0001AE20                            loc_1A346:				; XREF: Obj85_Index
0001AE20 08E8 0000 0022             		bset	#0,$22(a0)
0001AE26 2268 0034                  		movea.l	$34(a0),a1
0001AE2A 0CA9 0001 8862 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE32 6700                       		beq.s	loc_1A35E
0001AE34 6000 FF4A                  		bra.w	loc_1A2A6
0001AE38                            ; ===========================================================================
0001AE38                            
0001AE38                            loc_1A35E:
0001AE38 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE3E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE44 4A28 001E                  		tst.b	$1E(a0)
0001AE48 6600                       		bne.s	loc_1A376
0001AE4A 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AE50                            
0001AE50                            loc_1A376:
0001AE50 5328 001E                  		subq.b	#1,$1E(a0)
0001AE54 6E00                       		bgt.s	loc_1A38A
0001AE56 5228 001A                  		addq.b	#1,$1A(a0)
0001AE5A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AE60 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AE64                            
0001AE64                            loc_1A38A:
0001AE64 6000 FF0A                  		bra.w	loc_1A296
0001AE68                            ; ===========================================================================
0001AE68                            
0001AE68                            loc_1A38E:				; XREF: Obj85_Index
0001AE68 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AE6E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE72 9068 0008                  		sub.w	8(a0),d0
0001AE76 6500                       		bcs.s	loc_1A3A6
0001AE78 4A28 0001                  		tst.b	1(a0)
0001AE7C 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AE80                            
0001AE80                            loc_1A3A6:
0001AE80 4EF9 0000 E002             		jmp	DisplaySprite
0001AE86                            ; ===========================================================================
0001AE86                            
0001AE86                            loc_1A3AC:				; XREF: Obj85_Index
0001AE86 117C 0000 001A             		move.b	#0,$1A(a0)
0001AE8C 08E8 0000 0022             		bset	#0,$22(a0)
0001AE92 2268 0034                  		movea.l	$34(a0),a1
0001AE96 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AE9C 6600                       		bne.s	loc_1A3D0
0001AE9E 0CA9 0001 8862 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AEA6 6700 F980                  		beq.w	Obj85_Delete
0001AEAA                            
0001AEAA                            loc_1A3D0:
0001AEAA 6000 FED4                  		bra.w	loc_1A2A6
0001AEAE                            ; ===========================================================================
0001AEAE                            Ani_obj85:
0001AEAE                            	include "_anim\obj85.asm"
0001AEAE                            ; ---------------------------------------------------------------------------
0001AEAE                            ; Animation script - Eggman (FZ)
0001AEAE                            ; ---------------------------------------------------------------------------
0001AEAE 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AEB0 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AEB4                            		even
0001AEB4                            		even
0001AEB4                            
0001AEB4                            Map_Eggman2:
0001AEB4                            	include "_maps\Eggman2.asm"
0001AEB4                            ; ---------------------------------------------------------------------------
0001AEB4                            ; Sprite mappings - Eggman (FZ)
0001AEB4                            ; ---------------------------------------------------------------------------
0001AEB4 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AEB6 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AEB8 06                         byte_1A3DE:	dc.b 6
0001AEB9 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AEBE EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AEC3 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEC8 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AECD FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AED2 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AED7 06                         byte_1A3FD:	dc.b 6
0001AED8 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AEDD EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AEE2 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEE7 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEEC FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AEF1 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AEF6                            		even
0001AEF6                            		even
0001AEF6                            
0001AEF6                            Map_FZBoss:
0001AEF6                            	include "_maps\FZ boss.asm"
0001AEF6                            ; ---------------------------------------------------------------------------
0001AEF6                            ; Sprite mappings - boss (FZ)
0001AEF6                            ; ---------------------------------------------------------------------------
0001AEF6 0000                       		dc.w byte_1A422-Map_FZBoss
0001AEF8 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AEFA 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AEFC 02                         byte_1A422:	dc.b 2
0001AEFD 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AF02 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AF07 03                         byte_1A42D:	dc.b 3
0001AF08 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AF0D 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AF12 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF17 02                         byte_1A43D:	dc.b 2
0001AF18 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF1D 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF22                            		even
0001AF22                            		even
0001AF22                            
0001AF22                            ; ===========================================================================
0001AF22                            
0001AF22                            Obj84_Delete:
0001AF22 4EF9 0000 E03E             		jmp	DeleteObject
0001AF28                            ; ===========================================================================
0001AF28                            ; ---------------------------------------------------------------------------
0001AF28                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF28                            ; ---------------------------------------------------------------------------
0001AF28                            
0001AF28                            Obj84:					; XREF: Obj_Index
0001AF28 7000                       		moveq	#0,d0
0001AF2A 1028 0024                  		move.b	$24(a0),d0
0001AF2E 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF32 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF36                            ; ===========================================================================
0001AF36 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF38 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF3A 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF3C                            
0001AF3C 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF40 2550 0620                  		dc.w $2550, $620
0001AF44 2490 04C0                  		dc.w $2490, $4C0
0001AF48 2510 04C0                  		dc.w $2510, $4C0
0001AF4C                            ; ===========================================================================
0001AF4C                            
0001AF4C                            Obj84_Main:				; XREF: Obj84_Index
0001AF4C 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AF50 7000                       		moveq	#0,d0
0001AF52 1028 0028                  		move.b	$28(a0),d0
0001AF56 D040                       		add.w	d0,d0
0001AF58 D2C0                       		adda.w	d0,a1
0001AF5A 117C 0004 0001             		move.b	#4,1(a0)
0001AF60 08E8 0007 0001             		bset	#7,1(a0)
0001AF66 08E8 0004 0001             		bset	#4,1(a0)
0001AF6C 317C 0300 0002             		move.w	#$300,2(a0)
0001AF72 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AF7A 3159 0008                  		move.w	(a1)+,8(a0)
0001AF7E 3151 000C                  		move.w	(a1),$C(a0)
0001AF82 3159 0038                  		move.w	(a1)+,$38(a0)
0001AF86 117C 0020 0016             		move.b	#$20,$16(a0)
0001AF8C 117C 0060 0017             		move.b	#$60,$17(a0)
0001AF92 117C 0020 0019             		move.b	#$20,$19(a0)
0001AF98 117C 0060 0016             		move.b	#$60,$16(a0)
0001AF9E 117C 0003 0018             		move.b	#3,$18(a0)
0001AFA4 5428 0024                  		addq.b	#2,$24(a0)
0001AFA8                            
0001AFA8                            loc_1A4CE:				; XREF: Obj84_Index
0001AFA8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFAE 6F00                       		ble.s	loc_1A4DC
0001AFB0 08E8 0001 0001             		bset	#1,1(a0)
0001AFB6                            
0001AFB6                            loc_1A4DC:
0001AFB6 42A8 003C                  		clr.l	$3C(a0)
0001AFBA 4A28 0029                  		tst.b	$29(a0)
0001AFBE 6700                       		beq.s	loc_1A4EA
0001AFC0 5428 0024                  		addq.b	#2,$24(a0)
0001AFC4                            
0001AFC4                            loc_1A4EA:
0001AFC4 2028 003C                  		move.l	$3C(a0),d0
0001AFC8 2228 0038                  		move.l	$38(a0),d1
0001AFCC D280                       		add.l	d0,d1
0001AFCE 4841                       		swap	d1
0001AFD0 3141 000C                  		move.w	d1,$C(a0)
0001AFD4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AFDA 6600                       		bne.s	loc_1A524
0001AFDC 4A68 0030                  		tst.w	$30(a0)
0001AFE0 6A00                       		bpl.s	loc_1A524
0001AFE2 70F6                       		moveq	#-$A,d0
0001AFE4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFEA 6F00                       		ble.s	loc_1A514
0001AFEC 700E                       		moveq	#$E,d0
0001AFEE                            
0001AFEE                            loc_1A514:
0001AFEE D240                       		add.w	d0,d1
0001AFF0 2268 0034                  		movea.l	$34(a0),a1
0001AFF4 3341 000C                  		move.w	d1,$C(a1)
0001AFF8 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFFE                            
0001AFFE                            loc_1A524:
0001AFFE 323C 002B                  		move.w	#$2B,d1
0001B002 343C 0060                  		move.w	#$60,d2
0001B006 363C 0061                  		move.w	#$61,d3
0001B00A 3828 0008                  		move.w	8(a0),d4
0001B00E 4EB9 0001 03D2             		jsr	SolidObject
0001B014 7000                       		moveq	#0,d0
0001B016 3228 003C                  		move.w	$3C(a0),d1
0001B01A 6A00                       		bpl.s	loc_1A550
0001B01C 4441                       		neg.w	d1
0001B01E 5141                       		subq.w	#8,d1
0001B020 6500                       		bcs.s	loc_1A55C
0001B022 5200                       		addq.b	#1,d0
0001B024 E841                       		asr.w	#4,d1
0001B026 D041                       		add.w	d1,d0
0001B028 6000                       		bra.s	loc_1A55C
0001B02A                            ; ===========================================================================
0001B02A                            
0001B02A                            loc_1A550:
0001B02A 0441 0027                  		subi.w	#$27,d1
0001B02E 6500                       		bcs.s	loc_1A55C
0001B030 5200                       		addq.b	#1,d0
0001B032 E841                       		asr.w	#4,d1
0001B034 D041                       		add.w	d1,d0
0001B036                            
0001B036                            loc_1A55C:
0001B036 1140 001A                  		move.b	d0,$1A(a0)
0001B03A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B03E 9068 0008                  		sub.w	8(a0),d0
0001B042 6B00                       		bmi.s	loc_1A578
0001B044 0440 0140                  		subi.w	#$140,d0
0001B048 6B00                       		bmi.s	loc_1A578
0001B04A 4A28 0001                  		tst.b	1(a0)
0001B04E 6A00 FED2                  		bpl.w	Obj84_Delete
0001B052                            
0001B052                            loc_1A578:
0001B052 4EF9 0000 E002             		jmp	DisplaySprite
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_1A57E:				; XREF: Obj84_Index
0001B058 7000                       		moveq	#0,d0
0001B05A 1028 0028                  		move.b	$28(a0),d0
0001B05E 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B062 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B066 6000 FF5C                  		bra.w	loc_1A4EA
0001B06A                            ; ===========================================================================
0001B06A 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B06C 0000                       		dc.w loc_1A598-off_1A590
0001B06E 0000                       		dc.w loc_1A604-off_1A590
0001B070 0000                       		dc.w loc_1A604-off_1A590
0001B072                            ; ===========================================================================
0001B072                            
0001B072                            loc_1A598:				; XREF: off_1A590
0001B072 4A28 0029                  		tst.b	$29(a0)
0001B076 6600                       		bne.s	loc_1A5D4
0001B078 2268 0034                  		movea.l	$34(a0),a1
0001B07C 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B082 6600                       		bne.s	loc_1A5B4
0001B084 6100 D2F4                  		bsr.w	BossDefeated
0001B088 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B090                            
0001B090                            loc_1A5B4:
0001B090 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B098 6400                       		bcc.s	locret_1A602
0001B09A 42A8 003C                  		clr.l	$3C(a0)
0001B09E 2268 0034                  		movea.l	$34(a0),a1
0001B0A2 5369 0032                  		subq.w	#1,$32(a1)
0001B0A6 4269 0030                  		clr.w	$30(a1)
0001B0AA 5528 0024                  		subq.b	#2,$24(a0)
0001B0AE 4E75                       		rts	
0001B0B0                            ; ===========================================================================
0001B0B0                            
0001B0B0                            loc_1A5D4:
0001B0B0 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B0B6 6C00                       		bge.s	loc_1A5E4
0001B0B8 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B0C0                            
0001B0C0                            loc_1A5E4:
0001B0C0 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B0C8 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B0CE 6E00                       		bgt.s	locret_1A602
0001B0D0 4268 003E                  		clr.w	$3E(a0)
0001B0D4 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B0DA 4228 0029                  		clr.b	$29(a0)
0001B0DE                            
0001B0DE                            locret_1A602:
0001B0DE 4E75                       		rts	
0001B0E0                            ; ===========================================================================
0001B0E0                            
0001B0E0                            loc_1A604:				; XREF: off_1A590
0001B0E0 08E8 0001 0001             		bset	#1,1(a0)
0001B0E6 4A28 0029                  		tst.b	$29(a0)
0001B0EA 6600                       		bne.s	loc_1A646
0001B0EC 2268 0034                  		movea.l	$34(a0),a1
0001B0F0 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B0F6 6600                       		bne.s	loc_1A626
0001B0F8 6100 D280                  		bsr.w	BossDefeated
0001B0FC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B104                            
0001B104                            loc_1A626:
0001B104 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B10C 6400                       		bcc.s	locret_1A674
0001B10E 42A8 003C                  		clr.l	$3C(a0)
0001B112 2268 0034                  		movea.l	$34(a0),a1
0001B116 5369 0032                  		subq.w	#1,$32(a1)
0001B11A 4269 0030                  		clr.w	$30(a1)
0001B11E 5528 0024                  		subq.b	#2,$24(a0)
0001B122 4E75                       		rts	
0001B124                            ; ===========================================================================
0001B124                            
0001B124                            loc_1A646:
0001B124 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B12A 6D00                       		blt.s	loc_1A656
0001B12C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B134                            
0001B134                            loc_1A656:
0001B134 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B13C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B142 6D00                       		blt.s	locret_1A674
0001B144 4268 003E                  		clr.w	$3E(a0)
0001B148 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B14E 4228 0029                  		clr.b	$29(a0)
0001B152                            
0001B152                            locret_1A674:
0001B152 4E75                       		rts	
0001B154                            ; ===========================================================================
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            Map_obj84:
0001B154                            	include "_maps\obj84.asm"
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B154                            ; ---------------------------------------------------------------------------
0001B154 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B158 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B15C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B160 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B164 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B168 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B16C 06                         byte_1A68E:	dc.b 6
0001B16D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B172 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B177 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B17C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B181 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B186 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B18B 08                         byte_1A6AD:	dc.b 8
0001B18C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B191 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B196 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B19B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1A0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1A5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1AA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1AF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1B4 0A                         byte_1A6D6:	dc.b $A
0001B1B5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1BA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1BF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1C4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1C9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1CE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1D3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1D8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1DD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B1E2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B1E7 0C                         byte_1A709:	dc.b $C
0001B1E8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1ED A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1F2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1F7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1FC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B201 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B206 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B20B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B210 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B215 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B21A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B21F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B224 0D                         byte_1A746:	dc.b $D
0001B225 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B22A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B22F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B234 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B239 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B23E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B243 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B248 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B24D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B252 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B257 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B25C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B261 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B266 0E                         byte_1A788:	dc.b $E
0001B267 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B26C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B271 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B276 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B27B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B280 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B285 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B28A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B28F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B294 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B299 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B29E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2A3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2A8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B2AD 02                         byte_1A7CF:	dc.b 2
0001B2AE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B2B3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B2B8                            		even
0001B2B8                            		even
0001B2B8                            
0001B2B8                            ; ===========================================================================
0001B2B8                            ; ---------------------------------------------------------------------------
0001B2B8                            ; Object 86 - energy balls (FZ)
0001B2B8                            ; ---------------------------------------------------------------------------
0001B2B8                            
0001B2B8                            Obj86:					; XREF: Obj_Index
0001B2B8 7000                       		moveq	#0,d0
0001B2BA 1028 0024                  		move.b	$24(a0),d0
0001B2BE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B2C2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B2C6                            ; ===========================================================================
0001B2C6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B2C8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B2CA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B2CC 0000                       		dc.w loc_1A962-Obj86_Index
0001B2CE 0000                       		dc.w loc_1A982-Obj86_Index
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            Obj86_Main:				; XREF: Obj86_Index
0001B2D0 317C 2588 0008             		move.w	#$2588,8(a0)
0001B2D6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B2DC 317C 0300 0002             		move.w	#$300,2(a0)
0001B2E2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B2EA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2F0 117C 0003 0018             		move.b	#3,$18(a0)
0001B2F6 117C 0008 0017             		move.b	#8,$17(a0)
0001B2FC 117C 0008 0016             		move.b	#8,$16(a0)
0001B302 117C 0004 0001             		move.b	#4,1(a0)
0001B308 08E8 0007 0001             		bset	#7,1(a0)
0001B30E 5428 0024                  		addq.b	#2,$24(a0)
0001B312                            
0001B312                            Obj86_Generator:			; XREF: Obj86_Index
0001B312 2268 0034                  		movea.l	$34(a0),a1
0001B316 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B31C 6600                       		bne.s	loc_1A850
0001B31E 10BC 003F                  		move.b	#$3F,(a0)
0001B322 117C 0000 0024             		move.b	#0,$24(a0)
0001B328 4EF9 0000 E002             		jmp	DisplaySprite
0001B32E                            ; ===========================================================================
0001B32E                            
0001B32E                            loc_1A850:
0001B32E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B334 4A28 0029                  		tst.b	$29(a0)
0001B338 6700                       		beq.s	loc_1A86C
0001B33A 5428 0024                  		addq.b	#2,$24(a0)
0001B33E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B344 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B34A                            
0001B34A                            loc_1A86C:
0001B34A 323C 0013                  		move.w	#$13,d1
0001B34E 343C 0008                  		move.w	#8,d2
0001B352 363C 0011                  		move.w	#$11,d3
0001B356 3828 0008                  		move.w	8(a0),d4
0001B35A 4EB9 0001 03D2             		jsr	SolidObject
0001B360 3038 D008                  		move.w	($FFFFD008).w,d0
0001B364 9068 0008                  		sub.w	8(a0),d0
0001B368 6B00                       		bmi.s	loc_1A89A
0001B36A 0440 0140                  		subi.w	#$140,d0
0001B36E 6B00                       		bmi.s	loc_1A89A
0001B370 4A28 0001                  		tst.b	1(a0)
0001B374 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B378                            
0001B378                            loc_1A89A:
0001B378 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B37C 4EB9 0000 B058             		jsr	AnimateSprite
0001B382 4EF9 0000 E002             		jmp	DisplaySprite
0001B388                            ; ===========================================================================
0001B388                            
0001B388                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B388 4A28 0029                  		tst.b	$29(a0)
0001B38C 6700 0000                  		beq.w	loc_1A954
0001B390 4228 0029                  		clr.b	$29(a0)
0001B394 D068 0030                  		add.w	$30(a0),d0
0001B398 0240 001E                  		andi.w	#$1E,d0
0001B39C D4C0                       		adda.w	d0,a2
0001B39E 5868 0030                  		addq.w	#4,$30(a0)
0001B3A2 4268 0032                  		clr.w	$32(a0)
0001B3A6 7403                       		moveq	#3,d2
0001B3A8                            
0001B3A8                            Obj86_Loop:
0001B3A8 4EB9 0000 E49E             		jsr	SingleObjLoad2
0001B3AE 6600 0000                  		bne.w	loc_1A954
0001B3B2 12BC 0086                  		move.b	#$86,(a1)
0001B3B6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3BC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B3C2 137C 0008 0024             		move.b	#8,$24(a1)
0001B3C8 337C 2300 0002             		move.w	#$2300,2(a1)
0001B3CE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B3D6 137C 000C 0016             		move.b	#$C,$16(a1)
0001B3DC 137C 000C 0017             		move.b	#$C,$17(a1)
0001B3E2 137C 0000 0020             		move.b	#0,$20(a1)
0001B3E8 137C 0003 0018             		move.b	#3,$18(a1)
0001B3EE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B3F4 137C 0004 0001             		move.b	#4,1(a1)
0001B3FA 08E9 0007 0001             		bset	#7,1(a1)
0001B400 2348 0034                  		move.l	a0,$34(a1)
0001B404 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B40A 3228 0032                  		move.w	$32(a0),d1
0001B40E C3FC FFB1                  		muls.w	#-$4F,d1
0001B412 0641 2578                  		addi.w	#$2578,d1
0001B416 0240 001F                  		andi.w	#$1F,d0
0001B41A 0440 0010                  		subi.w	#$10,d0
0001B41E D041                       		add.w	d1,d0
0001B420 3340 0030                  		move.w	d0,$30(a1)
0001B424 5268 0032                  		addq.w	#1,$32(a0)
0001B428 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B42E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B432                            
0001B432                            loc_1A954:
0001B432 4A68 0032                  		tst.w	$32(a0)
0001B436 6600                       		bne.s	loc_1A95E
0001B438 5428 0024                  		addq.b	#2,$24(a0)
0001B43C                            
0001B43C                            loc_1A95E:
0001B43C 6000 FF0C                  		bra.w	loc_1A86C
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            loc_1A962:				; XREF: Obj86_Index
0001B440 117C 0002 001C             		move.b	#2,$1C(a0)
0001B446 4A68 0038                  		tst.w	$38(a0)
0001B44A 6600                       		bne.s	loc_1A97E
0001B44C 117C 0002 0024             		move.b	#2,$24(a0)
0001B452 2268 0034                  		movea.l	$34(a0),a1
0001B456 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B45C                            
0001B45C                            loc_1A97E:
0001B45C 6000 FEEC                  		bra.w	loc_1A86C
0001B460                            ; ===========================================================================
0001B460                            
0001B460                            loc_1A982:				; XREF: Obj86_Index
0001B460 7000                       		moveq	#0,d0
0001B462 1028 0025                  		move.b	$25(a0),d0
0001B466 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B46A 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B46E                            ; ===========================================================================
0001B46E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B470 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B472 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B474 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B476 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B478 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B47A 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B47C 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B47E 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B480 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B482                            ; ===========================================================================
0001B482                            
0001B482                            loc_1A9A6:				; XREF: Obj86_Index2
0001B482 3028 0030                  		move.w	$30(a0),d0
0001B486 9068 0008                  		sub.w	8(a0),d0
0001B48A E940                       		asl.w	#4,d0
0001B48C 3140 0010                  		move.w	d0,$10(a0)
0001B490 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B496 5428 0025                  		addq.b	#2,$25(a0)
0001B49A                            
0001B49A                            Obj86_Ball_Animate:
0001B49A 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B49E 4EB9 0000 B058             		jsr	AnimateSprite
0001B4A4 4EF9 0000 E002             		jmp	DisplaySprite
0001B4AA                            ; ===========================================================================
0001B4AA                            
0001B4AA                            loc_1A9C0:				; XREF: Obj86_Index2
0001B4AA 4A68 0010                  		tst.w	$10(a0)
0001B4AE 6700                       		beq.s	loc_1A9E6
0001B4B0 4EB9 0000 DFDC             		jsr	SpeedToPos
0001B4B6 3028 0008                  		move.w	8(a0),d0
0001B4BA 9068 0030                  		sub.w	$30(a0),d0
0001B4BE 6400                       		bcc.s	loc_1A9E6
0001B4C0 4268 0010                  		clr.w	$10(a0)
0001B4C4 D168 0008                  		add.w	d0,8(a0)
0001B4C8 2268 0034                  		movea.l	$34(a0),a1
0001B4CC 5369 0032                  		subq.w	#1,$32(a1)
0001B4D0                            
0001B4D0                            loc_1A9E6:
0001B4D0 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4D6 5368 0028                  		subq.w	#1,$28(a0)
0001B4DA 6600                       		bne.s	locret_1AA1C
0001B4DC 4EB8 2D0E                  		jsr	RandomNumber
0001B4E0 0240 000E                  		and.w	#7*2,d0
0001B4E4 5840                       		addq.w	#2*2,d0
0001B4E6 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B4EA 4840                       		swap	d0
0001B4EC 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B4F0 117C 0001 001C             		move.b	#1,$1C(a0)
0001B4F6 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B4FC 3038 D008                  		move.w	($FFFFD008).w,d0
0001B500 9068 0008                  		sub.w	8(a0),d0
0001B504 3140 0010                  		move.w	d0,$10(a0)
0001B508 317C 0140 0012             		move.w	#$140,$12(a0)
0001B50E                            
0001B50E                            locret_1AA1C:
0001B50E 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B512                            ; ===========================================================================
0001B512                            
0001B512                            Obj86_Ball_Explode:
0001B512 5328 0028                  		subq.b	#1,$28(a0)
0001B516 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B51A 2268 0034                  		movea.l	$34(a0),a1
0001B51E 5369 0038                  		subq.w	#1,$38(a1)
0001B522 2248                       		move.l	a0,a1
0001B524 7400                       		moveq	#0,d2	; GMZ
0001B526 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B528 6000                       		bra.s	@start
0001B52A                            @loop:
0001B52A 4EB9 0000 E488             		jsr	SingleObjLoad
0001B530 6600                       		bne.s	@exit
0001B532 3368 0008 0008             		move.w	8(a0),8(a1)
0001B538 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B53E                            @start:
0001B53E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B542 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B548 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B54C 5802                       		addq.b	#4,d2
0001B54E 51C9 FFDA                  		dbf	d1,@loop
0001B552                            @exit:
0001B552 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B556                            ; ===========================================================================
0001B556                            
0001B556                            Obj86_Ball_Sine:
0001B556 1028 0028                  		move.b	$28(a0),d0
0001B55A 5828 0028                  		addq.b	#4,$28(a0)
0001B55E 4EB8 2D34                  		jsr	CalcSine
0001B562 C1FC 0002                  		muls.w	#2,d0
0001B566 3140 0010                  		move.w	d0,$10(a0)
0001B56A                            
0001B56A 1028 0029                  		move.b	$29(a0),d0
0001B56E 5828 0029                  		addq.b	#4,$29(a0)
0001B572 4EB8 2D34                  		jsr	CalcSine
0001B576 4A40                       		tst.w	d0
0001B578 6B00                       		bmi.s	@upwards
0001B57A E548                       		lsl.w	#2,d0		; x4 go down faster
0001B57C                            @upwards:
0001B57C 3140 0012                  		move.w	d0,$12(a0)
0001B580 6000 0000                  		bra.w	loc_1AA1E
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            Obj86_Ball_Homing:
0001B584 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B58A 6400                       		bhs.s	@homer
0001B58C 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B592 6400                       		bhs.s	Obj86_Ball_Vanish
0001B594 5328 0028                  		subq.b	#1,$28(a0)
0001B598 6400                       		bcc.s	@nomorehoming
0001B59A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B59E 9068 0008                  		sub.w	8(a0),d0
0001B5A2 D168 0010                  		add.w	d0,$10(a0)
0001B5A6 D168 0010                  		add.w	d0,$10(a0)
0001B5AA                            @nomorehoming:
0001B5AA 6000 0000                  		bra.w	loc_1AA1E
0001B5AE                            @homer:
0001B5AE 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B5B4 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B5B6                            ; ===========================================================================
0001B5B6                            
0001B5B6                            Obj86_Ball_Speed:
0001B5B6 4268 0010                  		clr.w	$10(a0)
0001B5BA 7000                       		moveq	#0,d0
0001B5BC 1028 0028                  		move.b	$28(a0),d0
0001B5C0 E448                       		lsr.w	#2,d0
0001B5C2 D168 0012                  		add.w	d0,$12(a0)
0001B5C6 1028 0029                  		move.b	$29(a0),d0
0001B5CA D128 0028                  		add.b	d0,$28(a0)
0001B5CE 6000 0000                  		bra.w	loc_1AA1E
0001B5D2                            ; ===========================================================================
0001B5D2                            
0001B5D2                            Obj86_Ball_Vanish:
0001B5D2 303C 00E1                  		move.w	#$E1,d0
0001B5D6 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001B5DC 6000 0000                  		bra.w	loc_1AA34
0001B5E0                            ; ===========================================================================
0001B5E0                            
0001B5E0                            Obj86_Ball_Static:
0001B5E0 4268 0010                  		clr.w	$10(a0)
0001B5E4 7000                       		moveq	#0,d0
0001B5E6 7200                       		moveq	#0,d1
0001B5E8 1028 0028                  		move.b	$28(a0),d0
0001B5EC 1228 0029                  		move.b	$29(a0),d1
0001B5F0 D041                       		add.w	d1,d0
0001B5F2 3140 0012                  		move.w	d0,$12(a0)
0001B5F6 6000 0000                  		bra.w	loc_1AA1E
0001B5FA                            ; ===========================================================================
0001B5FA                            
0001B5FA                            Obj86_Ball_Standard:
0001B5FA                            loc_1AA1E:
0001B5FA 4EB9 0000 DFDC             		jsr	SpeedToPos
0001B600 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B606 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B60A                            loc_1AA34:
0001B60A 2268 0034                  		movea.l	$34(a0),a1
0001B60E 5369 0038                  		subq.w	#1,$38(a1)
0001B612 6000 F90E                  		bra.w	Obj84_Delete
0001B616                            ; ===========================================================================
0001B616                            Ani_obj86:
0001B616                            	include "_anim\obj86.asm"
0001B616                            ; ---------------------------------------------------------------------------
0001B616                            ; Animation script - energy ball launcher (FZ)
0001B616                            ; ---------------------------------------------------------------------------
0001B616 0000                       		dc.w byte_1AA46-Ani_obj86
0001B618 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B61A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B61C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B620 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B626 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B62C                            		even
0001B62C                            		even
0001B62C                            
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            Map_obj86:
0001B62C                            	include "_maps\obj86.asm"
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B630 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B634 01                         byte_1AA5E:	dc.b 1
0001B635 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B63A 01                         byte_1AA64:	dc.b 1
0001B63B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B640 01                         byte_1AA6A:	dc.b 1
0001B641 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B646 01                         byte_1AA70:	dc.b 1
0001B647 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B64C                            		even
0001B64C                            		even
0001B64C                            
0001B64C                            Ani_obj86a:
0001B64C                            	include "_anim\obj86a.asm"
0001B64C                            ; ---------------------------------------------------------------------------
0001B64C                            ; Animation script - energy balls (FZ)
0001B64C                            ; ---------------------------------------------------------------------------
0001B64C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B64E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B650 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B65F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B66E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B672 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B67C                            		even
0001B67C                            		even
0001B67C                            
0001B67C                            ; ---------------------------------------------------------------------------
0001B67C                            ; Sprite mappings - energy balls (FZ)
0001B67C                            ; ---------------------------------------------------------------------------
0001B67C                            Map_obj86a:
0001B67C                            	include "_maps\obj86a.asm"
0001B67C                            ; ---------------------------------------------------------------------------
0001B67C                            ; Sprite mappings - energy balls (FZ)
0001B67C                            ; ---------------------------------------------------------------------------
0001B67C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B680 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B684 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B688 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B68C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B690 0000                       		dc.w byte_1AB20-Map_obj86a
0001B692 02                         byte_1AABC:	dc.b 2
0001B693 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B698 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B69D 02                         byte_1AAC7:	dc.b 2
0001B69E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B6A3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B6A8 02                         byte_1AAD2:	dc.b 2
0001B6A9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B6AE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B6B3 02                         byte_1AADD:	dc.b 2
0001B6B4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B6B9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B6BE 02                         byte_1AAE8:	dc.b 2
0001B6BF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B6C4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B6C9 02                         byte_1AAF3:	dc.b 2
0001B6CA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B6CF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B6D4 01                         byte_1AAFE:	dc.b 1
0001B6D5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B6DA 01                         byte_1AB04:	dc.b 1
0001B6DB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B6E0 02                         byte_1AB0A:	dc.b 2
0001B6E1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B6E6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B6EB 02                         byte_1AB15:	dc.b 2
0001B6EC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B6F1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B6F6 00                         byte_1AB20:	dc.b 0
0001B6F8 00                         		even
0001B6F8 00                         		even
0001B6F8                            
0001B6F8                            ; ===========================================================================
0001B6F8                            ; ---------------------------------------------------------------------------
0001B6F8                            ; Object 3E - prison capsule
0001B6F8                            ; ---------------------------------------------------------------------------
0001B6F8                            
0001B6F8                            Obj3E:					; XREF: Obj_Index
0001B6F8 7000                       		moveq	#0,d0
0001B6FA 1028 0024                  		move.b	$24(a0),d0
0001B6FE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B702 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B706 3028 0008                  		move.w	8(a0),d0
0001B70A 0240 FF80                  		andi.w	#$FF80,d0
0001B70E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B712 0441 0080                  		subi.w	#$80,d1
0001B716 0241 FF80                  		andi.w	#$FF80,d1
0001B71A 9041                       		sub.w	d1,d0
0001B71C 0C40 0280                  		cmpi.w	#$280,d0
0001B720 6200                       		bhi.s	Obj3E_Delete
0001B722 4EF9 0000 E002             		jmp	DisplaySprite
0001B728                            ; ===========================================================================
0001B728                            
0001B728                            Obj3E_Delete:
0001B728 4EF9 0000 E03E             		jmp	DeleteObject
0001B72E                            ; ===========================================================================
0001B72E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B730 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B732 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B734 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B736 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B738 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B73A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B73C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B73E                            
0001B73E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B742 040C 0501                  		dc.b 4,	$C, 5, 1
0001B746 0610 0403                  		dc.b 6,	$10, 4,	3
0001B74A 0810 0305                  		dc.b 8,	$10, 3,	5
0001B74E                            ; ===========================================================================
0001B74E                            
0001B74E                            Obj3E_Main:				; XREF: Obj3E_Index
0001B74E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B756 317C 049D 0002             		move.w	#$49D,2(a0)
0001B75C 117C 0004 0001             		move.b	#4,1(a0)
0001B762 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B768 7000                       		moveq	#0,d0
0001B76A 1028 0028                  		move.b	$28(a0),d0
0001B76E E548                       		lsl.w	#2,d0
0001B770 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B774 1159 0024                  		move.b	(a1)+,$24(a0)
0001B778 1159 0019                  		move.b	(a1)+,$19(a0)
0001B77C 1159 0018                  		move.b	(a1)+,$18(a0)
0001B780 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B784 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B788 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B78A 117C 0006 0020             		move.b	#6,$20(a0)
0001B790 117C 0008 0021             		move.b	#8,$21(a0)
0001B796                            
0001B796                            Obj3E_Not02:
0001B796 4E75                       		rts	
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B798 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B79E 6700                       		beq.s	Obj3E_ChkOpened
0001B7A0 323C 002B                  		move.w	#$2B,d1
0001B7A4 343C 0018                  		move.w	#$18,d2
0001B7A8 363C 0018                  		move.w	#$18,d3
0001B7AC 3828 0008                  		move.w	8(a0),d4
0001B7B0 4EF9 0001 03D2             		jmp	SolidObject
0001B7B6                            ; ===========================================================================
0001B7B6                            
0001B7B6                            Obj3E_ChkOpened:
0001B7B6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B7BA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B7BC 4228 0025                  		clr.b	$25(a0)
0001B7C0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B7C6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B7CC                            
0001B7CC                            Obj3E_DoOpen:
0001B7CC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B7D2 4E75                       		rts	
0001B7D4                            ; ===========================================================================
0001B7D4                            
0001B7D4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B7D4 323C 0017                  		move.w	#$17,d1
0001B7D8 343C 0008                  		move.w	#8,d2
0001B7DC 363C 0008                  		move.w	#8,d3
0001B7E0 3828 0008                  		move.w	8(a0),d4
0001B7E4 4EB9 0001 03D2             		jsr	SolidObject
0001B7EA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B7F0 4EB9 0000 B058             		jsr	AnimateSprite
0001B7F6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B7FC 4A28 0025                  		tst.b	$25(a0)
0001B800 6700                       		beq.s	locret_1AC60
0001B802 5068 000C                  		addq.w	#8,$C(a0)
0001B806 117C 000A 0024             		move.b	#$A,$24(a0)
0001B80C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B812 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B816 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B81A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B820 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B826 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B828 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B82E 6000                       		bra.s	Obj3E_ContinueCode
0001B830                            
0001B830                            Obj3E_MoveLeft:
0001B830 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B836                            
0001B836                            Obj3E_ContinueCode:
0001B836 4228 0025                  		clr.b	$25(a0)
0001B83A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B840 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B846                            
0001B846                            locret_1AC60:
0001B846 4E75                       		rts	
0001B848                            ; ===========================================================================
0001B848                            
0001B848                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B848 7007                       		moveq	#7,d0
0001B84A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B84E 6600                       		bne.s	loc_1ACA0
0001B850 4EB9 0000 E488             		jsr	SingleObjLoad
0001B856 6600                       		bne.s	loc_1ACA0
0001B858 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B85C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B862 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B868 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B86E 7200                       		moveq	#0,d1
0001B870 1200                       		move.b	d0,d1
0001B872 E409                       		lsr.b	#2,d1
0001B874 0441 0020                  		subi.w	#$20,d1
0001B878 D369 0008                  		add.w	d1,8(a1)
0001B87C E048                       		lsr.w	#8,d0
0001B87E E608                       		lsr.b	#3,d0
0001B880 D169 000C                  		add.w	d0,$C(a1)
0001B884                            
0001B884                            loc_1ACA0:
0001B884 5368 001E                  		subq.w	#1,$1E(a0)
0001B888 6700                       		beq.s	Obj3E_MakeAnimal
0001B88A 4E75                       		rts	
0001B88C                            ; ===========================================================================
0001B88C                            
0001B88C                            Obj3E_MakeAnimal:
0001B88C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B892 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B898 117C 0006 001A             		move.b	#6,$1A(a0)
0001B89E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B8A4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B8AA 7C07                       		moveq	#7,d6
0001B8AC 3A3C 009A                  		move.w	#$9A,d5
0001B8B0 78E4                       		moveq	#-$1C,d4
0001B8B2                            
0001B8B2                            Obj3E_Loop:
0001B8B2 4EB9 0000 E488             		jsr	SingleObjLoad
0001B8B8 6600                       		bne.s	locret_1ACF8
0001B8BA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B8BE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8CA D969 0008                  		add.w	d4,8(a1)
0001B8CE 5E44                       		addq.w	#7,d4
0001B8D0 3345 0036                  		move.w	d5,$36(a1)
0001B8D4 5145                       		subq.w	#8,d5
0001B8D6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B8DA                            
0001B8DA                            locret_1ACF8:
0001B8DA 4E75                       		rts	
0001B8DC                            ; ===========================================================================
0001B8DC                            
0001B8DC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B8DC 7007                       		moveq	#7,d0
0001B8DE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B8E2 6600                       		bne.s	loc_1AD38
0001B8E4 4EB9 0000 E488             		jsr	SingleObjLoad
0001B8EA 6600                       		bne.s	loc_1AD38
0001B8EC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B8F0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8FC 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B902 0240 001F                  		andi.w	#$1F,d0
0001B906 5D40                       		subq.w	#6,d0
0001B908 4A41                       		tst.w	d1
0001B90A 6A00                       		bpl.s	loc_1AD2E
0001B90C 4440                       		neg.w	d0
0001B90E                            
0001B90E                            loc_1AD2E:
0001B90E D169 0008                  		add.w	d0,8(a1)
0001B912 337C 000C 0036             		move.w	#$C,$36(a1)
0001B918                            
0001B918                            loc_1AD38:
0001B918 5368 001E                  		subq.w	#1,$1E(a0)
0001B91C 6600                       		bne.s	locret_1AD48
0001B91E 5428 0024                  		addq.b	#2,$24(a0)
0001B922 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B928                            
0001B928                            locret_1AD48:
0001B928 4E75                       		rts	
0001B92A                            ; ===========================================================================
0001B92A                            
0001B92A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B92A 703E                       		moveq	#$3E,d0
0001B92C 7228                       		moveq	#$28,d1
0001B92E 7440                       		moveq	#$40,d2
0001B930 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B934                            
0001B934                            Obj3E_FindObj28:
0001B934 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B936 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B938 D2C2                       		adda.w	d2,a1		; next object RAM
0001B93A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B93E                            
0001B93E 4EB9 0000 F68E             		jsr	GotThroughAct
0001B944 4EF9 0000 E03E             		jmp	DeleteObject
0001B94A                            ; ===========================================================================
0001B94A                            
0001B94A                            Obj3E_Obj28Found:
0001B94A 4E75                       		rts	
0001B94C                            ; ===========================================================================
0001B94C                            Ani_obj3E:
0001B94C                            	include "_anim\obj3E.asm"
0001B94C                            ; ---------------------------------------------------------------------------
0001B94C                            ; Animation script - prison capsule
0001B94C                            ; ---------------------------------------------------------------------------
0001B94C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B94E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B950 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B954                            		even
0001B954                            		even
0001B954                            
0001B954                            ; ---------------------------------------------------------------------------
0001B954                            ; Sprite mappings - prison capsule
0001B954                            ; ---------------------------------------------------------------------------
0001B954                            Map_obj3E:
0001B954                            	include "_maps\obj3E.asm"
0001B954                            ; ---------------------------------------------------------------------------
0001B954                            ; Sprite mappings - prison capsule
0001B954                            ; ---------------------------------------------------------------------------
0001B954 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B958 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B95C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B960 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B962 07                         byte_1AD82:	dc.b 7
0001B963 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B968 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B96D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B972 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B977 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B97C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B981 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B986 01                         byte_1ADA6:	dc.b 1
0001B987 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B98C 06                         byte_1ADAC:	dc.b 6
0001B98D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B992 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B997 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B99C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B9A1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9A6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9AB 01                         byte_1ADCB:	dc.b 1
0001B9AC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B9B1 02                         byte_1ADD1:	dc.b 2
0001B9B2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B9B7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B9BC 01                         byte_1ADDC:	dc.b 1
0001B9BD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B9C2 00                         byte_1ADE2:	dc.b 0
0001B9C4 00                         		even
0001B9C4 00                         		even
0001B9C4                            
0001B9C4                            ; ---------------------------------------------------------------------------
0001B9C4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B9C4                            ; ---------------------------------------------------------------------------
0001B9C4                            
0001B9C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9C4                            
0001B9C4                            
0001B9C4                            TouchResponse:				; XREF: Obj01
0001B9C4 4E71                       		nop	
0001B9C6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B9CA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B9CE 5142                       		subq.w	#8,d2
0001B9D0 7A00                       		moveq	#0,d5
0001B9D2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B9D6 5705                       		subq.b	#3,d5
0001B9D8 9645                       		sub.w	d5,d3
0001B9DA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B9E0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B9E2 0643 000C                  		addi.w	#$C,d3
0001B9E6 7A0A                       		moveq	#$A,d5
0001B9E8                            
0001B9E8                            Touch_NoDuck:
0001B9E8 383C 0010                  		move.w	#$10,d4
0001B9EC DA45                       		add.w	d5,d5
0001B9EE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B9F2 3C3C 005F                  		move.w	#$5F,d6
0001B9F6                            
0001B9F6                            Touch_Loop:
0001B9F6 4A29 0001                  		tst.b	1(a1)
0001B9FA 6A00                       		bpl.s	Touch_NextObj
0001B9FC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BA00 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BA02                            
0001BA02                            Touch_NextObj:
0001BA02 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BA06 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BA0A                            
0001BA0A 7000                       		moveq	#0,d0
0001BA0C 4E75                       		rts	
0001BA0E                            ; ===========================================================================
0001BA0E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BA10 0C14                       		dc.b   $C, $14
0001BA12 140C                       		dc.b  $14,  $C
0001BA14 0410                       		dc.b	4, $10
0001BA16 0C12                       		dc.b   $C, $12
0001BA18 1010                       		dc.b  $10, $10
0001BA1A 0606                       		dc.b	6,   6
0001BA1C 180C                       		dc.b  $18,  $C
0001BA1E 0C10                       		dc.b   $C, $10
0001BA20 100C                       		dc.b  $10,  $C
0001BA22 0808                       		dc.b	8,   8
0001BA24 1410                       		dc.b  $14, $10
0001BA26 1408                       		dc.b  $14,   8
0001BA28 0E0E                       		dc.b   $E,  $E
0001BA2A 1818                       		dc.b  $18, $18
0001BA2C 2810                       		dc.b  $28, $10
0001BA2E 1018                       		dc.b  $10, $18
0001BA30 0810                       		dc.b	8, $10
0001BA32 2070                       		dc.b  $20, $70
0001BA34 4020                       		dc.b  $40, $20
0001BA36 8020                       		dc.b  $80, $20
0001BA38 2020                       		dc.b  $20, $20
0001BA3A 0808                       		dc.b	8,   8
0001BA3C 0404                       		dc.b	4,   4
0001BA3E 2008                       		dc.b  $20,   8
0001BA40 0C0C                       		dc.b   $C,  $C
0001BA42 0804                       		dc.b	8,   4
0001BA44 1804                       		dc.b  $18,   4
0001BA46 2804                       		dc.b  $28,   4
0001BA48 0408                       		dc.b	4,   8
0001BA4A 0418                       		dc.b	4, $18
0001BA4C 0428                       		dc.b	4, $28
0001BA4E 0420                       		dc.b	4, $20
0001BA50 1818                       		dc.b  $18, $18
0001BA52 0C18                       		dc.b   $C, $18
0001BA54 4808                       		dc.b  $48,   8
0001BA56                            ; ===========================================================================
0001BA56                            
0001BA56                            Touch_Height:				; XREF: TouchResponse
0001BA56 0240 003F                  		andi.w	#$3F,d0
0001BA5A D040                       		add.w	d0,d0
0001BA5C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BA60 7200                       		moveq	#0,d1
0001BA62 121A                       		move.b	(a2)+,d1
0001BA64 3029 0008                  		move.w	8(a1),d0
0001BA68 9041                       		sub.w	d1,d0
0001BA6A 9042                       		sub.w	d2,d0
0001BA6C 6400                       		bcc.s	loc_1AE98
0001BA6E D241                       		add.w	d1,d1
0001BA70 D041                       		add.w	d1,d0
0001BA72 6500                       		bcs.s	Touch_Width
0001BA74 6000 FF8C                  		bra.w	Touch_NextObj
0001BA78                            ; ===========================================================================
0001BA78                            
0001BA78                            loc_1AE98:
0001BA78 B044                       		cmp.w	d4,d0
0001BA7A 6200 FF86                  		bhi.w	Touch_NextObj
0001BA7E                            
0001BA7E                            Touch_Width:
0001BA7E 7200                       		moveq	#0,d1
0001BA80 121A                       		move.b	(a2)+,d1
0001BA82 3029 000C                  		move.w	$C(a1),d0
0001BA86 9041                       		sub.w	d1,d0
0001BA88 9043                       		sub.w	d3,d0
0001BA8A 6400                       		bcc.s	loc_1AEB6
0001BA8C D241                       		add.w	d1,d1
0001BA8E D240                       		add.w	d0,d1
0001BA90 6500                       		bcs.s	Touch_ChkValue
0001BA92 6000 FF6E                  		bra.w	Touch_NextObj
0001BA96                            ; ===========================================================================
0001BA96                            
0001BA96                            loc_1AEB6:
0001BA96 B045                       		cmp.w	d5,d0
0001BA98 6200 FF68                  		bhi.w	Touch_NextObj
0001BA9C                            
0001BA9C                            Touch_ChkValue:
0001BA9C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BAA0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BAA4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BAA8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BAAC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BAB0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BAB2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BAB6                            
0001BAB6                            ; touch	response is $40-$7F
0001BAB6                            
0001BAB6 1029 0020                  		move.b	$20(a1),d0
0001BABA 0200 003F                  		andi.b	#$3F,d0
0001BABE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BAC2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BAC4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BACA 6400 0000                  		bcc.w	locret_1AEF2
0001BACE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BAD2                            
0001BAD2                            locret_1AEF2:
0001BAD2 4E75                       		rts	
0001BAD4                            ; ===========================================================================
0001BAD4                            
0001BAD4                            Touch_Monitor:
0001BAD4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BAD8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BADA 3028 000C                  		move.w	$C(a0),d0
0001BADE 0440 0010                  		subi.w	#$10,d0
0001BAE2 B069 000C                  		cmp.w	$C(a1),d0
0001BAE6 6500                       		bcs.s	locret_1AF2E
0001BAE8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BAEC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BAF2 4A29 0025                  		tst.b	$25(a1)
0001BAF6 6600                       		bne.s	locret_1AF2E
0001BAF8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BAFC 4E75                       		rts	
0001BAFE                            ; ===========================================================================
0001BAFE                            
0001BAFE                            loc_1AF1E:
0001BAFE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BB04 6600                       		bne.s	locret_1AF2E
0001BB06 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB0A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BB0E                            
0001BB0E                            locret_1AF2E:
0001BB0E 4E75                       		rts	
0001BB10                            ; ===========================================================================
0001BB10                            
0001BB10                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BB10 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB14 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BB16 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BB1C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BB20                            
0001BB20                            loc_1AF40:
0001BB20 4A29 0021                  		tst.b	$21(a1)
0001BB24 6700                       		beq.s	Touch_KillEnemy
0001BB26 4468 0010                  		neg.w	$10(a0)
0001BB2A 4468 0012                  		neg.w	$12(a0)
0001BB2E E0E8 0010                  		asr	$10(a0)
0001BB32 E0E8 0012                  		asr	$12(a0)
0001BB36 137C 0000 0020             		move.b	#0,$20(a1)
0001BB3C 5329 0021                  		subq.b	#1,$21(a1)
0001BB40 6600                       		bne.s	locret_1AF68
0001BB42 08E9 0007 0022             		bset	#7,$22(a1)
0001BB48                            
0001BB48                            locret_1AF68:
0001BB48 4E75                       		rts	
0001BB4A                            ; ===========================================================================
0001BB4A                            
0001BB4A                            Touch_KillEnemy:
0001BB4A 08E9 0007 0022             		bset	#7,$22(a1)
0001BB50 7000                       		moveq	#0,d0
0001BB52 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BB56 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BB5A 0C40 0006                  		cmpi.w	#6,d0
0001BB5E 6500                       		bcs.s	loc_1AF82
0001BB60 7006                       		moveq	#6,d0
0001BB62                            
0001BB62                            loc_1AF82:
0001BB62 3340 003E                  		move.w	d0,$3E(a1)
0001BB66 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BB6A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BB70 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BB72 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BB76 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BB7C                            
0001BB7C                            loc_1AF9C:
0001BB7C 6100 0000                  		bsr.w	AddPoints
0001BB80 7400                       		moveq	#0,d2	; GMZ
0001BB82 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BB84 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BB86                            
0001BB86                            TouchKE_Explode:
0001BB86 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BB8A 137C 0000 0024             		move.b	#0,$24(a1)
0001BB90 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BB94                            
0001BB94                            TouchKE_NextExplosion:
0001BB94 5802                       		addq.b	#4,d2
0001BB96 4EB9 0000 E488             		jsr	SingleObjLoad
0001BB9C 6600                       		bne.s	TouchKE_NoExplosion
0001BB9E 336A 0008 0008             		move.w	8(a2),8(a1)
0001BBA4 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BBAA 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BBAE                            
0001BBAE                            TouchKE_NoExplosion:
0001BBAE 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BBB0 4A68 0012                  		tst.w	$12(a0)
0001BBB4 6B00                       		bmi.s	loc_1AFC2
0001BBB6 3028 000C                  		move.w	$C(a0),d0
0001BBBA B069 000C                  		cmp.w	$C(a1),d0
0001BBBE 6400                       		bcc.s	loc_1AFCA
0001BBC0 4468 0012                  		neg.w	$12(a0)
0001BBC4 4E75                       		rts	
0001BBC6                            ; ===========================================================================
0001BBC6                            
0001BBC6                            loc_1AFC2:
0001BBC6 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BBCC 4E75                       		rts	
0001BBCE                            ; ===========================================================================
0001BBCE                            
0001BBCE                            loc_1AFCA:
0001BBCE 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BBD4 4E75                       		rts	
0001BBD6                            ; ===========================================================================
0001BBD6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BBDE                            ; ===========================================================================
0001BBDE                            
0001BBDE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BBDE 08E9 0007 0022             		bset	#7,$22(a1)
0001BBE4                            
0001BBE4                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BBE4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BBE8 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BBEA                            
0001BBEA                            loc_1AFE6:				; XREF: Touch_Hurt
0001BBEA 70FF                       		moveq	#-1,d0
0001BBEC 4E75                       		rts	
0001BBEE                            ; ===========================================================================
0001BBEE                            
0001BBEE                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BBEE 4E71                       		nop	
0001BBF0 4A68 0030                  		tst.w	$30(a0)
0001BBF4 66F4                       		bne.s	loc_1AFE6
0001BBF6 2449                       		movea.l	a1,a2
0001BBF8                            
0001BBF8                            ; End of function TouchResponse
0001BBF8                            ; continue straight to HurtSonic
0001BBF8                            
0001BBF8                            ; ---------------------------------------------------------------------------
0001BBF8                            ; Hurting Sonic	subroutine
0001BBF8                            ; ---------------------------------------------------------------------------
0001BBF8                            
0001BBF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBF8                            
0001BBF8                            
0001BBF8                            HurtSonic:
0001BBF8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BBFC 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BBFE 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BC02 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BC06 4EB9 0000 E488             		jsr	SingleObjLoad
0001BC0C 6600                       		bne.s	Hurt_Shield
0001BC0E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BC12 3368 0008 0008             		move.w	8(a0),8(a1)
0001BC18 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BC1E                            
0001BC1E                            Hurt_Shield:
0001BC1E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BC24 117C 0004 0024             		move.b	#4,$24(a0)
0001BC2A 6100 861E                  		bsr.w	Sonic_ResetOnFloor
0001BC2E 08E8 0001 0022             		bset	#1,$22(a0)
0001BC34 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BC3A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BC40 0828 0006 0022             		btst	#6,$22(a0)
0001BC46 6700                       		beq.s	Hurt_Reverse
0001BC48 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BC4E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BC54                            
0001BC54                            Hurt_Reverse:
0001BC54 3028 0008                  		move.w	8(a0),d0
0001BC58 B06A 0008                  		cmp.w	8(a2),d0
0001BC5C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BC5E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BC62                            
0001BC62                            Hurt_ChkSpikes:
0001BC62 317C 0000 0014             		move.w	#0,$14(a0)
0001BC68 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BC6E 317C 0078 0030             		move.w	#$78,$30(a0)
0001BC74 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BC78 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BC7C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BC7E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BC82 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BC84 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BC88                            
0001BC88                            Hurt_Sound:
0001BC88 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001BC8E 70FF                       		moveq	#-1,d0
0001BC90 4E75                       		rts	
0001BC92                            ; ===========================================================================
0001BC92                            
0001BC92                            Hurt_NoRings:
0001BC92 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BC96 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BC9A                            ; End of function HurtSonic
0001BC9A                            
0001BC9A                            ; ---------------------------------------------------------------------------
0001BC9A                            ; Subroutine to	kill Sonic
0001BC9A                            ; ---------------------------------------------------------------------------
0001BC9A                            
0001BC9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC9A                            
0001BC9A                            
0001BC9A                            KillSonic:
0001BC9A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BC9E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BCA0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BCA6 117C 0006 0024             		move.b	#6,$24(a0)
0001BCAC 6100 859C                  		bsr.w	Sonic_ResetOnFloor
0001BCB0 08E8 0001 0022             		bset	#1,$22(a0)
0001BCB6 317C F900 0012             		move.w	#-$700,$12(a0)
0001BCBC 317C 0000 0010             		move.w	#0,$10(a0)
0001BCC2 317C 0000 0014             		move.w	#0,$14(a0)
0001BCC8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BCCE 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BCD4 08E8 0007 0002             		bset	#7,2(a0)
0001BCDA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BCDE 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BCE2 6600                       		bne.s	Kill_Sound
0001BCE4 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BCE8                            
0001BCE8                            Kill_Sound:
0001BCE8 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001BCEE                            
0001BCEE                            Kill_NoDeath:
0001BCEE 70FF                       		moveq	#-1,d0
0001BCF0 4E75                       		rts	
0001BCF2                            ; End of function KillSonic
0001BCF2                            
0001BCF2                            
0001BCF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCF2                            
0001BCF2                            
0001BCF2                            Touch_Special:				; XREF: Touch_ChkValue
0001BCF2 1229 0020                  		move.b	$20(a1),d1
0001BCF6 0201 003F                  		andi.b	#$3F,d1
0001BCFA 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BCFE 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BD00 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BD04 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BD06 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BD0A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD0C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BD10 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD12 4E75                       		rts	
0001BD14                            ; ===========================================================================
0001BD14                            
0001BD14                            Touch_CatKiller:			; XREF: Touch_Special
0001BD14 6000 FEC8                  		bra.w	loc_1AFDA
0001BD18                            ; ===========================================================================
0001BD18                            
0001BD18                            Touch_Yadrin:				; XREF: Touch_Special
0001BD18 9A40                       		sub.w	d0,d5
0001BD1A 0C45 0008                  		cmpi.w	#8,d5
0001BD1E 6400                       		bcc.s	loc_1B144
0001BD20 3029 0008                  		move.w	8(a1),d0
0001BD24 5940                       		subq.w	#4,d0
0001BD26 0829 0000 0022             		btst	#0,$22(a1)
0001BD2C 6700                       		beq.s	loc_1B130
0001BD2E 0440 0010                  		subi.w	#$10,d0
0001BD32                            
0001BD32                            loc_1B130:
0001BD32 9042                       		sub.w	d2,d0
0001BD34 6400                       		bcc.s	loc_1B13C
0001BD36 0640 0018                  		addi.w	#$18,d0
0001BD3A 6500                       		bcs.s	loc_1B140
0001BD3C 6000                       		bra.s	loc_1B144
0001BD3E                            ; ===========================================================================
0001BD3E                            
0001BD3E                            loc_1B13C:
0001BD3E B044                       		cmp.w	d4,d0
0001BD40 6200                       		bhi.s	loc_1B144
0001BD42                            
0001BD42                            loc_1B140:
0001BD42 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            loc_1B144:
0001BD46 6000 FDC8                  		bra.w	Touch_Enemy
0001BD4A                            ; ===========================================================================
0001BD4A                            
0001BD4A                            Touch_D7orE1:				; XREF: Touch_Special
0001BD4A 5229 0021                  		addq.b	#1,$21(a1)
0001BD4E 4E75                       		rts	
0001BD50                            ; End of function Touch_Special
0001BD50                            
0001BD50                            ; ---------------------------------------------------------------------------
0001BD50                            ; Subroutine to	show the special stage layout
0001BD50                            ; ---------------------------------------------------------------------------
0001BD50                            
0001BD50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD50                            
0001BD50                            
0001BD50                            SS_ShowLayout:				; XREF: SpecialStage
0001BD50 6100 0000                  		bsr.w	SS_AniWallsRings
0001BD54 6100 0000                  		bsr.w	SS_AniItems
0001BD58 3F05                       		move.w	d5,-(sp)
0001BD5A 43F8 8000                  		lea	($FFFF8000).w,a1
0001BD5E 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD62 0200 00FC                  		andi.b	#$FC,d0
0001BD66 4EB9 0000 2D34             		jsr	(CalcSine).l
0001BD6C 3800                       		move.w	d0,d4
0001BD6E 3A01                       		move.w	d1,d5
0001BD70 C9FC 0018                  		muls.w	#$18,d4
0001BD74 CBFC 0018                  		muls.w	#$18,d5
0001BD78 7400                       		moveq	#0,d2
0001BD7A 3438 F700                  		move.w	($FFFFF700).w,d2
0001BD7E 84FC 0018                  		divu.w	#$18,d2
0001BD82 4842                       		swap	d2
0001BD84 4442                       		neg.w	d2
0001BD86 0642 FF4C                  		addi.w	#-$B4,d2
0001BD8A 7600                       		moveq	#0,d3
0001BD8C 3638 F704                  		move.w	($FFFFF704).w,d3
0001BD90 86FC 0018                  		divu.w	#$18,d3
0001BD94 4843                       		swap	d3
0001BD96 4443                       		neg.w	d3
0001BD98 0643 FF4C                  		addi.w	#-$B4,d3
0001BD9C 3E3C 000F                  		move.w	#$F,d7
0001BDA0                            
0001BDA0                            loc_1B19E:
0001BDA0 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BDA4 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BDA8 4440                       		neg.w	d0
0001BDAA C3C2                       		muls.w	d2,d1
0001BDAC C1C3                       		muls.w	d3,d0
0001BDAE 2C00                       		move.l	d0,d6
0001BDB0 DC81                       		add.l	d1,d6
0001BDB2 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BDB6 C1C2                       		muls.w	d2,d0
0001BDB8 C3C3                       		muls.w	d3,d1
0001BDBA D280                       		add.l	d0,d1
0001BDBC 2406                       		move.l	d6,d2
0001BDBE 3C3C 000F                  		move.w	#$F,d6
0001BDC2                            
0001BDC2                            loc_1B1C0:
0001BDC2 2002                       		move.l	d2,d0
0001BDC4 E080                       		asr.l	#8,d0
0001BDC6 32C0                       		move.w	d0,(a1)+
0001BDC8 2001                       		move.l	d1,d0
0001BDCA E080                       		asr.l	#8,d0
0001BDCC 32C0                       		move.w	d0,(a1)+
0001BDCE D485                       		add.l	d5,d2
0001BDD0 D284                       		add.l	d4,d1
0001BDD2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BDD6                            
0001BDD6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BDDA 0643 0018                  		addi.w	#$18,d3
0001BDDE 51CF FFC0                  		dbf	d7,loc_1B19E
0001BDE2                            
0001BDE2 3A1F                       		move.w	(sp)+,d5
0001BDE4 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BDEA 7000                       		moveq	#0,d0
0001BDEC 3038 F704                  		move.w	($FFFFF704).w,d0
0001BDF0 80FC 0018                  		divu.w	#$18,d0
0001BDF4 C0FC 0080                  		mulu.w	#$80,d0
0001BDF8 D1C0                       		adda.l	d0,a0
0001BDFA 7000                       		moveq	#0,d0
0001BDFC 3038 F700                  		move.w	($FFFFF700).w,d0
0001BE00 80FC 0018                  		divu.w	#$18,d0
0001BE04 D0C0                       		adda.w	d0,a0
0001BE06 49F8 8000                  		lea	($FFFF8000).w,a4
0001BE0A 3E3C 000F                  		move.w	#$F,d7
0001BE0E                            
0001BE0E                            loc_1B20C:
0001BE0E 3C3C 000F                  		move.w	#$F,d6
0001BE12                            
0001BE12                            loc_1B210:
0001BE12 7000                       		moveq	#0,d0
0001BE14 1018                       		move.b	(a0)+,d0
0001BE16 6700                       		beq.s	loc_1B268
0001BE18 0C00 004E                  		cmpi.b	#$4E,d0
0001BE1C 6200                       		bhi.s	loc_1B268
0001BE1E 3614                       		move.w	(a4),d3
0001BE20 0643 0120                  		addi.w	#$120,d3
0001BE24 0C43 0070                  		cmpi.w	#$70,d3
0001BE28 6500                       		bcs.s	loc_1B268
0001BE2A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BE2E 6400                       		bcc.s	loc_1B268
0001BE30 342C 0002                  		move.w	2(a4),d2
0001BE34 0642 00F0                  		addi.w	#$F0,d2
0001BE38 0C42 0070                  		cmpi.w	#$70,d2
0001BE3C 6500                       		bcs.s	loc_1B268
0001BE3E 0C42 0170                  		cmpi.w	#$170,d2
0001BE42 6400                       		bcc.s	loc_1B268
0001BE44 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BE4A E748                       		lsl.w	#3,d0
0001BE4C 4BF5 0000                  		lea	(a5,d0.w),a5
0001BE50 225D                       		movea.l	(a5)+,a1
0001BE52 321D                       		move.w	(a5)+,d1
0001BE54 D241                       		add.w	d1,d1
0001BE56 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BE5A 365D                       		movea.w	(a5)+,a3
0001BE5C 7200                       		moveq	#0,d1
0001BE5E 1219                       		move.b	(a1)+,d1
0001BE60 5301                       		subq.b	#1,d1
0001BE62 6B00                       		bmi.s	loc_1B268
0001BE64 4EB9 0000 E160             		jsr	sub_D762
0001BE6A                            
0001BE6A                            loc_1B268:
0001BE6A 584C                       		addq.w	#4,a4
0001BE6C 51CE FFA4                  		dbf	d6,loc_1B210
0001BE70                            
0001BE70 41E8 0070                  		lea	$70(a0),a0
0001BE74 51CF FF98                  		dbf	d7,loc_1B20C
0001BE78                            
0001BE78 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BE7C 0C05 0050                  		cmpi.b	#$50,d5
0001BE80 6700                       		beq.s	loc_1B288
0001BE82 24BC 0000 0000             		move.l	#0,(a2)
0001BE88 4E75                       		rts	
0001BE8A                            ; ===========================================================================
0001BE8A                            
0001BE8A                            loc_1B288:
0001BE8A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BE90 4E75                       		rts	
0001BE92                            ; End of function SS_ShowLayout
0001BE92                            
0001BE92                            ; ---------------------------------------------------------------------------
0001BE92                            ; Subroutine to	animate	walls and rings	in the special stage
0001BE92                            ; ---------------------------------------------------------------------------
0001BE92                            
0001BE92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE92                            
0001BE92                            
0001BE92                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BE92 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BE98 7000                       		moveq	#0,d0
0001BE9A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BE9E E408                       		lsr.b	#2,d0
0001BEA0 0240 000F                  		andi.w	#$F,d0
0001BEA4 7223                       		moveq	#$23,d1
0001BEA6                            
0001BEA6                            loc_1B2A4:
0001BEA6 3280                       		move.w	d0,(a1)
0001BEA8 5049                       		addq.w	#8,a1
0001BEAA 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BEAE                            
0001BEAE 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BEB4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BEB8 6A00                       		bpl.s	loc_1B2C8
0001BEBA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BEC0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BEC4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BECA                            
0001BECA                            loc_1B2C8:
0001BECA 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BED0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BED4 6A00                       		bpl.s	loc_1B2E4
0001BED6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BEDC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BEE0 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BEE6                            
0001BEE6                            loc_1B2E4:
0001BEE6 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BEEA 1340 0138                  		move.b	d0,$138(a1)
0001BEEE 1340 0160                  		move.b	d0,$160(a1)
0001BEF2 1340 0148                  		move.b	d0,$148(a1)
0001BEF6 1340 0150                  		move.b	d0,$150(a1)
0001BEFA 1340 01D8                  		move.b	d0,$1D8(a1)
0001BEFE 1340 01E0                  		move.b	d0,$1E0(a1)
0001BF02 1340 01E8                  		move.b	d0,$1E8(a1)
0001BF06 1340 01F0                  		move.b	d0,$1F0(a1)
0001BF0A 1340 01F8                  		move.b	d0,$1F8(a1)
0001BF0E 1340 0200                  		move.b	d0,$200(a1)
0001BF12 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BF16 6A00                       		bpl.s	loc_1B326
0001BF18 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BF1E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BF22 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BF28                            
0001BF28                            loc_1B326:
0001BF28 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BF2C 1340 0168                  		move.b	d0,$168(a1)
0001BF30 1340 0170                  		move.b	d0,$170(a1)
0001BF34 1340 0178                  		move.b	d0,$178(a1)
0001BF38 1340 0180                  		move.b	d0,$180(a1)
0001BF3C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BF40 6A00                       		bpl.s	loc_1B350
0001BF42 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BF48 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BF4C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BF52                            
0001BF52                            loc_1B350:
0001BF52 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BF58 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BF5E 7000                       		moveq	#0,d0
0001BF60 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BF64 D040                       		add.w	d0,d0
0001BF66 41F0 0000                  		lea	(a0,d0.w),a0
0001BF6A 3290                       		move.w	(a0),(a1)
0001BF6C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF72 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF78 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF7E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF84 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF8A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF90 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF96 D0FC 0020                  		adda.w	#$20,a0
0001BF9A D2FC 0048                  		adda.w	#$48,a1
0001BF9E 3290                       		move.w	(a0),(a1)
0001BFA0 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFA6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFAC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFB2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFB8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFBE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFC4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFCA D0FC 0020                  		adda.w	#$20,a0
0001BFCE D2FC 0048                  		adda.w	#$48,a1
0001BFD2 3290                       		move.w	(a0),(a1)
0001BFD4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFDA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFE0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFE6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFEC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFF2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFF8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFFE D0FC 0020                  		adda.w	#$20,a0
0001C002 D2FC 0048                  		adda.w	#$48,a1
0001C006 3290                       		move.w	(a0),(a1)
0001C008 3368 0002 0008             		move.w	2(a0),8(a1)
0001C00E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C014 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C01A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C020 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C026 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C02C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C032 D0FC 0020                  		adda.w	#$20,a0
0001C036 D2FC 0048                  		adda.w	#$48,a1
0001C03A 4E75                       		rts	
0001C03C                            ; End of function SS_AniWallsRings
0001C03C                            
0001C03C                            ; ===========================================================================
0001C03C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C04C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C05C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C06C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C07C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C08C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C09C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0AC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0BC                            ; ---------------------------------------------------------------------------
0001C0BC                            ; Subroutine to	remove items when you collect them in the special stage
0001C0BC                            ; ---------------------------------------------------------------------------
0001C0BC                            
0001C0BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0BC                            
0001C0BC                            
0001C0BC                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C0BC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C0C2 303C 001F                  		move.w	#$1F,d0
0001C0C6                            
0001C0C6                            loc_1B4C4:
0001C0C6 4A12                       		tst.b	(a2)
0001C0C8 6700                       		beq.s	locret_1B4CE
0001C0CA 504A                       		addq.w	#8,a2
0001C0CC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C0D0                            
0001C0D0                            locret_1B4CE:
0001C0D0 4E75                       		rts	
0001C0D2                            ; End of function SS_RemoveCollectedItem
0001C0D2                            
0001C0D2                            ; ---------------------------------------------------------------------------
0001C0D2                            ; Subroutine to	animate	special	stage items when you touch them
0001C0D2                            ; ---------------------------------------------------------------------------
0001C0D2                            
0001C0D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0D2                            
0001C0D2                            
0001C0D2                            SS_AniItems:				; XREF: SS_ShowLayout
0001C0D2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C0D8 3E3C 001F                  		move.w	#$1F,d7
0001C0DC                            
0001C0DC                            loc_1B4DA:
0001C0DC 7000                       		moveq	#0,d0
0001C0DE 1010                       		move.b	(a0),d0
0001C0E0 6700                       		beq.s	loc_1B4E8
0001C0E2 E548                       		lsl.w	#2,d0
0001C0E4 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C0E8 4E91                       		jsr	(a1)
0001C0EA                            
0001C0EA                            loc_1B4E8:
0001C0EA 5048                       		addq.w	#8,a0
0001C0EC                            
0001C0EC                            loc_1B4EA:
0001C0EC 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C0F0                            
0001C0F0 4E75                       		rts	
0001C0F2                            ; End of function SS_AniItems
0001C0F2                            
0001C0F2                            ; ===========================================================================
0001C0F2 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C0F6 0000 0000                  		dc.l SS_AniBumper
0001C0FA 0000 0000                  		dc.l SS_Ani1Up
0001C0FE 0000 0000                  		dc.l SS_AniReverse
0001C102 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C106 0000 0000                  		dc.l SS_AniGlassBlock
0001C10A                            ; ===========================================================================
0001C10A                            
0001C10A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C10A 5328 0002                  		subq.b	#1,2(a0)
0001C10E 6A00                       		bpl.s	locret_1B530
0001C110 117C 0005 0002             		move.b	#5,2(a0)
0001C116 7000                       		moveq	#0,d0
0001C118 1028 0003                  		move.b	3(a0),d0
0001C11C 5228 0003                  		addq.b	#1,3(a0)
0001C120 2268 0004                  		movea.l	4(a0),a1
0001C124 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C128 1280                       		move.b	d0,(a1)
0001C12A 6600                       		bne.s	locret_1B530
0001C12C 4290                       		clr.l	(a0)
0001C12E 42A8 0004                  		clr.l	4(a0)
0001C132                            
0001C132                            locret_1B530:
0001C132 4E75                       		rts	
0001C134                            ; ===========================================================================
0001C134 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C13A                            ; ===========================================================================
0001C13A                            
0001C13A                            SS_AniBumper:				; XREF: SS_AniIndex
0001C13A 5328 0002                  		subq.b	#1,2(a0)
0001C13E 6A00                       		bpl.s	locret_1B566
0001C140 117C 0007 0002             		move.b	#7,2(a0)
0001C146 7000                       		moveq	#0,d0
0001C148 1028 0003                  		move.b	3(a0),d0
0001C14C 5228 0003                  		addq.b	#1,3(a0)
0001C150 2268 0004                  		movea.l	4(a0),a1
0001C154 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C158 6600                       		bne.s	loc_1B564
0001C15A 4290                       		clr.l	(a0)
0001C15C 42A8 0004                  		clr.l	4(a0)
0001C160 12BC 0025                  		move.b	#$25,(a1)
0001C164 4E75                       		rts	
0001C166                            ; ===========================================================================
0001C166                            
0001C166                            loc_1B564:
0001C166 1280                       		move.b	d0,(a1)
0001C168                            
0001C168                            locret_1B566:
0001C168 4E75                       		rts	
0001C16A                            ; ===========================================================================
0001C16A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C170                            ; ===========================================================================
0001C170                            
0001C170                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C170 5328 0002                  		subq.b	#1,2(a0)
0001C174 6A00                       		bpl.s	locret_1B596
0001C176 117C 0005 0002             		move.b	#5,2(a0)
0001C17C 7000                       		moveq	#0,d0
0001C17E 1028 0003                  		move.b	3(a0),d0
0001C182 5228 0003                  		addq.b	#1,3(a0)
0001C186 2268 0004                  		movea.l	4(a0),a1
0001C18A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C18E 1280                       		move.b	d0,(a1)
0001C190 6600                       		bne.s	locret_1B596
0001C192 4290                       		clr.l	(a0)
0001C194 42A8 0004                  		clr.l	4(a0)
0001C198                            
0001C198                            locret_1B596:
0001C198 4E75                       		rts	
0001C19A                            ; ===========================================================================
0001C19A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C1A0                            ; ===========================================================================
0001C1A0                            
0001C1A0                            SS_AniReverse:				; XREF: SS_AniIndex
0001C1A0 5328 0002                  		subq.b	#1,2(a0)
0001C1A4 6A00                       		bpl.s	locret_1B5CC
0001C1A6 117C 0007 0002             		move.b	#7,2(a0)
0001C1AC 7000                       		moveq	#0,d0
0001C1AE 1028 0003                  		move.b	3(a0),d0
0001C1B2 5228 0003                  		addq.b	#1,3(a0)
0001C1B6 2268 0004                  		movea.l	4(a0),a1
0001C1BA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C1BE 6600                       		bne.s	loc_1B5CA
0001C1C0 4290                       		clr.l	(a0)
0001C1C2 42A8 0004                  		clr.l	4(a0)
0001C1C6 12BC 002B                  		move.b	#$2B,(a1)
0001C1CA 4E75                       		rts	
0001C1CC                            ; ===========================================================================
0001C1CC                            
0001C1CC                            loc_1B5CA:
0001C1CC 1280                       		move.b	d0,(a1)
0001C1CE                            
0001C1CE                            locret_1B5CC:
0001C1CE 4E75                       		rts	
0001C1D0                            ; ===========================================================================
0001C1D0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C1D6 5328 0002                  		subq.b	#1,2(a0)
0001C1DA 6A00                       		bpl.s	locret_1B60C
0001C1DC 117C 0005 0002             		move.b	#5,2(a0)
0001C1E2 7000                       		moveq	#0,d0
0001C1E4 1028 0003                  		move.b	3(a0),d0
0001C1E8 5228 0003                  		addq.b	#1,3(a0)
0001C1EC 2268 0004                  		movea.l	4(a0),a1
0001C1F0 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C1F4 1280                       		move.b	d0,(a1)
0001C1F6 6600                       		bne.s	locret_1B60C
0001C1F8 4290                       		clr.l	(a0)
0001C1FA 42A8 0004                  		clr.l	4(a0)
0001C1FE 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C204 303C 00A8                  		move.w	#$A8,d0
0001C208 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C20E                            
0001C20E                            locret_1B60C:
0001C20E 4E75                       		rts	
0001C210                            ; ===========================================================================
0001C210 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C216                            ; ===========================================================================
0001C216                            
0001C216                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C216 5328 0002                  		subq.b	#1,2(a0)
0001C21A 6A00                       		bpl.s	locret_1B640
0001C21C 117C 0001 0002             		move.b	#1,2(a0)
0001C222 7000                       		moveq	#0,d0
0001C224 1028 0003                  		move.b	3(a0),d0
0001C228 5228 0003                  		addq.b	#1,3(a0)
0001C22C 2268 0004                  		movea.l	4(a0),a1
0001C230 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C234 1280                       		move.b	d0,(a1)
0001C236 6600                       		bne.s	locret_1B640
0001C238 12A8 0004                  		move.b	4(a0),(a1)
0001C23C 4290                       		clr.l	(a0)
0001C23E 42A8 0004                  		clr.l	4(a0)
0001C242                            
0001C242                            locret_1B640:
0001C242 4E75                       		rts	
0001C244                            ; ===========================================================================
0001C244 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E                            ; Special stage	layout pointers
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E                            SS_LayoutIndex:
0001C24E                            	include "_inc\Special stage layout pointers.asm"
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E                            ; Special stage	layout pointers
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E 0000 0000                  	dc.l SS_1
0001C252 0000 0000                  	dc.l SS_2
0001C256 0000 0000                  	dc.l SS_3
0001C25A 0000 0000                  	dc.l SS_4
0001C25E 0000 0000                  	dc.l SS_5
0001C262 0000 0000                  	dc.l SS_6
0001C266                            	even
0001C266                            	even
0001C266                            
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            ; Special stage	start locations
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C27E                            		even
0001C27E                            
0001C27E                            ; ---------------------------------------------------------------------------
0001C27E                            ; Subroutine to	load special stage layout
0001C27E                            ; ---------------------------------------------------------------------------
0001C27E                            
0001C27E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C27E                            
0001C27E                            
0001C27E                            SS_Load:				; XREF: SpecialStage
0001C27E 7000                       		moveq	#0,d0
0001C280 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C284 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C288 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C28E 6500                       		bcs.s	SS_ChkEmldNum
0001C290 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C296                            
0001C296                            SS_ChkEmldNum:
0001C296 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C29C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C29E 7200                       		moveq	#0,d1
0001C2A0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C2A4 5301                       		subq.b	#1,d1
0001C2A6 6500                       		bcs.s	SS_LoadData
0001C2A8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C2AC                            
0001C2AC                            SS_ChkEmldLoop:	
0001C2AC B033 1000                  		cmp.b	(a3,d1.w),d0
0001C2B0 6600                       		bne.s	SS_ChkEmldRepeat
0001C2B2 60CA                       		bra.s	SS_Load
0001C2B4                            ; ===========================================================================
0001C2B4                            
0001C2B4                            SS_ChkEmldRepeat:
0001C2B4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C2B8                            
0001C2B8                            SS_LoadData:
0001C2B8 E548                       		lsl.w	#2,d0
0001C2BA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C2BE 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C2C2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C2C6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C2CA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C2D0 303C 0000                  		move.w	#0,d0
0001C2D4 4EB9 0000 191C             		jsr	(EniDec).l
0001C2DA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2E0 303C 0FFF                  		move.w	#$FFF,d0
0001C2E4                            
0001C2E4                            SS_ClrRAM3:
0001C2E4 4299                       		clr.l	(a1)+
0001C2E6 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C2EA                            
0001C2EA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C2F0 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C2F6 723F                       		moveq	#$3F,d1
0001C2F8                            
0001C2F8                            loc_1B6F6:
0001C2F8 743F                       		moveq	#$3F,d2
0001C2FA                            
0001C2FA                            loc_1B6F8:
0001C2FA 12D8                       		move.b	(a0)+,(a1)+
0001C2FC 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C300                            
0001C300 43E9 0040                  		lea	$40(a1),a1
0001C304 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C308                            
0001C308 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C30E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C314 724D                       		moveq	#$4D,d1
0001C316                            
0001C316                            loc_1B714:
0001C316 22D8                       		move.l	(a0)+,(a1)+
0001C318 32FC 0000                  		move.w	#0,(a1)+
0001C31C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C322 32D8                       		move.w	(a0)+,(a1)+
0001C324 51C9 FFF0                  		dbf	d1,loc_1B714
0001C328                            
0001C328 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C32E 323C 003F                  		move.w	#$3F,d1
0001C332                            
0001C332                            loc_1B730:
0001C332                            
0001C332 4299                       		clr.l	(a1)+
0001C334 51C9 FFFC                  		dbf	d1,loc_1B730
0001C338                            
0001C338 4E75                       		rts	
0001C33A                            ; End of function SS_Load
0001C33A                            
0001C33A                            ; ===========================================================================
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A                            ; Special stage	mappings and VRAM pointers
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A                            SS_MapIndex:
0001C33A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A                            ; Special stage	mappings and VRAM pointers
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C33E 0142                       	dc.w $142		; VRAM setting
0001C340 0000 0000                  	dc.l Map_SSWalls
0001C344 0142                       	dc.w $142
0001C346 0000 0000                  	dc.l Map_SSWalls
0001C34A 0142                       	dc.w $142
0001C34C 0000 0000                  	dc.l Map_SSWalls
0001C350 0142                       	dc.w $142
0001C352 0000 0000                  	dc.l Map_SSWalls
0001C356 0142                       	dc.w $142
0001C358 0000 0000                  	dc.l Map_SSWalls
0001C35C 0142                       	dc.w $142
0001C35E 0000 0000                  	dc.l Map_SSWalls
0001C362 0142                       	dc.w $142
0001C364 0000 0000                  	dc.l Map_SSWalls
0001C368 0142                       	dc.w $142
0001C36A 0000 0000                  	dc.l Map_SSWalls
0001C36E 0142                       	dc.w $142
0001C370 0000 0000                  	dc.l Map_SSWalls
0001C374 2142                       	dc.w $2142
0001C376 0000 0000                  	dc.l Map_SSWalls
0001C37A 2142                       	dc.w $2142
0001C37C 0000 0000                  	dc.l Map_SSWalls
0001C380 2142                       	dc.w $2142
0001C382 0000 0000                  	dc.l Map_SSWalls
0001C386 2142                       	dc.w $2142
0001C388 0000 0000                  	dc.l Map_SSWalls
0001C38C 2142                       	dc.w $2142
0001C38E 0000 0000                  	dc.l Map_SSWalls
0001C392 2142                       	dc.w $2142
0001C394 0000 0000                  	dc.l Map_SSWalls
0001C398 2142                       	dc.w $2142
0001C39A 0000 0000                  	dc.l Map_SSWalls
0001C39E 2142                       	dc.w $2142
0001C3A0 0000 0000                  	dc.l Map_SSWalls
0001C3A4 2142                       	dc.w $2142
0001C3A6 0000 0000                  	dc.l Map_SSWalls
0001C3AA 4142                       	dc.w $4142
0001C3AC 0000 0000                  	dc.l Map_SSWalls
0001C3B0 4142                       	dc.w $4142
0001C3B2 0000 0000                  	dc.l Map_SSWalls
0001C3B6 4142                       	dc.w $4142
0001C3B8 0000 0000                  	dc.l Map_SSWalls
0001C3BC 4142                       	dc.w $4142
0001C3BE 0000 0000                  	dc.l Map_SSWalls
0001C3C2 4142                       	dc.w $4142
0001C3C4 0000 0000                  	dc.l Map_SSWalls
0001C3C8 4142                       	dc.w $4142
0001C3CA 0000 0000                  	dc.l Map_SSWalls
0001C3CE 4142                       	dc.w $4142
0001C3D0 0000 0000                  	dc.l Map_SSWalls
0001C3D4 4142                       	dc.w $4142
0001C3D6 0000 0000                  	dc.l Map_SSWalls
0001C3DA 4142                       	dc.w $4142
0001C3DC 0000 0000                  	dc.l Map_SSWalls
0001C3E0 6142                       	dc.w $6142
0001C3E2 0000 0000                  	dc.l Map_SSWalls
0001C3E6 6142                       	dc.w $6142
0001C3E8 0000 0000                  	dc.l Map_SSWalls
0001C3EC 6142                       	dc.w $6142
0001C3EE 0000 0000                  	dc.l Map_SSWalls
0001C3F2 6142                       	dc.w $6142
0001C3F4 0000 0000                  	dc.l Map_SSWalls
0001C3F8 6142                       	dc.w $6142
0001C3FA 0000 0000                  	dc.l Map_SSWalls
0001C3FE 6142                       	dc.w $6142
0001C400 0000 0000                  	dc.l Map_SSWalls
0001C404 6142                       	dc.w $6142
0001C406 0000 0000                  	dc.l Map_SSWalls
0001C40A 6142                       	dc.w $6142
0001C40C 0000 0000                  	dc.l Map_SSWalls
0001C410 6142                       	dc.w $6142
0001C412 0000 F4F6                  	dc.l Map_obj47
0001C416 023B                       	dc.w $23B
0001C418 0000 0000                  	dc.l Map_SS_R
0001C41C 0570                       	dc.w $570
0001C41E 0000 0000                  	dc.l Map_SS_R
0001C422 0251                       	dc.w $251
0001C424 0000 0000                  	dc.l Map_SS_R
0001C428 0370                       	dc.w $370
0001C42A 0000 0000                  	dc.l Map_SS_Up
0001C42E 0263                       	dc.w $263
0001C430 0000 0000                  	dc.l Map_SS_Down
0001C434 0263                       	dc.w $263
0001C436 0000 0000                  	dc.l Map_SS_R
0001C43A 22F0                       	dc.w $22F0
0001C43C 0000 0000                  	dc.l Map_SS_Glass
0001C440 0470                       	dc.w $470
0001C442 0000 0000                  	dc.l Map_SS_Glass
0001C446 05F0                       	dc.w $5F0
0001C448 0000 0000                  	dc.l Map_SS_Glass
0001C44C 65F0                       	dc.w $65F0
0001C44E 0000 0000                  	dc.l Map_SS_Glass
0001C452 25F0                       	dc.w $25F0
0001C454 0000 0000                  	dc.l Map_SS_Glass
0001C458 45F0                       	dc.w $45F0
0001C45A 0000 0000                  	dc.l Map_SS_R
0001C45E 02F0                       	dc.w $2F0
0001C460 0100 F4F6                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C464 023B                       	dc.w $23B
0001C466 0200 F4F6                  	dc.l Map_obj47+$2000000
0001C46A 023B                       	dc.w $23B
0001C46C 0000 0000                  	dc.l Map_SS_R
0001C470 0797                       	dc.w $797
0001C472 0000 0000                  	dc.l Map_SS_R
0001C476 07A0                       	dc.w $7A0
0001C478 0000 0000                  	dc.l Map_SS_R
0001C47C 07A9                       	dc.w $7A9
0001C47E 0000 0000                  	dc.l Map_SS_R
0001C482 0797                       	dc.w $797
0001C484 0000 0000                  	dc.l Map_SS_R
0001C488 07A0                       	dc.w $7A0
0001C48A 0000 0000                  	dc.l Map_SS_R
0001C48E 07A9                       	dc.w $7A9
0001C490 0000 A7F6                  	dc.l Map_obj25
0001C494 27B2                       	dc.w $27B2
0001C496 0000 0000                  	dc.l Map_SS_Chaos3
0001C49A 0770                       	dc.w $770
0001C49C 0000 0000                  	dc.l Map_SS_Chaos3
0001C4A0 2770                       	dc.w $2770
0001C4A2 0000 0000                  	dc.l Map_SS_Chaos3
0001C4A6 4770                       	dc.w $4770
0001C4A8 0000 0000                  	dc.l Map_SS_Chaos3
0001C4AC 6770                       	dc.w $6770
0001C4AE 0000 0000                  	dc.l Map_SS_Chaos1
0001C4B2 0770                       	dc.w $770
0001C4B4 0000 0000                  	dc.l Map_SS_Chaos2
0001C4B8 0770                       	dc.w $770
0001C4BA 0000 0000                  	dc.l Map_SS_R
0001C4BE 04F0                       	dc.w $4F0
0001C4C0 0400 A7F6                  	dc.l Map_obj25+$4000000
0001C4C4 27B2                       	dc.w $27B2
0001C4C6 0500 A7F6                  	dc.l Map_obj25+$5000000
0001C4CA 27B2                       	dc.w $27B2
0001C4CC 0600 A7F6                  	dc.l Map_obj25+$6000000
0001C4D0 27B2                       	dc.w $27B2
0001C4D2 0700 A7F6                  	dc.l Map_obj25+$7000000
0001C4D6 27B2                       	dc.w $27B2
0001C4D8 0000 0000                  	dc.l Map_SS_Glass
0001C4DC 23F0                       	dc.w $23F0
0001C4DE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C4E2 23F0                       	dc.w $23F0
0001C4E4 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C4E8 23F0                       	dc.w $23F0
0001C4EA 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C4EE 23F0                       	dc.w $23F0
0001C4F0 0000 0000                  	dc.l Map_SS_R+$2000000
0001C4F4 04F0                       	dc.w $4F0
0001C4F6 0000 0000                  	dc.l Map_SS_Glass
0001C4FA 05F0                       	dc.w $5F0
0001C4FC 0000 0000                  	dc.l Map_SS_Glass
0001C500 65F0                       	dc.w $65F0
0001C502 0000 0000                  	dc.l Map_SS_Glass
0001C506 25F0                       	dc.w $25F0
0001C508 0000 0000                  	dc.l Map_SS_Glass
0001C50C 45F0                       	dc.w $45F0
0001C50C 45F0                       	dc.w $45F0
0001C50E                            
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            ; Sprite mappings - special stage "R" block
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            Map_SS_R:
0001C50E                            	include "_maps\SSRblock.asm"
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            ; Sprite mappings - special stage "R" block
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C512 0000                       		dc.w byte_1B91E-Map_SS_R
0001C514 01                         byte_1B912:	dc.b 1
0001C515 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C51A 01                         byte_1B918:	dc.b 1
0001C51B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C520 00                         byte_1B91E:	dc.b 0
0001C522 00                         		even
0001C522 00                         		even
0001C522                            
0001C522                            ; ---------------------------------------------------------------------------
0001C522                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C522                            ; ---------------------------------------------------------------------------
0001C522                            Map_SS_Glass:
0001C522                            	include "_maps\SSglassblock.asm"
0001C522                            ; ---------------------------------------------------------------------------
0001C522                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C522                            ; ---------------------------------------------------------------------------
0001C522 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C526 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C52A 01                         byte_1B928:	dc.b 1
0001C52B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C530 01                         byte_1B92E:	dc.b 1
0001C531 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C536 01                         byte_1B934:	dc.b 1
0001C537 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C53C 01                         byte_1B93A:	dc.b 1
0001C53D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C542                            		even
0001C542                            		even
0001C542                            
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Sprite mappings - special stage "UP" block
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            Map_SS_Up:
0001C542                            	include "_maps\SSUPblock.asm"
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Sprite mappings - special stage "UP" block
0001C542                            ; ---------------------------------------------------------------------------
0001C542 0000                       		dc.w byte_1B944-Map_SS_Up
0001C544 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C546 01                         byte_1B944:	dc.b 1
0001C547 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C54C 01                         byte_1B94A:	dc.b 1
0001C54D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C552                            		even
0001C552                            		even
0001C552                            
0001C552                            ; ---------------------------------------------------------------------------
0001C552                            ; Sprite mappings - special stage "DOWN" block
0001C552                            ; ---------------------------------------------------------------------------
0001C552                            Map_SS_Down:
0001C552                            	include "_maps\SSDOWNblock.asm"
0001C552                            ; ---------------------------------------------------------------------------
0001C552                            ; Sprite mappings - special stage "DOWN" block
0001C552                            ; ---------------------------------------------------------------------------
0001C552 0000                       		dc.w byte_1B954-Map_SS_Down
0001C554 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C556 01                         byte_1B954:	dc.b 1
0001C557 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C55C 01                         byte_1B95A:	dc.b 1
0001C55D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C562                            		even
0001C562                            		even
0001C562                            
0001C562                            ; ---------------------------------------------------------------------------
0001C562                            ; Sprite mappings - special stage chaos	emeralds
0001C562                            ; ---------------------------------------------------------------------------
0001C562 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C564 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C566 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C568 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C56A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C56C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C56E 01                         byte_1B96C:	dc.b 1
0001C56F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C574 01                         byte_1B972:	dc.b 1
0001C575 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C57A 01                         byte_1B978:	dc.b 1
0001C57B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C580 01                         byte_1B97E:	dc.b 1
0001C581 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C586                            		even
0001C586                            ; ===========================================================================
0001C586                            ; ---------------------------------------------------------------------------
0001C586                            ; Object 09 - Sonic (special stage)
0001C586                            ; ---------------------------------------------------------------------------
0001C586                            
0001C586                            Obj09:					; XREF: Obj_Index
0001C586                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C586                            ;		beq.s	Obj09_Normal	; if not, branch
0001C586 6100 0000                  		bsr.w	SS_FixCamera
0001C58A                            ;		bra.w	DebugMode
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            Obj09_Normal:
0001C58A 7000                       		moveq	#0,d0
0001C58C 1028 0024                  		move.b	$24(a0),d0
0001C590 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C594 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C598                            ; ===========================================================================
0001C598 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C59A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C59C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C59E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C5A0                            ; ===========================================================================
0001C5A0                            
0001C5A0                            Obj09_Main:				; XREF: Obj09_Index
0001C5A0 5428 0024                  		addq.b	#2,$24(a0)
0001C5A4 117C 000E 0016             		move.b	#$E,$16(a0)
0001C5AA 117C 0007 0017             		move.b	#7,$17(a0)
0001C5B0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C5B8 317C 0780 0002             		move.w	#$780,2(a0)
0001C5BE 117C 0004 0001             		move.b	#4,1(a0)
0001C5C4 117C 0000 0018             		move.b	#0,$18(a0)
0001C5CA 117C 0002 001C             		move.b	#2,$1C(a0)
0001C5D0 08E8 0002 0022             		bset	#2,$22(a0)
0001C5D6 08E8 0001 0022             		bset	#1,$22(a0)
0001C5DC                            
0001C5DC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C5DC                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C5DC                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C5DC                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C5DC                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C5DC                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C5DC                            
0001C5DC                            Obj09_NoDebug:
0001C5DC 117C 0000 0030             		move.b	#0,$30(a0)
0001C5E2 7000                       		moveq	#0,d0
0001C5E4 1028 0022                  		move.b	$22(a0),d0
0001C5E8 0240 0002                  		andi.w	#2,d0
0001C5EC 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C5F0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C5F4 4EBA 8116                  		jsr	LoadSonicDynPLC
0001C5F8 4EF9 0000 E002             		jmp	DisplaySprite
0001C5FE                            ; ===========================================================================
0001C5FE 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C600 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C602                            ; ===========================================================================
0001C602                            
0001C602                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C602 6100 0000                  		bsr.w	Obj09_Rise
0001C606 6100 0000                  		bsr.w	Obj09_Move
0001C60A 6100 0000                  		bsr.w	Obj09_Fall
0001C60E 6000                       		bra.s	Obj09_Display
0001C610                            ; ===========================================================================
0001C610                            
0001C610                            Obj09_InAir:				; XREF: Obj09_Modes
0001C610 6100 0000                  		bsr.w	Obj09_Rise
0001C614 6100 0000                  		bsr.w	Obj09_Move
0001C618 6100 0000                  		bsr.w	Obj09_Fall
0001C61C                            
0001C61C                            Obj09_Display:				; XREF: Obj09_OnWall
0001C61C 6100 0000                  		bsr.w	Obj09_ChkItems
0001C620 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C624 4EB9 0000 DFDC             		jsr	SpeedToPos
0001C62A 6100 0000                  		bsr.w	SS_FixCamera
0001C62E 3038 F780                  		move.w	($FFFFF780).w,d0
0001C632 D078 F782                  		add.w	($FFFFF782).w,d0
0001C636 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C63A 4EB9 0001 4466             		jsr	Sonic_Animate
0001C640 4E75                       		rts	
0001C642                            
0001C642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C642                            
0001C642                            
0001C642                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C642 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C648 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C64A 4A78 F784                          tst.w   ($FFFFF784).w
0001C64E 6600                               bne.s   @corereverse1
0001C650 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C654 6000                               bra.s   Obj09_ChkRight          
0001C656                            
0001C656                            @corereverse1:
0001C656 6100 0000                          bsr.w	Obj09_MoveRight
0001C65A                            
0001C65A                            Obj09_ChkRight:
0001C65A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C660 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C662 4A78 F784                          tst.w   ($FFFFF784).w
0001C666 6600                               bne.s   @corereverse2
0001C668 6100 0000                  		bsr.w	Obj09_MoveRight
0001C66C 6000                               bra.s   Obj09_MoveSpeed 
0001C66E                            
0001C66E                            @corereverse2:
0001C66E 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C672                            
0001C672                            Obj09_MoveSpeed:
0001C672 1038 F602                  		move.b	($FFFFF602).w,d0
0001C676 0200 000C                  		andi.b	#$C,d0
0001C67A 6600                       		bne.s	Obj09_MoveCollision
0001C67C 3028 0010                  		move.w	$10(a0),d0
0001C680 6700                       		beq.s	Obj09_MoveCollision
0001C682 317C 0000 0010             		move.w	#0,$10(a0)
0001C688                            
0001C688                            Obj09_MoveCollision:
0001C688 1038 F780                  		move.b	($FFFFF780).w,d0
0001C68C 0600 0020                  		addi.b	#$20,d0
0001C690 0200 00C0                  		andi.b	#$C0,d0
0001C694 4400                       		neg.b	d0
0001C696 4EB9 0000 2D34             		jsr	(CalcSine).l
0001C69C C3E8 0010                  		muls.w	$10(a0),d1
0001C6A0 D3A8 0008                  		add.l	d1,8(a0)
0001C6A4 C1E8 0012                  		muls.w	$12(a0),d0
0001C6A8 D1A8 000C                  		add.l	d0,$C(a0)
0001C6AC 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C6B0 2428 000C                  		move.l	$C(a0),d2
0001C6B4 2628 0008                  		move.l	8(a0),d3
0001C6B8 6100 0000                  		bsr.w	sub_1BCE8
0001C6BC 6700                       		beq.s	loc_1BAF2
0001C6BE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6C2 93A8 0008                  		sub.l	d1,8(a0)
0001C6C6 91A8 000C                  		sub.l	d0,$C(a0)
0001C6CA 317C 0000 0010             		move.w	#0,$10(a0)
0001C6D0 4E75                       		rts	
0001C6D2                            ; ===========================================================================
0001C6D2                            
0001C6D2                            loc_1BAF2:
0001C6D2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6D6 4E75                       		rts	
0001C6D8                            ; End of function Obj09_Move
0001C6D8                            
0001C6D8                            
0001C6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6D8                            
0001C6D8                            
0001C6D8                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C6D8 08E8 0000 0022             		bset	#0,$22(a0)
0001C6DE 4240                               clr.w   d0
0001C6E0 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6E4 D040                               add.w   d0,d0
0001C6E6 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C6EC 4468 0010                          neg.w   $10(a0)
0001C6F0 4E75                               rts
0001C6F2                            
0001C6F2                            ; End of function Obj09_MoveLeft
0001C6F2                            
0001C6F2                            
0001C6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6F2                            
0001C6F2                            
0001C6F2                            Obj09_MoveRight:
0001C6F2 08A8 0000 0022             		bclr	#0,$22(a0)
0001C6F8 4240                               clr.w   d0
0001C6FA 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6FE D040                               add.w   d0,d0
0001C700 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C706 4E75                       		rts
0001C708                            
0001C708                            ; End of function Obj09_MoveRight
0001C708                            
0001C708                            ; ---------------------------------------------------------------------------
0001C708                            
0001C708                            SS_XSpdIndex:
0001C708 0032                       		dc.w 50
0001C70A 0064                       		dc.w 100
0001C70C 0096                       		dc.w 150
0001C70E 00C8                       		dc.w 200
0001C710 00FA                       		dc.w 250
0001C712                            
0001C712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C712                            
0001C712                            
0001C712                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C712 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C718 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C71A 4A78 F784                          tst.w   ($FFFFF784).w
0001C71E 6600 0000                          bne.w   @corereverse1
0001C722 6100 0000                  		bsr.w	Obj09_MoveUp
0001C726 6000                               bra.s   Obj09_NoRise
0001C728                            
0001C728                            @corereverse1:
0001C728 6100 0000                  		bsr.w	Obj09_Falling 
0001C72C                                    
0001C72C                            Obj09_NoRise:
0001C72C 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C732 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C734 4A78 F784                          tst.w   ($FFFFF784).w
0001C738 6600 0000                          bne.w   @corereverse2
0001C73C 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C740 6000                               bra.s   Obj09_MoveYSpeed
0001C742                            
0001C742                            @corereverse2:
0001C742 6100 0000                  		bsr.w	Obj09_MoveUp
0001C746                            		
0001C746                            Obj09_MoveYSpeed:
0001C746 1038 F602                  		move.b	($FFFFF602).w,d0
0001C74A 0200 0003                  		andi.b	#3,d0
0001C74E 6600                       		bne.s	Obj09_MoveYCollision
0001C750 3028 0012                  		move.w	$12(a0),d0
0001C754 6700                       		beq.s	Obj09_MoveYCollision
0001C756 317C 0000 0012             		move.w	#0,$12(a0)
0001C75C                            
0001C75C                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C75C 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C760 0600 0020                  		addi.b	#$20,d0					;	?
0001C764 0200 00C0                  		andi.b	#$C0,d0					;	
0001C768 4400                       		neg.b	d0						;	?
0001C76A 4EB9 0000 2D34             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C770 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C774 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C778 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C77C D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C780 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C784 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C788 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C78C 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C790 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C794 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C798 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C79C 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C7A0 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C7A6 4E75                       		rts								;	end routine
0001C7A8                            
0001C7A8                            Obj09_MoveUp:
0001C7A8 4240                               clr.w   d0
0001C7AA 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7AE D040                               add.w   d0,d0
0001C7B0 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C7B6 4468 0012                          neg.w   $12(a0)
0001C7BA 4E75                               rts
0001C7BC                            
0001C7BC                            Obj09_Falling:
0001C7BC 4240                               clr.w   d0
0001C7BE 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7C2 D040                               add.w   d0,d0
0001C7C4 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C7CA 4E75                       		rts
0001C7CC                            ; End of function Obj09_Jump
0001C7CC                            
0001C7CC                            ; ---------------------------------------------------------------------------
0001C7CC                            SS_YSpdIndex:
0001C7CC 0080                       		dc.w $80
0001C7CE 0100                       		dc.w $100
0001C7D0 0180                       		dc.w $180
0001C7D2 0200                       		dc.w $200
0001C7D4 0280                       		dc.w $280
0001C7D6                            
0001C7D6                            
0001C7D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7D6                            
0001C7D6                            
0001C7D6                            nullsub_2:				; XREF: Obj09_InAir
0001C7D6 4E75                       		rts	
0001C7D8                            ; End of function nullsub_2
0001C7D8                            
0001C7D8                            ; ===========================================================================
0001C7D8                            ; ---------------------------------------------------------------------------
0001C7D8                            ; unused subroutine to limit Sonic's upward vertical speed
0001C7D8                            ; ---------------------------------------------------------------------------
0001C7D8 323C FC00                  		move.w	#-$400,d1
0001C7DC B268 0012                  		cmp.w	$12(a0),d1
0001C7E0 6F00                       		ble.s	locret_1BBB4
0001C7E2 1038 F602                  		move.b	($FFFFF602).w,d0
0001C7E6 0200 0070                  		andi.b	#$70,d0
0001C7EA 6600                       		bne.s	locret_1BBB4
0001C7EC 3141 0012                  		move.w	d1,$12(a0)
0001C7F0                            
0001C7F0                            locret_1BBB4:
0001C7F0 4E75                       		rts	
0001C7F2                            ; ---------------------------------------------------------------------------
0001C7F2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C7F2                            ; ---------------------------------------------------------------------------
0001C7F2                            
0001C7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7F2                            
0001C7F2                            
0001C7F2                            SS_FixCamera:				; XREF: Obj09
0001C7F2 3428 000C                  		move.w	$C(a0),d2
0001C7F6 3628 0008                  		move.w	8(a0),d3
0001C7FA 3038 F700                  		move.w	($FFFFF700).w,d0
0001C7FE 0443 00A0                  		subi.w	#$A0,d3
0001C802 6500                       		bcs.s	loc_1BBCE
0001C804 9043                       		sub.w	d3,d0
0001C806 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C80A                            
0001C80A                            loc_1BBCE:
0001C80A 3038 F704                  		move.w	($FFFFF704).w,d0
0001C80E 0442 0070                  		subi.w	#$70,d2
0001C812 6500                       		bcs.s	locret_1BBDE
0001C814 9042                       		sub.w	d2,d0
0001C816 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C81A                            
0001C81A                            locret_1BBDE:
0001C81A 4E75                       		rts	
0001C81C                            ; End of function SS_FixCamera
0001C81C                            
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C81C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C822 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C828 6600                       		bne.s	loc_1BBF4
0001C82A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C830                            
0001C830                            loc_1BBF4:
0001C830 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C836 6D00                       		blt.s	loc_1BC12
0001C838 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C83E                            ;		move.w	#$4000,($FFFFF780).w
0001C83E 5428 0024                  		addq.b	#2,$24(a0)
0001C842 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C848                            
0001C848                            loc_1BC12:
0001C848                            ;		move.w	($FFFFF780).w,d0
0001C848                            ;		add.w	($FFFFF782).w,d0
0001C848                            ;		move.w	d0,($FFFFF780).w
0001C848 4EB9 0001 4466             		jsr	Sonic_Animate
0001C84E 4EB9 0001 470C             		jsr	LoadSonicDynPLC
0001C854 6100 FF9C                  		bsr.w	SS_FixCamera
0001C858 4EF9 0000 E002             		jmp	DisplaySprite
0001C85E                            ; ===========================================================================
0001C85E                            
0001C85E                            Obj09_Exit2:				; XREF: Obj09_Index
0001C85E 5368 0038                  		subq.w	#1,$38(a0)
0001C862 6600                       		bne.s	loc_1BC40
0001C864 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C86A                            
0001C86A                            loc_1BC40:
0001C86A 4EB9 0001 4466             		jsr	Sonic_Animate
0001C870 4EB9 0001 470C             		jsr	LoadSonicDynPLC
0001C876 6100 FF7A                  		bsr.w	SS_FixCamera
0001C87A 4EF9 0000 E002             		jmp	DisplaySprite
0001C880                            
0001C880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C880                            
0001C880                            
0001C880                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C880 2428 000C                  		move.l	$C(a0),d2
0001C884 2628 0008                  		move.l	8(a0),d3
0001C888 1038 F780                  		move.b	($FFFFF780).w,d0
0001C88C 0200 00FC                  		andi.b	#$FC,d0
0001C890 4EB9 0000 2D34             		jsr	(CalcSine).l
0001C896 3828 0010                  		move.w	$10(a0),d4
0001C89A 48C4                       		ext.l	d4
0001C89C E184                       		asl.l	#8,d4
0001C89E C1FC 002A                  		muls.w	#$2A,d0
0001C8A2 D084                       		add.l	d4,d0
0001C8A4 3828 0012                  		move.w	$12(a0),d4
0001C8A8 48C4                       		ext.l	d4
0001C8AA E184                       		asl.l	#8,d4
0001C8AC C3FC 002A                  		muls.w	#$2A,d1
0001C8B0 D284                       		add.l	d4,d1
0001C8B2 7A00                       		moveq	#0,d5
0001C8B4 3A28 0010                  		move.w	$10(a0),d5
0001C8B8 6700                       		beq.s	Obj09_NoXFall
0001C8BA D680                       		add.l	d0,d3
0001C8BC 6100 0000                  		bsr.w	sub_1BCE8
0001C8C0 6700                       		beq.s	loc_1BCB0
0001C8C2 9680                       		sub.l	d0,d3
0001C8C4 7000                       		moveq	#0,d0
0001C8C6 3140 0010                  		move.w	d0,$10(a0)
0001C8CA 08A8 0001 0022             		bclr	#1,$22(a0)
0001C8D0                            
0001C8D0                            Obj09_NoXFall
0001C8D0 7C00                       		moveq	#0,d6
0001C8D2 3C28 0012                  		move.w	$12(a0),d6
0001C8D6 6700                       		beq.s	Obj09_NoYFall
0001C8D8 D481                       		add.l	d1,d2
0001C8DA 6100 0000                  		bsr.w	sub_1BCE8
0001C8DE 6700                       		beq.s	loc_1BCC6
0001C8E0 9481                       		sub.l	d1,d2
0001C8E2 7200                       		moveq	#0,d1
0001C8E4 3141 0012                  		move.w	d1,$12(a0)
0001C8E8 4E75                       		rts	
0001C8EA                            ; ===========================================================================
0001C8EA                            
0001C8EA                            loc_1BCB0:
0001C8EA 7C00                       		moveq	#0,d6
0001C8EC 3C28 0012                  		move.w	$12(a0),d6
0001C8F0 6700                       		beq.s	Obj09_NoYFall
0001C8F2 D481                       		add.l	d1,d2
0001C8F4 6100 0000                  		bsr.w	sub_1BCE8
0001C8F8 6700                       		beq.s	loc_1BCD4
0001C8FA 9481                       		sub.l	d1,d2
0001C8FC 7200                       		moveq	#0,d1
0001C8FE 3141 0012                  		move.w	d1,$12(a0)
0001C902 08A8 0001 0022             		bclr	#1,$22(a0)
0001C908                            
0001C908                            loc_1BCC6:
0001C908 E080                       		asr.l	#8,d0
0001C90A E081                       		asr.l	#8,d1
0001C90C 3140 0010                  		move.w	d0,$10(a0)
0001C910 3141 0012                  		move.w	d1,$12(a0)
0001C914 4E75                       		rts	
0001C916                            ; ===========================================================================
0001C916                            
0001C916                            loc_1BCD4:
0001C916 E080                       		asr.l	#8,d0
0001C918 E081                       		asr.l	#8,d1
0001C91A 3140 0010                  		move.w	d0,$10(a0)
0001C91E 3141 0012                  		move.w	d1,$12(a0)
0001C922 08E8 0001 0022             		bset	#1,$22(a0)
0001C928 4E75                       		rts	
0001C92A                            
0001C92A                            Obj09_NoYFall:
0001C92A 4E75                       		rts
0001C92C                            ; End of function Obj09_Fall
0001C92C                            
0001C92C                            
0001C92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C92C                            
0001C92C                            
0001C92C                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C92C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C932 7800                       		moveq	#0,d4
0001C934 4842                       		swap	d2
0001C936 3802                       		move.w	d2,d4
0001C938 4842                       		swap	d2
0001C93A 0644 0044                  		addi.w	#$44,d4
0001C93E 88FC 0018                  		divu.w	#$18,d4
0001C942 C8FC 0080                  		mulu.w	#$80,d4
0001C946 D3C4                       		adda.l	d4,a1
0001C948 7800                       		moveq	#0,d4
0001C94A 4843                       		swap	d3
0001C94C 3803                       		move.w	d3,d4
0001C94E 4843                       		swap	d3
0001C950 0644 0014                  		addi.w	#$14,d4
0001C954 88FC 0018                  		divu.w	#$18,d4
0001C958 D2C4                       		adda.w	d4,a1
0001C95A 7A00                       		moveq	#0,d5
0001C95C 1819                       		move.b	(a1)+,d4
0001C95E 6100                       		bsr.s	sub_1BD30
0001C960 1819                       		move.b	(a1)+,d4
0001C962 6100                       		bsr.s	sub_1BD30
0001C964 D2FC 007E                  		adda.w	#$7E,a1
0001C968 1819                       		move.b	(a1)+,d4
0001C96A 6100                       		bsr.s	sub_1BD30
0001C96C 1819                       		move.b	(a1)+,d4
0001C96E 6100                       		bsr.s	sub_1BD30
0001C970 4A05                       		tst.b	d5
0001C972 4E75                       		rts	
0001C974                            ; End of function sub_1BCE8
0001C974                            
0001C974                            
0001C974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C974                            
0001C974                            
0001C974                            sub_1BD30:				; XREF: sub_1BCE8
0001C974 6700                       		beq.s	locret_1BD44
0001C976 0C04 0028                  		cmpi.b	#$28,d4
0001C97A 6500                       		blo.s	loc_1BD46
0001C97C 0C04 004B                  		cmpi.b	#$4B,d4
0001C980 6400                       		bhs.s	loc_1BD46
0001C982 0C04 003A                  		cmpi.b	#$3A,d4
0001C986 6400                       		bhs.s	locret_1BD44
0001C988 0C04 002C                  		cmpi.b	#$2C,d4
0001C98C 6400                       		bhs.s	loc_1BD46
0001C98E                            
0001C98E                            locret_1BD44:
0001C98E 4E75                       		rts	
0001C990                            ; ===========================================================================
0001C990                            
0001C990                            loc_1BD46:
0001C990 1144 0030                  		move.b	d4,$30(a0)
0001C994 2149 0032                  		move.l	a1,$32(a0)
0001C998 7AFF                       		moveq	#-1,d5
0001C99A 4E75                       		rts	
0001C99C                            ; End of function sub_1BD30
0001C99C                            
0001C99C                            
0001C99C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C99C                            
0001C99C                            
0001C99C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C99C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C9A2 7800                       		moveq	#0,d4
0001C9A4 3828 000C                  		move.w	$C(a0),d4
0001C9A8 0644 0050                  		addi.w	#$50,d4
0001C9AC 88FC 0018                  		divu.w	#$18,d4
0001C9B0 C8FC 0080                  		mulu.w	#$80,d4
0001C9B4 D3C4                       		adda.l	d4,a1
0001C9B6 7800                       		moveq	#0,d4
0001C9B8 3828 0008                  		move.w	8(a0),d4
0001C9BC 0644 0020                  		addi.w	#$20,d4
0001C9C0 88FC 0018                  		divu.w	#$18,d4
0001C9C4 D2C4                       		adda.w	d4,a1
0001C9C6 1811                       		move.b	(a1),d4
0001C9C8 6600                       		bne.s	Obj09_ChkCont
0001C9CA 4A28 003A                  		tst.b	$3A(a0)
0001C9CE 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C9D2 7800                       		moveq	#0,d4
0001C9D4 4E75                       		rts	
0001C9D6                            ; ===========================================================================
0001C9D6                            
0001C9D6                            Obj09_ChkCont:
0001C9D6 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C9DA 6600                       		bne.s	Obj09_Chk1Up
0001C9DC 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C9E0 6600                       		bne.s	Obj09_GetCont
0001C9E2 14BC 0001                  		move.b	#1,(a2)
0001C9E6 2549 0004                  		move.l	a1,4(a2)
0001C9EA                            
0001C9EA                            Obj09_GetCont:
0001C9EA 4EB9 0000 A4DE             		jsr	CollectRing
0001C9F0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C9F6 6500                       		bcs.s	Obj09_NoCont
0001C9F8 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C9FE 6600                       		bne.s	Obj09_NoCont
0001CA00 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CA04 303C 00BF                  		move.w	#$BF,d0
0001CA08 4EB9 0000 1594             		jsr	(PlaySound).l	; play extra continue sound
0001CA0E                            
0001CA0E                            Obj09_NoCont:
0001CA0E 7800                       		moveq	#0,d4
0001CA10 4E75                       		rts	
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            Obj09_Chk1Up:
0001CA12 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CA16 6600                       		bne.s	Obj09_ChkEmer
0001CA18 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CA1C 6600                       		bne.s	Obj09_Get1Up
0001CA1E 14BC 0003                  		move.b	#3,(a2)
0001CA22 2549 0004                  		move.l	a1,4(a2)
0001CA26                            
0001CA26                            Obj09_Get1Up:
0001CA26 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CA2A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CA2E 303C 0088                  		move.w	#$88,d0
0001CA32 4EB9 0000 1594             		jsr	(PlaySound).l	; play extra life music
0001CA38 7800                       		moveq	#0,d4
0001CA3A 4E75                       		rts	
0001CA3C                            ; ===========================================================================
0001CA3C                            
0001CA3C                            Obj09_ChkEmer:
0001CA3C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CA40 6500                       		bcs.s	Obj09_UPblock
0001CA42 0C04 0040                  		cmpi.b	#$40,d4
0001CA46 6200                       		bhi.s	Obj09_UPblock
0001CA48 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CA4C 6600                       		bne.s	Obj09_GetEmer
0001CA4E 14BC 0005                  		move.b	#5,(a2)
0001CA52 2549 0004                  		move.l	a1,4(a2)
0001CA56                            
0001CA56                            Obj09_GetEmer:
0001CA56 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CA5C 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CA5E 0404 003B                  		subi.b	#$3B,d4
0001CA62 7000                       		moveq	#0,d0
0001CA64 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CA68 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CA6C 1584 0000                  		move.b	d4,(a2,d0.w)
0001CA70 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CA74                            
0001CA74                            Obj09_NoEmer:
0001CA74 303C 0093                  		move.w	#$93,d0
0001CA78 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play emerald music
0001CA7E 7800                       		moveq	#0,d4
0001CA80 4E75                       		rts	
0001CA82                            
0001CA82                            ; ===========================================================================
0001CA82                            
0001CA82                            Obj09_UPblock:
0001CA82 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CA86 6600                       		bne.s	Obj09_DOWNblock
0001CA88 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CA8C 6600                       		bne.s	Obj09_SpeedUp
0001CA8E 14BC 0001                  		move.b	#1,(a2)
0001CA92 2549 0004                  		move.l	a1,4(a2)
0001CA96                            
0001CA96                            Obj09_SpeedUp:
0001CA96 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CA9C 6400                       		bhs.s	Obj09_UPsnd
0001CA9E 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CAA2                            
0001CAA2                            Obj09_UPsnd:
0001CAA2 303C 00A9                  		move.w	#$A9,d0
0001CAA6 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play up/down sound
0001CAAC 7800                       		moveq	#0,d4
0001CAAE 4E75                       		rts	
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            Obj09_DOWNblock:
0001CAB0 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CAB4 6600                       		bne.s	Obj09_Rblock
0001CAB6 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CABA 6600                       		bne.s	Obj09_SpeedDown
0001CABC 14BC 0001                  		move.b	#1,(a2)
0001CAC0 2549 0004                  		move.l	a1,4(a2)
0001CAC4                            
0001CAC4                            Obj09_SpeedDown:
0001CAC4 4A78 F786                  		tst.w 	($FFFFF786).w
0001CAC8 6700                       		beq.s	Obj09_DOWNsnd
0001CACA 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CACE                            
0001CACE                            Obj09_DOWNsnd:
0001CACE 303C 00A9                  		move.w	#$A9,d0
0001CAD2 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play up/down sound
0001CAD8 7800                       		moveq	#0,d4
0001CADA 4E75                       		rts	
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            Obj09_Rblock:
0001CADC 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CAE0 6600                       		bne.s	Obj09_ChkGhost
0001CAE2 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CAE6 6600                       		bne.s	Obj09_RevStage
0001CAE8 14BC 0001                  		move.b	#1,(a2)
0001CAEC 2549 0004                  		move.l	a1,4(a2)
0001CAF0                            
0001CAF0                            Obj09_RevStage:
0001CAF0 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CAF6 103C 00A9                  		move.b	#$A9,d0
0001CAFA 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play sound
0001CB00 7800                       		moveq	#0,d4
0001CB02 4E75                       		rts	
0001CB04                            
0001CB04                            ; ===========================================================================
0001CB04                            
0001CB04                            Obj09_ChkGhost:
0001CB04 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CB08 6600                       		bne.s	Obj09_ChkGhostTag
0001CB0A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CB10                            
0001CB10                            Obj09_ChkGhostTag:
0001CB10 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CB14 6600                       		bne.s	Obj09_NoGhost
0001CB16 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CB1C 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CB1E 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CB24                            
0001CB24                            Obj09_NoGhost:
0001CB24 78FF                       		moveq	#-1,d4
0001CB26 4E75                       		rts	
0001CB28                            ; ===========================================================================
0001CB28                            
0001CB28                            Obj09_MakeGhostSolid:
0001CB28 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CB2E 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CB30 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CB36 723F                       		moveq	#$3F,d1
0001CB38                            
0001CB38                            Obj09_GhostLoop2:
0001CB38 743F                       		moveq	#$3F,d2
0001CB3A                            
0001CB3A                            Obj09_GhostLoop:
0001CB3A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CB3E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CB40 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CB44                            
0001CB44                            Obj09_NoReplace:
0001CB44 5249                       		addq.w	#1,a1
0001CB46 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CB4A 43E9 0040                  		lea	$40(a1),a1
0001CB4E 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CB52                            
0001CB52                            Obj09_GhostNotSolid:
0001CB52 4228 003A                  		clr.b	$3A(a0)
0001CB56 7800                       		moveq	#0,d4
0001CB58 4E75                       		rts	
0001CB5A                            ; End of function Obj09_ChkItems
0001CB5A                            
0001CB5A                            
0001CB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB5A                            
0001CB5A                            
0001CB5A                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CB5A 1028 0030                  		move.b	$30(a0),d0
0001CB5E 6600                       		bne.s	Obj09_GOAL
0001CB60 5328 0036                  		subq.b	#1,$36(a0)
0001CB64 6A00                       		bpl.s	loc_1BEA0
0001CB66 117C 0000 0036             		move.b	#0,$36(a0)
0001CB6C                            
0001CB6C                            loc_1BEA0:
0001CB6C 5328 0037                  		subq.b	#1,$37(a0)
0001CB70 6A00                       		bpl.s	locret_1BEAC
0001CB72 117C 0000 0037             		move.b	#0,$37(a0)
0001CB78                            
0001CB78                            locret_1BEAC:
0001CB78 4E75                       		rts	
0001CB7A                            ; ===========================================================================
0001CB7A                            
0001CB7A                            ; ===========================================================================
0001CB7A                            
0001CB7A                            Obj09_GOAL:
0001CB7A 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CB7E 6600                       		bne.s	Obj09_ChkGlass
0001CB80 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CB84 303C 00A8                  		move.w	#$A8,d0		; change item
0001CB88 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CB8E 4E75                       		rts	
0001CB90                            ; ===========================================================================
0001CB90                            
0001CB90                            ; ===========================================================================
0001CB90                            
0001CB90                            Obj09_ChkGlass:
0001CB90 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CB94 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CB96 0C00 002E                  		cmpi.b	#$2E,d0
0001CB9A 6700                       		beq.s	Obj09_Glass
0001CB9C 0C00 002F                  		cmpi.b	#$2F,d0
0001CBA0 6700                       		beq.s	Obj09_Glass
0001CBA2 0C00 0030                  		cmpi.b	#$30,d0
0001CBA6 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CBA8                            
0001CBA8                            Obj09_Glass:
0001CBA8 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CBAC 6600                       		bne.s	Obj09_GlassSnd
0001CBAE 14BC 0006                  		move.b	#6,(a2)
0001CBB2 2268 0032                  		movea.l	$32(a0),a1
0001CBB6 5389                       		subq.l	#1,a1
0001CBB8 2549 0004                  		move.l	a1,4(a2)
0001CBBC 1011                       		move.b	(a1),d0
0001CBBE 5200                       		addq.b	#1,d0		; change glass type when touched
0001CBC0 0C00 0030                  		cmpi.b	#$30,d0
0001CBC4 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CBC6 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CBC8                            
0001CBC8                            Obj09_GlassUpdate:
0001CBC8 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CBCC                            
0001CBCC                            Obj09_GlassSnd:
0001CBCC 303C 00BA                  		move.w	#$BA,d0
0001CBD0 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CBD6                            ; ===========================================================================
0001CBD6                            
0001CBD6                            Obj09_NoGlass:
0001CBD6 4E75                       		rts	
0001CBD8                            ; End of function Obj09_ChkItems2
0001CBD8                            
0001CBD8                            ; ===========================================================================
0001CBD8                            ; ---------------------------------------------------------------------------
0001CBD8                            ; Object 10 - blank
0001CBD8                            ; ---------------------------------------------------------------------------
0001CBD8                            
0001CBD8                            Obj10:					; XREF: Obj_Index
0001CBD8 4E75                       		rts	
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            ; Subroutine to	animate	level graphics
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            
0001CBDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBDA                            
0001CBDA                            
0001CBDA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CBDA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CBDE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CBE0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CBE6 6100 0000                  		bsr.w	AniArt_GiantRing
0001CBEA 7000                       		moveq	#0,d0
0001CBEC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CBF0 D040                       		add.w	d0,d0
0001CBF2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CBF6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CBFA                            ; ===========================================================================
0001CBFA                            
0001CBFA                            AniArt_Pause:
0001CBFA 4E75                       		rts	
0001CBFC                            ; End of function AniArt_Load
0001CBFC                            
0001CBFC                            ; ===========================================================================
0001CBFC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC00 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC04 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CC08 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CC0C                            ; ===========================================================================
0001CC0C                            ; ---------------------------------------------------------------------------
0001CC0C                            ; Animated pattern routine - Green Hill
0001CC0C                            ; ---------------------------------------------------------------------------
0001CC0C                            
0001CC0C                            AniArt_GHZ:				; XREF: AniArt_Index
0001CC0C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC10 6A00                       		bpl.s	loc_1C08A
0001CC12 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CC18 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CC1E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC22 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CC26 0240 0001                  		andi.w	#1,d0
0001CC2A 6700                       		beq.s	loc_1C078
0001CC2C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CC30                            
0001CC30                            loc_1C078:
0001CC30 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CC3A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CC3E 6000 0000                  		bra.w	LoadTiles
0001CC42                            ; ===========================================================================
0001CC42                            
0001CC42                            loc_1C08A:
0001CC42 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC46 6A00                       		bpl.s	loc_1C0C0
0001CC48 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CC4E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CC54 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CC58 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC5C 0240 0001                  		andi.w	#1,d0
0001CC60 6700                       		beq.s	loc_1C0AE
0001CC62 43E9 0200                  		lea	$200(a1),a1
0001CC66                            
0001CC66                            loc_1C0AE:
0001CC66 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CC70 323C 000F                  		move.w	#$F,d1
0001CC74 6000 0000                  		bra.w	LoadTiles
0001CC78                            ; ===========================================================================
0001CC78                            
0001CC78                            loc_1C0C0:
0001CC78 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC7C 6A00                       		bpl.s	locret_1C10C
0001CC7E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC84 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC88 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC8C 0240 0003                  		andi.w	#3,d0
0001CC90 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CC94 0800 0000                  		btst	#0,d0
0001CC98 6600                       		bne.s	loc_1C0E8
0001CC9A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CCA0                            
0001CCA0                            loc_1C0E8:
0001CCA0 EF48                       		lsl.w	#7,d0
0001CCA2 3200                       		move.w	d0,d1
0001CCA4 D040                       		add.w	d0,d0
0001CCA6 D041                       		add.w	d1,d0
0001CCA8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CCB2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CCB8 43F1 0000                  		lea	(a1,d0.w),a1
0001CCBC 323C 000B                  		move.w	#$B,d1
0001CCC0 6100 0000                  		bsr.w	LoadTiles
0001CCC4                            
0001CCC4                            locret_1C10C:
0001CCC4 4E75                       		rts	
0001CCC6                            ; ===========================================================================
0001CCC6 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CCCA                            ; ===========================================================================
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            ; Animated pattern routine - Marble
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            
0001CCCA                            AniArt_MZ:				; XREF: AniArt_Index
0001CCCA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCCE 6A00                       		bpl.s	loc_1C150
0001CCD0 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CCD6 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CCDC 7000                       		moveq	#0,d0
0001CCDE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CCE2 5200                       		addq.b	#1,d0
0001CCE4 0C00 0003                  		cmpi.b	#3,d0
0001CCE8 6600                       		bne.s	loc_1C134
0001CCEA 7000                       		moveq	#0,d0
0001CCEC                            
0001CCEC                            loc_1C134:
0001CCEC 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CCF0 C0FC 0100                  		mulu.w	#$100,d0
0001CCF4 D2C0                       		adda.w	d0,a1
0001CCF6 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CD00 323C 0007                  		move.w	#7,d1
0001CD04 6100 0000                  		bsr.w	LoadTiles
0001CD08                            
0001CD08                            loc_1C150:
0001CD08 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD0C 6A00                       		bpl.s	loc_1C1AE
0001CD0E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CD14 7000                       		moveq	#0,d0
0001CD16 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD1A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CD20 EE58                       		ror.w	#7,d0
0001CD22 D8C0                       		adda.w	d0,a4
0001CD24 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CD2E 7600                       		moveq	#0,d3
0001CD30 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CD34 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD38 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CD3C 343C 0003                  		move.w	#3,d2
0001CD40                            
0001CD40                            loc_1C188:
0001CD40 3003                       		move.w	d3,d0
0001CD42 D040                       		add.w	d0,d0
0001CD44 0240 001E                  		andi.w	#$1E,d0
0001CD48 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CD4E 3033 0000                  		move.w	(a3,d0.w),d0
0001CD52 47F3 0000                  		lea	(a3,d0.w),a3
0001CD56 224C                       		movea.l	a4,a1
0001CD58 323C 001F                  		move.w	#$1F,d1
0001CD5C 4E93                       		jsr	(a3)
0001CD5E 5843                       		addq.w	#4,d3
0001CD60 51CA FFDE                  		dbf	d2,loc_1C188
0001CD64 4E75                       		rts	
0001CD66                            ; ===========================================================================
0001CD66                            
0001CD66                            loc_1C1AE:
0001CD66 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD6A 6A00 0000                  		bpl.w	locret_1C1EA
0001CD6E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CD74 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CD7A 7000                       		moveq	#0,d0
0001CD7C 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CD80 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CD84 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CD8A C0FC 00C0                  		mulu.w	#$C0,d0
0001CD8E D2C0                       		adda.w	d0,a1
0001CD90 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CD9A 323C 0005                  		move.w	#5,d1
0001CD9E 6000 0000                  		bra.w	LoadTiles
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            locret_1C1EA:
0001CDA2 4E75                       		rts	
0001CDA4                            ; ===========================================================================
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            ; Animated pattern routine - Scrap Brain
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            
0001CDA4                            AniArt_SBZ:				; XREF: AniArt_Index
0001CDA4 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CDA8 6700                       		beq.s	loc_1C1F8
0001CDAA 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CDAE 6000                       		bra.s	loc_1C250
0001CDB0                            ; ===========================================================================
0001CDB0                            
0001CDB0                            loc_1C1F8:
0001CDB0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CDB4 6A00                       		bpl.s	loc_1C250
0001CDB6 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CDBC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CDC2 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CDCC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDD0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CDD4 0240 0007                  		andi.w	#7,d0
0001CDD8 6700                       		beq.s	loc_1C234
0001CDDA 5340                       		subq.w	#1,d0
0001CDDC C0FC 0180                  		mulu.w	#$180,d0
0001CDE0 43F1 0000                  		lea	(a1,d0.w),a1
0001CDE4 323C 000B                  		move.w	#$B,d1
0001CDE8 6000 0000                  		bra.w	LoadTiles
0001CDEC                            ; ===========================================================================
0001CDEC                            
0001CDEC                            loc_1C234:
0001CDEC 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CDF2                            
0001CDF2                            loc_1C23A:
0001CDF2 323C 0005                  		move.w	#5,d1
0001CDF6 6100 0000                  		bsr.w	LoadTiles
0001CDFA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE00 323C 0005                  		move.w	#5,d1
0001CE04 6000 0000                  		bra.w	LoadTiles
0001CE08                            ; ===========================================================================
0001CE08                            
0001CE08                            loc_1C250:
0001CE08 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CE0C 6700                       		beq.s	loc_1C25C
0001CE0E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE12 6000                       		bra.s	locret_1C2A0
0001CE14                            ; ===========================================================================
0001CE14                            
0001CE14                            loc_1C25C:
0001CE14 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE18 6A00                       		bpl.s	locret_1C2A0
0001CE1A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE20 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE26 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CE30 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE34 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE38 0240 0007                  		andi.w	#7,d0
0001CE3C 6700                       		beq.s	loc_1C298
0001CE3E 5340                       		subq.w	#1,d0
0001CE40 C0FC 0180                  		mulu.w	#$180,d0
0001CE44 43F1 0000                  		lea	(a1,d0.w),a1
0001CE48 323C 000B                  		move.w	#$B,d1
0001CE4C 6000 0000                  		bra.w	LoadTiles
0001CE50                            ; ===========================================================================
0001CE50                            
0001CE50                            loc_1C298:
0001CE50 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CE56 609A                       		bra.s	loc_1C23A
0001CE58                            ; ===========================================================================
0001CE58                            
0001CE58                            locret_1C2A0:
0001CE58 4E75                       		rts	
0001CE5A                            ; ===========================================================================
0001CE5A                            ; ---------------------------------------------------------------------------
0001CE5A                            ; Animated pattern routine - ending sequence
0001CE5A                            ; ---------------------------------------------------------------------------
0001CE5A                            
0001CE5A                            AniArt_Ending:				; XREF: AniArt_Index
0001CE5A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE5E 6A00                       		bpl.s	loc_1C2F4
0001CE60 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE66 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CE6C 45F8 9400                  		lea	($FFFF9400).w,a2
0001CE70 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE74 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE78 0240 0001                  		andi.w	#1,d0
0001CE7C 6700                       		beq.s	loc_1C2CE
0001CE7E 43E9 0200                  		lea	$200(a1),a1
0001CE82 45EA 0200                  		lea	$200(a2),a2
0001CE86                            
0001CE86                            loc_1C2CE:
0001CE86 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CE90 323C 000F                  		move.w	#$F,d1
0001CE94 6100 0000                  		bsr.w	LoadTiles
0001CE98 224A                       		movea.l	a2,a1
0001CE9A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CEA4 323C 000F                  		move.w	#$F,d1
0001CEA8 6000 0000                  		bra.w	LoadTiles
0001CEAC                            ; ===========================================================================
0001CEAC                            
0001CEAC                            loc_1C2F4:
0001CEAC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEB0 6A00                       		bpl.s	loc_1C33C
0001CEB2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CEB8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CEBC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CEC0 0240 0007                  		andi.w	#7,d0
0001CEC4 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CEC8 EF48                       		lsl.w	#7,d0
0001CECA 3200                       		move.w	d0,d1
0001CECC D040                       		add.w	d0,d0
0001CECE D041                       		add.w	d1,d0
0001CED0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CEDA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CEE0 43F1 0000                  		lea	(a1,d0.w),a1
0001CEE4 323C 000B                  		move.w	#$B,d1
0001CEE8 6000 0000                  		bra.w	LoadTiles
0001CEEC                            ; ===========================================================================
0001CEEC 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CEF4                            ; ===========================================================================
0001CEF4                            
0001CEF4                            loc_1C33C:
0001CEF4 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CEF8 6A00                       		bpl.s	loc_1C37A
0001CEFA 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CF00 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CF04 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CF08 0240 0003                  		andi.w	#3,d0
0001CF0C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CF10 E148                       		lsl.w	#8,d0
0001CF12 D040                       		add.w	d0,d0
0001CF14 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CF1E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CF22 43F1 0000                  		lea	(a1,d0.w),a1
0001CF26 323C 000F                  		move.w	#$F,d1
0001CF2A 6000 0000                  		bra.w	LoadTiles
0001CF2E                            ; ===========================================================================
0001CF2E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CF32                            ; ===========================================================================
0001CF32                            
0001CF32                            loc_1C37A:
0001CF32 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CF36 6A00                       		bpl.s	locret_1C3B4
0001CF38 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CF3E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CF42 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CF46 0240 0003                  		andi.w	#3,d0
0001CF4A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CF4E E148                       		lsl.w	#8,d0
0001CF50 D040                       		add.w	d0,d0
0001CF52 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CF5C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CF60 43F1 0000                  		lea	(a1,d0.w),a1
0001CF64 323C 000F                  		move.w	#$F,d1
0001CF68 6000 0000                  		bra.w	LoadTiles
0001CF6C                            ; ===========================================================================
0001CF6C                            
0001CF6C                            locret_1C3B4:
0001CF6C 4E75                       		rts	
0001CF6E                            ; ===========================================================================
0001CF6E                            
0001CF6E                            AniArt_none:				; XREF: AniArt_Index
0001CF6E 4E75                       		rts	
0001CF70                            
0001CF70                            ; ---------------------------------------------------------------------------
0001CF70                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CF70                            ; ---------------------------------------------------------------------------
0001CF70                            
0001CF70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF70                            
0001CF70                            
0001CF70                            LoadTiles:
0001CF70 2C99                       		move.l	(a1)+,(a6)
0001CF72 2C99                       		move.l	(a1)+,(a6)
0001CF74 2C99                       		move.l	(a1)+,(a6)
0001CF76 2C99                       		move.l	(a1)+,(a6)
0001CF78 2C99                       		move.l	(a1)+,(a6)
0001CF7A 2C99                       		move.l	(a1)+,(a6)
0001CF7C 2C99                       		move.l	(a1)+,(a6)
0001CF7E 2C99                       		move.l	(a1)+,(a6)
0001CF80 51C9 FFEE                  		dbf	d1,LoadTiles
0001CF84 4E75                       		rts	
0001CF86                            ; End of function LoadTiles
0001CF86                            
0001CF86                            ; ===========================================================================
0001CF86                            ; ---------------------------------------------------------------------------
0001CF86                            ; Animated pattern routine - more Marble Zone
0001CF86                            ; ---------------------------------------------------------------------------
0001CF86 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CF8A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CF8E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CF92 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CF96 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CF9A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CF9E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CFA2 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CFA6                            ; ===========================================================================
0001CFA6                            
0001CFA6                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CFA6 2C91                       		move.l	(a1),(a6)
0001CFA8 43E9 0010                  		lea	$10(a1),a1
0001CFAC 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CFB0 4E75                       		rts	
0001CFB2                            ; ===========================================================================
0001CFB2                            
0001CFB2                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CFB2 2029 0002                  		move.l	2(a1),d0
0001CFB6 1029 0001                  		move.b	1(a1),d0
0001CFBA E098                       		ror.l	#8,d0
0001CFBC 2C80                       		move.l	d0,(a6)
0001CFBE 43E9 0010                  		lea	$10(a1),a1
0001CFC2 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CFC6 4E75                       		rts	
0001CFC8                            ; ===========================================================================
0001CFC8                            
0001CFC8                            loc_1C410:				; XREF: AniArt_MZextra
0001CFC8 2CA9 0002                  		move.l	2(a1),(a6)
0001CFCC 43E9 0010                  		lea	$10(a1),a1
0001CFD0 51C9 FFF6                  		dbf	d1,loc_1C410
0001CFD4 4E75                       		rts	
0001CFD6                            ; ===========================================================================
0001CFD6                            
0001CFD6                            loc_1C41E:				; XREF: AniArt_MZextra
0001CFD6 2029 0004                  		move.l	4(a1),d0
0001CFDA 1029 0003                  		move.b	3(a1),d0
0001CFDE E098                       		ror.l	#8,d0
0001CFE0 2C80                       		move.l	d0,(a6)
0001CFE2 43E9 0010                  		lea	$10(a1),a1
0001CFE6 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CFEA 4E75                       		rts	
0001CFEC                            ; ===========================================================================
0001CFEC                            
0001CFEC                            loc_1C434:				; XREF: AniArt_MZextra
0001CFEC 2CA9 0004                  		move.l	4(a1),(a6)
0001CFF0 43E9 0010                  		lea	$10(a1),a1
0001CFF4 51C9 FFF6                  		dbf	d1,loc_1C434
0001CFF8 4E75                       		rts	
0001CFFA                            ; ===========================================================================
0001CFFA                            
0001CFFA                            loc_1C442:				; XREF: AniArt_MZextra
0001CFFA 2029 0006                  		move.l	6(a1),d0
0001CFFE 1029 0005                  		move.b	5(a1),d0
0001D002 E098                       		ror.l	#8,d0
0001D004 2C80                       		move.l	d0,(a6)
0001D006 43E9 0010                  		lea	$10(a1),a1
0001D00A 51C9 FFEE                  		dbf	d1,loc_1C442
0001D00E 4E75                       		rts	
0001D010                            ; ===========================================================================
0001D010                            
0001D010                            loc_1C458:				; XREF: AniArt_MZextra
0001D010 2CA9 0006                  		move.l	6(a1),(a6)
0001D014 43E9 0010                  		lea	$10(a1),a1
0001D018 51C9 FFF6                  		dbf	d1,loc_1C458
0001D01C 4E75                       		rts	
0001D01E                            ; ===========================================================================
0001D01E                            
0001D01E                            loc_1C466:				; XREF: AniArt_MZextra
0001D01E 2029 0008                  		move.l	8(a1),d0
0001D022 1029 0007                  		move.b	7(a1),d0
0001D026 E098                       		ror.l	#8,d0
0001D028 2C80                       		move.l	d0,(a6)
0001D02A 43E9 0010                  		lea	$10(a1),a1
0001D02E 51C9 FFEE                  		dbf	d1,loc_1C466
0001D032 4E75                       		rts	
0001D034                            ; ===========================================================================
0001D034                            
0001D034                            loc_1C47C:				; XREF: AniArt_MZextra
0001D034 2CA9 0008                  		move.l	8(a1),(a6)
0001D038 43E9 0010                  		lea	$10(a1),a1
0001D03C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D040 4E75                       		rts	
0001D042                            ; ===========================================================================
0001D042                            
0001D042                            loc_1C48A:				; XREF: AniArt_MZextra
0001D042 2029 000A                  		move.l	$A(a1),d0
0001D046 1029 0009                  		move.b	9(a1),d0
0001D04A E098                       		ror.l	#8,d0
0001D04C 2C80                       		move.l	d0,(a6)
0001D04E 43E9 0010                  		lea	$10(a1),a1
0001D052 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D056 4E75                       		rts	
0001D058                            ; ===========================================================================
0001D058                            
0001D058                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D058 2CA9 000A                  		move.l	$A(a1),(a6)
0001D05C 43E9 0010                  		lea	$10(a1),a1
0001D060 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D064 4E75                       		rts	
0001D066                            ; ===========================================================================
0001D066                            
0001D066                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D066 2029 000C                  		move.l	$C(a1),d0
0001D06A 1029 000B                  		move.b	$B(a1),d0
0001D06E E098                       		ror.l	#8,d0
0001D070 2C80                       		move.l	d0,(a6)
0001D072 43E9 0010                  		lea	$10(a1),a1
0001D076 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D07A 4E75                       		rts	
0001D07C                            ; ===========================================================================
0001D07C                            
0001D07C                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D07C 2CA9 000C                  		move.l	$C(a1),(a6)
0001D080 43E9 0010                  		lea	$10(a1),a1
0001D084 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D088 4E75                       		rts	
0001D08A                            ; ===========================================================================
0001D08A                            
0001D08A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D08A 2029 000C                  		move.l	$C(a1),d0
0001D08E E198                       		rol.l	#8,d0
0001D090 1011                       		move.b	0(a1),d0
0001D092 2C80                       		move.l	d0,(a6)
0001D094 43E9 0010                  		lea	$10(a1),a1
0001D098 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D09C 4E75                       		rts	
0001D09E                            ; ===========================================================================
0001D09E                            
0001D09E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D09E 3CA9 000E                  		move.w	$E(a1),(a6)
0001D0A2 3C91                       		move.w	0(a1),(a6)
0001D0A4 43E9 0010                  		lea	$10(a1),a1
0001D0A8 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D0AC 4E75                       		rts	
0001D0AE                            ; ===========================================================================
0001D0AE                            
0001D0AE                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D0AE 2011                       		move.l	0(a1),d0
0001D0B0 1029 000F                  		move.b	$F(a1),d0
0001D0B4 E098                       		ror.l	#8,d0
0001D0B6 2C80                       		move.l	d0,(a6)
0001D0B8 43E9 0010                  		lea	$10(a1),a1
0001D0BC 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D0C0 4E75                       		rts	
0001D0C2                            
0001D0C2                            ; ---------------------------------------------------------------------------
0001D0C2                            ; Animated pattern routine - giant ring
0001D0C2                            ; ---------------------------------------------------------------------------
0001D0C2                            
0001D0C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0C2                            
0001D0C2                            
0001D0C2                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D0C2 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D0C6 6600                       		bne.s	loc_1C518
0001D0C8 4E75                       		rts	
0001D0CA                            ; ===========================================================================
0001D0CA                            
0001D0CA                            loc_1C518:
0001D0CA 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D0D0 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D0D6 7000                       		moveq	#0,d0
0001D0D8 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D0DC 43F1 0000                  		lea	(a1,d0.w),a1
0001D0E0 0640 8000                  		addi.w	#$8000,d0
0001D0E4 E588                       		lsl.l	#2,d0
0001D0E6 E448                       		lsr.w	#2,d0
0001D0E8 0040 4000                  		ori.w	#$4000,d0
0001D0EC 4840                       		swap	d0
0001D0EE 2D40 0004                  		move.l	d0,4(a6)
0001D0F2 323C 000D                  		move.w	#$D,d1
0001D0F6 6000 FE78                  		bra.w	LoadTiles
0001D0FA                            ; End of function AniArt_GiantRing
0001D0FA                            
0001D0FA                            ; ===========================================================================
0001D0FA                            ; ---------------------------------------------------------------------------
0001D0FA                            ; Object 21 - SCORE, TIME, RINGS
0001D0FA                            ; ---------------------------------------------------------------------------
0001D0FA                            
0001D0FA                            Obj21:					; XREF: Obj_Index
0001D0FA 7000                       		moveq	#0,d0
0001D0FC 1028 0024                  		move.b	$24(a0),d0
0001D100 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D104 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D108                            ; ===========================================================================
0001D108 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D10A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D10C                            ; ===========================================================================
0001D10C                            
0001D10C                            Obj21_Main:				; XREF: Obj21_Main
0001D10C 5428 0024                  		addq.b	#2,$24(a0)
0001D110 317C 0090 0008             		move.w	#$90,8(a0)
0001D116 317C 0108 000A             		move.w	#$108,$A(a0)
0001D11C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D124 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D12A 117C 0000 0001             		move.b	#0,1(a0)
0001D130 117C 0000 0018             		move.b	#0,$18(a0)
0001D136                            
0001D136                            Obj21_Flash:				; XREF: Obj21_Main
0001D136 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D13A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D13C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D140 4EF9 0000 E002             		jmp	DisplaySprite
0001D146                            ; ===========================================================================
0001D146                            
0001D146                            Obj21_Flash2:
0001D146 7000                       		moveq	#0,d0
0001D148 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D14E 6600                       		bne.s	Obj21_Display
0001D150 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D152 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D158 6600                       		bne.s	Obj21_Display	; if not, branch
0001D15A 5440                       		addq.w	#2,d0		; make time counter flash red
0001D15C                            
0001D15C                            Obj21_Display:
0001D15C 1140 001A                  		move.b	d0,$1A(a0)
0001D160 4EF9 0000 E002             		jmp	DisplaySprite
0001D166                            ; ===========================================================================
0001D166                            ; ---------------------------------------------------------------------------
0001D166                            ; Sprite mappings - SCORE, TIME, RINGS
0001D166                            ; ---------------------------------------------------------------------------
0001D166                            Map_obj21:
0001D166                            	include "_maps\obj21.asm"
0001D166                            ; ---------------------------------------------------------------------------
0001D166                            ; Sprite mappings - SCORE, TIME, RINGS
0001D166                            ; ---------------------------------------------------------------------------
0001D166 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D16A 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D16E 0A                         byte_1C5BC:	dc.b $A
0001D16F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D174 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D179 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D17E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D183 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D188 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D18D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D192 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D197 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D19C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D1A1 00                         		dc.b 0
0001D1A2 0A                         byte_1C5F0:	dc.b $A
0001D1A3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D1A8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D1AD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D1B2 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D1B7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D1BC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D1C1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D1C6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D1CB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D1D0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D1D5 00                         		dc.b 0
0001D1D6 0A                         byte_1C624:	dc.b $A
0001D1D7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D1DC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D1E1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D1E6 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D1EB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D1F0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D1F5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D1FA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D1FF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D204 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D209 00                         		dc.b 0
0001D20A 0A                         byte_1C658:	dc.b $A
0001D20B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D210 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D215 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D21A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D21F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D224 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D229 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D22E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D233 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D238 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D23E 00                         		even
0001D23E 00                         		even
0001D23E                            
0001D23E                            ; ---------------------------------------------------------------------------
0001D23E                            ; Add points subroutine
0001D23E                            ; ---------------------------------------------------------------------------
0001D23E                            
0001D23E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D23E                            
0001D23E                            
0001D23E                            AddPoints:
0001D23E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D244 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D248 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D24C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D24E 223C 000F 423F             		move.l	#999999,d1
0001D254 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D256 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D25A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D25C 2481                       		move.l	d1,(a2)
0001D25E                            
0001D25E                            loc_1C6AC:
0001D25E 2013                       		move.l	(a3),d0
0001D260 B092                       		cmp.l	(a2),d0
0001D262 6500 0000                  		bcs.w	locret_1C6B6
0001D266 2480                       		move.l	d0,(a2)
0001D268                            
0001D268                            locret_1C6B6:
0001D268 4E75                       		rts	
0001D26A                            ; End of function AddPoints
0001D26A                            
0001D26A                            ; ---------------------------------------------------------------------------
0001D26A                            ; Subroutine to	update the HUD
0001D26A                            ; ---------------------------------------------------------------------------
0001D26A                            
0001D26A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D26A                            
0001D26A                            
0001D26A                            HudUpdate:
0001D26A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D26E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D272 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D276 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D278 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D27C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D282 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D286 6100 0000                  		bsr.w	Hud_Score
0001D28A                            
0001D28A                            Hud_ChkRings:
0001D28A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D28E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D290 6A00                       		bpl.s	loc_1C6E4
0001D292 6100 0000                  		bsr.w	Hud_LoadZero
0001D296                            
0001D296                            loc_1C6E4:
0001D296 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D29A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D2A0 7200                       		moveq	#0,d1
0001D2A2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D2A6 6100 0000                  		bsr.w	Hud_Rings
0001D2AA                            
0001D2AA                            Hud_ChkTime:
0001D2AA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D2AE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D2B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D2B4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D2B6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D2BA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D2C0 6700                       		beq.s	TimeOver	; if yes, branch
0001D2C2 5221                       		addq.b	#1,-(a1)
0001D2C4 0C11 003C                  		cmpi.b	#60,(a1)
0001D2C8 6500                       		bcs.s	Hud_ChkLives
0001D2CA 12BC 0000                  		move.b	#0,(a1)
0001D2CE 5221                       		addq.b	#1,-(a1)
0001D2D0 0C11 003C                  		cmpi.b	#60,(a1)
0001D2D4 6500                       		bcs.s	loc_1C734
0001D2D6 12BC 0000                  		move.b	#0,(a1)
0001D2DA 5221                       		addq.b	#1,-(a1)
0001D2DC 0C11 0009                  		cmpi.b	#9,(a1)
0001D2E0 6500                       		bcs.s	loc_1C734
0001D2E2 12BC 0009                  		move.b	#9,(a1)
0001D2E6                            
0001D2E6                            loc_1C734:
0001D2E6 203C 5E40 0003             		move.l	#$5E400003,d0
0001D2EC 7200                       		moveq	#0,d1
0001D2EE 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D2F2 6100 0000                  		bsr.w	Hud_Mins
0001D2F6 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D2FC 7200                       		moveq	#0,d1
0001D2FE 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D302 6100 0000                  		bsr.w	Hud_Secs
0001D306                            
0001D306                            Hud_ChkLives:
0001D306 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D30A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D30C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D310 6100 0000                  		bsr.w	Hud_Lives
0001D314                            
0001D314                            Hud_ChkBonus:
0001D314 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D318 6700                       		beq.s	Hud_End		; if not, branch
0001D31A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D31E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D328 7200                       		moveq	#0,d1
0001D32A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D32E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D332 7200                       		moveq	#0,d1
0001D334 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D338 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D33C                            
0001D33C                            Hud_End:
0001D33C 4E75                       		rts	
0001D33E                            ; ===========================================================================
0001D33E                            
0001D33E                            TimeOver:				; XREF: Hud_ChkTime
0001D33E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D342 41F8 D000                  		lea	($FFFFD000).w,a0
0001D346 2448                       		movea.l	a0,a2
0001D348 6100 E950                  		bsr.w	KillSonic
0001D34C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D352 4E75                       		rts	
0001D354                            ; ===========================================================================
0001D354                            
0001D354                            HudDebug:				; XREF: HudUpdate
0001D354 6100 0000                  		bsr.w	HudDb_XY
0001D358 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D35C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D35E 6A00                       		bpl.s	HudDb_Rings
0001D360 6100 0000                  		bsr.w	Hud_LoadZero
0001D364                            
0001D364                            HudDb_Rings:
0001D364 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D368 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D36E 7200                       		moveq	#0,d1
0001D370 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D374 6100 0000                  		bsr.w	Hud_Rings
0001D378                            
0001D378                            HudDb_ObjCount:
0001D378 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D37E 7200                       		moveq	#0,d1
0001D380 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D384 6100 0000                  		bsr.w	Hud_Secs
0001D388 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D38C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D38E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D392 6100 0000                  		bsr.w	Hud_Lives
0001D396                            
0001D396                            HudDb_ChkBonus:
0001D396 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D39A 6700                       		beq.s	HudDb_End	; if not, branch
0001D39C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3A0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D3AA 7200                       		moveq	#0,d1
0001D3AC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3B0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3B4 7200                       		moveq	#0,d1
0001D3B6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3BA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3BE                            
0001D3BE                            HudDb_End:
0001D3BE 4E75                       		rts	
0001D3C0                            ; End of function HudUpdate
0001D3C0                            
0001D3C0                            ; ---------------------------------------------------------------------------
0001D3C0                            ; Subroutine to	load "0" on the	HUD
0001D3C0                            ; ---------------------------------------------------------------------------
0001D3C0                            
0001D3C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3C0                            
0001D3C0                            
0001D3C0                            Hud_LoadZero:				; XREF: HudUpdate
0001D3C0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D3CA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D3CE 343C 0002                  		move.w	#2,d2
0001D3D2 6000                       		bra.s	loc_1C83E
0001D3D4                            ; End of function Hud_LoadZero
0001D3D4                            
0001D3D4                            ; ---------------------------------------------------------------------------
0001D3D4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D3D4                            ; ---------------------------------------------------------------------------
0001D3D4                            
0001D3D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3D4                            
0001D3D4                            
0001D3D4                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D3D4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D3DA 6100 0000                  		bsr.w	Hud_Lives
0001D3DE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D3E8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D3EC 343C 000E                  		move.w	#$E,d2
0001D3F0                            
0001D3F0                            loc_1C83E:				; XREF: Hud_LoadZero
0001D3F0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D3F4                            
0001D3F4                            loc_1C842:
0001D3F4 323C 000F                  		move.w	#$F,d1
0001D3F8 101A                       		move.b	(a2)+,d0
0001D3FA 6B00                       		bmi.s	loc_1C85E
0001D3FC 4880                       		ext.w	d0
0001D3FE EB48                       		lsl.w	#5,d0
0001D400 47F1 0000                  		lea	(a1,d0.w),a3
0001D404                            
0001D404                            loc_1C852:
0001D404 2C9B                       		move.l	(a3)+,(a6)
0001D406 51C9 FFFC                  		dbf	d1,loc_1C852
0001D40A                            
0001D40A                            loc_1C858:
0001D40A 51CA FFE8                  		dbf	d2,loc_1C842
0001D40E                            
0001D40E 4E75                       		rts	
0001D410                            ; ===========================================================================
0001D410                            
0001D410                            loc_1C85E:
0001D410 2CBC 0000 0000             		move.l	#0,(a6)
0001D416 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D41A                            
0001D41A 60EE                       		bra.s	loc_1C858
0001D41C                            ; End of function Hud_Base
0001D41C                            
0001D41C                            ; ===========================================================================
0001D41C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D428 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D42C                            ; ---------------------------------------------------------------------------
0001D42C                            ; Subroutine to	load debug mode	numbers	patterns
0001D42C                            ; ---------------------------------------------------------------------------
0001D42C                            
0001D42C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D42C                            
0001D42C                            
0001D42C                            HudDb_XY:				; XREF: HudDebug
0001D42C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D436 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D43A 4841                       		swap	d1
0001D43C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D440 6100                       		bsr.s	HudDb_XY2
0001D442 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D446 4841                       		swap	d1
0001D448 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D44C                            ; End of function HudDb_XY
0001D44C                            
0001D44C                            
0001D44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D44C                            
0001D44C                            
0001D44C                            HudDb_XY2:
0001D44C 7C07                       		moveq	#7,d6
0001D44E 43F9 0000 05E2             		lea	(Art_Text).l,a1
0001D454                            
0001D454                            HudDb_XYLoop:
0001D454 E959                       		rol.w	#4,d1
0001D456 3401                       		move.w	d1,d2
0001D458 0242 000F                  		andi.w	#$F,d2
0001D45C 0C42 000A                  		cmpi.w	#$A,d2
0001D460 6500                       		bcs.s	loc_1C8B2
0001D462 5E42                       		addq.w	#7,d2
0001D464                            
0001D464                            loc_1C8B2:
0001D464 EB4A                       		lsl.w	#5,d2
0001D466 47F1 2000                  		lea	(a1,d2.w),a3
0001D46A 2C9B                       		move.l	(a3)+,(a6)
0001D46C 2C9B                       		move.l	(a3)+,(a6)
0001D46E 2C9B                       		move.l	(a3)+,(a6)
0001D470 2C9B                       		move.l	(a3)+,(a6)
0001D472 2C9B                       		move.l	(a3)+,(a6)
0001D474 2C9B                       		move.l	(a3)+,(a6)
0001D476 2C9B                       		move.l	(a3)+,(a6)
0001D478 2C9B                       		move.l	(a3)+,(a6)
0001D47A 4841                       		swap	d1
0001D47C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D480                            
0001D480 4E75                       		rts	
0001D482                            ; End of function HudDb_XY2
0001D482                            
0001D482                            ; ---------------------------------------------------------------------------
0001D482                            ; Subroutine to	load rings numbers patterns
0001D482                            ; ---------------------------------------------------------------------------
0001D482                            
0001D482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D482                            
0001D482                            
0001D482                            Hud_Rings:				; XREF: HudUpdate
0001D482 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D488 7C02                       		moveq	#2,d6
0001D48A 6000                       		bra.s	Hud_LoadArt
0001D48C                            ; End of function Hud_Rings
0001D48C                            
0001D48C                            ; ---------------------------------------------------------------------------
0001D48C                            ; Subroutine to	load score numbers patterns
0001D48C                            ; ---------------------------------------------------------------------------
0001D48C                            
0001D48C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D48C                            
0001D48C                            
0001D48C                            Hud_Score:				; XREF: HudUpdate
0001D48C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D492 7C05                       		moveq	#5,d6
0001D494                            
0001D494                            Hud_LoadArt:
0001D494 7800                       		moveq	#0,d4
0001D496 43FA 0000                  		lea	Art_Hud(pc),a1
0001D49A                            
0001D49A                            Hud_ScoreLoop:
0001D49A 7400                       		moveq	#0,d2
0001D49C 261A                       		move.l	(a2)+,d3
0001D49E                            
0001D49E                            loc_1C8EC:
0001D49E 9283                       		sub.l	d3,d1
0001D4A0 6500                       		bcs.s	loc_1C8F4
0001D4A2 5242                       		addq.w	#1,d2
0001D4A4 60F8                       		bra.s	loc_1C8EC
0001D4A6                            ; ===========================================================================
0001D4A6                            
0001D4A6                            loc_1C8F4:
0001D4A6 D283                       		add.l	d3,d1
0001D4A8 4A42                       		tst.w	d2
0001D4AA 6700                       		beq.s	loc_1C8FE
0001D4AC 383C 0001                  		move.w	#1,d4
0001D4B0                            
0001D4B0                            loc_1C8FE:
0001D4B0 4A44                       		tst.w	d4
0001D4B2 6700                       		beq.s	loc_1C92C
0001D4B4 ED4A                       		lsl.w	#6,d2
0001D4B6 2D40 0004                  		move.l	d0,4(a6)
0001D4BA 47F1 2000                  		lea	(a1,d2.w),a3
0001D4BE 2C9B                       		move.l	(a3)+,(a6)
0001D4C0 2C9B                       		move.l	(a3)+,(a6)
0001D4C2 2C9B                       		move.l	(a3)+,(a6)
0001D4C4 2C9B                       		move.l	(a3)+,(a6)
0001D4C6 2C9B                       		move.l	(a3)+,(a6)
0001D4C8 2C9B                       		move.l	(a3)+,(a6)
0001D4CA 2C9B                       		move.l	(a3)+,(a6)
0001D4CC 2C9B                       		move.l	(a3)+,(a6)
0001D4CE 2C9B                       		move.l	(a3)+,(a6)
0001D4D0 2C9B                       		move.l	(a3)+,(a6)
0001D4D2 2C9B                       		move.l	(a3)+,(a6)
0001D4D4 2C9B                       		move.l	(a3)+,(a6)
0001D4D6 2C9B                       		move.l	(a3)+,(a6)
0001D4D8 2C9B                       		move.l	(a3)+,(a6)
0001D4DA 2C9B                       		move.l	(a3)+,(a6)
0001D4DC 2C9B                       		move.l	(a3)+,(a6)
0001D4DE                            
0001D4DE                            loc_1C92C:
0001D4DE 0680 0040 0000             		addi.l	#$400000,d0
0001D4E4 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D4E8                            
0001D4E8 4E75                       		rts	
0001D4EA                            ; End of function Hud_Score
0001D4EA                            
0001D4EA                            ; ---------------------------------------------------------------------------
0001D4EA                            ; Subroutine to	load countdown numbers on the continue screen
0001D4EA                            ; ---------------------------------------------------------------------------
0001D4EA                            
0001D4EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4EA                            
0001D4EA                            
0001D4EA                            ContScrCounter:				; XREF: ContinueScreen
0001D4EA 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D4F4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D4FA 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D500 7C01                       		moveq	#1,d6
0001D502 7800                       		moveq	#0,d4
0001D504 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D508                            
0001D508                            ContScr_Loop:
0001D508 7400                       		moveq	#0,d2
0001D50A 261A                       		move.l	(a2)+,d3
0001D50C                            
0001D50C                            loc_1C95A:
0001D50C 9283                       		sub.l	d3,d1
0001D50E 6500                       		bcs.s	loc_1C962
0001D510 5242                       		addq.w	#1,d2
0001D512 60F8                       		bra.s	loc_1C95A
0001D514                            ; ===========================================================================
0001D514                            
0001D514                            loc_1C962:
0001D514 D283                       		add.l	d3,d1
0001D516 ED4A                       		lsl.w	#6,d2
0001D518 47F1 2000                  		lea	(a1,d2.w),a3
0001D51C 2C9B                       		move.l	(a3)+,(a6)
0001D51E 2C9B                       		move.l	(a3)+,(a6)
0001D520 2C9B                       		move.l	(a3)+,(a6)
0001D522 2C9B                       		move.l	(a3)+,(a6)
0001D524 2C9B                       		move.l	(a3)+,(a6)
0001D526 2C9B                       		move.l	(a3)+,(a6)
0001D528 2C9B                       		move.l	(a3)+,(a6)
0001D52A 2C9B                       		move.l	(a3)+,(a6)
0001D52C 2C9B                       		move.l	(a3)+,(a6)
0001D52E 2C9B                       		move.l	(a3)+,(a6)
0001D530 2C9B                       		move.l	(a3)+,(a6)
0001D532 2C9B                       		move.l	(a3)+,(a6)
0001D534 2C9B                       		move.l	(a3)+,(a6)
0001D536 2C9B                       		move.l	(a3)+,(a6)
0001D538 2C9B                       		move.l	(a3)+,(a6)
0001D53A 2C9B                       		move.l	(a3)+,(a6)
0001D53C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D540                            
0001D540 4E75                       		rts	
0001D542                            ; End of function ContScrCounter
0001D542                            
0001D542                            ; ===========================================================================
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            ; HUD counter sizes
0001D542                            ; ---------------------------------------------------------------------------
0001D542 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D546 0000 2710                  Hud_10000:	dc.l 10000
0001D54A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D54E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D552 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D556 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D55A                            
0001D55A                            ; ---------------------------------------------------------------------------
0001D55A                            ; Subroutine to	load time numbers patterns
0001D55A                            ; ---------------------------------------------------------------------------
0001D55A                            
0001D55A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D55A                            
0001D55A                            
0001D55A                            Hud_Mins:				; XREF: Hud_ChkTime
0001D55A 45F9 0001 D556             		lea	(Hud_1).l,a2
0001D560 7C00                       		moveq	#0,d6
0001D562 6000                       		bra.s	loc_1C9BA
0001D564                            ; End of function Hud_Mins
0001D564                            
0001D564                            
0001D564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D564                            
0001D564                            
0001D564                            Hud_Secs:				; XREF: Hud_ChkTime
0001D564 45F9 0001 D552             		lea	(Hud_10).l,a2
0001D56A 7C01                       		moveq	#1,d6
0001D56C                            
0001D56C                            loc_1C9BA:
0001D56C 7800                       		moveq	#0,d4
0001D56E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D572                            
0001D572                            Hud_TimeLoop:
0001D572 7400                       		moveq	#0,d2
0001D574 261A                       		move.l	(a2)+,d3
0001D576                            
0001D576                            loc_1C9C4:
0001D576 9283                       		sub.l	d3,d1
0001D578 6500                       		bcs.s	loc_1C9CC
0001D57A 5242                       		addq.w	#1,d2
0001D57C 60F8                       		bra.s	loc_1C9C4
0001D57E                            ; ===========================================================================
0001D57E                            
0001D57E                            loc_1C9CC:
0001D57E D283                       		add.l	d3,d1
0001D580 4A42                       		tst.w	d2
0001D582 6700                       		beq.s	loc_1C9D6
0001D584 383C 0001                  		move.w	#1,d4
0001D588                            
0001D588                            loc_1C9D6:
0001D588 ED4A                       		lsl.w	#6,d2
0001D58A 2D40 0004                  		move.l	d0,4(a6)
0001D58E 47F1 2000                  		lea	(a1,d2.w),a3
0001D592 2C9B                       		move.l	(a3)+,(a6)
0001D594 2C9B                       		move.l	(a3)+,(a6)
0001D596 2C9B                       		move.l	(a3)+,(a6)
0001D598 2C9B                       		move.l	(a3)+,(a6)
0001D59A 2C9B                       		move.l	(a3)+,(a6)
0001D59C 2C9B                       		move.l	(a3)+,(a6)
0001D59E 2C9B                       		move.l	(a3)+,(a6)
0001D5A0 2C9B                       		move.l	(a3)+,(a6)
0001D5A2 2C9B                       		move.l	(a3)+,(a6)
0001D5A4 2C9B                       		move.l	(a3)+,(a6)
0001D5A6 2C9B                       		move.l	(a3)+,(a6)
0001D5A8 2C9B                       		move.l	(a3)+,(a6)
0001D5AA 2C9B                       		move.l	(a3)+,(a6)
0001D5AC 2C9B                       		move.l	(a3)+,(a6)
0001D5AE 2C9B                       		move.l	(a3)+,(a6)
0001D5B0 2C9B                       		move.l	(a3)+,(a6)
0001D5B2 0680 0040 0000             		addi.l	#$400000,d0
0001D5B8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D5BC                            
0001D5BC 4E75                       		rts	
0001D5BE                            ; End of function Hud_Secs
0001D5BE                            
0001D5BE                            ; ---------------------------------------------------------------------------
0001D5BE                            ; Subroutine to	load time/ring bonus numbers patterns
0001D5BE                            ; ---------------------------------------------------------------------------
0001D5BE                            
0001D5BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5BE                            
0001D5BE                            
0001D5BE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D5BE 45F9 0001 D54A             		lea	(Hud_1000).l,a2
0001D5C4 7C03                       		moveq	#3,d6
0001D5C6 7800                       		moveq	#0,d4
0001D5C8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D5CC                            
0001D5CC                            Hud_BonusLoop:
0001D5CC 7400                       		moveq	#0,d2
0001D5CE 261A                       		move.l	(a2)+,d3
0001D5D0                            
0001D5D0                            loc_1CA1E:
0001D5D0 9283                       		sub.l	d3,d1
0001D5D2 6500                       		bcs.s	loc_1CA26
0001D5D4 5242                       		addq.w	#1,d2
0001D5D6 60F8                       		bra.s	loc_1CA1E
0001D5D8                            ; ===========================================================================
0001D5D8                            
0001D5D8                            loc_1CA26:
0001D5D8 D283                       		add.l	d3,d1
0001D5DA 4A42                       		tst.w	d2
0001D5DC 6700                       		beq.s	loc_1CA30
0001D5DE 383C 0001                  		move.w	#1,d4
0001D5E2                            
0001D5E2                            loc_1CA30:
0001D5E2 4A44                       		tst.w	d4
0001D5E4 6700                       		beq.s	Hud_ClrBonus
0001D5E6 ED4A                       		lsl.w	#6,d2
0001D5E8 47F1 2000                  		lea	(a1,d2.w),a3
0001D5EC 2C9B                       		move.l	(a3)+,(a6)
0001D5EE 2C9B                       		move.l	(a3)+,(a6)
0001D5F0 2C9B                       		move.l	(a3)+,(a6)
0001D5F2 2C9B                       		move.l	(a3)+,(a6)
0001D5F4 2C9B                       		move.l	(a3)+,(a6)
0001D5F6 2C9B                       		move.l	(a3)+,(a6)
0001D5F8 2C9B                       		move.l	(a3)+,(a6)
0001D5FA 2C9B                       		move.l	(a3)+,(a6)
0001D5FC 2C9B                       		move.l	(a3)+,(a6)
0001D5FE 2C9B                       		move.l	(a3)+,(a6)
0001D600 2C9B                       		move.l	(a3)+,(a6)
0001D602 2C9B                       		move.l	(a3)+,(a6)
0001D604 2C9B                       		move.l	(a3)+,(a6)
0001D606 2C9B                       		move.l	(a3)+,(a6)
0001D608 2C9B                       		move.l	(a3)+,(a6)
0001D60A 2C9B                       		move.l	(a3)+,(a6)
0001D60C                            
0001D60C                            loc_1CA5A:
0001D60C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D610                            
0001D610 4E75                       		rts	
0001D612                            ; ===========================================================================
0001D612                            
0001D612                            Hud_ClrBonus:
0001D612 7A0F                       		moveq	#$F,d5
0001D614                            
0001D614                            Hud_ClrBonusLoop:
0001D614 2CBC 0000 0000             		move.l	#0,(a6)
0001D61A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D61E                            
0001D61E 60EC                       		bra.s	loc_1CA5A
0001D620                            ; End of function Hud_TimeRingBonus
0001D620                            
0001D620                            ; ---------------------------------------------------------------------------
0001D620                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D620                            ; ---------------------------------------------------------------------------
0001D620                            
0001D620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D620                            
0001D620                            
0001D620                            Hud_Lives:				; XREF: Hud_ChkLives
0001D620 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D626 7200                       		moveq	#0,d1
0001D628 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D62C 45F9 0001 D552             		lea	(Hud_10).l,a2
0001D632 7C01                       		moveq	#1,d6
0001D634 7800                       		moveq	#0,d4
0001D636 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D63A                            
0001D63A                            Hud_LivesLoop:
0001D63A 2D40 0004                  		move.l	d0,4(a6)
0001D63E 7400                       		moveq	#0,d2
0001D640 261A                       		move.l	(a2)+,d3
0001D642                            
0001D642                            loc_1CA90:
0001D642 9283                       		sub.l	d3,d1
0001D644 6500                       		bcs.s	loc_1CA98
0001D646 5242                       		addq.w	#1,d2
0001D648 60F8                       		bra.s	loc_1CA90
0001D64A                            ; ===========================================================================
0001D64A                            
0001D64A                            loc_1CA98:
0001D64A D283                       		add.l	d3,d1
0001D64C 4A42                       		tst.w	d2
0001D64E 6700                       		beq.s	loc_1CAA2
0001D650 383C 0001                  		move.w	#1,d4
0001D654                            
0001D654                            loc_1CAA2:
0001D654 4A44                       		tst.w	d4
0001D656 6700                       		beq.s	Hud_ClrLives
0001D658                            
0001D658                            loc_1CAA6:
0001D658 EB4A                       		lsl.w	#5,d2
0001D65A 47F1 2000                  		lea	(a1,d2.w),a3
0001D65E 2C9B                       		move.l	(a3)+,(a6)
0001D660 2C9B                       		move.l	(a3)+,(a6)
0001D662 2C9B                       		move.l	(a3)+,(a6)
0001D664 2C9B                       		move.l	(a3)+,(a6)
0001D666 2C9B                       		move.l	(a3)+,(a6)
0001D668 2C9B                       		move.l	(a3)+,(a6)
0001D66A 2C9B                       		move.l	(a3)+,(a6)
0001D66C 2C9B                       		move.l	(a3)+,(a6)
0001D66E                            
0001D66E                            loc_1CABC:
0001D66E 0680 0040 0000             		addi.l	#$400000,d0
0001D674 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D678                            
0001D678 4E75                       		rts	
0001D67A                            ; ===========================================================================
0001D67A                            
0001D67A                            Hud_ClrLives:
0001D67A 4A46                       		tst.w	d6
0001D67C 67DA                       		beq.s	loc_1CAA6
0001D67E 7A07                       		moveq	#7,d5
0001D680                            
0001D680                            Hud_ClrLivesLoop:
0001D680 2CBC 0000 0000             		move.l	#0,(a6)
0001D686 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D68A 60E2                       		bra.s	loc_1CABC
0001D68C                            ; End of function Hud_Lives
0001D68C                            
0001D68C                            ; ===========================================================================
0001D68C                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D98C                            		even
0001D98C                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DACC                            		even
0001DACC                            ; ===========================================================================
0001DACC                            ; ---------------------------------------------------------------------------
0001DACC                            ; When debug mode is currently in use
0001DACC                            ; ---------------------------------------------------------------------------
0001DACC                            
0001DACC                            DebugMode:				; XREF: Obj01; Obj09
0001DACC 7000                       		moveq	#0,d0
0001DACE 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DAD2 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DAD6 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DADA                            ; ===========================================================================
0001DADA 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DADC 0000                       		dc.w Debug_Skip-Debug_Index
0001DADE                            ; ===========================================================================
0001DADE                            
0001DADE                            Debug_Main:				; XREF: Debug_Index
0001DADE 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DAE2 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DAE8 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DAEE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DAF4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DAFA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DB00 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DB06 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DB0C 117C 0000 001A             		move.b	#0,$1A(a0)
0001DB12 117C 0000 001C             		move.b	#0,$1C(a0)
0001DB18 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DB1E 6600                       		bne.s	Debug_Zone	; if not, branch
0001DB20 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DB26 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DB2C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DB2E 6000                       		bra.s	Debug_UseList
0001DB30                            ; ===========================================================================
0001DB30                            
0001DB30                            Debug_Zone:
0001DB30 7000                       		moveq	#0,d0
0001DB32 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB36                            
0001DB36                            Debug_UseList:
0001DB36 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB3C D040                       		add.w	d0,d0
0001DB3E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB42 3C1A                       		move.w	(a2)+,d6
0001DB44 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB48 6200                       		bhi.s	loc_1CF9E
0001DB4A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DB50                            
0001DB50                            loc_1CF9E:
0001DB50 6100 0000                  		bsr.w	Debug_ShowItem
0001DB54 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DB5A 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DB60                            
0001DB60                            Debug_Skip:				; XREF: Debug_Index
0001DB60 7006                       		moveq	#6,d0
0001DB62 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DB68 6700                       		beq.s	loc_1CFBE
0001DB6A 7000                       		moveq	#0,d0
0001DB6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB70                            
0001DB70                            loc_1CFBE:
0001DB70 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB76 D040                       		add.w	d0,d0
0001DB78 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB7C 3C1A                       		move.w	(a2)+,d6
0001DB7E 6100 0000                  		bsr.w	Debug_Control
0001DB82 4EF9 0000 E002             		jmp	DisplaySprite
0001DB88                            
0001DB88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB88                            
0001DB88                            
0001DB88                            Debug_Control:
0001DB88 7800                       		moveq	#0,d4
0001DB8A 323C 0001                  		move.w	#1,d1
0001DB8E 1838 F605                  		move.b	($FFFFF605).w,d4
0001DB92 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DB96 6600                       		bne.s	loc_1D018	; if yes, branch
0001DB98 1038 F604                  		move.b	($FFFFF604).w,d0
0001DB9C 0240 000F                  		andi.w	#$F,d0
0001DBA0 6600                       		bne.s	loc_1D000
0001DBA2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DBA8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DBAE 6000 0000                  		bra.w	Debug_BackItem
0001DBB2                            ; ===========================================================================
0001DBB2                            
0001DBB2                            loc_1D000:
0001DBB2 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DBB6 6600                       		bne.s	loc_1D01C
0001DBB8 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DBBE 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DBC2 6600                       		bne.s	loc_1D018
0001DBC4 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DBCA                            
0001DBCA                            loc_1D018:
0001DBCA 1838 F604                  		move.b	($FFFFF604).w,d4
0001DBCE                            
0001DBCE                            loc_1D01C:
0001DBCE 7200                       		moveq	#0,d1
0001DBD0 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DBD4 5241                       		addq.w	#1,d1
0001DBD6 4841                       		swap	d1
0001DBD8 E881                       		asr.l	#4,d1
0001DBDA 2428 000C                  		move.l	$C(a0),d2
0001DBDE 2628 0008                  		move.l	8(a0),d3
0001DBE2 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DBE6 6700                       		beq.s	loc_1D03C	; if not, branch
0001DBE8 9481                       		sub.l	d1,d2
0001DBEA 6400                       		bcc.s	loc_1D03C
0001DBEC 7400                       		moveq	#0,d2
0001DBEE                            
0001DBEE                            loc_1D03C:
0001DBEE 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DBF2 6700                       		beq.s	loc_1D052	; if not, branch
0001DBF4 D481                       		add.l	d1,d2
0001DBF6 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DBFC 6500                       		bcs.s	loc_1D052
0001DBFE 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DC04                            
0001DC04                            loc_1D052:
0001DC04 0804 0002                  		btst	#2,d4
0001DC08 6700                       		beq.s	loc_1D05E
0001DC0A 9681                       		sub.l	d1,d3
0001DC0C 6400                       		bcc.s	loc_1D05E
0001DC0E 7600                       		moveq	#0,d3
0001DC10                            
0001DC10                            loc_1D05E:
0001DC10 0804 0003                  		btst	#3,d4
0001DC14 6700                       		beq.s	loc_1D066
0001DC16 D681                       		add.l	d1,d3
0001DC18                            
0001DC18                            loc_1D066:
0001DC18 2142 000C                  		move.l	d2,$C(a0)
0001DC1C 2143 0008                  		move.l	d3,8(a0)
0001DC20                            
0001DC20                            Debug_BackItem:
0001DC20 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DC26 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC28 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC2E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DC30 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DC34 6400                       		bcc.s	Debug_NoLoop
0001DC36 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DC3A 6000                       		bra.s	Debug_NoLoop
0001DC3C                            ; ===========================================================================
0001DC3C                            
0001DC3C                            Debug_NextItem:
0001DC3C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DC42 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC44 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DC48 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC4C 6200                       		bhi.s	Debug_NoLoop
0001DC4E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DC54                            
0001DC54                            Debug_NoLoop:
0001DC54 6000 0000                  		bra.w	Debug_ShowItem
0001DC58                            ; ===========================================================================
0001DC58                            
0001DC58                            Debug_MakeItem:
0001DC58 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC5E 6700                       		beq.s	Debug_Exit	; if not, branch
0001DC60 4EB9 0000 E488             		jsr	SingleObjLoad
0001DC66 6600                       		bne.s	Debug_Exit
0001DC68 3368 0008 0008             		move.w	8(a0),8(a1)
0001DC6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DC74 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DC78 1368 0001 0001             		move.b	1(a0),1(a1)
0001DC7E 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DC84 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DC8A 7000                       		moveq	#0,d0
0001DC8C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DC90 E748                       		lsl.w	#3,d0
0001DC92 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DC98 4E75                       		rts	
0001DC9A                            ; ===========================================================================
0001DC9A                            
0001DC9A                            Debug_Exit:
0001DC9A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DCA0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DCA2 7000                       		moveq	#0,d0
0001DCA4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DCA8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCB0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCB6 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DCBA 3140 000A                  		move.w	d0,$A(a0)
0001DCBE 3140 000E                  		move.w	d0,$E(a0)
0001DCC2 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DCC8 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DCCE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DCD4 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DCD6 4278 F780                  		clr.w	($FFFFF780).w
0001DCDA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DCE0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCE8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCEE 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DCF4 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DCFA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DD00                            
0001DD00                            Debug_DoNothing:
0001DD00 4E75                       		rts	
0001DD02                            ; End of function Debug_Control
0001DD02                            
0001DD02                            
0001DD02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD02                            
0001DD02                            
0001DD02                            Debug_ShowItem:				; XREF: Debug_Main
0001DD02 7000                       		moveq	#0,d0
0001DD04 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD08 E748                       		lsl.w	#3,d0
0001DD0A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DD10 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DD16 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DD1C 4E75                       		rts	
0001DD1E                            ; End of function Debug_ShowItem
0001DD1E                            
0001DD1E                            ; ===========================================================================
0001DD1E                            ; ---------------------------------------------------------------------------
0001DD1E                            ; Debug	list pointers
0001DD1E                            ; ---------------------------------------------------------------------------
0001DD1E                            DebugList:
0001DD1E                            	include "_inc\Debug list pointers.asm"
0001DD1E                            ; ---------------------------------------------------------------------------
0001DD1E                            ; Debug	list pointers
0001DD1E                            ; ---------------------------------------------------------------------------
0001DD1E 0000                       	dc.w Debug_GHZ-DebugList
0001DD20 0000                       	dc.w Debug_LZ-DebugList
0001DD22 0000                       	dc.w Debug_MZ-DebugList
0001DD24 0000                       	dc.w Debug_SLZ-DebugList
0001DD26 0000                       	dc.w Debug_SYZ-DebugList
0001DD28 0000                       	dc.w Debug_SBZ-DebugList
0001DD2A 0000                       	dc.w Debug_Ending-DebugList
0001DD2C 0000                       	dc.w Debug_GHZ-DebugList
0001DD2C 0000                       	dc.w Debug_GHZ-DebugList
0001DD2E                            
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            ; Debug	list - Green Hill
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            Debug_GHZ:
0001DD2E                            	include "_inc\Debug list - GHZ.asm"
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            ; Debug	list - Green Hill
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E 0010                       	dc.w $10			; number of items in list
0001DD30 2500 A7F6                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DD34 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DD38 2600 ADFC                  	dc.l Map_obj26+$26000000
0001DD3C 0000 0680                  	dc.b 0,	0, 6, $80
0001DD40 1F00 9FEE                  	dc.l Map_obj1F+$1F000000
0001DD44 0000 0400                  	dc.b 0,	0, 4, 0
0001DD48 2200 A2AA                  	dc.l Map_obj22+$22000000
0001DD4C 0000 0444                  	dc.b 0,	0, 4, $44
0001DD50 2B00 B470                  	dc.l Map_obj2B+$2B000000
0001DD54 0000 047B                  	dc.b 0,	0, 4, $7B
0001DD58 3600 D9A4                  	dc.l Map_obj36+$36000000
0001DD5C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD60 1800 88FC                  	dc.l Map_obj18+$18000000
0001DD64 0000 4000                  	dc.b 0,	0, $40,	0
0001DD68 3B00 DACA                  	dc.l Map_obj3B+$3B000000
0001DD6C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DD70 4001 019C                  	dc.l Map_obj40+$40000000
0001DD74 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DD78 4100 E716                  	dc.l Map_obj41+$41000000
0001DD7C 0000 0523                  	dc.b 0,	0, 5, $23
0001DD80 4200 E93C                  	dc.l Map_obj42+$42000000
0001DD84 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DD88 4400 EC4A                  	dc.l Map_obj44+$44000000
0001DD8C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DD90 1900 89FC                  	dc.l Map_obj48+$19000000
0001DD94 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DD98 7901 7BE8                  	dc.l Map_obj79+$79000000
0001DD9C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDA0 4B00 A836                  	dc.l Map_obj4B+$4B000000
0001DDA4 0000 2400                  	dc.b 0,	0, $24,	0
0001DDA8 7D01 7D38                  	dc.l Map_obj7D+$7D000000
0001DDAC 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DDB0                            	even
0001DDB0                            	even
0001DDB0                            
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Debug	list - Labyrinth
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            Debug_LZ:
0001DDB0                            	include "_inc\Debug list - LZ.asm"
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Debug	list - Labyrinth
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0 0019                       	dc.w $19
0001DDB2 2500 A7F6                  	dc.l Map_obj25+$25000000
0001DDB6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDBA 2600 ADFC                  	dc.l Map_obj26+$26000000
0001DDBE 0000 0680                  	dc.b 0,	0, 6, $80
0001DDC2 4100 E716                  	dc.l Map_obj41+$41000000
0001DDC6 0000 0523                  	dc.b 0,	0, 5, $23
0001DDCA 2C00 B520                  	dc.l Map_obj2C+$2C000000
0001DDCE 0800 2486                  	dc.b 8,	0, $24,	$86
0001DDD2 2D00 B714                  	dc.l Map_obj2D+$2D000000
0001DDD6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DDDA 1601 2976                  	dc.l Map_obj16+$16000000
0001DDDE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DDE2 1601 2976                  	dc.l Map_obj16+$16000000
0001DDE6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DDEA 3300 CBCC                  	dc.l Map_obj33+$33000000
0001DDEE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DDF2 3200 C78C                  	dc.l Map_obj32+$32000000
0001DDF6 0000 0513                  	dc.b 0,	0, 5, $13
0001DDFA 3600 D9A4                  	dc.l Map_obj36+$36000000
0001DDFE 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE02 5201 0A98                  	dc.l Map_obj52a+$52000000
0001DE06 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DE0A 6101 2B9E                  	dc.l Map_obj61+$61000000
0001DE0E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DE12 6101 2B9E                  	dc.l Map_obj61+$61000000
0001DE16 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DE1A 6101 2B9E                  	dc.l Map_obj61+$61000000
0001DE1E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DE22 6201 2CF2                  	dc.l Map_obj62+$62000000
0001DE26 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DE2A 6101 2B9E                  	dc.l Map_obj61+$61000000
0001DE2E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DE32 6101 2B9E                  	dc.l Map_obj61+$61000000
0001DE36 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DE3A 6301 3050                  	dc.l Map_obj63+$63000000
0001DE3E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DE42 6001 28C0                  	dc.l Map_obj60+$60000000
0001DE46 0000 0467                  	dc.b 0,	0, 4, $67
0001DE4A 6401 3396                  	dc.l Map_obj64+$64000000
0001DE4E 8413 8348                  	dc.b $84, $13, $83, $48
0001DE52 6501 351E                  	dc.l Map_obj65+$65000000
0001DE56 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DE5A 6501 351E                  	dc.l Map_obj65+$65000000
0001DE5E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DE62 0B01 1D10                  	dc.l Map_obj0B+$B000000
0001DE66 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE6A 0C01 1DE0                  	dc.l Map_obj0C+$C000000
0001DE6E 0200 4328                  	dc.b 2,	0, $43,	$28
0001DE72 7901 7BE8                  	dc.l Map_obj79+$79000000
0001DE76 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE7A                            	even
0001DE7A                            	even
0001DE7A                            
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A                            ; Debug	list - Marble
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A                            Debug_MZ:
0001DE7A                            	include "_inc\Debug list - MZ.asm"
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A                            ; Debug	list - Marble
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A 0012                       	dc.w $12
0001DE7C 2500 A7F6                  	dc.l Map_obj25+$25000000
0001DE80 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE84 2600 ADFC                  	dc.l Map_obj26+$26000000
0001DE88 0000 0680                  	dc.b 0,	0, 6, $80
0001DE8C 2200 A2AA                  	dc.l Map_obj22+$22000000
0001DE90 0000 0444                  	dc.b 0,	0, 4, $44
0001DE94 3600 D9A4                  	dc.l Map_obj36+$36000000
0001DE98 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE9C 4100 E716                  	dc.l Map_obj41+$41000000
0001DEA0 0000 0523                  	dc.b 0,	0, 5, $23
0001DEA4 1300 BC56                  	dc.l Map_obj14+$13000000
0001DEA8 0000 0345                  	dc.b 0,	0, 3, $45
0001DEAC 4600 F2FC                  	dc.l Map_obj46+$46000000
0001DEB0 0000 4000                  	dc.b 0,	0, $40,	0
0001DEB4 4C00 FC48                  	dc.l Map_obj4C+$4C000000
0001DEB8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEBC 4E00 FF2C                  	dc.l Map_obj4E+$4E000000
0001DEC0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEC4 3300 CBCC                  	dc.l Map_obj33+$33000000
0001DEC8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DECC 5001 032A                  	dc.l Map_obj50+$50000000
0001DED0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DED4 5101 07CC                  	dc.l Map_obj51+$51000000
0001DED8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DEDC 5201 0A42                  	dc.l Map_obj52+$52000000
0001DEE0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DEE4 5300 8F94                  	dc.l Map_obj53+$53000000
0001DEE8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DEEC 5400 FC0E                  	dc.l Map_obj54+$54000000
0001DEF0 0000 8680                  	dc.b 0,	0, $86,	$80
0001DEF4 5501 0C36                  	dc.l Map_obj55+$55000000
0001DEF8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DEFC 7801 7862                  	dc.l Map_obj78+$78000000
0001DF00 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF04 7901 7BE8                  	dc.l Map_obj79+$79000000
0001DF08 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF0C                            	even
0001DF0C                            	even
0001DF0C                            
0001DF0C                            ; ---------------------------------------------------------------------------
0001DF0C                            ; Debug	list - Star Light
0001DF0C                            ; ---------------------------------------------------------------------------
0001DF0C                            Debug_SLZ:
0001DF0C                            	include "_inc\Debug list - SLZ.asm"
0001DF0C                            ; ---------------------------------------------------------------------------
0001DF0C                            ; Debug	list - Star Light
0001DF0C                            ; ---------------------------------------------------------------------------
0001DF0C 000F                       	dc.w $F
0001DF0E 2500 A7F6                  	dc.l Map_obj25+$25000000
0001DF12 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF16 2600 ADFC                  	dc.l Map_obj26+$26000000
0001DF1A 0000 0680                  	dc.b 0,	0, 6, $80
0001DF1E 5901 1738                  	dc.l Map_obj59+$59000000
0001DF22 0000 4000                  	dc.b 0,	0, $40,	0
0001DF26 5300 8F94                  	dc.l Map_obj53+$53000000
0001DF2A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DF2E 1800 895A                  	dc.l Map_obj18b+$18000000
0001DF32 0000 4000                  	dc.b 0,	0, $40,	0
0001DF36 5A01 1872                  	dc.l Map_obj5A+$5A000000
0001DF3A 0000 4000                  	dc.b 0,	0, $40,	0
0001DF3E 5B01 1A2A                  	dc.l Map_obj5B+$5B000000
0001DF42 0000 4000                  	dc.b 0,	0, $40,	0
0001DF46 5D01 1FFA                  	dc.l Map_obj5D+$5D000000
0001DF4A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DF4E 5E01 238C                  	dc.l Map_obj5E+$5E000000
0001DF52 0000 0374                  	dc.b 0,	0, 3, $74
0001DF56 4100 E716                  	dc.l Map_obj41+$41000000
0001DF5A 0000 0523                  	dc.b 0,	0, 5, $23
0001DF5E 1300 BC56                  	dc.l Map_obj14+$13000000
0001DF62 0000 0480                  	dc.b 0,	0, 4, $80
0001DF66 1C00 90A4                  	dc.l Map_obj1C+$1C000000
0001DF6A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DF6E 5F01 260A                  	dc.l Map_obj5F+$5F000000
0001DF72 0000 0400                  	dc.b 0,	0, 4, 0
0001DF76 6001 28C0                  	dc.l Map_obj60+$60000000
0001DF7A 0000 2429                  	dc.b 0,	0, $24,	$29
0001DF7E 7901 7BE8                  	dc.l Map_obj79+$79000000
0001DF82 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF86                            	even
0001DF86                            	even
0001DF86                            
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86                            ; Debug	list - Spring Yard
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86                            Debug_SYZ:
0001DF86                            	include "_inc\Debug list - SYZ.asm"
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86                            ; Debug	list - Spring Yard
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86 000F                       	dc.w $F
0001DF88 2500 A7F6                  	dc.l Map_obj25+$25000000
0001DF8C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF90 2600 ADFC                  	dc.l Map_obj26+$26000000
0001DF94 0000 0680                  	dc.b 0,	0, 6, $80
0001DF98 3600 D9A4                  	dc.l Map_obj36+$36000000
0001DF9C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DFA0 4100 E716                  	dc.l Map_obj41+$41000000
0001DFA4 0000 0523                  	dc.b 0,	0, 5, $23
0001DFA8 4300 EB9C                  	dc.l Map_obj43+$43000000
0001DFAC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFB0 1200 F37A                  	dc.l Map_obj12+$12000000
0001DFB4 0000 0000                  	dc.b 0,	0, 0, 0
0001DFB8 4700 F4F6                  	dc.l Map_obj47+$47000000
0001DFBC 0000 0380                  	dc.b 0,	0, 3, $80
0001DFC0 1F00 9FEE                  	dc.l Map_obj1F+$1F000000
0001DFC4 0000 0400                  	dc.b 0,	0, 4, 0
0001DFC8 2200 A2AA                  	dc.l Map_obj22+$22000000
0001DFCC 0000 0444                  	dc.b 0,	0, 4, $44
0001DFD0 5001 032A                  	dc.l Map_obj50+$50000000
0001DFD4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DFD8 1800 8948                  	dc.l Map_obj18a+$18000000
0001DFDC 0000 4000                  	dc.b 0,	0, $40,	0
0001DFE0 5601 10F8                  	dc.l Map_obj56+$56000000
0001DFE4 0000 4000                  	dc.b 0,	0, $40,	0
0001DFE8 3200 C78C                  	dc.l Map_obj32+$32000000
0001DFEC 0000 0513                  	dc.b 0,	0, 5, $13
0001DFF0 7801 7862                  	dc.l Map_obj78+$78000000
0001DFF4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DFF8 7901 7BE8                  	dc.l Map_obj79+$79000000
0001DFFC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E000                            	even
0001E000                            	even
0001E000                            
0001E000                            ; ---------------------------------------------------------------------------
0001E000                            ; Debug	list - Scrap Brain
0001E000                            ; ---------------------------------------------------------------------------
0001E000                            Debug_SBZ:
0001E000                            	include "_inc\Debug list - SBZ.asm"
0001E000                            ; ---------------------------------------------------------------------------
0001E000                            ; Debug	list - Scrap Brain
0001E000                            ; ---------------------------------------------------------------------------
0001E000 001D                       	dc.w $1D
0001E002 2500 A7F6                  	dc.l Map_obj25+$25000000
0001E006 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E00A 2600 ADFC                  	dc.l Map_obj26+$26000000
0001E00E 0000 0680                  	dc.b 0,	0, 6, $80
0001E012 5F01 260A                  	dc.l Map_obj5F+$5F000000
0001E016 0000 0400                  	dc.b 0,	0, 4, 0
0001E01A 6001 28C0                  	dc.l Map_obj60+$60000000
0001E01E 0000 0429                  	dc.b 0,	0, 4, $29
0001E022 7801 7862                  	dc.l Map_obj78+$78000000
0001E026 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E02A 1501 1494                  	dc.l Map_obj15b+$15000000
0001E02E 0702 4391                  	dc.b 7,	2, $43,	$91
0001E032 6701 617A                  	dc.l Map_obj67+$67000000
0001E036 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E03A 5201 0A42                  	dc.l Map_obj52+$52000000
0001E03E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E042 3200 C78C                  	dc.l Map_obj32+$32000000
0001E046 0000 0513                  	dc.b 0,	0, 5, $13
0001E04A 6901 63D4                  	dc.l Map_obj69+$69000000
0001E04E 0300 4492                  	dc.b 3,	0, $44,	$92
0001E052 6901 642E                  	dc.l Map_obj69a+$69000000
0001E056 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E05A 6A01 668C                  	dc.l Map_obj6A+$6A000000
0001E05E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E062 5300 8F94                  	dc.l Map_obj53+$53000000
0001E066 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E06A 5201 0A42                  	dc.l Map_obj52+$52000000
0001E06E 3903 4460                  	dc.b $39, 3, $44, $60
0001E072 6B01 6A5C                  	dc.l Map_obj6B+$6B000000
0001E076 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E07A 2A00 923A                  	dc.l Map_obj2A+$2A000000
0001E07E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E082 6B01 6A5C                  	dc.l Map_obj6B+$6B000000
0001E086 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E08A 6A01 668C                  	dc.l Map_obj6A+$6A000000
0001E08E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E092 6B01 6A5C                  	dc.l Map_obj6B+$6B000000
0001E096 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E09A 6A01 668C                  	dc.l Map_obj6A+$6A000000
0001E09E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E0A2 6B01 6A5C                  	dc.l Map_obj6B+$6B000000
0001E0A6 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E0AA 6C01 6C1E                  	dc.l Map_obj6C+$6C000000
0001E0AE 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E0B2 6D00 EFEC                  	dc.l Map_obj6D+$6D000000
0001E0B6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E0BA 6D00 EFEC                  	dc.l Map_obj6D+$6D000000
0001E0BE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E0C2 6E01 6CD4                  	dc.l Map_obj6E+$6E000000
0001E0C6 0400 047E                  	dc.b 4,	0, 4, $7E
0001E0CA 7001 7126                  	dc.l Map_obj70+$70000000
0001E0CE 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E0D2 7101 1EA0                  	dc.l Map_obj71+$71000000
0001E0D6 1100 8680                  	dc.b $11, 0, $86, $80
0001E0DA 1E00 96F8                  	dc.l Map_obj1E+$1E000000
0001E0DE 0400 2302                  	dc.b 4,	0, $23,	2
0001E0E2 7901 7BE8                  	dc.l Map_obj79+$79000000
0001E0E6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E0EA                            	even
0001E0EA                            	even
0001E0EA                            
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            ; Debug	list - ending sequence / special stage
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            Debug_Ending:
0001E0EA                            	include "_inc\Debug list - Ending and SS.asm"
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            ; Debug	list - ending sequence / special stage
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA 000D                       	dc.w $D
0001E0EC 2500 A7F6                  	dc.l Map_obj25+$25000000
0001E0F0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E0F4 4700 F4F6                  	dc.l Map_obj47+$47000000
0001E0F8 0000 0380                  	dc.b 0,	0, 3, $80
0001E0FC 2800 9D20                  	dc.l Map_obj28a+$28000000
0001E100 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E104 2800 9D20                  	dc.l Map_obj28a+$28000000
0001E108 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E10C 2800 9D20                  	dc.l Map_obj28a+$28000000
0001E110 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E114 2800 9D08                  	dc.l Map_obj28+$28000000
0001E118 0D00 0553                  	dc.b $D, 0, 5, $53
0001E11C 2800 9D08                  	dc.l Map_obj28+$28000000
0001E120 0E00 0553                  	dc.b $E, 0, 5, $53
0001E124 2800 9D08                  	dc.l Map_obj28+$28000000
0001E128 0F00 0573                  	dc.b $F, 0, 5, $73
0001E12C 2800 9D08                  	dc.l Map_obj28+$28000000
0001E130 1000 0573                  	dc.b $10, 0, 5,	$73
0001E134 2800 9D20                  	dc.l Map_obj28a+$28000000
0001E138 1100 0585                  	dc.b $11, 0, 5,	$85
0001E13C 2800 9D38                  	dc.l Map_obj28b+$28000000
0001E140 1200 0593                  	dc.b $12, 0, 5,	$93
0001E144 2800 9D20                  	dc.l Map_obj28a+$28000000
0001E148 1300 0565                  	dc.b $13, 0, 5,	$65
0001E14C 2800 9D38                  	dc.l Map_obj28b+$28000000
0001E150 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E154                            	even
0001E154                            	even
0001E154                            
0001E154                            ; ---------------------------------------------------------------------------
0001E154                            ; Main level load blocks
0001E154                            ; ---------------------------------------------------------------------------
0001E154                            MainLoadBlocks:
0001E154                            	include "_inc\Main level load blocks.asm"
0001E154                            ; ---------------------------------------------------------------------------
0001E154                            ; Main level load blocks
0001E154                            ;
0001E154                            ; ===FORMAT===
0001E154                            ; level	patterns + (1st	PLC num	* 10^6)
0001E154                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E154                            ; 256x256 mappings
0001E154                            ; blank, music (unused), pal index (unused), pal index
0001E154                            ; ---------------------------------------------------------------------------
0001E154 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E158 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E15C 0000 0000                  	dc.l Blk256_GHZ
0001E160 0081 0404                  	dc.b 0,	$81, 4,	4
0001E164 0000 0000                  	dc.l Nem_LZ|6<<24
0001E168 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E16C 0000 0000                  	dc.l Blk256_LZ
0001E170 0082 0505                  	dc.b 0,	$82, 5,	5
0001E174 0000 0000                  	dc.l Nem_MZ|8<<24
0001E178 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E17C 0000 0000                  	dc.l Blk256_MZ
0001E180 0083 0606                  	dc.b 0,	$83, 6,	6
0001E184 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E188 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E18C 0000 0000                  	dc.l Blk256_SLZ
0001E190 0084 0707                  	dc.b 0,	$84, 7,	7
0001E194 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E198 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E19C 0000 0000                  	dc.l Blk256_SYZ
0001E1A0 0085 0808                  	dc.b 0,	$85, 8,	8
0001E1A4 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E1A8 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E1AC 0000 0000                  	dc.l Blk256_SBZ
0001E1B0 0086 0909                  	dc.b 0,	$86, 9,	9
0001E1B4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E1B8 0000 0000                  	dc.l Blk16_GHZ
0001E1BC 0000 0000                  	dc.l Blk256_GHZ
0001E1C0 0086 1313                  	dc.b 0,	$86, $13, $13
0001E1C4                            ; there you go lol
0001E1C4 0000 0000                  	dc.l Nem_BHZ_2nd|$20<<24 ; MAKOTO ZONE
0001E1C8 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E1CC 0000 0000                  	dc.l Blk256_BHZ
0001E1D0 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E1D4                            	even
0001E1D4                            	even
0001E1D4                            
0001E1D4                            ; ---------------------------------------------------------------------------
0001E1D4                            ; Pattern load cues
0001E1D4                            ; ---------------------------------------------------------------------------
0001E1D4                            ArtLoadCues:
0001E1D4                            	include "_inc\Pattern load cues.asm"
0001E1D4                            ; ---------------------------------------------------------------------------
0001E1D4                            ; Pattern load cues - index
0001E1D4                            ; ---------------------------------------------------------------------------
0001E1D4 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E1D8 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E1DC 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E1E0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E1E4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E1E8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E1EC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E1F0 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E1F4 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E1F8 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E1FC 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E200 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E204 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E208 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E20C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E210 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E214                            
0001E214 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E218 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A                            ; Pattern load cues - standard block 1
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A 0004                       PLC_Main:	dc.w 4
0001E21C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E220 F400                       		dc.w $F400
0001E222 0000 0000                  		dc.l Nem_Hud		; HUD
0001E226 D940                       		dc.w $D940
0001E228 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E22C FA80                       		dc.w $FA80
0001E22E 0000 0000                  		dc.l Nem_Ring		; rings
0001E232 F640                       		dc.w $F640
0001E234 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E238 F2E0                       		dc.w $F2E0
0001E23A                            ; ---------------------------------------------------------------------------
0001E23A                            ; Pattern load cues - standard block 2
0001E23A                            ; ---------------------------------------------------------------------------
0001E23A 0002                       PLC_Main2:	dc.w 2
0001E23C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E240 D000                       		dc.w $D000
0001E242 0000 0000                  		dc.l Nem_Shield		; shield
0001E246 A820                       		dc.w $A820
0001E248 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E24C AB80                       		dc.w $AB80
0001E24E                            ; ---------------------------------------------------------------------------
0001E24E                            ; Pattern load cues - explosion
0001E24E                            ; ---------------------------------------------------------------------------
0001E24E 0000                       PLC_Explode:	dc.w 0
0001E250 0000 0000                  		dc.l Nem_Explode	; explosion
0001E254 B400                       		dc.w $B400
0001E256                            ; ---------------------------------------------------------------------------
0001E256                            ; Pattern load cues - game/time	over
0001E256                            ; ---------------------------------------------------------------------------
0001E256 0000                       PLC_GameOver:	dc.w 0
0001E258 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E25C ABC0                       		dc.w $ABC0
0001E25E                            ; ---------------------------------------------------------------------------
0001E25E                            ; Pattern load cues - Green Hill
0001E25E                            ; ---------------------------------------------------------------------------
0001E25E 000B                       PLC_GHZ:	dc.w $B
0001E260 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E264 0000                       		dc.w 0
0001E266 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E26A 39A0                       		dc.w $39A0
0001E26C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E270 6B00                       		dc.w $6B00
0001E272 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E276 7A00                       		dc.w $7A00
0001E278 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E27C 8000                       		dc.w $8000
0001E27E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E282 8880                       		dc.w $8880
0001E284 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E288 8F60                       		dc.w $8F60
0001E28A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E28E 9360                       		dc.w $9360
0001E290 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E294 9E00                       		dc.w $9E00
0001E296 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E29A A360                       		dc.w $A360
0001E29C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2A0 A460                       		dc.w $A460
0001E2A2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2A6 A660                       		dc.w $A660
0001E2A8 0005                       PLC_GHZ2:	dc.w 5
0001E2AA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E2AE 7000                       		dc.w $7000
0001E2B0 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E2B4 71C0                       		dc.w $71C0
0001E2B6 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E2BA 7300                       		dc.w $7300
0001E2BC 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E2C0 7540                       		dc.w $7540
0001E2C2 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E2C6 A1E0                       		dc.w $A1E0
0001E2C8 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E2CC 6980                       		dc.w $6980
0001E2CE                            ; ---------------------------------------------------------------------------
0001E2CE                            ; Pattern load cues - Labyrinth
0001E2CE                            ; ---------------------------------------------------------------------------
0001E2CE 000B                       PLC_LZ:		dc.w $B
0001E2D0 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E2D4 0000                       		dc.w 0
0001E2D6 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E2DA 3C00                       		dc.w $3C00
0001E2DC 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E2E0 3E00                       		dc.w $3E00
0001E2E2 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E2E6 4B20                       		dc.w $4B20
0001E2E8 0000 0000                  		dc.l Nem_Water		; water	surface
0001E2EC 6000                       		dc.w $6000
0001E2EE 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E2F2 6200                       		dc.w $6200
0001E2F4 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E2F8 6500                       		dc.w $6500
0001E2FA 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E2FE 6900                       		dc.w $6900
0001E300 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E304 7780                       		dc.w $7780
0001E306 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E30A 7880                       		dc.w $7880
0001E30C 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E310 7980                       		dc.w $7980
0001E312 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E316 94C0                       		dc.w $94C0
0001E318 000C                       PLC_LZ2:	dc.w $C
0001E31A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E31E 7BC0                       		dc.w $7BC0
0001E320 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E324 7CC0                       		dc.w $7CC0
0001E326 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E32A 7EC0                       		dc.w $7EC0
0001E32C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E330 5D20                       		dc.w $5D20
0001E332 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E336 8800                       		dc.w $8800
0001E338 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E33C 89E0                       		dc.w $89E0
0001E33E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E342 8CE0                       		dc.w $8CE0
0001E344 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E348 90C0                       		dc.w $90C0
0001E34A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E34E A1E0                       		dc.w $A1E0
0001E350 0000 0000                  		dc.l Nem_Cork		; cork block
0001E354 A000                       		dc.w $A000
0001E356 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E35A A360                       		dc.w $A360
0001E35C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E360 A460                       		dc.w $A460
0001E362 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E366 A660                       		dc.w $A660
0001E368                            ; ---------------------------------------------------------------------------
0001E368                            ; Pattern load cues - Marble
0001E368                            ; ---------------------------------------------------------------------------
0001E368 0009                       PLC_MZ:		dc.w 9
0001E36A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E36E 0000                       		dc.w 0
0001E370 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E374 6000                       		dc.w $6000
0001E376 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E37A 68A0                       		dc.w $68A0
0001E37C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E380 7000                       		dc.w $7000
0001E382 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E386 71C0                       		dc.w $71C0
0001E388 0000 0000                  		dc.l Nem_Lava		; lava
0001E38C 7500                       		dc.w $7500
0001E38E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E392 8880                       		dc.w $8880
0001E394 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E398 8F60                       		dc.w $8F60
0001E39A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E39E 9700                       		dc.w $9700
0001E3A0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3A4 9FE0                       		dc.w $9FE0
0001E3A6 0004                       PLC_MZ2:	dc.w 4
0001E3A8 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E3AC A260                       		dc.w $A260
0001E3AE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3B2 A360                       		dc.w $A360
0001E3B4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3B8 A460                       		dc.w $A460
0001E3BA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3BE A660                       		dc.w $A660
0001E3C0 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E3C4 5700                       		dc.w $5700
0001E3C6                            ; ---------------------------------------------------------------------------
0001E3C6                            ; Pattern load cues - Star Light
0001E3C6                            ; ---------------------------------------------------------------------------
0001E3C6 0008                       PLC_SLZ:	dc.w 8
0001E3C8 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E3CC 0000                       		dc.w 0
0001E3CE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E3D2 8000                       		dc.w $8000
0001E3D4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E3D8 8520                       		dc.w $8520
0001E3DA 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E3DE 9000                       		dc.w $9000
0001E3E0 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E3E4 9C00                       		dc.w $9C00
0001E3E6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E3EA A260                       		dc.w $A260
0001E3EC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3F0 A360                       		dc.w $A360
0001E3F2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3F6 A460                       		dc.w $A460
0001E3F8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3FC A660                       		dc.w $A660
0001E3FE 0005                       PLC_SLZ2:	dc.w 5
0001E400 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E404 6E80                       		dc.w $6E80
0001E406 0000 0000                  		dc.l Nem_Fan		; fan
0001E40A 7400                       		dc.w $7400
0001E40C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E410 7980                       		dc.w $7980
0001E412 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E416 7B80                       		dc.w $7B80
0001E418 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E41C 9B00                       		dc.w $9B00
0001E41E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E422 9E00                       		dc.w $9E00
0001E424                            ; ---------------------------------------------------------------------------
0001E424                            ; Pattern load cues - Spring Yard
0001E424                            ; ---------------------------------------------------------------------------
0001E424 0004                       PLC_SYZ:	dc.w 4
0001E426 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E42A 0000                       		dc.w 0
0001E42C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E430 8000                       		dc.w $8000
0001E432 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E436 8880                       		dc.w $8880
0001E438 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E43C 8F60                       		dc.w $8F60
0001E43E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E442 9700                       		dc.w $9700
0001E444 0007                       PLC_SYZ2:	dc.w 7
0001E446 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E44A 7000                       		dc.w $7000
0001E44C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E450 72C0                       		dc.w $72C0
0001E452 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E456 7740                       		dc.w $7740
0001E458 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E45C 9FE0                       		dc.w $9FE0
0001E45E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E462 A1E0                       		dc.w $A1E0
0001E464 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E468 A360                       		dc.w $A360
0001E46A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E46E A460                       		dc.w $A460
0001E470 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E474 A660                       		dc.w $A660
0001E476                            ; ---------------------------------------------------------------------------
0001E476                            ; Pattern load cues - Scrap Brain
0001E476                            ; ---------------------------------------------------------------------------
0001E476 000B                       PLC_SBZ:	dc.w $B
0001E478 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E47C 0000                       		dc.w 0
0001E47E 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E482 5800                       		dc.w $5800
0001E484 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E488 5D00                       		dc.w $5D00
0001E48A 0000 0000                  		dc.l Nem_Girder		; girder
0001E48E 5E00                       		dc.w $5E00
0001E490 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E494 6040                       		dc.w $6040
0001E496 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E49A 6880                       		dc.w $6880
0001E49C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E4A0 6900                       		dc.w $6900
0001E4A2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E4A6 7220                       		dc.w $7220
0001E4A8 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E4AC 76A0                       		dc.w $76A0
0001E4AE 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E4B2 7B20                       		dc.w $7B20
0001E4B4 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4B8 7EA0                       		dc.w $7EA0
0001E4BA 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E4BE 9860                       		dc.w $9860
0001E4C0 000C                       PLC_SBZ2:	dc.w $C
0001E4C2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E4C6 5600                       		dc.w $5600
0001E4C8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E4CC 8000                       		dc.w $8000
0001E4CE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E4D2 8520                       		dc.w $8520
0001E4D4 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E4D8 8C00                       		dc.w $8C00
0001E4DA 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E4DE 8DE0                       		dc.w $8DE0
0001E4E0 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E4E4 8FC0                       		dc.w $8FC0
0001E4E6 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E4EA 9240                       		dc.w $9240
0001E4EC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4F0 7F20                       		dc.w $7F20
0001E4F2 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E4F6 9BE0                       		dc.w $9BE0
0001E4F8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E4FC A1E0                       		dc.w $A1E0
0001E4FE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E502 A360                       		dc.w $A360
0001E504 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E508 A460                       		dc.w $A460
0001E50A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E50E A660                       		dc.w $A660
0001E510                            ; ---------------------------------------------------------------------------
0001E510                            ; Pattern load cues - DR. Breen Hill
0001E510                            ; ---------------------------------------------------------------------------
0001E510 000B                       PLC_BHZ:	dc.w $B
0001E512 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E516 0000                       		dc.w 0
0001E518 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E51C 39A0                       		dc.w $39A0
0001E51E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E522 6B00                       		dc.w $6B00
0001E524 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E528 7A00                       		dc.w $7A00
0001E52A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E52E 8000                       		dc.w $8000
0001E530 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E534 8880                       		dc.w $8880
0001E536 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E53A 8F60                       		dc.w $8F60
0001E53C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E540 9360                       		dc.w $9360
0001E542 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E546 9E00                       		dc.w $9E00
0001E548 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E54C A360                       		dc.w $A360
0001E54E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E552 A460                       		dc.w $A460
0001E554 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E558 A660                       		dc.w $A660
0001E55A 0005                       PLC_BHZ2:	dc.w 5
0001E55C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E560 7000                       		dc.w $7000
0001E562 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E566 71C0                       		dc.w $71C0
0001E568 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E56C 7300                       		dc.w $7300
0001E56E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E572 7540                       		dc.w $7540
0001E574 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E578 A1E0                       		dc.w $A1E0
0001E57A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E57E 6980                       		dc.w $6980
0001E580                            ; ---------------------------------------------------------------------------
0001E580                            ; Pattern load cues - title card
0001E580                            ; ---------------------------------------------------------------------------
0001E580 0000                       PLC_TitleCard:	dc.w 0
0001E582 0000 0000                  		dc.l Nem_TitleCard
0001E586 B000                       		dc.w $B000
0001E588                            ; ---------------------------------------------------------------------------
0001E588                            ; Pattern load cues - act 3 boss
0001E588                            ; ---------------------------------------------------------------------------
0001E588 0005                       PLC_Boss:	dc.w 5
0001E58A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E58E 8000                       		dc.w $8000
0001E590 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E594 8D80                       		dc.w $8D80
0001E596 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E59A 93A0                       		dc.w $93A0
0001E59C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E5A0 A300                       		dc.w $A300
0001E5A2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E5A6 A300                       		dc.w $A300
0001E5A8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E5AC A540                       		dc.w $A540
0001E5AE                            ; ---------------------------------------------------------------------------
0001E5AE                            ; Pattern load cues - act 1/2 signpost
0001E5AE                            ; ---------------------------------------------------------------------------
0001E5AE 0002                       PLC_Signpost:	dc.w 2
0001E5B0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E5B4 D000                       		dc.w $D000
0001E5B6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E5BA 96C0                       		dc.w $96C0
0001E5BC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E5C0 8C40                       		dc.w $8C40
0001E5C2                            ; ---------------------------------------------------------------------------
0001E5C2                            ; Pattern load cues - beta special stage warp effect
0001E5C2                            ; ---------------------------------------------------------------------------
0001E5C2 0000                       PLC_Warp:	dc.w 0
0001E5C4 0000 0000                  		dc.l Nem_Warp
0001E5C8 A820                       		dc.w $A820
0001E5CA                            ; ---------------------------------------------------------------------------
0001E5CA                            ; Pattern load cues - special stage
0001E5CA                            ; ---------------------------------------------------------------------------
0001E5CA 0010                       PLC_SpeStage:	dc.w $10
0001E5CC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E5D0 0000                       		dc.w 0
0001E5D2 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E5D6 0A20                       		dc.w $A20
0001E5D8 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E5DC 2840                       		dc.w $2840
0001E5DE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E5E2 4760                       		dc.w $4760
0001E5E4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E5E8 4A20                       		dc.w $4A20
0001E5EA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E5EE 4C60                       		dc.w $4C60
0001E5F0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E5F4 5E00                       		dc.w $5E00
0001E5F6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E5FA 6E00                       		dc.w $6E00
0001E5FC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E600 7E00                       		dc.w $7E00
0001E602 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E606 8E00                       		dc.w $8E00
0001E608 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E60C 9E00                       		dc.w $9E00
0001E60E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E612 AE00                       		dc.w $AE00
0001E614 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E618 BE00                       		dc.w $BE00
0001E61A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E61E EE00                       		dc.w $EE00
0001E620 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E624 F2E0                       		dc.w $F2E0
0001E626 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E62A F400                       		dc.w $F400
0001E62C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E630 F520                       		dc.w $F520
0001E632 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E636 F2E0                       		dc.w $F2E0
0001E638 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E63C F400                       		dc.w $F400
0001E63E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E642 F520                       		dc.w $F520
0001E644                            ; ---------------------------------------------------------------------------
0001E644                            ; Pattern load cues - GHZ animals
0001E644                            ; ---------------------------------------------------------------------------
0001E644 0001                       PLC_GHZAnimals:	dc.w 1
0001E646 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E64A B000                       		dc.w $B000
0001E64C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E650 B240                       		dc.w $B240
0001E652                            ; ---------------------------------------------------------------------------
0001E652                            ; Pattern load cues - LZ animals
0001E652                            ; ---------------------------------------------------------------------------
0001E652 0001                       PLC_LZAnimals:	dc.w 1
0001E654 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E658 B000                       		dc.w $B000
0001E65A 0000 0000                  		dc.l Nem_Seal		; seal
0001E65E B240                       		dc.w $B240
0001E660                            ; ---------------------------------------------------------------------------
0001E660                            ; Pattern load cues - MZ animals
0001E660                            ; ---------------------------------------------------------------------------
0001E660 0001                       PLC_MZAnimals:	dc.w 1
0001E662 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E666 B000                       		dc.w $B000
0001E668 0000 0000                  		dc.l Nem_Seal		; seal
0001E66C B240                       		dc.w $B240
0001E66E                            ; ---------------------------------------------------------------------------
0001E66E                            ; Pattern load cues - SLZ animals
0001E66E                            ; ---------------------------------------------------------------------------
0001E66E 0001                       PLC_SLZAnimals:	dc.w 1
0001E670 0000 0000                  		dc.l Nem_Pig		; pig
0001E674 B000                       		dc.w $B000
0001E676 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E67A B240                       		dc.w $B240
0001E67C                            ; ---------------------------------------------------------------------------
0001E67C                            ; Pattern load cues - SYZ animals
0001E67C                            ; ---------------------------------------------------------------------------
0001E67C 0001                       PLC_SYZAnimals:	dc.w 1
0001E67E 0000 0000                  		dc.l Nem_Pig		; pig
0001E682 B000                       		dc.w $B000
0001E684 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E688 B240                       		dc.w $B240
0001E68A                            ; ---------------------------------------------------------------------------
0001E68A                            ; Pattern load cues - SBZ animals
0001E68A                            ; ---------------------------------------------------------------------------
0001E68A 0001                       PLC_SBZAnimals:	dc.w 1
0001E68C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E690 B000                       		dc.w $B000
0001E692 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E696 B240                       		dc.w $B240
0001E698                            ; ---------------------------------------------------------------------------
0001E698                            ; Pattern load cues - special stage results screen
0001E698                            ; ---------------------------------------------------------------------------
0001E698 0001                       PLC_SpeStResult:dc.w 1
0001E69A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E69E A820                       		dc.w $A820
0001E6A0 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E6A4 AA20                       		dc.w $AA20
0001E6A6                            ; ---------------------------------------------------------------------------
0001E6A6                            ; Pattern load cues - ending sequence
0001E6A6                            ; ---------------------------------------------------------------------------
0001E6A6 000E                       PLC_Ending:	dc.w $E
0001E6A8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E6AC 0000                       		dc.w 0
0001E6AE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E6B2 39A0                       		dc.w $39A0
0001E6B4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E6B8 6B00                       		dc.w $6B00
0001E6BA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E6BE 7400                       		dc.w $7400
0001E6C0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E6C4 78A0                       		dc.w $78A0
0001E6C6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E6CA 7C20                       		dc.w $7C20
0001E6CC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E6D0 A480                       		dc.w $A480
0001E6D2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6D6 AA60                       		dc.w $AA60
0001E6D8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6DC ACA0                       		dc.w $ACA0
0001E6DE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E6E2 AE60                       		dc.w $AE60
0001E6E4 0000 0000                  		dc.l Nem_Seal		; seal
0001E6E8 B0A0                       		dc.w $B0A0
0001E6EA 0000 0000                  		dc.l Nem_Pig		; pig
0001E6EE B260                       		dc.w $B260
0001E6F0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E6F4 B4A0                       		dc.w $B4A0
0001E6F6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E6FA B660                       		dc.w $B660
0001E6FC 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E700 B8A0                       		dc.w $B8A0
0001E702                            ; ---------------------------------------------------------------------------
0001E702                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E702                            ; ---------------------------------------------------------------------------
0001E702 0002                       PLC_TryAgain:	dc.w 2
0001E704 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E708 78A0                       		dc.w $78A0
0001E70A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E70E 7C20                       		dc.w $7C20
0001E710 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E714 B400                       		dc.w $B400
0001E716                            ; ---------------------------------------------------------------------------
0001E716                            ; Pattern load cues - Eggman on SBZ 2
0001E716                            ; ---------------------------------------------------------------------------
0001E716 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E718 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E71C A300                       		dc.w $A300
0001E71E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E722 8000                       		dc.w $8000
0001E724 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E728 9400                       		dc.w $9400
0001E72A                            ; ---------------------------------------------------------------------------
0001E72A                            ; Pattern load cues - final boss
0001E72A                            ; ---------------------------------------------------------------------------
0001E72A 0004                       PLC_FZBoss:	dc.w 4
0001E72C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E730 7400                       		dc.w $7400
0001E732 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E736 6000                       		dc.w $6000
0001E738 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E73C 8000                       		dc.w $8000
0001E73E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E742 8E00                       		dc.w $8E00
0001E744 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E748 A540                       		dc.w $A540
0001E74A                            ; ---------------------------------------------------------------------------
0001E74A                            ; Pattern load cues - Teto boss
0001E74A                            ; ---------------------------------------------------------------------------
0001E74A 0002                       PLC_TetoBoss:	dc.w 2
0001E74C 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E750 8000                       		dc.w $8000
0001E752 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E756 93A0                       		dc.w $93A0
0001E758 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E75C 9000                       		dc.w $9000
0001E75E                            		even
0001E75E                            		even
0001E75E                            
0001E75E                            		incbin	misc\padding.bin
0001E84C                            		even
0001E84C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001ECA2                            		even
0001ECA2                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001ED3A                            		even
0001ED3A                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EE7C                            		even
0001EE7C                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EECA                            		even
0001EECA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EFDE                            		even
0001EFDE                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FEA8                            		even
0001FEA8                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023FAE                            		even
00023FAE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023FE2                            		even
00023FE2                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000240A0                            		even
000240A0                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024548                            		even
00024548                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000245A6                            		even
000245A6                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000251AC                            		even
000251AC                            ; ---------------------------------------------------------------------------
000251AC                            ; Sprite mappings - Sonic
000251AC                            ; ---------------------------------------------------------------------------
000251AC                            Map_Sonic:
000251AC                            	include "_maps\Sonic.asm"
000251AC                            Map_a933:
000251AC 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000251AE 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000251B0 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000251B2 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000251B4 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000251B6 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000251B8 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000251BA 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000251BC 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000251BE 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000251C0 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000251C2 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000251C4 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000251C6 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000251C8 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000251CA 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000251CC 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000251CE 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000251D0 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000251D2 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000251D4 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000251D6 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000251D8 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000251DA 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000251DC 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000251DE 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000251E0 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000251E2 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000251E4 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000251E6 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000251E8 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000251EA 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000251EC 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000251EE 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000251F0 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000251F2 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000251F4 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000251F6 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000251F8 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000251FA 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000251FC 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000251FE 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
00025200 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
00025202 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00025204 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00025206 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00025208 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
0002520A 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
0002520C 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
0002520E 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00025210 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00025212 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00025214 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00025216 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00025218 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
0002521A 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
0002521C 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002521E 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00025220 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00025222 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025224 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025226 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025228 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
0002522A 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
0002522C 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002522E 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00025230 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00025232 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025234 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025236 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025238 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002523A 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
0002523C 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002523E 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00025240 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00025242 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025244 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025246 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025248 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002524A 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
0002524C 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002524E 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00025250 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00025252 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025254 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025256 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025258 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002525A 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
0002525C 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002525E 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00025260 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00025262 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025264 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025266 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025268 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002526A 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
0002526C 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002526E 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00025270 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00025272 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00025274 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025276 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00025278 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
0002527A 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
0002527C 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002527E 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00025280 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00025282 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00025284 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025286 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00025288 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
0002528A 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
0002528C 00                         Map_a933_E0: 	dc.b $0
0002528D 02                         Map_a933_E1: 	dc.b $2
0002528E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00025293 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00025298 03                         Map_a933_EC: 	dc.b $3
00025299 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002529E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252A3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252A8 03                         Map_a933_FC: 	dc.b $3
000252A9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252AE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252B3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252B8 03                         Map_a933_10C: 	dc.b $3
000252B9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252BE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252C3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252C8 03                         Map_a933_11C: 	dc.b $3
000252C9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000252CE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000252D3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252D8 04                         Map_a933_12C: 	dc.b $4
000252D9 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000252DE FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000252E3 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000252E8 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000252ED 02                         Map_a933_141: 	dc.b $2
000252EE EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000252F3 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000252F8 02                         Map_a933_14C: 	dc.b $2
000252F9 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000252FE FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00025303 04                         Map_a933_157: 	dc.b $4
00025304 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025309 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002530E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00025313 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025318 02                         Map_a933_16C: 	dc.b $2
00025319 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002531E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00025323 03                         Map_a933_177: 	dc.b $3
00025324 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025329 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002532E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025333 05                         Map_a933_187: 	dc.b $5
00025334 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025339 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002533E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025343 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025348 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002534D 06                         Map_a933_1A1: 	dc.b $6
0002534E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025353 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025358 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002535D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025362 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025367 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002536C 04                         Map_a933_1C0: 	dc.b $4
0002536D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025372 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025377 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002537C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025381 05                         Map_a933_1D5: 	dc.b $5
00025382 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025387 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002538C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025391 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025396 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002539B 04                         Map_a933_1EF: 	dc.b $4
0002539C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000253A1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000253A6 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000253AB 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000253B0 05                         Map_a933_204: 	dc.b $5
000253B1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000253B6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000253BB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000253C0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000253C5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000253CA 04                         Map_a933_21E: 	dc.b $4
000253CB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000253D0 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000253D5 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000253DA 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000253DF 02                         Map_a933_233: 	dc.b $2
000253E0 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000253E5 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000253EA 02                         Map_a933_23E: 	dc.b $2
000253EB F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000253F0 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000253F5 04                         Map_a933_249: 	dc.b $4
000253F6 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000253FB EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00025400 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025405 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002540A 02                         Map_a933_25E: 	dc.b $2
0002540B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025410 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025415 03                         Map_a933_269: 	dc.b $3
00025416 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002541B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025420 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025425 06                         Map_a933_279: 	dc.b $6
00025426 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002542B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025430 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025435 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002543A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002543F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025444 06                         Map_a933_298: 	dc.b $6
00025445 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002544A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002544F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025454 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025459 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002545E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025463 04                         Map_a933_2B7: 	dc.b $4
00025464 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025469 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002546E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025473 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025478 05                         Map_a933_2CC: 	dc.b $5
00025479 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002547E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025483 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025488 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002548D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025492 04                         Map_a933_2E6: 	dc.b $4
00025493 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025498 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002549D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000254A2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000254A7 05                         Map_a933_2FB: 	dc.b $5
000254A8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000254AD EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000254B2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000254B7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000254BC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000254C1 02                         Map_a933_315: 	dc.b $2
000254C2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254C7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254CC 02                         Map_a933_320: 	dc.b $2
000254CD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254D2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254D7 02                         Map_a933_32B: 	dc.b $2
000254D8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254DD FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254E2 02                         Map_a933_336: 	dc.b $2
000254E3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254E8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254ED 04                         Map_a933_341: 	dc.b $4
000254EE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000254F3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000254F8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000254FD FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025502 03                         Map_a933_356: 	dc.b $3
00025503 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025508 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002550D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025512 04                         Map_a933_366: 	dc.b $4
00025513 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025518 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002551D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025522 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025527 03                         Map_a933_37B: 	dc.b $3
00025528 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002552D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025532 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025537 02                         Map_a933_38B: 	dc.b $2
00025538 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002553D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025542 02                         Map_a933_396: 	dc.b $2
00025543 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025548 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002554D 02                         Map_a933_3A1: 	dc.b $2
0002554E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025553 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025558 02                         Map_a933_3AC: 	dc.b $2
00025559 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002555E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025563 04                         Map_a933_3B7: 	dc.b $4
00025564 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025569 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002556E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025573 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025578 02                         Map_a933_3CC: 	dc.b $2
00025579 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002557E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025583 04                         Map_a933_3D7: 	dc.b $4
00025584 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025589 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002558E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025593 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025598 02                         Map_a933_3EC: 	dc.b $2
00025599 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002559E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000255A3 01                         Map_a933_3F7: 	dc.b $1
000255A4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255A9 01                         Map_a933_3FD: 	dc.b $1
000255AA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255AF 01                         Map_a933_403: 	dc.b $1
000255B0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255B5 01                         Map_a933_409: 	dc.b $1
000255B6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255BB 01                         Map_a933_40F: 	dc.b $1
000255BC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255C1 02                         Map_a933_415: 	dc.b $2
000255C2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000255C7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000255CC 01                         Map_a933_420: 	dc.b $1
000255CD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255D2 02                         Map_a933_426: 	dc.b $2
000255D3 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000255D8 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000255DD 01                         Map_a933_431: 	dc.b $1
000255DE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255E3 02                         Map_a933_437: 	dc.b $2
000255E4 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000255E9 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000255EE 04                         Map_a933_442: 	dc.b $4
000255EF ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000255F4 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000255F9 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000255FE 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025603 06                         Map_a933_457: 	dc.b $6
00025604 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025609 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002560E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025613 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025618 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002561D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025622 02                         Map_a933_476: 	dc.b $2
00025623 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025628 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002562D 02                         Map_a933_481: 	dc.b $2
0002562E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025633 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025638 04                         Map_a933_48C: 	dc.b $4
00025639 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002563E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025643 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025648 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002564D 02                         Map_a933_4A1: 	dc.b $2
0002564E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025653 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025658 03                         Map_a933_4AC: 	dc.b $3
00025659 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002565E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025663 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025668 04                         Map_a933_4BC: 	dc.b $4
00025669 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002566E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025673 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025678 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002567D 02                         Map_a933_4D1: 	dc.b $2
0002567E EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025683 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025688 04                         Map_a933_4DC: 	dc.b $4
00025689 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002568E 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025693 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025698 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002569D 04                         Map_a933_4F1: 	dc.b $4
0002569E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000256A3 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000256A8 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000256AD F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000256B2 05                         Map_a933_506: 	dc.b $5
000256B3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000256B8 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000256BD 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000256C2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000256C7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000256CC 05                         Map_a933_520: 	dc.b $5
000256CD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000256D2 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000256D7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000256DC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000256E1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000256E6 02                         Map_a933_53A: 	dc.b $2
000256E7 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000256EC 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000256F1 03                         Map_a933_545: 	dc.b $3
000256F2 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000256F7 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000256FC 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025701 02                         Map_a933_555: 	dc.b $2
00025702 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025707 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002570C 03                         Map_a933_560: 	dc.b $3
0002570D EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025712 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025717 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002571C 02                         Map_a933_570: 	dc.b $2
0002571D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025722 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025727 03                         Map_a933_57B: 	dc.b $3
00025728 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002572D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025732 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025737 03                         Map_a933_58B: 	dc.b $3
00025738 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002573D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025742 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025747 05                         Map_a933_59B: 	dc.b $5
00025748 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002574D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025752 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025757 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002575C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025761 05                         Map_a933_5B5: 	dc.b $5
00025762 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025767 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002576C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025771 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025776 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002577B 02                         Map_a933_5CF: 	dc.b $2
0002577C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025781 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025786 03                         Map_a933_5DA: 	dc.b $3
00025787 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002578C F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025791 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025796 01                         Map_a933_5EA: 	dc.b $1
00025797 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002579C 01                         Map_a933_5F0: 	dc.b $1
0002579D F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000257A2 01                         Map_a933_5F6: 	dc.b $1
000257A3 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000257A8 04                         Map_a933_5FC: 	dc.b $4
000257A9 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000257AE F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000257B3 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000257B8 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000257BD 03                         Map_a933_611: 	dc.b $3
000257BE F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000257C3 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000257C8 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000257CD 03                         Map_a933_621: 	dc.b $3
000257CE F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000257D3 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000257D8 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000257DD 03                         Map_a933_631: 	dc.b $3
000257DE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000257E3 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000257E8 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000257ED 02                         Map_a933_641: 	dc.b $2
000257EE F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000257F3 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000257F8 02                         Map_a933_64C: 	dc.b $2
000257F9 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000257FE EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025803 03                         Map_a933_657: 	dc.b $3
00025804 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025809 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002580E 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025813 02                         Map_a933_667: 	dc.b $2
00025814 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025819 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002581E 04                         Map_a933_672: 	dc.b $4
0002581F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025824 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025829 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002582E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025833 00                         Map_a933_687: 	dc.b $0
00025834 00                         Map_a933_688: 	dc.b $0
00025835 00                         Map_a933_689: 	dc.b $0
00025836 00                         Map_a933_68A: 	dc.b $0
00025837 02                         Map_a933_68B: 	dc.b $2
00025838 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002583D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025842 00                         Map_a933_696: 	dc.b $0
00025843 02                         Map_a933_697: 	dc.b $2
00025844 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025849 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002584E 00                         Map_a933_6A2: 	dc.b $0
0002584F 00                         Map_a933_6A3: 	dc.b $0
00025850 00                         Map_a933_6A4: 	dc.b $0
00025851 02                         Map_a933_6A5: 	dc.b $2
00025852 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025857 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002585C 00                         Map_a933_6B0: 	dc.b $0
0002585D 02                         Map_a933_6B1: 	dc.b $2
0002585E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025863 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025868 00                         Map_a933_6BC: 	dc.b $0
00025869 00                         Map_a933_6BD: 	dc.b $0
0002586A 00                         Map_a933_6BE: 	dc.b $0
0002586B 02                         Map_a933_6BF: 	dc.b $2
0002586C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025871 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025876 00                         Map_a933_6CA: 	dc.b $0
00025877 02                         Map_a933_6CB: 	dc.b $2
00025878 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002587D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025882 00                         Map_a933_6D6: 	dc.b $0
00025884 00                         	even
00025884 00                         	even
00025884                            
00025884                            ; ---------------------------------------------------------------------------
00025884                            ; Uncompressed graphics	loading	array for Sonic
00025884                            ; ---------------------------------------------------------------------------
00025884                            SonicDynPLC:
00025884                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025884                            DPLC_33c5:
00025884 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025886 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025888 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
0002588A 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
0002588C 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002588E 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025890 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025892 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025894 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025896 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025898 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
0002589A 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
0002589C 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002589E 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
000258A0 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
000258A2 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
000258A4 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000258A6 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000258A8 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000258AA 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000258AC 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000258AE 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000258B0 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000258B2 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000258B4 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000258B6 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000258B8 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000258BA 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000258BC 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000258BE 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000258C0 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000258C2 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000258C4 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000258C6 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000258C8 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000258CA 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
000258CC 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
000258CE 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
000258D0 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
000258D2 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
000258D4 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
000258D6 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
000258D8 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
000258DA 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
000258DC 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000258DE 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000258E0 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000258E2 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000258E4 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000258E6 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000258E8 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000258EA 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000258EC 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000258EE 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000258F0 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000258F2 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000258F4 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000258F6 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000258F8 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000258FA 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000258FC 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000258FE 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00025900 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00025902 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025904 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025906 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025908 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
0002590A 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
0002590C 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
0002590E 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025910 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025912 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025914 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025916 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025918 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
0002591A 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
0002591C 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
0002591E 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025920 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025922 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025924 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025926 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025928 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
0002592A 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
0002592C 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
0002592E 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025930 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025932 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025934 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025936 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025938 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
0002593A 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
0002593C 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
0002593E 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025940 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025942 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025944 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025946 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025948 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
0002594A 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
0002594C 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002594E 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025950 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025952 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025954 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025956 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025958 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
0002595A 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
0002595C 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002595E 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025960 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025962 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025964 00                         DPLC_33c5_E0: 	dc.b $0
00025965 02                         DPLC_33c5_E1: 	dc.b $2
00025966 F000                       	dc.b $F0, $0
00025968 1010                       	dc.b $10, $10
0002596A 03                         DPLC_33c5_E6: 	dc.b $3
0002596B 5012                       	dc.b $50, $12
0002596D 5018                       	dc.b $50, $18
0002596F 201E                       	dc.b $20, $1E
00025971 03                         DPLC_33c5_ED: 	dc.b $3
00025972 5021                       	dc.b $50, $21
00025974 5018                       	dc.b $50, $18
00025976 201E                       	dc.b $20, $1E
00025978 03                         DPLC_33c5_F4: 	dc.b $3
00025979 5021                       	dc.b $50, $21
0002597B 5018                       	dc.b $50, $18
0002597D 2027                       	dc.b $20, $27
0002597F 03                         DPLC_33c5_FB: 	dc.b $3
00025980 802A                       	dc.b $80, $2A
00025982 2033                       	dc.b $20, $33
00025984 2036                       	dc.b $20, $36
00025986 04                         DPLC_33c5_102: 	dc.b $4
00025987 7039                       	dc.b $70, $39
00025989 5041                       	dc.b $50, $41
0002598B 5047                       	dc.b $50, $47
0002598D 104D                       	dc.b $10, $4D
0002598F 02                         DPLC_33c5_10B: 	dc.b $2
00025990 7039                       	dc.b $70, $39
00025992 B04F                       	dc.b $B0, $4F
00025994 02                         DPLC_33c5_110: 	dc.b $2
00025995 505B                       	dc.b $50, $5B
00025997 8061                       	dc.b $80, $61
00025999 04                         DPLC_33c5_115: 	dc.b $4
0002599A 505B                       	dc.b $50, $5B
0002599C 506A                       	dc.b $50, $6A
0002599E 5070                       	dc.b $50, $70
000259A0 1076                       	dc.b $10, $76
000259A2 02                         DPLC_33c5_11E: 	dc.b $2
000259A3 F4F0                       	dc.b $F4, $F0
000259A5 1500                       	dc.b $15, $0
000259A7 03                         DPLC_33c5_123: 	dc.b $3
000259A8 7039                       	dc.b $70, $39
000259AA 3078                       	dc.b $30, $78
000259AC 507C                       	dc.b $50, $7C
000259AE 05                         DPLC_33c5_12A: 	dc.b $5
000259AF 5082                       	dc.b $50, $82
000259B1 5088                       	dc.b $50, $88
000259B3 208E                       	dc.b $20, $8E
000259B5 5091                       	dc.b $50, $91
000259B7 0097                       	dc.b $0, $97
000259B9 06                         DPLC_33c5_135: 	dc.b $6
000259BA 5082                       	dc.b $50, $82
000259BC 1098                       	dc.b $10, $98
000259BE 309A                       	dc.b $30, $9A
000259C0 509E                       	dc.b $50, $9E
000259C2 30A4                       	dc.b $30, $A4
000259C4 00A8                       	dc.b $0, $A8
000259C6 04                         DPLC_33c5_142: 	dc.b $4
000259C7 50A9                       	dc.b $50, $A9
000259C9 10AF                       	dc.b $10, $AF
000259CB 70B1                       	dc.b $70, $B1
000259CD 20B9                       	dc.b $20, $B9
000259CF 05                         DPLC_33c5_14B: 	dc.b $5
000259D0 50BC                       	dc.b $50, $BC
000259D2 30C2                       	dc.b $30, $C2
000259D4 70C6                       	dc.b $70, $C6
000259D6 20CE                       	dc.b $20, $CE
000259D8 10D1                       	dc.b $10, $D1
000259DA 04                         DPLC_33c5_156: 	dc.b $4
000259DB 50BC                       	dc.b $50, $BC
000259DD 10D3                       	dc.b $10, $D3
000259DF 70D5                       	dc.b $70, $D5
000259E1 20DD                       	dc.b $20, $DD
000259E3 05                         DPLC_33c5_15F: 	dc.b $5
000259E4 5082                       	dc.b $50, $82
000259E6 1098                       	dc.b $10, $98
000259E8 008E                       	dc.b $0, $8E
000259EA 70E0                       	dc.b $70, $E0
000259EC 20E8                       	dc.b $20, $E8
000259EE 04                         DPLC_33c5_16A: 	dc.b $4
000259EF 70EB                       	dc.b $70, $EB
000259F1 50F3                       	dc.b $50, $F3
000259F3 10F9                       	dc.b $10, $F9
000259F5 50FB                       	dc.b $50, $FB
000259F7 02                         DPLC_33c5_173: 	dc.b $2
000259F8 70EB                       	dc.b $70, $EB
000259FA B101                       	dc.b $B1, $1
000259FC 02                         DPLC_33c5_178: 	dc.b $2
000259FD 510D                       	dc.b $51, $D
000259FF 8113                       	dc.b $81, $13
00025A01 04                         DPLC_33c5_17D: 	dc.b $4
00025A02 510D                       	dc.b $51, $D
00025A04 511C                       	dc.b $51, $1C
00025A06 1122                       	dc.b $11, $22
00025A08 5124                       	dc.b $51, $24
00025A0A 02                         DPLC_33c5_186: 	dc.b $2
00025A0B 510D                       	dc.b $51, $D
00025A0D B12A                       	dc.b $B1, $2A
00025A0F 03                         DPLC_33c5_18B: 	dc.b $3
00025A10 70EB                       	dc.b $70, $EB
00025A12 0101                       	dc.b $1, $1
00025A14 8136                       	dc.b $81, $36
00025A16 06                         DPLC_33c5_192: 	dc.b $6
00025A17 513F                       	dc.b $51, $3F
00025A19 1145                       	dc.b $11, $45
00025A1B 1147                       	dc.b $11, $47
00025A1D 8149                       	dc.b $81, $49
00025A1F 0152                       	dc.b $1, $52
00025A21 0153                       	dc.b $1, $53
00025A23 06                         DPLC_33c5_19F: 	dc.b $6
00025A24 513F                       	dc.b $51, $3F
00025A26 2154                       	dc.b $21, $54
00025A28 1157                       	dc.b $11, $57
00025A2A 1159                       	dc.b $11, $59
00025A2C 815B                       	dc.b $81, $5B
00025A2E 0152                       	dc.b $1, $52
00025A30 04                         DPLC_33c5_1AC: 	dc.b $4
00025A31 5164                       	dc.b $51, $64
00025A33 116A                       	dc.b $11, $6A
00025A35 816C                       	dc.b $81, $6C
00025A37 1175                       	dc.b $11, $75
00025A39 05                         DPLC_33c5_1B5: 	dc.b $5
00025A3A 5177                       	dc.b $51, $77
00025A3C 217D                       	dc.b $21, $7D
00025A3E 1180                       	dc.b $11, $80
00025A40 7182                       	dc.b $71, $82
00025A42 218A                       	dc.b $21, $8A
00025A44 04                         DPLC_33c5_1C0: 	dc.b $4
00025A45 5177                       	dc.b $51, $77
00025A47 118D                       	dc.b $11, $8D
00025A49 818F                       	dc.b $81, $8F
00025A4B 1198                       	dc.b $11, $98
00025A4D 05                         DPLC_33c5_1C9: 	dc.b $5
00025A4E 513F                       	dc.b $51, $3F
00025A50 819A                       	dc.b $81, $9A
00025A52 1159                       	dc.b $11, $59
00025A54 11A3                       	dc.b $11, $A3
00025A56 0152                       	dc.b $1, $52
00025A58 02                         DPLC_33c5_1D4: 	dc.b $2
00025A59 51A5                       	dc.b $51, $A5
00025A5B B1AB                       	dc.b $B1, $AB
00025A5D 02                         DPLC_33c5_1D9: 	dc.b $2
00025A5E 505B                       	dc.b $50, $5B
00025A60 B1B7                       	dc.b $B1, $B7
00025A62 02                         DPLC_33c5_1DE: 	dc.b $2
00025A63 51A5                       	dc.b $51, $A5
00025A65 B1C3                       	dc.b $B1, $C3
00025A67 02                         DPLC_33c5_1E3: 	dc.b $2
00025A68 505B                       	dc.b $50, $5B
00025A6A B1CF                       	dc.b $B1, $CF
00025A6C 04                         DPLC_33c5_1E8: 	dc.b $4
00025A6D 51DB                       	dc.b $51, $DB
00025A6F 11E1                       	dc.b $11, $E1
00025A71 B1E3                       	dc.b $B1, $E3
00025A73 01EF                       	dc.b $1, $EF
00025A75 03                         DPLC_33c5_1F1: 	dc.b $3
00025A76 51F0                       	dc.b $51, $F0
00025A78 11F6                       	dc.b $11, $F6
00025A7A B1F8                       	dc.b $B1, $F8
00025A7C 04                         DPLC_33c5_1F8: 	dc.b $4
00025A7D 51DB                       	dc.b $51, $DB
00025A7F 1204                       	dc.b $12, $4
00025A81 B206                       	dc.b $B2, $6
00025A83 01EF                       	dc.b $1, $EF
00025A85 03                         DPLC_33c5_201: 	dc.b $3
00025A86 51F0                       	dc.b $51, $F0
00025A88 11F6                       	dc.b $11, $F6
00025A8A B212                       	dc.b $B2, $12
00025A8C 02                         DPLC_33c5_208: 	dc.b $2
00025A8D 521E                       	dc.b $52, $1E
00025A8F B224                       	dc.b $B2, $24
00025A91 02                         DPLC_33c5_20D: 	dc.b $2
00025A92 510D                       	dc.b $51, $D
00025A94 B230                       	dc.b $B2, $30
00025A96 02                         DPLC_33c5_212: 	dc.b $2
00025A97 521E                       	dc.b $52, $1E
00025A99 B23C                       	dc.b $B2, $3C
00025A9B 02                         DPLC_33c5_217: 	dc.b $2
00025A9C 510D                       	dc.b $51, $D
00025A9E B248                       	dc.b $B2, $48
00025AA0 04                         DPLC_33c5_21C: 	dc.b $4
00025AA1 5254                       	dc.b $52, $54
00025AA3 125A                       	dc.b $12, $5A
00025AA5 B25C                       	dc.b $B2, $5C
00025AA7 0268                       	dc.b $2, $68
00025AA9 02                         DPLC_33c5_225: 	dc.b $2
00025AAA 7269                       	dc.b $72, $69
00025AAC B271                       	dc.b $B2, $71
00025AAE 04                         DPLC_33c5_22A: 	dc.b $4
00025AAF 5254                       	dc.b $52, $54
00025AB1 127D                       	dc.b $12, $7D
00025AB3 B27F                       	dc.b $B2, $7F
00025AB5 0268                       	dc.b $2, $68
00025AB7 02                         DPLC_33c5_233: 	dc.b $2
00025AB8 7269                       	dc.b $72, $69
00025ABA B28B                       	dc.b $B2, $8B
00025ABC 01                         DPLC_33c5_238: 	dc.b $1
00025ABD F297                       	dc.b $F2, $97
00025ABF 01                         DPLC_33c5_23B: 	dc.b $1
00025AC0 F2A7                       	dc.b $F2, $A7
00025AC2 01                         DPLC_33c5_23E: 	dc.b $1
00025AC3 F2B7                       	dc.b $F2, $B7
00025AC5 01                         DPLC_33c5_241: 	dc.b $1
00025AC6 F2C7                       	dc.b $F2, $C7
00025AC8 01                         DPLC_33c5_244: 	dc.b $1
00025AC9 F2D7                       	dc.b $F2, $D7
00025ACB 02                         DPLC_33c5_247: 	dc.b $2
00025ACC B2E7                       	dc.b $B2, $E7
00025ACE 22F3                       	dc.b $22, $F3
00025AD0 01                         DPLC_33c5_24C: 	dc.b $1
00025AD1 F2F6                       	dc.b $F2, $F6
00025AD3 02                         DPLC_33c5_24F: 	dc.b $2
00025AD4 B306                       	dc.b $B3, $6
00025AD6 2312                       	dc.b $23, $12
00025AD8 01                         DPLC_33c5_254: 	dc.b $1
00025AD9 F315                       	dc.b $F3, $15
00025ADB 02                         DPLC_33c5_257: 	dc.b $2
00025ADC 5325                       	dc.b $53, $25
00025ADE B32B                       	dc.b $B3, $2B
00025AE0 04                         DPLC_33c5_25C: 	dc.b $4
00025AE1 5337                       	dc.b $53, $37
00025AE3 733D                       	dc.b $73, $3D
00025AE5 1345                       	dc.b $13, $45
00025AE7 0347                       	dc.b $3, $47
00025AE9 02                         DPLC_33c5_265: 	dc.b $2
00025AEA D348                       	dc.b $D3, $48
00025AEC 34EC                       	dc.b $34, $EC
00025AEE 02                         DPLC_33c5_26A: 	dc.b $2
00025AEF F528                       	dc.b $F5, $28
00025AF1 0538                       	dc.b $5, $38
00025AF3 02                         DPLC_33c5_26F: 	dc.b $2
00025AF4 F539                       	dc.b $F5, $39
00025AF6 0549                       	dc.b $5, $49
00025AF8 02                         DPLC_33c5_274: 	dc.b $2
00025AF9 E356                       	dc.b $E3, $56
00025AFB 054A                       	dc.b $5, $4A
00025AFD 01                         DPLC_33c5_279: 	dc.b $1
00025AFE 8365                       	dc.b $83, $65
00025B00 03                         DPLC_33c5_27C: 	dc.b $3
00025B01 736E                       	dc.b $73, $6E
00025B03 0376                       	dc.b $3, $76
00025B05 3377                       	dc.b $33, $77
00025B07 02                         DPLC_33c5_283: 	dc.b $2
00025B08 E37B                       	dc.b $E3, $7B
00025B0A 054A                       	dc.b $5, $4A
00025B0C 01                         DPLC_33c5_288: 	dc.b $1
00025B0D D561                       	dc.b $D5, $61
00025B0F 04                         DPLC_33c5_28B: 	dc.b $4
00025B10 B399                       	dc.b $B3, $99
00025B12 33A5                       	dc.b $33, $A5
00025B14 03A9                       	dc.b $3, $A9
00025B16 03AA                       	dc.b $3, $AA
00025B18 04                         DPLC_33c5_294: 	dc.b $4
00025B19 B3AB                       	dc.b $B3, $AB
00025B1B 33B7                       	dc.b $33, $B7
00025B1D 03BB                       	dc.b $3, $BB
00025B1F 03BC                       	dc.b $3, $BC
00025B21 05                         DPLC_33c5_29D: 	dc.b $5
00025B22 83BD                       	dc.b $83, $BD
00025B24 13C6                       	dc.b $13, $C6
00025B26 53C8                       	dc.b $53, $C8
00025B28 13CE                       	dc.b $13, $CE
00025B2A 03D0                       	dc.b $3, $D0
00025B2C 05                         DPLC_33c5_2A8: 	dc.b $5
00025B2D 83D1                       	dc.b $83, $D1
00025B2F 13DA                       	dc.b $13, $DA
00025B31 53C8                       	dc.b $53, $C8
00025B33 13CE                       	dc.b $13, $CE
00025B35 03D0                       	dc.b $3, $D0
00025B37 02                         DPLC_33c5_2B3: 	dc.b $2
00025B38 83DC                       	dc.b $83, $DC
00025B3A 73E5                       	dc.b $73, $E5
00025B3C 03                         DPLC_33c5_2B8: 	dc.b $3
00025B3D 83ED                       	dc.b $83, $ED
00025B3F 23F6                       	dc.b $23, $F6
00025B41 13F9                       	dc.b $13, $F9
00025B43 02                         DPLC_33c5_2BF: 	dc.b $2
00025B44 83FB                       	dc.b $83, $FB
00025B46 7404                       	dc.b $74, $4
00025B48 03                         DPLC_33c5_2C4: 	dc.b $3
00025B49 83ED                       	dc.b $83, $ED
00025B4B 240C                       	dc.b $24, $C
00025B4D 140F                       	dc.b $14, $F
00025B4F 02                         DPLC_33c5_2CB: 	dc.b $2
00025B50 5411                       	dc.b $54, $11
00025B52 B417                       	dc.b $B4, $17
00025B54 03                         DPLC_33c5_2D0: 	dc.b $3
00025B55 8423                       	dc.b $84, $23
00025B57 342C                       	dc.b $34, $2C
00025B59 0430                       	dc.b $4, $30
00025B5B 03                         DPLC_33c5_2D7: 	dc.b $3
00025B5C 7431                       	dc.b $74, $31
00025B5E 1439                       	dc.b $14, $39
00025B60 B43B                       	dc.b $B4, $3B
00025B62 05                         DPLC_33c5_2DE: 	dc.b $5
00025B63 7447                       	dc.b $74, $47
00025B65 144F                       	dc.b $14, $4F
00025B67 5451                       	dc.b $54, $51
00025B69 3457                       	dc.b $34, $57
00025B6B 045B                       	dc.b $4, $5B
00025B6D 05                         DPLC_33c5_2E9: 	dc.b $5
00025B6E 745C                       	dc.b $74, $5C
00025B70 144F                       	dc.b $14, $4F
00025B72 5464                       	dc.b $54, $64
00025B74 3457                       	dc.b $34, $57
00025B76 045B                       	dc.b $4, $5B
00025B78 02                         DPLC_33c5_2F4: 	dc.b $2
00025B79 246A                       	dc.b $24, $6A
00025B7B F46D                       	dc.b $F4, $6D
00025B7D 03                         DPLC_33c5_2F9: 	dc.b $3
00025B7E 247D                       	dc.b $24, $7D
00025B80 B480                       	dc.b $B4, $80
00025B82 248C                       	dc.b $24, $8C
00025B84 01                         DPLC_33c5_300: 	dc.b $1
00025B85 B48F                       	dc.b $B4, $8F
00025B87 01                         DPLC_33c5_303: 	dc.b $1
00025B88 549B                       	dc.b $54, $9B
00025B8A 01                         DPLC_33c5_306: 	dc.b $1
00025B8B 14A1                       	dc.b $14, $A1
00025B8D 02                         DPLC_33c5_309: 	dc.b $2
00025B8E E356                       	dc.b $E3, $56
00025B90 054A                       	dc.b $5, $4A
00025B92 03                         DPLC_33c5_30E: 	dc.b $3
00025B93 736E                       	dc.b $73, $6E
00025B95 0376                       	dc.b $3, $76
00025B97 3377                       	dc.b $33, $77
00025B99 03                         DPLC_33c5_315: 	dc.b $3
00025B9A B4A3                       	dc.b $B4, $A3
00025B9C 14AF                       	dc.b $14, $AF
00025B9E 34B1                       	dc.b $34, $B1
00025BA0 03                         DPLC_33c5_31C: 	dc.b $3
00025BA1 54B5                       	dc.b $54, $B5
00025BA3 B4BB                       	dc.b $B4, $BB
00025BA5 1074                       	dc.b $10, $74
00025BA7 02                         DPLC_33c5_323: 	dc.b $2
00025BA8 F4C7                       	dc.b $F4, $C7
00025BAA 24D7                       	dc.b $24, $D7
00025BAC 02                         DPLC_33c5_328: 	dc.b $2
00025BAD F4DA                       	dc.b $F4, $DA
00025BAF 14EA                       	dc.b $14, $EA
00025BB1 02                         DPLC_33c5_32D: 	dc.b $2
00025BB2 F502                       	dc.b $F5, $2
00025BB4 2512                       	dc.b $25, $12
00025BB6 02                         DPLC_33c5_332: 	dc.b $2
00025BB7 F515                       	dc.b $F5, $15
00025BB9 2525                       	dc.b $25, $25
00025BBB 02                         DPLC_33c5_337: 	dc.b $2
00025BBC F54B                       	dc.b $F5, $4B
00025BBE 755B                       	dc.b $75, $5B
00025BC0 00                         DPLC_33c5_33C: 	dc.b $0
00025BC1 00                         DPLC_33c5_33D: 	dc.b $0
00025BC2 00                         DPLC_33c5_33E: 	dc.b $0
00025BC3 00                         DPLC_33c5_33F: 	dc.b $0
00025BC4 02                         DPLC_33c5_340: 	dc.b $2
00025BC5 F4DA                       	dc.b $F4, $DA
00025BC7 14EA                       	dc.b $14, $EA
00025BC9 00                         DPLC_33c5_345: 	dc.b $0
00025BCA 02                         DPLC_33c5_346: 	dc.b $2
00025BCB F4DA                       	dc.b $F4, $DA
00025BCD 14EA                       	dc.b $14, $EA
00025BCF 00                         DPLC_33c5_34B: 	dc.b $0
00025BD0 00                         DPLC_33c5_34C: 	dc.b $0
00025BD1 00                         DPLC_33c5_34D: 	dc.b $0
00025BD2 02                         DPLC_33c5_34E: 	dc.b $2
00025BD3 F4DA                       	dc.b $F4, $DA
00025BD5 14EA                       	dc.b $14, $EA
00025BD7 00                         DPLC_33c5_353: 	dc.b $0
00025BD8 02                         DPLC_33c5_354: 	dc.b $2
00025BD9 F4DA                       	dc.b $F4, $DA
00025BDB 14EA                       	dc.b $14, $EA
00025BDD 00                         DPLC_33c5_359: 	dc.b $0
00025BDE 00                         DPLC_33c5_35A: 	dc.b $0
00025BDF 00                         DPLC_33c5_35B: 	dc.b $0
00025BE0 02                         DPLC_33c5_35C: 	dc.b $2
00025BE1 F4DA                       	dc.b $F4, $DA
00025BE3 14EA                       	dc.b $14, $EA
00025BE5 00                         DPLC_33c5_361: 	dc.b $0
00025BE6 02                         DPLC_33c5_362: 	dc.b $2
00025BE7 F4DA                       	dc.b $F4, $DA
00025BE9 14EA                       	dc.b $14, $EA
00025BEB 00                         DPLC_33c5_367: 	dc.b $0
00025BEC                            	even
00025BEC                            	even
00025BEC                            
00025BEC                            ; ---------------------------------------------------------------------------
00025BEC                            ; Uncompressed graphics	- Sonic
00025BEC                            ; ---------------------------------------------------------------------------
00025BEC                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000309CC                            		even
000309CC                            ; ---------------------------------------------------------------------------
000309CC                            ; Compressed graphics - various
000309CC                            ; ---------------------------------------------------------------------------
000309CC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030AD0                            		even
00030AD0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030B0A                            		even
00030B0A                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030CA0                            		even
00030CA0                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030DE8                            		even
00030DE8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030EF2                            		even
00030EF2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030F44                            		even
00030F44                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003118C                            		even
0003118C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00031312                            		even
00031312                            ; ---------------------------------------------------------------------------
00031312                            ; Sprite mappings - walls of the special stage
00031312                            ; ---------------------------------------------------------------------------
00031312                            Map_SSWalls:
00031312                            	include "_maps\SSwalls.asm"
00031312                            ; ---------------------------------------------------------------------------
00031312                            ; Sprite mappings - walls of the special stage
00031312                            ; ---------------------------------------------------------------------------
00031312 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031316 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003131A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003131E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00031322 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031326 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003132A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003132E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031332 01                         byte_2C584:	dc.b 1
00031333 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031338 01                         byte_2C58A:	dc.b 1
00031339 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003133E 01                         byte_2C590:	dc.b 1
0003133F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031344 01                         byte_2C596:	dc.b 1
00031345 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003134A 01                         byte_2C59C:	dc.b 1
0003134B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031350 01                         byte_2C5A2:	dc.b 1
00031351 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031356 01                         byte_2C5A8:	dc.b 1
00031357 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003135C 01                         byte_2C5AE:	dc.b 1
0003135D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031362 01                         byte_2C5B4:	dc.b 1
00031363 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031368 01                         byte_2C5BA:	dc.b 1
00031369 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003136E 01                         byte_2C5C0:	dc.b 1
0003136F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031374 01                         byte_2C5C6:	dc.b 1
00031375 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003137A 01                         byte_2C5CC:	dc.b 1
0003137B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00031380 01                         byte_2C5D2:	dc.b 1
00031381 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031386 01                         byte_2C5D8:	dc.b 1
00031387 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003138C 01                         byte_2C5DE:	dc.b 1
0003138D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00031392                            		even
00031392                            		even
00031392                            ; ---------------------------------------------------------------------------
00031392                            ; Compressed graphics - special stage
00031392                            ; ---------------------------------------------------------------------------
00031392                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031CCA                            		even
00031CCA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031E18                            		even
00031E18                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000332AA                            		even
000332AA                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000335AA                            		even
000335AA                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033A9E                            		even
00033A9E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033B8C                            		even
00033B8C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033C5C                            		even
00033C5C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033D52                            		even
00033D52                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033DB0                            		even
00033DB0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033E42                            		even
00033E42                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033F04                            		even
00033F04                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033FD2                            		even
00033FD2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003409E                            		even
0003409E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034166                            		even
00034166                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00034230                            		even
00034230                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00034300                            		even
00034300                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000344F4                            		even
000344F4                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003465C                            		even
0003465C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003470C                            		even
0003470C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000347E6                            		even
000347E6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003486A                            		even
0003486A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000349E8                            		even
000349E8                            ; ---------------------------------------------------------------------------
000349E8                            ; Compressed graphics - GHZ stuff
000349E8                            ; ---------------------------------------------------------------------------
000349E8                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034A32                            		even
00034A32                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034B4C                            		even
00034B4C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034C38                            		even
00034C38                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034C80                            		even
00034C80                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034E1E                            		even
00034E1E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034EDA                            		even
00034EDA                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000350EE                            		even
000350EE                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003521A                            		even
0003521A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035348                            		even
00035348                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000353E6                            		even
000353E6                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035446                            		even
00035446                            ; ---------------------------------------------------------------------------
00035446                            ; Compressed graphics - LZ stuff
00035446                            ; ---------------------------------------------------------------------------
00035446                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003556A                            		even
0003556A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035D5E                            		even
00035D5E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035EDE                            		even
00035EDE                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00036048                            		even
00036048                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003669E                            		even
0003669E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036754                            		even
00036754                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000367F6                            		even
000367F6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036952                            		even
00036952                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000369B6                            		even
000369B6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036B08                            		even
00036B08                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036FEA                            		even
00036FEA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003715A                            		even
0003715A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037412                            		even
00037412                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003754A                            		even
0003754A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037674                            		even
00037674                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037784                            		even
00037784                            ; ---------------------------------------------------------------------------
00037784                            ; Compressed graphics - MZ stuff
00037784                            ; ---------------------------------------------------------------------------
00037784                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037A12                            		even
00037A12                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037AD0                            		even
00037AD0                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037B88                            		even
00037B88                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037BDC                            		even
00037BDC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037EAE 00                         		even
00037EAE                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000387C4                            		even
000387C4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038928                            		even
00038928                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000389B0                            		even
000389B0                            ; ---------------------------------------------------------------------------
000389B0                            ; Compressed graphics - SLZ stuff
000389B0                            ; ---------------------------------------------------------------------------
000389B0                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038BEC                            		even
00038BEC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038D32                            		even
00038D32                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038F76                            		even
00038F76                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038FD8                            		even
00038FD8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000390BA                            		even
000390BA                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003929C                            		even
0003929C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000393A8                            		even
000393A8                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003944C                            		even
0003944C                            ; ---------------------------------------------------------------------------
0003944C                            ; Compressed graphics - SYZ stuff
0003944C                            ; ---------------------------------------------------------------------------
0003944C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000395B6                            		even
000395B6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039618                            		even
00039618                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000396FA                            		even
000396FA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039988                            		even
00039988                            ; ---------------------------------------------------------------------------
00039988                            ; Compressed graphics - SBZ stuff
00039988                            ; ---------------------------------------------------------------------------
00039988                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000399DC                            		even
000399DC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039C78                            		even
00039C78                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039E7C                            		even
00039E7C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A01A                            		even
0003A01A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A34A                            		even
0003A34A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A528                            		even
0003A528                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A580                            		even
0003A580                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A74A 00                         		even
0003A74A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A848                            		even
0003A848                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A9D4                            		even
0003A9D4                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AA24                            		even
0003AA24                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AA7C                            		even
0003AA7C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AB78                            		even
0003AB78                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AC8E                            		even
0003AC8E                            ; ---------------------------------------------------------------------------
0003AC8E                            ; Compressed graphics - enemies
0003AC8E                            ; ---------------------------------------------------------------------------
0003AC8E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B0FC 00                         		even
0003B0FC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B2A6 00                         		even
0003B2A6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B668 00                         		even
0003B668                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B850                            		even
0003B850                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BA08 00                         		even
0003BA08                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BB52                            		even
0003BB52                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BDDC                            		even
0003BDDC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C400                            		even
0003C400                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C5F6                            		even
0003C5F6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CC14                            		even
0003CC14                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D014 00                         		even
0003D014                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D310                            		even
0003D310                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D558                            		even
0003D558                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D7F0                            		even
0003D7F0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D9CE                            		even
0003D9CE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DB5C                            		even
0003DB5C                            ; ---------------------------------------------------------------------------
0003DB5C                            ; Compressed graphics - various
0003DB5C                            ; ---------------------------------------------------------------------------
0003DB5C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E08C                            		even
0003E08C                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E182                            		even
0003E182                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E288                            		even
0003E288                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E37C                            		even
0003E37C                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E8C0                            		even
0003E8C0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EF26                            		even
0003EF26                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EFD6                            		even
0003EFD6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F168                            		even
0003F168                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F27C                            		even
0003F27C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F34E                            		even
0003F34E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F7CA                            		even
0003F7CA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F88A                            		even
0003F88A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F9FE                            		even
0003F9FE                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FD00                            		even
0003FD00                            ; ---------------------------------------------------------------------------
0003FD00                            ; Compressed graphics - continue screen
0003FD00                            ; ---------------------------------------------------------------------------
0003FD00                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FFB0                            		even
0003FFB0                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000401EA                            		even
000401EA                            ; ---------------------------------------------------------------------------
000401EA                            ; Compressed graphics - animals
000401EA                            ; ---------------------------------------------------------------------------
000401EA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040342                            		even
00040342                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004049E                            		even
0004049E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004061A                            		even
0004061A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040736                            		even
00040736                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004086C                            		even
0004086C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000409A6                            		even
000409A6                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040B02                            		even
00040B02                            ; ---------------------------------------------------------------------------
00040B02                            ; Compressed graphics - primary patterns and block mappings
00040B02                            ; ---------------------------------------------------------------------------
00040B02                            Blk16_GHZ:	incbin	map16\ghz.bin
00041416                            		even
00041416                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042D24                            		even
00042D24                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000440A4                            		even
000440A4                            Blk256_GHZ:	incbin	map256\ghz.bin
000464DE                            		even
000464DE                            Blk16_LZ:	incbin	map16\lz.bin
00046C18                            		even
00046C18                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004906C                            		even
0004906C                            Blk256_LZ:	incbin	map256\lz.bin
0004B9EC                            		even
0004B9EC                            Blk16_MZ:	incbin	map16\mz.bin
0004C154                            		even
0004C154                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EA90                            		even
0004EA90                            Blk256_MZ:	incbin	map256\mz.bin
00050234                            		even
00050234                            Blk16_SLZ:	incbin	map16\slz.bin
000508FE                            		even
000508FE                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052852                            		even
00052852                            Blk256_SLZ:	incbin	map256\slz.bin
00052ECC                            		even
00052ECC                            Blk16_SYZ:	incbin	map16\syz.bin
00053AF2                            		even
00053AF2                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00058084                            		even
00058084                            Blk256_SYZ:	incbin	map256\syz.bin
0005A0E0                            		even
0005A0E0                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B028                            		even
0005B028                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D9EC                            		even
0005D9EC                            Blk256_SBZ:	incbin	map256\sbz.bin
000604E2                            		even
000604E2                            Blk16_BHZ:	incbin	map16\bhz.bin
00060DF6                            		even
00060DF6                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
00062408                            		even
00062408                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
0006379C                            		even
0006379C                            Blk256_BHZ:	incbin	map256\bhz.bin
000658EC                            		even
000658EC                            ; ---------------------------------------------------------------------------
000658EC                            ; Compressed graphics - bosses and ending sequence
000658EC                            ; ---------------------------------------------------------------------------
000658EC                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00066106 00                         		even
00066106                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00066754                            		even
00066754                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000667CE                            		even
000667CE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066AB8                            		even
00066AB8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006733C                            		even
0006733C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00068092 00                         		even
00068092                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000687FA                            		even
000687FA                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068D7A                            		even
00068D7A                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068E9A                            		even
00068E9A                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00069098                            		even
00069098                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A276                            		even
0006A276                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006ABBA                            		even
0006ABBA                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AF90                            		even
0006AF90                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B520                            		even
0006B520                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B7A8                            		even
0006B7A8                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BD96 00                         		even
0006BD96                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C01E                            		even
0006C01E                            		incbin	misc\padding2.bin
0006C122                            		even
0006C122                            ; ---------------------------------------------------------------------------
0006C122                            ; Collision data
0006C122                            ; ---------------------------------------------------------------------------
0006C122                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C222                            		even
0006C222                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D222                            		even
0006D222                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E222                            		even
0006E222                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E3DA 00                         		even
0006E3DA                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E542                            		even
0006E542                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E6D2 00                         		even
0006E6D2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E8C6                            		even
0006E8C6                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EACC                            		even
0006EACC                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006ED6A                            		even
0006ED6A                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EF22 00                         		even
0006EF22                            ; ---------------------------------------------------------------------------
0006EF22                            ; Special layouts
0006EF22                            ; ---------------------------------------------------------------------------
0006EF22                            SS_1:		incbin	sslayout\1.bin
0006F16A                            		even
0006F16A                            SS_2:		incbin	sslayout\2.bin
0006F522                            		even
0006F522                            SS_3:		incbin	sslayout\3.bin
0006F87E                            		even
0006F87E                            SS_4:		incbin	sslayout\4.bin
0006FD58                            		even
0006FD58                            SS_5:		incbin	sslayout\5.bin
00070208                            		even
00070208                            SS_6:		incbin	sslayout\6.bin
000704FA                            		even
000704FA                            ; ---------------------------------------------------------------------------
000704FA                            ; Animated uncompressed graphics
000704FA                            ; ---------------------------------------------------------------------------
000704FA                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000706FA                            		even
000706FA                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070AFA                            		even
00070AFA                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070F7A                            		even
00070F7A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007127A                            		even
0007127A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007187A                            		even
0007187A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071B7A                            		even
00071B7A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000725FA                            		even
000725FA                            
000725FA                            ; ---------------------------------------------------------------------------
000725FA                            ; Level	layout index
000725FA                            ; ---------------------------------------------------------------------------
000725FA 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00072600 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00072606 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007260C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00072612 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00072618 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007261E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00072624 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007262A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00072630 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00072636 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007263C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00072642 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072648 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007264E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072654 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007265A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00072660 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00072666 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007266C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00072672 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00072678 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007267E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00072684 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007268A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072690 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072696 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007269C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000726A2 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000726A8 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000726AE 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000726B4 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000726BA                            
000726BA                            Level_GHZ1:	incbin	levels\ghz1.bin
000727AC                            		even
000727AC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000727B0                            Level_GHZ2:	incbin	levels\ghz2.bin
00072878                            		even
00072878 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007287C                            Level_GHZ3:	incbin	levels\ghz3.bin
0007299E                            		even
0007299E                            Level_GHZbg:	incbin	levels\ghzbg.bin
000729C0                            		even
000729C0 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000729C4 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000729C8                            
000729C8                            Level_LZ1:	incbin	levels\lz1.bin
00072ACA                            		even
00072ACA                            Level_LZbg:	incbin	levels\lzbg.bin
00072BCC                            		even
00072BCC 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072BD0                            Level_LZ2:	incbin	levels\lz2.bin
00072C6A                            		even
00072C6A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072C6E                            Level_LZ3:	incbin	levels\lz3.bin
00072D88                            		even
00072D88 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072D8C                            Level_SBZ3:	incbin	levels\sbz3.bin
00072E46                            		even
00072E46 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072E4A                            
00072E4A                            Level_MZ1:	incbin	levels\mz1.bin
00072EE8                            		even
00072EE8                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072F62                            		even
00072F62                            Level_MZ2:	incbin	levels\mz2.bin
00073006                            		even
00073006                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00073098                            		even
00073098 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007309C                            Level_MZ3:	incbin	levels\mz3.bin
0007317E                            		even
0007317E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00073222 00                         		even
00073222 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00073226 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007322A                            
0007322A                            Level_SLZ1:	incbin	levels\slz1.bin
0007333C                            		even
0007333C                            Level_SLZbg:	incbin	levels\slzbg.bin
00073356                            		even
00073356                            Level_SLZ2:	incbin	levels\slz2.bin
00073446                            		even
00073446                            Level_SLZ3:	incbin	levels\slz3.bin
00073560                            		even
00073560 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00073564                            
00073564                            Level_SYZ1:	incbin	levels\syz1.bin
00073620 00                         		even
00073620                            Level_SYZbg:	incbin	levels\syzbg.bin
0007365A                            		even
0007365A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007365E                            Level_SYZ2:	incbin	levels\syz2.bin
00073762                            		even
00073762 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073766                            Level_SYZ3:	incbin	levels\syz3.bin
000738C0 00                         		even
000738C0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000738C4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000738C8                            
000738C8                            Level_SBZ1:	incbin	levels\sbz1.bin
000739EA                            		even
000739EA                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00073A28                            		even
00073A28                            Level_SBZ2:	incbin	levels\sbz2.bin
00073B6A                            		even
00073B6A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073CD4                            		even
00073CD4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073CD8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073CDC                            Level_End:	incbin	levels\ending.bin
00073D0C 00                         		even
00073D0C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073D10                            Level_BHZ1:	incbin	levels\bhz1.bin
00073E02                            		even
00073E02                            
00073E02                            Level_BHZ2:	incbin	levels\bhz2.bin
00073ECA                            		even
00073ECA                            
00073ECA                            Level_BHZ3:	incbin	levels\bhz3.bin
00073FEC                            		even
00073FEC                            Level_BHZbg:	incbin	levels\bhzbg.bin
0007400E                            		even
0007400E                            ; ---------------------------------------------------------------------------
0007400E                            ; Animated uncompressed giant ring graphics
0007400E                            ; ---------------------------------------------------------------------------
0007400E                            Art_BigRing:	incbin	artunc\bigring.bin
00074C4E                            		even
00074C4E                            
00074C4E                            		incbin	misc\padding3.bin
00074CEA                            		even
00074CEA                            
00074CEA                            ; ---------------------------------------------------------------------------
00074CEA                            ; Sprite locations index
00074CEA                            ; ---------------------------------------------------------------------------
00074CEA 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CEE 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CF2 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CF6 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CFA 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CFE 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D02 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D06 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D0A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D0E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D12 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D16 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D1A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D1E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D22 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D26 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D2A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D2E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D32 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D36 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D3A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D3E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D42 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D46 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D4A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D4E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D52 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D56 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D5A 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D5E 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D62 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D66 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D6A                            ObjPos_LZxpf_Index:
00074D6A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00074D6E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00074D72 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00074D76 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00074D7A                            
00074D7A                            ObjPos_SBZ1pf_Index:
00074D7A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00074D7E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00074D82 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00074D86 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00074D8A FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074D90                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000755DC                            		even
000755DC                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000758A6                            		even
000758A6                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00076272                            		even
00076272                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007661A                            		even
0007661A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076950                            		even
00076950                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076E66                            		even
00076E66                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000772FE                            		even
000772FE                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00077330                            		even
00077330                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00077362                            		even
00077362                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00077394                            		even
00077394                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000773C6                            		even
000773C6                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00077410                            		even
00077410                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007744E                            		even
0007744E                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000777BA                            		even
000777BA                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077C64                            		even
00077C64                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000781DA                            		even
000781DA                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078204                            		even
00078204                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007866C                            		even
0007866C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078C4E                            		even
00078C4E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000792C0                            		even
000792C0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007982A                            		even
0007982A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079E30                            		even
00079E30                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A56E                            		even
0007A56E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AC4C                            		even
0007AC4C                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AC5E                            		even
0007AC5E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AC90                            		even
0007AC90                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007ACC2                            		even
0007ACC2                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007ACF4                            		even
0007ACF4                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007AD26                            		even
0007AD26                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AD58                            		even
0007AD58                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007AD90                            		even
0007AD90                            ObjPos_End:	incbin	objpos\ending.bin
0007AEEC                            		even
0007AEEC                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B4F2                            		even
0007B4F2                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BAB6                            		even
0007BAB6                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C170                            		even
0007C170 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C176                            ; ---------------------------------------------------------------------------
0007C176                            		incbin	misc\padding4.bin
0007C7A0                            		even
0007C7A0                            
0007C7A0 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C7A4 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007C7A8 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007C7AC 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007C7B0 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007C7B4 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C7B8                            ; ---------------------------------------------------------------------------
0007C7B8                            ; PSG instruments used in music
0007C7B8                            ; ---------------------------------------------------------------------------
0007C7B8 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C7C4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C7D0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C7DC                            
0007C7DC 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C7EC 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C7F3                            
0007C7F3 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C7FA                            
0007C7FA 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C80A 80                                     dc.b    $80
0007C80B                            
0007C80B 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C816                            
0007C816 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C826 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C836 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C840                            
0007C840 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C84F                            
0007C84F 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C85F 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C86B                            
0007C86B 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C87B 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C88B 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C893                            
0007C893 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C8A3 80                                     dc.b    $80
0007C8A4                            
0007C8A4 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C8AC                            ; ---------------------------------------------------------------------------
0007C8AC                            ; Music	Pointers
0007C8AC                            ; ---------------------------------------------------------------------------
0007C8AC 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007C8B4 0000 0000 0000 0000        		dc.l Music83, Music84
0007C8BC 0000 0000 0000 0000        		dc.l Music85, Music86
0007C8C4 0000 0000 0000 0000        		dc.l Music87, Music88
0007C8CC 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C8D4 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C8DC 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C8E4 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C8EC 0000 0000 0000 0000        		dc.l Music91, Music92
0007C8F4 0000 0000 0000 0000        		dc.l Music93, Music94
0007C8FC 0000 0000 0000 0000        		dc.l Music95, Music96
0007C904 0000 0000 0000 0000        		dc.l Music97, Music98
0007C90C 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C914 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C91C 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C924 0000 0000                  		dc.l Music9F
0007C928                            ; ---------------------------------------------------------------------------
0007C928                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007C928                            ; ---------------------------------------------------------------------------
0007C928 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007C938 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007C948 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007C958 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007C968 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007C978 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007C988 9090 9090                  		dc.b $90, $90, $90, $90
0007C98C                            
0007C98C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C98C                            
0007C98C                            
0007C98C                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007C98C                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007C98C 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0007C992 6700                       		beq.s	@main
0007C994 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007C996 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007C99A 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007C99E 4840                       		swap	d0
0007C9A0 4A40                       		tst.w	d0
0007C9A2 6600                       		bne.s	@main
0007C9A4 6100 0000                  		bsr.w	@main
0007C9A8                            @main:
0007C9A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007C9B0 4E71                       		nop
0007C9B2 4E71                       		nop
0007C9B4 4E71                       		nop
0007C9B6                            ; loc_71B5A:
0007C9B6                            @wait:
0007C9B6 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007C9BE 66F6                       		bne.s	@wait
0007C9C0                            
0007C9C0 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007C9C8 6700                       		beq.s	loc_71B82
0007C9CA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C9D2 4E71                       		nop
0007C9D4 4E71                       		nop
0007C9D6 4E71                       		nop
0007C9D8 4E71                       		nop
0007C9DA 4E71                       		nop
0007C9DC 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007C9DE                            ; ===========================================================================
0007C9DE                            
0007C9DE                            loc_71B82:
0007C9DE 4DF9 00FF F000             		lea	($FFF000).l,a6
0007C9E4 422E 000E                  		clr.b	$E(a6)
0007C9E8 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007C9EC 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007C9F0 532E 0001                  		subq.b	#1,1(a6)
0007C9F4 6600                       		bne.s	loc_71B9E
0007C9F6 4EBA 0000                  		jsr	sub_7260C(pc)
0007C9FA                            
0007C9FA                            loc_71B9E:
0007C9FA 102E 0004                  		move.b	4(a6),d0
0007C9FE 6700                       		beq.s	loc_71BA8
0007CA00 4EBA 0000                  		jsr	sub_72504(pc)
0007CA04                            
0007CA04                            loc_71BA8:
0007CA04 4A2E 0024                  		tst.b	$24(a6)
0007CA08 6700                       		beq.s	loc_71BB2
0007CA0A 4EBA 0000                  		jsr	sub_7267C(pc)
0007CA0E                            
0007CA0E                            loc_71BB2:
0007CA0E 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007CA12 6700                       		beq.s	loc_71BBC	; if not, branch
0007CA14 4EBA 0000                  		jsr	Sound_Play(pc)
0007CA18                            
0007CA18                            loc_71BBC:
0007CA18 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CA1E 6700                       		beq.s	loc_71BC8
0007CA20 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007CA24                            
0007CA24                            loc_71BC8:
0007CA24 4BEE 0040                  		lea	$40(a6),a5
0007CA28 4A15                       		tst.b	(a5)
0007CA2A 6A00                       		bpl.s	loc_71BD4
0007CA2C 4EBA 0000                  		jsr	sub_71C4E(pc)
0007CA30                            
0007CA30                            loc_71BD4:
0007CA30 422E 0008                  		clr.b	8(a6)
0007CA34 7E05                       		moveq	#5,d7
0007CA36                            
0007CA36                            loc_71BDA:
0007CA36 DAFC 0030                  		adda.w	#$30,a5
0007CA3A 4A15                       		tst.b	(a5)
0007CA3C 6A00                       		bpl.s	loc_71BE6
0007CA3E 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CA42                            
0007CA42                            loc_71BE6:
0007CA42 51CF FFF2                  		dbf	d7,loc_71BDA
0007CA46                            
0007CA46 7E02                       		moveq	#2,d7
0007CA48                            
0007CA48                            loc_71BEC:
0007CA48 DAFC 0030                  		adda.w	#$30,a5
0007CA4C 4A15                       		tst.b	(a5)
0007CA4E 6A00                       		bpl.s	loc_71BF8
0007CA50 4EBA 0000                  		jsr	sub_72850(pc)
0007CA54                            
0007CA54                            loc_71BF8:
0007CA54 51CF FFF2                  		dbf	d7,loc_71BEC
0007CA58                            
0007CA58 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CA5E 7E02                       		moveq	#2,d7
0007CA60                            
0007CA60                            loc_71C04:
0007CA60 DAFC 0030                  		adda.w	#$30,a5
0007CA64 4A15                       		tst.b	(a5)
0007CA66 6A00                       		bpl.s	loc_71C10
0007CA68 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CA6C                            
0007CA6C                            loc_71C10:
0007CA6C 51CF FFF2                  		dbf	d7,loc_71C04
0007CA70                            
0007CA70 7E02                       		moveq	#2,d7
0007CA72                            
0007CA72                            loc_71C16:
0007CA72 DAFC 0030                  		adda.w	#$30,a5
0007CA76 4A15                       		tst.b	(a5)
0007CA78 6A00                       		bpl.s	loc_71C22
0007CA7A 4EBA 0000                  		jsr	sub_72850(pc)
0007CA7E                            
0007CA7E                            loc_71C22:
0007CA7E 51CF FFF2                  		dbf	d7,loc_71C16
0007CA82 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CA88 DAFC 0030                  		adda.w	#$30,a5
0007CA8C 4A15                       		tst.b	(a5)
0007CA8E 6A00                       		bpl.s	loc_71C38
0007CA90 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CA94                            
0007CA94                            loc_71C38:
0007CA94 DAFC 0030                  		adda.w	#$30,a5
0007CA98 4A15                       		tst.b	(a5)
0007CA9A 6A00                       		bpl.s	loc_71C44
0007CA9C 4EBA 0000                  		jsr	sub_72850(pc)
0007CAA0                            
0007CAA0                            loc_71C44:
0007CAA0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CAA8 4E75                       		rts	
0007CAAA                            ; End of function sub_71B4C
0007CAAA                            
0007CAAA                            
0007CAAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CAAA                            
0007CAAA                            
0007CAAA                            sub_71C4E:				; XREF: sub_71B4C
0007CAAA 532D 000E                  		subq.b	#1,$E(a5)
0007CAAE 6600                       		bne.s	locret_71CAA
0007CAB0 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CAB6 286D 0004                  		movea.l	4(a5),a4
0007CABA                            
0007CABA                            loc_71C5E:
0007CABA 7A00                       		moveq	#0,d5
0007CABC 1A1C                       		move.b	(a4)+,d5
0007CABE 0C05 00E0                  		cmpi.b	#-$20,d5
0007CAC2 6500                       		bcs.s	loc_71C6E
0007CAC4 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CAC8 60F0                       		bra.s	loc_71C5E
0007CACA                            ; ===========================================================================
0007CACA                            
0007CACA                            loc_71C6E:
0007CACA 4A05                       		tst.b	d5
0007CACC 6A00                       		bpl.s	loc_71C84
0007CACE 1B45 0010                  		move.b	d5,$10(a5)
0007CAD2 1A1C                       		move.b	(a4)+,d5
0007CAD4 6A00                       		bpl.s	loc_71C84
0007CAD6 534C                       		subq.w	#1,a4
0007CAD8 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CADE 6000                       		bra.s	loc_71C88
0007CAE0                            ; ===========================================================================
0007CAE0                            
0007CAE0                            loc_71C84:
0007CAE0 4EBA 0000                  		jsr	sub_71D40(pc)
0007CAE4                            
0007CAE4                            loc_71C88:
0007CAE4 2B4C 0004                  		move.l	a4,4(a5)
0007CAE8 0815 0002                  		btst	#2,(a5)
0007CAEC 6600                       		bne.s	locret_71CAA
0007CAEE 7000                       		moveq	#0,d0
0007CAF0 102D 0010                  		move.b	$10(a5),d0
0007CAF4 0C00 0080                  		cmpi.b	#$80,d0
0007CAF8 6700                       		beq.s	locret_71CAA
0007CAFA 0800 0003                  		btst	#3,d0
0007CAFE 6600                       		bne.s	loc_71CAC
0007CB00 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CB06                            
0007CB06                            locret_71CAA:
0007CB06 4E75                       		rts	
0007CB08                            ; ===========================================================================
0007CB08                            
0007CB08                            loc_71CAC:
0007CB08 0400 0088                  		subi.b	#$88,d0
0007CB0C 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CB10 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CB16 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CB1E 4E75                       		rts	
0007CB20                            ; End of function sub_71C4E
0007CB20                            
0007CB20                            ; ===========================================================================
0007CB20 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CB26                            
0007CB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB26                            
0007CB26                            
0007CB26                            sub_71CCA:				; XREF: sub_71B4C
0007CB26 532D 000E                  		subq.b	#1,$E(a5)
0007CB2A 6600                       		bne.s	loc_71CE0
0007CB2C 0895 0004                  		bclr	#4,(a5)
0007CB30 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CB34 4EBA 0000                  		jsr	sub_71E18(pc)
0007CB38 6000 0000                  		bra.w	loc_726E2
0007CB3C                            ; ===========================================================================
0007CB3C                            
0007CB3C                            loc_71CE0:
0007CB3C 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CB40 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CB44 6000 0000                  		bra.w	loc_71E24
0007CB48                            ; End of function sub_71CCA
0007CB48                            
0007CB48                            
0007CB48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB48                            
0007CB48                            
0007CB48                            sub_71CEC:				; XREF: sub_71CCA
0007CB48 286D 0004                  		movea.l	4(a5),a4
0007CB4C 0895 0001                  		bclr	#1,(a5)
0007CB50                            
0007CB50                            loc_71CF4:
0007CB50 7A00                       		moveq	#0,d5
0007CB52 1A1C                       		move.b	(a4)+,d5
0007CB54 0C05 00E0                  		cmpi.b	#-$20,d5
0007CB58 6500                       		bcs.s	loc_71D04
0007CB5A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CB5E 60F0                       		bra.s	loc_71CF4
0007CB60                            ; ===========================================================================
0007CB60                            
0007CB60                            loc_71D04:
0007CB60 4EBA 0000                  		jsr	sub_726FE(pc)
0007CB64 4A05                       		tst.b	d5
0007CB66 6A00                       		bpl.s	loc_71D1A
0007CB68 4EBA 0000                  		jsr	sub_71D22(pc)
0007CB6C 1A1C                       		move.b	(a4)+,d5
0007CB6E 6A00                       		bpl.s	loc_71D1A
0007CB70 534C                       		subq.w	#1,a4
0007CB72 6000 0000                  		bra.w	sub_71D60
0007CB76                            ; ===========================================================================
0007CB76                            
0007CB76                            loc_71D1A:
0007CB76 4EBA 0000                  		jsr	sub_71D40(pc)
0007CB7A 6000 0000                  		bra.w	sub_71D60
0007CB7E                            ; End of function sub_71CEC
0007CB7E                            
0007CB7E                            
0007CB7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB7E                            
0007CB7E                            
0007CB7E                            sub_71D22:				; XREF: sub_71CEC
0007CB7E 0405 0080                  		subi.b	#$80,d5
0007CB82 6700                       		beq.s	loc_71D58
0007CB84 DA2D 0008                  		add.b	8(a5),d5
0007CB88 0245 007F                  		andi.w	#$7F,d5
0007CB8C E34D                       		lsl.w	#1,d5
0007CB8E 41FA 0000                  		lea	word_72790(pc),a0
0007CB92 3C30 5000                  		move.w	(a0,d5.w),d6
0007CB96 3B46 0010                  		move.w	d6,$10(a5)
0007CB9A 4E75                       		rts	
0007CB9C                            ; End of function sub_71D22
0007CB9C                            
0007CB9C                            
0007CB9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB9C                            
0007CB9C                            
0007CB9C                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CB9C 1005                       		move.b	d5,d0
0007CB9E 122D 0002                  		move.b	2(a5),d1
0007CBA2                            
0007CBA2                            loc_71D46:
0007CBA2 5301                       		subq.b	#1,d1
0007CBA4 6700                       		beq.s	loc_71D4E
0007CBA6 D005                       		add.b	d5,d0
0007CBA8 60F8                       		bra.s	loc_71D46
0007CBAA                            ; ===========================================================================
0007CBAA                            
0007CBAA                            loc_71D4E:
0007CBAA 1B40 000F                  		move.b	d0,$F(a5)
0007CBAE 1B40 000E                  		move.b	d0,$E(a5)
0007CBB2 4E75                       		rts	
0007CBB4                            ; End of function sub_71D40
0007CBB4                            
0007CBB4                            ; ===========================================================================
0007CBB4                            
0007CBB4                            loc_71D58:				; XREF: sub_71D22
0007CBB4 08D5 0001                  		bset	#1,(a5)
0007CBB8 426D 0010                  		clr.w	$10(a5)
0007CBBC                            
0007CBBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBBC                            
0007CBBC                            
0007CBBC                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CBBC 2B4C 0004                  		move.l	a4,4(a5)
0007CBC0 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CBC6 0815 0004                  		btst	#4,(a5)
0007CBCA 6600                       		bne.s	locret_71D9C
0007CBCC 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CBD2 422D 000C                  		clr.b	$C(a5)
0007CBD6 0815 0003                  		btst	#3,(a5)
0007CBDA 6700                       		beq.s	locret_71D9C
0007CBDC 206D 0014                  		movea.l	$14(a5),a0
0007CBE0 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CBE4 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CBE8 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CBEC 1018                       		move.b	(a0)+,d0
0007CBEE E208                       		lsr.b	#1,d0
0007CBF0 1B40 001B                  		move.b	d0,$1B(a5)
0007CBF4 426D 001C                  		clr.w	$1C(a5)
0007CBF8                            
0007CBF8                            locret_71D9C:
0007CBF8 4E75                       		rts	
0007CBFA                            ; End of function sub_71D60
0007CBFA                            
0007CBFA                            
0007CBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBFA                            
0007CBFA                            
0007CBFA                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CBFA 4A2D 0012                  		tst.b	$12(a5)
0007CBFE 6700                       		beq.s	locret_71DC4
0007CC00 532D 0012                  		subq.b	#1,$12(a5)
0007CC04 6600                       		bne.s	locret_71DC4
0007CC06 08D5 0001                  		bset	#1,(a5)
0007CC0A 4A2D 0001                  		tst.b	1(a5)
0007CC0E 6B00 0000                  		bmi.w	loc_71DBE
0007CC12 4EBA 0000                  		jsr	sub_726FE(pc)
0007CC16 584F                       		addq.w	#4,sp
0007CC18 4E75                       		rts	
0007CC1A                            ; ===========================================================================
0007CC1A                            
0007CC1A                            loc_71DBE:
0007CC1A 4EBA 0000                  		jsr	sub_729A0(pc)
0007CC1E 584F                       		addq.w	#4,sp
0007CC20                            
0007CC20                            locret_71DC4:
0007CC20 4E75                       		rts	
0007CC22                            ; End of function sub_71D9E
0007CC22                            
0007CC22                            
0007CC22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC22                            
0007CC22                            
0007CC22                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CC22 584F                       		addq.w	#4,sp
0007CC24 0815 0003                  		btst	#3,(a5)
0007CC28 6700                       		beq.s	locret_71E16
0007CC2A 4A2D 0018                  		tst.b	$18(a5)
0007CC2E 6700                       		beq.s	loc_71DDA
0007CC30 532D 0018                  		subq.b	#1,$18(a5)
0007CC34 4E75                       		rts	
0007CC36                            ; ===========================================================================
0007CC36                            
0007CC36                            loc_71DDA:
0007CC36 532D 0019                  		subq.b	#1,$19(a5)
0007CC3A 6700                       		beq.s	loc_71DE2
0007CC3C 4E75                       		rts	
0007CC3E                            ; ===========================================================================
0007CC3E                            
0007CC3E                            loc_71DE2:
0007CC3E 206D 0014                  		movea.l	$14(a5),a0
0007CC42 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CC48 4A2D 001B                  		tst.b	$1B(a5)
0007CC4C 6600                       		bne.s	loc_71DFE
0007CC4E 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CC54 442D 001A                  		neg.b	$1A(a5)
0007CC58 4E75                       		rts	
0007CC5A                            ; ===========================================================================
0007CC5A                            
0007CC5A                            loc_71DFE:
0007CC5A 532D 001B                  		subq.b	#1,$1B(a5)
0007CC5E 1C2D 001A                  		move.b	$1A(a5),d6
0007CC62 4886                       		ext.w	d6
0007CC64 DC6D 001C                  		add.w	$1C(a5),d6
0007CC68 3B46 001C                  		move.w	d6,$1C(a5)
0007CC6C DC6D 0010                  		add.w	$10(a5),d6
0007CC70 594F                       		subq.w	#4,sp
0007CC72                            
0007CC72                            locret_71E16:
0007CC72 4E75                       		rts	
0007CC74                            ; End of function sub_71DC6
0007CC74                            
0007CC74                            
0007CC74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC74                            
0007CC74                            
0007CC74                            sub_71E18:				; XREF: sub_71CCA
0007CC74 0815 0001                  		btst	#1,(a5)
0007CC78 6600                       		bne.s	locret_71E48
0007CC7A 3C2D 0010                  		move.w	$10(a5),d6
0007CC7E 6700                       		beq.s	loc_71E4A
0007CC80                            
0007CC80                            loc_71E24:				; XREF: sub_71CCA
0007CC80 102D 001E                  		move.b	$1E(a5),d0
0007CC84 4880                       		ext.w	d0
0007CC86 DC40                       		add.w	d0,d6
0007CC88 0815 0002                  		btst	#2,(a5)
0007CC8C 6600                       		bne.s	locret_71E48
0007CC8E 3206                       		move.w	d6,d1
0007CC90 E049                       		lsr.w	#8,d1
0007CC92 103C 00A4                  		move.b	#-$5C,d0
0007CC96 4EBA 0000                  		jsr	sub_72722(pc)
0007CC9A 1206                       		move.b	d6,d1
0007CC9C 103C 00A0                  		move.b	#-$60,d0
0007CCA0 4EBA 0000                  		jsr	sub_72722(pc)
0007CCA4                            
0007CCA4                            locret_71E48:
0007CCA4 4E75                       		rts	
0007CCA6                            ; ===========================================================================
0007CCA6                            
0007CCA6                            loc_71E4A:
0007CCA6 08D5 0001                  		bset	#1,(a5)
0007CCAA 4E75                       		rts	
0007CCAC                            ; End of function sub_71E18
0007CCAC                            
0007CCAC                            ; ===========================================================================
0007CCAC                            
0007CCAC                            loc_71E50:				; XREF: sub_71B4C
0007CCAC 6B00                       		bmi.s	loc_71E94
0007CCAE 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CCB4 6700 0000                  		beq.w	loc_71EFE
0007CCB8 1D7C 0002 0003             		move.b	#2,3(a6)
0007CCBE 7602                       		moveq	#2,d3
0007CCC0 103C 00B4                  		move.b	#-$4C,d0
0007CCC4 7200                       		moveq	#0,d1
0007CCC6                            
0007CCC6                            loc_71E6A:
0007CCC6 4EBA 0000                  		jsr	sub_7272E(pc)
0007CCCA 4EBA 0000                  		jsr	sub_72764(pc)
0007CCCE 5200                       		addq.b	#1,d0
0007CCD0 51CB FFF4                  		dbf	d3,loc_71E6A
0007CCD4                            
0007CCD4 7602                       		moveq	#2,d3
0007CCD6 7028                       		moveq	#$28,d0
0007CCD8                            
0007CCD8                            loc_71E7C:
0007CCD8 1203                       		move.b	d3,d1
0007CCDA 4EBA 0000                  		jsr	sub_7272E(pc)
0007CCDE 5801                       		addq.b	#4,d1
0007CCE0 4EBA 0000                  		jsr	sub_7272E(pc)
0007CCE4 51CB FFF2                  		dbf	d3,loc_71E7C
0007CCE8                            
0007CCE8 4EBA 0000                  		jsr	sub_729B6(pc)
0007CCEC 6000 FDB2                  		bra.w	loc_71C44
0007CCF0                            ; ===========================================================================
0007CCF0                            
0007CCF0                            loc_71E94:				; XREF: loc_71E50
0007CCF0 422E 0003                  		clr.b	3(a6)
0007CCF4 7630                       		moveq	#$30,d3
0007CCF6 4BEE 0040                  		lea	$40(a6),a5
0007CCFA 7806                       		moveq	#6,d4
0007CCFC                            
0007CCFC                            loc_71EA0:
0007CCFC 0815 0007                  		btst	#7,(a5)
0007CD00 6700                       		beq.s	loc_71EB8
0007CD02 0815 0002                  		btst	#2,(a5)
0007CD06 6600                       		bne.s	loc_71EB8
0007CD08 103C 00B4                  		move.b	#-$4C,d0
0007CD0C 122D 000A                  		move.b	$A(a5),d1
0007CD10 4EBA 0000                  		jsr	sub_72722(pc)
0007CD14                            
0007CD14                            loc_71EB8:
0007CD14 DAC3                       		adda.w	d3,a5
0007CD16 51CC FFE4                  		dbf	d4,loc_71EA0
0007CD1A                            
0007CD1A 4BEE 0220                  		lea	$220(a6),a5
0007CD1E 7802                       		moveq	#2,d4
0007CD20                            
0007CD20                            loc_71EC4:
0007CD20 0815 0007                  		btst	#7,(a5)
0007CD24 6700                       		beq.s	loc_71EDC
0007CD26 0815 0002                  		btst	#2,(a5)
0007CD2A 6600                       		bne.s	loc_71EDC
0007CD2C 103C 00B4                  		move.b	#-$4C,d0
0007CD30 122D 000A                  		move.b	$A(a5),d1
0007CD34 4EBA 0000                  		jsr	sub_72722(pc)
0007CD38                            
0007CD38                            loc_71EDC:
0007CD38 DAC3                       		adda.w	d3,a5
0007CD3A 51CC FFE4                  		dbf	d4,loc_71EC4
0007CD3E                            
0007CD3E 4BEE 0340                  		lea	$340(a6),a5
0007CD42 0815 0007                  		btst	#7,(a5)
0007CD46 6700                       		beq.s	loc_71EFE
0007CD48 0815 0002                  		btst	#2,(a5)
0007CD4C 6600                       		bne.s	loc_71EFE
0007CD4E 103C 00B4                  		move.b	#-$4C,d0
0007CD52 122D 000A                  		move.b	$A(a5),d1
0007CD56 4EBA 0000                  		jsr	sub_72722(pc)
0007CD5A                            
0007CD5A                            loc_71EFE:
0007CD5A 6000 FD44                  		bra.w	loc_71C44
0007CD5E                            
0007CD5E                            ; ---------------------------------------------------------------------------
0007CD5E                            ; Subroutine to	play a sound or	music track
0007CD5E                            ; ---------------------------------------------------------------------------
0007CD5E                            
0007CD5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD5E                            
0007CD5E                            
0007CD5E                            Sound_Play:				; XREF: sub_71B4C
0007CD5E 2079 0007 C7A0             		movea.l	(Go_SoundTypes).l,a0
0007CD64 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CD68 1616                       		move.b	0(a6),d3
0007CD6A 7802                       		moveq	#2,d4
0007CD6C                            
0007CD6C                            loc_71F12:
0007CD6C 1011                       		move.b	(a1),d0		; move track number to d0
0007CD6E 1200                       		move.b	d0,d1
0007CD70 4219                       		clr.b	(a1)+
0007CD72 0400 0081                  		subi.b	#$81,d0
0007CD76 6500                       		bcs.s	loc_71F3E
0007CD78 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CD7E 6700                       		beq.s	loc_71F2C
0007CD80 1D41 000A                  		move.b	d1,$A(a6)
0007CD84 6000                       		bra.s	loc_71F3E
0007CD86                            ; ===========================================================================
0007CD86                            
0007CD86                            loc_71F2C:
0007CD86 0240 007F                  		andi.w	#$7F,d0
0007CD8A 1430 0000                  		move.b	(a0,d0.w),d2
0007CD8E B403                       		cmp.b	d3,d2
0007CD90 6500                       		bcs.s	loc_71F3E
0007CD92 1602                       		move.b	d2,d3
0007CD94 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CD98                            
0007CD98                            loc_71F3E:
0007CD98 51CC FFD2                  		dbf	d4,loc_71F12
0007CD9C                            
0007CD9C 4A03                       		tst.b	d3
0007CD9E 6B00                       		bmi.s	locret_71F4A
0007CDA0 1C83                       		move.b	d3,0(a6)
0007CDA2                            
0007CDA2                            locret_71F4A:
0007CDA2 4E75                       		rts	
0007CDA4                            ; End of function Sound_Play
0007CDA4                            
0007CDA4                            
0007CDA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CDA4                            
0007CDA4                            
0007CDA4                            Sound_ChkValue:				; XREF: sub_71B4C
0007CDA4 7E00                       		moveq	#0,d7
0007CDA6 1E2E 0009                  		move.b	9(a6),d7
0007CDAA 6700 0000                  		beq.w	Sound_E4
0007CDAE 6A00                       		bpl.s	locret_71F8C
0007CDB0 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CDB6 0C07 009F                  		cmpi.b	#$9F,d7
0007CDBA 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007CDBE 0C07 00A0                  		cmpi.b	#$A0,d7
0007CDC2 6500 0000                  		bcs.w	locret_71F8C
0007CDC6 0C07 00CF                  		cmpi.b	#$CF,d7
0007CDCA 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007CDCE 0C07 00D0                  		cmpi.b	#$D0,d7
0007CDD2 6500 0000                  		bcs.w	locret_71F8C
0007CDD6 0C07 00E0                  		cmpi.b	#$E0,d7
0007CDDA 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007CDDE 0C07 00E5                  		cmpi.b	#$E5,d7
0007CDE2 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007CDE4                            
0007CDE4                            locret_71F8C:
0007CDE4 4E75                       		rts	
0007CDE6                            ; ===========================================================================
0007CDE6                            
0007CDE6                            Sound_E0toE5				; XREF: Sound_ChkValue
0007CDE6 0407 00E0                  		subi.b	#$E0,d7
0007CDEA E54F                       		lsl.w	#2,d7
0007CDEC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CDF0                            ; ===========================================================================
0007CDF0                            
0007CDF0                            Sound_ExIndex:
0007CDF0 6000 0000                  		bra.w	Sound_E0
0007CDF4                            ; ===========================================================================
0007CDF4 6000 0000                  		bra.w	Sound_E1
0007CDF8                            ; ===========================================================================
0007CDF8 6000 0000                  		bra.w	Sound_E2
0007CDFC                            ; ===========================================================================
0007CDFC 6000 0000                  		bra.w	Sound_E3
0007CE00                            ; ===========================================================================
0007CE00 6000 0000                  		bra.w	Sound_E4
0007CE04                            ; ===========================================================================
0007CE04 6000 0000                  		bra.w	Sound_E5
0007CE08                            ; ===========================================================================
0007CE08                            ; ---------------------------------------------------------------------------
0007CE08                            ; Play "Say-gaa" PCM sound
0007CE08                            ; ---------------------------------------------------------------------------
0007CE08                            
0007CE08                            Sound_E1:				  
0007CE08 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CE10 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CE18 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007CE1C 51C8 FFFE                  		dbf	d0,*
0007CE20 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CE26 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CE2C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CE34                            PlayPCM_Loop:	  
0007CE34 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CE3A 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CE3E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CE42 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CE44 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CE46 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CE4A 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CE50 4EB8 13E6                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CE54 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CE5A 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CE5C 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CE5E                            return_PlayPCM: 
0007CE5E 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007CE66 584F                       		addq.w	#4,sp 
0007CE68 4E75                       		rts
0007CE6A                            		
0007CE6A                            ; ---------------------------------------------------------------------------
0007CE6A                            ; Play you are an idiot pcm sound
0007CE6A                            ; since the sfx already crashes the game forever load it here :V
0007CE6A                            ; ---------------------------------------------------------------------------
0007CE6A                            
0007CE6A                            Sound_E5: 
0007CE6A 4EB8 14C2                  		jsr	ClearScreen
0007CE6E 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CE76 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CE7E                            
0007CE7E                            		;control port on a5
0007CE7E 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CE84 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CE8A 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CE8E 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CE92 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CE96                            		
0007CE96 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CE9A                            		
0007CE9A 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CEA0 41F9 0002 45A6             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CEA6 4EB8 163E                  		jsr	NemDec
0007CEAA 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CEB0 41F9 0002 4548             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CEB6 303C 0000                  		move.w	#0,d0
0007CEBA 4EB8 191C                  		jsr	EniDec
0007CEBE 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CEC4 203C 4304 0003             		move.l	#$43040003,d0
0007CECA 7223                       		moveq	#35,d1
0007CECC 740D                       		moveq	#13,d2
0007CECE 4EB8 161E                  		jsr	ShowVDPGraphics
0007CED2 7014                       		moveq	#20,d0
0007CED4 4EB8 22E2                  		jsr	PalLoad2	; load pallet
0007CED8                            
0007CED8                            
0007CED8 4BF9 00C0 0004             		lea	($C00004).l,a5
0007CEDE 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007CEE2 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007CEE4 6000                       		bra.s	@palett
0007CEE6                            @start:
0007CEE6 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CEEC 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007CEF2 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007CEFA                            @loop:
0007CEFA 44D5                       		move.w	(a5),ccr
0007CEFC 6B00                       		bmi.s	@vblank
0007CEFE                            
0007CEFE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CF04 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CF08 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CF0C 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CF0E 66EA                       		bne.s	@loop				; if not zero, loop
0007CF10 60D4                       		bra.s	@start
0007CF12                            @vblank:
0007CF12 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007CF18 6700                       		beq.s	@palett
0007CF1A 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007CF1E                            @loop_vblank:
0007CF1E 44D5                       		move.w	(a5),ccr
0007CF20 6AD8                       		bpl.s	@loop
0007CF22                            
0007CF22 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CF28 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CF2C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CF30 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CF32 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007CF34 60B0                       		bra.s	@start
0007CF36                            @palett:
0007CF36 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007CF3C                            
0007CF3C 4238 FE24                  		clr.b	($FFFFFE24).w
0007CF40 4638 FE25                  		not.b	($FFFFFE25).w
0007CF44 6700                       		beq.s	@not_black
0007CF46 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007CF4C 6000                       		bra.s	@merge
0007CF4E                            	@not_black:
0007CF4E 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007CF54                            	@merge:
0007CF54 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007CF58 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007CF5C 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007CF60 3A9F                       		move.w	(sp)+,(a5)
0007CF62                            		
0007CF62 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007CF66 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007CF6A 4A83                       		tst.l	d3
0007CF6C 66B0                       		bne.s	@loop_vblank
0007CF6E 6000 FF76                  		bra.w	@start
0007CF72                            ; ===========================================================================
0007CF72                            ; ---------------------------------------------------------------------------
0007CF72                            ; Play music track $81-$9F
0007CF72                            ; ---------------------------------------------------------------------------
0007CF72                            
0007CF72                            Sound_81to9F:				; XREF: Sound_ChkValue
0007CF72 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007CF76 6600                       		bne.s	loc_72024	; if not, branch
0007CF78 4A2E 0027                  		tst.b	$27(a6)
0007CF7C 6600 0000                  		bne.w	loc_721B6
0007CF80 4BEE 0040                  		lea	$40(a6),a5
0007CF84 7009                       		moveq	#9,d0
0007CF86                            
0007CF86                            loc_71FE6:
0007CF86 0895 0002                  		bclr	#2,(a5)
0007CF8A DAFC 0030                  		adda.w	#$30,a5
0007CF8E 51C8 FFF6                  		dbf	d0,loc_71FE6
0007CF92                            
0007CF92 4BEE 0220                  		lea	$220(a6),a5
0007CF96 7005                       		moveq	#5,d0
0007CF98                            
0007CF98                            loc_71FF8:
0007CF98 0895 0007                  		bclr	#7,(a5)
0007CF9C DAFC 0030                  		adda.w	#$30,a5
0007CFA0 51C8 FFF6                  		dbf	d0,loc_71FF8
0007CFA4 4216                       		clr.b	0(a6)
0007CFA6 204E                       		movea.l	a6,a0
0007CFA8 43EE 03A0                  		lea	$3A0(a6),a1
0007CFAC 303C 0087                  		move.w	#$87,d0
0007CFB0                            
0007CFB0                            loc_72012:
0007CFB0 22D8                       		move.l	(a0)+,(a1)+
0007CFB2 51C8 FFFC                  		dbf	d0,loc_72012
0007CFB6                            
0007CFB6 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007CFBC 4216                       		clr.b	0(a6)
0007CFBE 6000                       		bra.s	loc_7202C
0007CFC0                            ; ===========================================================================
0007CFC0                            
0007CFC0                            loc_72024:
0007CFC0 422E 0027                  		clr.b	$27(a6)
0007CFC4 422E 0026                  		clr.b	$26(a6)
0007CFC8                            
0007CFC8                            loc_7202C:
0007CFC8 4EBA 0000                  		jsr	sub_725CA(pc)
0007CFCC 2879 0007 C7B0             		movea.l	(off_719A0).l,a4
0007CFD2 0407 0081                  		subi.b	#$81,d7
0007CFD6 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007CFDC 2879 0007 C7A8             		movea.l	(Go_MusicIndex).l,a4
0007CFE2 E54F                       		lsl.w	#2,d7
0007CFE4 2874 7000                  		movea.l	(a4,d7.w),a4
0007CFE8 7000                       		moveq	#0,d0
0007CFEA 3014                       		move.w	(a4),d0
0007CFEC D08C                       		add.l	a4,d0
0007CFEE 2D40 0018                  		move.l	d0,$18(a6)
0007CFF2 102C 0005                  		move.b	5(a4),d0
0007CFF6 1D40 0028                  		move.b	d0,$28(a6)
0007CFFA 4A2E 002A                  		tst.b	$2A(a6)
0007CFFE 6700                       		beq.s	loc_72068
0007D000 102E 0029                  		move.b	$29(a6),d0
0007D004                            
0007D004                            loc_72068:
0007D004 1D40 0002                  		move.b	d0,2(a6)
0007D008 1D40 0001                  		move.b	d0,1(a6)
0007D00C 7200                       		moveq	#0,d1
0007D00E 264C                       		movea.l	a4,a3
0007D010 5C4C                       		addq.w	#6,a4
0007D012 7E00                       		moveq	#0,d7
0007D014 1E2B 0002                  		move.b	2(a3),d7
0007D018 6700 0000                  		beq.w	loc_72114
0007D01C 5307                       		subq.b	#1,d7
0007D01E 123C 00C0                  		move.b	#-$40,d1
0007D022 182B 0004                  		move.b	4(a3),d4
0007D026 7C30                       		moveq	#$30,d6
0007D028 1A3C 0001                  		move.b	#1,d5
0007D02C 43EE 0040                  		lea	$40(a6),a1
0007D030 45FA 0000                  		lea	byte_721BA(pc),a2
0007D034                            
0007D034                            loc_72098:
0007D034 08D1 0007                  		bset	#7,(a1)
0007D038 135A 0001                  		move.b	(a2)+,1(a1)
0007D03C 1344 0002                  		move.b	d4,2(a1)
0007D040 1346 000D                  		move.b	d6,$D(a1)
0007D044 1341 000A                  		move.b	d1,$A(a1)
0007D048 1345 000E                  		move.b	d5,$E(a1)
0007D04C 7000                       		moveq	#0,d0
0007D04E 301C                       		move.w	(a4)+,d0
0007D050 D08B                       		add.l	a3,d0
0007D052 2340 0004                  		move.l	d0,4(a1)
0007D056 335C 0008                  		move.w	(a4)+,8(a1)
0007D05A D2C6                       		adda.w	d6,a1
0007D05C 51CF FFD6                  		dbf	d7,loc_72098
0007D060 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D066 6600                       		bne.s	loc_720D8
0007D068 702B                       		moveq	#$2B,d0
0007D06A 7200                       		moveq	#0,d1
0007D06C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D070 6000 0000                  		bra.w	loc_72114
0007D074                            ; ===========================================================================
0007D074                            
0007D074                            loc_720D8:
0007D074 7028                       		moveq	#$28,d0
0007D076 7206                       		moveq	#6,d1
0007D078 4EBA 0000                  		jsr	sub_7272E(pc)
0007D07C 103C 0042                  		move.b	#$42,d0
0007D080 727F                       		moveq	#$7F,d1
0007D082 4EBA 0000                  		jsr	sub_72764(pc)
0007D086 103C 004A                  		move.b	#$4A,d0
0007D08A 727F                       		moveq	#$7F,d1
0007D08C 4EBA 0000                  		jsr	sub_72764(pc)
0007D090 103C 0046                  		move.b	#$46,d0
0007D094 727F                       		moveq	#$7F,d1
0007D096 4EBA 0000                  		jsr	sub_72764(pc)
0007D09A 103C 004E                  		move.b	#$4E,d0
0007D09E 727F                       		moveq	#$7F,d1
0007D0A0 4EBA 0000                  		jsr	sub_72764(pc)
0007D0A4 103C 00B6                  		move.b	#-$4A,d0
0007D0A8 123C 00C0                  		move.b	#-$40,d1
0007D0AC 4EBA 0000                  		jsr	sub_72764(pc)
0007D0B0                            
0007D0B0                            loc_72114:
0007D0B0 7E00                       		moveq	#0,d7
0007D0B2 1E2B 0003                  		move.b	3(a3),d7
0007D0B6 6700                       		beq.s	loc_72154
0007D0B8 5307                       		subq.b	#1,d7
0007D0BA 43EE 0190                  		lea	$190(a6),a1
0007D0BE 45FA 0000                  		lea	byte_721C2(pc),a2
0007D0C2                            
0007D0C2                            loc_72126:
0007D0C2 08D1 0007                  		bset	#7,(a1)
0007D0C6 135A 0001                  		move.b	(a2)+,1(a1)
0007D0CA 1344 0002                  		move.b	d4,2(a1)
0007D0CE 1346 000D                  		move.b	d6,$D(a1)
0007D0D2 1345 000E                  		move.b	d5,$E(a1)
0007D0D6 7000                       		moveq	#0,d0
0007D0D8 301C                       		move.w	(a4)+,d0
0007D0DA D08B                       		add.l	a3,d0
0007D0DC 2340 0004                  		move.l	d0,4(a1)
0007D0E0 335C 0008                  		move.w	(a4)+,8(a1)
0007D0E4 101C                       		move.b	(a4)+,d0
0007D0E6 135C 000B                  		move.b	(a4)+,$B(a1)
0007D0EA D2C6                       		adda.w	d6,a1
0007D0EC 51CF FFD4                  		dbf	d7,loc_72126
0007D0F0                            
0007D0F0                            loc_72154:
0007D0F0 43EE 0220                  		lea	$220(a6),a1
0007D0F4 7E05                       		moveq	#5,d7
0007D0F6                            
0007D0F6                            loc_7215A:
0007D0F6 4A11                       		tst.b	(a1)
0007D0F8 6A00 0000                  		bpl.w	loc_7217C
0007D0FC 7000                       		moveq	#0,d0
0007D0FE 1029 0001                  		move.b	1(a1),d0
0007D102 6B00                       		bmi.s	loc_7216E
0007D104 5500                       		subq.b	#2,d0
0007D106 E508                       		lsl.b	#2,d0
0007D108 6000                       		bra.s	loc_72170
0007D10A                            ; ===========================================================================
0007D10A                            
0007D10A                            loc_7216E:
0007D10A E608                       		lsr.b	#3,d0
0007D10C                            
0007D10C                            loc_72170:
0007D10C 41FA 0000                  		lea	dword_722CC(pc),a0
0007D110 2070 0000                  		movea.l	(a0,d0.w),a0
0007D114 08D0 0002                  		bset	#2,(a0)
0007D118                            
0007D118                            loc_7217C:
0007D118 D2C6                       		adda.w	d6,a1
0007D11A 51CF FFDA                  		dbf	d7,loc_7215A
0007D11E                            
0007D11E 4A6E 0340                  		tst.w	$340(a6)
0007D122 6A00                       		bpl.s	loc_7218E
0007D124 08EE 0002 0100             		bset	#2,$100(a6)
0007D12A                            
0007D12A                            loc_7218E:
0007D12A 4A6E 0370                  		tst.w	$370(a6)
0007D12E 6A00                       		bpl.s	loc_7219A
0007D130 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D136                            
0007D136                            loc_7219A:
0007D136 4BEE 0070                  		lea	$70(a6),a5
0007D13A 7805                       		moveq	#5,d4
0007D13C                            
0007D13C                            loc_721A0:
0007D13C 4EBA 0000                  		jsr	sub_726FE(pc)
0007D140 DAC6                       		adda.w	d6,a5
0007D142 51CC FFF8                  		dbf	d4,loc_721A0
0007D146 7802                       		moveq	#2,d4
0007D148                            
0007D148                            loc_721AC:
0007D148 4EBA 0000                  		jsr	sub_729A0(pc)
0007D14C DAC6                       		adda.w	d6,a5
0007D14E 51CC FFF8                  		dbf	d4,loc_721AC
0007D152                            
0007D152                            loc_721B6:
0007D152 584F                       		addq.w	#4,sp
0007D154 4E75                       		rts	
0007D156                            ; ===========================================================================
0007D156 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D15E                            		even
0007D15E 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D162                            		even
0007D162                            ; ===========================================================================
0007D162                            ; ---------------------------------------------------------------------------
0007D162                            ; Play normal sound effect
0007D162                            ; ---------------------------------------------------------------------------
0007D162                            
0007D162                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007D162 4A2E 0027                  		tst.b	$27(a6)
0007D166 6600 0000                  		bne.w	loc_722C6
0007D16A 4A2E 0004                  		tst.b	4(a6)
0007D16E 6600 0000                  		bne.w	loc_722C6
0007D172 4A2E 0024                  		tst.b	$24(a6)
0007D176 6600 0000                  		bne.w	loc_722C6
0007D17A 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D17E 6600                       		bne.s	Sound_notB5	; if not, branch
0007D180 4A2E 002B                  		tst.b	$2B(a6)
0007D184 6600                       		bne.s	loc_721EE
0007D186 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D18A                            
0007D18A                            loc_721EE:
0007D18A 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D190                            
0007D190                            Sound_notB5:
0007D190 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D194 6600                       		bne.s	Sound_notA7	; if not, branch
0007D196 4A2E 002C                  		tst.b	$2C(a6)
0007D19A 6600 0000                  		bne.w	locret_722C4
0007D19E 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D1A4                            
0007D1A4                            Sound_notA7:
0007D1A4 2079 0007 C7AC             		movea.l	(Go_SoundIndex).l,a0
0007D1AA 0407 00A0                  		subi.b	#$A0,d7
0007D1AE E54F                       		lsl.w	#2,d7
0007D1B0 2670 7000                  		movea.l	(a0,d7.w),a3
0007D1B4 224B                       		movea.l	a3,a1
0007D1B6 7200                       		moveq	#0,d1
0007D1B8 3219                       		move.w	(a1)+,d1
0007D1BA D28B                       		add.l	a3,d1
0007D1BC 1A19                       		move.b	(a1)+,d5
0007D1BE 1E19                       		move.b	(a1)+,d7
0007D1C0 5307                       		subq.b	#1,d7
0007D1C2 7C30                       		moveq	#$30,d6
0007D1C4                            
0007D1C4                            loc_72228:
0007D1C4 7600                       		moveq	#0,d3
0007D1C6 1629 0001                  		move.b	1(a1),d3
0007D1CA 1803                       		move.b	d3,d4
0007D1CC 6B00                       		bmi.s	loc_72244
0007D1CE 5543                       		subq.w	#2,d3
0007D1D0 E54B                       		lsl.w	#2,d3
0007D1D2 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D1D6 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D1DA 08D5 0002                  		bset	#2,(a5)
0007D1DE 6000                       		bra.s	loc_7226E
0007D1E0                            ; ===========================================================================
0007D1E0                            
0007D1E0                            loc_72244:
0007D1E0 E64B                       		lsr.w	#3,d3
0007D1E2 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D1E6 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D1EA 08D5 0002                  		bset	#2,(a5)
0007D1EE 0C04 00C0                  		cmpi.b	#$C0,d4
0007D1F2 6600                       		bne.s	loc_7226E
0007D1F4 1004                       		move.b	d4,d0
0007D1F6 0000 001F                  		ori.b	#$1F,d0
0007D1FA 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D200 0840 0005                  		bchg	#5,d0
0007D204 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D20A                            
0007D20A                            loc_7226E:
0007D20A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D20E 244D                       		movea.l	a5,a2
0007D210 700B                       		moveq	#$B,d0
0007D212                            
0007D212                            loc_72276:
0007D212 429A                       		clr.l	(a2)+
0007D214 51C8 FFFC                  		dbf	d0,loc_72276
0007D218                            
0007D218 3A99                       		move.w	(a1)+,(a5)
0007D21A 1B45 0002                  		move.b	d5,2(a5)
0007D21E 7000                       		moveq	#0,d0
0007D220 3019                       		move.w	(a1)+,d0
0007D222 D08B                       		add.l	a3,d0
0007D224 2B40 0004                  		move.l	d0,4(a5)
0007D228 3B59 0008                  		move.w	(a1)+,8(a5)
0007D22C 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D232 1B46 000D                  		move.b	d6,$D(a5)
0007D236 4A04                       		tst.b	d4
0007D238 6B00                       		bmi.s	loc_722A8
0007D23A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D240 2B41 0020                  		move.l	d1,$20(a5)
0007D244                            
0007D244                            loc_722A8:
0007D244 51CF FF7E                  		dbf	d7,loc_72228
0007D248                            
0007D248 4A2E 0250                  		tst.b	$250(a6)
0007D24C 6A00                       		bpl.s	loc_722B8
0007D24E 08EE 0002 0340             		bset	#2,$340(a6)
0007D254                            
0007D254                            loc_722B8:
0007D254 4A2E 0310                  		tst.b	$310(a6)
0007D258 6A00                       		bpl.s	locret_722C4
0007D25A 08EE 0002 0370             		bset	#2,$370(a6)
0007D260                            
0007D260                            locret_722C4:
0007D260 4E75                       		rts	
0007D262                            ; ===========================================================================
0007D262                            
0007D262                            loc_722C6:
0007D262 4216                       		clr.b	0(a6)
0007D264 4E75                       		rts	
0007D266                            ; ===========================================================================
0007D266 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D26A 0000 0000                  		dc.l 0
0007D26E 00FF F100                  		dc.l $FFF100
0007D272 00FF F130                  		dc.l $FFF130
0007D276 00FF F190                  		dc.l $FFF190
0007D27A 00FF F1C0                  		dc.l $FFF1C0
0007D27E 00FF F1F0                  		dc.l $FFF1F0
0007D282 00FF F1F0                  		dc.l $FFF1F0
0007D286 00FF F220                  dword_722EC:	dc.l $FFF220
0007D28A 0000 0000                  		dc.l 0
0007D28E 00FF F250                  		dc.l $FFF250
0007D292 00FF F280                  		dc.l $FFF280
0007D296 00FF F2B0                  		dc.l $FFF2B0
0007D29A 00FF F2E0                  		dc.l $FFF2E0
0007D29E 00FF F310                  		dc.l $FFF310
0007D2A2 00FF F310                  		dc.l $FFF310
0007D2A6                            ; ===========================================================================
0007D2A6                            ; ---------------------------------------------------------------------------
0007D2A6                            ; Play GHZ waterfall sound
0007D2A6                            ; ---------------------------------------------------------------------------
0007D2A6                            
0007D2A6                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D2A6 4A2E 0027                  		tst.b	$27(a6)
0007D2AA 6600 0000                  		bne.w	locret_723C6
0007D2AE 4A2E 0004                  		tst.b	4(a6)
0007D2B2 6600 0000                  		bne.w	locret_723C6
0007D2B6 4A2E 0024                  		tst.b	$24(a6)
0007D2BA 6600 0000                  		bne.w	locret_723C6
0007D2BE 2079 0007 C7A4             		movea.l	(Go_SoundD0).l,a0
0007D2C4 0407 00D0                  		subi.b	#$D0,d7
0007D2C8 E54F                       		lsl.w	#2,d7
0007D2CA 2670 7000                  		movea.l	(a0,d7.w),a3
0007D2CE 224B                       		movea.l	a3,a1
0007D2D0 7000                       		moveq	#0,d0
0007D2D2 3019                       		move.w	(a1)+,d0
0007D2D4 D08B                       		add.l	a3,d0
0007D2D6 2D40 0020                  		move.l	d0,$20(a6)
0007D2DA 1A19                       		move.b	(a1)+,d5
0007D2DC 1E19                       		move.b	(a1)+,d7
0007D2DE 5307                       		subq.b	#1,d7
0007D2E0 7C30                       		moveq	#$30,d6
0007D2E2                            
0007D2E2                            loc_72348:
0007D2E2 1829 0001                  		move.b	1(a1),d4
0007D2E6 6B00                       		bmi.s	loc_7235A
0007D2E8 08EE 0002 0100             		bset	#2,$100(a6)
0007D2EE 4BEE 0340                  		lea	$340(a6),a5
0007D2F2 6000                       		bra.s	loc_72364
0007D2F4                            ; ===========================================================================
0007D2F4                            
0007D2F4                            loc_7235A:
0007D2F4 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D2FA 4BEE 0370                  		lea	$370(a6),a5
0007D2FE                            
0007D2FE                            loc_72364:
0007D2FE 244D                       		movea.l	a5,a2
0007D300 700B                       		moveq	#$B,d0
0007D302                            
0007D302                            loc_72368:
0007D302 429A                       		clr.l	(a2)+
0007D304 51C8 FFFC                  		dbf	d0,loc_72368
0007D308                            
0007D308 3A99                       		move.w	(a1)+,(a5)
0007D30A 1B45 0002                  		move.b	d5,2(a5)
0007D30E 7000                       		moveq	#0,d0
0007D310 3019                       		move.w	(a1)+,d0
0007D312 D08B                       		add.l	a3,d0
0007D314 2B40 0004                  		move.l	d0,4(a5)
0007D318 3B59 0008                  		move.w	(a1)+,8(a5)
0007D31C 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D322 1B46 000D                  		move.b	d6,$D(a5)
0007D326 4A04                       		tst.b	d4
0007D328 6B00                       		bmi.s	loc_72396
0007D32A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D330                            
0007D330                            loc_72396:
0007D330 51CF FFB0                  		dbf	d7,loc_72348
0007D334                            
0007D334 4A2E 0250                  		tst.b	$250(a6)
0007D338 6A00                       		bpl.s	loc_723A6
0007D33A 08EE 0002 0340             		bset	#2,$340(a6)
0007D340                            
0007D340                            loc_723A6:
0007D340 4A2E 0310                  		tst.b	$310(a6)
0007D344 6A00                       		bpl.s	locret_723C6
0007D346 08EE 0002 0370             		bset	#2,$370(a6)
0007D34C 0004 001F                  		ori.b	#$1F,d4
0007D350 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D356 0844 0005                  		bchg	#5,d4
0007D35A 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D360                            
0007D360                            locret_723C6:
0007D360 4E75                       		rts	
0007D362                            ; End of function Sound_ChkValue
0007D362                            
0007D362                            ; ===========================================================================
0007D362 00FF F100                  		dc.l $FFF100
0007D366 00FF F1F0                  		dc.l $FFF1F0
0007D36A 00FF F250                  		dc.l $FFF250
0007D36E 00FF F310                  		dc.l $FFF310
0007D372 00FF F340                  		dc.l $FFF340
0007D376 00FF F370                  		dc.l $FFF370
0007D37A                            
0007D37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D37A                            
0007D37A                            
0007D37A                            Snd_FadeOut1:				; XREF: Sound_E0
0007D37A 4216                       		clr.b	0(a6)
0007D37C 4BEE 0220                  		lea	$220(a6),a5
0007D380 7E05                       		moveq	#5,d7
0007D382                            
0007D382                            loc_723EA:
0007D382 4A15                       		tst.b	(a5)
0007D384 6A00 0000                  		bpl.w	loc_72472
0007D388 0895 0007                  		bclr	#7,(a5)
0007D38C 7600                       		moveq	#0,d3
0007D38E 162D 0001                  		move.b	1(a5),d3
0007D392 6B00                       		bmi.s	loc_7243C
0007D394 4EBA 0000                  		jsr	sub_726FE(pc)
0007D398 0C03 0004                  		cmpi.b	#4,d3
0007D39C 6600                       		bne.s	loc_72416
0007D39E 4A2E 0340                  		tst.b	$340(a6)
0007D3A2 6A00                       		bpl.s	loc_72416
0007D3A4 4BEE 0340                  		lea	$340(a6),a5
0007D3A8 226E 0020                  		movea.l	$20(a6),a1
0007D3AC 6000                       		bra.s	loc_72428
0007D3AE                            ; ===========================================================================
0007D3AE                            
0007D3AE                            loc_72416:
0007D3AE 5503                       		subq.b	#2,d3
0007D3B0 E50B                       		lsl.b	#2,d3
0007D3B2 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D3B6 264D                       		movea.l	a5,a3
0007D3B8 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D3BC 226E 0018                  		movea.l	$18(a6),a1
0007D3C0                            
0007D3C0                            loc_72428:
0007D3C0 0895 0002                  		bclr	#2,(a5)
0007D3C4 08D5 0001                  		bset	#1,(a5)
0007D3C8 102D 000B                  		move.b	$B(a5),d0
0007D3CC 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D3D0 2A4B                       		movea.l	a3,a5
0007D3D2 6000                       		bra.s	loc_72472
0007D3D4                            ; ===========================================================================
0007D3D4                            
0007D3D4                            loc_7243C:
0007D3D4 4EBA 0000                  		jsr	sub_729A0(pc)
0007D3D8 41EE 0370                  		lea	$370(a6),a0
0007D3DC 0C03 00E0                  		cmpi.b	#$E0,d3
0007D3E0 6700                       		beq.s	loc_7245A
0007D3E2 0C03 00C0                  		cmpi.b	#$C0,d3
0007D3E6 6700                       		beq.s	loc_7245A
0007D3E8 E60B                       		lsr.b	#3,d3
0007D3EA 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D3EE 2070 3000                  		movea.l	(a0,d3.w),a0
0007D3F2                            
0007D3F2                            loc_7245A:
0007D3F2 0890 0002                  		bclr	#2,(a0)
0007D3F6 08D0 0001                  		bset	#1,(a0)
0007D3FA 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D400 6600                       		bne.s	loc_72472
0007D402 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D40A                            
0007D40A                            loc_72472:
0007D40A DAFC 0030                  		adda.w	#$30,a5
0007D40E 51CF FF72                  		dbf	d7,loc_723EA
0007D412                            
0007D412 4E75                       		rts	
0007D414                            ; End of function Snd_FadeOut1
0007D414                            
0007D414                            
0007D414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D414                            
0007D414                            
0007D414                            Snd_FadeOut2:				; XREF: Sound_E0
0007D414 4BEE 0340                  		lea	$340(a6),a5
0007D418 4A15                       		tst.b	(a5)
0007D41A 6A00                       		bpl.s	loc_724AE
0007D41C 0895 0007                  		bclr	#7,(a5)
0007D420 0815 0002                  		btst	#2,(a5)
0007D424 6600                       		bne.s	loc_724AE
0007D426 4EBA 0000                  		jsr	loc_7270A(pc)
0007D42A 4BEE 0100                  		lea	$100(a6),a5
0007D42E 0895 0002                  		bclr	#2,(a5)
0007D432 08D5 0001                  		bset	#1,(a5)
0007D436 4A15                       		tst.b	(a5)
0007D438 6A00                       		bpl.s	loc_724AE
0007D43A 226E 0018                  		movea.l	$18(a6),a1
0007D43E 102D 000B                  		move.b	$B(a5),d0
0007D442 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D446                            
0007D446                            loc_724AE:
0007D446 4BEE 0370                  		lea	$370(a6),a5
0007D44A 4A15                       		tst.b	(a5)
0007D44C 6A00                       		bpl.s	locret_724E4
0007D44E 0895 0007                  		bclr	#7,(a5)
0007D452 0815 0002                  		btst	#2,(a5)
0007D456 6600                       		bne.s	locret_724E4
0007D458 4EBA 0000                  		jsr	loc_729A6(pc)
0007D45C 4BEE 01F0                  		lea	$1F0(a6),a5
0007D460 0895 0002                  		bclr	#2,(a5)
0007D464 08D5 0001                  		bset	#1,(a5)
0007D468 4A15                       		tst.b	(a5)
0007D46A 6A00                       		bpl.s	locret_724E4
0007D46C 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D472 6600                       		bne.s	locret_724E4
0007D474 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D47C                            
0007D47C                            locret_724E4:
0007D47C 4E75                       		rts	
0007D47E                            ; End of function Snd_FadeOut2
0007D47E                            
0007D47E                            ; ===========================================================================
0007D47E                            ; ---------------------------------------------------------------------------
0007D47E                            ; Fade out music
0007D47E                            ; ---------------------------------------------------------------------------
0007D47E                            
0007D47E                            Sound_E0:				; XREF: Sound_ExIndex
0007D47E 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D482 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D486 1D7C 0003 0006             		move.b	#3,6(a6)
0007D48C 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D492 422E 0040                  		clr.b	$40(a6)
0007D496 422E 002A                  		clr.b	$2A(a6)
0007D49A 4E75                       		rts	
0007D49C                            
0007D49C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D49C                            
0007D49C                            
0007D49C                            sub_72504:				; XREF: sub_71B4C
0007D49C 102E 0006                  		move.b	6(a6),d0
0007D4A0 6700                       		beq.s	loc_72510
0007D4A2 532E 0006                  		subq.b	#1,6(a6)
0007D4A6 4E75                       		rts	
0007D4A8                            ; ===========================================================================
0007D4A8                            
0007D4A8                            loc_72510:
0007D4A8 532E 0004                  		subq.b	#1,4(a6)
0007D4AC 6700 0000                  		beq.w	Sound_E4
0007D4B0 1D7C 0003 0006             		move.b	#3,6(a6)
0007D4B6 4BEE 0070                  		lea	$70(a6),a5
0007D4BA 7E05                       		moveq	#5,d7
0007D4BC                            
0007D4BC                            loc_72524:
0007D4BC 4A15                       		tst.b	(a5)
0007D4BE 6A00                       		bpl.s	loc_72538
0007D4C0 522D 0009                  		addq.b	#1,9(a5)
0007D4C4 6A00                       		bpl.s	loc_72534
0007D4C6 0895 0007                  		bclr	#7,(a5)
0007D4CA 6000                       		bra.s	loc_72538
0007D4CC                            ; ===========================================================================
0007D4CC                            
0007D4CC                            loc_72534:
0007D4CC 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D4D0                            
0007D4D0                            loc_72538:
0007D4D0 DAFC 0030                  		adda.w	#$30,a5
0007D4D4 51CF FFE6                  		dbf	d7,loc_72524
0007D4D8                            
0007D4D8 7E02                       		moveq	#2,d7
0007D4DA                            
0007D4DA                            loc_72542:
0007D4DA 4A15                       		tst.b	(a5)
0007D4DC 6A00                       		bpl.s	loc_72560
0007D4DE 522D 0009                  		addq.b	#1,9(a5)
0007D4E2 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D4E8 6500                       		bcs.s	loc_72558
0007D4EA 0895 0007                  		bclr	#7,(a5)
0007D4EE 6000                       		bra.s	loc_72560
0007D4F0                            ; ===========================================================================
0007D4F0                            
0007D4F0                            loc_72558:
0007D4F0 1C2D 0009                  		move.b	9(a5),d6
0007D4F4 4EBA 0000                  		jsr	sub_7296A(pc)
0007D4F8                            
0007D4F8                            loc_72560:
0007D4F8 DAFC 0030                  		adda.w	#$30,a5
0007D4FC 51CF FFDC                  		dbf	d7,loc_72542
0007D500                            
0007D500 4E75                       		rts	
0007D502                            ; End of function sub_72504
0007D502                            
0007D502                            
0007D502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D502                            
0007D502                            
0007D502                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D502 7602                       		moveq	#2,d3
0007D504 7028                       		moveq	#$28,d0
0007D506                            
0007D506                            loc_7256E:
0007D506 1203                       		move.b	d3,d1
0007D508 4EBA 0000                  		jsr	sub_7272E(pc)
0007D50C 5801                       		addq.b	#4,d1
0007D50E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D512 51CB FFF2                  		dbf	d3,loc_7256E
0007D516                            
0007D516 7040                       		moveq	#$40,d0
0007D518 727F                       		moveq	#$7F,d1
0007D51A 7802                       		moveq	#2,d4
0007D51C                            
0007D51C                            loc_72584:
0007D51C 7603                       		moveq	#3,d3
0007D51E                            
0007D51E                            loc_72586:
0007D51E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D522 4EBA 0000                  		jsr	sub_72764(pc)
0007D526 5840                       		addq.w	#4,d0
0007D528 51CB FFF4                  		dbf	d3,loc_72586
0007D52C                            
0007D52C 0400 000F                  		subi.b	#$F,d0
0007D530 51CC FFEA                  		dbf	d4,loc_72584
0007D534                            
0007D534 4E75                       		rts	
0007D536                            ; End of function sub_7256A
0007D536                            
0007D536                            ; ===========================================================================
0007D536                            ; ---------------------------------------------------------------------------
0007D536                            ; Stop music
0007D536                            ; ---------------------------------------------------------------------------
0007D536                            
0007D536                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D536 702B                       		moveq	#$2B,d0
0007D538 123C 0080                  		move.b	#$80,d1
0007D53C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D540 7027                       		moveq	#$27,d0
0007D542 7200                       		moveq	#0,d1
0007D544 4EBA 0000                  		jsr	sub_7272E(pc)
0007D548 204E                       		movea.l	a6,a0
0007D54A 303C 00E3                  		move.w	#$E3,d0
0007D54E                            
0007D54E                            loc_725B6:
0007D54E 4298                       		clr.l	(a0)+
0007D550 51C8 FFFC                  		dbf	d0,loc_725B6
0007D554                            
0007D554 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D55A 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D55E 6000 0000                  		bra.w	sub_729B6
0007D562                            
0007D562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D562                            
0007D562                            
0007D562                            sub_725CA:				; XREF: Sound_ChkValue
0007D562 204E                       		movea.l	a6,a0
0007D564 1216                       		move.b	0(a6),d1
0007D566 142E 0027                  		move.b	$27(a6),d2
0007D56A 162E 002A                  		move.b	$2A(a6),d3
0007D56E 182E 0026                  		move.b	$26(a6),d4
0007D572 3A2E 000A                  		move.w	$A(a6),d5
0007D576 303C 0087                  		move.w	#$87,d0
0007D57A                            
0007D57A                            loc_725E4:
0007D57A 4298                       		clr.l	(a0)+
0007D57C 51C8 FFFC                  		dbf	d0,loc_725E4
0007D580                            
0007D580 1C81                       		move.b	d1,0(a6)
0007D582 1D42 0027                  		move.b	d2,$27(a6)
0007D586 1D43 002A                  		move.b	d3,$2A(a6)
0007D58A 1D44 0026                  		move.b	d4,$26(a6)
0007D58E 3D45 000A                  		move.w	d5,$A(a6)
0007D592 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D598 4EBA FF68                  		jsr	sub_7256A(pc)
0007D59C 6000 0000                  		bra.w	sub_729B6
0007D5A0                            ; End of function sub_725CA
0007D5A0                            
0007D5A0                            
0007D5A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5A0                            
0007D5A0                            
0007D5A0                            sub_7260C:				; XREF: sub_71B4C
0007D5A0 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D5A6 41EE 004E                  		lea	$4E(a6),a0
0007D5AA 7030                       		moveq	#$30,d0
0007D5AC 7209                       		moveq	#9,d1
0007D5AE                            
0007D5AE                            loc_7261A:
0007D5AE 5210                       		addq.b	#1,(a0)
0007D5B0 D0C0                       		adda.w	d0,a0
0007D5B2 51C9 FFFA                  		dbf	d1,loc_7261A
0007D5B6                            
0007D5B6 4E75                       		rts	
0007D5B8                            ; End of function sub_7260C
0007D5B8                            
0007D5B8                            ; ===========================================================================
0007D5B8                            ; ---------------------------------------------------------------------------
0007D5B8                            ; Speed	up music
0007D5B8                            ; ---------------------------------------------------------------------------
0007D5B8                            
0007D5B8                            Sound_E2:				; XREF: Sound_ExIndex
0007D5B8 4A2E 0027                  		tst.b	$27(a6)
0007D5BC 6600                       		bne.s	loc_7263E
0007D5BE 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D5C4 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D5CA 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D5D0 4E75                       		rts	
0007D5D2                            ; ===========================================================================
0007D5D2                            
0007D5D2                            loc_7263E:
0007D5D2 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D5D8 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D5DE 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D5E4 4E75                       		rts	
0007D5E6                            ; ===========================================================================
0007D5E6                            ; ---------------------------------------------------------------------------
0007D5E6                            ; Change music back to normal speed
0007D5E6                            ; ---------------------------------------------------------------------------
0007D5E6                            
0007D5E6                            Sound_E3:				; XREF: Sound_ExIndex
0007D5E6 4A2E 0027                  		tst.b	$27(a6)
0007D5EA 6600                       		bne.s	loc_7266A
0007D5EC 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D5F2 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D5F8 422E 002A                  		clr.b	$2A(a6)
0007D5FC 4E75                       		rts	
0007D5FE                            ; ===========================================================================
0007D5FE                            
0007D5FE                            loc_7266A:
0007D5FE 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D604 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D60A 422E 03CA                  		clr.b	$3CA(a6)
0007D60E 4E75                       		rts	
0007D610                            
0007D610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D610                            
0007D610                            
0007D610                            sub_7267C:				; XREF: sub_71B4C
0007D610 4A2E 0025                  		tst.b	$25(a6)
0007D614 6700                       		beq.s	loc_72688
0007D616 532E 0025                  		subq.b	#1,$25(a6)
0007D61A 4E75                       		rts	
0007D61C                            ; ===========================================================================
0007D61C                            
0007D61C                            loc_72688:
0007D61C 4A2E 0026                  		tst.b	$26(a6)
0007D620 6700                       		beq.s	loc_726D6
0007D622 532E 0026                  		subq.b	#1,$26(a6)
0007D626 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D62C 4BEE 0070                  		lea	$70(a6),a5
0007D630 7E05                       		moveq	#5,d7
0007D632                            
0007D632                            loc_7269E:
0007D632 4A15                       		tst.b	(a5)
0007D634 6A00                       		bpl.s	loc_726AA
0007D636 532D 0009                  		subq.b	#1,9(a5)
0007D63A 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D63E                            
0007D63E                            loc_726AA:
0007D63E DAFC 0030                  		adda.w	#$30,a5
0007D642 51CF FFEE                  		dbf	d7,loc_7269E
0007D646 7E02                       		moveq	#2,d7
0007D648                            
0007D648                            loc_726B4:
0007D648 4A15                       		tst.b	(a5)
0007D64A 6A00                       		bpl.s	loc_726CC
0007D64C 532D 0009                  		subq.b	#1,9(a5)
0007D650 1C2D 0009                  		move.b	9(a5),d6
0007D654 0C06 0010                  		cmpi.b	#$10,d6
0007D658 6500                       		bcs.s	loc_726C8
0007D65A 7C0F                       		moveq	#$F,d6
0007D65C                            
0007D65C                            loc_726C8:
0007D65C 4EBA 0000                  		jsr	sub_7296A(pc)
0007D660                            
0007D660                            loc_726CC:
0007D660 DAFC 0030                  		adda.w	#$30,a5
0007D664 51CF FFE2                  		dbf	d7,loc_726B4
0007D668 4E75                       		rts	
0007D66A                            ; ===========================================================================
0007D66A                            
0007D66A                            loc_726D6:
0007D66A 08AE 0002 0040             		bclr	#2,$40(a6)
0007D670 422E 0024                  		clr.b	$24(a6)
0007D674 4E75                       		rts	
0007D676                            ; End of function sub_7267C
0007D676                            
0007D676                            ; ===========================================================================
0007D676                            
0007D676                            loc_726E2:				; XREF: sub_71CCA
0007D676 0815 0001                  		btst	#1,(a5)
0007D67A 6600                       		bne.s	locret_726FC
0007D67C 0815 0002                  		btst	#2,(a5)
0007D680 6600                       		bne.s	locret_726FC
0007D682 7028                       		moveq	#$28,d0
0007D684 122D 0001                  		move.b	1(a5),d1
0007D688 0001 00F0                  		ori.b	#-$10,d1
0007D68C 6000 0000                  		bra.w	sub_7272E
0007D690                            ; ===========================================================================
0007D690                            
0007D690                            locret_726FC:
0007D690 4E75                       		rts	
0007D692                            
0007D692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D692                            
0007D692                            
0007D692                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D692 0815 0004                  		btst	#4,(a5)
0007D696 6600                       		bne.s	locret_72714
0007D698 0815 0002                  		btst	#2,(a5)
0007D69C 6600                       		bne.s	locret_72714
0007D69E                            
0007D69E                            loc_7270A:				; XREF: Snd_FadeOut2
0007D69E 7028                       		moveq	#$28,d0
0007D6A0 122D 0001                  		move.b	1(a5),d1
0007D6A4 6000 0000                  		bra.w	sub_7272E
0007D6A8                            ; ===========================================================================
0007D6A8                            
0007D6A8                            locret_72714:
0007D6A8 4E75                       		rts	
0007D6AA                            ; End of function sub_726FE
0007D6AA                            
0007D6AA                            ; ===========================================================================
0007D6AA                            
0007D6AA                            loc_72716:				; XREF: sub_72A5A
0007D6AA 0815 0002                  		btst	#2,(a5)
0007D6AE 6600                       		bne.s	locret_72720
0007D6B0 6000 0000                  		bra.w	sub_72722
0007D6B4                            ; ===========================================================================
0007D6B4                            
0007D6B4                            locret_72720:
0007D6B4 4E75                       		rts	
0007D6B6                            
0007D6B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6B6                            
0007D6B6                            
0007D6B6                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D6B6 082D 0002 0001             		btst	#2,1(a5)
0007D6BC 6600                       		bne.s	loc_7275A
0007D6BE D02D 0001                  		add.b	1(a5),d0
0007D6C2                            ; End of function sub_72722
0007D6C2                            
0007D6C2                            
0007D6C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6C2                            
0007D6C2                            
0007D6C2                            sub_7272E:				; XREF: loc_71E6A
0007D6C2 1439 00A0 4000             		move.b	($A04000).l,d2
0007D6C8 0802 0007                  		btst	#7,d2
0007D6CC 66F4                       		bne.s	sub_7272E
0007D6CE 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D6D4 4E71                       		nop	
0007D6D6 4E71                       		nop	
0007D6D8 4E71                       		nop	
0007D6DA                            
0007D6DA                            loc_72746:
0007D6DA 1439 00A0 4000             		move.b	($A04000).l,d2
0007D6E0 0802 0007                  		btst	#7,d2
0007D6E4 66F4                       		bne.s	loc_72746
0007D6E6                            
0007D6E6 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D6EC 4E75                       		rts	
0007D6EE                            ; End of function sub_7272E
0007D6EE                            
0007D6EE                            ; ===========================================================================
0007D6EE                            
0007D6EE                            loc_7275A:				; XREF: sub_72722
0007D6EE 142D 0001                  		move.b	1(a5),d2
0007D6F2 0882 0002                  		bclr	#2,d2
0007D6F6 D002                       		add.b	d2,d0
0007D6F8                            
0007D6F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6F8                            
0007D6F8                            
0007D6F8                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D6F8 1439 00A0 4000             		move.b	($A04000).l,d2
0007D6FE 0802 0007                  		btst	#7,d2
0007D702 66F4                       		bne.s	sub_72764
0007D704 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D70A 4E71                       		nop	
0007D70C 4E71                       		nop	
0007D70E 4E71                       		nop	
0007D710                            
0007D710                            loc_7277C:
0007D710 1439 00A0 4000             		move.b	($A04000).l,d2
0007D716 0802 0007                  		btst	#7,d2
0007D71A 66F4                       		bne.s	loc_7277C
0007D71C                            
0007D71C 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D722 4E75                       		rts	
0007D724                            ; End of function sub_72764
0007D724                            
0007D724                            ; ===========================================================================
0007D724 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D736 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D748 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D758 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D768 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D778 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D788 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D798 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D7A8 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D7B8 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D7C8 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D7D8 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D7E4                            
0007D7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7E4                            
0007D7E4                            
0007D7E4                            sub_72850:				; XREF: sub_71B4C
0007D7E4 532D 000E                  		subq.b	#1,$E(a5)
0007D7E8 6600                       		bne.s	loc_72866
0007D7EA 0895 0004                  		bclr	#4,(a5)
0007D7EE 4EBA 0000                  		jsr	sub_72878(pc)
0007D7F2 4EBA 0000                  		jsr	sub_728DC(pc)
0007D7F6 6000 0000                  		bra.w	loc_7292E
0007D7FA                            ; ===========================================================================
0007D7FA                            
0007D7FA                            loc_72866:
0007D7FA 4EBA F3FE                  		jsr	sub_71D9E(pc)
0007D7FE 4EBA 0000                  		jsr	sub_72926(pc)
0007D802 4EBA F41E                  		jsr	sub_71DC6(pc)
0007D806 4EBA 0000                  		jsr	sub_728E2(pc)
0007D80A 4E75                       		rts	
0007D80C                            ; End of function sub_72850
0007D80C                            
0007D80C                            
0007D80C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D80C                            
0007D80C                            
0007D80C                            sub_72878:				; XREF: sub_72850
0007D80C 0895 0001                  		bclr	#1,(a5)
0007D810 286D 0004                  		movea.l	4(a5),a4
0007D814                            
0007D814                            loc_72880:
0007D814 7A00                       		moveq	#0,d5
0007D816 1A1C                       		move.b	(a4)+,d5
0007D818 0C05 00E0                  		cmpi.b	#$E0,d5
0007D81C 6500                       		bcs.s	loc_72890
0007D81E 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D822 60F0                       		bra.s	loc_72880
0007D824                            ; ===========================================================================
0007D824                            
0007D824                            loc_72890:
0007D824 4A05                       		tst.b	d5
0007D826 6A00                       		bpl.s	loc_728A4
0007D828 4EBA 0000                  		jsr	sub_728AC(pc)
0007D82C 1A1C                       		move.b	(a4)+,d5
0007D82E 4A05                       		tst.b	d5
0007D830 6A00                       		bpl.s	loc_728A4
0007D832 534C                       		subq.w	#1,a4
0007D834 6000 F386                  		bra.w	sub_71D60
0007D838                            ; ===========================================================================
0007D838                            
0007D838                            loc_728A4:
0007D838 4EBA F362                  		jsr	sub_71D40(pc)
0007D83C 6000 F37E                  		bra.w	sub_71D60
0007D840                            ; End of function sub_72878
0007D840                            
0007D840                            
0007D840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D840                            
0007D840                            
0007D840                            sub_728AC:				; XREF: sub_72878
0007D840 0405 0081                  		subi.b	#$81,d5
0007D844 6500                       		bcs.s	loc_728CA
0007D846 DA2D 0008                  		add.b	8(a5),d5
0007D84A 0245 007F                  		andi.w	#$7F,d5
0007D84E E34D                       		lsl.w	#1,d5
0007D850 41FA 0000                  		lea	word_729CE(pc),a0
0007D854 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D85A 6000 F360                  		bra.w	sub_71D60
0007D85E                            ; ===========================================================================
0007D85E                            
0007D85E                            loc_728CA:
0007D85E 08D5 0001                  		bset	#1,(a5)
0007D862 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D868 4EBA F352                  		jsr	sub_71D60(pc)
0007D86C 6000 0000                  		bra.w	sub_729A0
0007D870                            ; End of function sub_728AC
0007D870                            
0007D870                            
0007D870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D870                            
0007D870                            
0007D870                            sub_728DC:				; XREF: sub_72850
0007D870 3C2D 0010                  		move.w	$10(a5),d6
0007D874 6B00                       		bmi.s	loc_72920
0007D876                            ; End of function sub_728DC
0007D876                            
0007D876                            
0007D876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D876                            
0007D876                            
0007D876                            sub_728E2:				; XREF: sub_72850
0007D876 102D 001E                  		move.b	$1E(a5),d0
0007D87A 4880                       		ext.w	d0
0007D87C DC40                       		add.w	d0,d6
0007D87E 0815 0002                  		btst	#2,(a5)
0007D882 6600                       		bne.s	locret_7291E
0007D884 0815 0001                  		btst	#1,(a5)
0007D888 6600                       		bne.s	locret_7291E
0007D88A 102D 0001                  		move.b	1(a5),d0
0007D88E 0C00 00E0                  		cmpi.b	#$E0,d0
0007D892 6600                       		bne.s	loc_72904
0007D894 103C 00C0                  		move.b	#$C0,d0
0007D898                            
0007D898                            loc_72904:
0007D898 3206                       		move.w	d6,d1
0007D89A 0201 000F                  		andi.b	#$F,d1
0007D89E 8001                       		or.b	d1,d0
0007D8A0 E84E                       		lsr.w	#4,d6
0007D8A2 0206 003F                  		andi.b	#$3F,d6
0007D8A6 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D8AC 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D8B2                            
0007D8B2                            locret_7291E:
0007D8B2 4E75                       		rts	
0007D8B4                            ; End of function sub_728E2
0007D8B4                            
0007D8B4                            ; ===========================================================================
0007D8B4                            
0007D8B4                            loc_72920:				; XREF: sub_728DC
0007D8B4 08D5 0001                  		bset	#1,(a5)
0007D8B8 4E75                       		rts	
0007D8BA                            
0007D8BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8BA                            
0007D8BA                            
0007D8BA                            sub_72926:				; XREF: sub_72850
0007D8BA 4A2D 000B                  		tst.b	$B(a5)
0007D8BE 6700 0000                  		beq.w	locret_7298A
0007D8C2                            
0007D8C2                            loc_7292E:				; XREF: sub_72850
0007D8C2 1C2D 0009                  		move.b	9(a5),d6
0007D8C6 7000                       		moveq	#0,d0
0007D8C8 102D 000B                  		move.b	$B(a5),d0
0007D8CC 6700                       		beq.s	sub_7296A
0007D8CE 2079 0007 C7B4             		movea.l	(Go_PSGIndex).l,a0
0007D8D4 5340                       		subq.w	#1,d0
0007D8D6 E548                       		lsl.w	#2,d0
0007D8D8 2070 0000                  		movea.l	(a0,d0.w),a0
0007D8DC 102D 000C                  		move.b	$C(a5),d0
0007D8E0 1030 0000                  		move.b	(a0,d0.w),d0
0007D8E4 522D 000C                  		addq.b	#1,$C(a5)
0007D8E8 0800 0007                  		btst	#7,d0
0007D8EC 6700                       		beq.s	loc_72960
0007D8EE 0C00 0080                  		cmpi.b	#$80,d0
0007D8F2 6700                       		beq.s	loc_7299A
0007D8F4                            
0007D8F4                            loc_72960:
0007D8F4 DC40                       		add.w	d0,d6
0007D8F6 0C06 0010                  		cmpi.b	#$10,d6
0007D8FA 6500                       		bcs.s	sub_7296A
0007D8FC 7C0F                       		moveq	#$F,d6
0007D8FE                            ; End of function sub_72926
0007D8FE                            
0007D8FE                            
0007D8FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8FE                            
0007D8FE                            
0007D8FE                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007D8FE 0815 0001                  		btst	#1,(a5)
0007D902 6600                       		bne.s	locret_7298A
0007D904 0815 0002                  		btst	#2,(a5)
0007D908 6600                       		bne.s	locret_7298A
0007D90A 0815 0004                  		btst	#4,(a5)
0007D90E 6600                       		bne.s	loc_7298C
0007D910                            
0007D910                            loc_7297C:
0007D910 8C2D 0001                  		or.b	1(a5),d6
0007D914 0606 0010                  		addi.b	#$10,d6
0007D918 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D91E                            
0007D91E                            locret_7298A:
0007D91E 4E75                       		rts	
0007D920                            ; ===========================================================================
0007D920                            
0007D920                            loc_7298C:
0007D920 4A2D 0013                  		tst.b	$13(a5)
0007D924 67EA                       		beq.s	loc_7297C
0007D926 4A2D 0012                  		tst.b	$12(a5)
0007D92A 66E4                       		bne.s	loc_7297C
0007D92C 4E75                       		rts	
0007D92E                            ; End of function sub_7296A
0007D92E                            
0007D92E                            ; ===========================================================================
0007D92E                            
0007D92E                            loc_7299A:				; XREF: sub_72926
0007D92E 532D 000C                  		subq.b	#1,$C(a5)
0007D932 4E75                       		rts	
0007D934                            
0007D934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D934                            
0007D934                            
0007D934                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007D934 0815 0002                  		btst	#2,(a5)
0007D938 6600                       		bne.s	locret_729B4
0007D93A                            
0007D93A                            loc_729A6:				; XREF: Snd_FadeOut2
0007D93A 102D 0001                  		move.b	1(a5),d0
0007D93E 0000 001F                  		ori.b	#$1F,d0
0007D942 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D948                            
0007D948                            locret_729B4:
0007D948 4E75                       		rts	
0007D94A                            ; End of function sub_729A0
0007D94A                            
0007D94A                            
0007D94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D94A                            
0007D94A                            
0007D94A                            sub_729B6:				; XREF: loc_71E7C
0007D94A 41F9 00C0 0011             		lea	($C00011).l,a0
0007D950 10BC 009F                  		move.b	#$9F,(a0)
0007D954 10BC 00BF                  		move.b	#$BF,(a0)
0007D958 10BC 00DF                  		move.b	#$DF,(a0)
0007D95C 10BC 00FF                  		move.b	#$FF,(a0)
0007D960 4E75                       		rts	
0007D962                            ; End of function sub_729B6
0007D962                            
0007D962                            ; ===========================================================================
0007D962 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007D974 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007D986 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007D99A 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007D9AE 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007D9C2 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007D9D6 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007D9EA 0011 0000                  		dc.w $11, 0
0007D9EE                            
0007D9EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9EE                            
0007D9EE                            
0007D9EE                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007D9EE 0445 00E0                  		subi.w	#$E0,d5
0007D9F2 E54D                       		lsl.w	#2,d5
0007D9F4 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007D9F8                            ; End of function sub_72A5A
0007D9F8                            
0007D9F8                            ; ===========================================================================
0007D9F8                            
0007D9F8                            loc_72A64:
0007D9F8 6000 0000                  		bra.w	loc_72ACC
0007D9FC                            ; ===========================================================================
0007D9FC 6000 0000                  		bra.w	loc_72AEC
0007DA00                            ; ===========================================================================
0007DA00 6000 0000                  		bra.w	loc_72AF2
0007DA04                            ; ===========================================================================
0007DA04 6000 0000                  		bra.w	loc_72AF8
0007DA08                            ; ===========================================================================
0007DA08 6000 0000                  		bra.w	loc_72B14
0007DA0C                            ; ===========================================================================
0007DA0C 6000 0000                  		bra.w	loc_72B9E
0007DA10                            ; ===========================================================================
0007DA10 6000 0000                  		bra.w	loc_72BA4
0007DA14                            ; ===========================================================================
0007DA14 6000 0000                  		bra.w	loc_72BAE
0007DA18                            ; ===========================================================================
0007DA18 6000 0000                  		bra.w	loc_72BB4
0007DA1C                            ; ===========================================================================
0007DA1C 6000 0000                  		bra.w	loc_72BBE
0007DA20                            ; ===========================================================================
0007DA20 6000 0000                  		bra.w	loc_72BC6
0007DA24                            ; ===========================================================================
0007DA24 6000 0000                  		bra.w	loc_72BD0
0007DA28                            ; ===========================================================================
0007DA28 6000 0000                  		bra.w	loc_72BE6
0007DA2C                            ; ===========================================================================
0007DA2C 6000 0000                  		bra.w	loc_72BEE
0007DA30                            ; ===========================================================================
0007DA30 6000 0000                  		bra.w	loc_72BF4
0007DA34                            ; ===========================================================================
0007DA34 6000 0000                  		bra.w	loc_72C26
0007DA38                            ; ===========================================================================
0007DA38 6000 0000                  		bra.w	loc_72D30
0007DA3C                            ; ===========================================================================
0007DA3C 6000 0000                  		bra.w	loc_72D52
0007DA40                            ; ===========================================================================
0007DA40 6000 0000                  		bra.w	loc_72D58
0007DA44                            ; ===========================================================================
0007DA44 6000 0000                  		bra.w	loc_72E06
0007DA48                            ; ===========================================================================
0007DA48 6000 0000                  		bra.w	loc_72E20
0007DA4C                            ; ===========================================================================
0007DA4C 6000 0000                  		bra.w	loc_72E26
0007DA50                            ; ===========================================================================
0007DA50 6000 0000                  		bra.w	loc_72E2C
0007DA54                            ; ===========================================================================
0007DA54 6000 0000                  		bra.w	loc_72E38
0007DA58                            ; ===========================================================================
0007DA58 6000 0000                  		bra.w	loc_72E52
0007DA5C                            ; ===========================================================================
0007DA5C 6000 0000                  		bra.w	loc_72E64
0007DA60                            ; ===========================================================================
0007DA60                            
0007DA60                            loc_72ACC:				; XREF: loc_72A64
0007DA60 121C                       		move.b	(a4)+,d1
0007DA62 4A2D 0001                  		tst.b	1(a5)
0007DA66 6B00                       		bmi.s	locret_72AEA
0007DA68 102D 000A                  		move.b	$A(a5),d0
0007DA6C 0200 0037                  		andi.b	#$37,d0
0007DA70 8200                       		or.b	d0,d1
0007DA72 1B41 000A                  		move.b	d1,$A(a5)
0007DA76 103C 00B4                  		move.b	#$B4,d0
0007DA7A 6000 FC2E                  		bra.w	loc_72716
0007DA7E                            ; ===========================================================================
0007DA7E                            
0007DA7E                            locret_72AEA:
0007DA7E 4E75                       		rts	
0007DA80                            ; ===========================================================================
0007DA80                            
0007DA80                            loc_72AEC:				; XREF: loc_72A64
0007DA80 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DA84 4E75                       		rts	
0007DA86                            ; ===========================================================================
0007DA86                            
0007DA86                            loc_72AF2:				; XREF: loc_72A64
0007DA86 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DA8A 4E75                       		rts	
0007DA8C                            ; ===========================================================================
0007DA8C                            
0007DA8C                            loc_72AF8:				; XREF: loc_72A64
0007DA8C 7000                       		moveq	#0,d0
0007DA8E 102D 000D                  		move.b	$D(a5),d0
0007DA92 2875 0000                  		movea.l	(a5,d0.w),a4
0007DA96 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DA9E 544C                       		addq.w	#2,a4
0007DAA0 5800                       		addq.b	#4,d0
0007DAA2 1B40 000D                  		move.b	d0,$D(a5)
0007DAA6 4E75                       		rts	
0007DAA8                            ; ===========================================================================
0007DAA8                            
0007DAA8                            loc_72B14:				; XREF: loc_72A64
0007DAA8 204E                       		movea.l	a6,a0
0007DAAA 43EE 03A0                  		lea	$3A0(a6),a1
0007DAAE 303C 0087                  		move.w	#$87,d0
0007DAB2                            
0007DAB2                            loc_72B1E:
0007DAB2 20D9                       		move.l	(a1)+,(a0)+
0007DAB4 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DAB8                            
0007DAB8 08EE 0002 0040             		bset	#2,$40(a6)
0007DABE 264D                       		movea.l	a5,a3
0007DAC0 1C3C 0028                  		move.b	#$28,d6
0007DAC4 9C2E 0026                  		sub.b	$26(a6),d6
0007DAC8 7E05                       		moveq	#5,d7
0007DACA 4BEE 0070                  		lea	$70(a6),a5
0007DACE                            
0007DACE                            loc_72B3A:
0007DACE 0815 0007                  		btst	#7,(a5)
0007DAD2 6700                       		beq.s	loc_72B5C
0007DAD4 08D5 0001                  		bset	#1,(a5)
0007DAD8 DD2D 0009                  		add.b	d6,9(a5)
0007DADC 0815 0002                  		btst	#2,(a5)
0007DAE0 6600                       		bne.s	loc_72B5C
0007DAE2 7000                       		moveq	#0,d0
0007DAE4 102D 000B                  		move.b	$B(a5),d0
0007DAE8 226E 0018                  		movea.l	$18(a6),a1
0007DAEC 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DAF0                            
0007DAF0                            loc_72B5C:
0007DAF0 DAFC 0030                  		adda.w	#$30,a5
0007DAF4 51CF FFD8                  		dbf	d7,loc_72B3A
0007DAF8                            
0007DAF8 7E02                       		moveq	#2,d7
0007DAFA                            
0007DAFA                            loc_72B66:
0007DAFA 0815 0007                  		btst	#7,(a5)
0007DAFE 6700                       		beq.s	loc_72B78
0007DB00 08D5 0001                  		bset	#1,(a5)
0007DB04 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DB08 DD2D 0009                  		add.b	d6,9(a5)
0007DB0C                            
0007DB0C                            loc_72B78:
0007DB0C DAFC 0030                  		adda.w	#$30,a5
0007DB10 51CF FFE8                  		dbf	d7,loc_72B66
0007DB14 2A4B                       		movea.l	a3,a5
0007DB16 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DB1C 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DB22 422E 0027                  		clr.b	$27(a6)
0007DB26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DB2E 504F                       		addq.w	#8,sp
0007DB30 4E75                       		rts	
0007DB32                            ; ===========================================================================
0007DB32                            
0007DB32                            loc_72B9E:				; XREF: loc_72A64
0007DB32 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DB36 4E75                       		rts	
0007DB38                            ; ===========================================================================
0007DB38                            
0007DB38                            loc_72BA4:				; XREF: loc_72A64
0007DB38 101C                       		move.b	(a4)+,d0
0007DB3A D12D 0009                  		add.b	d0,9(a5)
0007DB3E 6000 0000                  		bra.w	sub_72CB4
0007DB42                            ; ===========================================================================
0007DB42                            
0007DB42                            loc_72BAE:				; XREF: loc_72A64
0007DB42 08D5 0004                  		bset	#4,(a5)
0007DB46 4E75                       		rts	
0007DB48                            ; ===========================================================================
0007DB48                            
0007DB48                            loc_72BB4:				; XREF: loc_72A64
0007DB48 1B54 0012                  		move.b	(a4),$12(a5)
0007DB4C 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DB50 4E75                       		rts	
0007DB52                            ; ===========================================================================
0007DB52                            
0007DB52                            loc_72BBE:				; XREF: loc_72A64
0007DB52 101C                       		move.b	(a4)+,d0
0007DB54 D12D 0008                  		add.b	d0,8(a5)
0007DB58 4E75                       		rts	
0007DB5A                            ; ===========================================================================
0007DB5A                            
0007DB5A                            loc_72BC6:				; XREF: loc_72A64
0007DB5A 1D54 0002                  		move.b	(a4),2(a6)
0007DB5E 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DB62 4E75                       		rts	
0007DB64                            ; ===========================================================================
0007DB64                            
0007DB64                            loc_72BD0:				; XREF: loc_72A64
0007DB64 41EE 0040                  		lea	$40(a6),a0
0007DB68 101C                       		move.b	(a4)+,d0
0007DB6A 7230                       		moveq	#$30,d1
0007DB6C 7409                       		moveq	#9,d2
0007DB6E                            
0007DB6E                            loc_72BDA:
0007DB6E 1140 0002                  		move.b	d0,2(a0)
0007DB72 D0C1                       		adda.w	d1,a0
0007DB74 51CA FFF8                  		dbf	d2,loc_72BDA
0007DB78                            
0007DB78 4E75                       		rts	
0007DB7A                            ; ===========================================================================
0007DB7A                            
0007DB7A                            loc_72BE6:				; XREF: loc_72A64
0007DB7A 101C                       		move.b	(a4)+,d0
0007DB7C D12D 0009                  		add.b	d0,9(a5)
0007DB80 4E75                       		rts	
0007DB82                            ; ===========================================================================
0007DB82                            
0007DB82                            loc_72BEE:				; XREF: loc_72A64
0007DB82 422E 002C                  		clr.b	$2C(a6)
0007DB86 4E75                       		rts	
0007DB88                            ; ===========================================================================
0007DB88                            
0007DB88                            loc_72BF4:				; XREF: loc_72A64
0007DB88 0895 0007                  		bclr	#7,(a5)
0007DB8C 0895 0004                  		bclr	#4,(a5)
0007DB90 4EBA FB00                  		jsr	sub_726FE(pc)
0007DB94 4A2E 0250                  		tst.b	$250(a6)
0007DB98 6B00                       		bmi.s	loc_72C22
0007DB9A 264D                       		movea.l	a5,a3
0007DB9C 4BEE 0100                  		lea	$100(a6),a5
0007DBA0 226E 0018                  		movea.l	$18(a6),a1
0007DBA4 0895 0002                  		bclr	#2,(a5)
0007DBA8 08D5 0001                  		bset	#1,(a5)
0007DBAC 102D 000B                  		move.b	$B(a5),d0
0007DBB0 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DBB4 2A4B                       		movea.l	a3,a5
0007DBB6                            
0007DBB6                            loc_72C22:
0007DBB6 504F                       		addq.w	#8,sp
0007DBB8 4E75                       		rts	
0007DBBA                            ; ===========================================================================
0007DBBA                            
0007DBBA                            loc_72C26:				; XREF: loc_72A64
0007DBBA 7000                       		moveq	#0,d0
0007DBBC 101C                       		move.b	(a4)+,d0
0007DBBE 1B40 000B                  		move.b	d0,$B(a5)
0007DBC2 0815 0002                  		btst	#2,(a5)
0007DBC6 6600 0000                  		bne.w	locret_72CAA
0007DBCA 226E 0018                  		movea.l	$18(a6),a1
0007DBCE 4A2E 000E                  		tst.b	$E(a6)
0007DBD2 6700                       		beq.s	sub_72C4E
0007DBD4 226D 0020                  		movea.l	$20(a5),a1
0007DBD8 4A2E 000E                  		tst.b	$E(a6)
0007DBDC 6B00                       		bmi.s	sub_72C4E
0007DBDE 226E 0020                  		movea.l	$20(a6),a1
0007DBE2                            
0007DBE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBE2                            
0007DBE2                            
0007DBE2                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DBE2 5340                       		subq.w	#1,d0
0007DBE4 6B00                       		bmi.s	loc_72C5C
0007DBE6 323C 0019                  		move.w	#$19,d1
0007DBEA                            
0007DBEA                            loc_72C56:
0007DBEA D2C1                       		adda.w	d1,a1
0007DBEC 51C8 FFFC                  		dbf	d0,loc_72C56
0007DBF0                            
0007DBF0                            loc_72C5C:
0007DBF0 1219                       		move.b	(a1)+,d1
0007DBF2 1B41 001F                  		move.b	d1,$1F(a5)
0007DBF6 1801                       		move.b	d1,d4
0007DBF8 103C 00B0                  		move.b	#$B0,d0
0007DBFC 4EBA FAB8                  		jsr	sub_72722(pc)
0007DC00 45FA 0000                  		lea	byte_72D18(pc),a2
0007DC04 7613                       		moveq	#$13,d3
0007DC06                            
0007DC06                            loc_72C72:
0007DC06 101A                       		move.b	(a2)+,d0
0007DC08 1219                       		move.b	(a1)+,d1
0007DC0A 4EBA FAAA                  		jsr	sub_72722(pc)
0007DC0E 51CB FFF6                  		dbf	d3,loc_72C72
0007DC12 7A03                       		moveq	#3,d5
0007DC14 0244 0007                  		andi.w	#7,d4
0007DC18 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DC1C 162D 0009                  		move.b	9(a5),d3
0007DC20                            
0007DC20                            loc_72C8C:
0007DC20 101A                       		move.b	(a2)+,d0
0007DC22 1219                       		move.b	(a1)+,d1
0007DC24 E20C                       		lsr.b	#1,d4
0007DC26 6400                       		bcc.s	loc_72C96
0007DC28 D203                       		add.b	d3,d1
0007DC2A                            
0007DC2A                            loc_72C96:
0007DC2A 4EBA FA8A                  		jsr	sub_72722(pc)
0007DC2E 51CD FFF0                  		dbf	d5,loc_72C8C
0007DC32 103C 00B4                  		move.b	#$B4,d0
0007DC36 122D 000A                  		move.b	$A(a5),d1
0007DC3A 4EBA FA7A                  		jsr	sub_72722(pc)
0007DC3E                            
0007DC3E                            locret_72CAA:
0007DC3E 4E75                       		rts	
0007DC40                            ; End of function sub_72C4E
0007DC40                            
0007DC40                            ; ===========================================================================
0007DC40 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DC48                            
0007DC48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DC48                            
0007DC48                            
0007DC48                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DC48 0815 0002                  		btst	#2,(a5)
0007DC4C 6600                       		bne.s	locret_72D16
0007DC4E 7000                       		moveq	#0,d0
0007DC50 102D 000B                  		move.b	$B(a5),d0
0007DC54 226E 0018                  		movea.l	$18(a6),a1
0007DC58 4A2E 000E                  		tst.b	$E(a6)
0007DC5C 6700                       		beq.s	loc_72CD8
0007DC5E 226E 0020                  		movea.l	$20(a6),a1
0007DC62 4A2E 000E                  		tst.b	$E(a6)
0007DC66 6B00                       		bmi.s	loc_72CD8
0007DC68 226E 0020                  		movea.l	$20(a6),a1
0007DC6C                            
0007DC6C                            loc_72CD8:
0007DC6C 5340                       		subq.w	#1,d0
0007DC6E 6B00                       		bmi.s	loc_72CE6
0007DC70 323C 0019                  		move.w	#$19,d1
0007DC74                            
0007DC74                            loc_72CE0:
0007DC74 D2C1                       		adda.w	d1,a1
0007DC76 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DC7A                            
0007DC7A                            loc_72CE6:
0007DC7A D2FC 0015                  		adda.w	#$15,a1
0007DC7E 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DC82 102D 001F                  		move.b	$1F(a5),d0
0007DC86 0240 0007                  		andi.w	#7,d0
0007DC8A 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DC8E 162D 0009                  		move.b	9(a5),d3
0007DC92 6B00                       		bmi.s	locret_72D16
0007DC94 7A03                       		moveq	#3,d5
0007DC96                            
0007DC96                            loc_72D02:
0007DC96 101A                       		move.b	(a2)+,d0
0007DC98 1219                       		move.b	(a1)+,d1
0007DC9A E20C                       		lsr.b	#1,d4
0007DC9C 6400                       		bcc.s	loc_72D12
0007DC9E D203                       		add.b	d3,d1
0007DCA0 6500                       		bcs.s	loc_72D12
0007DCA2 4EBA FA12                  		jsr	sub_72722(pc)
0007DCA6                            
0007DCA6                            loc_72D12:
0007DCA6 51CD FFEE                  		dbf	d5,loc_72D02
0007DCAA                            
0007DCAA                            locret_72D16:
0007DCAA 4E75                       		rts	
0007DCAC                            ; End of function sub_72CB4
0007DCAC                            
0007DCAC                            ; ===========================================================================
0007DCAC 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DCB6 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DCC0 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DCC4                            ; ===========================================================================
0007DCC4                            
0007DCC4                            loc_72D30:				; XREF: loc_72A64
0007DCC4 08D5 0003                  		bset	#3,(a5)
0007DCC8 2B4C 0014                  		move.l	a4,$14(a5)
0007DCCC 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DCD0 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DCD4 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DCD8 101C                       		move.b	(a4)+,d0
0007DCDA E208                       		lsr.b	#1,d0
0007DCDC 1B40 001B                  		move.b	d0,$1B(a5)
0007DCE0 426D 001C                  		clr.w	$1C(a5)
0007DCE4 4E75                       		rts	
0007DCE6                            ; ===========================================================================
0007DCE6                            
0007DCE6                            loc_72D52:				; XREF: loc_72A64
0007DCE6 08D5 0003                  		bset	#3,(a5)
0007DCEA 4E75                       		rts	
0007DCEC                            ; ===========================================================================
0007DCEC                            
0007DCEC                            loc_72D58:				; XREF: loc_72A64
0007DCEC 0895 0007                  		bclr	#7,(a5)
0007DCF0 0895 0004                  		bclr	#4,(a5)
0007DCF4 4A2D 0001                  		tst.b	1(a5)
0007DCF8 6B00                       		bmi.s	loc_72D74
0007DCFA 4A2E 0008                  		tst.b	8(a6)
0007DCFE 6B00 0000                  		bmi.w	loc_72E02
0007DD02 4EBA F98E                  		jsr	sub_726FE(pc)
0007DD06 6000                       		bra.s	loc_72D78
0007DD08                            ; ===========================================================================
0007DD08                            
0007DD08                            loc_72D74:
0007DD08 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DD0C                            
0007DD0C                            loc_72D78:
0007DD0C 4A2E 000E                  		tst.b	$E(a6)
0007DD10 6A00 0000                  		bpl.w	loc_72E02
0007DD14 4216                       		clr.b	0(a6)
0007DD16 7000                       		moveq	#0,d0
0007DD18 102D 0001                  		move.b	1(a5),d0
0007DD1C 6B00                       		bmi.s	loc_72DCC
0007DD1E 41FA F546                  		lea	dword_722CC(pc),a0
0007DD22 264D                       		movea.l	a5,a3
0007DD24 0C00 0004                  		cmpi.b	#4,d0
0007DD28 6600                       		bne.s	loc_72DA8
0007DD2A 4A2E 0340                  		tst.b	$340(a6)
0007DD2E 6A00                       		bpl.s	loc_72DA8
0007DD30 4BEE 0340                  		lea	$340(a6),a5
0007DD34 226E 0020                  		movea.l	$20(a6),a1
0007DD38 6000                       		bra.s	loc_72DB8
0007DD3A                            ; ===========================================================================
0007DD3A                            
0007DD3A                            loc_72DA8:
0007DD3A 5500                       		subq.b	#2,d0
0007DD3C E508                       		lsl.b	#2,d0
0007DD3E 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DD42 4A15                       		tst.b	(a5)
0007DD44 6A00                       		bpl.s	loc_72DC8
0007DD46 226E 0018                  		movea.l	$18(a6),a1
0007DD4A                            
0007DD4A                            loc_72DB8:
0007DD4A 0895 0002                  		bclr	#2,(a5)
0007DD4E 08D5 0001                  		bset	#1,(a5)
0007DD52 102D 000B                  		move.b	$B(a5),d0
0007DD56 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DD5A                            
0007DD5A                            loc_72DC8:
0007DD5A 2A4B                       		movea.l	a3,a5
0007DD5C 6000                       		bra.s	loc_72E02
0007DD5E                            ; ===========================================================================
0007DD5E                            
0007DD5E                            loc_72DCC:
0007DD5E 41EE 0370                  		lea	$370(a6),a0
0007DD62 4A10                       		tst.b	(a0)
0007DD64 6A00                       		bpl.s	loc_72DE0
0007DD66 0C00 00E0                  		cmpi.b	#$E0,d0
0007DD6A 6700                       		beq.s	loc_72DEA
0007DD6C 0C00 00C0                  		cmpi.b	#$C0,d0
0007DD70 6700                       		beq.s	loc_72DEA
0007DD72                            
0007DD72                            loc_72DE0:
0007DD72 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DD76 E608                       		lsr.b	#3,d0
0007DD78 2070 0000                  		movea.l	(a0,d0.w),a0
0007DD7C                            
0007DD7C                            loc_72DEA:
0007DD7C 0890 0002                  		bclr	#2,(a0)
0007DD80 08D0 0001                  		bset	#1,(a0)
0007DD84 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DD8A 6600                       		bne.s	loc_72E02
0007DD8C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DD94                            
0007DD94                            loc_72E02:
0007DD94 504F                       		addq.w	#8,sp
0007DD96 4E75                       		rts	
0007DD98                            ; ===========================================================================
0007DD98                            
0007DD98                            loc_72E06:				; XREF: loc_72A64
0007DD98 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DD9E 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DDA2 0815 0002                  		btst	#2,(a5)
0007DDA6 6600                       		bne.s	locret_72E1E
0007DDA8 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DDB0                            
0007DDB0                            locret_72E1E:
0007DDB0 4E75                       		rts	
0007DDB2                            ; ===========================================================================
0007DDB2                            
0007DDB2                            loc_72E20:				; XREF: loc_72A64
0007DDB2 0895 0003                  		bclr	#3,(a5)
0007DDB6 4E75                       		rts	
0007DDB8                            ; ===========================================================================
0007DDB8                            
0007DDB8                            loc_72E26:				; XREF: loc_72A64
0007DDB8 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DDBC 4E75                       		rts	
0007DDBE                            ; ===========================================================================
0007DDBE                            
0007DDBE                            loc_72E2C:				; XREF: loc_72A64
0007DDBE 101C                       		move.b	(a4)+,d0
0007DDC0 E148                       		lsl.w	#8,d0
0007DDC2 101C                       		move.b	(a4)+,d0
0007DDC4 D8C0                       		adda.w	d0,a4
0007DDC6 534C                       		subq.w	#1,a4
0007DDC8 4E75                       		rts	
0007DDCA                            ; ===========================================================================
0007DDCA                            
0007DDCA                            loc_72E38:				; XREF: loc_72A64
0007DDCA 7000                       		moveq	#0,d0
0007DDCC 101C                       		move.b	(a4)+,d0
0007DDCE 121C                       		move.b	(a4)+,d1
0007DDD0 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DDD4 6600                       		bne.s	loc_72E48
0007DDD6 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DDDA                            
0007DDDA                            loc_72E48:
0007DDDA 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DDDE 66DE                       		bne.s	loc_72E2C
0007DDE0 544C                       		addq.w	#2,a4
0007DDE2 4E75                       		rts	
0007DDE4                            ; ===========================================================================
0007DDE4                            
0007DDE4                            loc_72E52:				; XREF: loc_72A64
0007DDE4 7000                       		moveq	#0,d0
0007DDE6 102D 000D                  		move.b	$D(a5),d0
0007DDEA 5900                       		subq.b	#4,d0
0007DDEC 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DDF0 1B40 000D                  		move.b	d0,$D(a5)
0007DDF4 60C8                       		bra.s	loc_72E2C
0007DDF6                            ; ===========================================================================
0007DDF6                            
0007DDF6                            loc_72E64:				; XREF: loc_72A64
0007DDF6 103C 0088                  		move.b	#$88,d0
0007DDFA 123C 000F                  		move.b	#$F,d1
0007DDFE 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DE02 103C 008C                  		move.b	#$8C,d0
0007DE06 123C 000F                  		move.b	#$F,d1
0007DE0A 6000 F8B6                  		bra.w	sub_7272E
0007DE0E                            ; ===========================================================================
0007DE0E                            Kos_Z80:	incbin	sound\z80_1.bin
0007DEBE 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007DEC0 21                         		dc.b $21
0007DEC1 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007DEC3                            		incbin	sound\z80_2.bin
0007F56E                            		even
0007F56E                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085D6E                            		even
00085D6E                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F60C                            		even
0008F60C                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0009322C 00                         		even
0009322C                            Music84:	include	sound\music84.asm ; Star Light Act 1
0009322C                            music84_Header:
0009322C =00000001                  smpsHeaderStartSong = 1
0009322C 0000                       	smpsHeaderVoice     music84_Voices
0009322E 0603                       	smpsHeaderChan      $06, $03
00093230 0205                       	smpsHeaderTempo     $02, $05
00093232                            
00093236 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0009323A 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0009323E 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00093242 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00093246 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0009324A 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00093250 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00093256 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0009325C                            
0009325C                            ; FM1 Data
0009325C                            music84_FM1:
0009325C E0C0                       	smpsPan             panCenter, $00
00093260 E107                       	smpsAlterNote       $07
00093262 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00093266 E106                       	smpsAlterNote       $06
00093268 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0009326C E10B                       	smpsAlterNote       $0B
0009326E 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00093274 E10C                       	smpsAlterNote       $0C
00093276 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093279 E10B                       	smpsAlterNote       $0B
0009327B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009327E E109                       	smpsAlterNote       $09
00093280 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00093285 E108                       	smpsAlterNote       $08
00093287 8001                       	dc.b	nRst, $01
00093289 E10B                       	smpsAlterNote       $0B
0009328B 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093291 E107                       	smpsAlterNote       $07
00093293 9B03                       	dc.b	nD2, $03
00093295                            
00093295                            music84_Jump04:
00093295 E107                       	smpsAlterNote       $07
00093297 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009329B E10B                       	smpsAlterNote       $0B
0009329D A202 8001                  	dc.b	nA2, $02, nRst, $01
000932A1 E107                       	smpsAlterNote       $07
000932A3 9B03                       	dc.b	nD2, $03
000932A5 E11A                       	smpsAlterNote       $1A
000932A7 A301                       	dc.b	nBb2, $01
000932A9 E1F2                       	smpsAlterNote       $F2
000932AB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000932AE E1FF                       	smpsAlterNote       $FF
000932B0 E701                       	dc.b	smpsNoAttack, $01
000932B2 E111                       	smpsAlterNote       $11
000932B4 E701                       	dc.b	smpsNoAttack, $01
000932B6 E106                       	smpsAlterNote       $06
000932B8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000932BB E107                       	smpsAlterNote       $07
000932BD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000932C1 E108                       	smpsAlterNote       $08
000932C3 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000932CB E109                       	smpsAlterNote       $09
000932CD A003                       	dc.b	nG2, $03
000932CF E10C                       	smpsAlterNote       $0C
000932D1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000932D5 E1FD                       	smpsAlterNote       $FD
000932D7 A401                       	dc.b	nB2, $01
000932D9 E109                       	smpsAlterNote       $09
000932DB E701                       	dc.b	smpsNoAttack, $01
000932DD E106                       	smpsAlterNote       $06
000932DF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000932E2 E109                       	smpsAlterNote       $09
000932E4 A007                       	dc.b	nG2, $07
000932E6 E108                       	smpsAlterNote       $08
000932E8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000932EC E107                       	smpsAlterNote       $07
000932EE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000932F4 E10B                       	smpsAlterNote       $0B
000932F6 A203 8001                  	dc.b	nA2, $03, nRst, $01
000932FA E107                       	smpsAlterNote       $07
000932FC 9B03                       	dc.b	nD2, $03
000932FE E11A                       	smpsAlterNote       $1A
00093300 A301                       	dc.b	nBb2, $01
00093302 E1F9                       	smpsAlterNote       $F9
00093304 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093307 E107                       	smpsAlterNote       $07
00093309 E701                       	dc.b	smpsNoAttack, $01
0009330B E111                       	smpsAlterNote       $11
0009330D E701                       	dc.b	smpsNoAttack, $01
0009330F E106                       	smpsAlterNote       $06
00093311 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00093316 E107                       	smpsAlterNote       $07
00093318 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093320 E1EC                       	smpsAlterNote       $EC
00093322 A101                       	dc.b	nAb2, $01
00093324 E108                       	smpsAlterNote       $08
00093326 E701                       	dc.b	smpsNoAttack, $01
00093328 E116                       	smpsAlterNote       $16
0009332A E701                       	dc.b	smpsNoAttack, $01
0009332C E1F5                       	smpsAlterNote       $F5
0009332E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093331 E10B                       	smpsAlterNote       $0B
00093333 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093337 E107                       	smpsAlterNote       $07
00093339 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0009333F E109                       	smpsAlterNote       $09
00093341 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093345 E10B                       	smpsAlterNote       $0B
00093347 9603                       	dc.b	nA1, $03
00093349 E107                       	smpsAlterNote       $07
0009334B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093351 E10B                       	smpsAlterNote       $0B
00093353 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093357 E107                       	smpsAlterNote       $07
00093359 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009335D E11A                       	smpsAlterNote       $1A
0009335F A301                       	dc.b	nBb2, $01
00093361 E1F9                       	smpsAlterNote       $F9
00093363 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093366 E107                       	smpsAlterNote       $07
00093368 E701                       	dc.b	smpsNoAttack, $01
0009336A E1FB                       	smpsAlterNote       $FB
0009336C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009336F E106                       	smpsAlterNote       $06
00093371 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093375 E107                       	smpsAlterNote       $07
00093377 9B03                       	dc.b	nD2, $03
00093379 E108                       	smpsAlterNote       $08
0009337B 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093381 E109                       	smpsAlterNote       $09
00093383 A002 8001                  	dc.b	nG2, $02, nRst, $01
00093387 E10C                       	smpsAlterNote       $0C
00093389 A303                       	dc.b	nBb2, $03
0009338B E1F0                       	smpsAlterNote       $F0
0009338D A401                       	dc.b	nB2, $01
0009338F E1FD                       	smpsAlterNote       $FD
00093391 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00093396 E106                       	smpsAlterNote       $06
00093398 8001                       	dc.b	nRst, $01
0009339A E109                       	smpsAlterNote       $09
0009339C A006 8001                  	dc.b	nG2, $06, nRst, $01
000933A0 E108                       	smpsAlterNote       $08
000933A2 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000933A6 E107                       	smpsAlterNote       $07
000933A8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000933AE E10B                       	smpsAlterNote       $0B
000933B0 A203                       	dc.b	nA2, $03
000933B2 E107                       	smpsAlterNote       $07
000933B4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000933B8 E1F2                       	smpsAlterNote       $F2
000933BA A401                       	dc.b	nB2, $01
000933BC E1FF                       	smpsAlterNote       $FF
000933BE E701                       	dc.b	smpsNoAttack, $01
000933C0 E107                       	smpsAlterNote       $07
000933C2 E701                       	dc.b	smpsNoAttack, $01
000933C4 E1FB                       	smpsAlterNote       $FB
000933C6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000933C9 E106                       	smpsAlterNote       $06
000933CB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000933CF E107                       	smpsAlterNote       $07
000933D1 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000933DB E117                       	smpsAlterNote       $17
000933DD A001                       	dc.b	nG2, $01
000933DF E1FA                       	smpsAlterNote       $FA
000933E1 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000933E4 E108                       	smpsAlterNote       $08
000933E6 E701                       	dc.b	smpsNoAttack, $01
000933E8 E1E7                       	smpsAlterNote       $E7
000933EA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000933ED E103                       	smpsAlterNote       $03
000933EF E701                       	dc.b	smpsNoAttack, $01
000933F1 E10B                       	smpsAlterNote       $0B
000933F3 E702                       	dc.b	smpsNoAttack, $02
000933F5 E107                       	smpsAlterNote       $07
000933F7 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000933FF E106                       	smpsAlterNote       $06
00093401 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00093407 E10C                       	smpsAlterNote       $0C
00093409 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0009340F E109                       	smpsAlterNote       $09
00093411 9E03                       	dc.b	nF2, $03
00093413 E10C                       	smpsAlterNote       $0C
00093415 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093419 E1EA                       	smpsAlterNote       $EA
0009341B A201                       	dc.b	nA2, $01
0009341D E106                       	smpsAlterNote       $06
0009341F E701                       	dc.b	smpsNoAttack, $01
00093421 E1E2                       	smpsAlterNote       $E2
00093423 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093426 E1F0                       	smpsAlterNote       $F0
00093428 E701                       	dc.b	smpsNoAttack, $01
0009342A E10C                       	smpsAlterNote       $0C
0009342C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093438 E116                       	smpsAlterNote       $16
0009343A 9C01                       	dc.b	nEb2, $01
0009343C E105                       	smpsAlterNote       $05
0009343E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093441 E1F1                       	smpsAlterNote       $F1
00093443 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093446 E1FF                       	smpsAlterNote       $FF
00093448 E701                       	dc.b	smpsNoAttack, $01
0009344A E109                       	smpsAlterNote       $09
0009344C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093450 E10C                       	smpsAlterNote       $0C
00093452 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0009345E 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00093464 E109                       	smpsAlterNote       $09
00093466 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009346A E10C                       	smpsAlterNote       $0C
0009346C 9703                       	dc.b	nBb1, $03
0009346E E11A                       	smpsAlterNote       $1A
00093470 A101                       	dc.b	nAb2, $01
00093472 E1FB                       	smpsAlterNote       $FB
00093474 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093477 E10A                       	smpsAlterNote       $0A
00093479 E701                       	dc.b	smpsNoAttack, $01
0009347B E1E8                       	smpsAlterNote       $E8
0009347D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093480 E106                       	smpsAlterNote       $06
00093482 E701                       	dc.b	smpsNoAttack, $01
00093484 E10C                       	smpsAlterNote       $0C
00093486 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00093492 E1F9                       	smpsAlterNote       $F9
00093494 9D01                       	dc.b	nE2, $01
00093496 E108                       	smpsAlterNote       $08
00093498 E701                       	dc.b	smpsNoAttack, $01
0009349A E1F6                       	smpsAlterNote       $F6
0009349C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0009349F E109                       	smpsAlterNote       $09
000934A1 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000934A5 E10C                       	smpsAlterNote       $0C
000934A7 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000934B3 E108                       	smpsAlterNote       $08
000934B5 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000934BB E106                       	smpsAlterNote       $06
000934BD A403 8001                  	dc.b	nB2, $03, nRst, $01
000934C1 E108                       	smpsAlterNote       $08
000934C3 9D03                       	dc.b	nE2, $03
000934C5 E1EB                       	smpsAlterNote       $EB
000934C7 A801                       	dc.b	nEb3, $01
000934C9 E109                       	smpsAlterNote       $09
000934CB E701                       	dc.b	smpsNoAttack, $01
000934CD E1FA                       	smpsAlterNote       $FA
000934CF E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000934D2 E108                       	smpsAlterNote       $08
000934D4 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000934E0 E1E9                       	smpsAlterNote       $E9
000934E2 A301                       	dc.b	nBb2, $01
000934E4 E107                       	smpsAlterNote       $07
000934E6 E701                       	dc.b	smpsNoAttack, $01
000934E8 E1F0                       	smpsAlterNote       $F0
000934EA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000934ED E1F7                       	smpsAlterNote       $F7
000934EF E701                       	dc.b	smpsNoAttack, $01
000934F1 E107                       	smpsAlterNote       $07
000934F3 E701                       	dc.b	smpsNoAttack, $01
000934F5 E106                       	smpsAlterNote       $06
000934F7 E701                       	dc.b	smpsNoAttack, $01
000934F9 E108                       	smpsAlterNote       $08
000934FB 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093501 E106                       	smpsAlterNote       $06
00093503 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093507 E108                       	smpsAlterNote       $08
00093509 9D03                       	dc.b	nE2, $03
0009350B E10B                       	smpsAlterNote       $0B
0009350D 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00093515 E108                       	smpsAlterNote       $08
00093517 9D03                       	dc.b	nE2, $03
00093519 E10B                       	smpsAlterNote       $0B
0009351B 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009351F E113                       	smpsAlterNote       $13
00093521 A001                       	dc.b	nG2, $01
00093523 E118                       	smpsAlterNote       $18
00093525 E701                       	dc.b	smpsNoAttack, $01
00093527 E1E9                       	smpsAlterNote       $E9
00093529 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009352C E1F3                       	smpsAlterNote       $F3
0009352E E701                       	dc.b	smpsNoAttack, $01
00093530 E1FD                       	smpsAlterNote       $FD
00093532 E701                       	dc.b	smpsNoAttack, $01
00093534 E102                       	smpsAlterNote       $02
00093536 E701                       	dc.b	smpsNoAttack, $01
00093538 E107                       	smpsAlterNote       $07
0009353A 8001                       	dc.b	nRst, $01
0009353C E10B                       	smpsAlterNote       $0B
0009353E 9603                       	dc.b	nA1, $03
00093540 E10C                       	smpsAlterNote       $0C
00093542 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00093548 E10B                       	smpsAlterNote       $0B
0009354A 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00093556 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0009355C E107                       	smpsAlterNote       $07
0009355E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093564 E10B                       	smpsAlterNote       $0B
00093566 A203                       	dc.b	nA2, $03
00093568 E107                       	smpsAlterNote       $07
0009356A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009356E E1F2                       	smpsAlterNote       $F2
00093570 A401                       	dc.b	nB2, $01
00093572 E1FF                       	smpsAlterNote       $FF
00093574 E701                       	dc.b	smpsNoAttack, $01
00093576 E107                       	smpsAlterNote       $07
00093578 E701                       	dc.b	smpsNoAttack, $01
0009357A E1FB                       	smpsAlterNote       $FB
0009357C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009357F E106                       	smpsAlterNote       $06
00093581 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093585 E107                       	smpsAlterNote       $07
00093587 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009358B E108                       	smpsAlterNote       $08
0009358D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093593 E109                       	smpsAlterNote       $09
00093595 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093599 E10C                       	smpsAlterNote       $0C
0009359B A302 8001                  	dc.b	nBb2, $02, nRst, $01
0009359F E1F0                       	smpsAlterNote       $F0
000935A1 A401                       	dc.b	nB2, $01
000935A3 E109                       	smpsAlterNote       $09
000935A5 E701                       	dc.b	smpsNoAttack, $01
000935A7 E106                       	smpsAlterNote       $06
000935A9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000935AC E109                       	smpsAlterNote       $09
000935AE A007                       	dc.b	nG2, $07
000935B0 E108                       	smpsAlterNote       $08
000935B2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000935B6 E107                       	smpsAlterNote       $07
000935B8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000935BE E10B                       	smpsAlterNote       $0B
000935C0 A202 8001                  	dc.b	nA2, $02, nRst, $01
000935C4 E107                       	smpsAlterNote       $07
000935C6 9B03                       	dc.b	nD2, $03
000935C8 E11A                       	smpsAlterNote       $1A
000935CA A301                       	dc.b	nBb2, $01
000935CC E1F2                       	smpsAlterNote       $F2
000935CE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000935D1 E1FF                       	smpsAlterNote       $FF
000935D3 E701                       	dc.b	smpsNoAttack, $01
000935D5 E111                       	smpsAlterNote       $11
000935D7 E701                       	dc.b	smpsNoAttack, $01
000935D9 E106                       	smpsAlterNote       $06
000935DB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000935DE E107                       	smpsAlterNote       $07
000935E0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000935EC E117                       	smpsAlterNote       $17
000935EE A001                       	dc.b	nG2, $01
000935F0 E1FA                       	smpsAlterNote       $FA
000935F2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000935F5 E116                       	smpsAlterNote       $16
000935F7 E701                       	dc.b	smpsNoAttack, $01
000935F9 E1F5                       	smpsAlterNote       $F5
000935FB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000935FE E103                       	smpsAlterNote       $03
00093600 E701                       	dc.b	smpsNoAttack, $01
00093602 E10B                       	smpsAlterNote       $0B
00093604 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093608 E107                       	smpsAlterNote       $07
0009360A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093610 E109                       	smpsAlterNote       $09
00093612 9E03                       	dc.b	nF2, $03
00093614 E10B                       	smpsAlterNote       $0B
00093616 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009361A E107                       	smpsAlterNote       $07
0009361C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093622 E10B                       	smpsAlterNote       $0B
00093624 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093628 E107                       	smpsAlterNote       $07
0009362A 9B03                       	dc.b	nD2, $03
0009362C E11A                       	smpsAlterNote       $1A
0009362E A301                       	dc.b	nBb2, $01
00093630 E1F9                       	smpsAlterNote       $F9
00093632 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093635 E107                       	smpsAlterNote       $07
00093637 E701                       	dc.b	smpsNoAttack, $01
00093639 E111                       	smpsAlterNote       $11
0009363B E701                       	dc.b	smpsNoAttack, $01
0009363D E106                       	smpsAlterNote       $06
0009363F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00093644 E107                       	smpsAlterNote       $07
00093646 9B03                       	dc.b	nD2, $03
00093648 E108                       	smpsAlterNote       $08
0009364A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093650 E109                       	smpsAlterNote       $09
00093652 A003                       	dc.b	nG2, $03
00093654 E10C                       	smpsAlterNote       $0C
00093656 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009365A E1FD                       	smpsAlterNote       $FD
0009365C A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00093661 E106                       	smpsAlterNote       $06
00093663 8001                       	dc.b	nRst, $01
00093665 E109                       	smpsAlterNote       $09
00093667 A006 8001                  	dc.b	nG2, $06, nRst, $01
0009366B E108                       	smpsAlterNote       $08
0009366D 9C03                       	dc.b	nEb2, $03
0009366F E107                       	smpsAlterNote       $07
00093671 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093677 E10B                       	smpsAlterNote       $0B
00093679 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009367D E107                       	smpsAlterNote       $07
0009367F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093683 E11A                       	smpsAlterNote       $1A
00093685 A301                       	dc.b	nBb2, $01
00093687 E1F9                       	smpsAlterNote       $F9
00093689 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009368C E107                       	smpsAlterNote       $07
0009368E E701                       	dc.b	smpsNoAttack, $01
00093690 E1FB                       	smpsAlterNote       $FB
00093692 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093695 E106                       	smpsAlterNote       $06
00093697 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009369B E107                       	smpsAlterNote       $07
0009369D 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000936A5 E1EC                       	smpsAlterNote       $EC
000936A7 A101                       	dc.b	nAb2, $01
000936A9 E108                       	smpsAlterNote       $08
000936AB E701                       	dc.b	smpsNoAttack, $01
000936AD E1E7                       	smpsAlterNote       $E7
000936AF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000936B2 E1F5                       	smpsAlterNote       $F5
000936B4 E701                       	dc.b	smpsNoAttack, $01
000936B6 E10B                       	smpsAlterNote       $0B
000936B8 E702                       	dc.b	smpsNoAttack, $02
000936BA E107                       	smpsAlterNote       $07
000936BC 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000936C2 E106                       	smpsAlterNote       $06
000936C4 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000936CA E10C                       	smpsAlterNote       $0C
000936CC 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000936D4 E109                       	smpsAlterNote       $09
000936D6 9E03                       	dc.b	nF2, $03
000936D8 E10C                       	smpsAlterNote       $0C
000936DA 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000936DE E1EA                       	smpsAlterNote       $EA
000936E0 A201                       	dc.b	nA2, $01
000936E2 E106                       	smpsAlterNote       $06
000936E4 E701                       	dc.b	smpsNoAttack, $01
000936E6 E114                       	smpsAlterNote       $14
000936E8 E701                       	dc.b	smpsNoAttack, $01
000936EA E1F0                       	smpsAlterNote       $F0
000936EC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000936EF E10C                       	smpsAlterNote       $0C
000936F1 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000936FD 9703                       	dc.b	nBb1, $03
000936FF E116                       	smpsAlterNote       $16
00093701 9C01                       	dc.b	nEb2, $01
00093703 E105                       	smpsAlterNote       $05
00093705 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093708 E113                       	smpsAlterNote       $13
0009370A E701                       	dc.b	smpsNoAttack, $01
0009370C E1FF                       	smpsAlterNote       $FF
0009370E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093711 E109                       	smpsAlterNote       $09
00093713 E703                       	dc.b	smpsNoAttack, $03
00093715 E10C                       	smpsAlterNote       $0C
00093717 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093723 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009372B E109                       	smpsAlterNote       $09
0009372D 9E03                       	dc.b	nF2, $03
0009372F E10C                       	smpsAlterNote       $0C
00093731 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093735 E1EC                       	smpsAlterNote       $EC
00093737 A201                       	dc.b	nA2, $01
00093739 E10A                       	smpsAlterNote       $0A
0009373B E701                       	dc.b	smpsNoAttack, $01
0009373D E1E8                       	smpsAlterNote       $E8
0009373F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093742 E1F7                       	smpsAlterNote       $F7
00093744 E701                       	dc.b	smpsNoAttack, $01
00093746 E10C                       	smpsAlterNote       $0C
00093748 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093754 E1EA                       	smpsAlterNote       $EA
00093756 9D01                       	dc.b	nE2, $01
00093758 E108                       	smpsAlterNote       $08
0009375A E701                       	dc.b	smpsNoAttack, $01
0009375C E1F6                       	smpsAlterNote       $F6
0009375E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093761 E105                       	smpsAlterNote       $05
00093763 E701                       	dc.b	smpsNoAttack, $01
00093765 E109                       	smpsAlterNote       $09
00093767 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009376B E10C                       	smpsAlterNote       $0C
0009376D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093779 E108                       	smpsAlterNote       $08
0009377B 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093781 E106                       	smpsAlterNote       $06
00093783 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093787 E108                       	smpsAlterNote       $08
00093789 9D03                       	dc.b	nE2, $03
0009378B E1EB                       	smpsAlterNote       $EB
0009378D A801                       	dc.b	nEb3, $01
0009378F E109                       	smpsAlterNote       $09
00093791 E701                       	dc.b	smpsNoAttack, $01
00093793 E1EB                       	smpsAlterNote       $EB
00093795 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093798 E108                       	smpsAlterNote       $08
0009379A E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000937A6 E1E9                       	smpsAlterNote       $E9
000937A8 A301                       	dc.b	nBb2, $01
000937AA E1F8                       	smpsAlterNote       $F8
000937AC E701                       	dc.b	smpsNoAttack, $01
000937AE E116                       	smpsAlterNote       $16
000937B0 E701                       	dc.b	smpsNoAttack, $01
000937B2 E1F7                       	smpsAlterNote       $F7
000937B4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000937B7 E107                       	smpsAlterNote       $07
000937B9 E701                       	dc.b	smpsNoAttack, $01
000937BB E1EE                       	smpsAlterNote       $EE
000937BD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937C0 E106                       	smpsAlterNote       $06
000937C2 8001                       	dc.b	nRst, $01
000937C4 E108                       	smpsAlterNote       $08
000937C6 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000937CC E106                       	smpsAlterNote       $06
000937CE A402 8001                  	dc.b	nB2, $02, nRst, $01
000937D2 E108                       	smpsAlterNote       $08
000937D4 9D03                       	dc.b	nE2, $03
000937D6 E10B                       	smpsAlterNote       $0B
000937D8 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000937DE E108                       	smpsAlterNote       $08
000937E0 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000937E4 E10B                       	smpsAlterNote       $0B
000937E6 9603                       	dc.b	nA1, $03
000937E8 E10E                       	smpsAlterNote       $0E
000937EA A001                       	dc.b	nG2, $01
000937EC E118                       	smpsAlterNote       $18
000937EE E701                       	dc.b	smpsNoAttack, $01
000937F0 E1E9                       	smpsAlterNote       $E9
000937F2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000937F5 E1EE                       	smpsAlterNote       $EE
000937F7 E701                       	dc.b	smpsNoAttack, $01
000937F9 E1F8                       	smpsAlterNote       $F8
000937FB E701                       	dc.b	smpsNoAttack, $01
000937FD E102                       	smpsAlterNote       $02
000937FF E701                       	dc.b	smpsNoAttack, $01
00093801 E107                       	smpsAlterNote       $07
00093803 8001                       	dc.b	nRst, $01
00093805 E10B                       	smpsAlterNote       $0B
00093807 9603                       	dc.b	nA1, $03
00093809 E10C                       	smpsAlterNote       $0C
0009380B 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093811 E10B                       	smpsAlterNote       $0B
00093813 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0009381F 8001 9603                  	dc.b	nRst, $01, nA1, $03
00093823 E10C                       	smpsAlterNote       $0C
00093825 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00093831 8001                       	dc.b	nRst, $01
00093833 E10B                       	smpsAlterNote       $0B
00093835 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0009383D E107                       	smpsAlterNote       $07
0009383F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093843 E10B                       	smpsAlterNote       $0B
00093845 9603                       	dc.b	nA1, $03
00093847 E109                       	smpsAlterNote       $09
00093849 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009384D E108                       	smpsAlterNote       $08
0009384F 9D06                       	dc.b	nE2, $06
00093851 E107                       	smpsAlterNote       $07
00093853 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093857 E106                       	smpsAlterNote       $06
00093859 9903                       	dc.b	nC2, $03
0009385B E10C                       	smpsAlterNote       $0C
0009385D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093861 E10B                       	smpsAlterNote       $0B
00093863 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0009386F 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093879 E10C                       	smpsAlterNote       $0C
0009387B 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00093887 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093893 8001                       	dc.b	nRst, $01
00093895 E10B                       	smpsAlterNote       $0B
00093897 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000938A3 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000938AF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000938BB 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000938C5 E10C                       	smpsAlterNote       $0C
000938C7 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000938D3 E10B                       	smpsAlterNote       $0B
000938D5 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000938DD E107                       	smpsAlterNote       $07
000938DF 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000938E3 E10B                       	smpsAlterNote       $0B
000938E5 9603                       	dc.b	nA1, $03
000938E7 E109                       	smpsAlterNote       $09
000938E9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000938ED E108                       	smpsAlterNote       $08
000938EF 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000938F3 E107                       	smpsAlterNote       $07
000938F5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000938F9 E106                       	smpsAlterNote       $06
000938FB 9903                       	dc.b	nC2, $03
000938FD E10C                       	smpsAlterNote       $0C
000938FF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093903 E10B                       	smpsAlterNote       $0B
00093905 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093911 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009391B E10C                       	smpsAlterNote       $0C
0009391D 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00093929 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093935 8001                       	dc.b	nRst, $01
00093937 E10B                       	smpsAlterNote       $0B
00093939 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093945 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009394F E10C                       	smpsAlterNote       $0C
00093951 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009395D 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093969 E10B                       	smpsAlterNote       $0B
0009396B 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093977 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093981 E10C                       	smpsAlterNote       $0C
00093983 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009398F 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0009399B E10B                       	smpsAlterNote       $0B
0009399D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000939A9 8001                       	dc.b	nRst, $01
000939AB E1EC                       	smpsAlterNote       $EC
000939AD A101                       	dc.b	nAb2, $01
000939AF E1FA                       	smpsAlterNote       $FA
000939B1 E701                       	dc.b	smpsNoAttack, $01
000939B3 E116                       	smpsAlterNote       $16
000939B5 E701                       	dc.b	smpsNoAttack, $01
000939B7 E1F5                       	smpsAlterNote       $F5
000939B9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000939BC E10B                       	smpsAlterNote       $0B
000939BE E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000939CA 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000939D6 E107                       	smpsAlterNote       $07
000939D8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000939DE E10B                       	smpsAlterNote       $0B
000939E0 A203                       	dc.b	nA2, $03
000939E2 E107                       	smpsAlterNote       $07
000939E4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000939E8 E1F3                       	smpsAlterNote       $F3
000939EA A401                       	dc.b	nB2, $01
000939EC E102                       	smpsAlterNote       $02
000939EE E701                       	dc.b	smpsNoAttack, $01
000939F0 E109                       	smpsAlterNote       $09
000939F2 E701                       	dc.b	smpsNoAttack, $01
000939F4 E102                       	smpsAlterNote       $02
000939F6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000939F9 E106                       	smpsAlterNote       $06
000939FB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000939FF E107                       	smpsAlterNote       $07
00093A01 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093A05 E108                       	smpsAlterNote       $08
00093A07 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093A0D E109                       	smpsAlterNote       $09
00093A0F A003 8001                  	dc.b	nG2, $03, nRst, $01
00093A13 E1F2                       	smpsAlterNote       $F2
00093A15 A401                       	dc.b	nB2, $01
00093A17 E1FF                       	smpsAlterNote       $FF
00093A19 E701                       	dc.b	smpsNoAttack, $01
00093A1B E111                       	smpsAlterNote       $11
00093A1D E701                       	dc.b	smpsNoAttack, $01
00093A1F E1FB                       	smpsAlterNote       $FB
00093A21 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A24 E106                       	smpsAlterNote       $06
00093A26 E702                       	dc.b	smpsNoAttack, $02
00093A28 E109                       	smpsAlterNote       $09
00093A2A A007                       	dc.b	nG2, $07
00093A2C E108                       	smpsAlterNote       $08
00093A2E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093A32 E107                       	smpsAlterNote       $07
00093A34 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093A3A E10B                       	smpsAlterNote       $0B
00093A3C A202 8001                  	dc.b	nA2, $02, nRst, $01
00093A40 E107                       	smpsAlterNote       $07
00093A42 9B03                       	dc.b	nD2, $03
00093A44 E11A                       	smpsAlterNote       $1A
00093A46 A301                       	dc.b	nBb2, $01
00093A48 E1F2                       	smpsAlterNote       $F2
00093A4A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093A4D E1FF                       	smpsAlterNote       $FF
00093A4F E701                       	dc.b	smpsNoAttack, $01
00093A51 E111                       	smpsAlterNote       $11
00093A53 E701                       	dc.b	smpsNoAttack, $01
00093A55 E106                       	smpsAlterNote       $06
00093A57 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093A5A E107                       	smpsAlterNote       $07
00093A5C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093A68 E117                       	smpsAlterNote       $17
00093A6A A001                       	dc.b	nG2, $01
00093A6C E1FA                       	smpsAlterNote       $FA
00093A6E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093A71 E116                       	smpsAlterNote       $16
00093A73 E701                       	dc.b	smpsNoAttack, $01
00093A75 E1F5                       	smpsAlterNote       $F5
00093A77 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093A7A E103                       	smpsAlterNote       $03
00093A7C E701                       	dc.b	smpsNoAttack, $01
00093A7E E10B                       	smpsAlterNote       $0B
00093A80 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093A84 E107                       	smpsAlterNote       $07
00093A86 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093A8C E109                       	smpsAlterNote       $09
00093A8E 9E03                       	dc.b	nF2, $03
00093A90 E10B                       	smpsAlterNote       $0B
00093A92 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093A96 E107                       	smpsAlterNote       $07
00093A98 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093A9E E10B                       	smpsAlterNote       $0B
00093AA0 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093AA4 E107                       	smpsAlterNote       $07
00093AA6 9B03                       	dc.b	nD2, $03
00093AA8 E11A                       	smpsAlterNote       $1A
00093AAA A301                       	dc.b	nBb2, $01
00093AAC E1F9                       	smpsAlterNote       $F9
00093AAE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093AB1 E1FF                       	smpsAlterNote       $FF
00093AB3 E701                       	dc.b	smpsNoAttack, $01
00093AB5 E111                       	smpsAlterNote       $11
00093AB7 E701                       	dc.b	smpsNoAttack, $01
00093AB9 E106                       	smpsAlterNote       $06
00093ABB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093ABE E107                       	smpsAlterNote       $07
00093AC0 9B03                       	dc.b	nD2, $03
00093AC2 E108                       	smpsAlterNote       $08
00093AC4 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093ACA E109                       	smpsAlterNote       $09
00093ACC A003                       	dc.b	nG2, $03
00093ACE E1F0                       	smpsAlterNote       $F0
00093AD0 A501                       	dc.b	nC3, $01
00093AD2 E106                       	smpsAlterNote       $06
00093AD4 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093AD8 E109                       	smpsAlterNote       $09
00093ADA A006 8001                  	dc.b	nG2, $06, nRst, $01
00093ADE E108                       	smpsAlterNote       $08
00093AE0 9C03                       	dc.b	nEb2, $03
00093AE2 E107                       	smpsAlterNote       $07
00093AE4 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093AEA E10B                       	smpsAlterNote       $0B
00093AEC A203 8001                  	dc.b	nA2, $03, nRst, $01
00093AF0 E107                       	smpsAlterNote       $07
00093AF2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093AF6 E11A                       	smpsAlterNote       $1A
00093AF8 A301                       	dc.b	nBb2, $01
00093AFA E1F9                       	smpsAlterNote       $F9
00093AFC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093AFF E107                       	smpsAlterNote       $07
00093B01 E701                       	dc.b	smpsNoAttack, $01
00093B03 E1FB                       	smpsAlterNote       $FB
00093B05 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B08 E106                       	smpsAlterNote       $06
00093B0A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093B0E E107                       	smpsAlterNote       $07
00093B10 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093B18 E1EC                       	smpsAlterNote       $EC
00093B1A A101                       	dc.b	nAb2, $01
00093B1C E108                       	smpsAlterNote       $08
00093B1E E701                       	dc.b	smpsNoAttack, $01
00093B20 E1E7                       	smpsAlterNote       $E7
00093B22 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093B25 E1F5                       	smpsAlterNote       $F5
00093B27 E701                       	dc.b	smpsNoAttack, $01
00093B29 E10B                       	smpsAlterNote       $0B
00093B2B E702                       	dc.b	smpsNoAttack, $02
00093B2D E107                       	smpsAlterNote       $07
00093B2F 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093B35 E106                       	smpsAlterNote       $06
00093B37 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093B3D E10C                       	smpsAlterNote       $0C
00093B3F 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093B47 E109                       	smpsAlterNote       $09
00093B49 9E03                       	dc.b	nF2, $03
00093B4B E10C                       	smpsAlterNote       $0C
00093B4D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093B51 E1EA                       	smpsAlterNote       $EA
00093B53 A201                       	dc.b	nA2, $01
00093B55 E106                       	smpsAlterNote       $06
00093B57 E701                       	dc.b	smpsNoAttack, $01
00093B59 E114                       	smpsAlterNote       $14
00093B5B E701                       	dc.b	smpsNoAttack, $01
00093B5D E1F0                       	smpsAlterNote       $F0
00093B5F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093B62 E10C                       	smpsAlterNote       $0C
00093B64 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093B70 9703                       	dc.b	nBb1, $03
00093B72 E116                       	smpsAlterNote       $16
00093B74 9C01                       	dc.b	nEb2, $01
00093B76 E105                       	smpsAlterNote       $05
00093B78 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093B7B E113                       	smpsAlterNote       $13
00093B7D E701                       	dc.b	smpsNoAttack, $01
00093B7F E1FF                       	smpsAlterNote       $FF
00093B81 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093B84 E109                       	smpsAlterNote       $09
00093B86 E703                       	dc.b	smpsNoAttack, $03
00093B88 E10C                       	smpsAlterNote       $0C
00093B8A 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093B96 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093B9E E109                       	smpsAlterNote       $09
00093BA0 9E03                       	dc.b	nF2, $03
00093BA2 E10C                       	smpsAlterNote       $0C
00093BA4 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093BA8 E1EA                       	smpsAlterNote       $EA
00093BAA A201                       	dc.b	nA2, $01
00093BAC E106                       	smpsAlterNote       $06
00093BAE E701                       	dc.b	smpsNoAttack, $01
00093BB0 E1E2                       	smpsAlterNote       $E2
00093BB2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093BB5 E1F0                       	smpsAlterNote       $F0
00093BB7 E701                       	dc.b	smpsNoAttack, $01
00093BB9 E10C                       	smpsAlterNote       $0C
00093BBB E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093BC7 E116                       	smpsAlterNote       $16
00093BC9 9C01                       	dc.b	nEb2, $01
00093BCB E105                       	smpsAlterNote       $05
00093BCD E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093BD0 E1F1                       	smpsAlterNote       $F1
00093BD2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093BD5 E1FF                       	smpsAlterNote       $FF
00093BD7 E701                       	dc.b	smpsNoAttack, $01
00093BD9 E109                       	smpsAlterNote       $09
00093BDB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093BDF E10C                       	smpsAlterNote       $0C
00093BE1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093BED E106                       	smpsAlterNote       $06
00093BEF 9903                       	dc.b	nC2, $03
00093BF1 E107                       	smpsAlterNote       $07
00093BF3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093BF7 E109                       	smpsAlterNote       $09
00093BF9 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093BFF E107                       	smpsAlterNote       $07
00093C01 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093C05 E108                       	smpsAlterNote       $08
00093C07 9D03                       	dc.b	nE2, $03
00093C09 E10B                       	smpsAlterNote       $0B
00093C0B 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093C11 E109                       	smpsAlterNote       $09
00093C13 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093C19 E10C                       	smpsAlterNote       $0C
00093C1B 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093C21 E106                       	smpsAlterNote       $06
00093C23 9903                       	dc.b	nC2, $03
00093C25 E11A                       	smpsAlterNote       $1A
00093C27 A301                       	dc.b	nBb2, $01
00093C29 E1F9                       	smpsAlterNote       $F9
00093C2B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093C2E E1FF                       	smpsAlterNote       $FF
00093C30 E701                       	dc.b	smpsNoAttack, $01
00093C32 E111                       	smpsAlterNote       $11
00093C34 E701                       	dc.b	smpsNoAttack, $01
00093C36 E106                       	smpsAlterNote       $06
00093C38 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093C3F E109                       	smpsAlterNote       $09
00093C41 A003                       	dc.b	nG2, $03
00093C43 E106                       	smpsAlterNote       $06
00093C45 9907                       	dc.b	nC2, $07
00093C47 E107                       	smpsAlterNote       $07
00093C49 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093C51 E10B                       	smpsAlterNote       $0B
00093C53 A203                       	dc.b	nA2, $03
00093C55 E107                       	smpsAlterNote       $07
00093C57 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093C5B E1F2                       	smpsAlterNote       $F2
00093C5D A401                       	dc.b	nB2, $01
00093C5F E1F9                       	smpsAlterNote       $F9
00093C61 E701                       	dc.b	smpsNoAttack, $01
00093C63 E107                       	smpsAlterNote       $07
00093C65 E701                       	dc.b	smpsNoAttack, $01
00093C67 E1FB                       	smpsAlterNote       $FB
00093C69 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C6C E106                       	smpsAlterNote       $06
00093C6E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C72 E107                       	smpsAlterNote       $07
00093C74 9B03                       	dc.b	nD2, $03
00093C76 E108                       	smpsAlterNote       $08
00093C78 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093C7E E109                       	smpsAlterNote       $09
00093C80 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093C84 E1F2                       	smpsAlterNote       $F2
00093C86 A401                       	dc.b	nB2, $01
00093C88 E1F9                       	smpsAlterNote       $F9
00093C8A E701                       	dc.b	smpsNoAttack, $01
00093C8C E107                       	smpsAlterNote       $07
00093C8E E701                       	dc.b	smpsNoAttack, $01
00093C90 E1FB                       	smpsAlterNote       $FB
00093C92 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C95 E106                       	smpsAlterNote       $06
00093C97 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C9B E108                       	smpsAlterNote       $08
00093C9D 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093CA1 E10C                       	smpsAlterNote       $0C
00093CA3 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093CA7 E107                       	smpsAlterNote       $07
00093CA9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093CAF E10B                       	smpsAlterNote       $0B
00093CB1 A203                       	dc.b	nA2, $03
00093CB3 E107                       	smpsAlterNote       $07
00093CB5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093CB9 E1F2                       	smpsAlterNote       $F2
00093CBB A401                       	dc.b	nB2, $01
00093CBD E1FF                       	smpsAlterNote       $FF
00093CBF E701                       	dc.b	smpsNoAttack, $01
00093CC1 E107                       	smpsAlterNote       $07
00093CC3 E701                       	dc.b	smpsNoAttack, $01
00093CC5 E1FB                       	smpsAlterNote       $FB
00093CC7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093CCA E106                       	smpsAlterNote       $06
00093CCC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093CD0 E107                       	smpsAlterNote       $07
00093CD2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093CD6 E108                       	smpsAlterNote       $08
00093CD8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093CDE E109                       	smpsAlterNote       $09
00093CE0 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093CE4 E1F2                       	smpsAlterNote       $F2
00093CE6 A401                       	dc.b	nB2, $01
00093CE8 E1FF                       	smpsAlterNote       $FF
00093CEA E701                       	dc.b	smpsNoAttack, $01
00093CEC E111                       	smpsAlterNote       $11
00093CEE E701                       	dc.b	smpsNoAttack, $01
00093CF0 E1FB                       	smpsAlterNote       $FB
00093CF2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093CF5 E106                       	smpsAlterNote       $06
00093CF7 E702                       	dc.b	smpsNoAttack, $02
00093CF9 E108                       	smpsAlterNote       $08
00093CFB 9C07                       	dc.b	nEb2, $07
00093CFD E10C                       	smpsAlterNote       $0C
00093CFF A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093D03 E107                       	smpsAlterNote       $07
00093D05 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093D0B E10B                       	smpsAlterNote       $0B
00093D0D A202 8001                  	dc.b	nA2, $02, nRst, $01
00093D11 E107                       	smpsAlterNote       $07
00093D13 9B03                       	dc.b	nD2, $03
00093D15 E11A                       	smpsAlterNote       $1A
00093D17 A301                       	dc.b	nBb2, $01
00093D19 E1F2                       	smpsAlterNote       $F2
00093D1B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093D1E E1FF                       	smpsAlterNote       $FF
00093D20 E701                       	dc.b	smpsNoAttack, $01
00093D22 E111                       	smpsAlterNote       $11
00093D24 E701                       	dc.b	smpsNoAttack, $01
00093D26 E106                       	smpsAlterNote       $06
00093D28 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093D2B E107                       	smpsAlterNote       $07
00093D2D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D31 E108                       	smpsAlterNote       $08
00093D33 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093D3B E109                       	smpsAlterNote       $09
00093D3D A003                       	dc.b	nG2, $03
00093D3F E11A                       	smpsAlterNote       $1A
00093D41 A301                       	dc.b	nBb2, $01
00093D43 E1F2                       	smpsAlterNote       $F2
00093D45 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093D48 E1FF                       	smpsAlterNote       $FF
00093D4A E701                       	dc.b	smpsNoAttack, $01
00093D4C E111                       	smpsAlterNote       $11
00093D4E E701                       	dc.b	smpsNoAttack, $01
00093D50 E106                       	smpsAlterNote       $06
00093D52 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093D55 E108                       	smpsAlterNote       $08
00093D57 9C07                       	dc.b	nEb2, $07
00093D59 E10C                       	smpsAlterNote       $0C
00093D5B A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093D5F E107                       	smpsAlterNote       $07
00093D61 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093D6D 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093D77 E108                       	smpsAlterNote       $08
00093D79 9C06                       	dc.b	nEb2, $06
00093D7B E10C                       	smpsAlterNote       $0C
00093D7D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093D81 E108                       	smpsAlterNote       $08
00093D83 9C03                       	dc.b	nEb2, $03
00093D85 E109                       	smpsAlterNote       $09
00093D87 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093D8B E10C                       	smpsAlterNote       $0C
00093D8D A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093D95 E107                       	smpsAlterNote       $07
00093D97 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D9B F6F4 F8                    	smpsJump            music84_Jump04
00093D9E                            
00093D9E                            ; FM2 Data
00093D9E                            music84_FM2:
00093D9E E0C0                       	smpsPan             panCenter, $00
00093DA2 E10B                       	smpsAlterNote       $0B
00093DA4 C603 8007                  	dc.b	nA5, $03, nRst, $07
00093DA8 E109                       	smpsAlterNote       $09
00093DAA C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093DAE E108                       	smpsAlterNote       $08
00093DB0 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093DB6 E080                       	smpsPan             panLeft, $00
00093DB8 E10C                       	smpsAlterNote       $0C
00093DBA E6F9                       	smpsAlterVol        $F9
00093DBC C703                       	dc.b	nBb5, $03
00093DBE E10B                       	smpsAlterNote       $0B
00093DC0 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093DC4 E109                       	smpsAlterNote       $09
00093DC6 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093DCC E108                       	smpsAlterNote       $08
00093DCE C103 8001                  	dc.b	nE5, $03, nRst, $01
00093DD2 E106                       	smpsAlterNote       $06
00093DD4 BD03                       	dc.b	nC5, $03
00093DD6 E10B                       	smpsAlterNote       $0B
00093DD8 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093DDE E0C0                       	smpsPan             panCenter, $00
00093DE0 E107                       	smpsAlterNote       $07
00093DE2 E606                       	smpsAlterVol        $06
00093DE4 BF03                       	dc.b	nD5, $03
00093DE6                            
00093DE6                            music84_Jump03:
00093DE6 E108                       	smpsAlterNote       $08
00093DE8 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093DEC E109                       	smpsAlterNote       $09
00093DEE C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093DF4 E10B                       	smpsAlterNote       $0B
00093DF6 C607                       	dc.b	nA5, $07
00093DF8 E107                       	smpsAlterNote       $07
00093DFA BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093DFE E106                       	smpsAlterNote       $06
00093E00 C90D                       	dc.b	nC6, $0D
00093E02 E100                       	smpsAlterNote       $00
00093E04 E701                       	dc.b	smpsNoAttack, $01
00093E06 E1FF                       	smpsAlterNote       $FF
00093E08 E701                       	dc.b	smpsNoAttack, $01
00093E0A E103                       	smpsAlterNote       $03
00093E0C E701                       	dc.b	smpsNoAttack, $01
00093E0E E109                       	smpsAlterNote       $09
00093E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E14 E106                       	smpsAlterNote       $06
00093E16 E701                       	dc.b	smpsNoAttack, $01
00093E18 E100                       	smpsAlterNote       $00
00093E1A E701                       	dc.b	smpsNoAttack, $01
00093E1C E10C                       	smpsAlterNote       $0C
00093E1E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093E22 E10B                       	smpsAlterNote       $0B
00093E24 C603                       	dc.b	nA5, $03
00093E26 E109                       	smpsAlterNote       $09
00093E28 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093E2C E10B                       	smpsAlterNote       $0B
00093E2E C60D                       	dc.b	nA5, $0D
00093E30 E105                       	smpsAlterNote       $05
00093E32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E36 E10B                       	smpsAlterNote       $0B
00093E38 E701                       	dc.b	smpsNoAttack, $01
00093E3A E10E                       	smpsAlterNote       $0E
00093E3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E40 E108                       	smpsAlterNote       $08
00093E42 E701                       	dc.b	smpsNoAttack, $01
00093E44 E104                       	smpsAlterNote       $04
00093E46 E701                       	dc.b	smpsNoAttack, $01
00093E48 E105                       	smpsAlterNote       $05
00093E4A E701                       	dc.b	smpsNoAttack, $01
00093E4C E10B                       	smpsAlterNote       $0B
00093E4E E701                       	dc.b	smpsNoAttack, $01
00093E50 E10F                       	smpsAlterNote       $0F
00093E52 E701                       	dc.b	smpsNoAttack, $01
00093E54 E10B                       	smpsAlterNote       $0B
00093E56 E701                       	dc.b	smpsNoAttack, $01
00093E58 E108                       	smpsAlterNote       $08
00093E5A E701                       	dc.b	smpsNoAttack, $01
00093E5C E104                       	smpsAlterNote       $04
00093E5E E701                       	dc.b	smpsNoAttack, $01
00093E60 E108                       	smpsAlterNote       $08
00093E62 E701                       	dc.b	smpsNoAttack, $01
00093E64 E10E                       	smpsAlterNote       $0E
00093E66 E701                       	dc.b	smpsNoAttack, $01
00093E68 E10F                       	smpsAlterNote       $0F
00093E6A E701                       	dc.b	smpsNoAttack, $01
00093E6C E10B                       	smpsAlterNote       $0B
00093E6E E701                       	dc.b	smpsNoAttack, $01
00093E70 E105                       	smpsAlterNote       $05
00093E72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E76 E108                       	smpsAlterNote       $08
00093E78 E701                       	dc.b	smpsNoAttack, $01
00093E7A E10E                       	smpsAlterNote       $0E
00093E7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E80 E108                       	smpsAlterNote       $08
00093E82 E701                       	dc.b	smpsNoAttack, $01
00093E84 E105                       	smpsAlterNote       $05
00093E86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E8A E10B                       	smpsAlterNote       $0B
00093E8C E701                       	dc.b	smpsNoAttack, $01
00093E8E E10F                       	smpsAlterNote       $0F
00093E90 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093E94 E107                       	smpsAlterNote       $07
00093E96 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093E9A E108                       	smpsAlterNote       $08
00093E9C C103                       	dc.b	nE5, $03
00093E9E E109                       	smpsAlterNote       $09
00093EA0 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093EA8 E10B                       	smpsAlterNote       $0B
00093EAA C606 8001                  	dc.b	nA5, $06, nRst, $01
00093EAE E107                       	smpsAlterNote       $07
00093EB0 BF03                       	dc.b	nD5, $03
00093EB2 E106                       	smpsAlterNote       $06
00093EB4 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00093EB8 E107                       	smpsAlterNote       $07
00093EBA CB03                       	dc.b	nD6, $03
00093EBC E10C                       	smpsAlterNote       $0C
00093EBE C704 8001                  	dc.b	nBb5, $04, nRst, $01
00093EC2 E10B                       	smpsAlterNote       $0B
00093EC4 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093EC8 E109                       	smpsAlterNote       $09
00093ECA C404                       	dc.b	nG5, $04
00093ECC E10B                       	smpsAlterNote       $0B
00093ECE C60D                       	dc.b	nA5, $0D
00093ED0 E108                       	smpsAlterNote       $08
00093ED2 E701                       	dc.b	smpsNoAttack, $01
00093ED4 E104                       	smpsAlterNote       $04
00093ED6 E701                       	dc.b	smpsNoAttack, $01
00093ED8 E108                       	smpsAlterNote       $08
00093EDA E701                       	dc.b	smpsNoAttack, $01
00093EDC E10B                       	smpsAlterNote       $0B
00093EDE E701                       	dc.b	smpsNoAttack, $01
00093EE0 E10F                       	smpsAlterNote       $0F
00093EE2 E701                       	dc.b	smpsNoAttack, $01
00093EE4 E10B                       	smpsAlterNote       $0B
00093EE6 E701                       	dc.b	smpsNoAttack, $01
00093EE8 E105                       	smpsAlterNote       $05
00093EEA E701                       	dc.b	smpsNoAttack, $01
00093EEC E104                       	smpsAlterNote       $04
00093EEE E701                       	dc.b	smpsNoAttack, $01
00093EF0 E108                       	smpsAlterNote       $08
00093EF2 E701                       	dc.b	smpsNoAttack, $01
00093EF4 E10E                       	smpsAlterNote       $0E
00093EF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EFA E10B                       	smpsAlterNote       $0B
00093EFC E701                       	dc.b	smpsNoAttack, $01
00093EFE E105                       	smpsAlterNote       $05
00093F00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F04 E10B                       	smpsAlterNote       $0B
00093F06 E701                       	dc.b	smpsNoAttack, $01
00093F08 E10E                       	smpsAlterNote       $0E
00093F0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F0E E108                       	smpsAlterNote       $08
00093F10 E701                       	dc.b	smpsNoAttack, $01
00093F12 E104                       	smpsAlterNote       $04
00093F14 E701                       	dc.b	smpsNoAttack, $01
00093F16 E105                       	smpsAlterNote       $05
00093F18 E701                       	dc.b	smpsNoAttack, $01
00093F1A E10B                       	smpsAlterNote       $0B
00093F1C E701                       	dc.b	smpsNoAttack, $01
00093F1E E10F                       	smpsAlterNote       $0F
00093F20 E701                       	dc.b	smpsNoAttack, $01
00093F22 E10B                       	smpsAlterNote       $0B
00093F24 E701                       	dc.b	smpsNoAttack, $01
00093F26 E108                       	smpsAlterNote       $08
00093F28 E701                       	dc.b	smpsNoAttack, $01
00093F2A E105                       	smpsAlterNote       $05
00093F2C 8001                       	dc.b	nRst, $01
00093F2E E109                       	smpsAlterNote       $09
00093F30 C401                       	dc.b	nG5, $01
00093F32 E10B                       	smpsAlterNote       $0B
00093F34 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00093F3D E109                       	smpsAlterNote       $09
00093F3F C404 8001                  	dc.b	nG5, $04, nRst, $01
00093F43 E10B                       	smpsAlterNote       $0B
00093F45 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093F49 E107                       	smpsAlterNote       $07
00093F4B BF0D                       	dc.b	nD5, $0D
00093F4D E101                       	smpsAlterNote       $01
00093F4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F53 E104                       	smpsAlterNote       $04
00093F55 E701                       	dc.b	smpsNoAttack, $01
00093F57 E10A                       	smpsAlterNote       $0A
00093F59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F5D E104                       	smpsAlterNote       $04
00093F5F E701                       	dc.b	smpsNoAttack, $01
00093F61 E101                       	smpsAlterNote       $01
00093F63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F67 E107                       	smpsAlterNote       $07
00093F69 E701                       	dc.b	smpsNoAttack, $01
00093F6B E10B                       	smpsAlterNote       $0B
00093F6D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093F71 E108                       	smpsAlterNote       $08
00093F73 C101                       	dc.b	nE5, $01
00093F75 E109                       	smpsAlterNote       $09
00093F77 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00093F7C E10B                       	smpsAlterNote       $0B
00093F7E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00093F86 E108                       	smpsAlterNote       $08
00093F88 CD06                       	dc.b	nE6, $06
00093F8A E109                       	smpsAlterNote       $09
00093F8C CE07                       	dc.b	nF6, $07
00093F8E E108                       	smpsAlterNote       $08
00093F90 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00093F94 E106                       	smpsAlterNote       $06
00093F96 C903                       	dc.b	nC6, $03
00093F98 E109                       	smpsAlterNote       $09
00093F9A C403 8001                  	dc.b	nG5, $03, nRst, $01
00093F9E E10C                       	smpsAlterNote       $0C
00093FA0 C70D                       	dc.b	nBb5, $0D
00093FA2 E106                       	smpsAlterNote       $06
00093FA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FA8 E109                       	smpsAlterNote       $09
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAC E10F                       	smpsAlterNote       $0F
00093FAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FB2 E109                       	smpsAlterNote       $09
00093FB4 E701                       	dc.b	smpsNoAttack, $01
00093FB6 E106                       	smpsAlterNote       $06
00093FB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FBC E10C                       	smpsAlterNote       $0C
00093FBE E701                       	dc.b	smpsNoAttack, $01
00093FC0 E110                       	smpsAlterNote       $10
00093FC2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093FC6 E10B                       	smpsAlterNote       $0B
00093FC8 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00093FCC E105                       	smpsAlterNote       $05
00093FCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FD2 E10B                       	smpsAlterNote       $0B
00093FD4 E701                       	dc.b	smpsNoAttack, $01
00093FD6 E10E                       	smpsAlterNote       $0E
00093FD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FDC E108                       	smpsAlterNote       $08
00093FDE E701                       	dc.b	smpsNoAttack, $01
00093FE0 E104                       	smpsAlterNote       $04
00093FE2 E701                       	dc.b	smpsNoAttack, $01
00093FE4 E105                       	smpsAlterNote       $05
00093FE6 E701                       	dc.b	smpsNoAttack, $01
00093FE8 E10B                       	smpsAlterNote       $0B
00093FEA E701                       	dc.b	smpsNoAttack, $01
00093FEC E10F                       	smpsAlterNote       $0F
00093FEE E701                       	dc.b	smpsNoAttack, $01
00093FF0 E10B                       	smpsAlterNote       $0B
00093FF2 E701                       	dc.b	smpsNoAttack, $01
00093FF4 E108                       	smpsAlterNote       $08
00093FF6 E701                       	dc.b	smpsNoAttack, $01
00093FF8 E104                       	smpsAlterNote       $04
00093FFA E701                       	dc.b	smpsNoAttack, $01
00093FFC E108                       	smpsAlterNote       $08
00093FFE E701                       	dc.b	smpsNoAttack, $01
00094000 E10E                       	smpsAlterNote       $0E
00094002 E701                       	dc.b	smpsNoAttack, $01
00094004 E10F                       	smpsAlterNote       $0F
00094006 E701                       	dc.b	smpsNoAttack, $01
00094008 E10B                       	smpsAlterNote       $0B
0009400A E701                       	dc.b	smpsNoAttack, $01
0009400C E105                       	smpsAlterNote       $05
0009400E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094012 E108                       	smpsAlterNote       $08
00094014 E701                       	dc.b	smpsNoAttack, $01
00094016 E10E                       	smpsAlterNote       $0E
00094018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009401C E108                       	smpsAlterNote       $08
0009401E E701                       	dc.b	smpsNoAttack, $01
00094020 E105                       	smpsAlterNote       $05
00094022 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094026 E10B                       	smpsAlterNote       $0B
00094028 E701                       	dc.b	smpsNoAttack, $01
0009402A E10F                       	smpsAlterNote       $0F
0009402C E701                       	dc.b	smpsNoAttack, $01
0009402E E10E                       	smpsAlterNote       $0E
00094030 E701                       	dc.b	smpsNoAttack, $01
00094032 E108                       	smpsAlterNote       $08
00094034 E701                       	dc.b	smpsNoAttack, $01
00094036 E104                       	smpsAlterNote       $04
00094038 E701                       	dc.b	smpsNoAttack, $01
0009403A E108                       	smpsAlterNote       $08
0009403C E701                       	dc.b	smpsNoAttack, $01
0009403E E10E                       	smpsAlterNote       $0E
00094040 E701                       	dc.b	smpsNoAttack, $01
00094042 E10F                       	smpsAlterNote       $0F
00094044 E701                       	dc.b	smpsNoAttack, $01
00094046 E10B                       	smpsAlterNote       $0B
00094048 E701                       	dc.b	smpsNoAttack, $01
0009404A E105                       	smpsAlterNote       $05
0009404C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094050 E108                       	smpsAlterNote       $08
00094052 E701                       	dc.b	smpsNoAttack, $01
00094054 E10E                       	smpsAlterNote       $0E
00094056 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009405A E108                       	smpsAlterNote       $08
0009405C E701                       	dc.b	smpsNoAttack, $01
0009405E E105                       	smpsAlterNote       $05
00094060 E701                       	dc.b	smpsNoAttack, $01
00094062 E10B                       	smpsAlterNote       $0B
00094064 C60D                       	dc.b	nA5, $0D
00094066 E108                       	smpsAlterNote       $08
00094068 E701                       	dc.b	smpsNoAttack, $01
0009406A E104                       	smpsAlterNote       $04
0009406C E701                       	dc.b	smpsNoAttack, $01
0009406E E105                       	smpsAlterNote       $05
00094070 E701                       	dc.b	smpsNoAttack, $01
00094072 E10B                       	smpsAlterNote       $0B
00094074 E701                       	dc.b	smpsNoAttack, $01
00094076 E10F                       	smpsAlterNote       $0F
00094078 E701                       	dc.b	smpsNoAttack, $01
0009407A E10B                       	smpsAlterNote       $0B
0009407C E701                       	dc.b	smpsNoAttack, $01
0009407E E108                       	smpsAlterNote       $08
00094080 E701                       	dc.b	smpsNoAttack, $01
00094082 E104                       	smpsAlterNote       $04
00094084 E701                       	dc.b	smpsNoAttack, $01
00094086 E108                       	smpsAlterNote       $08
00094088 E701                       	dc.b	smpsNoAttack, $01
0009408A E10E                       	smpsAlterNote       $0E
0009408C E701                       	dc.b	smpsNoAttack, $01
0009408E E10F                       	smpsAlterNote       $0F
00094090 E701                       	dc.b	smpsNoAttack, $01
00094094 E109                       	smpsAlterNote       $09
00094096 E6FF                       	smpsAlterVol        $FF
00094098 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000940A2 E108                       	smpsAlterNote       $08
000940A4 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000940AA E107                       	smpsAlterNote       $07
000940AC E601                       	smpsAlterVol        $01
000940AE BF03                       	dc.b	nD5, $03
000940B0 E108                       	smpsAlterNote       $08
000940B2 C103 8001                  	dc.b	nE5, $03, nRst, $01
000940B6 E109                       	smpsAlterNote       $09
000940B8 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000940BE E10B                       	smpsAlterNote       $0B
000940C0 C606 8001                  	dc.b	nA5, $06, nRst, $01
000940C4 E107                       	smpsAlterNote       $07
000940C6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000940CA E106                       	smpsAlterNote       $06
000940CC C90D                       	dc.b	nC6, $0D
000940CE E103                       	smpsAlterNote       $03
000940D0 E701                       	dc.b	smpsNoAttack, $01
000940D2 E1FF                       	smpsAlterNote       $FF
000940D4 E701                       	dc.b	smpsNoAttack, $01
000940D6 E103                       	smpsAlterNote       $03
000940D8 E701                       	dc.b	smpsNoAttack, $01
000940DA E109                       	smpsAlterNote       $09
000940DC E701                       	dc.b	smpsNoAttack, $01
000940DE E10A                       	smpsAlterNote       $0A
000940E0 E701                       	dc.b	smpsNoAttack, $01
000940E2 E106                       	smpsAlterNote       $06
000940E4 E701                       	dc.b	smpsNoAttack, $01
000940E6 E100                       	smpsAlterNote       $00
000940E8 E701                       	dc.b	smpsNoAttack, $01
000940EA E10C                       	smpsAlterNote       $0C
000940EC C703 8001                  	dc.b	nBb5, $03, nRst, $01
000940F0 E10B                       	smpsAlterNote       $0B
000940F2 C603                       	dc.b	nA5, $03
000940F4 E109                       	smpsAlterNote       $09
000940F6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000940FA E10B                       	smpsAlterNote       $0B
000940FC C60D                       	dc.b	nA5, $0D
000940FE E105                       	smpsAlterNote       $05
00094100 E701                       	dc.b	smpsNoAttack, $01
00094102 E104                       	smpsAlterNote       $04
00094104 E701                       	dc.b	smpsNoAttack, $01
00094106 E108                       	smpsAlterNote       $08
00094108 E701                       	dc.b	smpsNoAttack, $01
0009410A E10E                       	smpsAlterNote       $0E
0009410C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094110 E10B                       	smpsAlterNote       $0B
00094112 E701                       	dc.b	smpsNoAttack, $01
00094114 E105                       	smpsAlterNote       $05
00094116 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009411A E10B                       	smpsAlterNote       $0B
0009411C E701                       	dc.b	smpsNoAttack, $01
0009411E E10E                       	smpsAlterNote       $0E
00094120 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094124 E108                       	smpsAlterNote       $08
00094126 E701                       	dc.b	smpsNoAttack, $01
00094128 E104                       	smpsAlterNote       $04
0009412A E701                       	dc.b	smpsNoAttack, $01
0009412C E105                       	smpsAlterNote       $05
0009412E E701                       	dc.b	smpsNoAttack, $01
00094130 E10B                       	smpsAlterNote       $0B
00094132 E701                       	dc.b	smpsNoAttack, $01
00094134 E10F                       	smpsAlterNote       $0F
00094136 E701                       	dc.b	smpsNoAttack, $01
00094138 E10B                       	smpsAlterNote       $0B
0009413A E701                       	dc.b	smpsNoAttack, $01
0009413C E108                       	smpsAlterNote       $08
0009413E E701                       	dc.b	smpsNoAttack, $01
00094140 E104                       	smpsAlterNote       $04
00094142 E701                       	dc.b	smpsNoAttack, $01
00094144 E108                       	smpsAlterNote       $08
00094146 E701                       	dc.b	smpsNoAttack, $01
00094148 E10E                       	smpsAlterNote       $0E
0009414A E701                       	dc.b	smpsNoAttack, $01
0009414C E10F                       	smpsAlterNote       $0F
0009414E E701                       	dc.b	smpsNoAttack, $01
00094150 E10B                       	smpsAlterNote       $0B
00094152 E701                       	dc.b	smpsNoAttack, $01
00094154 E105                       	smpsAlterNote       $05
00094156 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009415A E108                       	smpsAlterNote       $08
0009415C E701                       	dc.b	smpsNoAttack, $01
0009415E E10E                       	smpsAlterNote       $0E
00094160 E701                       	dc.b	smpsNoAttack, $01
00094162 E10F                       	smpsAlterNote       $0F
00094164 800F                       	dc.b	nRst, $0F
00094166 E107                       	smpsAlterNote       $07
00094168 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009416C E108                       	smpsAlterNote       $08
0009416E C103                       	dc.b	nE5, $03
00094170 E109                       	smpsAlterNote       $09
00094172 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094178 E10B                       	smpsAlterNote       $0B
0009417A C606 8001                  	dc.b	nA5, $06, nRst, $01
0009417E E107                       	smpsAlterNote       $07
00094180 BF03                       	dc.b	nD5, $03
00094182 E106                       	smpsAlterNote       $06
00094184 C90E                       	dc.b	nC6, $0E
00094186 E107                       	smpsAlterNote       $07
00094188 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0009418C E10C                       	smpsAlterNote       $0C
0009418E C704                       	dc.b	nBb5, $04
00094190 E10B                       	smpsAlterNote       $0B
00094192 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094196 E109                       	smpsAlterNote       $09
00094198 C404                       	dc.b	nG5, $04
0009419A E10B                       	smpsAlterNote       $0B
0009419C C60D                       	dc.b	nA5, $0D
0009419E E108                       	smpsAlterNote       $08
000941A0 E701                       	dc.b	smpsNoAttack, $01
000941A2 E105                       	smpsAlterNote       $05
000941A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941A8 E10B                       	smpsAlterNote       $0B
000941AA E701                       	dc.b	smpsNoAttack, $01
000941AC E10F                       	smpsAlterNote       $0F
000941AE E701                       	dc.b	smpsNoAttack, $01
000941B0 E10E                       	smpsAlterNote       $0E
000941B2 E701                       	dc.b	smpsNoAttack, $01
000941B4 E108                       	smpsAlterNote       $08
000941B6 E701                       	dc.b	smpsNoAttack, $01
000941B8 E104                       	smpsAlterNote       $04
000941BA E701                       	dc.b	smpsNoAttack, $01
000941BC E108                       	smpsAlterNote       $08
000941BE E701                       	dc.b	smpsNoAttack, $01
000941C0 E10B                       	smpsAlterNote       $0B
000941C2 E701                       	dc.b	smpsNoAttack, $01
000941C4 E10F                       	smpsAlterNote       $0F
000941C6 E701                       	dc.b	smpsNoAttack, $01
000941C8 E10B                       	smpsAlterNote       $0B
000941CA E701                       	dc.b	smpsNoAttack, $01
000941CC E105                       	smpsAlterNote       $05
000941CE E701                       	dc.b	smpsNoAttack, $01
000941D0 E104                       	smpsAlterNote       $04
000941D2 E701                       	dc.b	smpsNoAttack, $01
000941D4 E108                       	smpsAlterNote       $08
000941D6 E701                       	dc.b	smpsNoAttack, $01
000941D8 E10E                       	smpsAlterNote       $0E
000941DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941DE E10B                       	smpsAlterNote       $0B
000941E0 E701                       	dc.b	smpsNoAttack, $01
000941E2 E105                       	smpsAlterNote       $05
000941E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941E8 E10B                       	smpsAlterNote       $0B
000941EA E701                       	dc.b	smpsNoAttack, $01
000941EC E10E                       	smpsAlterNote       $0E
000941EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941F2 E108                       	smpsAlterNote       $08
000941F4 E701                       	dc.b	smpsNoAttack, $01
000941F6 E105                       	smpsAlterNote       $05
000941F8 8001                       	dc.b	nRst, $01
000941FA E109                       	smpsAlterNote       $09
000941FC C402                       	dc.b	nG5, $02
000941FE E10B                       	smpsAlterNote       $0B
00094200 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094209 E109                       	smpsAlterNote       $09
0009420B C404                       	dc.b	nG5, $04
0009420D E10B                       	smpsAlterNote       $0B
0009420F C604 8001                  	dc.b	nA5, $04, nRst, $01
00094213 E107                       	smpsAlterNote       $07
00094215 BF0D                       	dc.b	nD5, $0D
00094217 E101                       	smpsAlterNote       $01
00094219 E701                       	dc.b	smpsNoAttack, $01
0009421B E100                       	smpsAlterNote       $00
0009421D E701                       	dc.b	smpsNoAttack, $01
0009421F E104                       	smpsAlterNote       $04
00094221 E701                       	dc.b	smpsNoAttack, $01
00094223 E10A                       	smpsAlterNote       $0A
00094225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094229 E107                       	smpsAlterNote       $07
0009422B E701                       	dc.b	smpsNoAttack, $01
0009422D E101                       	smpsAlterNote       $01
0009422F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094233 E107                       	smpsAlterNote       $07
00094235 E701                       	dc.b	smpsNoAttack, $01
00094237 E10A                       	smpsAlterNote       $0A
00094239 E701                       	dc.b	smpsNoAttack, $01
0009423B E10B                       	smpsAlterNote       $0B
0009423D 8001                       	dc.b	nRst, $01
0009423F E108                       	smpsAlterNote       $08
00094241 C101                       	dc.b	nE5, $01
00094243 E109                       	smpsAlterNote       $09
00094245 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0009424A E10B                       	smpsAlterNote       $0B
0009424C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094254 E108                       	smpsAlterNote       $08
00094256 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009425A E109                       	smpsAlterNote       $09
0009425C CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094260 E108                       	smpsAlterNote       $08
00094262 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094266 E106                       	smpsAlterNote       $06
00094268 C903                       	dc.b	nC6, $03
0009426A E109                       	smpsAlterNote       $09
0009426C C403 8001                  	dc.b	nG5, $03, nRst, $01
00094270 E10C                       	smpsAlterNote       $0C
00094272 C70D                       	dc.b	nBb5, $0D
00094274 E109                       	smpsAlterNote       $09
00094276 E701                       	dc.b	smpsNoAttack, $01
00094278 E105                       	smpsAlterNote       $05
0009427A E701                       	dc.b	smpsNoAttack, $01
0009427C E109                       	smpsAlterNote       $09
0009427E E701                       	dc.b	smpsNoAttack, $01
00094280 E10F                       	smpsAlterNote       $0F
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E110                       	smpsAlterNote       $10
00094286 E701                       	dc.b	smpsNoAttack, $01
00094288 E10C                       	smpsAlterNote       $0C
0009428A E701                       	dc.b	smpsNoAttack, $01
0009428C E106                       	smpsAlterNote       $06
0009428E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094292 E109                       	smpsAlterNote       $09
00094294 E701                       	dc.b	smpsNoAttack, $01
00094296 E10F                       	smpsAlterNote       $0F
00094298 E701                       	dc.b	smpsNoAttack, $01
0009429A E110                       	smpsAlterNote       $10
0009429C 8001                       	dc.b	nRst, $01
0009429E E10B                       	smpsAlterNote       $0B
000942A0 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000942A6 E105                       	smpsAlterNote       $05
000942A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942AC E108                       	smpsAlterNote       $08
000942AE E701                       	dc.b	smpsNoAttack, $01
000942B0 E10E                       	smpsAlterNote       $0E
000942B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942B6 E108                       	smpsAlterNote       $08
000942B8 E701                       	dc.b	smpsNoAttack, $01
000942BA E105                       	smpsAlterNote       $05
000942BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942C0 E10B                       	smpsAlterNote       $0B
000942C2 E701                       	dc.b	smpsNoAttack, $01
000942C4 E10F                       	smpsAlterNote       $0F
000942C6 E701                       	dc.b	smpsNoAttack, $01
000942C8 E10E                       	smpsAlterNote       $0E
000942CA E701                       	dc.b	smpsNoAttack, $01
000942CC E108                       	smpsAlterNote       $08
000942CE E701                       	dc.b	smpsNoAttack, $01
000942D0 E104                       	smpsAlterNote       $04
000942D2 E701                       	dc.b	smpsNoAttack, $01
000942D4 E108                       	smpsAlterNote       $08
000942D6 E701                       	dc.b	smpsNoAttack, $01
000942D8 E10B                       	smpsAlterNote       $0B
000942DA E701                       	dc.b	smpsNoAttack, $01
000942DC E10F                       	smpsAlterNote       $0F
000942DE E701                       	dc.b	smpsNoAttack, $01
000942E0 E10B                       	smpsAlterNote       $0B
000942E2 E701                       	dc.b	smpsNoAttack, $01
000942E4 E105                       	smpsAlterNote       $05
000942E6 E701                       	dc.b	smpsNoAttack, $01
000942E8 E104                       	smpsAlterNote       $04
000942EA E701                       	dc.b	smpsNoAttack, $01
000942EC E108                       	smpsAlterNote       $08
000942EE E701                       	dc.b	smpsNoAttack, $01
000942F0 E10E                       	smpsAlterNote       $0E
000942F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942F6 E10B                       	smpsAlterNote       $0B
000942F8 E701                       	dc.b	smpsNoAttack, $01
000942FA E105                       	smpsAlterNote       $05
000942FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094300 E10B                       	smpsAlterNote       $0B
00094302 E701                       	dc.b	smpsNoAttack, $01
00094304 E10E                       	smpsAlterNote       $0E
00094306 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009430A E108                       	smpsAlterNote       $08
0009430C E701                       	dc.b	smpsNoAttack, $01
0009430E E104                       	smpsAlterNote       $04
00094310 E701                       	dc.b	smpsNoAttack, $01
00094312 E105                       	smpsAlterNote       $05
00094314 E701                       	dc.b	smpsNoAttack, $01
00094316 E10B                       	smpsAlterNote       $0B
00094318 E701                       	dc.b	smpsNoAttack, $01
0009431A E10F                       	smpsAlterNote       $0F
0009431C E701                       	dc.b	smpsNoAttack, $01
0009431E E10B                       	smpsAlterNote       $0B
00094320 E701                       	dc.b	smpsNoAttack, $01
00094322 E108                       	smpsAlterNote       $08
00094324 E701                       	dc.b	smpsNoAttack, $01
00094326 E104                       	smpsAlterNote       $04
00094328 E701                       	dc.b	smpsNoAttack, $01
0009432A E108                       	smpsAlterNote       $08
0009432C E701                       	dc.b	smpsNoAttack, $01
0009432E E10E                       	smpsAlterNote       $0E
00094330 E701                       	dc.b	smpsNoAttack, $01
00094332 E10F                       	smpsAlterNote       $0F
00094334 E701                       	dc.b	smpsNoAttack, $01
00094336 E10B                       	smpsAlterNote       $0B
00094338 E701                       	dc.b	smpsNoAttack, $01
0009433A E105                       	smpsAlterNote       $05
0009433C E701                       	dc.b	smpsNoAttack, $01
0009433E E10B                       	smpsAlterNote       $0B
00094340 C60E                       	dc.b	nA5, $0E
00094342 E105                       	smpsAlterNote       $05
00094344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094348 E10B                       	smpsAlterNote       $0B
0009434A E701                       	dc.b	smpsNoAttack, $01
0009434C E10E                       	smpsAlterNote       $0E
0009434E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094352 E108                       	smpsAlterNote       $08
00094354 E701                       	dc.b	smpsNoAttack, $01
00094356 E104                       	smpsAlterNote       $04
00094358 E701                       	dc.b	smpsNoAttack, $01
0009435A E105                       	smpsAlterNote       $05
0009435C E701                       	dc.b	smpsNoAttack, $01
0009435E E10B                       	smpsAlterNote       $0B
00094360 E701                       	dc.b	smpsNoAttack, $01
00094362 E10F                       	smpsAlterNote       $0F
00094364 E701                       	dc.b	smpsNoAttack, $01
00094366 E10B                       	smpsAlterNote       $0B
00094368 E701                       	dc.b	smpsNoAttack, $01
0009436A E108                       	smpsAlterNote       $08
0009436C E701                       	dc.b	smpsNoAttack, $01
0009436E E104                       	smpsAlterNote       $04
00094370 E701                       	dc.b	smpsNoAttack, $01
00094372 E108                       	smpsAlterNote       $08
00094374 E701                       	dc.b	smpsNoAttack, $01
00094376 E10E                       	smpsAlterNote       $0E
00094378 E701                       	dc.b	smpsNoAttack, $01
0009437A E10F                       	smpsAlterNote       $0F
0009437C E701                       	dc.b	smpsNoAttack, $01
0009437E E10B                       	smpsAlterNote       $0B
00094380 E701                       	dc.b	smpsNoAttack, $01
00094382 E105                       	smpsAlterNote       $05
00094384 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094388 E108                       	smpsAlterNote       $08
0009438A E701                       	dc.b	smpsNoAttack, $01
0009438C E10E                       	smpsAlterNote       $0E
0009438E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094392 E108                       	smpsAlterNote       $08
00094394 E701                       	dc.b	smpsNoAttack, $01
00094396 E105                       	smpsAlterNote       $05
00094398 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009439C E10B                       	smpsAlterNote       $0B
0009439E E701                       	dc.b	smpsNoAttack, $01
000943A0 E10F                       	smpsAlterNote       $0F
000943A2 E701                       	dc.b	smpsNoAttack, $01
000943A4 E10E                       	smpsAlterNote       $0E
000943A6 E701                       	dc.b	smpsNoAttack, $01
000943A8 E108                       	smpsAlterNote       $08
000943AA E701                       	dc.b	smpsNoAttack, $01
000943AC E104                       	smpsAlterNote       $04
000943AE E701                       	dc.b	smpsNoAttack, $01
000943B0 E108                       	smpsAlterNote       $08
000943B2 E701                       	dc.b	smpsNoAttack, $01
000943B4 E10E                       	smpsAlterNote       $0E
000943B6 E701                       	dc.b	smpsNoAttack, $01
000943B8 E10F                       	smpsAlterNote       $0F
000943BA E701                       	dc.b	smpsNoAttack, $01
000943BC E10B                       	smpsAlterNote       $0B
000943BE E701                       	dc.b	smpsNoAttack, $01
000943C0 E105                       	smpsAlterNote       $05
000943C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943C6 E108                       	smpsAlterNote       $08
000943C8 E701                       	dc.b	smpsNoAttack, $01
000943CA E10E                       	smpsAlterNote       $0E
000943CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943D0 E108                       	smpsAlterNote       $08
000943D2 E701                       	dc.b	smpsNoAttack, $01
000943D4 E105                       	smpsAlterNote       $05
000943D6 E701                       	dc.b	smpsNoAttack, $01
000943DA E10B                       	smpsAlterNote       $0B
000943DC E6FD                       	smpsAlterVol        $FD
000943DE C604 8001                  	dc.b	nA5, $04, nRst, $01
000943E2 E109                       	smpsAlterNote       $09
000943E4 C404                       	dc.b	nG5, $04
000943E6 E10B                       	smpsAlterNote       $0B
000943E8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000943EC E107                       	smpsAlterNote       $07
000943EE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000943F4 E10B                       	smpsAlterNote       $0B
000943F6 C604                       	dc.b	nA5, $04
000943F8 E109                       	smpsAlterNote       $09
000943FA C404 8001                  	dc.b	nG5, $04, nRst, $01
000943FE E10B                       	smpsAlterNote       $0B
00094400 C604                       	dc.b	nA5, $04
00094402 E108                       	smpsAlterNote       $08
00094404 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0009440C E106                       	smpsAlterNote       $06
0009440E C904 8001                  	dc.b	nC6, $04, nRst, $01
00094412 E10C                       	smpsAlterNote       $0C
00094414 C704                       	dc.b	nBb5, $04
00094416 E10B                       	smpsAlterNote       $0B
00094418 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009441C E109                       	smpsAlterNote       $09
0009441E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094428 E10B                       	smpsAlterNote       $0B
0009442A C60D                       	dc.b	nA5, $0D
0009442C E108                       	smpsAlterNote       $08
0009442E E701                       	dc.b	smpsNoAttack, $01
00094430 E104                       	smpsAlterNote       $04
00094432 E701                       	dc.b	smpsNoAttack, $01
00094434 E108                       	smpsAlterNote       $08
00094436 E701                       	dc.b	smpsNoAttack, $01
00094438 E10E                       	smpsAlterNote       $0E
0009443A E701                       	dc.b	smpsNoAttack, $01
0009443C E10F                       	smpsAlterNote       $0F
0009443E E701                       	dc.b	smpsNoAttack, $01
00094440 E10B                       	smpsAlterNote       $0B
00094442 E701                       	dc.b	smpsNoAttack, $01
00094444 E105                       	smpsAlterNote       $05
00094446 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009444A E108                       	smpsAlterNote       $08
0009444C E701                       	dc.b	smpsNoAttack, $01
0009444E E10E                       	smpsAlterNote       $0E
00094450 E701                       	dc.b	smpsNoAttack, $01
00094452 E10F                       	smpsAlterNote       $0F
00094454 8001                       	dc.b	nRst, $01
00094456 E109                       	smpsAlterNote       $09
00094458 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009445E E108                       	smpsAlterNote       $08
00094460 C10D                       	dc.b	nE5, $0D
00094462 E102                       	smpsAlterNote       $02
00094464 E701                       	dc.b	smpsNoAttack, $01
00094466 E101                       	smpsAlterNote       $01
00094468 E701                       	dc.b	smpsNoAttack, $01
0009446A E105                       	smpsAlterNote       $05
0009446C E701                       	dc.b	smpsNoAttack, $01
0009446E E10B                       	smpsAlterNote       $0B
00094470 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094474 E108                       	smpsAlterNote       $08
00094476 E701                       	dc.b	smpsNoAttack, $01
00094478 E102                       	smpsAlterNote       $02
0009447A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009447E E108                       	smpsAlterNote       $08
00094480 E701                       	dc.b	smpsNoAttack, $01
00094482 E10B                       	smpsAlterNote       $0B
00094484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094488 E105                       	smpsAlterNote       $05
0009448A E701                       	dc.b	smpsNoAttack, $01
0009448C E101                       	smpsAlterNote       $01
0009448E E701                       	dc.b	smpsNoAttack, $01
00094490 E102                       	smpsAlterNote       $02
00094492 E701                       	dc.b	smpsNoAttack, $01
00094494 E108                       	smpsAlterNote       $08
00094496 E701                       	dc.b	smpsNoAttack, $01
00094498 E10C                       	smpsAlterNote       $0C
0009449A E701                       	dc.b	smpsNoAttack, $01
0009449C E108                       	smpsAlterNote       $08
0009449E E701                       	dc.b	smpsNoAttack, $01
000944A0 E105                       	smpsAlterNote       $05
000944A2 E701                       	dc.b	smpsNoAttack, $01
000944A4 E101                       	smpsAlterNote       $01
000944A6 E701                       	dc.b	smpsNoAttack, $01
000944A8 E105                       	smpsAlterNote       $05
000944AA E701                       	dc.b	smpsNoAttack, $01
000944AC E10B                       	smpsAlterNote       $0B
000944AE E701                       	dc.b	smpsNoAttack, $01
000944B0 E10C                       	smpsAlterNote       $0C
000944B2 E701                       	dc.b	smpsNoAttack, $01
000944B4 E108                       	smpsAlterNote       $08
000944B6 E701                       	dc.b	smpsNoAttack, $01
000944B8 E102                       	smpsAlterNote       $02
000944BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944BE E105                       	smpsAlterNote       $05
000944C0 E701                       	dc.b	smpsNoAttack, $01
000944C2 E10B                       	smpsAlterNote       $0B
000944C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944C8 E105                       	smpsAlterNote       $05
000944CA E701                       	dc.b	smpsNoAttack, $01
000944CC E102                       	smpsAlterNote       $02
000944CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944D2 E108                       	smpsAlterNote       $08
000944D4 E701                       	dc.b	smpsNoAttack, $01
000944D6 E10C                       	smpsAlterNote       $0C
000944D8 E701                       	dc.b	smpsNoAttack, $01
000944DA E10B                       	smpsAlterNote       $0B
000944DC E701                       	dc.b	smpsNoAttack, $01
000944DE E105                       	smpsAlterNote       $05
000944E0 E701                       	dc.b	smpsNoAttack, $01
000944E2 E101                       	smpsAlterNote       $01
000944E4 E701                       	dc.b	smpsNoAttack, $01
000944E6 E105                       	smpsAlterNote       $05
000944E8 E701                       	dc.b	smpsNoAttack, $01
000944EA E108                       	smpsAlterNote       $08
000944EC E701                       	dc.b	smpsNoAttack, $01
000944EE E10C                       	smpsAlterNote       $0C
000944F0 E701                       	dc.b	smpsNoAttack, $01
000944F2 E108                       	smpsAlterNote       $08
000944F4 E701                       	dc.b	smpsNoAttack, $01
000944F6 E102                       	smpsAlterNote       $02
000944F8 E701                       	dc.b	smpsNoAttack, $01
000944FA E101                       	smpsAlterNote       $01
000944FC E701                       	dc.b	smpsNoAttack, $01
000944FE E105                       	smpsAlterNote       $05
00094500 E701                       	dc.b	smpsNoAttack, $01
00094502 E10B                       	smpsAlterNote       $0B
00094504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094508 E108                       	smpsAlterNote       $08
0009450A E701                       	dc.b	smpsNoAttack, $01
0009450C E102                       	smpsAlterNote       $02
0009450E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094512 E108                       	smpsAlterNote       $08
00094514 E701                       	dc.b	smpsNoAttack, $01
00094516 E10B                       	smpsAlterNote       $0B
00094518 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009451C E105                       	smpsAlterNote       $05
0009451E E701                       	dc.b	smpsNoAttack, $01
00094520 E101                       	smpsAlterNote       $01
00094522 E701                       	dc.b	smpsNoAttack, $01
00094524 E102                       	smpsAlterNote       $02
00094526 E701                       	dc.b	smpsNoAttack, $01
00094528 E108                       	smpsAlterNote       $08
0009452A E701                       	dc.b	smpsNoAttack, $01
0009452C E10C                       	smpsAlterNote       $0C
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E108                       	smpsAlterNote       $08
00094532 E701                       	dc.b	smpsNoAttack, $01
00094534 E105                       	smpsAlterNote       $05
00094536 E701                       	dc.b	smpsNoAttack, $01
00094538 E101                       	smpsAlterNote       $01
0009453A E701                       	dc.b	smpsNoAttack, $01
0009453C E105                       	smpsAlterNote       $05
0009453E E701                       	dc.b	smpsNoAttack, $01
00094540 E10B                       	smpsAlterNote       $0B
00094542 E701                       	dc.b	smpsNoAttack, $01
00094544 E10C                       	smpsAlterNote       $0C
00094546 E701                       	dc.b	smpsNoAttack, $01
00094548 E108                       	smpsAlterNote       $08
0009454A E701                       	dc.b	smpsNoAttack, $01
0009454C E102                       	smpsAlterNote       $02
0009454E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094552 E105                       	smpsAlterNote       $05
00094554 E701                       	dc.b	smpsNoAttack, $01
00094556 E10B                       	smpsAlterNote       $0B
00094558 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009455C E105                       	smpsAlterNote       $05
0009455E E701                       	dc.b	smpsNoAttack, $01
00094560 E101                       	smpsAlterNote       $01
00094562 E701                       	dc.b	smpsNoAttack, $01
00094564 E102                       	smpsAlterNote       $02
00094566 E701                       	dc.b	smpsNoAttack, $01
00094568 E108                       	smpsAlterNote       $08
0009456A E701                       	dc.b	smpsNoAttack, $01
0009456C E10C                       	smpsAlterNote       $0C
0009456E E701                       	dc.b	smpsNoAttack, $01
00094570 E108                       	smpsAlterNote       $08
00094572 E701                       	dc.b	smpsNoAttack, $01
00094574 E105                       	smpsAlterNote       $05
00094576 E701                       	dc.b	smpsNoAttack, $01
00094578 E101                       	smpsAlterNote       $01
0009457A E701                       	dc.b	smpsNoAttack, $01
0009457C E105                       	smpsAlterNote       $05
0009457E E701                       	dc.b	smpsNoAttack, $01
00094580 E10B                       	smpsAlterNote       $0B
00094582 E701                       	dc.b	smpsNoAttack, $01
00094584 E10C                       	smpsAlterNote       $0C
00094586 E701                       	dc.b	smpsNoAttack, $01
00094588 E108                       	smpsAlterNote       $08
0009458A E701                       	dc.b	smpsNoAttack, $01
0009458C E102                       	smpsAlterNote       $02
0009458E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094592 E105                       	smpsAlterNote       $05
00094594 E701                       	dc.b	smpsNoAttack, $01
00094596 E10B                       	smpsAlterNote       $0B
00094598 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009459C E105                       	smpsAlterNote       $05
0009459E E701                       	dc.b	smpsNoAttack, $01
000945A0 E102                       	smpsAlterNote       $02
000945A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945A6 E108                       	smpsAlterNote       $08
000945A8 E701                       	dc.b	smpsNoAttack, $01
000945AA E10C                       	smpsAlterNote       $0C
000945AC E701                       	dc.b	smpsNoAttack, $01
000945AE E10B                       	smpsAlterNote       $0B
000945B0 E701                       	dc.b	smpsNoAttack, $01
000945B2 E105                       	smpsAlterNote       $05
000945B4 E701                       	dc.b	smpsNoAttack, $01
000945B6 E101                       	smpsAlterNote       $01
000945B8 E701                       	dc.b	smpsNoAttack, $01
000945BA E105                       	smpsAlterNote       $05
000945BC E701                       	dc.b	smpsNoAttack, $01
000945BE E108                       	smpsAlterNote       $08
000945C0 E701                       	dc.b	smpsNoAttack, $01
000945C2 E10C                       	smpsAlterNote       $0C
000945C4 E701                       	dc.b	smpsNoAttack, $01
000945C8 E10B                       	smpsAlterNote       $0B
000945CA C604 8001                  	dc.b	nA5, $04, nRst, $01
000945CE E109                       	smpsAlterNote       $09
000945D0 C404                       	dc.b	nG5, $04
000945D2 E10B                       	smpsAlterNote       $0B
000945D4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000945D8 E107                       	smpsAlterNote       $07
000945DA BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000945E0 E10B                       	smpsAlterNote       $0B
000945E2 C604                       	dc.b	nA5, $04
000945E4 E109                       	smpsAlterNote       $09
000945E6 C404 8001                  	dc.b	nG5, $04, nRst, $01
000945EA E10B                       	smpsAlterNote       $0B
000945EC C604                       	dc.b	nA5, $04
000945EE E108                       	smpsAlterNote       $08
000945F0 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000945F6 E106                       	smpsAlterNote       $06
000945F8 C904 8001                  	dc.b	nC6, $04, nRst, $01
000945FC E10C                       	smpsAlterNote       $0C
000945FE C704                       	dc.b	nBb5, $04
00094600 E10B                       	smpsAlterNote       $0B
00094602 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094606 E109                       	smpsAlterNote       $09
00094608 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094612 E10B                       	smpsAlterNote       $0B
00094614 C60D                       	dc.b	nA5, $0D
00094616 E108                       	smpsAlterNote       $08
00094618 E701                       	dc.b	smpsNoAttack, $01
0009461A E104                       	smpsAlterNote       $04
0009461C E701                       	dc.b	smpsNoAttack, $01
0009461E E108                       	smpsAlterNote       $08
00094620 E701                       	dc.b	smpsNoAttack, $01
00094622 E10B                       	smpsAlterNote       $0B
00094624 E701                       	dc.b	smpsNoAttack, $01
00094626 E10F                       	smpsAlterNote       $0F
00094628 E701                       	dc.b	smpsNoAttack, $01
0009462A E10B                       	smpsAlterNote       $0B
0009462C E701                       	dc.b	smpsNoAttack, $01
0009462E E105                       	smpsAlterNote       $05
00094630 E701                       	dc.b	smpsNoAttack, $01
00094632 E104                       	smpsAlterNote       $04
00094634 E701                       	dc.b	smpsNoAttack, $01
00094636 E108                       	smpsAlterNote       $08
00094638 E701                       	dc.b	smpsNoAttack, $01
0009463A E10E                       	smpsAlterNote       $0E
0009463C E701                       	dc.b	smpsNoAttack, $01
0009463E E10F                       	smpsAlterNote       $0F
00094640 8001                       	dc.b	nRst, $01
00094642 E109                       	smpsAlterNote       $09
00094644 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009464A E108                       	smpsAlterNote       $08
0009464C C10D                       	dc.b	nE5, $0D
0009464E E105                       	smpsAlterNote       $05
00094650 E701                       	dc.b	smpsNoAttack, $01
00094652 E101                       	smpsAlterNote       $01
00094654 E701                       	dc.b	smpsNoAttack, $01
00094656 E105                       	smpsAlterNote       $05
00094658 E701                       	dc.b	smpsNoAttack, $01
0009465A E10B                       	smpsAlterNote       $0B
0009465C E701                       	dc.b	smpsNoAttack, $01
0009465E E10C                       	smpsAlterNote       $0C
00094660 E701                       	dc.b	smpsNoAttack, $01
00094662 E108                       	smpsAlterNote       $08
00094664 E701                       	dc.b	smpsNoAttack, $01
00094666 E102                       	smpsAlterNote       $02
00094668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009466C E105                       	smpsAlterNote       $05
0009466E E701                       	dc.b	smpsNoAttack, $01
00094670 E10B                       	smpsAlterNote       $0B
00094672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094676 E105                       	smpsAlterNote       $05
00094678 E701                       	dc.b	smpsNoAttack, $01
0009467A E102                       	smpsAlterNote       $02
0009467C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094680 E108                       	smpsAlterNote       $08
00094682 E701                       	dc.b	smpsNoAttack, $01
00094684 E10C                       	smpsAlterNote       $0C
00094686 E701                       	dc.b	smpsNoAttack, $01
00094688 E10B                       	smpsAlterNote       $0B
0009468A E701                       	dc.b	smpsNoAttack, $01
0009468C E105                       	smpsAlterNote       $05
0009468E E701                       	dc.b	smpsNoAttack, $01
00094690 E101                       	smpsAlterNote       $01
00094692 E701                       	dc.b	smpsNoAttack, $01
00094694 E105                       	smpsAlterNote       $05
00094696 E701                       	dc.b	smpsNoAttack, $01
00094698 E108                       	smpsAlterNote       $08
0009469A E701                       	dc.b	smpsNoAttack, $01
0009469C E10C                       	smpsAlterNote       $0C
0009469E E701                       	dc.b	smpsNoAttack, $01
000946A0 E108                       	smpsAlterNote       $08
000946A2 E701                       	dc.b	smpsNoAttack, $01
000946A4 E102                       	smpsAlterNote       $02
000946A6 E701                       	dc.b	smpsNoAttack, $01
000946A8 E101                       	smpsAlterNote       $01
000946AA E701                       	dc.b	smpsNoAttack, $01
000946AC E105                       	smpsAlterNote       $05
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E10B                       	smpsAlterNote       $0B
000946B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946B6 E108                       	smpsAlterNote       $08
000946B8 E701                       	dc.b	smpsNoAttack, $01
000946BA E102                       	smpsAlterNote       $02
000946BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946C0 E108                       	smpsAlterNote       $08
000946C2 E701                       	dc.b	smpsNoAttack, $01
000946C4 E10B                       	smpsAlterNote       $0B
000946C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946CA E105                       	smpsAlterNote       $05
000946CC E701                       	dc.b	smpsNoAttack, $01
000946CE E101                       	smpsAlterNote       $01
000946D0 E701                       	dc.b	smpsNoAttack, $01
000946D2 E102                       	smpsAlterNote       $02
000946D4 E701                       	dc.b	smpsNoAttack, $01
000946D6 E108                       	smpsAlterNote       $08
000946D8 E701                       	dc.b	smpsNoAttack, $01
000946DA E10C                       	smpsAlterNote       $0C
000946DC E701                       	dc.b	smpsNoAttack, $01
000946DE E108                       	smpsAlterNote       $08
000946E0 E701                       	dc.b	smpsNoAttack, $01
000946E2 E105                       	smpsAlterNote       $05
000946E4 E701                       	dc.b	smpsNoAttack, $01
000946E6 E101                       	smpsAlterNote       $01
000946E8 E701                       	dc.b	smpsNoAttack, $01
000946EA E105                       	smpsAlterNote       $05
000946EC E701                       	dc.b	smpsNoAttack, $01
000946EE E10B                       	smpsAlterNote       $0B
000946F0 E701                       	dc.b	smpsNoAttack, $01
000946F2 E10C                       	smpsAlterNote       $0C
000946F4 E701                       	dc.b	smpsNoAttack, $01
000946F6 E108                       	smpsAlterNote       $08
000946F8 E701                       	dc.b	smpsNoAttack, $01
000946FA E102                       	smpsAlterNote       $02
000946FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094700 E108                       	smpsAlterNote       $08
00094702 E701                       	dc.b	smpsNoAttack, $01
00094704 E10B                       	smpsAlterNote       $0B
00094706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009470A E105                       	smpsAlterNote       $05
0009470C E701                       	dc.b	smpsNoAttack, $01
0009470E E101                       	smpsAlterNote       $01
00094710 E701                       	dc.b	smpsNoAttack, $01
00094712 E102                       	smpsAlterNote       $02
00094714 E701                       	dc.b	smpsNoAttack, $01
00094716 E108                       	smpsAlterNote       $08
00094718 E701                       	dc.b	smpsNoAttack, $01
0009471A E10C                       	smpsAlterNote       $0C
0009471C E701                       	dc.b	smpsNoAttack, $01
0009471E E108                       	smpsAlterNote       $08
00094720 E701                       	dc.b	smpsNoAttack, $01
00094722 E105                       	smpsAlterNote       $05
00094724 E701                       	dc.b	smpsNoAttack, $01
00094726 E101                       	smpsAlterNote       $01
00094728 E701                       	dc.b	smpsNoAttack, $01
0009472A E105                       	smpsAlterNote       $05
0009472C E701                       	dc.b	smpsNoAttack, $01
0009472E E10B                       	smpsAlterNote       $0B
00094730 E701                       	dc.b	smpsNoAttack, $01
00094732 E10C                       	smpsAlterNote       $0C
00094734 E701                       	dc.b	smpsNoAttack, $01
00094736 E108                       	smpsAlterNote       $08
00094738 E701                       	dc.b	smpsNoAttack, $01
0009473A E102                       	smpsAlterNote       $02
0009473C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094740 E105                       	smpsAlterNote       $05
00094742 E701                       	dc.b	smpsNoAttack, $01
00094744 E10B                       	smpsAlterNote       $0B
00094746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009474A E105                       	smpsAlterNote       $05
0009474C E701                       	dc.b	smpsNoAttack, $01
0009474E E102                       	smpsAlterNote       $02
00094750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094754 E108                       	smpsAlterNote       $08
00094756 E701                       	dc.b	smpsNoAttack, $01
00094758 E10C                       	smpsAlterNote       $0C
0009475A E701                       	dc.b	smpsNoAttack, $01
0009475C E10B                       	smpsAlterNote       $0B
0009475E E701                       	dc.b	smpsNoAttack, $01
00094760 E105                       	smpsAlterNote       $05
00094762 E701                       	dc.b	smpsNoAttack, $01
00094764 E101                       	smpsAlterNote       $01
00094766 E701                       	dc.b	smpsNoAttack, $01
00094768 E105                       	smpsAlterNote       $05
0009476A E701                       	dc.b	smpsNoAttack, $01
0009476C E108                       	smpsAlterNote       $08
0009476E E701                       	dc.b	smpsNoAttack, $01
00094770 E10C                       	smpsAlterNote       $0C
00094772 E701                       	dc.b	smpsNoAttack, $01
00094774 E108                       	smpsAlterNote       $08
00094776 E701                       	dc.b	smpsNoAttack, $01
00094778 E102                       	smpsAlterNote       $02
0009477A E701                       	dc.b	smpsNoAttack, $01
0009477C E101                       	smpsAlterNote       $01
0009477E E701                       	dc.b	smpsNoAttack, $01
00094780 E105                       	smpsAlterNote       $05
00094782 E701                       	dc.b	smpsNoAttack, $01
00094784 E10B                       	smpsAlterNote       $0B
00094786 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009478A E108                       	smpsAlterNote       $08
0009478C E701                       	dc.b	smpsNoAttack, $01
0009478E E102                       	smpsAlterNote       $02
00094790 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094794 E108                       	smpsAlterNote       $08
00094796 E701                       	dc.b	smpsNoAttack, $01
00094798 E10B                       	smpsAlterNote       $0B
0009479A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009479E E105                       	smpsAlterNote       $05
000947A0 E701                       	dc.b	smpsNoAttack, $01
000947A2 E102                       	smpsAlterNote       $02
000947A4 8001                       	dc.b	nRst, $01
000947A6 E107                       	smpsAlterNote       $07
000947A8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000947AC E108                       	smpsAlterNote       $08
000947AE C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000947B2 E102                       	smpsAlterNote       $02
000947B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947B8 E108                       	smpsAlterNote       $08
000947BA E701                       	dc.b	smpsNoAttack, $01
000947BC E10B                       	smpsAlterNote       $0B
000947BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947C2 E105                       	smpsAlterNote       $05
000947C4 E701                       	dc.b	smpsNoAttack, $01
000947C6 E101                       	smpsAlterNote       $01
000947C8 E701                       	dc.b	smpsNoAttack, $01
000947CA E102                       	smpsAlterNote       $02
000947CC E701                       	dc.b	smpsNoAttack, $01
000947CE E108                       	smpsAlterNote       $08
000947D0 E701                       	dc.b	smpsNoAttack, $01
000947D2 E10C                       	smpsAlterNote       $0C
000947D4 E701                       	dc.b	smpsNoAttack, $01
000947D6 E108                       	smpsAlterNote       $08
000947D8 E701                       	dc.b	smpsNoAttack, $01
000947DA E105                       	smpsAlterNote       $05
000947DC E701                       	dc.b	smpsNoAttack, $01
000947DE E101                       	smpsAlterNote       $01
000947E0 E701                       	dc.b	smpsNoAttack, $01
000947E2 E105                       	smpsAlterNote       $05
000947E4 E701                       	dc.b	smpsNoAttack, $01
000947E6 E10B                       	smpsAlterNote       $0B
000947E8 E701                       	dc.b	smpsNoAttack, $01
000947EA E10C                       	smpsAlterNote       $0C
000947EC E701                       	dc.b	smpsNoAttack, $01
000947EE E108                       	smpsAlterNote       $08
000947F0 E701                       	dc.b	smpsNoAttack, $01
000947F2 E102                       	smpsAlterNote       $02
000947F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947F8 E105                       	smpsAlterNote       $05
000947FA E701                       	dc.b	smpsNoAttack, $01
000947FC E10B                       	smpsAlterNote       $0B
000947FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094802 E105                       	smpsAlterNote       $05
00094804 E701                       	dc.b	smpsNoAttack, $01
00094806 E102                       	smpsAlterNote       $02
00094808 E701                       	dc.b	smpsNoAttack, $01
0009480A E109                       	smpsAlterNote       $09
0009480C C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094810 E108                       	smpsAlterNote       $08
00094812 C10D                       	dc.b	nE5, $0D
00094814 E105                       	smpsAlterNote       $05
00094816 E701                       	dc.b	smpsNoAttack, $01
00094818 E101                       	smpsAlterNote       $01
0009481A E701                       	dc.b	smpsNoAttack, $01
0009481C E102                       	smpsAlterNote       $02
0009481E E701                       	dc.b	smpsNoAttack, $01
00094820 E108                       	smpsAlterNote       $08
00094822 E701                       	dc.b	smpsNoAttack, $01
00094824 E10C                       	smpsAlterNote       $0C
00094826 E701                       	dc.b	smpsNoAttack, $01
00094828 E108                       	smpsAlterNote       $08
0009482A E701                       	dc.b	smpsNoAttack, $01
0009482C E105                       	smpsAlterNote       $05
0009482E E701                       	dc.b	smpsNoAttack, $01
00094830 E101                       	smpsAlterNote       $01
00094832 E701                       	dc.b	smpsNoAttack, $01
00094834 E105                       	smpsAlterNote       $05
00094836 E701                       	dc.b	smpsNoAttack, $01
00094838 E10B                       	smpsAlterNote       $0B
0009483A E701                       	dc.b	smpsNoAttack, $01
0009483C E10C                       	smpsAlterNote       $0C
0009483E E701                       	dc.b	smpsNoAttack, $01
00094840 E108                       	smpsAlterNote       $08
00094842 E701                       	dc.b	smpsNoAttack, $01
00094844 E102                       	smpsAlterNote       $02
00094846 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0009484E E10B                       	smpsAlterNote       $0B
00094850 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094854 E10C                       	smpsAlterNote       $0C
00094856 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009485A E10B                       	smpsAlterNote       $0B
0009485C BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00094862 E107                       	smpsAlterNote       $07
00094864 BF03                       	dc.b	nD5, $03
00094866 E108                       	smpsAlterNote       $08
00094868 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009486C E109                       	smpsAlterNote       $09
0009486E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094874 E10B                       	smpsAlterNote       $0B
00094876 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009487A E107                       	smpsAlterNote       $07
0009487C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094880 E106                       	smpsAlterNote       $06
00094882 C90D                       	dc.b	nC6, $0D
00094884 E103                       	smpsAlterNote       $03
00094886 E701                       	dc.b	smpsNoAttack, $01
00094888 E1FF                       	smpsAlterNote       $FF
0009488A E701                       	dc.b	smpsNoAttack, $01
0009488C E103                       	smpsAlterNote       $03
0009488E E701                       	dc.b	smpsNoAttack, $01
00094890 E109                       	smpsAlterNote       $09
00094892 E701                       	dc.b	smpsNoAttack, $01
00094894 E10A                       	smpsAlterNote       $0A
00094896 E701                       	dc.b	smpsNoAttack, $01
00094898 E106                       	smpsAlterNote       $06
0009489A E701                       	dc.b	smpsNoAttack, $01
0009489C E100                       	smpsAlterNote       $00
0009489E E701                       	dc.b	smpsNoAttack, $01
000948A0 E10C                       	smpsAlterNote       $0C
000948A2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000948A6 E10B                       	smpsAlterNote       $0B
000948A8 C603                       	dc.b	nA5, $03
000948AA E109                       	smpsAlterNote       $09
000948AC C403 8001                  	dc.b	nG5, $03, nRst, $01
000948B0 E10B                       	smpsAlterNote       $0B
000948B2 C60D                       	dc.b	nA5, $0D
000948B4 E105                       	smpsAlterNote       $05
000948B6 E701                       	dc.b	smpsNoAttack, $01
000948B8 E104                       	smpsAlterNote       $04
000948BA E701                       	dc.b	smpsNoAttack, $01
000948BC E108                       	smpsAlterNote       $08
000948BE E701                       	dc.b	smpsNoAttack, $01
000948C0 E10E                       	smpsAlterNote       $0E
000948C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948C6 E10B                       	smpsAlterNote       $0B
000948C8 E701                       	dc.b	smpsNoAttack, $01
000948CA E105                       	smpsAlterNote       $05
000948CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948D0 E10B                       	smpsAlterNote       $0B
000948D2 E701                       	dc.b	smpsNoAttack, $01
000948D4 E10E                       	smpsAlterNote       $0E
000948D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948DA E108                       	smpsAlterNote       $08
000948DC E701                       	dc.b	smpsNoAttack, $01
000948DE E104                       	smpsAlterNote       $04
000948E0 E701                       	dc.b	smpsNoAttack, $01
000948E2 E105                       	smpsAlterNote       $05
000948E4 E701                       	dc.b	smpsNoAttack, $01
000948E6 E10B                       	smpsAlterNote       $0B
000948E8 E701                       	dc.b	smpsNoAttack, $01
000948EA E10F                       	smpsAlterNote       $0F
000948EC E701                       	dc.b	smpsNoAttack, $01
000948EE E10B                       	smpsAlterNote       $0B
000948F0 E701                       	dc.b	smpsNoAttack, $01
000948F2 E108                       	smpsAlterNote       $08
000948F4 E701                       	dc.b	smpsNoAttack, $01
000948F6 E104                       	smpsAlterNote       $04
000948F8 E701                       	dc.b	smpsNoAttack, $01
000948FA E108                       	smpsAlterNote       $08
000948FC E701                       	dc.b	smpsNoAttack, $01
000948FE E10E                       	smpsAlterNote       $0E
00094900 E701                       	dc.b	smpsNoAttack, $01
00094902 E10F                       	smpsAlterNote       $0F
00094904 E701                       	dc.b	smpsNoAttack, $01
00094906 E10B                       	smpsAlterNote       $0B
00094908 E701                       	dc.b	smpsNoAttack, $01
0009490A E105                       	smpsAlterNote       $05
0009490C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094910 E108                       	smpsAlterNote       $08
00094912 E701                       	dc.b	smpsNoAttack, $01
00094914 E10E                       	smpsAlterNote       $0E
00094916 E701                       	dc.b	smpsNoAttack, $01
00094918 E10F                       	smpsAlterNote       $0F
0009491A 800F                       	dc.b	nRst, $0F
0009491C E107                       	smpsAlterNote       $07
0009491E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094922 E108                       	smpsAlterNote       $08
00094924 C103                       	dc.b	nE5, $03
00094926 E109                       	smpsAlterNote       $09
00094928 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0009492E E10B                       	smpsAlterNote       $0B
00094930 C607                       	dc.b	nA5, $07
00094932 E107                       	smpsAlterNote       $07
00094934 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094938 E106                       	smpsAlterNote       $06
0009493A C90D                       	dc.b	nC6, $0D
0009493C E107                       	smpsAlterNote       $07
0009493E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094942 E10C                       	smpsAlterNote       $0C
00094944 C704                       	dc.b	nBb5, $04
00094946 E10B                       	smpsAlterNote       $0B
00094948 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009494C E109                       	smpsAlterNote       $09
0009494E C404                       	dc.b	nG5, $04
00094950 E10B                       	smpsAlterNote       $0B
00094952 C60D                       	dc.b	nA5, $0D
00094954 E108                       	smpsAlterNote       $08
00094956 E701                       	dc.b	smpsNoAttack, $01
00094958 E105                       	smpsAlterNote       $05
0009495A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009495E E10B                       	smpsAlterNote       $0B
00094960 E701                       	dc.b	smpsNoAttack, $01
00094962 E10F                       	smpsAlterNote       $0F
00094964 E701                       	dc.b	smpsNoAttack, $01
00094966 E10E                       	smpsAlterNote       $0E
00094968 E701                       	dc.b	smpsNoAttack, $01
0009496A E108                       	smpsAlterNote       $08
0009496C E701                       	dc.b	smpsNoAttack, $01
0009496E E104                       	smpsAlterNote       $04
00094970 E701                       	dc.b	smpsNoAttack, $01
00094972 E108                       	smpsAlterNote       $08
00094974 E701                       	dc.b	smpsNoAttack, $01
00094976 E10B                       	smpsAlterNote       $0B
00094978 E701                       	dc.b	smpsNoAttack, $01
0009497A E10F                       	smpsAlterNote       $0F
0009497C E701                       	dc.b	smpsNoAttack, $01
0009497E E10B                       	smpsAlterNote       $0B
00094980 E701                       	dc.b	smpsNoAttack, $01
00094982 E105                       	smpsAlterNote       $05
00094984 E701                       	dc.b	smpsNoAttack, $01
00094986 E104                       	smpsAlterNote       $04
00094988 E701                       	dc.b	smpsNoAttack, $01
0009498A E108                       	smpsAlterNote       $08
0009498C E701                       	dc.b	smpsNoAttack, $01
0009498E E10E                       	smpsAlterNote       $0E
00094990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094994 E10B                       	smpsAlterNote       $0B
00094996 E701                       	dc.b	smpsNoAttack, $01
00094998 E105                       	smpsAlterNote       $05
0009499A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009499E E10B                       	smpsAlterNote       $0B
000949A0 E701                       	dc.b	smpsNoAttack, $01
000949A2 E10E                       	smpsAlterNote       $0E
000949A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949A8 E108                       	smpsAlterNote       $08
000949AA E701                       	dc.b	smpsNoAttack, $01
000949AC E105                       	smpsAlterNote       $05
000949AE 8001                       	dc.b	nRst, $01
000949B0 E109                       	smpsAlterNote       $09
000949B2 C401 8001                  	dc.b	nG5, $01, nRst, $01
000949B6 E10B                       	smpsAlterNote       $0B
000949B8 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000949C0 E109                       	smpsAlterNote       $09
000949C2 C404                       	dc.b	nG5, $04
000949C4 E10B                       	smpsAlterNote       $0B
000949C6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000949CA E107                       	smpsAlterNote       $07
000949CC BF0D                       	dc.b	nD5, $0D
000949CE E101                       	smpsAlterNote       $01
000949D0 E701                       	dc.b	smpsNoAttack, $01
000949D2 E100                       	smpsAlterNote       $00
000949D4 E701                       	dc.b	smpsNoAttack, $01
000949D6 E104                       	smpsAlterNote       $04
000949D8 E701                       	dc.b	smpsNoAttack, $01
000949DA E10A                       	smpsAlterNote       $0A
000949DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949E0 E107                       	smpsAlterNote       $07
000949E2 E701                       	dc.b	smpsNoAttack, $01
000949E4 E101                       	smpsAlterNote       $01
000949E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949EA E107                       	smpsAlterNote       $07
000949EC E701                       	dc.b	smpsNoAttack, $01
000949EE E10A                       	smpsAlterNote       $0A
000949F0 E701                       	dc.b	smpsNoAttack, $01
000949F2 E10B                       	smpsAlterNote       $0B
000949F4 8001                       	dc.b	nRst, $01
000949F6 E108                       	smpsAlterNote       $08
000949F8 8001                       	dc.b	nRst, $01
000949FA E109                       	smpsAlterNote       $09
000949FC 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094A00 E10B                       	smpsAlterNote       $0B
00094A02 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094A0A E108                       	smpsAlterNote       $08
00094A0C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094A10 E109                       	smpsAlterNote       $09
00094A12 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094A16 E108                       	smpsAlterNote       $08
00094A18 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094A1C E106                       	smpsAlterNote       $06
00094A1E C903                       	dc.b	nC6, $03
00094A20 E109                       	smpsAlterNote       $09
00094A22 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094A26 E10C                       	smpsAlterNote       $0C
00094A28 C70D                       	dc.b	nBb5, $0D
00094A2A E109                       	smpsAlterNote       $09
00094A2C E701                       	dc.b	smpsNoAttack, $01
00094A2E E105                       	smpsAlterNote       $05
00094A30 E701                       	dc.b	smpsNoAttack, $01
00094A32 E109                       	smpsAlterNote       $09
00094A34 E701                       	dc.b	smpsNoAttack, $01
00094A36 E10F                       	smpsAlterNote       $0F
00094A38 E701                       	dc.b	smpsNoAttack, $01
00094A3A E110                       	smpsAlterNote       $10
00094A3C E701                       	dc.b	smpsNoAttack, $01
00094A3E E10C                       	smpsAlterNote       $0C
00094A40 E701                       	dc.b	smpsNoAttack, $01
00094A42 E106                       	smpsAlterNote       $06
00094A44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A48 E109                       	smpsAlterNote       $09
00094A4A E701                       	dc.b	smpsNoAttack, $01
00094A4C E10F                       	smpsAlterNote       $0F
00094A4E E701                       	dc.b	smpsNoAttack, $01
00094A50 E110                       	smpsAlterNote       $10
00094A52 8001                       	dc.b	nRst, $01
00094A54 E10B                       	smpsAlterNote       $0B
00094A56 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094A5A E109                       	smpsAlterNote       $09
00094A5C C40D                       	dc.b	nG5, $0D
00094A5E E103                       	smpsAlterNote       $03
00094A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A64 E106                       	smpsAlterNote       $06
00094A66 E701                       	dc.b	smpsNoAttack, $01
00094A68 E10C                       	smpsAlterNote       $0C
00094A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A6E E106                       	smpsAlterNote       $06
00094A70 E701                       	dc.b	smpsNoAttack, $01
00094A72 E103                       	smpsAlterNote       $03
00094A74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A78 E109                       	smpsAlterNote       $09
00094A7A E701                       	dc.b	smpsNoAttack, $01
00094A7C E10D                       	smpsAlterNote       $0D
00094A7E E701                       	dc.b	smpsNoAttack, $01
00094A80 E10C                       	smpsAlterNote       $0C
00094A82 E701                       	dc.b	smpsNoAttack, $01
00094A84 E106                       	smpsAlterNote       $06
00094A86 E701                       	dc.b	smpsNoAttack, $01
00094A88 E102                       	smpsAlterNote       $02
00094A8A E701                       	dc.b	smpsNoAttack, $01
00094A8C E103                       	smpsAlterNote       $03
00094A8E 8001                       	dc.b	nRst, $01
00094A90 E10B                       	smpsAlterNote       $0B
00094A92 C60D                       	dc.b	nA5, $0D
00094A94 E108                       	smpsAlterNote       $08
00094A96 E701                       	dc.b	smpsNoAttack, $01
00094A98 E104                       	smpsAlterNote       $04
00094A9A E701                       	dc.b	smpsNoAttack, $01
00094A9C E108                       	smpsAlterNote       $08
00094A9E E701                       	dc.b	smpsNoAttack, $01
00094AA0 E10B                       	smpsAlterNote       $0B
00094AA2 E701                       	dc.b	smpsNoAttack, $01
00094AA4 E10F                       	smpsAlterNote       $0F
00094AA6 E701                       	dc.b	smpsNoAttack, $01
00094AA8 E10B                       	smpsAlterNote       $0B
00094AAA E701                       	dc.b	smpsNoAttack, $01
00094AAC E105                       	smpsAlterNote       $05
00094AAE E701                       	dc.b	smpsNoAttack, $01
00094AB0 E104                       	smpsAlterNote       $04
00094AB2 E701                       	dc.b	smpsNoAttack, $01
00094AB4 E108                       	smpsAlterNote       $08
00094AB6 E701                       	dc.b	smpsNoAttack, $01
00094AB8 E10E                       	smpsAlterNote       $0E
00094ABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ABE E10B                       	smpsAlterNote       $0B
00094AC0 E701                       	dc.b	smpsNoAttack, $01
00094AC2 E105                       	smpsAlterNote       $05
00094AC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AC8 E10C                       	smpsAlterNote       $0C
00094ACA C70E                       	dc.b	nBb5, $0E
00094ACC E106                       	smpsAlterNote       $06
00094ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AD2 E10C                       	smpsAlterNote       $0C
00094AD4 E701                       	dc.b	smpsNoAttack, $01
00094AD6 E10F                       	smpsAlterNote       $0F
00094AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ADC E109                       	smpsAlterNote       $09
00094ADE E701                       	dc.b	smpsNoAttack, $01
00094AE0 E105                       	smpsAlterNote       $05
00094AE2 E701                       	dc.b	smpsNoAttack, $01
00094AE4 E106                       	smpsAlterNote       $06
00094AE6 E701                       	dc.b	smpsNoAttack, $01
00094AE8 E10C                       	smpsAlterNote       $0C
00094AEA E701                       	dc.b	smpsNoAttack, $01
00094AEC E110                       	smpsAlterNote       $10
00094AEE E701                       	dc.b	smpsNoAttack, $01
00094AF0 E10C                       	smpsAlterNote       $0C
00094AF2 E701                       	dc.b	smpsNoAttack, $01
00094AF4 E109                       	smpsAlterNote       $09
00094AF6 E701                       	dc.b	smpsNoAttack, $01
00094AF8 E105                       	smpsAlterNote       $05
00094AFA E701                       	dc.b	smpsNoAttack, $01
00094AFC E106                       	smpsAlterNote       $06
00094AFE 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094B02 E107                       	smpsAlterNote       $07
00094B04 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094B09 E108                       	smpsAlterNote       $08
00094B0B CD0D                       	dc.b	nE6, $0D
00094B0D E107                       	smpsAlterNote       $07
00094B0F CB0D                       	dc.b	nD6, $0D
00094B11 E104                       	smpsAlterNote       $04
00094B13 E701                       	dc.b	smpsNoAttack, $01
00094B15 E100                       	smpsAlterNote       $00
00094B17 E701                       	dc.b	smpsNoAttack, $01
00094B19 E101                       	smpsAlterNote       $01
00094B1B E701                       	dc.b	smpsNoAttack, $01
00094B1D E107                       	smpsAlterNote       $07
00094B1F E701                       	dc.b	smpsNoAttack, $01
00094B21 E10B                       	smpsAlterNote       $0B
00094B23 E701                       	dc.b	smpsNoAttack, $01
00094B25 E107                       	smpsAlterNote       $07
00094B27 E701                       	dc.b	smpsNoAttack, $01
00094B29 E104                       	smpsAlterNote       $04
00094B2B E701                       	dc.b	smpsNoAttack, $01
00094B2D E100                       	smpsAlterNote       $00
00094B2F E701                       	dc.b	smpsNoAttack, $01
00094B31 E104                       	smpsAlterNote       $04
00094B33 E701                       	dc.b	smpsNoAttack, $01
00094B35 E10A                       	smpsAlterNote       $0A
00094B37 E701                       	dc.b	smpsNoAttack, $01
00094B39 E10B                       	smpsAlterNote       $0B
00094B3B E701                       	dc.b	smpsNoAttack, $01
00094B3D E108                       	smpsAlterNote       $08
00094B3F CC0D                       	dc.b	nEb6, $0D
00094B41 E105                       	smpsAlterNote       $05
00094B43 E701                       	dc.b	smpsNoAttack, $01
00094B45 E101                       	smpsAlterNote       $01
00094B47 E701                       	dc.b	smpsNoAttack, $01
00094B49 E102                       	smpsAlterNote       $02
00094B4B E701                       	dc.b	smpsNoAttack, $01
00094B4D E108                       	smpsAlterNote       $08
00094B4F E701                       	dc.b	smpsNoAttack, $01
00094B51 E106                       	smpsAlterNote       $06
00094B53 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094B5F 8001                       	dc.b	nRst, $01
00094B61 E107                       	smpsAlterNote       $07
00094B63 CB0D                       	dc.b	nD6, $0D
00094B65 E104                       	smpsAlterNote       $04
00094B67 E701                       	dc.b	smpsNoAttack, $01
00094B69 E100                       	smpsAlterNote       $00
00094B6B E701                       	dc.b	smpsNoAttack, $01
00094B6D E104                       	smpsAlterNote       $04
00094B6F E701                       	dc.b	smpsNoAttack, $01
00094B71 E107                       	smpsAlterNote       $07
00094B73 E701                       	dc.b	smpsNoAttack, $01
00094B75 E10B                       	smpsAlterNote       $0B
00094B77 E701                       	dc.b	smpsNoAttack, $01
00094B79 E107                       	smpsAlterNote       $07
00094B7B E701                       	dc.b	smpsNoAttack, $01
00094B7D E101                       	smpsAlterNote       $01
00094B7F E701                       	dc.b	smpsNoAttack, $01
00094B81 E100                       	smpsAlterNote       $00
00094B83 E701                       	dc.b	smpsNoAttack, $01
00094B85 E104                       	smpsAlterNote       $04
00094B87 E701                       	dc.b	smpsNoAttack, $01
00094B89 E10A                       	smpsAlterNote       $0A
00094B8B E701                       	dc.b	smpsNoAttack, $01
00094B8D E10B                       	smpsAlterNote       $0B
00094B8F 8001                       	dc.b	nRst, $01
00094B91 E109                       	smpsAlterNote       $09
00094B93 CE0A                       	dc.b	nF6, $0A
00094B95 E108                       	smpsAlterNote       $08
00094B97 CC07                       	dc.b	nEb6, $07
00094B99 E106                       	smpsAlterNote       $06
00094B9B C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094BA7 E107                       	smpsAlterNote       $07
00094BA9 CB0D                       	dc.b	nD6, $0D
00094BAB E101                       	smpsAlterNote       $01
00094BAD E701                       	dc.b	smpsNoAttack, $01
00094BAF E100                       	smpsAlterNote       $00
00094BB1 E701                       	dc.b	smpsNoAttack, $01
00094BB3 E104                       	smpsAlterNote       $04
00094BB5 E701                       	dc.b	smpsNoAttack, $01
00094BB7 E10A                       	smpsAlterNote       $0A
00094BB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BBD E107                       	smpsAlterNote       $07
00094BBF E701                       	dc.b	smpsNoAttack, $01
00094BC1 E101                       	smpsAlterNote       $01
00094BC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC7 E107                       	smpsAlterNote       $07
00094BC9 E701                       	dc.b	smpsNoAttack, $01
00094BCB E10A                       	smpsAlterNote       $0A
00094BCD E701                       	dc.b	smpsNoAttack, $01
00094BCF E10B                       	smpsAlterNote       $0B
00094BD1 8001                       	dc.b	nRst, $01
00094BD3 E108                       	smpsAlterNote       $08
00094BD5 CC0D                       	dc.b	nEb6, $0D
00094BD7 E102                       	smpsAlterNote       $02
00094BD9 E701                       	dc.b	smpsNoAttack, $01
00094BDB E101                       	smpsAlterNote       $01
00094BDD E701                       	dc.b	smpsNoAttack, $01
00094BDF E105                       	smpsAlterNote       $05
00094BE1 E701                       	dc.b	smpsNoAttack, $01
00094BE3 E108                       	smpsAlterNote       $08
00094BE5 8001                       	dc.b	nRst, $01
00094BE7 E106                       	smpsAlterNote       $06
00094BE9 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094BF5 8001                       	dc.b	nRst, $01
00094BF7 E107                       	smpsAlterNote       $07
00094BF9 CB0D                       	dc.b	nD6, $0D
00094BFB E101                       	smpsAlterNote       $01
00094BFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C01 E104                       	smpsAlterNote       $04
00094C03 E701                       	dc.b	smpsNoAttack, $01
00094C05 E10A                       	smpsAlterNote       $0A
00094C07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C0B E104                       	smpsAlterNote       $04
00094C0D E701                       	dc.b	smpsNoAttack, $01
00094C0F E101                       	smpsAlterNote       $01
00094C11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C15 E107                       	smpsAlterNote       $07
00094C17 E701                       	dc.b	smpsNoAttack, $01
00094C19 E10B                       	smpsAlterNote       $0B
00094C1B E701                       	dc.b	smpsNoAttack, $01
00094C1D E10A                       	smpsAlterNote       $0A
00094C1F E701                       	dc.b	smpsNoAttack, $01
00094C21 E104                       	smpsAlterNote       $04
00094C23 E701                       	dc.b	smpsNoAttack, $01
00094C25 E100                       	smpsAlterNote       $00
00094C27 E701                       	dc.b	smpsNoAttack, $01
00094C29 E101                       	smpsAlterNote       $01
00094C2B 801C                       	dc.b	nRst, $1C
00094C2F E107                       	smpsAlterNote       $07
00094C31 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094C35 E603                       	smpsAlterVol        $03
00094C37 F6F1 AD                    	smpsJump            music84_Jump03
00094C3A                            
00094C3A                            ; FM3 Data
00094C3A                            music84_FM3:
00094C3A E0C0                       	smpsPan             panCenter, $00
00094C3E E109                       	smpsAlterNote       $09
00094C40 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094C44 E108                       	smpsAlterNote       $08
00094C46 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094C4A E10B                       	smpsAlterNote       $0B
00094C4C BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094C52 E040                       	smpsPan             panRight, $00
00094C54 E110                       	smpsAlterNote       $10
00094C56 E6F9                       	smpsAlterVol        $F9
00094C58 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094C5C E10F                       	smpsAlterNote       $0F
00094C5E C603                       	dc.b	nA5, $03
00094C60 E10D                       	smpsAlterNote       $0D
00094C62 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094C68 E10C                       	smpsAlterNote       $0C
00094C6A C103 8001                  	dc.b	nE5, $03, nRst, $01
00094C6E E10A                       	smpsAlterNote       $0A
00094C70 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094C74 E10F                       	smpsAlterNote       $0F
00094C76 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094C7A E0C0                       	smpsPan             panCenter, $00
00094C7E E109                       	smpsAlterNote       $09
00094C80 E609                       	smpsAlterVol        $09
00094C82 B603                       	dc.b	nF4, $03
00094C84                            
00094C84                            music84_Jump02:
00094C84 E70A                       	dc.b	smpsNoAttack, $0A
00094C86 E103                       	smpsAlterNote       $03
00094C88 E701                       	dc.b	smpsNoAttack, $01
00094C8A E102                       	smpsAlterNote       $02
00094C8C E701                       	dc.b	smpsNoAttack, $01
00094C8E E106                       	smpsAlterNote       $06
00094C90 E701                       	dc.b	smpsNoAttack, $01
00094C92 E10C                       	smpsAlterNote       $0C
00094C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C98 E109                       	smpsAlterNote       $09
00094C9A E701                       	dc.b	smpsNoAttack, $01
00094C9C E103                       	smpsAlterNote       $03
00094C9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CA2 E109                       	smpsAlterNote       $09
00094CA4 E701                       	dc.b	smpsNoAttack, $01
00094CA6 E10C                       	smpsAlterNote       $0C
00094CA8 E701                       	dc.b	smpsNoAttack, $01
00094CAA E10D                       	smpsAlterNote       $0D
00094CAC 8001                       	dc.b	nRst, $01
00094CAE E109                       	smpsAlterNote       $09
00094CB0 B80D                       	dc.b	nG4, $0D
00094CB2 E103                       	smpsAlterNote       $03
00094CB4 E701                       	dc.b	smpsNoAttack, $01
00094CB6 E102                       	smpsAlterNote       $02
00094CB8 E701                       	dc.b	smpsNoAttack, $01
00094CBA E106                       	smpsAlterNote       $06
00094CBC E701                       	dc.b	smpsNoAttack, $01
00094CBE E10C                       	smpsAlterNote       $0C
00094CC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CC4 E109                       	smpsAlterNote       $09
00094CC6 E701                       	dc.b	smpsNoAttack, $01
00094CC8 E103                       	smpsAlterNote       $03
00094CCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CCE E109                       	smpsAlterNote       $09
00094CD0 E701                       	dc.b	smpsNoAttack, $01
00094CD2 E10C                       	smpsAlterNote       $0C
00094CD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CD8 E106                       	smpsAlterNote       $06
00094CDA E701                       	dc.b	smpsNoAttack, $01
00094CDC E102                       	smpsAlterNote       $02
00094CDE E701                       	dc.b	smpsNoAttack, $01
00094CE0 E103                       	smpsAlterNote       $03
00094CE2 E701                       	dc.b	smpsNoAttack, $01
00094CE4 E109                       	smpsAlterNote       $09
00094CE6 E701                       	dc.b	smpsNoAttack, $01
00094CE8 E10D                       	smpsAlterNote       $0D
00094CEA E701                       	dc.b	smpsNoAttack, $01
00094CEC E109                       	smpsAlterNote       $09
00094CEE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094CF2 E10B                       	smpsAlterNote       $0B
00094CF4 BA0D                       	dc.b	nA4, $0D
00094CF6 E105                       	smpsAlterNote       $05
00094CF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CFC E108                       	smpsAlterNote       $08
00094CFE E701                       	dc.b	smpsNoAttack, $01
00094D00 E10E                       	smpsAlterNote       $0E
00094D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D06 E108                       	smpsAlterNote       $08
00094D08 E701                       	dc.b	smpsNoAttack, $01
00094D0A E104                       	smpsAlterNote       $04
00094D0C E701                       	dc.b	smpsNoAttack, $01
00094D0E E105                       	smpsAlterNote       $05
00094D10 E701                       	dc.b	smpsNoAttack, $01
00094D12 E10B                       	smpsAlterNote       $0B
00094D14 E701                       	dc.b	smpsNoAttack, $01
00094D16 E10F                       	smpsAlterNote       $0F
00094D18 E701                       	dc.b	smpsNoAttack, $01
00094D1A E10B                       	smpsAlterNote       $0B
00094D1C E701                       	dc.b	smpsNoAttack, $01
00094D1E E108                       	smpsAlterNote       $08
00094D20 E701                       	dc.b	smpsNoAttack, $01
00094D22 E104                       	smpsAlterNote       $04
00094D24 E701                       	dc.b	smpsNoAttack, $01
00094D26 E108                       	smpsAlterNote       $08
00094D28 E701                       	dc.b	smpsNoAttack, $01
00094D2A E10E                       	smpsAlterNote       $0E
00094D2C E701                       	dc.b	smpsNoAttack, $01
00094D2E E10F                       	smpsAlterNote       $0F
00094D30 E701                       	dc.b	smpsNoAttack, $01
00094D32 E10B                       	smpsAlterNote       $0B
00094D34 E701                       	dc.b	smpsNoAttack, $01
00094D36 E105                       	smpsAlterNote       $05
00094D38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D3C E108                       	smpsAlterNote       $08
00094D3E E701                       	dc.b	smpsNoAttack, $01
00094D40 E10E                       	smpsAlterNote       $0E
00094D42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D46 E108                       	smpsAlterNote       $08
00094D48 E701                       	dc.b	smpsNoAttack, $01
00094D4A E105                       	smpsAlterNote       $05
00094D4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D50 E10B                       	smpsAlterNote       $0B
00094D52 E701                       	dc.b	smpsNoAttack, $01
00094D54 E10F                       	smpsAlterNote       $0F
00094D56 E701                       	dc.b	smpsNoAttack, $01
00094D58 E10E                       	smpsAlterNote       $0E
00094D5A E701                       	dc.b	smpsNoAttack, $01
00094D5C E108                       	smpsAlterNote       $08
00094D5E E701                       	dc.b	smpsNoAttack, $01
00094D60 E104                       	smpsAlterNote       $04
00094D62 E701                       	dc.b	smpsNoAttack, $01
00094D64 E105                       	smpsAlterNote       $05
00094D66 8001                       	dc.b	nRst, $01
00094D68 E108                       	smpsAlterNote       $08
00094D6A B50A                       	dc.b	nE4, $0A
00094D6C E109                       	smpsAlterNote       $09
00094D6E B60D                       	dc.b	nF4, $0D
00094D70 E106                       	smpsAlterNote       $06
00094D72 E701                       	dc.b	smpsNoAttack, $01
00094D74 E103                       	smpsAlterNote       $03
00094D76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D7A E109                       	smpsAlterNote       $09
00094D7C E701                       	dc.b	smpsNoAttack, $01
00094D7E E10D                       	smpsAlterNote       $0D
00094D80 E701                       	dc.b	smpsNoAttack, $01
00094D82 E10C                       	smpsAlterNote       $0C
00094D84 E701                       	dc.b	smpsNoAttack, $01
00094D86 E106                       	smpsAlterNote       $06
00094D88 E701                       	dc.b	smpsNoAttack, $01
00094D8A E102                       	smpsAlterNote       $02
00094D8C E701                       	dc.b	smpsNoAttack, $01
00094D8E E106                       	smpsAlterNote       $06
00094D90 E701                       	dc.b	smpsNoAttack, $01
00094D92 E109                       	smpsAlterNote       $09
00094D94 E701                       	dc.b	smpsNoAttack, $01
00094D96 E10D                       	smpsAlterNote       $0D
00094D98 E701                       	dc.b	smpsNoAttack, $01
00094D9A E109                       	smpsAlterNote       $09
00094D9C B80D                       	dc.b	nG4, $0D
00094D9E E106                       	smpsAlterNote       $06
00094DA0 E701                       	dc.b	smpsNoAttack, $01
00094DA2 E103                       	smpsAlterNote       $03
00094DA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DA8 E109                       	smpsAlterNote       $09
00094DAA E701                       	dc.b	smpsNoAttack, $01
00094DAC E10D                       	smpsAlterNote       $0D
00094DAE E701                       	dc.b	smpsNoAttack, $01
00094DB0 E10C                       	smpsAlterNote       $0C
00094DB2 E701                       	dc.b	smpsNoAttack, $01
00094DB4 E106                       	smpsAlterNote       $06
00094DB6 E701                       	dc.b	smpsNoAttack, $01
00094DB8 E102                       	smpsAlterNote       $02
00094DBA E701                       	dc.b	smpsNoAttack, $01
00094DBC E106                       	smpsAlterNote       $06
00094DBE E701                       	dc.b	smpsNoAttack, $01
00094DC0 E109                       	smpsAlterNote       $09
00094DC2 E701                       	dc.b	smpsNoAttack, $01
00094DC4 E10D                       	smpsAlterNote       $0D
00094DC6 E701                       	dc.b	smpsNoAttack, $01
00094DC8 E109                       	smpsAlterNote       $09
00094DCA E701                       	dc.b	smpsNoAttack, $01
00094DCC E103                       	smpsAlterNote       $03
00094DCE E701                       	dc.b	smpsNoAttack, $01
00094DD0 E102                       	smpsAlterNote       $02
00094DD2 E701                       	dc.b	smpsNoAttack, $01
00094DD4 E106                       	smpsAlterNote       $06
00094DD6 E701                       	dc.b	smpsNoAttack, $01
00094DD8 E10C                       	smpsAlterNote       $0C
00094DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DDE E109                       	smpsAlterNote       $09
00094DE0 E701                       	dc.b	smpsNoAttack, $01
00094DE2 E10B                       	smpsAlterNote       $0B
00094DE4 BA0D                       	dc.b	nA4, $0D
00094DE6 E108                       	smpsAlterNote       $08
00094DE8 E701                       	dc.b	smpsNoAttack, $01
00094DEA E104                       	smpsAlterNote       $04
00094DEC E701                       	dc.b	smpsNoAttack, $01
00094DEE E108                       	smpsAlterNote       $08
00094DF0 E701                       	dc.b	smpsNoAttack, $01
00094DF2 E10B                       	smpsAlterNote       $0B
00094DF4 E701                       	dc.b	smpsNoAttack, $01
00094DF6 E10F                       	smpsAlterNote       $0F
00094DF8 E701                       	dc.b	smpsNoAttack, $01
00094DFA E10B                       	smpsAlterNote       $0B
00094DFC E701                       	dc.b	smpsNoAttack, $01
00094DFE E105                       	smpsAlterNote       $05
00094E00 E701                       	dc.b	smpsNoAttack, $01
00094E02 E104                       	smpsAlterNote       $04
00094E04 E701                       	dc.b	smpsNoAttack, $01
00094E06 E108                       	smpsAlterNote       $08
00094E08 E701                       	dc.b	smpsNoAttack, $01
00094E0A E10E                       	smpsAlterNote       $0E
00094E0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E10 E10B                       	smpsAlterNote       $0B
00094E12 E701                       	dc.b	smpsNoAttack, $01
00094E14 E105                       	smpsAlterNote       $05
00094E16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E1A E10B                       	smpsAlterNote       $0B
00094E1C E701                       	dc.b	smpsNoAttack, $01
00094E1E E10E                       	smpsAlterNote       $0E
00094E20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E24 E108                       	smpsAlterNote       $08
00094E26 E701                       	dc.b	smpsNoAttack, $01
00094E28 E104                       	smpsAlterNote       $04
00094E2A E701                       	dc.b	smpsNoAttack, $01
00094E2C E105                       	smpsAlterNote       $05
00094E2E E701                       	dc.b	smpsNoAttack, $01
00094E30 E10B                       	smpsAlterNote       $0B
00094E32 E701                       	dc.b	smpsNoAttack, $01
00094E34 E10F                       	smpsAlterNote       $0F
00094E36 E701                       	dc.b	smpsNoAttack, $01
00094E38 E10B                       	smpsAlterNote       $0B
00094E3A E701                       	dc.b	smpsNoAttack, $01
00094E3C E108                       	smpsAlterNote       $08
00094E3E E701                       	dc.b	smpsNoAttack, $01
00094E40 E105                       	smpsAlterNote       $05
00094E42 8001                       	dc.b	nRst, $01
00094E44 E109                       	smpsAlterNote       $09
00094E46 B609 8001                  	dc.b	nF4, $09, nRst, $01
00094E4A E108                       	smpsAlterNote       $08
00094E4C B506 8001                  	dc.b	nE4, $06, nRst, $01
00094E50 E107                       	smpsAlterNote       $07
00094E52 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094E56 E108                       	smpsAlterNote       $08
00094E58 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094E5C E109                       	smpsAlterNote       $09
00094E5E B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094E64 E10B                       	smpsAlterNote       $0B
00094E66 BA0D                       	dc.b	nA4, $0D
00094E68 E108                       	smpsAlterNote       $08
00094E6A E701                       	dc.b	smpsNoAttack, $01
00094E6C E104                       	smpsAlterNote       $04
00094E6E E701                       	dc.b	smpsNoAttack, $01
00094E70 E108                       	smpsAlterNote       $08
00094E72 E701                       	dc.b	smpsNoAttack, $01
00094E74 E10E                       	smpsAlterNote       $0E
00094E76 E701                       	dc.b	smpsNoAttack, $01
00094E78 E10F                       	smpsAlterNote       $0F
00094E7A E701                       	dc.b	smpsNoAttack, $01
00094E7C E10B                       	smpsAlterNote       $0B
00094E7E E701                       	dc.b	smpsNoAttack, $01
00094E80 E105                       	smpsAlterNote       $05
00094E82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E86 E108                       	smpsAlterNote       $08
00094E88 E701                       	dc.b	smpsNoAttack, $01
00094E8A E10E                       	smpsAlterNote       $0E
00094E8C E701                       	dc.b	smpsNoAttack, $01
00094E8E E10F                       	smpsAlterNote       $0F
00094E90 8001                       	dc.b	nRst, $01
00094E92 E109                       	smpsAlterNote       $09
00094E94 C20D                       	dc.b	nF5, $0D
00094E96 E103                       	smpsAlterNote       $03
00094E98 E701                       	dc.b	smpsNoAttack, $01
00094E9A E102                       	smpsAlterNote       $02
00094E9C E701                       	dc.b	smpsNoAttack, $01
00094E9E E106                       	smpsAlterNote       $06
00094EA0 E701                       	dc.b	smpsNoAttack, $01
00094EA2 E10C                       	smpsAlterNote       $0C
00094EA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EA8 E109                       	smpsAlterNote       $09
00094EAA E701                       	dc.b	smpsNoAttack, $01
00094EAC E103                       	smpsAlterNote       $03
00094EAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EB2 E109                       	smpsAlterNote       $09
00094EB4 E701                       	dc.b	smpsNoAttack, $01
00094EB6 E10C                       	smpsAlterNote       $0C
00094EB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EBC E106                       	smpsAlterNote       $06
00094EBE E701                       	dc.b	smpsNoAttack, $01
00094EC0 E102                       	smpsAlterNote       $02
00094EC2 E701                       	dc.b	smpsNoAttack, $01
00094EC4 E103                       	smpsAlterNote       $03
00094EC6 E701                       	dc.b	smpsNoAttack, $01
00094EC8 E109                       	smpsAlterNote       $09
00094ECA E701                       	dc.b	smpsNoAttack, $01
00094ECC E10D                       	smpsAlterNote       $0D
00094ECE E701                       	dc.b	smpsNoAttack, $01
00094ED0 E109                       	smpsAlterNote       $09
00094ED2 E701                       	dc.b	smpsNoAttack, $01
00094ED4 E106                       	smpsAlterNote       $06
00094ED6 E701                       	dc.b	smpsNoAttack, $01
00094ED8 E102                       	smpsAlterNote       $02
00094EDA E701                       	dc.b	smpsNoAttack, $01
00094EDC E106                       	smpsAlterNote       $06
00094EDE E701                       	dc.b	smpsNoAttack, $01
00094EE0 E10C                       	smpsAlterNote       $0C
00094EE2 E701                       	dc.b	smpsNoAttack, $01
00094EE4 E10D                       	smpsAlterNote       $0D
00094EE6 E701                       	dc.b	smpsNoAttack, $01
00094EE8 E109                       	smpsAlterNote       $09
00094EEA E701                       	dc.b	smpsNoAttack, $01
00094EEC E103                       	smpsAlterNote       $03
00094EEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EF2 E106                       	smpsAlterNote       $06
00094EF4 E701                       	dc.b	smpsNoAttack, $01
00094EF6 E10C                       	smpsAlterNote       $0C
00094EF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EFC E106                       	smpsAlterNote       $06
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E103                       	smpsAlterNote       $03
00094F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F06 E109                       	smpsAlterNote       $09
00094F08 E701                       	dc.b	smpsNoAttack, $01
00094F0A E10D                       	smpsAlterNote       $0D
00094F0C E701                       	dc.b	smpsNoAttack, $01
00094F0E E10C                       	smpsAlterNote       $0C
00094F10 E701                       	dc.b	smpsNoAttack, $01
00094F12 E106                       	smpsAlterNote       $06
00094F14 E701                       	dc.b	smpsNoAttack, $01
00094F16 E102                       	smpsAlterNote       $02
00094F18 E701                       	dc.b	smpsNoAttack, $01
00094F1A E106                       	smpsAlterNote       $06
00094F1C E701                       	dc.b	smpsNoAttack, $01
00094F1E E109                       	smpsAlterNote       $09
00094F20 E701                       	dc.b	smpsNoAttack, $01
00094F22 E10D                       	smpsAlterNote       $0D
00094F24 E701                       	dc.b	smpsNoAttack, $01
00094F26 E109                       	smpsAlterNote       $09
00094F28 E701                       	dc.b	smpsNoAttack, $01
00094F2A E103                       	smpsAlterNote       $03
00094F2C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094F30 E109                       	smpsAlterNote       $09
00094F32 C206                       	dc.b	nF5, $06
00094F34 E108                       	smpsAlterNote       $08
00094F36 C10E                       	dc.b	nE5, $0E
00094F38 E102                       	smpsAlterNote       $02
00094F3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F3E E108                       	smpsAlterNote       $08
00094F40 E701                       	dc.b	smpsNoAttack, $01
00094F42 E10B                       	smpsAlterNote       $0B
00094F44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F48 E105                       	smpsAlterNote       $05
00094F4A E701                       	dc.b	smpsNoAttack, $01
00094F4C E101                       	smpsAlterNote       $01
00094F4E E701                       	dc.b	smpsNoAttack, $01
00094F50 E102                       	smpsAlterNote       $02
00094F52 E701                       	dc.b	smpsNoAttack, $01
00094F54 E108                       	smpsAlterNote       $08
00094F56 E701                       	dc.b	smpsNoAttack, $01
00094F58 E10C                       	smpsAlterNote       $0C
00094F5A E701                       	dc.b	smpsNoAttack, $01
00094F5C E107                       	smpsAlterNote       $07
00094F5E BF0E                       	dc.b	nD5, $0E
00094F60 E101                       	smpsAlterNote       $01
00094F62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F66 E107                       	smpsAlterNote       $07
00094F68 E701                       	dc.b	smpsNoAttack, $01
00094F6A E10A                       	smpsAlterNote       $0A
00094F6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F70 E104                       	smpsAlterNote       $04
00094F72 E701                       	dc.b	smpsNoAttack, $01
00094F74 E100                       	smpsAlterNote       $00
00094F76 E701                       	dc.b	smpsNoAttack, $01
00094F78 E104                       	smpsAlterNote       $04
00094F7A E701                       	dc.b	smpsNoAttack, $01
00094F7C E107                       	smpsAlterNote       $07
00094F7E E701                       	dc.b	smpsNoAttack, $01
00094F80 E10B                       	smpsAlterNote       $0B
00094F82 E701                       	dc.b	smpsNoAttack, $01
00094F84 E107                       	smpsAlterNote       $07
00094F86 E701                       	dc.b	smpsNoAttack, $01
00094F88 E101                       	smpsAlterNote       $01
00094F8A E701                       	dc.b	smpsNoAttack, $01
00094F8C E100                       	smpsAlterNote       $00
00094F8E E701                       	dc.b	smpsNoAttack, $01
00094F90 E104                       	smpsAlterNote       $04
00094F92 E701                       	dc.b	smpsNoAttack, $01
00094F94 E10A                       	smpsAlterNote       $0A
00094F96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F9A E107                       	smpsAlterNote       $07
00094F9C E701                       	dc.b	smpsNoAttack, $01
00094F9E E101                       	smpsAlterNote       $01
00094FA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FA4 E107                       	smpsAlterNote       $07
00094FA6 E701                       	dc.b	smpsNoAttack, $01
00094FA8 E10A                       	smpsAlterNote       $0A
00094FAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FAE E104                       	smpsAlterNote       $04
00094FB0 E701                       	dc.b	smpsNoAttack, $01
00094FB2 E100                       	smpsAlterNote       $00
00094FB4 E701                       	dc.b	smpsNoAttack, $01
00094FB6 E101                       	smpsAlterNote       $01
00094FB8 E701                       	dc.b	smpsNoAttack, $01
00094FBA E107                       	smpsAlterNote       $07
00094FBC E701                       	dc.b	smpsNoAttack, $01
00094FBE E10B                       	smpsAlterNote       $0B
00094FC0 E701                       	dc.b	smpsNoAttack, $01
00094FC2 E107                       	smpsAlterNote       $07
00094FC4 E701                       	dc.b	smpsNoAttack, $01
00094FC6 E104                       	smpsAlterNote       $04
00094FC8 E701                       	dc.b	smpsNoAttack, $01
00094FCA E100                       	smpsAlterNote       $00
00094FCC E701                       	dc.b	smpsNoAttack, $01
00094FCE E104                       	smpsAlterNote       $04
00094FD0 E701                       	dc.b	smpsNoAttack, $01
00094FD2 E10A                       	smpsAlterNote       $0A
00094FD4 E701                       	dc.b	smpsNoAttack, $01
00094FD6 E10B                       	smpsAlterNote       $0B
00094FD8 E701                       	dc.b	smpsNoAttack, $01
00094FDA E107                       	smpsAlterNote       $07
00094FDC E701                       	dc.b	smpsNoAttack, $01
00094FDE E101                       	smpsAlterNote       $01
00094FE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FE4 E104                       	smpsAlterNote       $04
00094FE6 E701                       	dc.b	smpsNoAttack, $01
00094FE8 E10A                       	smpsAlterNote       $0A
00094FEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FEE E104                       	smpsAlterNote       $04
00094FF0 E701                       	dc.b	smpsNoAttack, $01
00094FF2 E101                       	smpsAlterNote       $01
00094FF4 E701                       	dc.b	smpsNoAttack, $01
00094FF8 E107                       	smpsAlterNote       $07
00094FFA E6FF                       	smpsAlterVol        $FF
00094FFC BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00095008 8004                       	dc.b	nRst, $04
0009500C E109                       	smpsAlterNote       $09
0009500E E602                       	smpsAlterVol        $02
00095010 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00095016 E108                       	smpsAlterNote       $08
00095018 B502 8001                  	dc.b	nE4, $02, nRst, $01
0009501C E109                       	smpsAlterNote       $09
0009501E B60D                       	dc.b	nF4, $0D
00095020 E106                       	smpsAlterNote       $06
00095022 E701                       	dc.b	smpsNoAttack, $01
00095024 E102                       	smpsAlterNote       $02
00095026 E701                       	dc.b	smpsNoAttack, $01
00095028 E106                       	smpsAlterNote       $06
0009502A E701                       	dc.b	smpsNoAttack, $01
0009502C E109                       	smpsAlterNote       $09
0009502E E701                       	dc.b	smpsNoAttack, $01
00095030 E10D                       	smpsAlterNote       $0D
00095032 E701                       	dc.b	smpsNoAttack, $01
00095034 E109                       	smpsAlterNote       $09
00095036 E701                       	dc.b	smpsNoAttack, $01
00095038 E103                       	smpsAlterNote       $03
0009503A E701                       	dc.b	smpsNoAttack, $01
0009503C E102                       	smpsAlterNote       $02
0009503E E701                       	dc.b	smpsNoAttack, $01
00095040 E106                       	smpsAlterNote       $06
00095042 E701                       	dc.b	smpsNoAttack, $01
00095044 E10C                       	smpsAlterNote       $0C
00095046 E701                       	dc.b	smpsNoAttack, $01
00095048 E10D                       	smpsAlterNote       $0D
0009504A 8001                       	dc.b	nRst, $01
0009504C E109                       	smpsAlterNote       $09
0009504E B80D                       	dc.b	nG4, $0D
00095050 E106                       	smpsAlterNote       $06
00095052 E701                       	dc.b	smpsNoAttack, $01
00095054 E102                       	smpsAlterNote       $02
00095056 E701                       	dc.b	smpsNoAttack, $01
00095058 E106                       	smpsAlterNote       $06
0009505A E701                       	dc.b	smpsNoAttack, $01
0009505C E10C                       	smpsAlterNote       $0C
0009505E E701                       	dc.b	smpsNoAttack, $01
00095060 E10D                       	smpsAlterNote       $0D
00095062 E701                       	dc.b	smpsNoAttack, $01
00095064 E109                       	smpsAlterNote       $09
00095066 E701                       	dc.b	smpsNoAttack, $01
00095068 E103                       	smpsAlterNote       $03
0009506A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009506E E106                       	smpsAlterNote       $06
00095070 E701                       	dc.b	smpsNoAttack, $01
00095072 E10C                       	smpsAlterNote       $0C
00095074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095078 E106                       	smpsAlterNote       $06
0009507A E701                       	dc.b	smpsNoAttack, $01
0009507C E103                       	smpsAlterNote       $03
0009507E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095082 E109                       	smpsAlterNote       $09
00095084 E701                       	dc.b	smpsNoAttack, $01
00095086 E10D                       	smpsAlterNote       $0D
00095088 E701                       	dc.b	smpsNoAttack, $01
0009508A E10C                       	smpsAlterNote       $0C
0009508C E701                       	dc.b	smpsNoAttack, $01
0009508E E109                       	smpsAlterNote       $09
00095090 8001                       	dc.b	nRst, $01
00095092 E10B                       	smpsAlterNote       $0B
00095094 BA03                       	dc.b	nA4, $03
00095096 E10C                       	smpsAlterNote       $0C
00095098 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0009509C E10B                       	smpsAlterNote       $0B
0009509E BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000950A4 E10C                       	smpsAlterNote       $0C
000950A6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000950AA E10B                       	smpsAlterNote       $0B
000950AC C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000950B2 E10C                       	smpsAlterNote       $0C
000950B4 D303                       	dc.b	nBb6, $03
000950B6 E10B                       	smpsAlterNote       $0B
000950B8 D20D                       	dc.b	nA6, $0D
000950BA E108                       	smpsAlterNote       $08
000950BC E701                       	dc.b	smpsNoAttack, $01
000950BE E104                       	smpsAlterNote       $04
000950C0 E701                       	dc.b	smpsNoAttack, $01
000950C2 E105                       	smpsAlterNote       $05
000950C4 E701                       	dc.b	smpsNoAttack, $01
000950C6 E10B                       	smpsAlterNote       $0B
000950C8 E701                       	dc.b	smpsNoAttack, $01
000950CA E10F                       	smpsAlterNote       $0F
000950CC E701                       	dc.b	smpsNoAttack, $01
000950CE E10B                       	smpsAlterNote       $0B
000950D0 E701                       	dc.b	smpsNoAttack, $01
000950D2 E108                       	smpsAlterNote       $08
000950D4 E701                       	dc.b	smpsNoAttack, $01
000950D6 E104                       	smpsAlterNote       $04
000950D8 E701                       	dc.b	smpsNoAttack, $01
000950DA E108                       	smpsAlterNote       $08
000950DC E701                       	dc.b	smpsNoAttack, $01
000950DE E10E                       	smpsAlterNote       $0E
000950E0 E701                       	dc.b	smpsNoAttack, $01
000950E2 E10F                       	smpsAlterNote       $0F
000950E4 E701                       	dc.b	smpsNoAttack, $01
000950E6 E10B                       	smpsAlterNote       $0B
000950E8 E701                       	dc.b	smpsNoAttack, $01
000950EA E105                       	smpsAlterNote       $05
000950EC E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000950F2 E109                       	smpsAlterNote       $09
000950F4 CE07                       	dc.b	nF6, $07
000950F6 E108                       	smpsAlterNote       $08
000950F8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000950FC E109                       	smpsAlterNote       $09
000950FE CE03 8001                  	dc.b	nF6, $03, nRst, $01
00095102 E108                       	smpsAlterNote       $08
00095104 CC0D                       	dc.b	nEb6, $0D
00095106 E102                       	smpsAlterNote       $02
00095108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009510C E108                       	smpsAlterNote       $08
0009510E E701                       	dc.b	smpsNoAttack, $01
00095110 E10B                       	smpsAlterNote       $0B
00095112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095116 E105                       	smpsAlterNote       $05
00095118 E701                       	dc.b	smpsNoAttack, $01
0009511A E101                       	smpsAlterNote       $01
0009511C E701                       	dc.b	smpsNoAttack, $01
0009511E E102                       	smpsAlterNote       $02
00095120 E701                       	dc.b	smpsNoAttack, $01
00095122 E108                       	smpsAlterNote       $08
00095124 E701                       	dc.b	smpsNoAttack, $01
00095126 E10C                       	smpsAlterNote       $0C
00095128 E701                       	dc.b	smpsNoAttack, $01
0009512A E108                       	smpsAlterNote       $08
0009512C E701                       	dc.b	smpsNoAttack, $01
0009512E E105                       	smpsAlterNote       $05
00095130 E701                       	dc.b	smpsNoAttack, $01
00095132 E101                       	smpsAlterNote       $01
00095134 E701                       	dc.b	smpsNoAttack, $01
00095136 E105                       	smpsAlterNote       $05
00095138 E701                       	dc.b	smpsNoAttack, $01
0009513A E10B                       	smpsAlterNote       $0B
0009513C E701                       	dc.b	smpsNoAttack, $01
0009513E E10C                       	smpsAlterNote       $0C
00095140 E701                       	dc.b	smpsNoAttack, $01
00095142 E108                       	smpsAlterNote       $08
00095144 E701                       	dc.b	smpsNoAttack, $01
00095146 E107                       	smpsAlterNote       $07
00095148 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00095152 E10B                       	smpsAlterNote       $0B
00095154 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0009515E E109                       	smpsAlterNote       $09
00095160 C203                       	dc.b	nF5, $03
00095162 E108                       	smpsAlterNote       $08
00095164 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095168 E109                       	smpsAlterNote       $09
0009516A C20D                       	dc.b	nF5, $0D
0009516C E108                       	smpsAlterNote       $08
0009516E C10E                       	dc.b	nE5, $0E
00095170 E107                       	smpsAlterNote       $07
00095172 BF0D                       	dc.b	nD5, $0D
00095174 E104                       	smpsAlterNote       $04
00095176 E701                       	dc.b	smpsNoAttack, $01
00095178 E100                       	smpsAlterNote       $00
0009517A E701                       	dc.b	smpsNoAttack, $01
0009517C E104                       	smpsAlterNote       $04
0009517E E701                       	dc.b	smpsNoAttack, $01
00095180 E107                       	smpsAlterNote       $07
00095182 E701                       	dc.b	smpsNoAttack, $01
00095184 E10B                       	smpsAlterNote       $0B
00095186 E701                       	dc.b	smpsNoAttack, $01
00095188 E107                       	smpsAlterNote       $07
0009518A E701                       	dc.b	smpsNoAttack, $01
0009518C E101                       	smpsAlterNote       $01
0009518E E701                       	dc.b	smpsNoAttack, $01
00095190 E100                       	smpsAlterNote       $00
00095192 E701                       	dc.b	smpsNoAttack, $01
00095194 E104                       	smpsAlterNote       $04
00095196 E701                       	dc.b	smpsNoAttack, $01
00095198 E10A                       	smpsAlterNote       $0A
0009519A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009519E E107                       	smpsAlterNote       $07
000951A0 E701                       	dc.b	smpsNoAttack, $01
000951A2 E101                       	smpsAlterNote       $01
000951A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951A8 E107                       	smpsAlterNote       $07
000951AA E701                       	dc.b	smpsNoAttack, $01
000951AC E10A                       	smpsAlterNote       $0A
000951AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951B2 E104                       	smpsAlterNote       $04
000951B4 E701                       	dc.b	smpsNoAttack, $01
000951B6 E100                       	smpsAlterNote       $00
000951B8 E701                       	dc.b	smpsNoAttack, $01
000951BA E101                       	smpsAlterNote       $01
000951BC E701                       	dc.b	smpsNoAttack, $01
000951BE E107                       	smpsAlterNote       $07
000951C0 E701                       	dc.b	smpsNoAttack, $01
000951C2 E10B                       	smpsAlterNote       $0B
000951C4 E701                       	dc.b	smpsNoAttack, $01
000951C6 E107                       	smpsAlterNote       $07
000951C8 E701                       	dc.b	smpsNoAttack, $01
000951CA E104                       	smpsAlterNote       $04
000951CC E701                       	dc.b	smpsNoAttack, $01
000951CE E100                       	smpsAlterNote       $00
000951D0 E701                       	dc.b	smpsNoAttack, $01
000951D2 E104                       	smpsAlterNote       $04
000951D4 E701                       	dc.b	smpsNoAttack, $01
000951D6 E10A                       	smpsAlterNote       $0A
000951D8 E701                       	dc.b	smpsNoAttack, $01
000951DA E10B                       	smpsAlterNote       $0B
000951DC E701                       	dc.b	smpsNoAttack, $01
000951DE E107                       	smpsAlterNote       $07
000951E0 E701                       	dc.b	smpsNoAttack, $01
000951E2 E101                       	smpsAlterNote       $01
000951E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951E8 E104                       	smpsAlterNote       $04
000951EA E701                       	dc.b	smpsNoAttack, $01
000951EC E10A                       	smpsAlterNote       $0A
000951EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951F2 E104                       	smpsAlterNote       $04
000951F4 E701                       	dc.b	smpsNoAttack, $01
000951F6 E101                       	smpsAlterNote       $01
000951F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951FC E107                       	smpsAlterNote       $07
000951FE E701                       	dc.b	smpsNoAttack, $01
00095200 E10B                       	smpsAlterNote       $0B
00095202 E701                       	dc.b	smpsNoAttack, $01
00095204 E10A                       	smpsAlterNote       $0A
00095206 E701                       	dc.b	smpsNoAttack, $01
00095208 E104                       	smpsAlterNote       $04
0009520A E701                       	dc.b	smpsNoAttack, $01
0009520C E100                       	smpsAlterNote       $00
0009520E E701                       	dc.b	smpsNoAttack, $01
00095210 E104                       	smpsAlterNote       $04
00095212 E701                       	dc.b	smpsNoAttack, $01
00095214 E107                       	smpsAlterNote       $07
00095216 E701                       	dc.b	smpsNoAttack, $01
00095218 E10B                       	smpsAlterNote       $0B
0009521A E701                       	dc.b	smpsNoAttack, $01
0009521C E107                       	smpsAlterNote       $07
0009521E E701                       	dc.b	smpsNoAttack, $01
00095220 E101                       	smpsAlterNote       $01
00095222 E701                       	dc.b	smpsNoAttack, $01
00095224 E100                       	smpsAlterNote       $00
00095226 E701                       	dc.b	smpsNoAttack, $01
00095228 E104                       	smpsAlterNote       $04
0009522A E701                       	dc.b	smpsNoAttack, $01
0009522C E10A                       	smpsAlterNote       $0A
0009522E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095232 E107                       	smpsAlterNote       $07
00095234 E701                       	dc.b	smpsNoAttack, $01
00095236 E101                       	smpsAlterNote       $01
00095238 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009523C E107                       	smpsAlterNote       $07
0009523E E701                       	dc.b	smpsNoAttack, $01
00095240 E10A                       	smpsAlterNote       $0A
00095242 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095246 E104                       	smpsAlterNote       $04
00095248 E701                       	dc.b	smpsNoAttack, $01
0009524A E100                       	smpsAlterNote       $00
0009524C E701                       	dc.b	smpsNoAttack, $01
0009524E E101                       	smpsAlterNote       $01
00095250 E701                       	dc.b	smpsNoAttack, $01
00095252 E107                       	smpsAlterNote       $07
00095254 E701                       	dc.b	smpsNoAttack, $01
00095256 E10B                       	smpsAlterNote       $0B
00095258 E701                       	dc.b	smpsNoAttack, $01
0009525A E107                       	smpsAlterNote       $07
0009525C E701                       	dc.b	smpsNoAttack, $01
0009525E E104                       	smpsAlterNote       $04
00095260 E701                       	dc.b	smpsNoAttack, $01
00095262 E100                       	smpsAlterNote       $00
00095264 E701                       	dc.b	smpsNoAttack, $01
00095266 E101                       	smpsAlterNote       $01
00095268 8001                       	dc.b	nRst, $01
0009526A E109                       	smpsAlterNote       $09
0009526C C20D                       	dc.b	nF5, $0D
0009526E E106                       	smpsAlterNote       $06
00095270 E701                       	dc.b	smpsNoAttack, $01
00095272 E102                       	smpsAlterNote       $02
00095274 E701                       	dc.b	smpsNoAttack, $01
00095276 E106                       	smpsAlterNote       $06
00095278 E701                       	dc.b	smpsNoAttack, $01
0009527A E10C                       	smpsAlterNote       $0C
0009527C E701                       	dc.b	smpsNoAttack, $01
0009527E E10D                       	smpsAlterNote       $0D
00095280 E701                       	dc.b	smpsNoAttack, $01
00095282 E109                       	smpsAlterNote       $09
00095284 E701                       	dc.b	smpsNoAttack, $01
00095286 E103                       	smpsAlterNote       $03
00095288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009528C E106                       	smpsAlterNote       $06
0009528E E701                       	dc.b	smpsNoAttack, $01
00095290 E10C                       	smpsAlterNote       $0C
00095292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095296 E106                       	smpsAlterNote       $06
00095298 E701                       	dc.b	smpsNoAttack, $01
0009529A E103                       	smpsAlterNote       $03
0009529C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952A0 E109                       	smpsAlterNote       $09
000952A2 E701                       	dc.b	smpsNoAttack, $01
000952A4 E10D                       	smpsAlterNote       $0D
000952A6 E701                       	dc.b	smpsNoAttack, $01
000952A8 E10C                       	smpsAlterNote       $0C
000952AA E701                       	dc.b	smpsNoAttack, $01
000952AC E109                       	smpsAlterNote       $09
000952AE 8001                       	dc.b	nRst, $01
000952B0 E108                       	smpsAlterNote       $08
000952B2 C10D                       	dc.b	nE5, $0D
000952B4 E109                       	smpsAlterNote       $09
000952B6 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000952BA E108                       	smpsAlterNote       $08
000952BC C10D                       	dc.b	nE5, $0D
000952BE E102                       	smpsAlterNote       $02
000952C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952C4 E105                       	smpsAlterNote       $05
000952C6 E701                       	dc.b	smpsNoAttack, $01
000952C8 E108                       	smpsAlterNote       $08
000952CA 8001                       	dc.b	nRst, $01
000952CC E107                       	smpsAlterNote       $07
000952CE BF0D                       	dc.b	nD5, $0D
000952D0 E108                       	smpsAlterNote       $08
000952D2 C107                       	dc.b	nE5, $07
000952D4 E109                       	smpsAlterNote       $09
000952D6 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000952DC E10B                       	smpsAlterNote       $0B
000952DE C603                       	dc.b	nA5, $03
000952E0 E10C                       	smpsAlterNote       $0C
000952E2 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000952E8 E10B                       	smpsAlterNote       $0B
000952EA C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000952F0 E109                       	smpsAlterNote       $09
000952F2 D003                       	dc.b	nG6, $03
000952F4 E108                       	smpsAlterNote       $08
000952F6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000952FA E10B                       	smpsAlterNote       $0B
000952FC C601 8001                  	dc.b	nA5, $01, nRst, $01
00095300 E108                       	smpsAlterNote       $08
00095302 C102                       	dc.b	nE5, $02
00095306 E10C                       	smpsAlterNote       $0C
00095308 E6FB                       	smpsAlterVol        $FB
0009530A A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00095316 8001                       	dc.b	nRst, $01
00095318 E10B                       	smpsAlterNote       $0B
0009531A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095322 E107                       	smpsAlterNote       $07
00095324 A706 8001                  	dc.b	nD3, $06, nRst, $01
00095328 E10B                       	smpsAlterNote       $0B
0009532A A203                       	dc.b	nA2, $03
0009532C E109                       	smpsAlterNote       $09
0009532E AA03 8001                  	dc.b	nF3, $03, nRst, $01
00095332 E108                       	smpsAlterNote       $08
00095334 A906                       	dc.b	nE3, $06
00095336 E107                       	smpsAlterNote       $07
00095338 A703 8001                  	dc.b	nD3, $03, nRst, $01
0009533C E106                       	smpsAlterNote       $06
0009533E A503                       	dc.b	nC3, $03
00095340 E10C                       	smpsAlterNote       $0C
00095342 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095346 E10B                       	smpsAlterNote       $0B
00095348 A203 8004                  	dc.b	nA2, $03, nRst, $04
0009534C E11B                       	smpsAlterNote       $1B
0009534E C401                       	dc.b	nG5, $01
00095350 E1F4                       	smpsAlterNote       $F4
00095352 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095355 E106                       	smpsAlterNote       $06
00095357 E701                       	dc.b	smpsNoAttack, $01
00095359 E10F                       	smpsAlterNote       $0F
0009535B E701                       	dc.b	smpsNoAttack, $01
0009535D E1E4                       	smpsAlterNote       $E4
0009535F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095362 E1F6                       	smpsAlterNote       $F6
00095364 E701                       	dc.b	smpsNoAttack, $01
00095366 E108                       	smpsAlterNote       $08
00095368 E701                       	dc.b	smpsNoAttack, $01
0009536A E10B                       	smpsAlterNote       $0B
0009536C E706                       	dc.b	smpsNoAttack, $06
0009536E E105                       	smpsAlterNote       $05
00095370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095374 E108                       	smpsAlterNote       $08
00095376 E701                       	dc.b	smpsNoAttack, $01
00095378 E10E                       	smpsAlterNote       $0E
0009537A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009537E E108                       	smpsAlterNote       $08
00095380 E701                       	dc.b	smpsNoAttack, $01
00095382 E105                       	smpsAlterNote       $05
00095384 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095388 E10B                       	smpsAlterNote       $0B
0009538A E701                       	dc.b	smpsNoAttack, $01
0009538C E10F                       	smpsAlterNote       $0F
0009538E E701                       	dc.b	smpsNoAttack, $01
00095390 E10E                       	smpsAlterNote       $0E
00095392 E701                       	dc.b	smpsNoAttack, $01
00095394 E108                       	smpsAlterNote       $08
00095396 E701                       	dc.b	smpsNoAttack, $01
00095398 E104                       	smpsAlterNote       $04
0009539A E701                       	dc.b	smpsNoAttack, $01
0009539C E108                       	smpsAlterNote       $08
0009539E E701                       	dc.b	smpsNoAttack, $01
000953A0 E10B                       	smpsAlterNote       $0B
000953A2 E701                       	dc.b	smpsNoAttack, $01
000953A4 E10F                       	smpsAlterNote       $0F
000953A6 E701                       	dc.b	smpsNoAttack, $01
000953A8 E10B                       	smpsAlterNote       $0B
000953AA E701                       	dc.b	smpsNoAttack, $01
000953AC E105                       	smpsAlterNote       $05
000953AE E701                       	dc.b	smpsNoAttack, $01
000953B0 E104                       	smpsAlterNote       $04
000953B2 E701                       	dc.b	smpsNoAttack, $01
000953B4 E108                       	smpsAlterNote       $08
000953B6 E701                       	dc.b	smpsNoAttack, $01
000953B8 E10E                       	smpsAlterNote       $0E
000953BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953BE E10B                       	smpsAlterNote       $0B
000953C0 E701                       	dc.b	smpsNoAttack, $01
000953C2 E105                       	smpsAlterNote       $05
000953C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953C8 E10B                       	smpsAlterNote       $0B
000953CA E701                       	dc.b	smpsNoAttack, $01
000953CC E10E                       	smpsAlterNote       $0E
000953CE E701                       	dc.b	smpsNoAttack, $01
000953D0 E10F                       	smpsAlterNote       $0F
000953D2 8001                       	dc.b	nRst, $01
000953D4 E109                       	smpsAlterNote       $09
000953D6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000953DC E108                       	smpsAlterNote       $08
000953DE C101 8001                  	dc.b	nE5, $01, nRst, $01
000953E2 E109                       	smpsAlterNote       $09
000953E4 C202                       	dc.b	nF5, $02
000953E6 E108                       	smpsAlterNote       $08
000953E8 C102                       	dc.b	nE5, $02
000953EA E107                       	smpsAlterNote       $07
000953EC BF02 8001                  	dc.b	nD5, $02, nRst, $01
000953F0 E108                       	smpsAlterNote       $08
000953F2 C101 8001                  	dc.b	nE5, $01, nRst, $01
000953F6 E107                       	smpsAlterNote       $07
000953F8 BF02                       	dc.b	nD5, $02
000953FA E106                       	smpsAlterNote       $06
000953FC BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095400 E107                       	smpsAlterNote       $07
00095402 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00095406 E106                       	smpsAlterNote       $06
00095408 BD02                       	dc.b	nC5, $02
0009540A E10C                       	smpsAlterNote       $0C
0009540C BB02                       	dc.b	nBb4, $02
0009540E E106                       	smpsAlterNote       $06
00095410 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095414 E10C                       	smpsAlterNote       $0C
00095416 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009541A E10B                       	smpsAlterNote       $0B
0009541C BA02                       	dc.b	nA4, $02
0009541E E10C                       	smpsAlterNote       $0C
00095420 BB02                       	dc.b	nBb4, $02
00095422 E10B                       	smpsAlterNote       $0B
00095424 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009542E E108                       	smpsAlterNote       $08
00095430 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00095438 E107                       	smpsAlterNote       $07
0009543A BE02                       	dc.b	nCs5, $02
0009543C E10B                       	smpsAlterNote       $0B
0009543E BA02                       	dc.b	nA4, $02
00095440 E109                       	smpsAlterNote       $09
00095442 B802 8001                  	dc.b	nG4, $02, nRst, $01
00095446 E108                       	smpsAlterNote       $08
00095448 B501 8001                  	dc.b	nE4, $01, nRst, $01
0009544C E10B                       	smpsAlterNote       $0B
0009544E AE02                       	dc.b	nA3, $02
00095450 E10C                       	smpsAlterNote       $0C
00095452 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0009545E E10B                       	smpsAlterNote       $0B
00095460 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095468 E107                       	smpsAlterNote       $07
0009546A A706 8001                  	dc.b	nD3, $06, nRst, $01
0009546E E10B                       	smpsAlterNote       $0B
00095470 A203                       	dc.b	nA2, $03
00095472 E109                       	smpsAlterNote       $09
00095474 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00095478 E108                       	smpsAlterNote       $08
0009547A A906 8001                  	dc.b	nE3, $06, nRst, $01
0009547E E107                       	smpsAlterNote       $07
00095480 A702 8001                  	dc.b	nD3, $02, nRst, $01
00095484 E106                       	smpsAlterNote       $06
00095486 A503                       	dc.b	nC3, $03
00095488 E10C                       	smpsAlterNote       $0C
0009548A A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095490 E107                       	smpsAlterNote       $07
00095492 B20D                       	dc.b	nCs4, $0D
00095494 E104                       	smpsAlterNote       $04
00095496 E701                       	dc.b	smpsNoAttack, $01
00095498 E100                       	smpsAlterNote       $00
0009549A E701                       	dc.b	smpsNoAttack, $01
0009549C E104                       	smpsAlterNote       $04
0009549E E701                       	dc.b	smpsNoAttack, $01
000954A0 E10A                       	smpsAlterNote       $0A
000954A2 E701                       	dc.b	smpsNoAttack, $01
000954A4 E10B                       	smpsAlterNote       $0B
000954A6 E701                       	dc.b	smpsNoAttack, $01
000954A8 E107                       	smpsAlterNote       $07
000954AA E701                       	dc.b	smpsNoAttack, $01
000954AC E101                       	smpsAlterNote       $01
000954AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954B2 E104                       	smpsAlterNote       $04
000954B4 E701                       	dc.b	smpsNoAttack, $01
000954B6 E10A                       	smpsAlterNote       $0A
000954B8 E701                       	dc.b	smpsNoAttack, $01
000954BA E10B                       	smpsAlterNote       $0B
000954BC 8001                       	dc.b	nRst, $01
000954BE E107                       	smpsAlterNote       $07
000954C0 B30D                       	dc.b	nD4, $0D
000954C2 E104                       	smpsAlterNote       $04
000954C4 E701                       	dc.b	smpsNoAttack, $01
000954C6 E100                       	smpsAlterNote       $00
000954C8 E701                       	dc.b	smpsNoAttack, $01
000954CA E104                       	smpsAlterNote       $04
000954CC E701                       	dc.b	smpsNoAttack, $01
000954CE E10A                       	smpsAlterNote       $0A
000954D0 E701                       	dc.b	smpsNoAttack, $01
000954D2 E10B                       	smpsAlterNote       $0B
000954D4 E701                       	dc.b	smpsNoAttack, $01
000954D6 E107                       	smpsAlterNote       $07
000954D8 E701                       	dc.b	smpsNoAttack, $01
000954DA E101                       	smpsAlterNote       $01
000954DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954E0 E104                       	smpsAlterNote       $04
000954E2 E701                       	dc.b	smpsNoAttack, $01
000954E4 E10A                       	smpsAlterNote       $0A
000954E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954EA E104                       	smpsAlterNote       $04
000954EC E701                       	dc.b	smpsNoAttack, $01
000954EE E101                       	smpsAlterNote       $01
000954F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954F4 E107                       	smpsAlterNote       $07
000954F6 E701                       	dc.b	smpsNoAttack, $01
000954F8 E10B                       	smpsAlterNote       $0B
000954FA E701                       	dc.b	smpsNoAttack, $01
000954FC E10A                       	smpsAlterNote       $0A
000954FE E701                       	dc.b	smpsNoAttack, $01
00095500 E107                       	smpsAlterNote       $07
00095502 8001                       	dc.b	nRst, $01
00095504 E108                       	smpsAlterNote       $08
00095506 B50D                       	dc.b	nE4, $0D
00095508 E102                       	smpsAlterNote       $02
0009550A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009550E E105                       	smpsAlterNote       $05
00095510 E701                       	dc.b	smpsNoAttack, $01
00095512 E10B                       	smpsAlterNote       $0B
00095514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095518 E105                       	smpsAlterNote       $05
0009551A E701                       	dc.b	smpsNoAttack, $01
0009551C E102                       	smpsAlterNote       $02
0009551E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095522 E108                       	smpsAlterNote       $08
00095524 E701                       	dc.b	smpsNoAttack, $01
00095526 E10C                       	smpsAlterNote       $0C
00095528 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009552C E107                       	smpsAlterNote       $07
0009552E B30D                       	dc.b	nD4, $0D
00095530 E101                       	smpsAlterNote       $01
00095532 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095536 E104                       	smpsAlterNote       $04
00095538 E701                       	dc.b	smpsNoAttack, $01
0009553A E10A                       	smpsAlterNote       $0A
0009553C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095540 E104                       	smpsAlterNote       $04
00095542 E701                       	dc.b	smpsNoAttack, $01
00095544 E101                       	smpsAlterNote       $01
00095546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009554A E107                       	smpsAlterNote       $07
0009554C E701                       	dc.b	smpsNoAttack, $01
0009554E E10B                       	smpsAlterNote       $0B
00095550 E701                       	dc.b	smpsNoAttack, $01
00095552 E10A                       	smpsAlterNote       $0A
00095554 E701                       	dc.b	smpsNoAttack, $01
00095556 E104                       	smpsAlterNote       $04
00095558 E701                       	dc.b	smpsNoAttack, $01
0009555A E100                       	smpsAlterNote       $00
0009555C E701                       	dc.b	smpsNoAttack, $01
0009555E E104                       	smpsAlterNote       $04
00095560 E701                       	dc.b	smpsNoAttack, $01
00095562 E107                       	smpsAlterNote       $07
00095564 E701                       	dc.b	smpsNoAttack, $01
00095566 E10B                       	smpsAlterNote       $0B
00095568 E701                       	dc.b	smpsNoAttack, $01
0009556A E107                       	smpsAlterNote       $07
0009556C E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00095570 E101                       	smpsAlterNote       $01
00095572 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095576 E107                       	smpsAlterNote       $07
00095578 E701                       	dc.b	smpsNoAttack, $01
0009557A E10A                       	smpsAlterNote       $0A
0009557C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095580 E104                       	smpsAlterNote       $04
00095582 E701                       	dc.b	smpsNoAttack, $01
00095584 E100                       	smpsAlterNote       $00
00095586 E701                       	dc.b	smpsNoAttack, $01
00095588 E101                       	smpsAlterNote       $01
0009558A E701                       	dc.b	smpsNoAttack, $01
0009558C E107                       	smpsAlterNote       $07
0009558E E701                       	dc.b	smpsNoAttack, $01
00095590 E10B                       	smpsAlterNote       $0B
00095592 E701                       	dc.b	smpsNoAttack, $01
00095594 E107                       	smpsAlterNote       $07
00095596 B30E                       	dc.b	nD4, $0E
00095598 E101                       	smpsAlterNote       $01
0009559A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009559E E107                       	smpsAlterNote       $07
000955A0 E701                       	dc.b	smpsNoAttack, $01
000955A2 E10A                       	smpsAlterNote       $0A
000955A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955A8 E104                       	smpsAlterNote       $04
000955AA E701                       	dc.b	smpsNoAttack, $01
000955AC E100                       	smpsAlterNote       $00
000955AE E701                       	dc.b	smpsNoAttack, $01
000955B0 E101                       	smpsAlterNote       $01
000955B2 E701                       	dc.b	smpsNoAttack, $01
000955B4 E107                       	smpsAlterNote       $07
000955B6 E701                       	dc.b	smpsNoAttack, $01
000955B8 E10B                       	smpsAlterNote       $0B
000955BA E701                       	dc.b	smpsNoAttack, $01
000955BC E107                       	smpsAlterNote       $07
000955BE E701                       	dc.b	smpsNoAttack, $01
000955C0 E104                       	smpsAlterNote       $04
000955C2 E701                       	dc.b	smpsNoAttack, $01
000955C4 E100                       	smpsAlterNote       $00
000955C6 E701                       	dc.b	smpsNoAttack, $01
000955C8 E104                       	smpsAlterNote       $04
000955CA E701                       	dc.b	smpsNoAttack, $01
000955CC E10A                       	smpsAlterNote       $0A
000955CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955D2 E107                       	smpsAlterNote       $07
000955D4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000955D8 E104                       	smpsAlterNote       $04
000955DA E701                       	dc.b	smpsNoAttack, $01
000955DC E100                       	smpsAlterNote       $00
000955DE E701                       	dc.b	smpsNoAttack, $01
000955E0 E101                       	smpsAlterNote       $01
000955E2 E701                       	dc.b	smpsNoAttack, $01
000955E4 E107                       	smpsAlterNote       $07
000955E6 E701                       	dc.b	smpsNoAttack, $01
000955E8 E10B                       	smpsAlterNote       $0B
000955EA E701                       	dc.b	smpsNoAttack, $01
000955EC E107                       	smpsAlterNote       $07
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E104                       	smpsAlterNote       $04
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E100                       	smpsAlterNote       $00
000955F6 E701                       	dc.b	smpsNoAttack, $01
000955F8 E104                       	smpsAlterNote       $04
000955FA E701                       	dc.b	smpsNoAttack, $01
000955FC E10A                       	smpsAlterNote       $0A
000955FE E701                       	dc.b	smpsNoAttack, $01
00095600 E10B                       	smpsAlterNote       $0B
00095602 E701                       	dc.b	smpsNoAttack, $01
00095606 E6FF                       	smpsAlterVol        $FF
00095608 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00095614 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0009561C E109                       	smpsAlterNote       $09
0009561E E601                       	smpsAlterVol        $01
00095620 B60D                       	dc.b	nF4, $0D
00095622 E106                       	smpsAlterNote       $06
00095624 E701                       	dc.b	smpsNoAttack, $01
00095626 E102                       	smpsAlterNote       $02
00095628 E701                       	dc.b	smpsNoAttack, $01
0009562A E106                       	smpsAlterNote       $06
0009562C E701                       	dc.b	smpsNoAttack, $01
0009562E E109                       	smpsAlterNote       $09
00095630 E701                       	dc.b	smpsNoAttack, $01
00095632 E10D                       	smpsAlterNote       $0D
00095634 E701                       	dc.b	smpsNoAttack, $01
00095636 E109                       	smpsAlterNote       $09
00095638 E701                       	dc.b	smpsNoAttack, $01
0009563A E103                       	smpsAlterNote       $03
0009563C E701                       	dc.b	smpsNoAttack, $01
0009563E E102                       	smpsAlterNote       $02
00095640 E701                       	dc.b	smpsNoAttack, $01
00095642 E106                       	smpsAlterNote       $06
00095644 E701                       	dc.b	smpsNoAttack, $01
00095646 E10C                       	smpsAlterNote       $0C
00095648 E701                       	dc.b	smpsNoAttack, $01
0009564A E10D                       	smpsAlterNote       $0D
0009564C 8001                       	dc.b	nRst, $01
0009564E E109                       	smpsAlterNote       $09
00095650 B80D                       	dc.b	nG4, $0D
00095652 E106                       	smpsAlterNote       $06
00095654 E701                       	dc.b	smpsNoAttack, $01
00095656 E102                       	smpsAlterNote       $02
00095658 E701                       	dc.b	smpsNoAttack, $01
0009565A E106                       	smpsAlterNote       $06
0009565C E701                       	dc.b	smpsNoAttack, $01
0009565E E109                       	smpsAlterNote       $09
00095660 E701                       	dc.b	smpsNoAttack, $01
00095662 E10D                       	smpsAlterNote       $0D
00095664 E701                       	dc.b	smpsNoAttack, $01
00095666 E109                       	smpsAlterNote       $09
00095668 E701                       	dc.b	smpsNoAttack, $01
0009566A E103                       	smpsAlterNote       $03
0009566C E701                       	dc.b	smpsNoAttack, $01
0009566E E102                       	smpsAlterNote       $02
00095670 E701                       	dc.b	smpsNoAttack, $01
00095672 E106                       	smpsAlterNote       $06
00095674 E701                       	dc.b	smpsNoAttack, $01
00095676 E10C                       	smpsAlterNote       $0C
00095678 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009567C E106                       	smpsAlterNote       $06
0009567E E701                       	dc.b	smpsNoAttack, $01
00095680 E103                       	smpsAlterNote       $03
00095682 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095686 E109                       	smpsAlterNote       $09
00095688 E701                       	dc.b	smpsNoAttack, $01
0009568A E10D                       	smpsAlterNote       $0D
0009568C E701                       	dc.b	smpsNoAttack, $01
0009568E E10C                       	smpsAlterNote       $0C
00095690 E701                       	dc.b	smpsNoAttack, $01
00095692 E109                       	smpsAlterNote       $09
00095694 8001                       	dc.b	nRst, $01
00095696 E10B                       	smpsAlterNote       $0B
00095698 BA0D                       	dc.b	nA4, $0D
0009569A E105                       	smpsAlterNote       $05
0009569C E701                       	dc.b	smpsNoAttack, $01
0009569E E104                       	smpsAlterNote       $04
000956A0 E701                       	dc.b	smpsNoAttack, $01
000956A2 E108                       	smpsAlterNote       $08
000956A4 E701                       	dc.b	smpsNoAttack, $01
000956A6 E10E                       	smpsAlterNote       $0E
000956A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956AC E10B                       	smpsAlterNote       $0B
000956AE E701                       	dc.b	smpsNoAttack, $01
000956B0 E105                       	smpsAlterNote       $05
000956B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956B6 E10B                       	smpsAlterNote       $0B
000956B8 E701                       	dc.b	smpsNoAttack, $01
000956BA E10E                       	smpsAlterNote       $0E
000956BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956C0 E108                       	smpsAlterNote       $08
000956C2 E701                       	dc.b	smpsNoAttack, $01
000956C4 E104                       	smpsAlterNote       $04
000956C6 E701                       	dc.b	smpsNoAttack, $01
000956C8 E105                       	smpsAlterNote       $05
000956CA E701                       	dc.b	smpsNoAttack, $01
000956CC E10B                       	smpsAlterNote       $0B
000956CE E701                       	dc.b	smpsNoAttack, $01
000956D0 E10F                       	smpsAlterNote       $0F
000956D2 E701                       	dc.b	smpsNoAttack, $01
000956D4 E10B                       	smpsAlterNote       $0B
000956D6 E701                       	dc.b	smpsNoAttack, $01
000956D8 E108                       	smpsAlterNote       $08
000956DA E701                       	dc.b	smpsNoAttack, $01
000956DC E104                       	smpsAlterNote       $04
000956DE E701                       	dc.b	smpsNoAttack, $01
000956E0 E108                       	smpsAlterNote       $08
000956E2 E701                       	dc.b	smpsNoAttack, $01
000956E4 E10E                       	smpsAlterNote       $0E
000956E6 E701                       	dc.b	smpsNoAttack, $01
000956E8 E10F                       	smpsAlterNote       $0F
000956EA E701                       	dc.b	smpsNoAttack, $01
000956EC E10B                       	smpsAlterNote       $0B
000956EE E701                       	dc.b	smpsNoAttack, $01
000956F0 E105                       	smpsAlterNote       $05
000956F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F6 E108                       	smpsAlterNote       $08
000956F8 E701                       	dc.b	smpsNoAttack, $01
000956FA E10E                       	smpsAlterNote       $0E
000956FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095700 E108                       	smpsAlterNote       $08
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E105                       	smpsAlterNote       $05
00095706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009570A E108                       	smpsAlterNote       $08
0009570C B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095710 E109                       	smpsAlterNote       $09
00095712 B60D                       	dc.b	nF4, $0D
00095714 E103                       	smpsAlterNote       $03
00095716 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009571A E106                       	smpsAlterNote       $06
0009571C E701                       	dc.b	smpsNoAttack, $01
0009571E E10C                       	smpsAlterNote       $0C
00095720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095724 E106                       	smpsAlterNote       $06
00095726 E701                       	dc.b	smpsNoAttack, $01
00095728 E103                       	smpsAlterNote       $03
0009572A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009572E E109                       	smpsAlterNote       $09
00095730 E701                       	dc.b	smpsNoAttack, $01
00095732 E10D                       	smpsAlterNote       $0D
00095734 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095738 E109                       	smpsAlterNote       $09
0009573A B80D                       	dc.b	nG4, $0D
0009573C E103                       	smpsAlterNote       $03
0009573E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095742 E109                       	smpsAlterNote       $09
00095744 E701                       	dc.b	smpsNoAttack, $01
00095746 E10C                       	smpsAlterNote       $0C
00095748 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009574C E106                       	smpsAlterNote       $06
0009574E E701                       	dc.b	smpsNoAttack, $01
00095750 E102                       	smpsAlterNote       $02
00095752 E701                       	dc.b	smpsNoAttack, $01
00095754 E103                       	smpsAlterNote       $03
00095756 E701                       	dc.b	smpsNoAttack, $01
00095758 E109                       	smpsAlterNote       $09
0009575A E701                       	dc.b	smpsNoAttack, $01
0009575C E10D                       	smpsAlterNote       $0D
0009575E E701                       	dc.b	smpsNoAttack, $01
00095760 E109                       	smpsAlterNote       $09
00095762 E701                       	dc.b	smpsNoAttack, $01
00095764 E106                       	smpsAlterNote       $06
00095766 E701                       	dc.b	smpsNoAttack, $01
00095768 E102                       	smpsAlterNote       $02
0009576A E701                       	dc.b	smpsNoAttack, $01
0009576C E106                       	smpsAlterNote       $06
0009576E E701                       	dc.b	smpsNoAttack, $01
00095770 E10C                       	smpsAlterNote       $0C
00095772 E701                       	dc.b	smpsNoAttack, $01
00095774 E10D                       	smpsAlterNote       $0D
00095776 E701                       	dc.b	smpsNoAttack, $01
00095778 E109                       	smpsAlterNote       $09
0009577A E701                       	dc.b	smpsNoAttack, $01
0009577C E10B                       	smpsAlterNote       $0B
0009577E BA0D                       	dc.b	nA4, $0D
00095780 E108                       	smpsAlterNote       $08
00095782 E701                       	dc.b	smpsNoAttack, $01
00095784 E105                       	smpsAlterNote       $05
00095786 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009578A E10B                       	smpsAlterNote       $0B
0009578C E701                       	dc.b	smpsNoAttack, $01
0009578E E10F                       	smpsAlterNote       $0F
00095790 E701                       	dc.b	smpsNoAttack, $01
00095792 E10E                       	smpsAlterNote       $0E
00095794 E701                       	dc.b	smpsNoAttack, $01
00095796 E108                       	smpsAlterNote       $08
00095798 E701                       	dc.b	smpsNoAttack, $01
0009579A E104                       	smpsAlterNote       $04
0009579C E701                       	dc.b	smpsNoAttack, $01
0009579E E108                       	smpsAlterNote       $08
000957A0 E701                       	dc.b	smpsNoAttack, $01
000957A2 E10B                       	smpsAlterNote       $0B
000957A4 E701                       	dc.b	smpsNoAttack, $01
000957A6 E10F                       	smpsAlterNote       $0F
000957A8 E701                       	dc.b	smpsNoAttack, $01
000957AA E10B                       	smpsAlterNote       $0B
000957AC E701                       	dc.b	smpsNoAttack, $01
000957AE E105                       	smpsAlterNote       $05
000957B0 E701                       	dc.b	smpsNoAttack, $01
000957B2 E104                       	smpsAlterNote       $04
000957B4 E701                       	dc.b	smpsNoAttack, $01
000957B6 E108                       	smpsAlterNote       $08
000957B8 E701                       	dc.b	smpsNoAttack, $01
000957BA E10E                       	smpsAlterNote       $0E
000957BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957C0 E10B                       	smpsAlterNote       $0B
000957C2 E701                       	dc.b	smpsNoAttack, $01
000957C4 E105                       	smpsAlterNote       $05
000957C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957CA E10B                       	smpsAlterNote       $0B
000957CC E701                       	dc.b	smpsNoAttack, $01
000957CE E10E                       	smpsAlterNote       $0E
000957D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957D4 E108                       	smpsAlterNote       $08
000957D6 E701                       	dc.b	smpsNoAttack, $01
000957D8 E105                       	smpsAlterNote       $05
000957DA 8001                       	dc.b	nRst, $01
000957DC E109                       	smpsAlterNote       $09
000957DE B60A                       	dc.b	nF4, $0A
000957E0 E108                       	smpsAlterNote       $08
000957E2 B507                       	dc.b	nE4, $07
000957E4 E107                       	smpsAlterNote       $07
000957E6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000957EA E108                       	smpsAlterNote       $08
000957EC B503                       	dc.b	nE4, $03
000957EE E109                       	smpsAlterNote       $09
000957F0 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000957F8 E10B                       	smpsAlterNote       $0B
000957FA BA0D                       	dc.b	nA4, $0D
000957FC E108                       	smpsAlterNote       $08
000957FE E701                       	dc.b	smpsNoAttack, $01
00095800 E104                       	smpsAlterNote       $04
00095802 E701                       	dc.b	smpsNoAttack, $01
00095804 E108                       	smpsAlterNote       $08
00095806 E701                       	dc.b	smpsNoAttack, $01
00095808 E10B                       	smpsAlterNote       $0B
0009580A E701                       	dc.b	smpsNoAttack, $01
0009580C E10F                       	smpsAlterNote       $0F
0009580E E701                       	dc.b	smpsNoAttack, $01
00095810 E10B                       	smpsAlterNote       $0B
00095812 E701                       	dc.b	smpsNoAttack, $01
00095814 E105                       	smpsAlterNote       $05
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E104                       	smpsAlterNote       $04
0009581A E701                       	dc.b	smpsNoAttack, $01
0009581C E108                       	smpsAlterNote       $08
0009581E E701                       	dc.b	smpsNoAttack, $01
00095820 E10E                       	smpsAlterNote       $0E
00095822 E701                       	dc.b	smpsNoAttack, $01
00095824 E10F                       	smpsAlterNote       $0F
00095826 8001                       	dc.b	nRst, $01
00095828 E109                       	smpsAlterNote       $09
0009582A C20D                       	dc.b	nF5, $0D
0009582C E106                       	smpsAlterNote       $06
0009582E E701                       	dc.b	smpsNoAttack, $01
00095830 E102                       	smpsAlterNote       $02
00095832 E701                       	dc.b	smpsNoAttack, $01
00095834 E106                       	smpsAlterNote       $06
00095836 E701                       	dc.b	smpsNoAttack, $01
00095838 E109                       	smpsAlterNote       $09
0009583A E701                       	dc.b	smpsNoAttack, $01
0009583C E10D                       	smpsAlterNote       $0D
0009583E E701                       	dc.b	smpsNoAttack, $01
00095840 E109                       	smpsAlterNote       $09
00095842 E701                       	dc.b	smpsNoAttack, $01
00095844 E103                       	smpsAlterNote       $03
00095846 E701                       	dc.b	smpsNoAttack, $01
00095848 E102                       	smpsAlterNote       $02
0009584A E701                       	dc.b	smpsNoAttack, $01
0009584C E106                       	smpsAlterNote       $06
0009584E E701                       	dc.b	smpsNoAttack, $01
00095850 E10C                       	smpsAlterNote       $0C
00095852 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095856 E109                       	smpsAlterNote       $09
00095858 E701                       	dc.b	smpsNoAttack, $01
0009585A E103                       	smpsAlterNote       $03
0009585C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095860 E109                       	smpsAlterNote       $09
00095862 E701                       	dc.b	smpsNoAttack, $01
00095864 E10C                       	smpsAlterNote       $0C
00095866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009586A E106                       	smpsAlterNote       $06
0009586C E701                       	dc.b	smpsNoAttack, $01
0009586E E102                       	smpsAlterNote       $02
00095870 E701                       	dc.b	smpsNoAttack, $01
00095872 E103                       	smpsAlterNote       $03
00095874 E701                       	dc.b	smpsNoAttack, $01
00095876 E109                       	smpsAlterNote       $09
00095878 E701                       	dc.b	smpsNoAttack, $01
0009587A E10D                       	smpsAlterNote       $0D
0009587C E701                       	dc.b	smpsNoAttack, $01
0009587E E109                       	smpsAlterNote       $09
00095880 E701                       	dc.b	smpsNoAttack, $01
00095882 E106                       	smpsAlterNote       $06
00095884 E701                       	dc.b	smpsNoAttack, $01
00095886 E102                       	smpsAlterNote       $02
00095888 E701                       	dc.b	smpsNoAttack, $01
0009588A E106                       	smpsAlterNote       $06
0009588C E701                       	dc.b	smpsNoAttack, $01
0009588E E10C                       	smpsAlterNote       $0C
00095890 E701                       	dc.b	smpsNoAttack, $01
00095892 E10D                       	smpsAlterNote       $0D
00095894 E701                       	dc.b	smpsNoAttack, $01
00095896 E109                       	smpsAlterNote       $09
00095898 E701                       	dc.b	smpsNoAttack, $01
0009589A E103                       	smpsAlterNote       $03
0009589C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958A0 E106                       	smpsAlterNote       $06
000958A2 E701                       	dc.b	smpsNoAttack, $01
000958A4 E10C                       	smpsAlterNote       $0C
000958A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958AA E106                       	smpsAlterNote       $06
000958AC E701                       	dc.b	smpsNoAttack, $01
000958AE E103                       	smpsAlterNote       $03
000958B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958B4 E109                       	smpsAlterNote       $09
000958B6 E701                       	dc.b	smpsNoAttack, $01
000958B8 E10D                       	smpsAlterNote       $0D
000958BA E701                       	dc.b	smpsNoAttack, $01
000958BC E10C                       	smpsAlterNote       $0C
000958BE E701                       	dc.b	smpsNoAttack, $01
000958C0 E106                       	smpsAlterNote       $06
000958C2 E701                       	dc.b	smpsNoAttack, $01
000958C4 E103                       	smpsAlterNote       $03
000958C6 8001                       	dc.b	nRst, $01
000958C8 E109                       	smpsAlterNote       $09
000958CA C206 8001                  	dc.b	nF5, $06, nRst, $01
000958D0 E10C                       	smpsAlterNote       $0C
000958D2 E601                       	smpsAlterVol        $01
000958D4 BB0D                       	dc.b	nBb4, $0D
000958D6 E106                       	smpsAlterNote       $06
000958D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958DC E109                       	smpsAlterNote       $09
000958DE E701                       	dc.b	smpsNoAttack, $01
000958E0 E10F                       	smpsAlterNote       $0F
000958E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958E6 E109                       	smpsAlterNote       $09
000958E8 E701                       	dc.b	smpsNoAttack, $01
000958EA E106                       	smpsAlterNote       $06
000958EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958F0 E10C                       	smpsAlterNote       $0C
000958F2 E701                       	dc.b	smpsNoAttack, $01
000958F4 E110                       	smpsAlterNote       $10
000958F6 E701                       	dc.b	smpsNoAttack, $01
000958F8 E10F                       	smpsAlterNote       $0F
000958FA E701                       	dc.b	smpsNoAttack, $01
000958FC E109                       	smpsAlterNote       $09
000958FE E701                       	dc.b	smpsNoAttack, $01
00095900 E105                       	smpsAlterNote       $05
00095902 E701                       	dc.b	smpsNoAttack, $01
00095904 E106                       	smpsAlterNote       $06
00095906 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009590A E103                       	smpsAlterNote       $03
0009590C E701                       	dc.b	smpsNoAttack, $01
0009590E E1FF                       	smpsAlterNote       $FF
00095910 E701                       	dc.b	smpsNoAttack, $01
00095912 E103                       	smpsAlterNote       $03
00095914 E701                       	dc.b	smpsNoAttack, $01
00095916 E106                       	smpsAlterNote       $06
00095918 E701                       	dc.b	smpsNoAttack, $01
0009591A E10A                       	smpsAlterNote       $0A
0009591C E701                       	dc.b	smpsNoAttack, $01
0009591E E106                       	smpsAlterNote       $06
00095920 E701                       	dc.b	smpsNoAttack, $01
00095922 E100                       	smpsAlterNote       $00
00095924 E701                       	dc.b	smpsNoAttack, $01
00095926 E1FF                       	smpsAlterNote       $FF
00095928 E701                       	dc.b	smpsNoAttack, $01
0009592A E103                       	smpsAlterNote       $03
0009592C E701                       	dc.b	smpsNoAttack, $01
0009592E E109                       	smpsAlterNote       $09
00095930 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095934 E106                       	smpsAlterNote       $06
00095936 E701                       	dc.b	smpsNoAttack, $01
00095938 E100                       	smpsAlterNote       $00
0009593A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009593E E107                       	smpsAlterNote       $07
00095940 BF0E                       	dc.b	nD5, $0E
00095942 E101                       	smpsAlterNote       $01
00095944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095948 E107                       	smpsAlterNote       $07
0009594A E701                       	dc.b	smpsNoAttack, $01
0009594C E10A                       	smpsAlterNote       $0A
0009594E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095952 E104                       	smpsAlterNote       $04
00095954 E701                       	dc.b	smpsNoAttack, $01
00095956 E100                       	smpsAlterNote       $00
00095958 E701                       	dc.b	smpsNoAttack, $01
0009595A E101                       	smpsAlterNote       $01
0009595C E701                       	dc.b	smpsNoAttack, $01
0009595E E107                       	smpsAlterNote       $07
00095960 E701                       	dc.b	smpsNoAttack, $01
00095962 E10B                       	smpsAlterNote       $0B
00095964 E701                       	dc.b	smpsNoAttack, $01
00095966 E107                       	smpsAlterNote       $07
00095968 E701                       	dc.b	smpsNoAttack, $01
0009596A E104                       	smpsAlterNote       $04
0009596C E701                       	dc.b	smpsNoAttack, $01
0009596E E100                       	smpsAlterNote       $00
00095970 E701                       	dc.b	smpsNoAttack, $01
00095972 E101                       	smpsAlterNote       $01
00095974 8001                       	dc.b	nRst, $01
00095976 E108                       	smpsAlterNote       $08
00095978 C10C                       	dc.b	nE5, $0C
0009597A E109                       	smpsAlterNote       $09
0009597C C201 8001                  	dc.b	nF5, $01, nRst, $01
00095980 E10A                       	smpsAlterNote       $0A
00095982 8001                       	dc.b	nRst, $01
00095984 E109                       	smpsAlterNote       $09
00095986 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009598A E106                       	smpsAlterNote       $06
0009598C E701                       	dc.b	smpsNoAttack, $01
0009598E E102                       	smpsAlterNote       $02
00095990 E701                       	dc.b	smpsNoAttack, $01
00095992 E103                       	smpsAlterNote       $03
00095994 E701                       	dc.b	smpsNoAttack, $01
00095996 E109                       	smpsAlterNote       $09
00095998 E701                       	dc.b	smpsNoAttack, $01
0009599A E10D                       	smpsAlterNote       $0D
0009599C E701                       	dc.b	smpsNoAttack, $01
0009599E E109                       	smpsAlterNote       $09
000959A0 E701                       	dc.b	smpsNoAttack, $01
000959A2 E106                       	smpsAlterNote       $06
000959A4 E701                       	dc.b	smpsNoAttack, $01
000959A6 E102                       	smpsAlterNote       $02
000959A8 E701                       	dc.b	smpsNoAttack, $01
000959AA E106                       	smpsAlterNote       $06
000959AC E701                       	dc.b	smpsNoAttack, $01
000959AE E10C                       	smpsAlterNote       $0C
000959B0 E701                       	dc.b	smpsNoAttack, $01
000959B2 E10D                       	smpsAlterNote       $0D
000959B4 E701                       	dc.b	smpsNoAttack, $01
000959B6 E109                       	smpsAlterNote       $09
000959B8 C40D                       	dc.b	nG5, $0D
000959BA E106                       	smpsAlterNote       $06
000959BC E701                       	dc.b	smpsNoAttack, $01
000959BE E102                       	smpsAlterNote       $02
000959C0 E701                       	dc.b	smpsNoAttack, $01
000959C2 E103                       	smpsAlterNote       $03
000959C4 E701                       	dc.b	smpsNoAttack, $01
000959C6 E109                       	smpsAlterNote       $09
000959C8 E701                       	dc.b	smpsNoAttack, $01
000959CA E108                       	smpsAlterNote       $08
000959CC C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000959D8 E109                       	smpsAlterNote       $09
000959DA C20D                       	dc.b	nF5, $0D
000959DC E106                       	smpsAlterNote       $06
000959DE E701                       	dc.b	smpsNoAttack, $01
000959E0 E102                       	smpsAlterNote       $02
000959E2 E701                       	dc.b	smpsNoAttack, $01
000959E4 E106                       	smpsAlterNote       $06
000959E6 E701                       	dc.b	smpsNoAttack, $01
000959E8 E109                       	smpsAlterNote       $09
000959EA E701                       	dc.b	smpsNoAttack, $01
000959EC E10D                       	smpsAlterNote       $0D
000959EE E701                       	dc.b	smpsNoAttack, $01
000959F0 E109                       	smpsAlterNote       $09
000959F2 E701                       	dc.b	smpsNoAttack, $01
000959F4 E103                       	smpsAlterNote       $03
000959F6 E701                       	dc.b	smpsNoAttack, $01
000959F8 E102                       	smpsAlterNote       $02
000959FA E701                       	dc.b	smpsNoAttack, $01
000959FC E106                       	smpsAlterNote       $06
000959FE E701                       	dc.b	smpsNoAttack, $01
00095A00 E10C                       	smpsAlterNote       $0C
00095A02 E701                       	dc.b	smpsNoAttack, $01
00095A04 E10D                       	smpsAlterNote       $0D
00095A06 8001                       	dc.b	nRst, $01
00095A08 E112                       	smpsAlterNote       $12
00095A0A C401                       	dc.b	nG5, $01
00095A0C E1EB                       	smpsAlterNote       $EB
00095A0E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095A11 E1FD                       	smpsAlterNote       $FD
00095A13 E701                       	dc.b	smpsNoAttack, $01
00095A15 E10F                       	smpsAlterNote       $0F
00095A17 E701                       	dc.b	smpsNoAttack, $01
00095A19 E118                       	smpsAlterNote       $18
00095A1B E701                       	dc.b	smpsNoAttack, $01
00095A1D E1ED                       	smpsAlterNote       $ED
00095A1F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095A22 E1FF                       	smpsAlterNote       $FF
00095A24 E701                       	dc.b	smpsNoAttack, $01
00095A26 E10B                       	smpsAlterNote       $0B
00095A28 E703                       	dc.b	smpsNoAttack, $03
00095A2A E109                       	smpsAlterNote       $09
00095A2C C407                       	dc.b	nG5, $07
00095A2E E108                       	smpsAlterNote       $08
00095A30 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00095A3C E109                       	smpsAlterNote       $09
00095A3E C20D                       	dc.b	nF5, $0D
00095A40 E103                       	smpsAlterNote       $03
00095A42 E701                       	dc.b	smpsNoAttack, $01
00095A44 E102                       	smpsAlterNote       $02
00095A46 E701                       	dc.b	smpsNoAttack, $01
00095A48 E106                       	smpsAlterNote       $06
00095A4A E701                       	dc.b	smpsNoAttack, $01
00095A4C E10C                       	smpsAlterNote       $0C
00095A4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A52 E109                       	smpsAlterNote       $09
00095A54 E701                       	dc.b	smpsNoAttack, $01
00095A56 E103                       	smpsAlterNote       $03
00095A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A5C E109                       	smpsAlterNote       $09
00095A5E E701                       	dc.b	smpsNoAttack, $01
00095A60 E10C                       	smpsAlterNote       $0C
00095A62 E701                       	dc.b	smpsNoAttack, $01
00095A64 E10D                       	smpsAlterNote       $0D
00095A66 8001                       	dc.b	nRst, $01
00095A68 E10B                       	smpsAlterNote       $0B
00095A6A C609 8001                  	dc.b	nA5, $09, nRst, $01
00095A6E E109                       	smpsAlterNote       $09
00095A70 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095A74 E108                       	smpsAlterNote       $08
00095A76 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095A82 8001                       	dc.b	nRst, $01
00095A84 E109                       	smpsAlterNote       $09
00095A86 C20D                       	dc.b	nF5, $0D
00095A88 E103                       	smpsAlterNote       $03
00095A8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A8E E106                       	smpsAlterNote       $06
00095A90 E701                       	dc.b	smpsNoAttack, $01
00095A92 E10C                       	smpsAlterNote       $0C
00095A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A98 E106                       	smpsAlterNote       $06
00095A9A E701                       	dc.b	smpsNoAttack, $01
00095A9C E103                       	smpsAlterNote       $03
00095A9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AA2 E109                       	smpsAlterNote       $09
00095AA4 E701                       	dc.b	smpsNoAttack, $01
00095AA6 E10D                       	smpsAlterNote       $0D
00095AA8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095AAE E108                       	smpsAlterNote       $08
00095AB0 E6FF                       	smpsAlterVol        $FF
00095AB2 A806                       	dc.b	nEb3, $06
00095AB4 E10C                       	smpsAlterNote       $0C
00095AB6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095ABA E108                       	smpsAlterNote       $08
00095ABC A803                       	dc.b	nEb3, $03
00095ABE E109                       	smpsAlterNote       $09
00095AC0 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095AC4 E10C                       	smpsAlterNote       $0C
00095AC6 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095AD0 E109                       	smpsAlterNote       $09
00095AD2 E602                       	smpsAlterVol        $02
00095AD4 B604                       	dc.b	nF4, $04
00095AD6 E602                       	smpsAlterVol        $02
00095AD8 F6F1 AA                    	smpsJump            music84_Jump02
00095ADB                            
00095ADB                            ; FM4 Data
00095ADB                            music84_FM4:
00095ADD E040                       	smpsPan             panRight, $00
00095ADF 8003                       	dc.b	nRst, $03
00095AE1 E10F                       	smpsAlterNote       $0F
00095AE3 C603 8008                  	dc.b	nA5, $03, nRst, $08
00095AE7 E10D                       	smpsAlterNote       $0D
00095AE9 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095AED E10C                       	smpsAlterNote       $0C
00095AEF C103 8004                  	dc.b	nE5, $03, nRst, $04
00095AF5 E6FE                       	smpsAlterVol        $FE
00095AF7 E110                       	smpsAlterNote       $10
00095AF9 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095AFD E10F                       	smpsAlterNote       $0F
00095AFF C602 8001                  	dc.b	nA5, $02, nRst, $01
00095B03 E10D                       	smpsAlterNote       $0D
00095B05 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095B0E E10C                       	smpsAlterNote       $0C
00095B10 C103                       	dc.b	nE5, $03
00095B12 E10A                       	smpsAlterNote       $0A
00095B14 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095B1A 03                         	dc.b	$03
00095B1B                            
00095B1B                            music84_Jump01:
00095B1B E10B                       	smpsAlterNote       $0B
00095B1D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095B21 E10C                       	smpsAlterNote       $0C
00095B23 C102 8001                  	dc.b	nE5, $02, nRst, $01
00095B27 E10D                       	smpsAlterNote       $0D
00095B29 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095B33 E10B                       	smpsAlterNote       $0B
00095B35 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095B39 E107                       	smpsAlterNote       $07
00095B3B E701                       	dc.b	smpsNoAttack, $01
00095B3D E103                       	smpsAlterNote       $03
00095B3F E701                       	dc.b	smpsNoAttack, $01
00095B41 E104                       	smpsAlterNote       $04
00095B43 E701                       	dc.b	smpsNoAttack, $01
00095B45 E10A                       	smpsAlterNote       $0A
00095B47 E701                       	dc.b	smpsNoAttack, $01
00095B49 E10E                       	smpsAlterNote       $0E
00095B4B E701                       	dc.b	smpsNoAttack, $01
00095B4D E10A                       	smpsAlterNote       $0A
00095B4F E701                       	dc.b	smpsNoAttack, $01
00095B51 E107                       	smpsAlterNote       $07
00095B53 E701                       	dc.b	smpsNoAttack, $01
00095B55 E104                       	smpsAlterNote       $04
00095B57 8001                       	dc.b	nRst, $01
00095B59 E110                       	smpsAlterNote       $10
00095B5B C703                       	dc.b	nBb5, $03
00095B5D E10F                       	smpsAlterNote       $0F
00095B5F C603 8001                  	dc.b	nA5, $03, nRst, $01
00095B63 E10D                       	smpsAlterNote       $0D
00095B65 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095B6B E10C                       	smpsAlterNote       $0C
00095B6D E701                       	dc.b	smpsNoAttack, $01
00095B6F E108                       	smpsAlterNote       $08
00095B71 E701                       	dc.b	smpsNoAttack, $01
00095B73 E10C                       	smpsAlterNote       $0C
00095B75 E701                       	dc.b	smpsNoAttack, $01
00095B77 E10F                       	smpsAlterNote       $0F
00095B79 E701                       	dc.b	smpsNoAttack, $01
00095B7B E113                       	smpsAlterNote       $13
00095B7D E701                       	dc.b	smpsNoAttack, $01
00095B7F E10F                       	smpsAlterNote       $0F
00095B81 E701                       	dc.b	smpsNoAttack, $01
00095B83 E109                       	smpsAlterNote       $09
00095B85 E701                       	dc.b	smpsNoAttack, $01
00095B87 E108                       	smpsAlterNote       $08
00095B89 E701                       	dc.b	smpsNoAttack, $01
00095B8B E10C                       	smpsAlterNote       $0C
00095B8D E701                       	dc.b	smpsNoAttack, $01
00095B8F E112                       	smpsAlterNote       $12
00095B91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B95 E10C                       	smpsAlterNote       $0C
00095B97 E701                       	dc.b	smpsNoAttack, $01
00095B99 E109                       	smpsAlterNote       $09
00095B9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B9F E10F                       	smpsAlterNote       $0F
00095BA1 E701                       	dc.b	smpsNoAttack, $01
00095BA3 E113                       	smpsAlterNote       $13
00095BA5 E701                       	dc.b	smpsNoAttack, $01
00095BA7 E112                       	smpsAlterNote       $12
00095BA9 E701                       	dc.b	smpsNoAttack, $01
00095BAB E10C                       	smpsAlterNote       $0C
00095BAD E701                       	dc.b	smpsNoAttack, $01
00095BAF E108                       	smpsAlterNote       $08
00095BB1 E701                       	dc.b	smpsNoAttack, $01
00095BB3 E10C                       	smpsAlterNote       $0C
00095BB5 E701                       	dc.b	smpsNoAttack, $01
00095BB7 E10F                       	smpsAlterNote       $0F
00095BB9 E701                       	dc.b	smpsNoAttack, $01
00095BBB E113                       	smpsAlterNote       $13
00095BBD E701                       	dc.b	smpsNoAttack, $01
00095BBF E10F                       	smpsAlterNote       $0F
00095BC1 E701                       	dc.b	smpsNoAttack, $01
00095BC3 E109                       	smpsAlterNote       $09
00095BC5 E701                       	dc.b	smpsNoAttack, $01
00095BC7 E108                       	smpsAlterNote       $08
00095BC9 E701                       	dc.b	smpsNoAttack, $01
00095BCB E10C                       	smpsAlterNote       $0C
00095BCD E701                       	dc.b	smpsNoAttack, $01
00095BCF E112                       	smpsAlterNote       $12
00095BD1 E701                       	dc.b	smpsNoAttack, $01
00095BD3 E113                       	smpsAlterNote       $13
00095BD5 800F                       	dc.b	nRst, $0F
00095BD7 E10B                       	smpsAlterNote       $0B
00095BD9 BF03                       	dc.b	nD5, $03
00095BDB E10C                       	smpsAlterNote       $0C
00095BDD C103 8001                  	dc.b	nE5, $03, nRst, $01
00095BE1 E10D                       	smpsAlterNote       $0D
00095BE3 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095BEB E10B                       	smpsAlterNote       $0B
00095BED BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095BF7 E110                       	smpsAlterNote       $10
00095BF9 C704                       	dc.b	nBb5, $04
00095BFB E10F                       	smpsAlterNote       $0F
00095BFD C604 8001                  	dc.b	nA5, $04, nRst, $01
00095C01 E10D                       	smpsAlterNote       $0D
00095C03 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095C09 E109                       	smpsAlterNote       $09
00095C0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C0F E10F                       	smpsAlterNote       $0F
00095C11 E701                       	dc.b	smpsNoAttack, $01
00095C13 E112                       	smpsAlterNote       $12
00095C15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C19 E10C                       	smpsAlterNote       $0C
00095C1B E701                       	dc.b	smpsNoAttack, $01
00095C1D E108                       	smpsAlterNote       $08
00095C1F E701                       	dc.b	smpsNoAttack, $01
00095C21 E109                       	smpsAlterNote       $09
00095C23 E701                       	dc.b	smpsNoAttack, $01
00095C25 E10F                       	smpsAlterNote       $0F
00095C27 E701                       	dc.b	smpsNoAttack, $01
00095C29 E113                       	smpsAlterNote       $13
00095C2B E701                       	dc.b	smpsNoAttack, $01
00095C2D E10F                       	smpsAlterNote       $0F
00095C2F E701                       	dc.b	smpsNoAttack, $01
00095C31 E10C                       	smpsAlterNote       $0C
00095C33 E701                       	dc.b	smpsNoAttack, $01
00095C35 E108                       	smpsAlterNote       $08
00095C37 E701                       	dc.b	smpsNoAttack, $01
00095C39 E10C                       	smpsAlterNote       $0C
00095C3B E701                       	dc.b	smpsNoAttack, $01
00095C3D E112                       	smpsAlterNote       $12
00095C3F E701                       	dc.b	smpsNoAttack, $01
00095C41 E113                       	smpsAlterNote       $13
00095C43 E701                       	dc.b	smpsNoAttack, $01
00095C45 E10F                       	smpsAlterNote       $0F
00095C47 E701                       	dc.b	smpsNoAttack, $01
00095C49 E109                       	smpsAlterNote       $09
00095C4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C4F E10C                       	smpsAlterNote       $0C
00095C51 E701                       	dc.b	smpsNoAttack, $01
00095C53 E112                       	smpsAlterNote       $12
00095C55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C59 E10C                       	smpsAlterNote       $0C
00095C5B E701                       	dc.b	smpsNoAttack, $01
00095C5D E109                       	smpsAlterNote       $09
00095C5F E701                       	dc.b	smpsNoAttack, $01
00095C61 E10D                       	smpsAlterNote       $0D
00095C63 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095C67 E10F                       	smpsAlterNote       $0F
00095C69 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095C73 E10D                       	smpsAlterNote       $0D
00095C75 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095C7B E10B                       	smpsAlterNote       $0B
00095C7D BF0D                       	dc.b	nD5, $0D
00095C7F E108                       	smpsAlterNote       $08
00095C81 E701                       	dc.b	smpsNoAttack, $01
00095C83 E104                       	smpsAlterNote       $04
00095C85 E701                       	dc.b	smpsNoAttack, $01
00095C87 E108                       	smpsAlterNote       $08
00095C89 E701                       	dc.b	smpsNoAttack, $01
00095C8B E10B                       	smpsAlterNote       $0B
00095C8D E701                       	dc.b	smpsNoAttack, $01
00095C8F E10F                       	smpsAlterNote       $0F
00095C91 E701                       	dc.b	smpsNoAttack, $01
00095C93 E10B                       	smpsAlterNote       $0B
00095C95 E701                       	dc.b	smpsNoAttack, $01
00095C97 E105                       	smpsAlterNote       $05
00095C99 E701                       	dc.b	smpsNoAttack, $01
00095C9B E104                       	smpsAlterNote       $04
00095C9D E701                       	dc.b	smpsNoAttack, $01
00095C9F E108                       	smpsAlterNote       $08
00095CA1 E701                       	dc.b	smpsNoAttack, $01
00095CA3 E10E                       	smpsAlterNote       $0E
00095CA5 E701                       	dc.b	smpsNoAttack, $01
00095CA7 E10F                       	smpsAlterNote       $0F
00095CA9 8001                       	dc.b	nRst, $01
00095CAB E10C                       	smpsAlterNote       $0C
00095CAD C101                       	dc.b	nE5, $01
00095CAF E10D                       	smpsAlterNote       $0D
00095CB1 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095CB7 E10F                       	smpsAlterNote       $0F
00095CB9 C606 8001                  	dc.b	nA5, $06, nRst, $01
00095CBD E10C                       	smpsAlterNote       $0C
00095CBF CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095CC3 E10D                       	smpsAlterNote       $0D
00095CC5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095CC9 E10C                       	smpsAlterNote       $0C
00095CCB CD03                       	dc.b	nE6, $03
00095CCD E10A                       	smpsAlterNote       $0A
00095CCF C903 8001                  	dc.b	nC6, $03, nRst, $01
00095CD3 E10D                       	smpsAlterNote       $0D
00095CD5 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095CDD E109                       	smpsAlterNote       $09
00095CDF E701                       	dc.b	smpsNoAttack, $01
00095CE1 E10D                       	smpsAlterNote       $0D
00095CE3 E701                       	dc.b	smpsNoAttack, $01
00095CE5 E110                       	smpsAlterNote       $10
00095CE7 E701                       	dc.b	smpsNoAttack, $01
00095CE9 E114                       	smpsAlterNote       $14
00095CEB E701                       	dc.b	smpsNoAttack, $01
00095CED E110                       	smpsAlterNote       $10
00095CEF E701                       	dc.b	smpsNoAttack, $01
00095CF1 E10A                       	smpsAlterNote       $0A
00095CF3 E701                       	dc.b	smpsNoAttack, $01
00095CF5 E109                       	smpsAlterNote       $09
00095CF7 E701                       	dc.b	smpsNoAttack, $01
00095CF9 E10D                       	smpsAlterNote       $0D
00095CFB E701                       	dc.b	smpsNoAttack, $01
00095CFD E113                       	smpsAlterNote       $13
00095CFF E701                       	dc.b	smpsNoAttack, $01
00095D01 E114                       	smpsAlterNote       $14
00095D03 8001                       	dc.b	nRst, $01
00095D05 E10F                       	smpsAlterNote       $0F
00095D07 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095D0D E10C                       	smpsAlterNote       $0C
00095D0F E701                       	dc.b	smpsNoAttack, $01
00095D11 E108                       	smpsAlterNote       $08
00095D13 E701                       	dc.b	smpsNoAttack, $01
00095D15 E10C                       	smpsAlterNote       $0C
00095D17 E701                       	dc.b	smpsNoAttack, $01
00095D19 E112                       	smpsAlterNote       $12
00095D1B E701                       	dc.b	smpsNoAttack, $01
00095D1D E113                       	smpsAlterNote       $13
00095D1F E701                       	dc.b	smpsNoAttack, $01
00095D21 E10F                       	smpsAlterNote       $0F
00095D23 E701                       	dc.b	smpsNoAttack, $01
00095D25 E109                       	smpsAlterNote       $09
00095D27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D2B E10C                       	smpsAlterNote       $0C
00095D2D E701                       	dc.b	smpsNoAttack, $01
00095D2F E112                       	smpsAlterNote       $12
00095D31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D35 E10C                       	smpsAlterNote       $0C
00095D37 E701                       	dc.b	smpsNoAttack, $01
00095D39 E109                       	smpsAlterNote       $09
00095D3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D3F E10F                       	smpsAlterNote       $0F
00095D41 E701                       	dc.b	smpsNoAttack, $01
00095D43 E113                       	smpsAlterNote       $13
00095D45 E701                       	dc.b	smpsNoAttack, $01
00095D47 E112                       	smpsAlterNote       $12
00095D49 E701                       	dc.b	smpsNoAttack, $01
00095D4B E10C                       	smpsAlterNote       $0C
00095D4D E701                       	dc.b	smpsNoAttack, $01
00095D4F E108                       	smpsAlterNote       $08
00095D51 E701                       	dc.b	smpsNoAttack, $01
00095D53 E10C                       	smpsAlterNote       $0C
00095D55 E701                       	dc.b	smpsNoAttack, $01
00095D57 E10F                       	smpsAlterNote       $0F
00095D59 E701                       	dc.b	smpsNoAttack, $01
00095D5B E113                       	smpsAlterNote       $13
00095D5D E701                       	dc.b	smpsNoAttack, $01
00095D5F E10F                       	smpsAlterNote       $0F
00095D61 E701                       	dc.b	smpsNoAttack, $01
00095D63 E109                       	smpsAlterNote       $09
00095D65 E701                       	dc.b	smpsNoAttack, $01
00095D67 E108                       	smpsAlterNote       $08
00095D69 E701                       	dc.b	smpsNoAttack, $01
00095D6B E10C                       	smpsAlterNote       $0C
00095D6D E701                       	dc.b	smpsNoAttack, $01
00095D6F E112                       	smpsAlterNote       $12
00095D71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D75 E10F                       	smpsAlterNote       $0F
00095D77 E701                       	dc.b	smpsNoAttack, $01
00095D79 E109                       	smpsAlterNote       $09
00095D7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D7F E10F                       	smpsAlterNote       $0F
00095D81 E701                       	dc.b	smpsNoAttack, $01
00095D83 E113                       	smpsAlterNote       $13
00095D85 E701                       	dc.b	smpsNoAttack, $01
00095D87 E112                       	smpsAlterNote       $12
00095D89 E701                       	dc.b	smpsNoAttack, $01
00095D8B E10C                       	smpsAlterNote       $0C
00095D8D E701                       	dc.b	smpsNoAttack, $01
00095D8F E108                       	smpsAlterNote       $08
00095D91 E701                       	dc.b	smpsNoAttack, $01
00095D93 E10C                       	smpsAlterNote       $0C
00095D95 E701                       	dc.b	smpsNoAttack, $01
00095D97 E10F                       	smpsAlterNote       $0F
00095D99 E701                       	dc.b	smpsNoAttack, $01
00095D9B E113                       	smpsAlterNote       $13
00095D9D E701                       	dc.b	smpsNoAttack, $01
00095D9F E10F                       	smpsAlterNote       $0F
00095DA1 E701                       	dc.b	smpsNoAttack, $01
00095DA3 E109                       	smpsAlterNote       $09
00095DA5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095DA9 E10F                       	smpsAlterNote       $0F
00095DAB C60D                       	dc.b	nA5, $0D
00095DAD E109                       	smpsAlterNote       $09
00095DAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DB3 E10C                       	smpsAlterNote       $0C
00095DB5 E701                       	dc.b	smpsNoAttack, $01
00095DB7 E112                       	smpsAlterNote       $12
00095DB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DBD E10C                       	smpsAlterNote       $0C
00095DBF E701                       	dc.b	smpsNoAttack, $01
00095DC1 E109                       	smpsAlterNote       $09
00095DC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DC7 E10F                       	smpsAlterNote       $0F
00095DC9 E701                       	dc.b	smpsNoAttack, $01
00095DCB E113                       	smpsAlterNote       $13
00095DCD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095DD3 E10D                       	smpsAlterNote       $0D
00095DD5 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095DDD E10C                       	smpsAlterNote       $0C
00095DDF C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095DE5 E6FF                       	smpsAlterVol        $FF
00095DE7 E10B                       	smpsAlterNote       $0B
00095DE9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095DED E10C                       	smpsAlterNote       $0C
00095DEF C103                       	dc.b	nE5, $03
00095DF1 E10D                       	smpsAlterNote       $0D
00095DF3 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095DFD E10B                       	smpsAlterNote       $0B
00095DFF BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095E03 E107                       	smpsAlterNote       $07
00095E05 E701                       	dc.b	smpsNoAttack, $01
00095E07 E104                       	smpsAlterNote       $04
00095E09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E0D E10A                       	smpsAlterNote       $0A
00095E0F E701                       	dc.b	smpsNoAttack, $01
00095E11 E10D                       	smpsAlterNote       $0D
00095E13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E17 E107                       	smpsAlterNote       $07
00095E19 E701                       	dc.b	smpsNoAttack, $01
00095E1B E104                       	smpsAlterNote       $04
00095E1D 8001                       	dc.b	nRst, $01
00095E1F E110                       	smpsAlterNote       $10
00095E21 C703                       	dc.b	nBb5, $03
00095E23 E10F                       	smpsAlterNote       $0F
00095E25 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095E29 E10D                       	smpsAlterNote       $0D
00095E2B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095E2F E10C                       	smpsAlterNote       $0C
00095E31 E701                       	dc.b	smpsNoAttack, $01
00095E33 E108                       	smpsAlterNote       $08
00095E35 E701                       	dc.b	smpsNoAttack, $01
00095E37 E109                       	smpsAlterNote       $09
00095E39 E701                       	dc.b	smpsNoAttack, $01
00095E3B E10F                       	smpsAlterNote       $0F
00095E3D E701                       	dc.b	smpsNoAttack, $01
00095E3F E113                       	smpsAlterNote       $13
00095E41 E701                       	dc.b	smpsNoAttack, $01
00095E43 E10F                       	smpsAlterNote       $0F
00095E45 E701                       	dc.b	smpsNoAttack, $01
00095E47 E10C                       	smpsAlterNote       $0C
00095E49 E701                       	dc.b	smpsNoAttack, $01
00095E4B E108                       	smpsAlterNote       $08
00095E4D E701                       	dc.b	smpsNoAttack, $01
00095E4F E10C                       	smpsAlterNote       $0C
00095E51 E701                       	dc.b	smpsNoAttack, $01
00095E53 E112                       	smpsAlterNote       $12
00095E55 E701                       	dc.b	smpsNoAttack, $01
00095E57 E113                       	smpsAlterNote       $13
00095E59 E701                       	dc.b	smpsNoAttack, $01
00095E5B E10F                       	smpsAlterNote       $0F
00095E5D E701                       	dc.b	smpsNoAttack, $01
00095E5F E109                       	smpsAlterNote       $09
00095E61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E65 E10C                       	smpsAlterNote       $0C
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E112                       	smpsAlterNote       $12
00095E6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E6F E10C                       	smpsAlterNote       $0C
00095E71 E701                       	dc.b	smpsNoAttack, $01
00095E73 E109                       	smpsAlterNote       $09
00095E75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E79 E10F                       	smpsAlterNote       $0F
00095E7B E701                       	dc.b	smpsNoAttack, $01
00095E7D E113                       	smpsAlterNote       $13
00095E7F E701                       	dc.b	smpsNoAttack, $01
00095E81 E112                       	smpsAlterNote       $12
00095E83 E701                       	dc.b	smpsNoAttack, $01
00095E85 E10C                       	smpsAlterNote       $0C
00095E87 E701                       	dc.b	smpsNoAttack, $01
00095E89 E108                       	smpsAlterNote       $08
00095E8B E701                       	dc.b	smpsNoAttack, $01
00095E8D E10C                       	smpsAlterNote       $0C
00095E8F E701                       	dc.b	smpsNoAttack, $01
00095E91 E10F                       	smpsAlterNote       $0F
00095E93 E701                       	dc.b	smpsNoAttack, $01
00095E95 E113                       	smpsAlterNote       $13
00095E97 E701                       	dc.b	smpsNoAttack, $01
00095E99 E10F                       	smpsAlterNote       $0F
00095E9B BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095E9F E110                       	smpsAlterNote       $10
00095EA1 BB03                       	dc.b	nBb4, $03
00095EA3 E10F                       	smpsAlterNote       $0F
00095EA5 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095EA9 E10B                       	smpsAlterNote       $0B
00095EAB BF03                       	dc.b	nD5, $03
00095EAD E10C                       	smpsAlterNote       $0C
00095EAF C103 8001                  	dc.b	nE5, $03, nRst, $01
00095EB3 E10D                       	smpsAlterNote       $0D
00095EB5 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095EBF E10B                       	smpsAlterNote       $0B
00095EC1 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00095ECD E110                       	smpsAlterNote       $10
00095ECF C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095ED3 E10F                       	smpsAlterNote       $0F
00095ED5 C604                       	dc.b	nA5, $04
00095ED7 E10D                       	smpsAlterNote       $0D
00095ED9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095EDF E109                       	smpsAlterNote       $09
00095EE1 E701                       	dc.b	smpsNoAttack, $01
00095EE3 E108                       	smpsAlterNote       $08
00095EE5 E701                       	dc.b	smpsNoAttack, $01
00095EE7 E10C                       	smpsAlterNote       $0C
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E112                       	smpsAlterNote       $12
00095EED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EF1 E10F                       	smpsAlterNote       $0F
00095EF3 E701                       	dc.b	smpsNoAttack, $01
00095EF5 E109                       	smpsAlterNote       $09
00095EF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EFB E10F                       	smpsAlterNote       $0F
00095EFD E701                       	dc.b	smpsNoAttack, $01
00095EFF E112                       	smpsAlterNote       $12
00095F01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F05 E10C                       	smpsAlterNote       $0C
00095F07 E701                       	dc.b	smpsNoAttack, $01
00095F09 E108                       	smpsAlterNote       $08
00095F0B E701                       	dc.b	smpsNoAttack, $01
00095F0D E109                       	smpsAlterNote       $09
00095F0F E701                       	dc.b	smpsNoAttack, $01
00095F11 E10F                       	smpsAlterNote       $0F
00095F13 E701                       	dc.b	smpsNoAttack, $01
00095F15 E113                       	smpsAlterNote       $13
00095F17 E701                       	dc.b	smpsNoAttack, $01
00095F19 E10F                       	smpsAlterNote       $0F
00095F1B E701                       	dc.b	smpsNoAttack, $01
00095F1D E10C                       	smpsAlterNote       $0C
00095F1F E701                       	dc.b	smpsNoAttack, $01
00095F21 E108                       	smpsAlterNote       $08
00095F23 E701                       	dc.b	smpsNoAttack, $01
00095F25 E10C                       	smpsAlterNote       $0C
00095F27 E701                       	dc.b	smpsNoAttack, $01
00095F29 E112                       	smpsAlterNote       $12
00095F2B E701                       	dc.b	smpsNoAttack, $01
00095F2D E113                       	smpsAlterNote       $13
00095F2F E701                       	dc.b	smpsNoAttack, $01
00095F31 E10F                       	smpsAlterNote       $0F
00095F33 E701                       	dc.b	smpsNoAttack, $01
00095F35 E109                       	smpsAlterNote       $09
00095F37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F3B E10C                       	smpsAlterNote       $0C
00095F3D E701                       	dc.b	smpsNoAttack, $01
00095F3F E112                       	smpsAlterNote       $12
00095F41 E701                       	dc.b	smpsNoAttack, $01
00095F43 E113                       	smpsAlterNote       $13
00095F45 8001                       	dc.b	nRst, $01
00095F47 E10F                       	smpsAlterNote       $0F
00095F49 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00095F55 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00095F5D E10D                       	smpsAlterNote       $0D
00095F5F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095F65 E10B                       	smpsAlterNote       $0B
00095F67 BF0D                       	dc.b	nD5, $0D
00095F69 E108                       	smpsAlterNote       $08
00095F6B E701                       	dc.b	smpsNoAttack, $01
00095F6D E104                       	smpsAlterNote       $04
00095F6F E701                       	dc.b	smpsNoAttack, $01
00095F71 E105                       	smpsAlterNote       $05
00095F73 E701                       	dc.b	smpsNoAttack, $01
00095F75 E10B                       	smpsAlterNote       $0B
00095F77 E701                       	dc.b	smpsNoAttack, $01
00095F79 E10F                       	smpsAlterNote       $0F
00095F7B E701                       	dc.b	smpsNoAttack, $01
00095F7D E10B                       	smpsAlterNote       $0B
00095F7F E701                       	dc.b	smpsNoAttack, $01
00095F81 E108                       	smpsAlterNote       $08
00095F83 E701                       	dc.b	smpsNoAttack, $01
00095F85 E104                       	smpsAlterNote       $04
00095F87 E701                       	dc.b	smpsNoAttack, $01
00095F89 E108                       	smpsAlterNote       $08
00095F8B E701                       	dc.b	smpsNoAttack, $01
00095F8D E10E                       	smpsAlterNote       $0E
00095F8F E701                       	dc.b	smpsNoAttack, $01
00095F91 E10F                       	smpsAlterNote       $0F
00095F93 E701                       	dc.b	smpsNoAttack, $01
00095F95 E10C                       	smpsAlterNote       $0C
00095F97 C101                       	dc.b	nE5, $01
00095F99 E10D                       	smpsAlterNote       $0D
00095F9B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 C607                       	dc.b	nA5, $07
00095FA7 E10C                       	smpsAlterNote       $0C
00095FA9 CD07                       	dc.b	nE6, $07
00095FAB E10D                       	smpsAlterNote       $0D
00095FAD CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095FB1 E10C                       	smpsAlterNote       $0C
00095FB3 CD03                       	dc.b	nE6, $03
00095FB5 E10A                       	smpsAlterNote       $0A
00095FB7 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095FBB E10D                       	smpsAlterNote       $0D
00095FBD C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00095FC3 E10A                       	smpsAlterNote       $0A
00095FC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FC9 E110                       	smpsAlterNote       $10
00095FCB E701                       	dc.b	smpsNoAttack, $01
00095FCD E114                       	smpsAlterNote       $14
00095FCF E701                       	dc.b	smpsNoAttack, $01
00095FD1 E113                       	smpsAlterNote       $13
00095FD3 E701                       	dc.b	smpsNoAttack, $01
00095FD5 E10D                       	smpsAlterNote       $0D
00095FD7 E701                       	dc.b	smpsNoAttack, $01
00095FD9 E109                       	smpsAlterNote       $09
00095FDB E701                       	dc.b	smpsNoAttack, $01
00095FDD E10D                       	smpsAlterNote       $0D
00095FDF E701                       	dc.b	smpsNoAttack, $01
00095FE1 E110                       	smpsAlterNote       $10
00095FE3 E701                       	dc.b	smpsNoAttack, $01
00095FE5 E114                       	smpsAlterNote       $14
00095FE7 E701                       	dc.b	smpsNoAttack, $01
00095FE9 E10F                       	smpsAlterNote       $0F
00095FEB C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00095FEF E10C                       	smpsAlterNote       $0C
00095FF1 E701                       	dc.b	smpsNoAttack, $01
00095FF3 E108                       	smpsAlterNote       $08
00095FF5 E701                       	dc.b	smpsNoAttack, $01
00095FF7 E10C                       	smpsAlterNote       $0C
00095FF9 E701                       	dc.b	smpsNoAttack, $01
00095FFB E10F                       	smpsAlterNote       $0F
00095FFD E701                       	dc.b	smpsNoAttack, $01
00095FFF E113                       	smpsAlterNote       $13
00096001 E701                       	dc.b	smpsNoAttack, $01
00096003 E10F                       	smpsAlterNote       $0F
00096005 E701                       	dc.b	smpsNoAttack, $01
00096007 E109                       	smpsAlterNote       $09
00096009 E701                       	dc.b	smpsNoAttack, $01
0009600B E108                       	smpsAlterNote       $08
0009600D E701                       	dc.b	smpsNoAttack, $01
0009600F E10C                       	smpsAlterNote       $0C
00096011 E701                       	dc.b	smpsNoAttack, $01
00096013 E112                       	smpsAlterNote       $12
00096015 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096019 E10F                       	smpsAlterNote       $0F
0009601B E701                       	dc.b	smpsNoAttack, $01
0009601D E109                       	smpsAlterNote       $09
0009601F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096023 E10F                       	smpsAlterNote       $0F
00096025 E701                       	dc.b	smpsNoAttack, $01
00096027 E112                       	smpsAlterNote       $12
00096029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009602D E10C                       	smpsAlterNote       $0C
0009602F E701                       	dc.b	smpsNoAttack, $01
00096031 E108                       	smpsAlterNote       $08
00096033 E701                       	dc.b	smpsNoAttack, $01
00096035 E109                       	smpsAlterNote       $09
00096037 E701                       	dc.b	smpsNoAttack, $01
00096039 E10F                       	smpsAlterNote       $0F
0009603B E701                       	dc.b	smpsNoAttack, $01
0009603D E113                       	smpsAlterNote       $13
0009603F E701                       	dc.b	smpsNoAttack, $01
00096041 E10F                       	smpsAlterNote       $0F
00096043 E701                       	dc.b	smpsNoAttack, $01
00096045 E10C                       	smpsAlterNote       $0C
00096047 E701                       	dc.b	smpsNoAttack, $01
00096049 E108                       	smpsAlterNote       $08
0009604B E701                       	dc.b	smpsNoAttack, $01
0009604D E10C                       	smpsAlterNote       $0C
0009604F E701                       	dc.b	smpsNoAttack, $01
00096051 E112                       	smpsAlterNote       $12
00096053 E701                       	dc.b	smpsNoAttack, $01
00096055 E113                       	smpsAlterNote       $13
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E10F                       	smpsAlterNote       $0F
0009605B E701                       	dc.b	smpsNoAttack, $01
0009605D E109                       	smpsAlterNote       $09
0009605F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096063 E10C                       	smpsAlterNote       $0C
00096065 E701                       	dc.b	smpsNoAttack, $01
00096067 E112                       	smpsAlterNote       $12
00096069 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009606D E10C                       	smpsAlterNote       $0C
0009606F E701                       	dc.b	smpsNoAttack, $01
00096071 E109                       	smpsAlterNote       $09
00096073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096077 E10F                       	smpsAlterNote       $0F
00096079 E701                       	dc.b	smpsNoAttack, $01
0009607B E113                       	smpsAlterNote       $13
0009607D E701                       	dc.b	smpsNoAttack, $01
0009607F E112                       	smpsAlterNote       $12
00096081 E701                       	dc.b	smpsNoAttack, $01
00096083 E10C                       	smpsAlterNote       $0C
00096085 E701                       	dc.b	smpsNoAttack, $01
00096087 E109                       	smpsAlterNote       $09
00096089 8001                       	dc.b	nRst, $01
0009608B E10F                       	smpsAlterNote       $0F
0009608D C60D                       	dc.b	nA5, $0D
0009608F E10C                       	smpsAlterNote       $0C
00096091 E701                       	dc.b	smpsNoAttack, $01
00096093 E108                       	smpsAlterNote       $08
00096095 E701                       	dc.b	smpsNoAttack, $01
00096097 E10C                       	smpsAlterNote       $0C
00096099 E701                       	dc.b	smpsNoAttack, $01
0009609B E112                       	smpsAlterNote       $12
0009609D E701                       	dc.b	smpsNoAttack, $01
0009609F E113                       	smpsAlterNote       $13
000960A1 E701                       	dc.b	smpsNoAttack, $01
000960A3 E10F                       	smpsAlterNote       $0F
000960A5 E701                       	dc.b	smpsNoAttack, $01
000960A7 E109                       	smpsAlterNote       $09
000960A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960AD E10C                       	smpsAlterNote       $0C
000960AF E701                       	dc.b	smpsNoAttack, $01
000960B1 E112                       	smpsAlterNote       $12
000960B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960B7 E10C                       	smpsAlterNote       $0C
000960B9 E701                       	dc.b	smpsNoAttack, $01
000960BB E109                       	smpsAlterNote       $09
000960BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960C1 E10F                       	smpsAlterNote       $0F
000960C3 E701                       	dc.b	smpsNoAttack, $01
000960C5 E113                       	smpsAlterNote       $13
000960C7 E701                       	dc.b	smpsNoAttack, $01
000960C9 E112                       	smpsAlterNote       $12
000960CB E701                       	dc.b	smpsNoAttack, $01
000960CD E10C                       	smpsAlterNote       $0C
000960CF E701                       	dc.b	smpsNoAttack, $01
000960D1 E108                       	smpsAlterNote       $08
000960D3 E701                       	dc.b	smpsNoAttack, $01
000960D5 E10C                       	smpsAlterNote       $0C
000960D7 E701                       	dc.b	smpsNoAttack, $01
000960D9 E10F                       	smpsAlterNote       $0F
000960DB E701                       	dc.b	smpsNoAttack, $01
000960DD E113                       	smpsAlterNote       $13
000960DF E701                       	dc.b	smpsNoAttack, $01
000960E1 E10F                       	smpsAlterNote       $0F
000960E3 E701                       	dc.b	smpsNoAttack, $01
000960E5 E109                       	smpsAlterNote       $09
000960E7 E701                       	dc.b	smpsNoAttack, $01
000960E9 E108                       	smpsAlterNote       $08
000960EB E701                       	dc.b	smpsNoAttack, $01
000960ED E10C                       	smpsAlterNote       $0C
000960EF E701                       	dc.b	smpsNoAttack, $01
000960F1 E112                       	smpsAlterNote       $12
000960F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960F7 E10F                       	smpsAlterNote       $0F
000960F9 E701                       	dc.b	smpsNoAttack, $01
000960FB E109                       	smpsAlterNote       $09
000960FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096101 E10F                       	smpsAlterNote       $0F
00096103 E701                       	dc.b	smpsNoAttack, $01
00096105 E112                       	smpsAlterNote       $12
00096107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009610B E10C                       	smpsAlterNote       $0C
0009610D E701                       	dc.b	smpsNoAttack, $01
0009610F E108                       	smpsAlterNote       $08
00096111 E701                       	dc.b	smpsNoAttack, $01
00096113 E10C                       	smpsAlterNote       $0C
00096115 E701                       	dc.b	smpsNoAttack, $01
00096117 E10F                       	smpsAlterNote       $0F
00096119 E701                       	dc.b	smpsNoAttack, $01
0009611B E113                       	smpsAlterNote       $13
0009611D E701                       	dc.b	smpsNoAttack, $01
0009611F E10F                       	smpsAlterNote       $0F
00096121 E701                       	dc.b	smpsNoAttack, $01
00096123 E109                       	smpsAlterNote       $09
00096125 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009612B E601                       	smpsAlterVol        $01
0009612D E10F                       	smpsAlterNote       $0F
0009612F C604                       	dc.b	nA5, $04
00096131 E10D                       	smpsAlterNote       $0D
00096133 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096139 E10B                       	smpsAlterNote       $0B
0009613B BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00096143 E10F                       	smpsAlterNote       $0F
00096145 C604 8001                  	dc.b	nA5, $04, nRst, $01
00096149 E10D                       	smpsAlterNote       $0D
0009614B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00096151 E10C                       	smpsAlterNote       $0C
00096153 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00096159 E10A                       	smpsAlterNote       $0A
0009615B C904 8001                  	dc.b	nC6, $04, nRst, $01
0009615F E110                       	smpsAlterNote       $10
00096161 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096165 E10F                       	smpsAlterNote       $0F
00096167 C604                       	dc.b	nA5, $04
00096169 E10D                       	smpsAlterNote       $0D
0009616B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00096177 E109                       	smpsAlterNote       $09
00096179 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009617D E10F                       	smpsAlterNote       $0F
0009617F E701                       	dc.b	smpsNoAttack, $01
00096181 E112                       	smpsAlterNote       $12
00096183 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096187 E10C                       	smpsAlterNote       $0C
00096189 E701                       	dc.b	smpsNoAttack, $01
0009618B E108                       	smpsAlterNote       $08
0009618D E701                       	dc.b	smpsNoAttack, $01
0009618F E10C                       	smpsAlterNote       $0C
00096191 E701                       	dc.b	smpsNoAttack, $01
00096193 E10F                       	smpsAlterNote       $0F
00096195 E701                       	dc.b	smpsNoAttack, $01
00096197 E113                       	smpsAlterNote       $13
00096199 E701                       	dc.b	smpsNoAttack, $01
0009619B E10D                       	smpsAlterNote       $0D
0009619D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000961A3 E10C                       	smpsAlterNote       $0C
000961A5 C10D                       	dc.b	nE5, $0D
000961A7 E109                       	smpsAlterNote       $09
000961A9 E701                       	dc.b	smpsNoAttack, $01
000961AB E105                       	smpsAlterNote       $05
000961AD E701                       	dc.b	smpsNoAttack, $01
000961AF E106                       	smpsAlterNote       $06
000961B1 E701                       	dc.b	smpsNoAttack, $01
000961B3 E10C                       	smpsAlterNote       $0C
000961B5 E701                       	dc.b	smpsNoAttack, $01
000961B7 E110                       	smpsAlterNote       $10
000961B9 E701                       	dc.b	smpsNoAttack, $01
000961BB E10C                       	smpsAlterNote       $0C
000961BD E701                       	dc.b	smpsNoAttack, $01
000961BF E109                       	smpsAlterNote       $09
000961C1 E701                       	dc.b	smpsNoAttack, $01
000961C3 E105                       	smpsAlterNote       $05
000961C5 E701                       	dc.b	smpsNoAttack, $01
000961C7 E109                       	smpsAlterNote       $09
000961C9 E701                       	dc.b	smpsNoAttack, $01
000961CB E10F                       	smpsAlterNote       $0F
000961CD E701                       	dc.b	smpsNoAttack, $01
000961CF E110                       	smpsAlterNote       $10
000961D1 E701                       	dc.b	smpsNoAttack, $01
000961D3 E10C                       	smpsAlterNote       $0C
000961D5 E701                       	dc.b	smpsNoAttack, $01
000961D7 E106                       	smpsAlterNote       $06
000961D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961DD E109                       	smpsAlterNote       $09
000961DF E701                       	dc.b	smpsNoAttack, $01
000961E1 E10F                       	smpsAlterNote       $0F
000961E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E7 E109                       	smpsAlterNote       $09
000961E9 E701                       	dc.b	smpsNoAttack, $01
000961EB E106                       	smpsAlterNote       $06
000961ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961F1 E10C                       	smpsAlterNote       $0C
000961F3 E701                       	dc.b	smpsNoAttack, $01
000961F5 E110                       	smpsAlterNote       $10
000961F7 E701                       	dc.b	smpsNoAttack, $01
000961F9 E10F                       	smpsAlterNote       $0F
000961FB E701                       	dc.b	smpsNoAttack, $01
000961FD E109                       	smpsAlterNote       $09
000961FF E701                       	dc.b	smpsNoAttack, $01
00096201 E105                       	smpsAlterNote       $05
00096203 E701                       	dc.b	smpsNoAttack, $01
00096205 E109                       	smpsAlterNote       $09
00096207 E701                       	dc.b	smpsNoAttack, $01
00096209 E10C                       	smpsAlterNote       $0C
0009620B E701                       	dc.b	smpsNoAttack, $01
0009620D E110                       	smpsAlterNote       $10
0009620F E701                       	dc.b	smpsNoAttack, $01
00096211 E10C                       	smpsAlterNote       $0C
00096213 E701                       	dc.b	smpsNoAttack, $01
00096215 E106                       	smpsAlterNote       $06
00096217 E701                       	dc.b	smpsNoAttack, $01
00096219 E105                       	smpsAlterNote       $05
0009621B E701                       	dc.b	smpsNoAttack, $01
0009621D E109                       	smpsAlterNote       $09
0009621F E701                       	dc.b	smpsNoAttack, $01
00096221 E10F                       	smpsAlterNote       $0F
00096223 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096227 E10C                       	smpsAlterNote       $0C
00096229 E701                       	dc.b	smpsNoAttack, $01
0009622B E106                       	smpsAlterNote       $06
0009622D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096231 E10C                       	smpsAlterNote       $0C
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E10F                       	smpsAlterNote       $0F
00096237 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009623B E109                       	smpsAlterNote       $09
0009623D E701                       	dc.b	smpsNoAttack, $01
0009623F E105                       	smpsAlterNote       $05
00096241 E701                       	dc.b	smpsNoAttack, $01
00096243 E106                       	smpsAlterNote       $06
00096245 E701                       	dc.b	smpsNoAttack, $01
00096247 E10C                       	smpsAlterNote       $0C
00096249 E701                       	dc.b	smpsNoAttack, $01
0009624B E110                       	smpsAlterNote       $10
0009624D E701                       	dc.b	smpsNoAttack, $01
0009624F E10C                       	smpsAlterNote       $0C
00096251 E701                       	dc.b	smpsNoAttack, $01
00096253 E109                       	smpsAlterNote       $09
00096255 E701                       	dc.b	smpsNoAttack, $01
00096257 E105                       	smpsAlterNote       $05
00096259 E701                       	dc.b	smpsNoAttack, $01
0009625B E109                       	smpsAlterNote       $09
0009625D E701                       	dc.b	smpsNoAttack, $01
0009625F E10F                       	smpsAlterNote       $0F
00096261 E701                       	dc.b	smpsNoAttack, $01
00096263 E110                       	smpsAlterNote       $10
00096265 E701                       	dc.b	smpsNoAttack, $01
00096267 E10C                       	smpsAlterNote       $0C
00096269 E701                       	dc.b	smpsNoAttack, $01
0009626B E106                       	smpsAlterNote       $06
0009626D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096271 E109                       	smpsAlterNote       $09
00096273 E701                       	dc.b	smpsNoAttack, $01
00096275 E10F                       	smpsAlterNote       $0F
00096277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009627B E109                       	smpsAlterNote       $09
0009627D E701                       	dc.b	smpsNoAttack, $01
0009627F E106                       	smpsAlterNote       $06
00096281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096285 E10C                       	smpsAlterNote       $0C
00096287 E701                       	dc.b	smpsNoAttack, $01
00096289 E110                       	smpsAlterNote       $10
0009628B E701                       	dc.b	smpsNoAttack, $01
0009628D E10F                       	smpsAlterNote       $0F
0009628F E701                       	dc.b	smpsNoAttack, $01
00096291 E109                       	smpsAlterNote       $09
00096293 E701                       	dc.b	smpsNoAttack, $01
00096295 E105                       	smpsAlterNote       $05
00096297 E701                       	dc.b	smpsNoAttack, $01
00096299 E109                       	smpsAlterNote       $09
0009629B E701                       	dc.b	smpsNoAttack, $01
0009629D E10C                       	smpsAlterNote       $0C
0009629F E701                       	dc.b	smpsNoAttack, $01
000962A1 E110                       	smpsAlterNote       $10
000962A3 E701                       	dc.b	smpsNoAttack, $01
000962A5 E10C                       	smpsAlterNote       $0C
000962A7 E701                       	dc.b	smpsNoAttack, $01
000962A9 E106                       	smpsAlterNote       $06
000962AB E701                       	dc.b	smpsNoAttack, $01
000962AD E105                       	smpsAlterNote       $05
000962AF E701                       	dc.b	smpsNoAttack, $01
000962B1 E109                       	smpsAlterNote       $09
000962B3 E701                       	dc.b	smpsNoAttack, $01
000962B5 E10F                       	smpsAlterNote       $0F
000962B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962BB E109                       	smpsAlterNote       $09
000962BD E701                       	dc.b	smpsNoAttack, $01
000962BF E106                       	smpsAlterNote       $06
000962C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962C5 E10C                       	smpsAlterNote       $0C
000962C7 E701                       	dc.b	smpsNoAttack, $01
000962C9 E110                       	smpsAlterNote       $10
000962CB E701                       	dc.b	smpsNoAttack, $01
000962CD E10F                       	smpsAlterNote       $0F
000962CF E701                       	dc.b	smpsNoAttack, $01
000962D1 E109                       	smpsAlterNote       $09
000962D3 E701                       	dc.b	smpsNoAttack, $01
000962D5 E105                       	smpsAlterNote       $05
000962D7 E701                       	dc.b	smpsNoAttack, $01
000962D9 E109                       	smpsAlterNote       $09
000962DB E701                       	dc.b	smpsNoAttack, $01
000962DD E10C                       	smpsAlterNote       $0C
000962DF E701                       	dc.b	smpsNoAttack, $01
000962E1 E110                       	smpsAlterNote       $10
000962E3 E701                       	dc.b	smpsNoAttack, $01
000962E5 E10C                       	smpsAlterNote       $0C
000962E7 E701                       	dc.b	smpsNoAttack, $01
000962E9 E106                       	smpsAlterNote       $06
000962EB E701                       	dc.b	smpsNoAttack, $01
000962ED E105                       	smpsAlterNote       $05
000962EF E701                       	dc.b	smpsNoAttack, $01
000962F1 E109                       	smpsAlterNote       $09
000962F3 E701                       	dc.b	smpsNoAttack, $01
000962F5 E10F                       	smpsAlterNote       $0F
000962F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962FB E10C                       	smpsAlterNote       $0C
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E106                       	smpsAlterNote       $06
00096301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096305 E10C                       	smpsAlterNote       $0C
00096307 E701                       	dc.b	smpsNoAttack, $01
00096309 E10F                       	smpsAlterNote       $0F
0009630B E701                       	dc.b	smpsNoAttack, $01
0009630D E110                       	smpsAlterNote       $10
0009630F 8001                       	dc.b	nRst, $01
00096311 E10F                       	smpsAlterNote       $0F
00096313 C604                       	dc.b	nA5, $04
00096315 E10D                       	smpsAlterNote       $0D
00096317 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009631D E10B                       	smpsAlterNote       $0B
0009631F BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00096325 E10F                       	smpsAlterNote       $0F
00096327 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009632B E10D                       	smpsAlterNote       $0D
0009632D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00096333 E10C                       	smpsAlterNote       $0C
00096335 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0009633B E10A                       	smpsAlterNote       $0A
0009633D C904                       	dc.b	nC6, $04
0009633F E110                       	smpsAlterNote       $10
00096341 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096345 E10F                       	smpsAlterNote       $0F
00096347 C604                       	dc.b	nA5, $04
00096349 E10D                       	smpsAlterNote       $0D
0009634B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00096357 E109                       	smpsAlterNote       $09
00096359 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009635D E10F                       	smpsAlterNote       $0F
0009635F E701                       	dc.b	smpsNoAttack, $01
00096361 E112                       	smpsAlterNote       $12
00096363 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096367 E10C                       	smpsAlterNote       $0C
00096369 E701                       	dc.b	smpsNoAttack, $01
0009636B E108                       	smpsAlterNote       $08
0009636D E701                       	dc.b	smpsNoAttack, $01
0009636F E109                       	smpsAlterNote       $09
00096371 E701                       	dc.b	smpsNoAttack, $01
00096373 E10F                       	smpsAlterNote       $0F
00096375 E701                       	dc.b	smpsNoAttack, $01
00096377 E113                       	smpsAlterNote       $13
00096379 E701                       	dc.b	smpsNoAttack, $01
0009637B E10D                       	smpsAlterNote       $0D
0009637D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096383 E10C                       	smpsAlterNote       $0C
00096385 C10D                       	dc.b	nE5, $0D
00096387 E109                       	smpsAlterNote       $09
00096389 E701                       	dc.b	smpsNoAttack, $01
0009638B E106                       	smpsAlterNote       $06
0009638D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096391 E10C                       	smpsAlterNote       $0C
00096393 E701                       	dc.b	smpsNoAttack, $01
00096395 E110                       	smpsAlterNote       $10
00096397 E701                       	dc.b	smpsNoAttack, $01
00096399 E10F                       	smpsAlterNote       $0F
0009639B E701                       	dc.b	smpsNoAttack, $01
0009639D E109                       	smpsAlterNote       $09
0009639F E701                       	dc.b	smpsNoAttack, $01
000963A1 E105                       	smpsAlterNote       $05
000963A3 E701                       	dc.b	smpsNoAttack, $01
000963A5 E109                       	smpsAlterNote       $09
000963A7 E701                       	dc.b	smpsNoAttack, $01
000963A9 E10C                       	smpsAlterNote       $0C
000963AB E701                       	dc.b	smpsNoAttack, $01
000963AD E110                       	smpsAlterNote       $10
000963AF E701                       	dc.b	smpsNoAttack, $01
000963B1 E10C                       	smpsAlterNote       $0C
000963B3 E701                       	dc.b	smpsNoAttack, $01
000963B5 E106                       	smpsAlterNote       $06
000963B7 E701                       	dc.b	smpsNoAttack, $01
000963B9 E105                       	smpsAlterNote       $05
000963BB E701                       	dc.b	smpsNoAttack, $01
000963BD E109                       	smpsAlterNote       $09
000963BF E701                       	dc.b	smpsNoAttack, $01
000963C1 E10F                       	smpsAlterNote       $0F
000963C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963C7 E10C                       	smpsAlterNote       $0C
000963C9 E701                       	dc.b	smpsNoAttack, $01
000963CB E106                       	smpsAlterNote       $06
000963CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963D1 E10C                       	smpsAlterNote       $0C
000963D3 E701                       	dc.b	smpsNoAttack, $01
000963D5 E10F                       	smpsAlterNote       $0F
000963D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963DB E109                       	smpsAlterNote       $09
000963DD E701                       	dc.b	smpsNoAttack, $01
000963DF E105                       	smpsAlterNote       $05
000963E1 E701                       	dc.b	smpsNoAttack, $01
000963E3 E106                       	smpsAlterNote       $06
000963E5 E701                       	dc.b	smpsNoAttack, $01
000963E7 E10C                       	smpsAlterNote       $0C
000963E9 E701                       	dc.b	smpsNoAttack, $01
000963EB E110                       	smpsAlterNote       $10
000963ED E701                       	dc.b	smpsNoAttack, $01
000963EF E10C                       	smpsAlterNote       $0C
000963F1 E701                       	dc.b	smpsNoAttack, $01
000963F3 E109                       	smpsAlterNote       $09
000963F5 E701                       	dc.b	smpsNoAttack, $01
000963F7 E105                       	smpsAlterNote       $05
000963F9 E701                       	dc.b	smpsNoAttack, $01
000963FB E109                       	smpsAlterNote       $09
000963FD E701                       	dc.b	smpsNoAttack, $01
000963FF E10F                       	smpsAlterNote       $0F
00096401 E701                       	dc.b	smpsNoAttack, $01
00096403 E110                       	smpsAlterNote       $10
00096405 E701                       	dc.b	smpsNoAttack, $01
00096407 E10C                       	smpsAlterNote       $0C
00096409 E701                       	dc.b	smpsNoAttack, $01
0009640B E106                       	smpsAlterNote       $06
0009640D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096411 E109                       	smpsAlterNote       $09
00096413 E701                       	dc.b	smpsNoAttack, $01
00096415 E10F                       	smpsAlterNote       $0F
00096417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009641B E109                       	smpsAlterNote       $09
0009641D E701                       	dc.b	smpsNoAttack, $01
0009641F E106                       	smpsAlterNote       $06
00096421 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096425 E10C                       	smpsAlterNote       $0C
00096427 E701                       	dc.b	smpsNoAttack, $01
00096429 E110                       	smpsAlterNote       $10
0009642B E701                       	dc.b	smpsNoAttack, $01
0009642D E10F                       	smpsAlterNote       $0F
0009642F E701                       	dc.b	smpsNoAttack, $01
00096431 E109                       	smpsAlterNote       $09
00096433 E701                       	dc.b	smpsNoAttack, $01
00096435 E105                       	smpsAlterNote       $05
00096437 E701                       	dc.b	smpsNoAttack, $01
00096439 E109                       	smpsAlterNote       $09
0009643B E701                       	dc.b	smpsNoAttack, $01
0009643D E10F                       	smpsAlterNote       $0F
0009643F E701                       	dc.b	smpsNoAttack, $01
00096441 E110                       	smpsAlterNote       $10
00096443 E701                       	dc.b	smpsNoAttack, $01
00096445 E10C                       	smpsAlterNote       $0C
00096447 E701                       	dc.b	smpsNoAttack, $01
00096449 E106                       	smpsAlterNote       $06
0009644B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644F E109                       	smpsAlterNote       $09
00096451 E701                       	dc.b	smpsNoAttack, $01
00096453 E10F                       	smpsAlterNote       $0F
00096455 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096459 E109                       	smpsAlterNote       $09
0009645B E701                       	dc.b	smpsNoAttack, $01
0009645D E106                       	smpsAlterNote       $06
0009645F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096463 E10C                       	smpsAlterNote       $0C
00096465 E701                       	dc.b	smpsNoAttack, $01
00096467 E110                       	smpsAlterNote       $10
00096469 E701                       	dc.b	smpsNoAttack, $01
0009646B E10F                       	smpsAlterNote       $0F
0009646D E701                       	dc.b	smpsNoAttack, $01
0009646F E109                       	smpsAlterNote       $09
00096471 E701                       	dc.b	smpsNoAttack, $01
00096473 E105                       	smpsAlterNote       $05
00096475 E701                       	dc.b	smpsNoAttack, $01
00096477 E109                       	smpsAlterNote       $09
00096479 E701                       	dc.b	smpsNoAttack, $01
0009647B E10C                       	smpsAlterNote       $0C
0009647D E701                       	dc.b	smpsNoAttack, $01
0009647F E110                       	smpsAlterNote       $10
00096481 E701                       	dc.b	smpsNoAttack, $01
00096483 E10C                       	smpsAlterNote       $0C
00096485 E701                       	dc.b	smpsNoAttack, $01
00096487 E106                       	smpsAlterNote       $06
00096489 E701                       	dc.b	smpsNoAttack, $01
0009648B E105                       	smpsAlterNote       $05
0009648D E701                       	dc.b	smpsNoAttack, $01
0009648F E109                       	smpsAlterNote       $09
00096491 E701                       	dc.b	smpsNoAttack, $01
00096493 E10F                       	smpsAlterNote       $0F
00096495 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096499 E10C                       	smpsAlterNote       $0C
0009649B E701                       	dc.b	smpsNoAttack, $01
0009649D E106                       	smpsAlterNote       $06
0009649F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964A3 E10C                       	smpsAlterNote       $0C
000964A5 E701                       	dc.b	smpsNoAttack, $01
000964A7 E10F                       	smpsAlterNote       $0F
000964A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964AD E109                       	smpsAlterNote       $09
000964AF E701                       	dc.b	smpsNoAttack, $01
000964B1 E105                       	smpsAlterNote       $05
000964B3 E701                       	dc.b	smpsNoAttack, $01
000964B5 E106                       	smpsAlterNote       $06
000964B7 E701                       	dc.b	smpsNoAttack, $01
000964B9 E10C                       	smpsAlterNote       $0C
000964BB E701                       	dc.b	smpsNoAttack, $01
000964BD E110                       	smpsAlterNote       $10
000964BF E701                       	dc.b	smpsNoAttack, $01
000964C1 E10C                       	smpsAlterNote       $0C
000964C3 E701                       	dc.b	smpsNoAttack, $01
000964C5 E109                       	smpsAlterNote       $09
000964C7 E701                       	dc.b	smpsNoAttack, $01
000964C9 E105                       	smpsAlterNote       $05
000964CB E701                       	dc.b	smpsNoAttack, $01
000964CD E109                       	smpsAlterNote       $09
000964CF E701                       	dc.b	smpsNoAttack, $01
000964D1 E10F                       	smpsAlterNote       $0F
000964D3 E701                       	dc.b	smpsNoAttack, $01
000964D5 E110                       	smpsAlterNote       $10
000964D7 E701                       	dc.b	smpsNoAttack, $01
000964D9 E10C                       	smpsAlterNote       $0C
000964DB E701                       	dc.b	smpsNoAttack, $01
000964DD E106                       	smpsAlterNote       $06
000964DF E701                       	dc.b	smpsNoAttack, $01
000964E1 E10B                       	smpsAlterNote       $0B
000964E3 BF02                       	dc.b	nD5, $02
000964E5 E10C                       	smpsAlterNote       $0C
000964E7 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000964ED E109                       	smpsAlterNote       $09
000964EF E701                       	dc.b	smpsNoAttack, $01
000964F1 E105                       	smpsAlterNote       $05
000964F3 E701                       	dc.b	smpsNoAttack, $01
000964F5 E109                       	smpsAlterNote       $09
000964F7 E701                       	dc.b	smpsNoAttack, $01
000964F9 E10F                       	smpsAlterNote       $0F
000964FB E701                       	dc.b	smpsNoAttack, $01
000964FD E110                       	smpsAlterNote       $10
000964FF E701                       	dc.b	smpsNoAttack, $01
00096501 E10C                       	smpsAlterNote       $0C
00096503 E701                       	dc.b	smpsNoAttack, $01
00096505 E106                       	smpsAlterNote       $06
00096507 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009650B E109                       	smpsAlterNote       $09
0009650D E701                       	dc.b	smpsNoAttack, $01
0009650F E10F                       	smpsAlterNote       $0F
00096511 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096515 E109                       	smpsAlterNote       $09
00096517 E701                       	dc.b	smpsNoAttack, $01
00096519 E106                       	smpsAlterNote       $06
0009651B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009651F E10C                       	smpsAlterNote       $0C
00096521 E701                       	dc.b	smpsNoAttack, $01
00096523 E110                       	smpsAlterNote       $10
00096525 E701                       	dc.b	smpsNoAttack, $01
00096527 E10F                       	smpsAlterNote       $0F
00096529 E701                       	dc.b	smpsNoAttack, $01
0009652B E109                       	smpsAlterNote       $09
0009652D E701                       	dc.b	smpsNoAttack, $01
0009652F E105                       	smpsAlterNote       $05
00096531 E701                       	dc.b	smpsNoAttack, $01
00096533 E109                       	smpsAlterNote       $09
00096535 E701                       	dc.b	smpsNoAttack, $01
00096537 E10C                       	smpsAlterNote       $0C
00096539 E701                       	dc.b	smpsNoAttack, $01
0009653B E110                       	smpsAlterNote       $10
0009653D E701                       	dc.b	smpsNoAttack, $01
0009653F E10C                       	smpsAlterNote       $0C
00096541 E701                       	dc.b	smpsNoAttack, $01
00096543 E106                       	smpsAlterNote       $06
00096545 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096549 E10D                       	smpsAlterNote       $0D
0009654B C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00096553 E10C                       	smpsAlterNote       $0C
00096555 C10D                       	dc.b	nE5, $0D
00096557 E106                       	smpsAlterNote       $06
00096559 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009655D E109                       	smpsAlterNote       $09
0009655F E701                       	dc.b	smpsNoAttack, $01
00096561 E10F                       	smpsAlterNote       $0F
00096563 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096567 E109                       	smpsAlterNote       $09
00096569 E701                       	dc.b	smpsNoAttack, $01
0009656B E106                       	smpsAlterNote       $06
0009656D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096571 E10C                       	smpsAlterNote       $0C
00096573 E701                       	dc.b	smpsNoAttack, $01
00096575 E110                       	smpsAlterNote       $10
00096577 E701                       	dc.b	smpsNoAttack, $01
00096579 E10F                       	smpsAlterNote       $0F
0009657B E701                       	dc.b	smpsNoAttack, $01
0009657D E109                       	smpsAlterNote       $09
0009657F E701                       	dc.b	smpsNoAttack, $01
00096581 E105                       	smpsAlterNote       $05
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E106                       	smpsAlterNote       $06
00096587 800F                       	dc.b	nRst, $0F
0009658B E6FF                       	smpsAlterVol        $FF
0009658D E10F                       	smpsAlterNote       $0F
0009658F BA01                       	dc.b	nA4, $01
00096591 E110                       	smpsAlterNote       $10
00096593 BB02                       	dc.b	nBb4, $02
00096595 E10F                       	smpsAlterNote       $0F
00096597 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0009659D E10B                       	smpsAlterNote       $0B
0009659F BF03 8001                  	dc.b	nD5, $03, nRst, $01
000965A3 E10C                       	smpsAlterNote       $0C
000965A5 C103                       	dc.b	nE5, $03
000965A7 E10D                       	smpsAlterNote       $0D
000965A9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000965B3 E10B                       	smpsAlterNote       $0B
000965B5 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000965B9 E104                       	smpsAlterNote       $04
000965BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965BF E10A                       	smpsAlterNote       $0A
000965C1 E701                       	dc.b	smpsNoAttack, $01
000965C3 E10D                       	smpsAlterNote       $0D
000965C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965C9 E107                       	smpsAlterNote       $07
000965CB E701                       	dc.b	smpsNoAttack, $01
000965CD E104                       	smpsAlterNote       $04
000965CF 8001                       	dc.b	nRst, $01
000965D1 E110                       	smpsAlterNote       $10
000965D3 C703                       	dc.b	nBb5, $03
000965D5 E10F                       	smpsAlterNote       $0F
000965D7 C603 8001                  	dc.b	nA5, $03, nRst, $01
000965DB E10D                       	smpsAlterNote       $0D
000965DD C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000965E1 E10C                       	smpsAlterNote       $0C
000965E3 E701                       	dc.b	smpsNoAttack, $01
000965E5 E108                       	smpsAlterNote       $08
000965E7 E701                       	dc.b	smpsNoAttack, $01
000965E9 E109                       	smpsAlterNote       $09
000965EB E701                       	dc.b	smpsNoAttack, $01
000965ED E10F                       	smpsAlterNote       $0F
000965EF E701                       	dc.b	smpsNoAttack, $01
000965F1 E113                       	smpsAlterNote       $13
000965F3 E701                       	dc.b	smpsNoAttack, $01
000965F5 E10F                       	smpsAlterNote       $0F
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E10C                       	smpsAlterNote       $0C
000965FB E701                       	dc.b	smpsNoAttack, $01
000965FD E108                       	smpsAlterNote       $08
000965FF E701                       	dc.b	smpsNoAttack, $01
00096601 E10C                       	smpsAlterNote       $0C
00096603 E701                       	dc.b	smpsNoAttack, $01
00096605 E112                       	smpsAlterNote       $12
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E113                       	smpsAlterNote       $13
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E10F                       	smpsAlterNote       $0F
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E109                       	smpsAlterNote       $09
00096613 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096617 E10C                       	smpsAlterNote       $0C
00096619 E701                       	dc.b	smpsNoAttack, $01
0009661B E112                       	smpsAlterNote       $12
0009661D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096621 E10C                       	smpsAlterNote       $0C
00096623 E701                       	dc.b	smpsNoAttack, $01
00096625 E109                       	smpsAlterNote       $09
00096627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009662B E10F                       	smpsAlterNote       $0F
0009662D E701                       	dc.b	smpsNoAttack, $01
0009662F E113                       	smpsAlterNote       $13
00096631 E701                       	dc.b	smpsNoAttack, $01
00096633 E112                       	smpsAlterNote       $12
00096635 E701                       	dc.b	smpsNoAttack, $01
00096637 E10C                       	smpsAlterNote       $0C
00096639 E701                       	dc.b	smpsNoAttack, $01
0009663B E108                       	smpsAlterNote       $08
0009663D E701                       	dc.b	smpsNoAttack, $01
0009663F E10C                       	smpsAlterNote       $0C
00096641 E701                       	dc.b	smpsNoAttack, $01
00096643 E10F                       	smpsAlterNote       $0F
00096645 E701                       	dc.b	smpsNoAttack, $01
00096647 E113                       	smpsAlterNote       $13
00096649 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0009664D E10B                       	smpsAlterNote       $0B
0009664F BF03                       	dc.b	nD5, $03
00096651 E10C                       	smpsAlterNote       $0C
00096653 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096657 E10D                       	smpsAlterNote       $0D
00096659 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00096663 E10B                       	smpsAlterNote       $0B
00096665 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096671 E110                       	smpsAlterNote       $10
00096673 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096677 E10F                       	smpsAlterNote       $0F
00096679 C604                       	dc.b	nA5, $04
0009667B E10D                       	smpsAlterNote       $0D
0009667D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00096683 E109                       	smpsAlterNote       $09
00096685 E701                       	dc.b	smpsNoAttack, $01
00096687 E108                       	smpsAlterNote       $08
00096689 E701                       	dc.b	smpsNoAttack, $01
0009668B E10C                       	smpsAlterNote       $0C
0009668D E701                       	dc.b	smpsNoAttack, $01
0009668F E112                       	smpsAlterNote       $12
00096691 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096695 E10F                       	smpsAlterNote       $0F
00096697 E701                       	dc.b	smpsNoAttack, $01
00096699 E109                       	smpsAlterNote       $09
0009669B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009669F E10F                       	smpsAlterNote       $0F
000966A1 E701                       	dc.b	smpsNoAttack, $01
000966A3 E112                       	smpsAlterNote       $12
000966A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966A9 E10C                       	smpsAlterNote       $0C
000966AB E701                       	dc.b	smpsNoAttack, $01
000966AD E108                       	smpsAlterNote       $08
000966AF E701                       	dc.b	smpsNoAttack, $01
000966B1 E109                       	smpsAlterNote       $09
000966B3 E701                       	dc.b	smpsNoAttack, $01
000966B5 E10F                       	smpsAlterNote       $0F
000966B7 E701                       	dc.b	smpsNoAttack, $01
000966B9 E113                       	smpsAlterNote       $13
000966BB E701                       	dc.b	smpsNoAttack, $01
000966BD E10F                       	smpsAlterNote       $0F
000966BF E701                       	dc.b	smpsNoAttack, $01
000966C1 E10C                       	smpsAlterNote       $0C
000966C3 E701                       	dc.b	smpsNoAttack, $01
000966C5 E108                       	smpsAlterNote       $08
000966C7 E701                       	dc.b	smpsNoAttack, $01
000966C9 E10C                       	smpsAlterNote       $0C
000966CB E701                       	dc.b	smpsNoAttack, $01
000966CD E112                       	smpsAlterNote       $12
000966CF E701                       	dc.b	smpsNoAttack, $01
000966D1 E113                       	smpsAlterNote       $13
000966D3 E701                       	dc.b	smpsNoAttack, $01
000966D5 E10F                       	smpsAlterNote       $0F
000966D7 E701                       	dc.b	smpsNoAttack, $01
000966D9 E109                       	smpsAlterNote       $09
000966DB E701                       	dc.b	smpsNoAttack, $01
000966DD E10D                       	smpsAlterNote       $0D
000966DF C402                       	dc.b	nG5, $02
000966E1 E10F                       	smpsAlterNote       $0F
000966E3 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000966ED E10D                       	smpsAlterNote       $0D
000966EF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000966F5 E10B                       	smpsAlterNote       $0B
000966F7 BF0D                       	dc.b	nD5, $0D
000966F9 E108                       	smpsAlterNote       $08
000966FB E701                       	dc.b	smpsNoAttack, $01
000966FD E104                       	smpsAlterNote       $04
000966FF E701                       	dc.b	smpsNoAttack, $01
00096701 E105                       	smpsAlterNote       $05
00096703 E701                       	dc.b	smpsNoAttack, $01
00096705 E10B                       	smpsAlterNote       $0B
00096707 E701                       	dc.b	smpsNoAttack, $01
00096709 E10F                       	smpsAlterNote       $0F
0009670B E701                       	dc.b	smpsNoAttack, $01
0009670D E10B                       	smpsAlterNote       $0B
0009670F E701                       	dc.b	smpsNoAttack, $01
00096711 E108                       	smpsAlterNote       $08
00096713 E701                       	dc.b	smpsNoAttack, $01
00096715 E104                       	smpsAlterNote       $04
00096717 E701                       	dc.b	smpsNoAttack, $01
00096719 E108                       	smpsAlterNote       $08
0009671B E701                       	dc.b	smpsNoAttack, $01
0009671D E10E                       	smpsAlterNote       $0E
0009671F E701                       	dc.b	smpsNoAttack, $01
00096721 E10F                       	smpsAlterNote       $0F
00096723 E701                       	dc.b	smpsNoAttack, $01
00096725 E10C                       	smpsAlterNote       $0C
00096727 C101                       	dc.b	nE5, $01
00096729 E10D                       	smpsAlterNote       $0D
0009672B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096733 E10F                       	smpsAlterNote       $0F
00096735 C607                       	dc.b	nA5, $07
00096737 E10C                       	smpsAlterNote       $0C
00096739 CD07                       	dc.b	nE6, $07
0009673B E10D                       	smpsAlterNote       $0D
0009673D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096741 E10C                       	smpsAlterNote       $0C
00096743 CD03                       	dc.b	nE6, $03
00096745 E10A                       	smpsAlterNote       $0A
00096747 C903 8001                  	dc.b	nC6, $03, nRst, $01
0009674B E10D                       	smpsAlterNote       $0D
0009674D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096753 E10A                       	smpsAlterNote       $0A
00096755 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096759 E110                       	smpsAlterNote       $10
0009675B E701                       	dc.b	smpsNoAttack, $01
0009675D E114                       	smpsAlterNote       $14
0009675F E701                       	dc.b	smpsNoAttack, $01
00096761 E113                       	smpsAlterNote       $13
00096763 E701                       	dc.b	smpsNoAttack, $01
00096765 E10D                       	smpsAlterNote       $0D
00096767 E701                       	dc.b	smpsNoAttack, $01
00096769 E109                       	smpsAlterNote       $09
0009676B E701                       	dc.b	smpsNoAttack, $01
0009676D E10D                       	smpsAlterNote       $0D
0009676F E701                       	dc.b	smpsNoAttack, $01
00096771 E110                       	smpsAlterNote       $10
00096773 E701                       	dc.b	smpsNoAttack, $01
00096775 E114                       	smpsAlterNote       $14
00096777 E701                       	dc.b	smpsNoAttack, $01
00096779 E10F                       	smpsAlterNote       $0F
0009677B C607                       	dc.b	nA5, $07
0009677D E10D                       	smpsAlterNote       $0D
0009677F C40D                       	dc.b	nG5, $0D
00096781 E10A                       	smpsAlterNote       $0A
00096783 E701                       	dc.b	smpsNoAttack, $01
00096785 E106                       	smpsAlterNote       $06
00096787 E701                       	dc.b	smpsNoAttack, $01
00096789 E10A                       	smpsAlterNote       $0A
0009678B E701                       	dc.b	smpsNoAttack, $01
0009678D E10D                       	smpsAlterNote       $0D
0009678F E701                       	dc.b	smpsNoAttack, $01
00096791 E111                       	smpsAlterNote       $11
00096793 E701                       	dc.b	smpsNoAttack, $01
00096795 E10D                       	smpsAlterNote       $0D
00096797 E701                       	dc.b	smpsNoAttack, $01
00096799 E107                       	smpsAlterNote       $07
0009679B E701                       	dc.b	smpsNoAttack, $01
0009679D E106                       	smpsAlterNote       $06
0009679F E701                       	dc.b	smpsNoAttack, $01
000967A1 E10A                       	smpsAlterNote       $0A
000967A3 E701                       	dc.b	smpsNoAttack, $01
000967A5 E110                       	smpsAlterNote       $10
000967A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967AB E10D                       	smpsAlterNote       $0D
000967AD E701                       	dc.b	smpsNoAttack, $01
000967AF E107                       	smpsAlterNote       $07
000967B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967B5 E10F                       	smpsAlterNote       $0F
000967B7 C60E                       	dc.b	nA5, $0E
000967B9 E109                       	smpsAlterNote       $09
000967BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967BF E10F                       	smpsAlterNote       $0F
000967C1 E701                       	dc.b	smpsNoAttack, $01
000967C3 E112                       	smpsAlterNote       $12
000967C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967C9 E10C                       	smpsAlterNote       $0C
000967CB E701                       	dc.b	smpsNoAttack, $01
000967CD E108                       	smpsAlterNote       $08
000967CF E701                       	dc.b	smpsNoAttack, $01
000967D1 E109                       	smpsAlterNote       $09
000967D3 E701                       	dc.b	smpsNoAttack, $01
000967D5 E10F                       	smpsAlterNote       $0F
000967D7 E701                       	dc.b	smpsNoAttack, $01
000967D9 E113                       	smpsAlterNote       $13
000967DB E701                       	dc.b	smpsNoAttack, $01
000967DD E10F                       	smpsAlterNote       $0F
000967DF E701                       	dc.b	smpsNoAttack, $01
000967E1 E10C                       	smpsAlterNote       $0C
000967E3 E701                       	dc.b	smpsNoAttack, $01
000967E5 E108                       	smpsAlterNote       $08
000967E7 E701                       	dc.b	smpsNoAttack, $01
000967E9 E109                       	smpsAlterNote       $09
000967EB 8001                       	dc.b	nRst, $01
000967ED E110                       	smpsAlterNote       $10
000967EF C70D                       	dc.b	nBb5, $0D
000967F1 E10D                       	smpsAlterNote       $0D
000967F3 E701                       	dc.b	smpsNoAttack, $01
000967F5 E109                       	smpsAlterNote       $09
000967F7 E701                       	dc.b	smpsNoAttack, $01
000967F9 E10D                       	smpsAlterNote       $0D
000967FB E701                       	dc.b	smpsNoAttack, $01
000967FD E113                       	smpsAlterNote       $13
000967FF E701                       	dc.b	smpsNoAttack, $01
00096801 E114                       	smpsAlterNote       $14
00096803 E701                       	dc.b	smpsNoAttack, $01
00096805 E110                       	smpsAlterNote       $10
00096807 E701                       	dc.b	smpsNoAttack, $01
00096809 E10A                       	smpsAlterNote       $0A
0009680B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009680F E10D                       	smpsAlterNote       $0D
00096811 E701                       	dc.b	smpsNoAttack, $01
00096813 E113                       	smpsAlterNote       $13
00096815 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096819 E10D                       	smpsAlterNote       $0D
0009681B E701                       	dc.b	smpsNoAttack, $01
0009681D E10A                       	smpsAlterNote       $0A
0009681F E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00096829 E10B                       	smpsAlterNote       $0B
0009682B 8001                       	dc.b	nRst, $01
0009682D E10C                       	smpsAlterNote       $0C
0009682F CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00096833 E10B                       	smpsAlterNote       $0B
00096835 CB0D                       	dc.b	nD6, $0D
00096837 E105                       	smpsAlterNote       $05
00096839 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009683D E108                       	smpsAlterNote       $08
0009683F E701                       	dc.b	smpsNoAttack, $01
00096841 E10E                       	smpsAlterNote       $0E
00096843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096847 E108                       	smpsAlterNote       $08
00096849 E701                       	dc.b	smpsNoAttack, $01
0009684B E105                       	smpsAlterNote       $05
0009684D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096851 E10B                       	smpsAlterNote       $0B
00096853 E701                       	dc.b	smpsNoAttack, $01
00096855 E10F                       	smpsAlterNote       $0F
00096857 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009685B E10C                       	smpsAlterNote       $0C
0009685D CC0D                       	dc.b	nEb6, $0D
0009685F E106                       	smpsAlterNote       $06
00096861 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096865 E109                       	smpsAlterNote       $09
00096867 E701                       	dc.b	smpsNoAttack, $01
00096869 E10C                       	smpsAlterNote       $0C
0009686B 8001                       	dc.b	nRst, $01
0009686D E10A                       	smpsAlterNote       $0A
0009686F C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0009687B CB0E                       	dc.b	nD6, $0E
0009687D E105                       	smpsAlterNote       $05
0009687F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096883 E10B                       	smpsAlterNote       $0B
00096885 E701                       	dc.b	smpsNoAttack, $01
00096887 E10E                       	smpsAlterNote       $0E
00096889 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009688D E108                       	smpsAlterNote       $08
0009688F E701                       	dc.b	smpsNoAttack, $01
00096891 E104                       	smpsAlterNote       $04
00096893 E701                       	dc.b	smpsNoAttack, $01
00096895 E105                       	smpsAlterNote       $05
00096897 E701                       	dc.b	smpsNoAttack, $01
00096899 E10B                       	smpsAlterNote       $0B
0009689B E701                       	dc.b	smpsNoAttack, $01
0009689D E10F                       	smpsAlterNote       $0F
0009689F E701                       	dc.b	smpsNoAttack, $01
000968A1 E10D                       	smpsAlterNote       $0D
000968A3 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000968A7 E10C                       	smpsAlterNote       $0C
000968A9 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000968AD E10A                       	smpsAlterNote       $0A
000968AF C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
000968BB CB0D                       	dc.b	nD6, $0D
000968BD E108                       	smpsAlterNote       $08
000968BF E701                       	dc.b	smpsNoAttack, $01
000968C1 E104                       	smpsAlterNote       $04
000968C3 E701                       	dc.b	smpsNoAttack, $01
000968C5 E105                       	smpsAlterNote       $05
000968C7 E701                       	dc.b	smpsNoAttack, $01
000968C9 E10B                       	smpsAlterNote       $0B
000968CB E701                       	dc.b	smpsNoAttack, $01
000968CD E10F                       	smpsAlterNote       $0F
000968CF E701                       	dc.b	smpsNoAttack, $01
000968D1 E10B                       	smpsAlterNote       $0B
000968D3 E701                       	dc.b	smpsNoAttack, $01
000968D5 E108                       	smpsAlterNote       $08
000968D7 E701                       	dc.b	smpsNoAttack, $01
000968D9 E104                       	smpsAlterNote       $04
000968DB E701                       	dc.b	smpsNoAttack, $01
000968DD E108                       	smpsAlterNote       $08
000968DF E701                       	dc.b	smpsNoAttack, $01
000968E1 E10E                       	smpsAlterNote       $0E
000968E3 E701                       	dc.b	smpsNoAttack, $01
000968E5 E10F                       	smpsAlterNote       $0F
000968E7 E701                       	dc.b	smpsNoAttack, $01
000968E9 E10C                       	smpsAlterNote       $0C
000968EB CC0D                       	dc.b	nEb6, $0D
000968ED E109                       	smpsAlterNote       $09
000968EF E701                       	dc.b	smpsNoAttack, $01
000968F1 E105                       	smpsAlterNote       $05
000968F3 E701                       	dc.b	smpsNoAttack, $01
000968F5 E106                       	smpsAlterNote       $06
000968F7 E701                       	dc.b	smpsNoAttack, $01
000968F9 E10C                       	smpsAlterNote       $0C
000968FB E701                       	dc.b	smpsNoAttack, $01
000968FD E10A                       	smpsAlterNote       $0A
000968FF C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0009690B CB0D                       	dc.b	nD6, $0D
0009690D E108                       	smpsAlterNote       $08
0009690F E701                       	dc.b	smpsNoAttack, $01
00096911 E104                       	smpsAlterNote       $04
00096913 E701                       	dc.b	smpsNoAttack, $01
00096915 E108                       	smpsAlterNote       $08
00096917 E701                       	dc.b	smpsNoAttack, $01
00096919 E10B                       	smpsAlterNote       $0B
0009691B E701                       	dc.b	smpsNoAttack, $01
0009691D E10F                       	smpsAlterNote       $0F
0009691F E701                       	dc.b	smpsNoAttack, $01
00096921 E10B                       	smpsAlterNote       $0B
00096923 E701                       	dc.b	smpsNoAttack, $01
00096925 E105                       	smpsAlterNote       $05
00096927 E701                       	dc.b	smpsNoAttack, $01
00096929 E104                       	smpsAlterNote       $04
0009692B E701                       	dc.b	smpsNoAttack, $01
0009692D E108                       	smpsAlterNote       $08
0009692F E701                       	dc.b	smpsNoAttack, $01
00096931 E10E                       	smpsAlterNote       $0E
00096933 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096937 E10B                       	smpsAlterNote       $0B
00096939 E701                       	dc.b	smpsNoAttack, $01
0009693B E105                       	smpsAlterNote       $05
0009693D E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096945 03                         	dc.b	$03
00096946 E601                       	smpsAlterVol        $01
00096948 F6F1 D1                    	smpsJump            music84_Jump01
0009694B                            
0009694B                            ; FM5 Data
0009694B                            music84_FM5:
0009694D E080                       	smpsPan             panLeft, $00
0009694F 8003                       	dc.b	nRst, $03
00096951 E10D                       	smpsAlterNote       $0D
00096953 C203 8008                  	dc.b	nF5, $03, nRst, $08
00096957 E10C                       	smpsAlterNote       $0C
00096959 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0009695D E10F                       	smpsAlterNote       $0F
0009695F BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096965 E6FE                       	smpsAlterVol        $FE
00096967 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0009696D E10D                       	smpsAlterNote       $0D
0009696F C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096975 E10C                       	smpsAlterNote       $0C
00096977 C102 8001                  	dc.b	nE5, $02, nRst, $01
0009697B E10A                       	smpsAlterNote       $0A
0009697D BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096983 03                         	dc.b	$03
00096984                            
00096984                            music84_Jump00:
00096984 8004                       	dc.b	nRst, $04
00096986 E602                       	smpsAlterVol        $02
00096988 E10D                       	smpsAlterNote       $0D
0009698A B60D                       	dc.b	nF4, $0D
0009698C E107                       	smpsAlterNote       $07
0009698E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096992 E10A                       	smpsAlterNote       $0A
00096994 E701                       	dc.b	smpsNoAttack, $01
00096996 E110                       	smpsAlterNote       $10
00096998 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009699C E10A                       	smpsAlterNote       $0A
0009699E E701                       	dc.b	smpsNoAttack, $01
000969A0 E107                       	smpsAlterNote       $07
000969A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969A6 E10D                       	smpsAlterNote       $0D
000969A8 E701                       	dc.b	smpsNoAttack, $01
000969AA E111                       	smpsAlterNote       $11
000969AC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000969B0 E10D                       	smpsAlterNote       $0D
000969B2 B80D                       	dc.b	nG4, $0D
000969B4 E107                       	smpsAlterNote       $07
000969B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969BA E10A                       	smpsAlterNote       $0A
000969BC E701                       	dc.b	smpsNoAttack, $01
000969BE E110                       	smpsAlterNote       $10
000969C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969C4 E10A                       	smpsAlterNote       $0A
000969C6 E701                       	dc.b	smpsNoAttack, $01
000969C8 E107                       	smpsAlterNote       $07
000969CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969CE E10D                       	smpsAlterNote       $0D
000969D0 E701                       	dc.b	smpsNoAttack, $01
000969D2 E111                       	smpsAlterNote       $11
000969D4 E701                       	dc.b	smpsNoAttack, $01
000969D6 E110                       	smpsAlterNote       $10
000969D8 E701                       	dc.b	smpsNoAttack, $01
000969DA E10A                       	smpsAlterNote       $0A
000969DC E701                       	dc.b	smpsNoAttack, $01
000969DE E106                       	smpsAlterNote       $06
000969E0 E701                       	dc.b	smpsNoAttack, $01
000969E2 E10A                       	smpsAlterNote       $0A
000969E4 E701                       	dc.b	smpsNoAttack, $01
000969E6 E10D                       	smpsAlterNote       $0D
000969E8 E701                       	dc.b	smpsNoAttack, $01
000969EA E111                       	smpsAlterNote       $11
000969EC E701                       	dc.b	smpsNoAttack, $01
000969EE E10D                       	smpsAlterNote       $0D
000969F0 E701                       	dc.b	smpsNoAttack, $01
000969F2 E10F                       	smpsAlterNote       $0F
000969F4 BA0E                       	dc.b	nA4, $0E
000969F6 E109                       	smpsAlterNote       $09
000969F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969FC E10F                       	smpsAlterNote       $0F
000969FE E701                       	dc.b	smpsNoAttack, $01
00096A00 E112                       	smpsAlterNote       $12
00096A02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A06 E10C                       	smpsAlterNote       $0C
00096A08 E701                       	dc.b	smpsNoAttack, $01
00096A0A E108                       	smpsAlterNote       $08
00096A0C E701                       	dc.b	smpsNoAttack, $01
00096A0E E109                       	smpsAlterNote       $09
00096A10 E701                       	dc.b	smpsNoAttack, $01
00096A12 E10F                       	smpsAlterNote       $0F
00096A14 E701                       	dc.b	smpsNoAttack, $01
00096A16 E113                       	smpsAlterNote       $13
00096A18 E701                       	dc.b	smpsNoAttack, $01
00096A1A E10F                       	smpsAlterNote       $0F
00096A1C E701                       	dc.b	smpsNoAttack, $01
00096A1E E109                       	smpsAlterNote       $09
00096A20 E701                       	dc.b	smpsNoAttack, $01
00096A22 E108                       	smpsAlterNote       $08
00096A24 E701                       	dc.b	smpsNoAttack, $01
00096A26 E10C                       	smpsAlterNote       $0C
00096A28 E701                       	dc.b	smpsNoAttack, $01
00096A2A E112                       	smpsAlterNote       $12
00096A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A30 E10F                       	smpsAlterNote       $0F
00096A32 E701                       	dc.b	smpsNoAttack, $01
00096A34 E109                       	smpsAlterNote       $09
00096A36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A3A E10F                       	smpsAlterNote       $0F
00096A3C E701                       	dc.b	smpsNoAttack, $01
00096A3E E112                       	smpsAlterNote       $12
00096A40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A44 E10C                       	smpsAlterNote       $0C
00096A46 E701                       	dc.b	smpsNoAttack, $01
00096A48 E108                       	smpsAlterNote       $08
00096A4A E701                       	dc.b	smpsNoAttack, $01
00096A4C E109                       	smpsAlterNote       $09
00096A4E E701                       	dc.b	smpsNoAttack, $01
00096A50 E10F                       	smpsAlterNote       $0F
00096A52 E701                       	dc.b	smpsNoAttack, $01
00096A54 E113                       	smpsAlterNote       $13
00096A56 E701                       	dc.b	smpsNoAttack, $01
00096A58 E10F                       	smpsAlterNote       $0F
00096A5A E701                       	dc.b	smpsNoAttack, $01
00096A5C E10C                       	smpsAlterNote       $0C
00096A5E E701                       	dc.b	smpsNoAttack, $01
00096A60 E108                       	smpsAlterNote       $08
00096A62 E701                       	dc.b	smpsNoAttack, $01
00096A64 E109                       	smpsAlterNote       $09
00096A66 8001                       	dc.b	nRst, $01
00096A68 E10C                       	smpsAlterNote       $0C
00096A6A B50A                       	dc.b	nE4, $0A
00096A6C E10D                       	smpsAlterNote       $0D
00096A6E B60D                       	dc.b	nF4, $0D
00096A70 E10A                       	smpsAlterNote       $0A
00096A72 E701                       	dc.b	smpsNoAttack, $01
00096A74 E106                       	smpsAlterNote       $06
00096A76 E701                       	dc.b	smpsNoAttack, $01
00096A78 E107                       	smpsAlterNote       $07
00096A7A E701                       	dc.b	smpsNoAttack, $01
00096A7C E10D                       	smpsAlterNote       $0D
00096A7E E701                       	dc.b	smpsNoAttack, $01
00096A80 E111                       	smpsAlterNote       $11
00096A82 E701                       	dc.b	smpsNoAttack, $01
00096A84 E10D                       	smpsAlterNote       $0D
00096A86 E701                       	dc.b	smpsNoAttack, $01
00096A88 E10A                       	smpsAlterNote       $0A
00096A8A E701                       	dc.b	smpsNoAttack, $01
00096A8C E106                       	smpsAlterNote       $06
00096A8E E701                       	dc.b	smpsNoAttack, $01
00096A90 E10A                       	smpsAlterNote       $0A
00096A92 E701                       	dc.b	smpsNoAttack, $01
00096A94 E110                       	smpsAlterNote       $10
00096A96 E701                       	dc.b	smpsNoAttack, $01
00096A98 E111                       	smpsAlterNote       $11
00096A9A E701                       	dc.b	smpsNoAttack, $01
00096A9C E10D                       	smpsAlterNote       $0D
00096A9E B80D                       	dc.b	nG4, $0D
00096AA0 E10A                       	smpsAlterNote       $0A
00096AA2 E701                       	dc.b	smpsNoAttack, $01
00096AA4 E106                       	smpsAlterNote       $06
00096AA6 E701                       	dc.b	smpsNoAttack, $01
00096AA8 E107                       	smpsAlterNote       $07
00096AAA E701                       	dc.b	smpsNoAttack, $01
00096AAC E10D                       	smpsAlterNote       $0D
00096AAE E701                       	dc.b	smpsNoAttack, $01
00096AB0 E111                       	smpsAlterNote       $11
00096AB2 E701                       	dc.b	smpsNoAttack, $01
00096AB4 E10D                       	smpsAlterNote       $0D
00096AB6 E701                       	dc.b	smpsNoAttack, $01
00096AB8 E10A                       	smpsAlterNote       $0A
00096ABA E701                       	dc.b	smpsNoAttack, $01
00096ABC E106                       	smpsAlterNote       $06
00096ABE E701                       	dc.b	smpsNoAttack, $01
00096AC0 E10A                       	smpsAlterNote       $0A
00096AC2 E701                       	dc.b	smpsNoAttack, $01
00096AC4 E110                       	smpsAlterNote       $10
00096AC6 E701                       	dc.b	smpsNoAttack, $01
00096AC8 E111                       	smpsAlterNote       $11
00096ACA E701                       	dc.b	smpsNoAttack, $01
00096ACC E10D                       	smpsAlterNote       $0D
00096ACE E701                       	dc.b	smpsNoAttack, $01
00096AD0 E107                       	smpsAlterNote       $07
00096AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AD6 E10A                       	smpsAlterNote       $0A
00096AD8 E701                       	dc.b	smpsNoAttack, $01
00096ADA E110                       	smpsAlterNote       $10
00096ADC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AE0 E10D                       	smpsAlterNote       $0D
00096AE2 8001                       	dc.b	nRst, $01
00096AE4 E10F                       	smpsAlterNote       $0F
00096AE6 BA0D                       	dc.b	nA4, $0D
00096AE8 E10C                       	smpsAlterNote       $0C
00096AEA E701                       	dc.b	smpsNoAttack, $01
00096AEC E108                       	smpsAlterNote       $08
00096AEE E701                       	dc.b	smpsNoAttack, $01
00096AF0 E10C                       	smpsAlterNote       $0C
00096AF2 E701                       	dc.b	smpsNoAttack, $01
00096AF4 E112                       	smpsAlterNote       $12
00096AF6 E701                       	dc.b	smpsNoAttack, $01
00096AF8 E113                       	smpsAlterNote       $13
00096AFA E701                       	dc.b	smpsNoAttack, $01
00096AFC E10F                       	smpsAlterNote       $0F
00096AFE E701                       	dc.b	smpsNoAttack, $01
00096B00 E109                       	smpsAlterNote       $09
00096B02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B06 E10C                       	smpsAlterNote       $0C
00096B08 E701                       	dc.b	smpsNoAttack, $01
00096B0A E112                       	smpsAlterNote       $12
00096B0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B10 E10C                       	smpsAlterNote       $0C
00096B12 E701                       	dc.b	smpsNoAttack, $01
00096B14 E109                       	smpsAlterNote       $09
00096B16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B1A E10F                       	smpsAlterNote       $0F
00096B1C E701                       	dc.b	smpsNoAttack, $01
00096B1E E113                       	smpsAlterNote       $13
00096B20 E701                       	dc.b	smpsNoAttack, $01
00096B22 E112                       	smpsAlterNote       $12
00096B24 E701                       	dc.b	smpsNoAttack, $01
00096B26 E10C                       	smpsAlterNote       $0C
00096B28 E701                       	dc.b	smpsNoAttack, $01
00096B2A E108                       	smpsAlterNote       $08
00096B2C E701                       	dc.b	smpsNoAttack, $01
00096B2E E10C                       	smpsAlterNote       $0C
00096B30 E701                       	dc.b	smpsNoAttack, $01
00096B32 E10F                       	smpsAlterNote       $0F
00096B34 E701                       	dc.b	smpsNoAttack, $01
00096B36 E113                       	smpsAlterNote       $13
00096B38 E701                       	dc.b	smpsNoAttack, $01
00096B3A E10F                       	smpsAlterNote       $0F
00096B3C E701                       	dc.b	smpsNoAttack, $01
00096B3E E109                       	smpsAlterNote       $09
00096B40 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096B44 E10D                       	smpsAlterNote       $0D
00096B46 B609 8001                  	dc.b	nF4, $09, nRst, $01
00096B4A E10C                       	smpsAlterNote       $0C
00096B4C B506 8001                  	dc.b	nE4, $06, nRst, $01
00096B50 E10B                       	smpsAlterNote       $0B
00096B52 B30D                       	dc.b	nD4, $0D
00096B54 E10C                       	smpsAlterNote       $0C
00096B56 B503 8001                  	dc.b	nE4, $03, nRst, $01
00096B5A E10D                       	smpsAlterNote       $0D
00096B5C B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096B64 E109                       	smpsAlterNote       $09
00096B66 E701                       	dc.b	smpsNoAttack, $01
00096B68 E108                       	smpsAlterNote       $08
00096B6A E701                       	dc.b	smpsNoAttack, $01
00096B6C E10C                       	smpsAlterNote       $0C
00096B6E E701                       	dc.b	smpsNoAttack, $01
00096B70 E112                       	smpsAlterNote       $12
00096B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B76 E10F                       	smpsAlterNote       $0F
00096B78 E701                       	dc.b	smpsNoAttack, $01
00096B7A E109                       	smpsAlterNote       $09
00096B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B80 E10F                       	smpsAlterNote       $0F
00096B82 E701                       	dc.b	smpsNoAttack, $01
00096B84 E112                       	smpsAlterNote       $12
00096B86 E701                       	dc.b	smpsNoAttack, $01
00096B88 E113                       	smpsAlterNote       $13
00096B8A 8001                       	dc.b	nRst, $01
00096B8C E10D                       	smpsAlterNote       $0D
00096B8E C20D                       	dc.b	nF5, $0D
00096B90 E107                       	smpsAlterNote       $07
00096B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B96 E10A                       	smpsAlterNote       $0A
00096B98 E701                       	dc.b	smpsNoAttack, $01
00096B9A E110                       	smpsAlterNote       $10
00096B9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BA0 E10A                       	smpsAlterNote       $0A
00096BA2 E701                       	dc.b	smpsNoAttack, $01
00096BA4 E107                       	smpsAlterNote       $07
00096BA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BAA E10D                       	smpsAlterNote       $0D
00096BAC E701                       	dc.b	smpsNoAttack, $01
00096BAE E111                       	smpsAlterNote       $11
00096BB0 E701                       	dc.b	smpsNoAttack, $01
00096BB2 E110                       	smpsAlterNote       $10
00096BB4 E701                       	dc.b	smpsNoAttack, $01
00096BB6 E10A                       	smpsAlterNote       $0A
00096BB8 E701                       	dc.b	smpsNoAttack, $01
00096BBA E106                       	smpsAlterNote       $06
00096BBC E701                       	dc.b	smpsNoAttack, $01
00096BBE E10A                       	smpsAlterNote       $0A
00096BC0 E701                       	dc.b	smpsNoAttack, $01
00096BC2 E10D                       	smpsAlterNote       $0D
00096BC4 E701                       	dc.b	smpsNoAttack, $01
00096BC6 E111                       	smpsAlterNote       $11
00096BC8 E701                       	dc.b	smpsNoAttack, $01
00096BCA E10D                       	smpsAlterNote       $0D
00096BCC E701                       	dc.b	smpsNoAttack, $01
00096BCE E107                       	smpsAlterNote       $07
00096BD0 E701                       	dc.b	smpsNoAttack, $01
00096BD2 E106                       	smpsAlterNote       $06
00096BD4 E701                       	dc.b	smpsNoAttack, $01
00096BD6 E10A                       	smpsAlterNote       $0A
00096BD8 E701                       	dc.b	smpsNoAttack, $01
00096BDA E110                       	smpsAlterNote       $10
00096BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BE0 E10D                       	smpsAlterNote       $0D
00096BE2 E701                       	dc.b	smpsNoAttack, $01
00096BE4 E107                       	smpsAlterNote       $07
00096BE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BEA E10D                       	smpsAlterNote       $0D
00096BEC E701                       	dc.b	smpsNoAttack, $01
00096BEE E110                       	smpsAlterNote       $10
00096BF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BF4 E10A                       	smpsAlterNote       $0A
00096BF6 E701                       	dc.b	smpsNoAttack, $01
00096BF8 E106                       	smpsAlterNote       $06
00096BFA E701                       	dc.b	smpsNoAttack, $01
00096BFC E107                       	smpsAlterNote       $07
00096BFE E701                       	dc.b	smpsNoAttack, $01
00096C00 E10D                       	smpsAlterNote       $0D
00096C02 E701                       	dc.b	smpsNoAttack, $01
00096C04 E111                       	smpsAlterNote       $11
00096C06 E701                       	dc.b	smpsNoAttack, $01
00096C08 E10D                       	smpsAlterNote       $0D
00096C0A E701                       	dc.b	smpsNoAttack, $01
00096C0C E10A                       	smpsAlterNote       $0A
00096C0E E701                       	dc.b	smpsNoAttack, $01
00096C10 E106                       	smpsAlterNote       $06
00096C12 E701                       	dc.b	smpsNoAttack, $01
00096C14 E10A                       	smpsAlterNote       $0A
00096C16 E701                       	dc.b	smpsNoAttack, $01
00096C18 E110                       	smpsAlterNote       $10
00096C1A E701                       	dc.b	smpsNoAttack, $01
00096C1C E111                       	smpsAlterNote       $11
00096C1E E701                       	dc.b	smpsNoAttack, $01
00096C20 E10D                       	smpsAlterNote       $0D
00096C22 E701                       	dc.b	smpsNoAttack, $01
00096C24 E107                       	smpsAlterNote       $07
00096C26 E701                       	dc.b	smpsNoAttack, $01
00096C28 E10D                       	smpsAlterNote       $0D
00096C2A C207                       	dc.b	nF5, $07
00096C2C E10C                       	smpsAlterNote       $0C
00096C2E C10D                       	dc.b	nE5, $0D
00096C30 E109                       	smpsAlterNote       $09
00096C32 E701                       	dc.b	smpsNoAttack, $01
00096C34 E106                       	smpsAlterNote       $06
00096C36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C3A E10C                       	smpsAlterNote       $0C
00096C3C E701                       	dc.b	smpsNoAttack, $01
00096C3E E110                       	smpsAlterNote       $10
00096C40 E701                       	dc.b	smpsNoAttack, $01
00096C42 E10F                       	smpsAlterNote       $0F
00096C44 E701                       	dc.b	smpsNoAttack, $01
00096C46 E109                       	smpsAlterNote       $09
00096C48 E701                       	dc.b	smpsNoAttack, $01
00096C4A E105                       	smpsAlterNote       $05
00096C4C E701                       	dc.b	smpsNoAttack, $01
00096C4E E109                       	smpsAlterNote       $09
00096C50 E701                       	dc.b	smpsNoAttack, $01
00096C52 E10C                       	smpsAlterNote       $0C
00096C54 E701                       	dc.b	smpsNoAttack, $01
00096C56 E110                       	smpsAlterNote       $10
00096C58 E701                       	dc.b	smpsNoAttack, $01
00096C5A E10B                       	smpsAlterNote       $0B
00096C5C BF0D                       	dc.b	nD5, $0D
00096C5E E108                       	smpsAlterNote       $08
00096C60 E701                       	dc.b	smpsNoAttack, $01
00096C62 E105                       	smpsAlterNote       $05
00096C64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C68 E10B                       	smpsAlterNote       $0B
00096C6A E701                       	dc.b	smpsNoAttack, $01
00096C6C E10F                       	smpsAlterNote       $0F
00096C6E E701                       	dc.b	smpsNoAttack, $01
00096C70 E10E                       	smpsAlterNote       $0E
00096C72 E701                       	dc.b	smpsNoAttack, $01
00096C74 E108                       	smpsAlterNote       $08
00096C76 E701                       	dc.b	smpsNoAttack, $01
00096C78 E104                       	smpsAlterNote       $04
00096C7A E701                       	dc.b	smpsNoAttack, $01
00096C7C E108                       	smpsAlterNote       $08
00096C7E E701                       	dc.b	smpsNoAttack, $01
00096C80 E10E                       	smpsAlterNote       $0E
00096C82 E701                       	dc.b	smpsNoAttack, $01
00096C84 E10F                       	smpsAlterNote       $0F
00096C86 E701                       	dc.b	smpsNoAttack, $01
00096C88 E10B                       	smpsAlterNote       $0B
00096C8A E701                       	dc.b	smpsNoAttack, $01
00096C8C E105                       	smpsAlterNote       $05
00096C8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C92 E108                       	smpsAlterNote       $08
00096C94 E701                       	dc.b	smpsNoAttack, $01
00096C96 E10E                       	smpsAlterNote       $0E
00096C98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C9C E108                       	smpsAlterNote       $08
00096C9E E701                       	dc.b	smpsNoAttack, $01
00096CA0 E105                       	smpsAlterNote       $05
00096CA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CA6 E10B                       	smpsAlterNote       $0B
00096CA8 E701                       	dc.b	smpsNoAttack, $01
00096CAA E10F                       	smpsAlterNote       $0F
00096CAC E701                       	dc.b	smpsNoAttack, $01
00096CAE E10E                       	smpsAlterNote       $0E
00096CB0 E701                       	dc.b	smpsNoAttack, $01
00096CB2 E108                       	smpsAlterNote       $08
00096CB4 E701                       	dc.b	smpsNoAttack, $01
00096CB6 E104                       	smpsAlterNote       $04
00096CB8 E701                       	dc.b	smpsNoAttack, $01
00096CBA E108                       	smpsAlterNote       $08
00096CBC E701                       	dc.b	smpsNoAttack, $01
00096CBE E10B                       	smpsAlterNote       $0B
00096CC0 E701                       	dc.b	smpsNoAttack, $01
00096CC2 E10F                       	smpsAlterNote       $0F
00096CC4 E701                       	dc.b	smpsNoAttack, $01
00096CC6 E10B                       	smpsAlterNote       $0B
00096CC8 E701                       	dc.b	smpsNoAttack, $01
00096CCA E105                       	smpsAlterNote       $05
00096CCC E701                       	dc.b	smpsNoAttack, $01
00096CCE E104                       	smpsAlterNote       $04
00096CD0 E701                       	dc.b	smpsNoAttack, $01
00096CD2 E108                       	smpsAlterNote       $08
00096CD4 E701                       	dc.b	smpsNoAttack, $01
00096CD6 E10E                       	smpsAlterNote       $0E
00096CD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CDC E10B                       	smpsAlterNote       $0B
00096CDE E701                       	dc.b	smpsNoAttack, $01
00096CE0 E105                       	smpsAlterNote       $05
00096CE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CE6 E10B                       	smpsAlterNote       $0B
00096CE8 E701                       	dc.b	smpsNoAttack, $01
00096CEA E10E                       	smpsAlterNote       $0E
00096CEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CF0 E108                       	smpsAlterNote       $08
00096CF2 E701                       	dc.b	smpsNoAttack, $01
00096CF4 E105                       	smpsAlterNote       $05
00096CF6 8001                       	dc.b	nRst, $01
00096CFA E601                       	smpsAlterVol        $01
00096CFC E10B                       	smpsAlterNote       $0B
00096CFE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096D0A 8004                       	dc.b	nRst, $04
00096D0E E6FF                       	smpsAlterVol        $FF
00096D10 E10D                       	smpsAlterNote       $0D
00096D12 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096D1A E10C                       	smpsAlterNote       $0C
00096D1C E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096D21 E10D                       	smpsAlterNote       $0D
00096D23 B60D                       	dc.b	nF4, $0D
00096D25 E10A                       	smpsAlterNote       $0A
00096D27 E701                       	dc.b	smpsNoAttack, $01
00096D29 E106                       	smpsAlterNote       $06
00096D2B E701                       	dc.b	smpsNoAttack, $01
00096D2D E10A                       	smpsAlterNote       $0A
00096D2F E701                       	dc.b	smpsNoAttack, $01
00096D31 E110                       	smpsAlterNote       $10
00096D33 E701                       	dc.b	smpsNoAttack, $01
00096D35 E111                       	smpsAlterNote       $11
00096D37 E701                       	dc.b	smpsNoAttack, $01
00096D39 E10D                       	smpsAlterNote       $0D
00096D3B E701                       	dc.b	smpsNoAttack, $01
00096D3D E107                       	smpsAlterNote       $07
00096D3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D43 E10A                       	smpsAlterNote       $0A
00096D45 E701                       	dc.b	smpsNoAttack, $01
00096D47 E110                       	smpsAlterNote       $10
00096D49 E701                       	dc.b	smpsNoAttack, $01
00096D4B E111                       	smpsAlterNote       $11
00096D4D 8001                       	dc.b	nRst, $01
00096D4F E10D                       	smpsAlterNote       $0D
00096D51 B80D                       	dc.b	nG4, $0D
00096D53 E10A                       	smpsAlterNote       $0A
00096D55 E701                       	dc.b	smpsNoAttack, $01
00096D57 E106                       	smpsAlterNote       $06
00096D59 E701                       	dc.b	smpsNoAttack, $01
00096D5B E10A                       	smpsAlterNote       $0A
00096D5D E701                       	dc.b	smpsNoAttack, $01
00096D5F E110                       	smpsAlterNote       $10
00096D61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D65 E10D                       	smpsAlterNote       $0D
00096D67 E701                       	dc.b	smpsNoAttack, $01
00096D69 E107                       	smpsAlterNote       $07
00096D6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D6F E10D                       	smpsAlterNote       $0D
00096D71 E701                       	dc.b	smpsNoAttack, $01
00096D73 E110                       	smpsAlterNote       $10
00096D75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D79 E10A                       	smpsAlterNote       $0A
00096D7B E701                       	dc.b	smpsNoAttack, $01
00096D7D E106                       	smpsAlterNote       $06
00096D7F E701                       	dc.b	smpsNoAttack, $01
00096D81 E107                       	smpsAlterNote       $07
00096D83 E701                       	dc.b	smpsNoAttack, $01
00096D85 E10D                       	smpsAlterNote       $0D
00096D87 E701                       	dc.b	smpsNoAttack, $01
00096D89 E111                       	smpsAlterNote       $11
00096D8B E701                       	dc.b	smpsNoAttack, $01
00096D8D E10D                       	smpsAlterNote       $0D
00096D8F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D93 E10F                       	smpsAlterNote       $0F
00096D95 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096D99 E110                       	smpsAlterNote       $10
00096D9B BB03                       	dc.b	nBb4, $03
00096D9D E10F                       	smpsAlterNote       $0F
00096D9F BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096DA5 E110                       	smpsAlterNote       $10
00096DA7 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096DAB E10F                       	smpsAlterNote       $0F
00096DAD C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096DB3 E110                       	smpsAlterNote       $10
00096DB5 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096DB9 E10F                       	smpsAlterNote       $0F
00096DBB D20D                       	dc.b	nA6, $0D
00096DBD E10C                       	smpsAlterNote       $0C
00096DBF E701                       	dc.b	smpsNoAttack, $01
00096DC1 E108                       	smpsAlterNote       $08
00096DC3 E701                       	dc.b	smpsNoAttack, $01
00096DC5 E10C                       	smpsAlterNote       $0C
00096DC7 E701                       	dc.b	smpsNoAttack, $01
00096DC9 E10F                       	smpsAlterNote       $0F
00096DCB E701                       	dc.b	smpsNoAttack, $01
00096DCD E113                       	smpsAlterNote       $13
00096DCF E701                       	dc.b	smpsNoAttack, $01
00096DD1 E10F                       	smpsAlterNote       $0F
00096DD3 E701                       	dc.b	smpsNoAttack, $01
00096DD5 E109                       	smpsAlterNote       $09
00096DD7 E701                       	dc.b	smpsNoAttack, $01
00096DD9 E108                       	smpsAlterNote       $08
00096DDB E701                       	dc.b	smpsNoAttack, $01
00096DDD E10C                       	smpsAlterNote       $0C
00096DDF E701                       	dc.b	smpsNoAttack, $01
00096DE1 E112                       	smpsAlterNote       $12
00096DE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DE7 E10F                       	smpsAlterNote       $0F
00096DE9 E701                       	dc.b	smpsNoAttack, $01
00096DEB E109                       	smpsAlterNote       $09
00096DED E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096DF3 E10D                       	smpsAlterNote       $0D
00096DF5 CE07                       	dc.b	nF6, $07
00096DF7 E10C                       	smpsAlterNote       $0C
00096DF9 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096DFD E10D                       	smpsAlterNote       $0D
00096DFF CE03                       	dc.b	nF6, $03
00096E01 E10C                       	smpsAlterNote       $0C
00096E03 CC0D                       	dc.b	nEb6, $0D
00096E05 E109                       	smpsAlterNote       $09
00096E07 E701                       	dc.b	smpsNoAttack, $01
00096E09 E106                       	smpsAlterNote       $06
00096E0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E0F E10C                       	smpsAlterNote       $0C
00096E11 E701                       	dc.b	smpsNoAttack, $01
00096E13 E110                       	smpsAlterNote       $10
00096E15 E701                       	dc.b	smpsNoAttack, $01
00096E17 E10F                       	smpsAlterNote       $0F
00096E19 E701                       	dc.b	smpsNoAttack, $01
00096E1B E109                       	smpsAlterNote       $09
00096E1D E701                       	dc.b	smpsNoAttack, $01
00096E1F E105                       	smpsAlterNote       $05
00096E21 E701                       	dc.b	smpsNoAttack, $01
00096E23 E109                       	smpsAlterNote       $09
00096E25 E701                       	dc.b	smpsNoAttack, $01
00096E27 E10C                       	smpsAlterNote       $0C
00096E29 E701                       	dc.b	smpsNoAttack, $01
00096E2B E110                       	smpsAlterNote       $10
00096E2D E701                       	dc.b	smpsNoAttack, $01
00096E2F E10C                       	smpsAlterNote       $0C
00096E31 E701                       	dc.b	smpsNoAttack, $01
00096E33 E106                       	smpsAlterNote       $06
00096E35 E701                       	dc.b	smpsNoAttack, $01
00096E37 E105                       	smpsAlterNote       $05
00096E39 E701                       	dc.b	smpsNoAttack, $01
00096E3B E109                       	smpsAlterNote       $09
00096E3D E701                       	dc.b	smpsNoAttack, $01
00096E3F E10F                       	smpsAlterNote       $0F
00096E41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E45 E10C                       	smpsAlterNote       $0C
00096E47 E701                       	dc.b	smpsNoAttack, $01
00096E49 E10B                       	smpsAlterNote       $0B
00096E4B CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096E55 E10F                       	smpsAlterNote       $0F
00096E57 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096E61 E10D                       	smpsAlterNote       $0D
00096E63 C203                       	dc.b	nF5, $03
00096E65 E10C                       	smpsAlterNote       $0C
00096E67 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096E6B E10D                       	smpsAlterNote       $0D
00096E6D C20D                       	dc.b	nF5, $0D
00096E6F E10C                       	smpsAlterNote       $0C
00096E71 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096E75 E10B                       	smpsAlterNote       $0B
00096E77 BF0D                       	dc.b	nD5, $0D
00096E79 E108                       	smpsAlterNote       $08
00096E7B E701                       	dc.b	smpsNoAttack, $01
00096E7D E104                       	smpsAlterNote       $04
00096E7F E701                       	dc.b	smpsNoAttack, $01
00096E81 E108                       	smpsAlterNote       $08
00096E83 E701                       	dc.b	smpsNoAttack, $01
00096E85 E10E                       	smpsAlterNote       $0E
00096E87 E701                       	dc.b	smpsNoAttack, $01
00096E89 E10F                       	smpsAlterNote       $0F
00096E8B E701                       	dc.b	smpsNoAttack, $01
00096E8D E10B                       	smpsAlterNote       $0B
00096E8F E701                       	dc.b	smpsNoAttack, $01
00096E91 E105                       	smpsAlterNote       $05
00096E93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E97 E108                       	smpsAlterNote       $08
00096E99 E701                       	dc.b	smpsNoAttack, $01
00096E9B E10E                       	smpsAlterNote       $0E
00096E9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EA1 E108                       	smpsAlterNote       $08
00096EA3 E701                       	dc.b	smpsNoAttack, $01
00096EA5 E105                       	smpsAlterNote       $05
00096EA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EAB E10B                       	smpsAlterNote       $0B
00096EAD E701                       	dc.b	smpsNoAttack, $01
00096EAF E10F                       	smpsAlterNote       $0F
00096EB1 E701                       	dc.b	smpsNoAttack, $01
00096EB3 E10E                       	smpsAlterNote       $0E
00096EB5 E701                       	dc.b	smpsNoAttack, $01
00096EB7 E108                       	smpsAlterNote       $08
00096EB9 E701                       	dc.b	smpsNoAttack, $01
00096EBB E104                       	smpsAlterNote       $04
00096EBD E701                       	dc.b	smpsNoAttack, $01
00096EBF E108                       	smpsAlterNote       $08
00096EC1 E701                       	dc.b	smpsNoAttack, $01
00096EC3 E10B                       	smpsAlterNote       $0B
00096EC5 E701                       	dc.b	smpsNoAttack, $01
00096EC7 E10F                       	smpsAlterNote       $0F
00096EC9 E701                       	dc.b	smpsNoAttack, $01
00096ECB E10B                       	smpsAlterNote       $0B
00096ECD E701                       	dc.b	smpsNoAttack, $01
00096ECF E105                       	smpsAlterNote       $05
00096ED1 E701                       	dc.b	smpsNoAttack, $01
00096ED3 E104                       	smpsAlterNote       $04
00096ED5 E701                       	dc.b	smpsNoAttack, $01
00096ED7 E108                       	smpsAlterNote       $08
00096ED9 E701                       	dc.b	smpsNoAttack, $01
00096EDB E10E                       	smpsAlterNote       $0E
00096EDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EE1 E10B                       	smpsAlterNote       $0B
00096EE3 E701                       	dc.b	smpsNoAttack, $01
00096EE5 E105                       	smpsAlterNote       $05
00096EE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EEB E10B                       	smpsAlterNote       $0B
00096EED E701                       	dc.b	smpsNoAttack, $01
00096EEF E10E                       	smpsAlterNote       $0E
00096EF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EF5 E108                       	smpsAlterNote       $08
00096EF7 E701                       	dc.b	smpsNoAttack, $01
00096EF9 E104                       	smpsAlterNote       $04
00096EFB E701                       	dc.b	smpsNoAttack, $01
00096EFD E105                       	smpsAlterNote       $05
00096EFF E701                       	dc.b	smpsNoAttack, $01
00096F01 E10B                       	smpsAlterNote       $0B
00096F03 E701                       	dc.b	smpsNoAttack, $01
00096F05 E10F                       	smpsAlterNote       $0F
00096F07 E701                       	dc.b	smpsNoAttack, $01
00096F09 E10B                       	smpsAlterNote       $0B
00096F0B E701                       	dc.b	smpsNoAttack, $01
00096F0D E108                       	smpsAlterNote       $08
00096F0F E701                       	dc.b	smpsNoAttack, $01
00096F11 E104                       	smpsAlterNote       $04
00096F13 E701                       	dc.b	smpsNoAttack, $01
00096F15 E108                       	smpsAlterNote       $08
00096F17 E701                       	dc.b	smpsNoAttack, $01
00096F19 E10E                       	smpsAlterNote       $0E
00096F1B E701                       	dc.b	smpsNoAttack, $01
00096F1D E10F                       	smpsAlterNote       $0F
00096F1F E701                       	dc.b	smpsNoAttack, $01
00096F21 E10B                       	smpsAlterNote       $0B
00096F23 E701                       	dc.b	smpsNoAttack, $01
00096F25 E105                       	smpsAlterNote       $05
00096F27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F2B E108                       	smpsAlterNote       $08
00096F2D E701                       	dc.b	smpsNoAttack, $01
00096F2F E10E                       	smpsAlterNote       $0E
00096F31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F35 E108                       	smpsAlterNote       $08
00096F37 E701                       	dc.b	smpsNoAttack, $01
00096F39 E105                       	smpsAlterNote       $05
00096F3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F3F E10B                       	smpsAlterNote       $0B
00096F41 E701                       	dc.b	smpsNoAttack, $01
00096F43 E10F                       	smpsAlterNote       $0F
00096F45 E701                       	dc.b	smpsNoAttack, $01
00096F47 E10E                       	smpsAlterNote       $0E
00096F49 E701                       	dc.b	smpsNoAttack, $01
00096F4B E108                       	smpsAlterNote       $08
00096F4D E701                       	dc.b	smpsNoAttack, $01
00096F4F E104                       	smpsAlterNote       $04
00096F51 E701                       	dc.b	smpsNoAttack, $01
00096F53 E108                       	smpsAlterNote       $08
00096F55 E701                       	dc.b	smpsNoAttack, $01
00096F57 E10B                       	smpsAlterNote       $0B
00096F59 E701                       	dc.b	smpsNoAttack, $01
00096F5B E10F                       	smpsAlterNote       $0F
00096F5D E701                       	dc.b	smpsNoAttack, $01
00096F5F E10B                       	smpsAlterNote       $0B
00096F61 E701                       	dc.b	smpsNoAttack, $01
00096F63 E105                       	smpsAlterNote       $05
00096F65 E701                       	dc.b	smpsNoAttack, $01
00096F67 E104                       	smpsAlterNote       $04
00096F69 E701                       	dc.b	smpsNoAttack, $01
00096F6B E105                       	smpsAlterNote       $05
00096F6D 8001                       	dc.b	nRst, $01
00096F6F E10D                       	smpsAlterNote       $0D
00096F71 C20D                       	dc.b	nF5, $0D
00096F73 E107                       	smpsAlterNote       $07
00096F75 E701                       	dc.b	smpsNoAttack, $01
00096F77 E106                       	smpsAlterNote       $06
00096F79 E701                       	dc.b	smpsNoAttack, $01
00096F7B E10A                       	smpsAlterNote       $0A
00096F7D E701                       	dc.b	smpsNoAttack, $01
00096F7F E110                       	smpsAlterNote       $10
00096F81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F85 E10D                       	smpsAlterNote       $0D
00096F87 E701                       	dc.b	smpsNoAttack, $01
00096F89 E107                       	smpsAlterNote       $07
00096F8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F8F E10D                       	smpsAlterNote       $0D
00096F91 E701                       	dc.b	smpsNoAttack, $01
00096F93 E110                       	smpsAlterNote       $10
00096F95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F99 E10A                       	smpsAlterNote       $0A
00096F9B E701                       	dc.b	smpsNoAttack, $01
00096F9D E106                       	smpsAlterNote       $06
00096F9F E701                       	dc.b	smpsNoAttack, $01
00096FA1 E107                       	smpsAlterNote       $07
00096FA3 E701                       	dc.b	smpsNoAttack, $01
00096FA5 E10D                       	smpsAlterNote       $0D
00096FA7 E701                       	dc.b	smpsNoAttack, $01
00096FA9 E111                       	smpsAlterNote       $11
00096FAB E701                       	dc.b	smpsNoAttack, $01
00096FAD E10D                       	smpsAlterNote       $0D
00096FAF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096FB3 E10C                       	smpsAlterNote       $0C
00096FB5 C10D                       	dc.b	nE5, $0D
00096FB7 E10D                       	smpsAlterNote       $0D
00096FB9 C20A                       	dc.b	nF5, $0A
00096FBB E10C                       	smpsAlterNote       $0C
00096FBD C10E                       	dc.b	nE5, $0E
00096FBF E106                       	smpsAlterNote       $06
00096FC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FC5 E10C                       	smpsAlterNote       $0C
00096FC7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096FCB E10B                       	smpsAlterNote       $0B
00096FCD BF0D                       	dc.b	nD5, $0D
00096FCF E10C                       	smpsAlterNote       $0C
00096FD1 C107                       	dc.b	nE5, $07
00096FD3 E10D                       	smpsAlterNote       $0D
00096FD5 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00096FDF E110                       	smpsAlterNote       $10
00096FE1 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00096FE7 E10F                       	smpsAlterNote       $0F
00096FE9 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00096FF1 E10D                       	smpsAlterNote       $0D
00096FF3 D003                       	dc.b	nG6, $03
00096FF7 E0C0                       	smpsPan             panCenter, $00
00096FF9 E6FF                       	smpsAlterVol        $FF
00096FFB AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00097007 8001                       	dc.b	nRst, $01
00097009 E10C                       	smpsAlterNote       $0C
0009700B A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00097015 E604                       	smpsAlterVol        $04
00097017 E10B                       	smpsAlterNote       $0B
00097019 B306 8001                  	dc.b	nD4, $06, nRst, $01
0009701D E10F                       	smpsAlterNote       $0F
0009701F AE03                       	dc.b	nA3, $03
00097021 E10D                       	smpsAlterNote       $0D
00097023 B603 8001                  	dc.b	nF4, $03, nRst, $01
00097027 E10C                       	smpsAlterNote       $0C
00097029 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009702D E10B                       	smpsAlterNote       $0B
0009702F B302 8001                  	dc.b	nD4, $02, nRst, $01
00097033 E10A                       	smpsAlterNote       $0A
00097035 B103                       	dc.b	nC4, $03
00097037 E110                       	smpsAlterNote       $10
00097039 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009703D E10F                       	smpsAlterNote       $0F
0009703F AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00097043 E080                       	smpsPan             panLeft, $00
00097045 01                         	dc.b	$01
00097048 E6FB                       	smpsAlterVol        $FB
0009704A E1E4                       	smpsAlterNote       $E4
0009704C C501                       	dc.b	nAb5, $01
0009704E E1F4                       	smpsAlterNote       $F4
00097050 E701                       	dc.b	smpsNoAttack, $01
00097052 E104                       	smpsAlterNote       $04
00097054 E701                       	dc.b	smpsNoAttack, $01
00097056 E114                       	smpsAlterNote       $14
00097058 E701                       	dc.b	smpsNoAttack, $01
0009705A E11C                       	smpsAlterNote       $1C
0009705C E701                       	dc.b	smpsNoAttack, $01
0009705E E1EF                       	smpsAlterNote       $EF
00097060 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00097063 E1FF                       	smpsAlterNote       $FF
00097065 E701                       	dc.b	smpsNoAttack, $01
00097067 E10F                       	smpsAlterNote       $0F
00097069 C606                       	dc.b	nA5, $06
0009706B E109                       	smpsAlterNote       $09
0009706D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097071 E10F                       	smpsAlterNote       $0F
00097073 E701                       	dc.b	smpsNoAttack, $01
00097075 E112                       	smpsAlterNote       $12
00097077 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009707B E10C                       	smpsAlterNote       $0C
0009707D E701                       	dc.b	smpsNoAttack, $01
0009707F E108                       	smpsAlterNote       $08
00097081 E701                       	dc.b	smpsNoAttack, $01
00097083 E109                       	smpsAlterNote       $09
00097085 E701                       	dc.b	smpsNoAttack, $01
00097087 E10F                       	smpsAlterNote       $0F
00097089 E701                       	dc.b	smpsNoAttack, $01
0009708B E113                       	smpsAlterNote       $13
0009708D E701                       	dc.b	smpsNoAttack, $01
0009708F E10F                       	smpsAlterNote       $0F
00097091 E701                       	dc.b	smpsNoAttack, $01
00097093 E10C                       	smpsAlterNote       $0C
00097095 E701                       	dc.b	smpsNoAttack, $01
00097097 E108                       	smpsAlterNote       $08
00097099 E701                       	dc.b	smpsNoAttack, $01
0009709B E10C                       	smpsAlterNote       $0C
0009709D E701                       	dc.b	smpsNoAttack, $01
0009709F E112                       	smpsAlterNote       $12
000970A1 E701                       	dc.b	smpsNoAttack, $01
000970A3 E113                       	smpsAlterNote       $13
000970A5 E701                       	dc.b	smpsNoAttack, $01
000970A7 E10F                       	smpsAlterNote       $0F
000970A9 E701                       	dc.b	smpsNoAttack, $01
000970AB E109                       	smpsAlterNote       $09
000970AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970B1 E10C                       	smpsAlterNote       $0C
000970B3 E701                       	dc.b	smpsNoAttack, $01
000970B5 E112                       	smpsAlterNote       $12
000970B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970BB E10C                       	smpsAlterNote       $0C
000970BD E701                       	dc.b	smpsNoAttack, $01
000970BF E109                       	smpsAlterNote       $09
000970C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970C5 E10F                       	smpsAlterNote       $0F
000970C7 E701                       	dc.b	smpsNoAttack, $01
000970C9 E113                       	smpsAlterNote       $13
000970CB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000970CF E10D                       	smpsAlterNote       $0D
000970D1 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000970D7 E10C                       	smpsAlterNote       $0C
000970D9 C102 8001                  	dc.b	nE5, $02, nRst, $01
000970DD E10D                       	smpsAlterNote       $0D
000970DF C201 8001                  	dc.b	nF5, $01, nRst, $01
000970E3 E10C                       	smpsAlterNote       $0C
000970E5 C102                       	dc.b	nE5, $02
000970E7 E10B                       	smpsAlterNote       $0B
000970E9 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000970ED E10C                       	smpsAlterNote       $0C
000970EF C101 8001                  	dc.b	nE5, $01, nRst, $01
000970F3 E10B                       	smpsAlterNote       $0B
000970F5 BF02                       	dc.b	nD5, $02
000970F7 E10A                       	smpsAlterNote       $0A
000970F9 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00097103 E110                       	smpsAlterNote       $10
00097105 BB02                       	dc.b	nBb4, $02
00097107 E10A                       	smpsAlterNote       $0A
00097109 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009710D E110                       	smpsAlterNote       $10
0009710F BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097113 E10F                       	smpsAlterNote       $0F
00097115 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00097119 E110                       	smpsAlterNote       $10
0009711B BB02                       	dc.b	nBb4, $02
0009711D E10F                       	smpsAlterNote       $0F
0009711F BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00097129 E10C                       	smpsAlterNote       $0C
0009712B B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00097133 E10B                       	smpsAlterNote       $0B
00097135 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00097139 E10F                       	smpsAlterNote       $0F
0009713B BA02                       	dc.b	nA4, $02
0009713F E0C0                       	smpsPan             panCenter, $00
00097141 E601                       	smpsAlterVol        $01
00097143 E109                       	smpsAlterNote       $09
00097145 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00097151 E108                       	smpsAlterNote       $08
00097153 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00097159 E107                       	smpsAlterNote       $07
0009715B B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00097161 E109                       	smpsAlterNote       $09
00097163 B603 8001                  	dc.b	nF4, $03, nRst, $01
00097167 E108                       	smpsAlterNote       $08
00097169 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009716D E107                       	smpsAlterNote       $07
0009716F B302 8001                  	dc.b	nD4, $02, nRst, $01
00097173 E106                       	smpsAlterNote       $06
00097175 B103                       	dc.b	nC4, $03
00097177 E10C                       	smpsAlterNote       $0C
00097179 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009717F E080                       	smpsPan             panLeft, $00
00097181 07                         	dc.b	$07
00097182 E6FE                       	smpsAlterVol        $FE
00097184 E10B                       	smpsAlterNote       $0B
00097186 B20D                       	dc.b	nCs4, $0D
00097188 E105                       	smpsAlterNote       $05
0009718A E701                       	dc.b	smpsNoAttack, $01
0009718C E104                       	smpsAlterNote       $04
0009718E E701                       	dc.b	smpsNoAttack, $01
00097190 E108                       	smpsAlterNote       $08
00097192 E701                       	dc.b	smpsNoAttack, $01
00097194 E10E                       	smpsAlterNote       $0E
00097196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009719A E10B                       	smpsAlterNote       $0B
0009719C E701                       	dc.b	smpsNoAttack, $01
0009719E E105                       	smpsAlterNote       $05
000971A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971A4 E10B                       	smpsAlterNote       $0B
000971A6 E701                       	dc.b	smpsNoAttack, $01
000971A8 E10E                       	smpsAlterNote       $0E
000971AA E701                       	dc.b	smpsNoAttack, $01
000971AC E10F                       	smpsAlterNote       $0F
000971AE 8001                       	dc.b	nRst, $01
000971B0 E10B                       	smpsAlterNote       $0B
000971B2 B30D                       	dc.b	nD4, $0D
000971B4 E105                       	smpsAlterNote       $05
000971B6 E701                       	dc.b	smpsNoAttack, $01
000971B8 E104                       	smpsAlterNote       $04
000971BA E701                       	dc.b	smpsNoAttack, $01
000971BC E108                       	smpsAlterNote       $08
000971BE E701                       	dc.b	smpsNoAttack, $01
000971C0 E10E                       	smpsAlterNote       $0E
000971C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971C6 E10B                       	smpsAlterNote       $0B
000971C8 E701                       	dc.b	smpsNoAttack, $01
000971CA E105                       	smpsAlterNote       $05
000971CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971D0 E10B                       	smpsAlterNote       $0B
000971D2 E701                       	dc.b	smpsNoAttack, $01
000971D4 E10E                       	smpsAlterNote       $0E
000971D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971DA E108                       	smpsAlterNote       $08
000971DC E701                       	dc.b	smpsNoAttack, $01
000971DE E104                       	smpsAlterNote       $04
000971E0 E701                       	dc.b	smpsNoAttack, $01
000971E2 E105                       	smpsAlterNote       $05
000971E4 E701                       	dc.b	smpsNoAttack, $01
000971E6 E10B                       	smpsAlterNote       $0B
000971E8 E701                       	dc.b	smpsNoAttack, $01
000971EA E10F                       	smpsAlterNote       $0F
000971EC E701                       	dc.b	smpsNoAttack, $01
000971EE E10B                       	smpsAlterNote       $0B
000971F0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000971F4 E10C                       	smpsAlterNote       $0C
000971F6 B50D                       	dc.b	nE4, $0D
000971F8 E106                       	smpsAlterNote       $06
000971FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971FE E10C                       	smpsAlterNote       $0C
00097200 E701                       	dc.b	smpsNoAttack, $01
00097202 E10F                       	smpsAlterNote       $0F
00097204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097208 E109                       	smpsAlterNote       $09
0009720A E701                       	dc.b	smpsNoAttack, $01
0009720C E105                       	smpsAlterNote       $05
0009720E E701                       	dc.b	smpsNoAttack, $01
00097210 E106                       	smpsAlterNote       $06
00097212 E701                       	dc.b	smpsNoAttack, $01
00097214 E10C                       	smpsAlterNote       $0C
00097216 E701                       	dc.b	smpsNoAttack, $01
00097218 E110                       	smpsAlterNote       $10
0009721A E701                       	dc.b	smpsNoAttack, $01
0009721C E10B                       	smpsAlterNote       $0B
0009721E B30E                       	dc.b	nD4, $0E
00097220 E105                       	smpsAlterNote       $05
00097222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097226 E10B                       	smpsAlterNote       $0B
00097228 E701                       	dc.b	smpsNoAttack, $01
0009722A E10E                       	smpsAlterNote       $0E
0009722C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097230 E108                       	smpsAlterNote       $08
00097232 E701                       	dc.b	smpsNoAttack, $01
00097234 E104                       	smpsAlterNote       $04
00097236 E701                       	dc.b	smpsNoAttack, $01
00097238 E105                       	smpsAlterNote       $05
0009723A E701                       	dc.b	smpsNoAttack, $01
0009723C E10B                       	smpsAlterNote       $0B
0009723E E701                       	dc.b	smpsNoAttack, $01
00097240 E10F                       	smpsAlterNote       $0F
00097242 E701                       	dc.b	smpsNoAttack, $01
00097244 E10B                       	smpsAlterNote       $0B
00097246 E701                       	dc.b	smpsNoAttack, $01
00097248 E108                       	smpsAlterNote       $08
0009724A E701                       	dc.b	smpsNoAttack, $01
0009724C E104                       	smpsAlterNote       $04
0009724E E701                       	dc.b	smpsNoAttack, $01
00097250 E108                       	smpsAlterNote       $08
00097252 E701                       	dc.b	smpsNoAttack, $01
00097254 E10E                       	smpsAlterNote       $0E
00097256 E701                       	dc.b	smpsNoAttack, $01
00097258 E10F                       	smpsAlterNote       $0F
0009725A E701                       	dc.b	smpsNoAttack, $01
0009725C E10B                       	smpsAlterNote       $0B
0009725E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00097262 E108                       	smpsAlterNote       $08
00097264 E701                       	dc.b	smpsNoAttack, $01
00097266 E105                       	smpsAlterNote       $05
00097268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009726C E10B                       	smpsAlterNote       $0B
0009726E E701                       	dc.b	smpsNoAttack, $01
00097270 E10F                       	smpsAlterNote       $0F
00097272 E701                       	dc.b	smpsNoAttack, $01
00097274 E10E                       	smpsAlterNote       $0E
00097276 E701                       	dc.b	smpsNoAttack, $01
00097278 E108                       	smpsAlterNote       $08
0009727A E701                       	dc.b	smpsNoAttack, $01
0009727C E104                       	smpsAlterNote       $04
0009727E E701                       	dc.b	smpsNoAttack, $01
00097280 E108                       	smpsAlterNote       $08
00097282 E701                       	dc.b	smpsNoAttack, $01
00097284 E10B                       	smpsAlterNote       $0B
00097286 E701                       	dc.b	smpsNoAttack, $01
00097288 E10F                       	smpsAlterNote       $0F
0009728A E701                       	dc.b	smpsNoAttack, $01
0009728C E10B                       	smpsAlterNote       $0B
0009728E B30D                       	dc.b	nD4, $0D
00097290 E108                       	smpsAlterNote       $08
00097292 E701                       	dc.b	smpsNoAttack, $01
00097294 E105                       	smpsAlterNote       $05
00097296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009729A E10B                       	smpsAlterNote       $0B
0009729C E701                       	dc.b	smpsNoAttack, $01
0009729E E10F                       	smpsAlterNote       $0F
000972A0 E701                       	dc.b	smpsNoAttack, $01
000972A2 E10E                       	smpsAlterNote       $0E
000972A4 E701                       	dc.b	smpsNoAttack, $01
000972A6 E108                       	smpsAlterNote       $08
000972A8 E701                       	dc.b	smpsNoAttack, $01
000972AA E104                       	smpsAlterNote       $04
000972AC E701                       	dc.b	smpsNoAttack, $01
000972AE E108                       	smpsAlterNote       $08
000972B0 E701                       	dc.b	smpsNoAttack, $01
000972B2 E10B                       	smpsAlterNote       $0B
000972B4 E701                       	dc.b	smpsNoAttack, $01
000972B6 E10F                       	smpsAlterNote       $0F
000972B8 E701                       	dc.b	smpsNoAttack, $01
000972BA E10B                       	smpsAlterNote       $0B
000972BC E701                       	dc.b	smpsNoAttack, $01
000972BE E105                       	smpsAlterNote       $05
000972C0 E701                       	dc.b	smpsNoAttack, $01
000972C2 E104                       	smpsAlterNote       $04
000972C4 E701                       	dc.b	smpsNoAttack, $01
000972C6 E108                       	smpsAlterNote       $08
000972C8 E701                       	dc.b	smpsNoAttack, $01
000972CA E10E                       	smpsAlterNote       $0E
000972CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972D0 E10B                       	smpsAlterNote       $0B
000972D2 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000972D6 E108                       	smpsAlterNote       $08
000972D8 E701                       	dc.b	smpsNoAttack, $01
000972DA E104                       	smpsAlterNote       $04
000972DC E701                       	dc.b	smpsNoAttack, $01
000972DE E108                       	smpsAlterNote       $08
000972E0 E701                       	dc.b	smpsNoAttack, $01
000972E2 E10B                       	smpsAlterNote       $0B
000972E4 E701                       	dc.b	smpsNoAttack, $01
000972E8 E0C0                       	smpsPan             panCenter, $00
000972EA E601                       	smpsAlterVol        $01
000972EC E108                       	smpsAlterNote       $08
000972EE A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000972FA 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00097302 E080                       	smpsPan             panLeft, $00
00097304 07                         	dc.b	$07
00097305 E6FF                       	smpsAlterVol        $FF
00097307 E10D                       	smpsAlterNote       $0D
00097309 B60D                       	dc.b	nF4, $0D
0009730B E10A                       	smpsAlterNote       $0A
0009730D E701                       	dc.b	smpsNoAttack, $01
0009730F E106                       	smpsAlterNote       $06
00097311 E701                       	dc.b	smpsNoAttack, $01
00097313 E10A                       	smpsAlterNote       $0A
00097315 E701                       	dc.b	smpsNoAttack, $01
00097317 E110                       	smpsAlterNote       $10
00097319 E701                       	dc.b	smpsNoAttack, $01
0009731B E111                       	smpsAlterNote       $11
0009731D E701                       	dc.b	smpsNoAttack, $01
0009731F E10D                       	smpsAlterNote       $0D
00097321 E701                       	dc.b	smpsNoAttack, $01
00097323 E107                       	smpsAlterNote       $07
00097325 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097329 E10A                       	smpsAlterNote       $0A
0009732B E701                       	dc.b	smpsNoAttack, $01
0009732D E110                       	smpsAlterNote       $10
0009732F E701                       	dc.b	smpsNoAttack, $01
00097331 E111                       	smpsAlterNote       $11
00097333 8001                       	dc.b	nRst, $01
00097335 E10D                       	smpsAlterNote       $0D
00097337 B80D                       	dc.b	nG4, $0D
00097339 E10A                       	smpsAlterNote       $0A
0009733B E701                       	dc.b	smpsNoAttack, $01
0009733D E106                       	smpsAlterNote       $06
0009733F E701                       	dc.b	smpsNoAttack, $01
00097341 E10A                       	smpsAlterNote       $0A
00097343 E701                       	dc.b	smpsNoAttack, $01
00097345 E110                       	smpsAlterNote       $10
00097347 E701                       	dc.b	smpsNoAttack, $01
00097349 E111                       	smpsAlterNote       $11
0009734B E701                       	dc.b	smpsNoAttack, $01
0009734D E10D                       	smpsAlterNote       $0D
0009734F E701                       	dc.b	smpsNoAttack, $01
00097351 E107                       	smpsAlterNote       $07
00097353 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097357 E10D                       	smpsAlterNote       $0D
00097359 E701                       	dc.b	smpsNoAttack, $01
0009735B E110                       	smpsAlterNote       $10
0009735D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097361 E10A                       	smpsAlterNote       $0A
00097363 E701                       	dc.b	smpsNoAttack, $01
00097365 E106                       	smpsAlterNote       $06
00097367 E701                       	dc.b	smpsNoAttack, $01
00097369 E107                       	smpsAlterNote       $07
0009736B E701                       	dc.b	smpsNoAttack, $01
0009736D E10D                       	smpsAlterNote       $0D
0009736F E701                       	dc.b	smpsNoAttack, $01
00097371 E111                       	smpsAlterNote       $11
00097373 E701                       	dc.b	smpsNoAttack, $01
00097375 E10D                       	smpsAlterNote       $0D
00097377 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009737B E10F                       	smpsAlterNote       $0F
0009737D BA0D                       	dc.b	nA4, $0D
0009737F E109                       	smpsAlterNote       $09
00097381 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097385 E10C                       	smpsAlterNote       $0C
00097387 E701                       	dc.b	smpsNoAttack, $01
00097389 E112                       	smpsAlterNote       $12
0009738B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009738F E10C                       	smpsAlterNote       $0C
00097391 E701                       	dc.b	smpsNoAttack, $01
00097393 E109                       	smpsAlterNote       $09
00097395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097399 E10F                       	smpsAlterNote       $0F
0009739B E701                       	dc.b	smpsNoAttack, $01
0009739D E113                       	smpsAlterNote       $13
0009739F E701                       	dc.b	smpsNoAttack, $01
000973A1 E112                       	smpsAlterNote       $12
000973A3 E701                       	dc.b	smpsNoAttack, $01
000973A5 E10C                       	smpsAlterNote       $0C
000973A7 E701                       	dc.b	smpsNoAttack, $01
000973A9 E108                       	smpsAlterNote       $08
000973AB E701                       	dc.b	smpsNoAttack, $01
000973AD E10C                       	smpsAlterNote       $0C
000973AF E701                       	dc.b	smpsNoAttack, $01
000973B1 E10F                       	smpsAlterNote       $0F
000973B3 E701                       	dc.b	smpsNoAttack, $01
000973B5 E113                       	smpsAlterNote       $13
000973B7 E701                       	dc.b	smpsNoAttack, $01
000973B9 E10F                       	smpsAlterNote       $0F
000973BB E701                       	dc.b	smpsNoAttack, $01
000973BD E109                       	smpsAlterNote       $09
000973BF E701                       	dc.b	smpsNoAttack, $01
000973C1 E108                       	smpsAlterNote       $08
000973C3 E701                       	dc.b	smpsNoAttack, $01
000973C5 E10C                       	smpsAlterNote       $0C
000973C7 E701                       	dc.b	smpsNoAttack, $01
000973C9 E112                       	smpsAlterNote       $12
000973CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973CF E10F                       	smpsAlterNote       $0F
000973D1 E701                       	dc.b	smpsNoAttack, $01
000973D3 E109                       	smpsAlterNote       $09
000973D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973D9 E10F                       	smpsAlterNote       $0F
000973DB E701                       	dc.b	smpsNoAttack, $01
000973DD E112                       	smpsAlterNote       $12
000973DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973E3 E10C                       	smpsAlterNote       $0C
000973E5 E701                       	dc.b	smpsNoAttack, $01
000973E7 E108                       	smpsAlterNote       $08
000973E9 E701                       	dc.b	smpsNoAttack, $01
000973EB E109                       	smpsAlterNote       $09
000973ED E701                       	dc.b	smpsNoAttack, $01
000973EF E10C                       	smpsAlterNote       $0C
000973F1 B50A                       	dc.b	nE4, $0A
000973F3 E10D                       	smpsAlterNote       $0D
000973F5 B60E                       	dc.b	nF4, $0E
000973F7 E107                       	smpsAlterNote       $07
000973F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973FD E10D                       	smpsAlterNote       $0D
000973FF E701                       	dc.b	smpsNoAttack, $01
00097401 E110                       	smpsAlterNote       $10
00097403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097407 E10A                       	smpsAlterNote       $0A
00097409 E701                       	dc.b	smpsNoAttack, $01
0009740B E106                       	smpsAlterNote       $06
0009740D E701                       	dc.b	smpsNoAttack, $01
0009740F E107                       	smpsAlterNote       $07
00097411 E701                       	dc.b	smpsNoAttack, $01
00097413 E10D                       	smpsAlterNote       $0D
00097415 E701                       	dc.b	smpsNoAttack, $01
00097417 E111                       	smpsAlterNote       $11
00097419 E701                       	dc.b	smpsNoAttack, $01
0009741B E10D                       	smpsAlterNote       $0D
0009741D B80D                       	dc.b	nG4, $0D
0009741F E10A                       	smpsAlterNote       $0A
00097421 E701                       	dc.b	smpsNoAttack, $01
00097423 E107                       	smpsAlterNote       $07
00097425 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097429 E10D                       	smpsAlterNote       $0D
0009742B E701                       	dc.b	smpsNoAttack, $01
0009742D E111                       	smpsAlterNote       $11
0009742F E701                       	dc.b	smpsNoAttack, $01
00097431 E110                       	smpsAlterNote       $10
00097433 E701                       	dc.b	smpsNoAttack, $01
00097435 E10A                       	smpsAlterNote       $0A
00097437 E701                       	dc.b	smpsNoAttack, $01
00097439 E106                       	smpsAlterNote       $06
0009743B E701                       	dc.b	smpsNoAttack, $01
0009743D E10A                       	smpsAlterNote       $0A
0009743F E701                       	dc.b	smpsNoAttack, $01
00097441 E10D                       	smpsAlterNote       $0D
00097443 E701                       	dc.b	smpsNoAttack, $01
00097445 E111                       	smpsAlterNote       $11
00097447 E701                       	dc.b	smpsNoAttack, $01
00097449 E10D                       	smpsAlterNote       $0D
0009744B E701                       	dc.b	smpsNoAttack, $01
0009744D E107                       	smpsAlterNote       $07
0009744F E701                       	dc.b	smpsNoAttack, $01
00097451 E106                       	smpsAlterNote       $06
00097453 E701                       	dc.b	smpsNoAttack, $01
00097455 E10A                       	smpsAlterNote       $0A
00097457 E701                       	dc.b	smpsNoAttack, $01
00097459 E110                       	smpsAlterNote       $10
0009745B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009745F E10D                       	smpsAlterNote       $0D
00097461 E701                       	dc.b	smpsNoAttack, $01
00097463 E10F                       	smpsAlterNote       $0F
00097465 BA0D                       	dc.b	nA4, $0D
00097467 E10C                       	smpsAlterNote       $0C
00097469 E701                       	dc.b	smpsNoAttack, $01
0009746B E108                       	smpsAlterNote       $08
0009746D E701                       	dc.b	smpsNoAttack, $01
0009746F E109                       	smpsAlterNote       $09
00097471 E701                       	dc.b	smpsNoAttack, $01
00097473 E10F                       	smpsAlterNote       $0F
00097475 E701                       	dc.b	smpsNoAttack, $01
00097477 E113                       	smpsAlterNote       $13
00097479 E701                       	dc.b	smpsNoAttack, $01
0009747B E10F                       	smpsAlterNote       $0F
0009747D E701                       	dc.b	smpsNoAttack, $01
0009747F E10C                       	smpsAlterNote       $0C
00097481 E701                       	dc.b	smpsNoAttack, $01
00097483 E108                       	smpsAlterNote       $08
00097485 E701                       	dc.b	smpsNoAttack, $01
00097487 E10C                       	smpsAlterNote       $0C
00097489 E701                       	dc.b	smpsNoAttack, $01
0009748B E112                       	smpsAlterNote       $12
0009748D E701                       	dc.b	smpsNoAttack, $01
0009748F E113                       	smpsAlterNote       $13
00097491 E701                       	dc.b	smpsNoAttack, $01
00097493 E10F                       	smpsAlterNote       $0F
00097495 E701                       	dc.b	smpsNoAttack, $01
00097497 E109                       	smpsAlterNote       $09
00097499 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009749D E10C                       	smpsAlterNote       $0C
0009749F E701                       	dc.b	smpsNoAttack, $01
000974A1 E112                       	smpsAlterNote       $12
000974A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974A7 E10C                       	smpsAlterNote       $0C
000974A9 E701                       	dc.b	smpsNoAttack, $01
000974AB E109                       	smpsAlterNote       $09
000974AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974B1 E10F                       	smpsAlterNote       $0F
000974B3 E701                       	dc.b	smpsNoAttack, $01
000974B5 E113                       	smpsAlterNote       $13
000974B7 E701                       	dc.b	smpsNoAttack, $01
000974B9 E112                       	smpsAlterNote       $12
000974BB E701                       	dc.b	smpsNoAttack, $01
000974BD E10C                       	smpsAlterNote       $0C
000974BF E701                       	dc.b	smpsNoAttack, $01
000974C1 E109                       	smpsAlterNote       $09
000974C3 8001                       	dc.b	nRst, $01
000974C5 E10D                       	smpsAlterNote       $0D
000974C7 B60A                       	dc.b	nF4, $0A
000974C9 E10C                       	smpsAlterNote       $0C
000974CB B506 8001                  	dc.b	nE4, $06, nRst, $01
000974CF E10B                       	smpsAlterNote       $0B
000974D1 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000974D5 E10C                       	smpsAlterNote       $0C
000974D7 B503                       	dc.b	nE4, $03
000974D9 E10D                       	smpsAlterNote       $0D
000974DB B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000974E5 E10C                       	smpsAlterNote       $0C
000974E7 E701                       	dc.b	smpsNoAttack, $01
000974E9 E108                       	smpsAlterNote       $08
000974EB E701                       	dc.b	smpsNoAttack, $01
000974ED E10C                       	smpsAlterNote       $0C
000974EF E701                       	dc.b	smpsNoAttack, $01
000974F1 E112                       	smpsAlterNote       $12
000974F3 E701                       	dc.b	smpsNoAttack, $01
000974F5 E113                       	smpsAlterNote       $13
000974F7 E701                       	dc.b	smpsNoAttack, $01
000974F9 E10F                       	smpsAlterNote       $0F
000974FB E701                       	dc.b	smpsNoAttack, $01
000974FD E109                       	smpsAlterNote       $09
000974FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097503 E10C                       	smpsAlterNote       $0C
00097505 E701                       	dc.b	smpsNoAttack, $01
00097507 E112                       	smpsAlterNote       $12
00097509 E701                       	dc.b	smpsNoAttack, $01
0009750B E113                       	smpsAlterNote       $13
0009750D 8001                       	dc.b	nRst, $01
0009750F E10D                       	smpsAlterNote       $0D
00097511 C20D                       	dc.b	nF5, $0D
00097513 E10A                       	smpsAlterNote       $0A
00097515 E701                       	dc.b	smpsNoAttack, $01
00097517 E106                       	smpsAlterNote       $06
00097519 E701                       	dc.b	smpsNoAttack, $01
0009751B E10A                       	smpsAlterNote       $0A
0009751D E701                       	dc.b	smpsNoAttack, $01
0009751F E110                       	smpsAlterNote       $10
00097521 E701                       	dc.b	smpsNoAttack, $01
00097523 E111                       	smpsAlterNote       $11
00097525 E701                       	dc.b	smpsNoAttack, $01
00097527 E10D                       	smpsAlterNote       $0D
00097529 E701                       	dc.b	smpsNoAttack, $01
0009752B E107                       	smpsAlterNote       $07
0009752D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097531 E10A                       	smpsAlterNote       $0A
00097533 E701                       	dc.b	smpsNoAttack, $01
00097535 E110                       	smpsAlterNote       $10
00097537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009753B E10A                       	smpsAlterNote       $0A
0009753D E701                       	dc.b	smpsNoAttack, $01
0009753F E107                       	smpsAlterNote       $07
00097541 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097545 E10D                       	smpsAlterNote       $0D
00097547 E701                       	dc.b	smpsNoAttack, $01
00097549 E111                       	smpsAlterNote       $11
0009754B E701                       	dc.b	smpsNoAttack, $01
0009754D E110                       	smpsAlterNote       $10
0009754F E701                       	dc.b	smpsNoAttack, $01
00097551 E10A                       	smpsAlterNote       $0A
00097553 E701                       	dc.b	smpsNoAttack, $01
00097555 E106                       	smpsAlterNote       $06
00097557 E701                       	dc.b	smpsNoAttack, $01
00097559 E10A                       	smpsAlterNote       $0A
0009755B E701                       	dc.b	smpsNoAttack, $01
0009755D E10D                       	smpsAlterNote       $0D
0009755F E701                       	dc.b	smpsNoAttack, $01
00097561 E111                       	smpsAlterNote       $11
00097563 E701                       	dc.b	smpsNoAttack, $01
00097565 E10D                       	smpsAlterNote       $0D
00097567 E701                       	dc.b	smpsNoAttack, $01
00097569 E107                       	smpsAlterNote       $07
0009756B E701                       	dc.b	smpsNoAttack, $01
0009756D E106                       	smpsAlterNote       $06
0009756F E701                       	dc.b	smpsNoAttack, $01
00097571 E10A                       	smpsAlterNote       $0A
00097573 E701                       	dc.b	smpsNoAttack, $01
00097575 E110                       	smpsAlterNote       $10
00097577 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009757B E10D                       	smpsAlterNote       $0D
0009757D E701                       	dc.b	smpsNoAttack, $01
0009757F E107                       	smpsAlterNote       $07
00097581 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097585 E10D                       	smpsAlterNote       $0D
00097587 E701                       	dc.b	smpsNoAttack, $01
00097589 E110                       	smpsAlterNote       $10
0009758B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009758F E10A                       	smpsAlterNote       $0A
00097591 E701                       	dc.b	smpsNoAttack, $01
00097593 E106                       	smpsAlterNote       $06
00097595 E701                       	dc.b	smpsNoAttack, $01
00097597 E107                       	smpsAlterNote       $07
00097599 E701                       	dc.b	smpsNoAttack, $01
0009759B E10D                       	smpsAlterNote       $0D
0009759D E701                       	dc.b	smpsNoAttack, $01
0009759F E111                       	smpsAlterNote       $11
000975A1 E701                       	dc.b	smpsNoAttack, $01
000975A3 E10D                       	smpsAlterNote       $0D
000975A5 E701                       	dc.b	smpsNoAttack, $01
000975A7 E10A                       	smpsAlterNote       $0A
000975A9 E701                       	dc.b	smpsNoAttack, $01
000975AB E107                       	smpsAlterNote       $07
000975AD 8001                       	dc.b	nRst, $01
000975AF E10D                       	smpsAlterNote       $0D
000975B1 C206 8001                  	dc.b	nF5, $06, nRst, $01
000975B7 E601                       	smpsAlterVol        $01
000975B9 E110                       	smpsAlterNote       $10
000975BB BB0D                       	dc.b	nBb4, $0D
000975BD E10A                       	smpsAlterNote       $0A
000975BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975C3 E110                       	smpsAlterNote       $10
000975C5 E701                       	dc.b	smpsNoAttack, $01
000975C7 E113                       	smpsAlterNote       $13
000975C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975CD E10D                       	smpsAlterNote       $0D
000975CF E701                       	dc.b	smpsNoAttack, $01
000975D1 E109                       	smpsAlterNote       $09
000975D3 E701                       	dc.b	smpsNoAttack, $01
000975D5 E10A                       	smpsAlterNote       $0A
000975D7 E701                       	dc.b	smpsNoAttack, $01
000975D9 E110                       	smpsAlterNote       $10
000975DB E701                       	dc.b	smpsNoAttack, $01
000975DD E114                       	smpsAlterNote       $14
000975DF E701                       	dc.b	smpsNoAttack, $01
000975E1 E110                       	smpsAlterNote       $10
000975E3 E701                       	dc.b	smpsNoAttack, $01
000975E5 E10D                       	smpsAlterNote       $0D
000975E7 E701                       	dc.b	smpsNoAttack, $01
000975E9 E109                       	smpsAlterNote       $09
000975EB E701                       	dc.b	smpsNoAttack, $01
000975ED E10A                       	smpsAlterNote       $0A
000975EF 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000975F3 E107                       	smpsAlterNote       $07
000975F5 E701                       	dc.b	smpsNoAttack, $01
000975F7 E103                       	smpsAlterNote       $03
000975F9 E701                       	dc.b	smpsNoAttack, $01
000975FB E107                       	smpsAlterNote       $07
000975FD E701                       	dc.b	smpsNoAttack, $01
000975FF E10D                       	smpsAlterNote       $0D
00097601 E701                       	dc.b	smpsNoAttack, $01
00097603 E10E                       	smpsAlterNote       $0E
00097605 E701                       	dc.b	smpsNoAttack, $01
00097607 E10A                       	smpsAlterNote       $0A
00097609 E701                       	dc.b	smpsNoAttack, $01
0009760B E104                       	smpsAlterNote       $04
0009760D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097611 E107                       	smpsAlterNote       $07
00097613 E701                       	dc.b	smpsNoAttack, $01
00097615 E10D                       	smpsAlterNote       $0D
00097617 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009761B E107                       	smpsAlterNote       $07
0009761D E701                       	dc.b	smpsNoAttack, $01
0009761F E104                       	smpsAlterNote       $04
00097621 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097625 E10B                       	smpsAlterNote       $0B
00097627 BF0D                       	dc.b	nD5, $0D
00097629 E108                       	smpsAlterNote       $08
0009762B E701                       	dc.b	smpsNoAttack, $01
0009762D E105                       	smpsAlterNote       $05
0009762F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097633 E10B                       	smpsAlterNote       $0B
00097635 E701                       	dc.b	smpsNoAttack, $01
00097637 E10F                       	smpsAlterNote       $0F
00097639 E701                       	dc.b	smpsNoAttack, $01
0009763B E10E                       	smpsAlterNote       $0E
0009763D E701                       	dc.b	smpsNoAttack, $01
0009763F E108                       	smpsAlterNote       $08
00097641 E701                       	dc.b	smpsNoAttack, $01
00097643 E104                       	smpsAlterNote       $04
00097645 E701                       	dc.b	smpsNoAttack, $01
00097647 E108                       	smpsAlterNote       $08
00097649 E701                       	dc.b	smpsNoAttack, $01
0009764B E10B                       	smpsAlterNote       $0B
0009764D E701                       	dc.b	smpsNoAttack, $01
0009764F E10F                       	smpsAlterNote       $0F
00097651 E701                       	dc.b	smpsNoAttack, $01
00097653 E10B                       	smpsAlterNote       $0B
00097655 E701                       	dc.b	smpsNoAttack, $01
00097657 E105                       	smpsAlterNote       $05
00097659 E701                       	dc.b	smpsNoAttack, $01
0009765B E104                       	smpsAlterNote       $04
0009765D E701                       	dc.b	smpsNoAttack, $01
0009765F E105                       	smpsAlterNote       $05
00097661 8001                       	dc.b	nRst, $01
00097663 E10C                       	smpsAlterNote       $0C
00097665 C10C                       	dc.b	nE5, $0C
00097667 E10D                       	smpsAlterNote       $0D
00097669 C201                       	dc.b	nF5, $01
0009766B E10E                       	smpsAlterNote       $0E
0009766D C301 8001                  	dc.b	nFs5, $01, nRst, $01
00097671 E10D                       	smpsAlterNote       $0D
00097673 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00097677 E10A                       	smpsAlterNote       $0A
00097679 E701                       	dc.b	smpsNoAttack, $01
0009767B E106                       	smpsAlterNote       $06
0009767D E701                       	dc.b	smpsNoAttack, $01
0009767F E10A                       	smpsAlterNote       $0A
00097681 E701                       	dc.b	smpsNoAttack, $01
00097683 E10D                       	smpsAlterNote       $0D
00097685 E701                       	dc.b	smpsNoAttack, $01
00097687 E111                       	smpsAlterNote       $11
00097689 E701                       	dc.b	smpsNoAttack, $01
0009768B E10D                       	smpsAlterNote       $0D
0009768D E701                       	dc.b	smpsNoAttack, $01
0009768F E107                       	smpsAlterNote       $07
00097691 E701                       	dc.b	smpsNoAttack, $01
00097693 E106                       	smpsAlterNote       $06
00097695 E701                       	dc.b	smpsNoAttack, $01
00097697 E10A                       	smpsAlterNote       $0A
00097699 E701                       	dc.b	smpsNoAttack, $01
0009769B E110                       	smpsAlterNote       $10
0009769D E701                       	dc.b	smpsNoAttack, $01
0009769F E111                       	smpsAlterNote       $11
000976A1 8001                       	dc.b	nRst, $01
000976A3 E10D                       	smpsAlterNote       $0D
000976A5 C40D                       	dc.b	nG5, $0D
000976A7 E10A                       	smpsAlterNote       $0A
000976A9 E701                       	dc.b	smpsNoAttack, $01
000976AB E106                       	smpsAlterNote       $06
000976AD E701                       	dc.b	smpsNoAttack, $01
000976AF E10A                       	smpsAlterNote       $0A
000976B1 E701                       	dc.b	smpsNoAttack, $01
000976B3 E10D                       	smpsAlterNote       $0D
000976B5 E701                       	dc.b	smpsNoAttack, $01
000976B7 E10C                       	smpsAlterNote       $0C
000976B9 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000976C5 8001                       	dc.b	nRst, $01
000976C7 E10D                       	smpsAlterNote       $0D
000976C9 C20D                       	dc.b	nF5, $0D
000976CB E10A                       	smpsAlterNote       $0A
000976CD E701                       	dc.b	smpsNoAttack, $01
000976CF E106                       	smpsAlterNote       $06
000976D1 E701                       	dc.b	smpsNoAttack, $01
000976D3 E10A                       	smpsAlterNote       $0A
000976D5 E701                       	dc.b	smpsNoAttack, $01
000976D7 E110                       	smpsAlterNote       $10
000976D9 E701                       	dc.b	smpsNoAttack, $01
000976DB E111                       	smpsAlterNote       $11
000976DD E701                       	dc.b	smpsNoAttack, $01
000976DF E10D                       	smpsAlterNote       $0D
000976E1 E701                       	dc.b	smpsNoAttack, $01
000976E3 E107                       	smpsAlterNote       $07
000976E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976E9 E10A                       	smpsAlterNote       $0A
000976EB E701                       	dc.b	smpsNoAttack, $01
000976ED E110                       	smpsAlterNote       $10
000976EF E701                       	dc.b	smpsNoAttack, $01
000976F1 E111                       	smpsAlterNote       $11
000976F3 8001                       	dc.b	nRst, $01
000976F5 E10F                       	smpsAlterNote       $0F
000976F7 C60A                       	dc.b	nA5, $0A
000976F9 E10D                       	smpsAlterNote       $0D
000976FB C406 8001                  	dc.b	nG5, $06, nRst, $01
000976FF E10C                       	smpsAlterNote       $0C
00097701 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009770D 8001                       	dc.b	nRst, $01
0009770F E10D                       	smpsAlterNote       $0D
00097711 C20D                       	dc.b	nF5, $0D
00097713 E107                       	smpsAlterNote       $07
00097715 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097719 E10A                       	smpsAlterNote       $0A
0009771B E701                       	dc.b	smpsNoAttack, $01
0009771D E110                       	smpsAlterNote       $10
0009771F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097723 E10A                       	smpsAlterNote       $0A
00097725 E701                       	dc.b	smpsNoAttack, $01
00097727 E107                       	smpsAlterNote       $07
00097729 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009772D E10D                       	smpsAlterNote       $0D
0009772F E701                       	dc.b	smpsNoAttack, $01
00097731 E111                       	smpsAlterNote       $11
00097733 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097737 E10D                       	smpsAlterNote       $0D
00097739 C40D                       	dc.b	nG5, $0D
0009773B E107                       	smpsAlterNote       $07
0009773D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097741 E10A                       	smpsAlterNote       $0A
00097743 E701                       	dc.b	smpsNoAttack, $01
00097745 E10D                       	smpsAlterNote       $0D
00097747 8001                       	dc.b	nRst, $01
00097749 E10C                       	smpsAlterNote       $0C
0009774B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097757 E10D                       	smpsAlterNote       $0D
00097759 C20E                       	dc.b	nF5, $0E
0009775B E107                       	smpsAlterNote       $07
0009775D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097761 E10D                       	smpsAlterNote       $0D
00097763 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097769 E0C0                       	smpsPan             panCenter, $00
0009776B E603                       	smpsAlterVol        $03
0009776D E108                       	smpsAlterNote       $08
0009776F B406                       	dc.b	nEb4, $06
00097771 E10C                       	smpsAlterNote       $0C
00097773 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097777 E108                       	smpsAlterNote       $08
00097779 B403                       	dc.b	nEb4, $03
0009777B E109                       	smpsAlterNote       $09
0009777D B803 8001                  	dc.b	nG4, $03, nRst, $01
00097781 E10C                       	smpsAlterNote       $0C
00097783 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009778B 03                         	dc.b	$03
0009778C E6FD                       	smpsAlterVol        $FD
0009778E F6F1 F4                    	smpsJump            music84_Jump00
00097791                            
00097791                            ; PSG1 Data
00097791                            music84_PSG1:
00097791 E1FD                       	smpsAlterNote       $FD
00097793 EC04                       	smpsPSGAlterVol     $04
00097795 9203                       	dc.b	nF1, $03
00097797 E1FE                       	smpsAlterNote       $FE
00097799 9603                       	dc.b	nA1, $03
0009779B EC04                       	smpsPSGAlterVol     $04
0009779D E701                       	dc.b	smpsNoAttack, $01
0009779F E1FF                       	smpsAlterNote       $FF
000977A1 ECFC                       	smpsPSGAlterVol     $FC
000977A3 9B03                       	dc.b	nD2, $03
000977A5 E1FD                       	smpsAlterNote       $FD
000977A7 9403                       	dc.b	nG1, $03
000977A9 EC04                       	smpsPSGAlterVol     $04
000977AB E701                       	dc.b	smpsNoAttack, $01
000977AD E1FE                       	smpsAlterNote       $FE
000977AF ECFC                       	smpsPSGAlterVol     $FC
000977B1 9703                       	dc.b	nBb1, $03
000977B3 E1FF                       	smpsAlterNote       $FF
000977B5 9B03                       	dc.b	nD2, $03
000977B7 EC04                       	smpsPSGAlterVol     $04
000977B9 E701                       	dc.b	smpsNoAttack, $01
000977BB E1FE                       	smpsAlterNote       $FE
000977BD ECFC                       	smpsPSGAlterVol     $FC
000977BF A002                       	dc.b	nG2, $02
000977C1 EC04                       	smpsPSGAlterVol     $04
000977C3 E701                       	dc.b	smpsNoAttack, $01
000977C5 E1FF                       	smpsAlterNote       $FF
000977C7 ECFC                       	smpsPSGAlterVol     $FC
000977C9 A203                       	dc.b	nA2, $03
000977CB EC0B                       	smpsPSGAlterVol     $0B
000977CD 800A                       	dc.b	nRst, $0A
000977CF E105                       	smpsAlterNote       $05
000977D1 01                         	dc.b	$01
000977D2 E1FC                       	smpsAlterNote       $FC
000977D4 01                         	dc.b	$01
000977D5 E105                       	smpsAlterNote       $05
000977D7 01                         	dc.b	$01
000977D8 E1FD                       	smpsAlterNote       $FD
000977DA 01                         	dc.b	$01
000977DB E105                       	smpsAlterNote       $05
000977DD 01                         	dc.b	$01
000977DE E1FD                       	smpsAlterNote       $FD
000977E0 01                         	dc.b	$01
000977E1 E1FA                       	smpsAlterNote       $FA
000977E3 01                         	dc.b	$01
000977E4 E1FC                       	smpsAlterNote       $FC
000977E6 01                         	dc.b	$01
000977E7 E105                       	smpsAlterNote       $05
000977E9 01                         	dc.b	$01
000977EA E108                       	smpsAlterNote       $08
000977EC 0101                       	dc.b	$01, $01
000977EE E105                       	smpsAlterNote       $05
000977F0 01                         	dc.b	$01
000977F1 E1FA                       	smpsAlterNote       $FA
000977F3 0101                       	dc.b	$01, $01
000977F5 E1FD                       	smpsAlterNote       $FD
000977F7 01                         	dc.b	$01
000977F8 E105                       	smpsAlterNote       $05
000977FA 01                         	dc.b	$01
000977FB E108                       	smpsAlterNote       $08
000977FD 01                         	dc.b	$01
000977FE E105                       	smpsAlterNote       $05
00097800 01                         	dc.b	$01
00097801 E1FC                       	smpsAlterNote       $FC
00097803 01                         	dc.b	$01
00097804 E105                       	smpsAlterNote       $05
00097806 01                         	dc.b	$01
00097807 E1FD                       	smpsAlterNote       $FD
00097809 01                         	dc.b	$01
0009780A                            
0009780A                            music84_Jump07:
0009780A E105                       	smpsAlterNote       $05
0009780C 8001                       	dc.b	nRst, $01
0009780E E1FD                       	smpsAlterNote       $FD
00097810 01                         	dc.b	$01
00097811 E1FA                       	smpsAlterNote       $FA
00097813 01                         	dc.b	$01
00097814 E1FC                       	smpsAlterNote       $FC
00097816 01                         	dc.b	$01
00097817 E1FD                       	smpsAlterNote       $FD
00097819 ECF5                       	smpsPSGAlterVol     $F5
0009781B 9206                       	dc.b	nF1, $06
0009781D EC04                       	smpsPSGAlterVol     $04
0009781F E701                       	dc.b	smpsNoAttack, $01
00097821 EC07                       	smpsPSGAlterVol     $07
00097823 8003                       	dc.b	nRst, $03
00097825 ECF5                       	smpsPSGAlterVol     $F5
00097827 9206                       	dc.b	nF1, $06
00097829 EC04                       	smpsPSGAlterVol     $04
0009782B E701                       	dc.b	smpsNoAttack, $01
0009782D EC07                       	smpsPSGAlterVol     $07
0009782F 8006                       	dc.b	nRst, $06
00097831 E100                       	smpsAlterNote       $00
00097833 01                         	dc.b	$01
00097834 E104                       	smpsAlterNote       $04
00097836 01                         	dc.b	$01
00097837 E100                       	smpsAlterNote       $00
00097839 01                         	dc.b	$01
0009783A E1FB                       	smpsAlterNote       $FB
0009783C 01                         	dc.b	$01
0009783D E1FD                       	smpsAlterNote       $FD
0009783F ECF5                       	smpsPSGAlterVol     $F5
00097841 9406                       	dc.b	nG1, $06
00097843 EC04                       	smpsPSGAlterVol     $04
00097845 E701                       	dc.b	smpsNoAttack, $01
00097847 EC07                       	smpsPSGAlterVol     $07
00097849 8003                       	dc.b	nRst, $03
0009784B ECF5                       	smpsPSGAlterVol     $F5
0009784D 9407                       	dc.b	nG1, $07
0009784F EC0B                       	smpsPSGAlterVol     $0B
00097851 8006                       	dc.b	nRst, $06
00097853 E100                       	smpsAlterNote       $00
00097855 01                         	dc.b	$01
00097856 E103                       	smpsAlterNote       $03
00097858 0101                       	dc.b	$01, $01
0009785A E1FD                       	smpsAlterNote       $FD
0009785C 01                         	dc.b	$01
0009785D ECF5                       	smpsPSGAlterVol     $F5
0009785F 9207                       	dc.b	nF1, $07
00097861 EC0B                       	smpsPSGAlterVol     $0B
00097863 8004                       	dc.b	nRst, $04
00097865 ECF5                       	smpsPSGAlterVol     $F5
00097867 9206                       	dc.b	nF1, $06
00097869 EC04                       	smpsPSGAlterVol     $04
0009786B E701                       	dc.b	smpsNoAttack, $01
0009786D EC07                       	smpsPSGAlterVol     $07
0009786F 8006                       	dc.b	nRst, $06
00097871 E103                       	smpsAlterNote       $03
00097873 01                         	dc.b	$01
00097874 E104                       	smpsAlterNote       $04
00097876 01                         	dc.b	$01
00097877 E100                       	smpsAlterNote       $00
00097879 01                         	dc.b	$01
0009787A E1FA                       	smpsAlterNote       $FA
0009787C 01                         	dc.b	$01
0009787D E1FD                       	smpsAlterNote       $FD
0009787F ECF5                       	smpsPSGAlterVol     $F5
00097881 9206                       	dc.b	nF1, $06
00097883 EC04                       	smpsPSGAlterVol     $04
00097885 E701                       	dc.b	smpsNoAttack, $01
00097887 EC07                       	smpsPSGAlterVol     $07
00097889 8003                       	dc.b	nRst, $03
0009788B ECF5                       	smpsPSGAlterVol     $F5
0009788D 9106                       	dc.b	nE1, $06
0009788F EC04                       	smpsPSGAlterVol     $04
00097891 E701                       	dc.b	smpsNoAttack, $01
00097893 EC07                       	smpsPSGAlterVol     $07
00097895 8006                       	dc.b	nRst, $06
00097897 E100                       	smpsAlterNote       $00
00097899 01                         	dc.b	$01
0009789A E104                       	smpsAlterNote       $04
0009789C 01                         	dc.b	$01
0009789D E100                       	smpsAlterNote       $00
0009789F 01                         	dc.b	$01
000978A0 E1FD                       	smpsAlterNote       $FD
000978A2 01                         	dc.b	$01
000978A3 ECF5                       	smpsPSGAlterVol     $F5
000978A5 9206                       	dc.b	nF1, $06
000978A7 EC04                       	smpsPSGAlterVol     $04
000978A9 E701                       	dc.b	smpsNoAttack, $01
000978AB EC07                       	smpsPSGAlterVol     $07
000978AD 8003                       	dc.b	nRst, $03
000978AF ECF5                       	smpsPSGAlterVol     $F5
000978B1 9207                       	dc.b	nF1, $07
000978B3 EC0B                       	smpsPSGAlterVol     $0B
000978B5 8007                       	dc.b	nRst, $07
000978B7 E103                       	smpsAlterNote       $03
000978B9 0101                       	dc.b	$01, $01
000978BB E1FD                       	smpsAlterNote       $FD
000978BD 01                         	dc.b	$01
000978BE E1FB                       	smpsAlterNote       $FB
000978C0 01                         	dc.b	$01
000978C1 E1FD                       	smpsAlterNote       $FD
000978C3 ECF5                       	smpsPSGAlterVol     $F5
000978C5 9406                       	dc.b	nG1, $06
000978C7 EC0B                       	smpsPSGAlterVol     $0B
000978C9 8004                       	dc.b	nRst, $04
000978CB ECF5                       	smpsPSGAlterVol     $F5
000978CD 9406                       	dc.b	nG1, $06
000978CF EC04                       	smpsPSGAlterVol     $04
000978D1 E701                       	dc.b	smpsNoAttack, $01
000978D3 EC07                       	smpsPSGAlterVol     $07
000978D5 8006                       	dc.b	nRst, $06
000978D7 E100                       	smpsAlterNote       $00
000978D9 01                         	dc.b	$01
000978DA E104                       	smpsAlterNote       $04
000978DC 01                         	dc.b	$01
000978DD E100                       	smpsAlterNote       $00
000978DF 01                         	dc.b	$01
000978E0 E1F9                       	smpsAlterNote       $F9
000978E2 01                         	dc.b	$01
000978E3 E1FD                       	smpsAlterNote       $FD
000978E5 ECF5                       	smpsPSGAlterVol     $F5
000978E7 9206                       	dc.b	nF1, $06
000978E9 EC04                       	smpsPSGAlterVol     $04
000978EB E701                       	dc.b	smpsNoAttack, $01
000978ED EC07                       	smpsPSGAlterVol     $07
000978EF 8003                       	dc.b	nRst, $03
000978F1 ECF5                       	smpsPSGAlterVol     $F5
000978F3 9207                       	dc.b	nF1, $07
000978F5 EC0B                       	smpsPSGAlterVol     $0B
000978F7 8006                       	dc.b	nRst, $06
000978F9 E100                       	smpsAlterNote       $00
000978FB 01                         	dc.b	$01
000978FC E104                       	smpsAlterNote       $04
000978FE 01                         	dc.b	$01
000978FF E103                       	smpsAlterNote       $03
00097901 01                         	dc.b	$01
00097902 E1FD                       	smpsAlterNote       $FD
00097904 01                         	dc.b	$01
00097905 ECF5                       	smpsPSGAlterVol     $F5
00097907 9207                       	dc.b	nF1, $07
00097909 EC0B                       	smpsPSGAlterVol     $0B
0009790B 8004                       	dc.b	nRst, $04
0009790D ECF5                       	smpsPSGAlterVol     $F5
0009790F 9206                       	dc.b	nF1, $06
00097911 EC0B                       	smpsPSGAlterVol     $0B
00097913 8007                       	dc.b	nRst, $07
00097915 E103                       	smpsAlterNote       $03
00097917 0101                       	dc.b	$01, $01
00097919 E100                       	smpsAlterNote       $00
0009791B 01                         	dc.b	$01
0009791C E1FA                       	smpsAlterNote       $FA
0009791E 01                         	dc.b	$01
0009791F E1FD                       	smpsAlterNote       $FD
00097921 ECF5                       	smpsPSGAlterVol     $F5
00097923 9206                       	dc.b	nF1, $06
00097925 EC04                       	smpsPSGAlterVol     $04
00097927 E701                       	dc.b	smpsNoAttack, $01
00097929 EC07                       	smpsPSGAlterVol     $07
0009792B 8003                       	dc.b	nRst, $03
0009792D ECF5                       	smpsPSGAlterVol     $F5
0009792F 9206                       	dc.b	nF1, $06
00097931 EC04                       	smpsPSGAlterVol     $04
00097933 E701                       	dc.b	smpsNoAttack, $01
00097935 EC07                       	smpsPSGAlterVol     $07
00097937 8006                       	dc.b	nRst, $06
00097939 E100                       	smpsAlterNote       $00
0009793B 01                         	dc.b	$01
0009793C E104                       	smpsAlterNote       $04
0009793E 01                         	dc.b	$01
0009793F E100                       	smpsAlterNote       $00
00097941 01                         	dc.b	$01
00097942 E1FD                       	smpsAlterNote       $FD
00097944 01                         	dc.b	$01
00097945 ECF5                       	smpsPSGAlterVol     $F5
00097947 9206                       	dc.b	nF1, $06
00097949 EC04                       	smpsPSGAlterVol     $04
0009794B E701                       	dc.b	smpsNoAttack, $01
0009794D EC07                       	smpsPSGAlterVol     $07
0009794F 8003                       	dc.b	nRst, $03
00097951 ECF5                       	smpsPSGAlterVol     $F5
00097953 9207                       	dc.b	nF1, $07
00097955 EC0B                       	smpsPSGAlterVol     $0B
00097957 8007                       	dc.b	nRst, $07
00097959 E103                       	smpsAlterNote       $03
0009795B 0101                       	dc.b	$01, $01
0009795D E1FD                       	smpsAlterNote       $FD
0009795F 01                         	dc.b	$01
00097960 E1FA                       	smpsAlterNote       $FA
00097962 01                         	dc.b	$01
00097963 E1FD                       	smpsAlterNote       $FD
00097965 ECF5                       	smpsPSGAlterVol     $F5
00097967 9206                       	dc.b	nF1, $06
00097969 EC0B                       	smpsPSGAlterVol     $0B
0009796B 8004                       	dc.b	nRst, $04
0009796D ECF5                       	smpsPSGAlterVol     $F5
0009796F 9206                       	dc.b	nF1, $06
00097971 EC04                       	smpsPSGAlterVol     $04
00097973 E701                       	dc.b	smpsNoAttack, $01
00097975 EC07                       	smpsPSGAlterVol     $07
00097977 8006                       	dc.b	nRst, $06
00097979 E103                       	smpsAlterNote       $03
0009797B 01                         	dc.b	$01
0009797C E104                       	smpsAlterNote       $04
0009797E 01                         	dc.b	$01
0009797F E100                       	smpsAlterNote       $00
00097981 01                         	dc.b	$01
00097982 E1FA                       	smpsAlterNote       $FA
00097984 01                         	dc.b	$01
00097985 E1FD                       	smpsAlterNote       $FD
00097987 ECF5                       	smpsPSGAlterVol     $F5
00097989 9206                       	dc.b	nF1, $06
0009798B EC04                       	smpsPSGAlterVol     $04
0009798D E701                       	dc.b	smpsNoAttack, $01
0009798F EC07                       	smpsPSGAlterVol     $07
00097991 8003                       	dc.b	nRst, $03
00097993 ECF5                       	smpsPSGAlterVol     $F5
00097995 9206                       	dc.b	nF1, $06
00097997 EC04                       	smpsPSGAlterVol     $04
00097999 E701                       	dc.b	smpsNoAttack, $01
0009799B EC07                       	smpsPSGAlterVol     $07
0009799D 8006                       	dc.b	nRst, $06
0009799F E100                       	smpsAlterNote       $00
000979A1 01                         	dc.b	$01
000979A2 E104                       	smpsAlterNote       $04
000979A4 01                         	dc.b	$01
000979A5 E103                       	smpsAlterNote       $03
000979A7 01                         	dc.b	$01
000979A8 E1FD                       	smpsAlterNote       $FD
000979AA 01                         	dc.b	$01
000979AB ECF5                       	smpsPSGAlterVol     $F5
000979AD 9107                       	dc.b	nE1, $07
000979AF EC0B                       	smpsPSGAlterVol     $0B
000979B1 8004                       	dc.b	nRst, $04
000979B3 ECF5                       	smpsPSGAlterVol     $F5
000979B5 9106                       	dc.b	nE1, $06
000979B7 EC0B                       	smpsPSGAlterVol     $0B
000979B9 8007                       	dc.b	nRst, $07
000979BB E103                       	smpsAlterNote       $03
000979BD 0101                       	dc.b	$01, $01
000979BF E100                       	smpsAlterNote       $00
000979C1 01                         	dc.b	$01
000979C2 E1FA                       	smpsAlterNote       $FA
000979C4 01                         	dc.b	$01
000979C5 E1FD                       	smpsAlterNote       $FD
000979C7 ECF5                       	smpsPSGAlterVol     $F5
000979C9 9106                       	dc.b	nE1, $06
000979CB EC04                       	smpsPSGAlterVol     $04
000979CD E701                       	dc.b	smpsNoAttack, $01
000979CF EC07                       	smpsPSGAlterVol     $07
000979D1 8003                       	dc.b	nRst, $03
000979D3 ECF5                       	smpsPSGAlterVol     $F5
000979D5 9106                       	dc.b	nE1, $06
000979D7 EC04                       	smpsPSGAlterVol     $04
000979D9 E701                       	dc.b	smpsNoAttack, $01
000979DB EC07                       	smpsPSGAlterVol     $07
000979DD 8006                       	dc.b	nRst, $06
000979DF E100                       	smpsAlterNote       $00
000979E1 01                         	dc.b	$01
000979E2 E104                       	smpsAlterNote       $04
000979E4 01                         	dc.b	$01
000979E5 E100                       	smpsAlterNote       $00
000979E7 01                         	dc.b	$01
000979E8 E1FA                       	smpsAlterNote       $FA
000979EA 01                         	dc.b	$01
000979EB E1FD                       	smpsAlterNote       $FD
000979ED ECF5                       	smpsPSGAlterVol     $F5
000979EF 9106                       	dc.b	nE1, $06
000979F1 EC04                       	smpsPSGAlterVol     $04
000979F3 E701                       	dc.b	smpsNoAttack, $01
000979F5 EC07                       	smpsPSGAlterVol     $07
000979F7 8003                       	dc.b	nRst, $03
000979F9 ECF5                       	smpsPSGAlterVol     $F5
000979FB 9107 9106                  	dc.b	nE1, $07, nE1, $06
000979FF EC04                       	smpsPSGAlterVol     $04
00097A01 E701                       	dc.b	smpsNoAttack, $01
00097A03 ECFC                       	smpsPSGAlterVol     $FC
00097A05 9103 9103                  	dc.b	nE1, $03, nE1, $03
00097A09 EC04                       	smpsPSGAlterVol     $04
00097A0B E701                       	dc.b	smpsNoAttack, $01
00097A0D ECFC                       	smpsPSGAlterVol     $FC
00097A0F 9106                       	dc.b	nE1, $06
00097A11 EC04                       	smpsPSGAlterVol     $04
00097A13 E701                       	dc.b	smpsNoAttack, $01
00097A15 EC07                       	smpsPSGAlterVol     $07
00097A17 8006                       	dc.b	nRst, $06
00097A19 E100                       	smpsAlterNote       $00
00097A1B 01                         	dc.b	$01
00097A1C E104                       	smpsAlterNote       $04
00097A1E 01                         	dc.b	$01
00097A1F E100                       	smpsAlterNote       $00
00097A21 01                         	dc.b	$01
00097A22 E1FA                       	smpsAlterNote       $FA
00097A24 01                         	dc.b	$01
00097A25 E1F9                       	smpsAlterNote       $F9
00097A27 01                         	dc.b	$01
00097A28 E1FD                       	smpsAlterNote       $FD
00097A2A 01                         	dc.b	$01
00097A2B E103                       	smpsAlterNote       $03
00097A2D 01                         	dc.b	$01
00097A2E E104                       	smpsAlterNote       $04
00097A30 01                         	dc.b	$01
00097A31 E100                       	smpsAlterNote       $00
00097A33 01                         	dc.b	$01
00097A34 E1FA                       	smpsAlterNote       $FA
00097A36 0101                       	dc.b	$01, $01
00097A38 E1FD                       	smpsAlterNote       $FD
00097A3A ECF5                       	smpsPSGAlterVol     $F5
00097A3C 9206                       	dc.b	nF1, $06
00097A3E EC04                       	smpsPSGAlterVol     $04
00097A40 E701                       	dc.b	smpsNoAttack, $01
00097A42 EC07                       	smpsPSGAlterVol     $07
00097A44 8003                       	dc.b	nRst, $03
00097A46 ECF5                       	smpsPSGAlterVol     $F5
00097A48 9206                       	dc.b	nF1, $06
00097A4A EC04                       	smpsPSGAlterVol     $04
00097A4C E701                       	dc.b	smpsNoAttack, $01
00097A4E EC07                       	smpsPSGAlterVol     $07
00097A50 8006                       	dc.b	nRst, $06
00097A52 E100                       	smpsAlterNote       $00
00097A54 01                         	dc.b	$01
00097A55 E104                       	smpsAlterNote       $04
00097A57 01                         	dc.b	$01
00097A58 E103                       	smpsAlterNote       $03
00097A5A 01                         	dc.b	$01
00097A5B E1FD                       	smpsAlterNote       $FD
00097A5D 01                         	dc.b	$01
00097A5E ECF5                       	smpsPSGAlterVol     $F5
00097A60 9407                       	dc.b	nG1, $07
00097A62 EC0B                       	smpsPSGAlterVol     $0B
00097A64 8004                       	dc.b	nRst, $04
00097A66 ECF5                       	smpsPSGAlterVol     $F5
00097A68 9406                       	dc.b	nG1, $06
00097A6A EC0B                       	smpsPSGAlterVol     $0B
00097A6C 8007                       	dc.b	nRst, $07
00097A6E E103                       	smpsAlterNote       $03
00097A70 0101                       	dc.b	$01, $01
00097A72 E1FD                       	smpsAlterNote       $FD
00097A74 01                         	dc.b	$01
00097A75 E1F9                       	smpsAlterNote       $F9
00097A77 01                         	dc.b	$01
00097A78 E1FD                       	smpsAlterNote       $FD
00097A7A ECF5                       	smpsPSGAlterVol     $F5
00097A7C 9206                       	dc.b	nF1, $06
00097A7E EC04                       	smpsPSGAlterVol     $04
00097A80 E701                       	dc.b	smpsNoAttack, $01
00097A82 EC07                       	smpsPSGAlterVol     $07
00097A84 8003                       	dc.b	nRst, $03
00097A86 ECF5                       	smpsPSGAlterVol     $F5
00097A88 9206                       	dc.b	nF1, $06
00097A8A EC04                       	smpsPSGAlterVol     $04
00097A8C E701                       	dc.b	smpsNoAttack, $01
00097A8E EC07                       	smpsPSGAlterVol     $07
00097A90 8006                       	dc.b	nRst, $06
00097A92 E100                       	smpsAlterNote       $00
00097A94 01                         	dc.b	$01
00097A95 E104                       	smpsAlterNote       $04
00097A97 01                         	dc.b	$01
00097A98 E100                       	smpsAlterNote       $00
00097A9A 01                         	dc.b	$01
00097A9B E1FA                       	smpsAlterNote       $FA
00097A9D 01                         	dc.b	$01
00097A9E E1FD                       	smpsAlterNote       $FD
00097AA0 ECF5                       	smpsPSGAlterVol     $F5
00097AA2 9206                       	dc.b	nF1, $06
00097AA4 EC04                       	smpsPSGAlterVol     $04
00097AA6 E701                       	dc.b	smpsNoAttack, $01
00097AA8 EC07                       	smpsPSGAlterVol     $07
00097AAA 8003                       	dc.b	nRst, $03
00097AAC ECF5                       	smpsPSGAlterVol     $F5
00097AAE 9107                       	dc.b	nE1, $07
00097AB0 EC0B                       	smpsPSGAlterVol     $0B
00097AB2 8006                       	dc.b	nRst, $06
00097AB4 E100                       	smpsAlterNote       $00
00097AB6 01                         	dc.b	$01
00097AB7 E103                       	smpsAlterNote       $03
00097AB9 0101                       	dc.b	$01, $01
00097ABB E1FD                       	smpsAlterNote       $FD
00097ABD 01                         	dc.b	$01
00097ABE ECF5                       	smpsPSGAlterVol     $F5
00097AC0 9207                       	dc.b	nF1, $07
00097AC2 EC0B                       	smpsPSGAlterVol     $0B
00097AC4 8004                       	dc.b	nRst, $04
00097AC6 ECF5                       	smpsPSGAlterVol     $F5
00097AC8 9206                       	dc.b	nF1, $06
00097ACA EC04                       	smpsPSGAlterVol     $04
00097ACC E701                       	dc.b	smpsNoAttack, $01
00097ACE EC07                       	smpsPSGAlterVol     $07
00097AD0 8006                       	dc.b	nRst, $06
00097AD2 E103                       	smpsAlterNote       $03
00097AD4 01                         	dc.b	$01
00097AD5 E104                       	smpsAlterNote       $04
00097AD7 01                         	dc.b	$01
00097AD8 E100                       	smpsAlterNote       $00
00097ADA 01                         	dc.b	$01
00097ADB E1FB                       	smpsAlterNote       $FB
00097ADD 01                         	dc.b	$01
00097ADE E1FD                       	smpsAlterNote       $FD
00097AE0 ECF5                       	smpsPSGAlterVol     $F5
00097AE2 9406                       	dc.b	nG1, $06
00097AE4 EC04                       	smpsPSGAlterVol     $04
00097AE6 E701                       	dc.b	smpsNoAttack, $01
00097AE8 EC07                       	smpsPSGAlterVol     $07
00097AEA 8003                       	dc.b	nRst, $03
00097AEC ECF5                       	smpsPSGAlterVol     $F5
00097AEE 9406                       	dc.b	nG1, $06
00097AF0 EC04                       	smpsPSGAlterVol     $04
00097AF2 E701                       	dc.b	smpsNoAttack, $01
00097AF4 EC07                       	smpsPSGAlterVol     $07
00097AF6 8006                       	dc.b	nRst, $06
00097AF8 E100                       	smpsAlterNote       $00
00097AFA 01                         	dc.b	$01
00097AFB E104                       	smpsAlterNote       $04
00097AFD 01                         	dc.b	$01
00097AFE E100                       	smpsAlterNote       $00
00097B00 01                         	dc.b	$01
00097B01 E1FD                       	smpsAlterNote       $FD
00097B03 01                         	dc.b	$01
00097B04 ECF5                       	smpsPSGAlterVol     $F5
00097B06 9206                       	dc.b	nF1, $06
00097B08 EC04                       	smpsPSGAlterVol     $04
00097B0A E701                       	dc.b	smpsNoAttack, $01
00097B0C EC07                       	smpsPSGAlterVol     $07
00097B0E 8003                       	dc.b	nRst, $03
00097B10 ECF5                       	smpsPSGAlterVol     $F5
00097B12 9207                       	dc.b	nF1, $07
00097B14 EC0B                       	smpsPSGAlterVol     $0B
00097B16 8007                       	dc.b	nRst, $07
00097B18 E103                       	smpsAlterNote       $03
00097B1A 0101                       	dc.b	$01, $01
00097B1C E1FD                       	smpsAlterNote       $FD
00097B1E 01                         	dc.b	$01
00097B1F E1FA                       	smpsAlterNote       $FA
00097B21 01                         	dc.b	$01
00097B22 E1FD                       	smpsAlterNote       $FD
00097B24 ECF5                       	smpsPSGAlterVol     $F5
00097B26 9206                       	dc.b	nF1, $06
00097B28 EC0B                       	smpsPSGAlterVol     $0B
00097B2A 8004                       	dc.b	nRst, $04
00097B2C ECF5                       	smpsPSGAlterVol     $F5
00097B2E 9206                       	dc.b	nF1, $06
00097B30 EC04                       	smpsPSGAlterVol     $04
00097B32 E701                       	dc.b	smpsNoAttack, $01
00097B34 EC07                       	smpsPSGAlterVol     $07
00097B36 8006                       	dc.b	nRst, $06
00097B38 E100                       	smpsAlterNote       $00
00097B3A 01                         	dc.b	$01
00097B3B E104                       	smpsAlterNote       $04
00097B3D 01                         	dc.b	$01
00097B3E E100                       	smpsAlterNote       $00
00097B40 01                         	dc.b	$01
00097B41 E1FA                       	smpsAlterNote       $FA
00097B43 01                         	dc.b	$01
00097B44 E1FD                       	smpsAlterNote       $FD
00097B46 ECF5                       	smpsPSGAlterVol     $F5
00097B48 9206                       	dc.b	nF1, $06
00097B4A EC04                       	smpsPSGAlterVol     $04
00097B4C E704                       	dc.b	smpsNoAttack, $04
00097B4E ECFC                       	smpsPSGAlterVol     $FC
00097B50 9207                       	dc.b	nF1, $07
00097B52 EC0B                       	smpsPSGAlterVol     $0B
00097B54 8006                       	dc.b	nRst, $06
00097B56 E100                       	smpsAlterNote       $00
00097B58 01                         	dc.b	$01
00097B59 E104                       	smpsAlterNote       $04
00097B5B 01                         	dc.b	$01
00097B5C E103                       	smpsAlterNote       $03
00097B5E 01                         	dc.b	$01
00097B5F E1FD                       	smpsAlterNote       $FD
00097B61 01                         	dc.b	$01
00097B62 ECF5                       	smpsPSGAlterVol     $F5
00097B64 9207                       	dc.b	nF1, $07
00097B66 EC0B                       	smpsPSGAlterVol     $0B
00097B68 8004                       	dc.b	nRst, $04
00097B6A ECF5                       	smpsPSGAlterVol     $F5
00097B6C 9206                       	dc.b	nF1, $06
00097B6E EC0B                       	smpsPSGAlterVol     $0B
00097B70 8007                       	dc.b	nRst, $07
00097B72 E103                       	smpsAlterNote       $03
00097B74 0101                       	dc.b	$01, $01
00097B76 E100                       	smpsAlterNote       $00
00097B78 01                         	dc.b	$01
00097B79 E1FA                       	smpsAlterNote       $FA
00097B7B 01                         	dc.b	$01
00097B7C E1FD                       	smpsAlterNote       $FD
00097B7E ECF5                       	smpsPSGAlterVol     $F5
00097B80 9206                       	dc.b	nF1, $06
00097B82 EC04                       	smpsPSGAlterVol     $04
00097B84 E704                       	dc.b	smpsNoAttack, $04
00097B86 ECFC                       	smpsPSGAlterVol     $FC
00097B88 9206                       	dc.b	nF1, $06
00097B8A EC04                       	smpsPSGAlterVol     $04
00097B8C E701                       	dc.b	smpsNoAttack, $01
00097B8E EC07                       	smpsPSGAlterVol     $07
00097B90 8006                       	dc.b	nRst, $06
00097B92 E100                       	smpsAlterNote       $00
00097B94 01                         	dc.b	$01
00097B95 E104                       	smpsAlterNote       $04
00097B97 01                         	dc.b	$01
00097B98 E100                       	smpsAlterNote       $00
00097B9A 01                         	dc.b	$01
00097B9B E1FD                       	smpsAlterNote       $FD
00097B9D 01                         	dc.b	$01
00097B9E ECF5                       	smpsPSGAlterVol     $F5
00097BA0 9206                       	dc.b	nF1, $06
00097BA2 EC04                       	smpsPSGAlterVol     $04
00097BA4 E701                       	dc.b	smpsNoAttack, $01
00097BA6 EC07                       	smpsPSGAlterVol     $07
00097BA8 8003                       	dc.b	nRst, $03
00097BAA ECF5                       	smpsPSGAlterVol     $F5
00097BAC 9207                       	dc.b	nF1, $07
00097BAE EC0B                       	smpsPSGAlterVol     $0B
00097BB0 8007                       	dc.b	nRst, $07
00097BB2 E103                       	smpsAlterNote       $03
00097BB4 0101                       	dc.b	$01, $01
00097BB6 E1FD                       	smpsAlterNote       $FD
00097BB8 01                         	dc.b	$01
00097BB9 E1FA                       	smpsAlterNote       $FA
00097BBB 01                         	dc.b	$01
00097BBC E1FD                       	smpsAlterNote       $FD
00097BBE ECF5                       	smpsPSGAlterVol     $F5
00097BC0 9106                       	dc.b	nE1, $06
00097BC2 EC0B                       	smpsPSGAlterVol     $0B
00097BC4 8004                       	dc.b	nRst, $04
00097BC6 ECF5                       	smpsPSGAlterVol     $F5
00097BC8 9106                       	dc.b	nE1, $06
00097BCA EC04                       	smpsPSGAlterVol     $04
00097BCC E701                       	dc.b	smpsNoAttack, $01
00097BCE EC07                       	smpsPSGAlterVol     $07
00097BD0 8006                       	dc.b	nRst, $06
00097BD2 E100                       	smpsAlterNote       $00
00097BD4 01                         	dc.b	$01
00097BD5 E104                       	smpsAlterNote       $04
00097BD7 01                         	dc.b	$01
00097BD8 E100                       	smpsAlterNote       $00
00097BDA 01                         	dc.b	$01
00097BDB E1FA                       	smpsAlterNote       $FA
00097BDD 01                         	dc.b	$01
00097BDE E1FD                       	smpsAlterNote       $FD
00097BE0 ECF5                       	smpsPSGAlterVol     $F5
00097BE2 9106                       	dc.b	nE1, $06
00097BE4 EC04                       	smpsPSGAlterVol     $04
00097BE6 E701                       	dc.b	smpsNoAttack, $01
00097BE8 EC07                       	smpsPSGAlterVol     $07
00097BEA 8003                       	dc.b	nRst, $03
00097BEC ECF5                       	smpsPSGAlterVol     $F5
00097BEE 9106                       	dc.b	nE1, $06
00097BF0 EC04                       	smpsPSGAlterVol     $04
00097BF2 E701                       	dc.b	smpsNoAttack, $01
00097BF4 EC07                       	smpsPSGAlterVol     $07
00097BF6 8006                       	dc.b	nRst, $06
00097BF8 E100                       	smpsAlterNote       $00
00097BFA 01                         	dc.b	$01
00097BFB E104                       	smpsAlterNote       $04
00097BFD 01                         	dc.b	$01
00097BFE E103                       	smpsAlterNote       $03
00097C00 01                         	dc.b	$01
00097C01 E1FD                       	smpsAlterNote       $FD
00097C03 01                         	dc.b	$01
00097C04 ECF5                       	smpsPSGAlterVol     $F5
00097C06 9107                       	dc.b	nE1, $07
00097C08 EC0B                       	smpsPSGAlterVol     $0B
00097C0A 8004                       	dc.b	nRst, $04
00097C0C ECF5                       	smpsPSGAlterVol     $F5
00097C0E 9106                       	dc.b	nE1, $06
00097C10 EC0B                       	smpsPSGAlterVol     $0B
00097C12 8007                       	dc.b	nRst, $07
00097C14 E103                       	smpsAlterNote       $03
00097C16 0101                       	dc.b	$01, $01
00097C18 E100                       	smpsAlterNote       $00
00097C1A 01                         	dc.b	$01
00097C1B E1FA                       	smpsAlterNote       $FA
00097C1D 01                         	dc.b	$01
00097C1E E1FD                       	smpsAlterNote       $FD
00097C20 ECF5                       	smpsPSGAlterVol     $F5
00097C22 9106                       	dc.b	nE1, $06
00097C24 EC04                       	smpsPSGAlterVol     $04
00097C26 E701                       	dc.b	smpsNoAttack, $01
00097C28 EC07                       	smpsPSGAlterVol     $07
00097C2A 8003                       	dc.b	nRst, $03
00097C2C ECF5                       	smpsPSGAlterVol     $F5
00097C2E 9106                       	dc.b	nE1, $06
00097C30 EC04                       	smpsPSGAlterVol     $04
00097C32 E701                       	dc.b	smpsNoAttack, $01
00097C34 EC07                       	smpsPSGAlterVol     $07
00097C36 8003                       	dc.b	nRst, $03
00097C38 ECF5                       	smpsPSGAlterVol     $F5
00097C3A 9207                       	dc.b	nF1, $07
00097C3C EC0B                       	smpsPSGAlterVol     $0B
00097C3E 8006                       	dc.b	nRst, $06
00097C40 E100                       	smpsAlterNote       $00
00097C42 01                         	dc.b	$01
00097C43 E104                       	smpsAlterNote       $04
00097C45 01                         	dc.b	$01
00097C46 E103                       	smpsAlterNote       $03
00097C48 01                         	dc.b	$01
00097C49 E1FD                       	smpsAlterNote       $FD
00097C4B 01                         	dc.b	$01
00097C4C E1F9                       	smpsAlterNote       $F9
00097C4E 01                         	dc.b	$01
00097C4F E1FD                       	smpsAlterNote       $FD
00097C51 01                         	dc.b	$01
00097C52 E100                       	smpsAlterNote       $00
00097C54 01                         	dc.b	$01
00097C55 E104                       	smpsAlterNote       $04
00097C57 01                         	dc.b	$01
00097C58 E1FD                       	smpsAlterNote       $FD
00097C5A ECF5                       	smpsPSGAlterVol     $F5
00097C5C 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097C60 EC04                       	smpsPSGAlterVol     $04
00097C62 E701                       	dc.b	smpsNoAttack, $01
00097C64 EC07                       	smpsPSGAlterVol     $07
00097C66 8009                       	dc.b	nRst, $09
00097C68 E100                       	smpsAlterNote       $00
00097C6A 01                         	dc.b	$01
00097C6B E104                       	smpsAlterNote       $04
00097C6D 01                         	dc.b	$01
00097C6E E103                       	smpsAlterNote       $03
00097C70 01                         	dc.b	$01
00097C71 E1FD                       	smpsAlterNote       $FD
00097C73 01                         	dc.b	$01
00097C74 E1F9                       	smpsAlterNote       $F9
00097C76 01                         	dc.b	$01
00097C77 E1FD                       	smpsAlterNote       $FD
00097C79 01                         	dc.b	$01
00097C7A E100                       	smpsAlterNote       $00
00097C7C 01                         	dc.b	$01
00097C7D E104                       	smpsAlterNote       $04
00097C7F 01                         	dc.b	$01
00097C80 E100                       	smpsAlterNote       $00
00097C82 01                         	dc.b	$01
00097C83 E1FA                       	smpsAlterNote       $FA
00097C85 01                         	dc.b	$01
00097C86 E1F9                       	smpsAlterNote       $F9
00097C88 01                         	dc.b	$01
00097C89 E1FD                       	smpsAlterNote       $FD
00097C8B 01                         	dc.b	$01
00097C8C E103                       	smpsAlterNote       $03
00097C8E 0101                       	dc.b	$01, $01
00097C90 E100                       	smpsAlterNote       $00
00097C92 01                         	dc.b	$01
00097C93 E1FD                       	smpsAlterNote       $FD
00097C95 ECF5                       	smpsPSGAlterVol     $F5
00097C97 9202                       	dc.b	nF1, $02
00097C99 EC04                       	smpsPSGAlterVol     $04
00097C9B E701                       	dc.b	smpsNoAttack, $01
00097C9D ECFC                       	smpsPSGAlterVol     $FC
00097C9F 9106                       	dc.b	nE1, $06
00097CA1 EC04                       	smpsPSGAlterVol     $04
00097CA3 E701                       	dc.b	smpsNoAttack, $01
00097CA5 EC07                       	smpsPSGAlterVol     $07
00097CA7 8006                       	dc.b	nRst, $06
00097CA9 E100                       	smpsAlterNote       $00
00097CAB 01                         	dc.b	$01
00097CAC E104                       	smpsAlterNote       $04
00097CAE 01                         	dc.b	$01
00097CAF E100                       	smpsAlterNote       $00
00097CB1 01                         	dc.b	$01
00097CB2 E1FD                       	smpsAlterNote       $FD
00097CB4 01                         	dc.b	$01
00097CB5 E1F9                       	smpsAlterNote       $F9
00097CB7 01                         	dc.b	$01
00097CB8 E1FD                       	smpsAlterNote       $FD
00097CBA 01                         	dc.b	$01
00097CBB E103                       	smpsAlterNote       $03
00097CBD 01                         	dc.b	$01
00097CBE E104                       	smpsAlterNote       $04
00097CC0 01                         	dc.b	$01
00097CC1 E1FD                       	smpsAlterNote       $FD
00097CC3 ECF5                       	smpsPSGAlterVol     $F5
00097CC5 9102                       	dc.b	nE1, $02
00097CC7 EC04                       	smpsPSGAlterVol     $04
00097CC9 E701                       	dc.b	smpsNoAttack, $01
00097CCB ECFC                       	smpsPSGAlterVol     $FC
00097CCD 920D                       	dc.b	nF1, $0D
00097CCF E100                       	smpsAlterNote       $00
00097CD1 E701                       	dc.b	smpsNoAttack, $01
00097CD3 E104                       	smpsAlterNote       $04
00097CD5 E701                       	dc.b	smpsNoAttack, $01
00097CD7 E100                       	smpsAlterNote       $00
00097CD9 E701                       	dc.b	smpsNoAttack, $01
00097CDB E1FD                       	smpsAlterNote       $FD
00097CDD E701                       	dc.b	smpsNoAttack, $01
00097CDF E1F9                       	smpsAlterNote       $F9
00097CE1 E701                       	dc.b	smpsNoAttack, $01
00097CE3 E1FD                       	smpsAlterNote       $FD
00097CE5 E701                       	dc.b	smpsNoAttack, $01
00097CE7 E103                       	smpsAlterNote       $03
00097CE9 E701                       	dc.b	smpsNoAttack, $01
00097CEB E104                       	smpsAlterNote       $04
00097CED E701                       	dc.b	smpsNoAttack, $01
00097CEF E100                       	smpsAlterNote       $00
00097CF1 E701                       	dc.b	smpsNoAttack, $01
00097CF3 E1FA                       	smpsAlterNote       $FA
00097CF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097CF9 E1FD                       	smpsAlterNote       $FD
00097CFB E701                       	dc.b	smpsNoAttack, $01
00097CFD E103                       	smpsAlterNote       $03
00097CFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D03 E1FD                       	smpsAlterNote       $FD
00097D05 E701                       	dc.b	smpsNoAttack, $01
00097D07 E1F9                       	smpsAlterNote       $F9
00097D09 E701                       	dc.b	smpsNoAttack, $01
00097D0B E1FA                       	smpsAlterNote       $FA
00097D0D E701                       	dc.b	smpsNoAttack, $01
00097D0F E100                       	smpsAlterNote       $00
00097D11 EC04                       	smpsPSGAlterVol     $04
00097D13 E701                       	dc.b	smpsNoAttack, $01
00097D15 EC07                       	smpsPSGAlterVol     $07
00097D17 E104                       	smpsAlterNote       $04
00097D19 8001                       	dc.b	nRst, $01
00097D1B E100                       	smpsAlterNote       $00
00097D1D 01                         	dc.b	$01
00097D1E E1FD                       	smpsAlterNote       $FD
00097D20 01                         	dc.b	$01
00097D21 E1F9                       	smpsAlterNote       $F9
00097D23 01                         	dc.b	$01
00097D24 E1FD                       	smpsAlterNote       $FD
00097D26 01                         	dc.b	$01
00097D27 E103                       	smpsAlterNote       $03
00097D29 01                         	dc.b	$01
00097D2A E104                       	smpsAlterNote       $04
00097D2C 01                         	dc.b	$01
00097D2D E1FD                       	smpsAlterNote       $FD
00097D2F ECF5                       	smpsPSGAlterVol     $F5
00097D31 9106                       	dc.b	nE1, $06
00097D33 EC04                       	smpsPSGAlterVol     $04
00097D35 E701                       	dc.b	smpsNoAttack, $01
00097D37 EC07                       	smpsPSGAlterVol     $07
00097D39 8003                       	dc.b	nRst, $03
00097D3B ECF5                       	smpsPSGAlterVol     $F5
00097D3D 9106                       	dc.b	nE1, $06
00097D3F EC04                       	smpsPSGAlterVol     $04
00097D41 E701                       	dc.b	smpsNoAttack, $01
00097D43 EC07                       	smpsPSGAlterVol     $07
00097D45 8006                       	dc.b	nRst, $06
00097D47 E100                       	smpsAlterNote       $00
00097D49 01                         	dc.b	$01
00097D4A E104                       	smpsAlterNote       $04
00097D4C 01                         	dc.b	$01
00097D4D E100                       	smpsAlterNote       $00
00097D4F 01                         	dc.b	$01
00097D50 E1FA                       	smpsAlterNote       $FA
00097D52 01                         	dc.b	$01
00097D53 E1FD                       	smpsAlterNote       $FD
00097D55 ECF5                       	smpsPSGAlterVol     $F5
00097D57 9206                       	dc.b	nF1, $06
00097D59 EC04                       	smpsPSGAlterVol     $04
00097D5B E701                       	dc.b	smpsNoAttack, $01
00097D5D EC07                       	smpsPSGAlterVol     $07
00097D5F 8003                       	dc.b	nRst, $03
00097D61 ECF5                       	smpsPSGAlterVol     $F5
00097D63 9207                       	dc.b	nF1, $07
00097D65 EC0B                       	smpsPSGAlterVol     $0B
00097D67 8006                       	dc.b	nRst, $06
00097D69 E100                       	smpsAlterNote       $00
00097D6B 01                         	dc.b	$01
00097D6C E103                       	smpsAlterNote       $03
00097D6E 0101                       	dc.b	$01, $01
00097D70 E1FD                       	smpsAlterNote       $FD
00097D72 01                         	dc.b	$01
00097D73 ECF5                       	smpsPSGAlterVol     $F5
00097D75 9107                       	dc.b	nE1, $07
00097D77 EC0B                       	smpsPSGAlterVol     $0B
00097D79 8004                       	dc.b	nRst, $04
00097D7B ECF5                       	smpsPSGAlterVol     $F5
00097D7D 9106                       	dc.b	nE1, $06
00097D7F EC04                       	smpsPSGAlterVol     $04
00097D81 E701                       	dc.b	smpsNoAttack, $01
00097D83 EC07                       	smpsPSGAlterVol     $07
00097D85 8006                       	dc.b	nRst, $06
00097D87 E103                       	smpsAlterNote       $03
00097D89 01                         	dc.b	$01
00097D8A E104                       	smpsAlterNote       $04
00097D8C 01                         	dc.b	$01
00097D8D E100                       	smpsAlterNote       $00
00097D8F 01                         	dc.b	$01
00097D90 E1FA                       	smpsAlterNote       $FA
00097D92 01                         	dc.b	$01
00097D93 E1FD                       	smpsAlterNote       $FD
00097D95 ECF5                       	smpsPSGAlterVol     $F5
00097D97 9106                       	dc.b	nE1, $06
00097D99 EC04                       	smpsPSGAlterVol     $04
00097D9B E701                       	dc.b	smpsNoAttack, $01
00097D9D EC07                       	smpsPSGAlterVol     $07
00097D9F 8003                       	dc.b	nRst, $03
00097DA1 ECF5                       	smpsPSGAlterVol     $F5
00097DA3 9106                       	dc.b	nE1, $06
00097DA5 EC04                       	smpsPSGAlterVol     $04
00097DA7 E701                       	dc.b	smpsNoAttack, $01
00097DA9 EC07                       	smpsPSGAlterVol     $07
00097DAB 8003                       	dc.b	nRst, $03
00097DAD ECF5                       	smpsPSGAlterVol     $F5
00097DAF 9207                       	dc.b	nF1, $07
00097DB1 EC0B                       	smpsPSGAlterVol     $0B
00097DB3 8006                       	dc.b	nRst, $06
00097DB5 E100                       	smpsAlterNote       $00
00097DB7 01                         	dc.b	$01
00097DB8 E103                       	smpsAlterNote       $03
00097DBA 0101                       	dc.b	$01, $01
00097DBC E1FD                       	smpsAlterNote       $FD
00097DBE 01                         	dc.b	$01
00097DBF E1F9                       	smpsAlterNote       $F9
00097DC1 01                         	dc.b	$01
00097DC2 E1FA                       	smpsAlterNote       $FA
00097DC4 01                         	dc.b	$01
00097DC5 E100                       	smpsAlterNote       $00
00097DC7 01                         	dc.b	$01
00097DC8 E104                       	smpsAlterNote       $04
00097DCA 01                         	dc.b	$01
00097DCB E1FD                       	smpsAlterNote       $FD
00097DCD ECF5                       	smpsPSGAlterVol     $F5
00097DCF 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097DD3 EC04                       	smpsPSGAlterVol     $04
00097DD5 E701                       	dc.b	smpsNoAttack, $01
00097DD7 EC07                       	smpsPSGAlterVol     $07
00097DD9 8009                       	dc.b	nRst, $09
00097DDB E100                       	smpsAlterNote       $00
00097DDD 01                         	dc.b	$01
00097DDE E103                       	smpsAlterNote       $03
00097DE0 0101                       	dc.b	$01, $01
00097DE2 E1FD                       	smpsAlterNote       $FD
00097DE4 01                         	dc.b	$01
00097DE5 E1F9                       	smpsAlterNote       $F9
00097DE7 01                         	dc.b	$01
00097DE8 E1FA                       	smpsAlterNote       $FA
00097DEA 01                         	dc.b	$01
00097DEB E100                       	smpsAlterNote       $00
00097DED 01                         	dc.b	$01
00097DEE E104                       	smpsAlterNote       $04
00097DF0 01                         	dc.b	$01
00097DF1 E100                       	smpsAlterNote       $00
00097DF3 01                         	dc.b	$01
00097DF4 E1FD                       	smpsAlterNote       $FD
00097DF6 01                         	dc.b	$01
00097DF7 E1F9                       	smpsAlterNote       $F9
00097DF9 01                         	dc.b	$01
00097DFA E1FD                       	smpsAlterNote       $FD
00097DFC 01                         	dc.b	$01
00097DFD E103                       	smpsAlterNote       $03
00097DFF 01                         	dc.b	$01
00097E00 E104                       	smpsAlterNote       $04
00097E02 01                         	dc.b	$01
00097E03 E100                       	smpsAlterNote       $00
00097E05 01                         	dc.b	$01
00097E06 E1FD                       	smpsAlterNote       $FD
00097E08 ECF5                       	smpsPSGAlterVol     $F5
00097E0A 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097E0E EC04                       	smpsPSGAlterVol     $04
00097E10 E701                       	dc.b	smpsNoAttack, $01
00097E12 EC07                       	smpsPSGAlterVol     $07
00097E14 8006                       	dc.b	nRst, $06
00097E16 E100                       	smpsAlterNote       $00
00097E18 01                         	dc.b	$01
00097E19 E104                       	smpsAlterNote       $04
00097E1B 01                         	dc.b	$01
00097E1C E103                       	smpsAlterNote       $03
00097E1E 01                         	dc.b	$01
00097E1F E1FD                       	smpsAlterNote       $FD
00097E21 01                         	dc.b	$01
00097E22 E1F9                       	smpsAlterNote       $F9
00097E24 01                         	dc.b	$01
00097E25 E1FD                       	smpsAlterNote       $FD
00097E27 01                         	dc.b	$01
00097E28 E100                       	smpsAlterNote       $00
00097E2A 01                         	dc.b	$01
00097E2B E104                       	smpsAlterNote       $04
00097E2D 01                         	dc.b	$01
00097E2E E1FD                       	smpsAlterNote       $FD
00097E30 ECF5                       	smpsPSGAlterVol     $F5
00097E32 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097E36 E100                       	smpsAlterNote       $00
00097E38 E701                       	dc.b	smpsNoAttack, $01
00097E3A E104                       	smpsAlterNote       $04
00097E3C E701                       	dc.b	smpsNoAttack, $01
00097E3E E100                       	smpsAlterNote       $00
00097E40 E701                       	dc.b	smpsNoAttack, $01
00097E42 E1FD                       	smpsAlterNote       $FD
00097E44 E701                       	dc.b	smpsNoAttack, $01
00097E46 E1F9                       	smpsAlterNote       $F9
00097E48 E701                       	dc.b	smpsNoAttack, $01
00097E4A E1FD                       	smpsAlterNote       $FD
00097E4C E701                       	dc.b	smpsNoAttack, $01
00097E4E E103                       	smpsAlterNote       $03
00097E50 E701                       	dc.b	smpsNoAttack, $01
00097E52 E104                       	smpsAlterNote       $04
00097E54 E701                       	dc.b	smpsNoAttack, $01
00097E56 E100                       	smpsAlterNote       $00
00097E58 E701                       	dc.b	smpsNoAttack, $01
00097E5A E1FA                       	smpsAlterNote       $FA
00097E5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E60 E1FD                       	smpsAlterNote       $FD
00097E62 E701                       	dc.b	smpsNoAttack, $01
00097E64 E103                       	smpsAlterNote       $03
00097E66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E6A E100                       	smpsAlterNote       $00
00097E6C E701                       	dc.b	smpsNoAttack, $01
00097E6E E1FA                       	smpsAlterNote       $FA
00097E70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E74 E100                       	smpsAlterNote       $00
00097E76 EC04                       	smpsPSGAlterVol     $04
00097E78 E701                       	dc.b	smpsNoAttack, $01
00097E7A EC07                       	smpsPSGAlterVol     $07
00097E7C E104                       	smpsAlterNote       $04
00097E7E 8001                       	dc.b	nRst, $01
00097E80 E103                       	smpsAlterNote       $03
00097E82 01                         	dc.b	$01
00097E83 E1FD                       	smpsAlterNote       $FD
00097E85 01                         	dc.b	$01
00097E86 E1F9                       	smpsAlterNote       $F9
00097E88 01                         	dc.b	$01
00097E89 E1FD                       	smpsAlterNote       $FD
00097E8B 01                         	dc.b	$01
00097E8C E100                       	smpsAlterNote       $00
00097E8E 01                         	dc.b	$01
00097E8F E104                       	smpsAlterNote       $04
00097E91 01                         	dc.b	$01
00097E92 E1FD                       	smpsAlterNote       $FD
00097E94 ECF5                       	smpsPSGAlterVol     $F5
00097E96 9106                       	dc.b	nE1, $06
00097E98 EC04                       	smpsPSGAlterVol     $04
00097E9A E701                       	dc.b	smpsNoAttack, $01
00097E9C EC07                       	smpsPSGAlterVol     $07
00097E9E 8003                       	dc.b	nRst, $03
00097EA0 ECF5                       	smpsPSGAlterVol     $F5
00097EA2 9106                       	dc.b	nE1, $06
00097EA4 EC04                       	smpsPSGAlterVol     $04
00097EA6 E701                       	dc.b	smpsNoAttack, $01
00097EA8 EC07                       	smpsPSGAlterVol     $07
00097EAA 8006                       	dc.b	nRst, $06
00097EAC E100                       	smpsAlterNote       $00
00097EAE 01                         	dc.b	$01
00097EAF E104                       	smpsAlterNote       $04
00097EB1 01                         	dc.b	$01
00097EB2 E100                       	smpsAlterNote       $00
00097EB4 01                         	dc.b	$01
00097EB5 E1FD                       	smpsAlterNote       $FD
00097EB7 01                         	dc.b	$01
00097EB8 ECF5                       	smpsPSGAlterVol     $F5
00097EBA 9206                       	dc.b	nF1, $06
00097EBC EC04                       	smpsPSGAlterVol     $04
00097EBE E701                       	dc.b	smpsNoAttack, $01
00097EC0 EC07                       	smpsPSGAlterVol     $07
00097EC2 8003                       	dc.b	nRst, $03
00097EC4 ECF5                       	smpsPSGAlterVol     $F5
00097EC6 9207                       	dc.b	nF1, $07
00097EC8 EC0B                       	smpsPSGAlterVol     $0B
00097ECA 8007                       	dc.b	nRst, $07
00097ECC E103                       	smpsAlterNote       $03
00097ECE 0101                       	dc.b	$01, $01
00097ED0 E1FD                       	smpsAlterNote       $FD
00097ED2 01                         	dc.b	$01
00097ED3 E1FA                       	smpsAlterNote       $FA
00097ED5 01                         	dc.b	$01
00097ED6 E1FD                       	smpsAlterNote       $FD
00097ED8 ECF5                       	smpsPSGAlterVol     $F5
00097EDA 9106                       	dc.b	nE1, $06
00097EDC EC0B                       	smpsPSGAlterVol     $0B
00097EDE 8004                       	dc.b	nRst, $04
00097EE0 ECF5                       	smpsPSGAlterVol     $F5
00097EE2 9106                       	dc.b	nE1, $06
00097EE4 EC04                       	smpsPSGAlterVol     $04
00097EE6 E701                       	dc.b	smpsNoAttack, $01
00097EE8 EC07                       	smpsPSGAlterVol     $07
00097EEA 8006                       	dc.b	nRst, $06
00097EEC E100                       	smpsAlterNote       $00
00097EEE 01                         	dc.b	$01
00097EEF E104                       	smpsAlterNote       $04
00097EF1 01                         	dc.b	$01
00097EF2 E100                       	smpsAlterNote       $00
00097EF4 01                         	dc.b	$01
00097EF5 E1FA                       	smpsAlterNote       $FA
00097EF7 01                         	dc.b	$01
00097EF8 E1FD                       	smpsAlterNote       $FD
00097EFA ECF5                       	smpsPSGAlterVol     $F5
00097EFC 9206                       	dc.b	nF1, $06
00097EFE EC04                       	smpsPSGAlterVol     $04
00097F00 E701                       	dc.b	smpsNoAttack, $01
00097F02 EC07                       	smpsPSGAlterVol     $07
00097F04 8003                       	dc.b	nRst, $03
00097F06 ECF5                       	smpsPSGAlterVol     $F5
00097F08 9206                       	dc.b	nF1, $06
00097F0A EC04                       	smpsPSGAlterVol     $04
00097F0C E701                       	dc.b	smpsNoAttack, $01
00097F0E EC07                       	smpsPSGAlterVol     $07
00097F10 8006                       	dc.b	nRst, $06
00097F12 E100                       	smpsAlterNote       $00
00097F14 01                         	dc.b	$01
00097F15 E104                       	smpsAlterNote       $04
00097F17 01                         	dc.b	$01
00097F18 E103                       	smpsAlterNote       $03
00097F1A 01                         	dc.b	$01
00097F1B E1FD                       	smpsAlterNote       $FD
00097F1D 01                         	dc.b	$01
00097F1E ECF5                       	smpsPSGAlterVol     $F5
00097F20 9107                       	dc.b	nE1, $07
00097F22 EC0B                       	smpsPSGAlterVol     $0B
00097F24 8004                       	dc.b	nRst, $04
00097F26 ECF5                       	smpsPSGAlterVol     $F5
00097F28 9106                       	dc.b	nE1, $06
00097F2A EC0B                       	smpsPSGAlterVol     $0B
00097F2C 8007                       	dc.b	nRst, $07
00097F2E E103                       	smpsAlterNote       $03
00097F30 0101                       	dc.b	$01, $01
00097F32 E100                       	smpsAlterNote       $00
00097F34 01                         	dc.b	$01
00097F35 E1FA                       	smpsAlterNote       $FA
00097F37 01                         	dc.b	$01
00097F38 E1FD                       	smpsAlterNote       $FD
00097F3A ECF5                       	smpsPSGAlterVol     $F5
00097F3C 9206                       	dc.b	nF1, $06
00097F3E EC04                       	smpsPSGAlterVol     $04
00097F40 E701                       	dc.b	smpsNoAttack, $01
00097F42 EC07                       	smpsPSGAlterVol     $07
00097F44 8003                       	dc.b	nRst, $03
00097F46 ECF5                       	smpsPSGAlterVol     $F5
00097F48 9206                       	dc.b	nF1, $06
00097F4A EC04                       	smpsPSGAlterVol     $04
00097F4C E701                       	dc.b	smpsNoAttack, $01
00097F4E EC07                       	smpsPSGAlterVol     $07
00097F50 8006                       	dc.b	nRst, $06
00097F52 E100                       	smpsAlterNote       $00
00097F54 01                         	dc.b	$01
00097F55 E104                       	smpsAlterNote       $04
00097F57 01                         	dc.b	$01
00097F58 E100                       	smpsAlterNote       $00
00097F5A 01                         	dc.b	$01
00097F5B E1FD                       	smpsAlterNote       $FD
00097F5D 01                         	dc.b	$01
00097F5E ECF5                       	smpsPSGAlterVol     $F5
00097F60 9106                       	dc.b	nE1, $06
00097F62 EC04                       	smpsPSGAlterVol     $04
00097F64 E701                       	dc.b	smpsNoAttack, $01
00097F66 EC07                       	smpsPSGAlterVol     $07
00097F68 8003                       	dc.b	nRst, $03
00097F6A ECF5                       	smpsPSGAlterVol     $F5
00097F6C 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097F70 EC04                       	smpsPSGAlterVol     $04
00097F72 E701                       	dc.b	smpsNoAttack, $01
00097F74 ECFC                       	smpsPSGAlterVol     $FC
00097F76 9103                       	dc.b	nE1, $03
00097F78 EC04                       	smpsPSGAlterVol     $04
00097F7A E701                       	dc.b	smpsNoAttack, $01
00097F7C ECFC                       	smpsPSGAlterVol     $FC
00097F7E 9102                       	dc.b	nE1, $02
00097F80 EC04                       	smpsPSGAlterVol     $04
00097F82 E701                       	dc.b	smpsNoAttack, $01
00097F84 ECFC                       	smpsPSGAlterVol     $FC
00097F86 9103                       	dc.b	nE1, $03
00097F88 EC0B                       	smpsPSGAlterVol     $0B
00097F8A 800A                       	dc.b	nRst, $0A
00097F8C E100                       	smpsAlterNote       $00
00097F8E 01                         	dc.b	$01
00097F8F E104                       	smpsAlterNote       $04
00097F91 01                         	dc.b	$01
00097F92 E100                       	smpsAlterNote       $00
00097F94 01                         	dc.b	$01
00097F95 E1FA                       	smpsAlterNote       $FA
00097F97 01                         	dc.b	$01
00097F98 E1F9                       	smpsAlterNote       $F9
00097F9A 01                         	dc.b	$01
00097F9B E1FD                       	smpsAlterNote       $FD
00097F9D 01                         	dc.b	$01
00097F9E E103                       	smpsAlterNote       $03
00097FA0 0101                       	dc.b	$01, $01
00097FA2 E100                       	smpsAlterNote       $00
00097FA4 01                         	dc.b	$01
00097FA5 E1FA                       	smpsAlterNote       $FA
00097FA7 0101                       	dc.b	$01, $01
00097FA9 E1FD                       	smpsAlterNote       $FD
00097FAB ECF5                       	smpsPSGAlterVol     $F5
00097FAD 9206                       	dc.b	nF1, $06
00097FAF EC04                       	smpsPSGAlterVol     $04
00097FB1 E704                       	dc.b	smpsNoAttack, $04
00097FB3 ECFC                       	smpsPSGAlterVol     $FC
00097FB5 9206                       	dc.b	nF1, $06
00097FB7 EC04                       	smpsPSGAlterVol     $04
00097FB9 E701                       	dc.b	smpsNoAttack, $01
00097FBB EC07                       	smpsPSGAlterVol     $07
00097FBD 8006                       	dc.b	nRst, $06
00097FBF E100                       	smpsAlterNote       $00
00097FC1 01                         	dc.b	$01
00097FC2 E104                       	smpsAlterNote       $04
00097FC4 01                         	dc.b	$01
00097FC5 E103                       	smpsAlterNote       $03
00097FC7 01                         	dc.b	$01
00097FC8 E1FD                       	smpsAlterNote       $FD
00097FCA 01                         	dc.b	$01
00097FCB ECF5                       	smpsPSGAlterVol     $F5
00097FCD 9407                       	dc.b	nG1, $07
00097FCF EC0B                       	smpsPSGAlterVol     $0B
00097FD1 8004                       	dc.b	nRst, $04
00097FD3 ECF5                       	smpsPSGAlterVol     $F5
00097FD5 9406                       	dc.b	nG1, $06
00097FD7 EC0B                       	smpsPSGAlterVol     $0B
00097FD9 8007                       	dc.b	nRst, $07
00097FDB E103                       	smpsAlterNote       $03
00097FDD 0101                       	dc.b	$01, $01
00097FDF E1FD                       	smpsAlterNote       $FD
00097FE1 01                         	dc.b	$01
00097FE2 E1F9                       	smpsAlterNote       $F9
00097FE4 01                         	dc.b	$01
00097FE5 E1FD                       	smpsAlterNote       $FD
00097FE7 ECF5                       	smpsPSGAlterVol     $F5
00097FE9 9206                       	dc.b	nF1, $06
00097FEB EC04                       	smpsPSGAlterVol     $04
00097FED E701                       	dc.b	smpsNoAttack, $01
00097FEF EC07                       	smpsPSGAlterVol     $07
00097FF1 8003                       	dc.b	nRst, $03
00097FF3 ECF5                       	smpsPSGAlterVol     $F5
00097FF5 9206                       	dc.b	nF1, $06
00097FF7 EC04                       	smpsPSGAlterVol     $04
00097FF9 E701                       	dc.b	smpsNoAttack, $01
00097FFB EC07                       	smpsPSGAlterVol     $07
00097FFD 8006                       	dc.b	nRst, $06
00097FFF E100                       	smpsAlterNote       $00
00098001 01                         	dc.b	$01
00098002 E104                       	smpsAlterNote       $04
00098004 01                         	dc.b	$01
00098005 E100                       	smpsAlterNote       $00
00098007 01                         	dc.b	$01
00098008 E1FA                       	smpsAlterNote       $FA
0009800A 01                         	dc.b	$01
0009800B E1FD                       	smpsAlterNote       $FD
0009800D ECF5                       	smpsPSGAlterVol     $F5
0009800F 9206                       	dc.b	nF1, $06
00098011 EC04                       	smpsPSGAlterVol     $04
00098013 E701                       	dc.b	smpsNoAttack, $01
00098015 EC07                       	smpsPSGAlterVol     $07
00098017 8003                       	dc.b	nRst, $03
00098019 ECF5                       	smpsPSGAlterVol     $F5
0009801B 9107                       	dc.b	nE1, $07
0009801D EC0B                       	smpsPSGAlterVol     $0B
0009801F 8006                       	dc.b	nRst, $06
00098021 E100                       	smpsAlterNote       $00
00098023 01                         	dc.b	$01
00098024 E103                       	smpsAlterNote       $03
00098026 0101                       	dc.b	$01, $01
00098028 E1FD                       	smpsAlterNote       $FD
0009802A 01                         	dc.b	$01
0009802B ECF5                       	smpsPSGAlterVol     $F5
0009802D 9207                       	dc.b	nF1, $07
0009802F EC0B                       	smpsPSGAlterVol     $0B
00098031 8004                       	dc.b	nRst, $04
00098033 ECF5                       	smpsPSGAlterVol     $F5
00098035 9206                       	dc.b	nF1, $06
00098037 EC04                       	smpsPSGAlterVol     $04
00098039 E701                       	dc.b	smpsNoAttack, $01
0009803B EC07                       	smpsPSGAlterVol     $07
0009803D 8006                       	dc.b	nRst, $06
0009803F E103                       	smpsAlterNote       $03
00098041 01                         	dc.b	$01
00098042 E104                       	smpsAlterNote       $04
00098044 01                         	dc.b	$01
00098045 E100                       	smpsAlterNote       $00
00098047 01                         	dc.b	$01
00098048 E1FB                       	smpsAlterNote       $FB
0009804A 01                         	dc.b	$01
0009804B E1FD                       	smpsAlterNote       $FD
0009804D ECF5                       	smpsPSGAlterVol     $F5
0009804F 9406                       	dc.b	nG1, $06
00098051 EC04                       	smpsPSGAlterVol     $04
00098053 E701                       	dc.b	smpsNoAttack, $01
00098055 EC07                       	smpsPSGAlterVol     $07
00098057 8003                       	dc.b	nRst, $03
00098059 ECF5                       	smpsPSGAlterVol     $F5
0009805B 9406                       	dc.b	nG1, $06
0009805D EC04                       	smpsPSGAlterVol     $04
0009805F E701                       	dc.b	smpsNoAttack, $01
00098061 EC07                       	smpsPSGAlterVol     $07
00098063 8006                       	dc.b	nRst, $06
00098065 E100                       	smpsAlterNote       $00
00098067 01                         	dc.b	$01
00098068 E104                       	smpsAlterNote       $04
0009806A 01                         	dc.b	$01
0009806B E100                       	smpsAlterNote       $00
0009806D 01                         	dc.b	$01
0009806E E1FD                       	smpsAlterNote       $FD
00098070 01                         	dc.b	$01
00098071 ECF5                       	smpsPSGAlterVol     $F5
00098073 9206                       	dc.b	nF1, $06
00098075 EC04                       	smpsPSGAlterVol     $04
00098077 E701                       	dc.b	smpsNoAttack, $01
00098079 EC07                       	smpsPSGAlterVol     $07
0009807B 8003                       	dc.b	nRst, $03
0009807D ECF5                       	smpsPSGAlterVol     $F5
0009807F 9207                       	dc.b	nF1, $07
00098081 EC0B                       	smpsPSGAlterVol     $0B
00098083 8007                       	dc.b	nRst, $07
00098085 E103                       	smpsAlterNote       $03
00098087 0101                       	dc.b	$01, $01
00098089 E1FD                       	smpsAlterNote       $FD
0009808B 01                         	dc.b	$01
0009808C E1FA                       	smpsAlterNote       $FA
0009808E 01                         	dc.b	$01
0009808F E1FD                       	smpsAlterNote       $FD
00098091 ECF5                       	smpsPSGAlterVol     $F5
00098093 9206                       	dc.b	nF1, $06
00098095 EC0B                       	smpsPSGAlterVol     $0B
00098097 8004                       	dc.b	nRst, $04
00098099 ECF5                       	smpsPSGAlterVol     $F5
0009809B 9206                       	dc.b	nF1, $06
0009809D EC04                       	smpsPSGAlterVol     $04
0009809F E701                       	dc.b	smpsNoAttack, $01
000980A1 EC07                       	smpsPSGAlterVol     $07
000980A3 8006                       	dc.b	nRst, $06
000980A5 E100                       	smpsAlterNote       $00
000980A7 01                         	dc.b	$01
000980A8 E104                       	smpsAlterNote       $04
000980AA 01                         	dc.b	$01
000980AB E100                       	smpsAlterNote       $00
000980AD 01                         	dc.b	$01
000980AE E1FA                       	smpsAlterNote       $FA
000980B0 01                         	dc.b	$01
000980B1 E1FD                       	smpsAlterNote       $FD
000980B3 ECF5                       	smpsPSGAlterVol     $F5
000980B5 9206                       	dc.b	nF1, $06
000980B7 EC04                       	smpsPSGAlterVol     $04
000980B9 E701                       	dc.b	smpsNoAttack, $01
000980BB EC07                       	smpsPSGAlterVol     $07
000980BD 8003                       	dc.b	nRst, $03
000980BF ECF5                       	smpsPSGAlterVol     $F5
000980C1 9207                       	dc.b	nF1, $07
000980C3 EC0B                       	smpsPSGAlterVol     $0B
000980C5 8006                       	dc.b	nRst, $06
000980C7 E100                       	smpsAlterNote       $00
000980C9 01                         	dc.b	$01
000980CA E103                       	smpsAlterNote       $03
000980CC 0101                       	dc.b	$01, $01
000980CE E1FD                       	smpsAlterNote       $FD
000980D0 01                         	dc.b	$01
000980D1 ECF5                       	smpsPSGAlterVol     $F5
000980D3 9207                       	dc.b	nF1, $07
000980D5 EC0B                       	smpsPSGAlterVol     $0B
000980D7 8004                       	dc.b	nRst, $04
000980D9 ECF5                       	smpsPSGAlterVol     $F5
000980DB 9206                       	dc.b	nF1, $06
000980DD EC0B                       	smpsPSGAlterVol     $0B
000980DF 8007                       	dc.b	nRst, $07
000980E1 E103                       	smpsAlterNote       $03
000980E3 0101                       	dc.b	$01, $01
000980E5 E100                       	smpsAlterNote       $00
000980E7 01                         	dc.b	$01
000980E8 E1FA                       	smpsAlterNote       $FA
000980EA 01                         	dc.b	$01
000980EB E1FD                       	smpsAlterNote       $FD
000980ED ECF5                       	smpsPSGAlterVol     $F5
000980EF 9206                       	dc.b	nF1, $06
000980F1 EC04                       	smpsPSGAlterVol     $04
000980F3 E701                       	dc.b	smpsNoAttack, $01
000980F5 EC07                       	smpsPSGAlterVol     $07
000980F7 8003                       	dc.b	nRst, $03
000980F9 ECF5                       	smpsPSGAlterVol     $F5
000980FB 9206                       	dc.b	nF1, $06
000980FD EC04                       	smpsPSGAlterVol     $04
000980FF E701                       	dc.b	smpsNoAttack, $01
00098101 EC07                       	smpsPSGAlterVol     $07
00098103 8006                       	dc.b	nRst, $06
00098105 E100                       	smpsAlterNote       $00
00098107 01                         	dc.b	$01
00098108 E104                       	smpsAlterNote       $04
0009810A 01                         	dc.b	$01
0009810B E100                       	smpsAlterNote       $00
0009810D 01                         	dc.b	$01
0009810E E1FD                       	smpsAlterNote       $FD
00098110 01                         	dc.b	$01
00098111 ECF5                       	smpsPSGAlterVol     $F5
00098113 9206                       	dc.b	nF1, $06
00098115 EC04                       	smpsPSGAlterVol     $04
00098117 E701                       	dc.b	smpsNoAttack, $01
00098119 EC07                       	smpsPSGAlterVol     $07
0009811B 8003                       	dc.b	nRst, $03
0009811D ECF5                       	smpsPSGAlterVol     $F5
0009811F 9207                       	dc.b	nF1, $07
00098121 EC0B                       	smpsPSGAlterVol     $0B
00098123 8007                       	dc.b	nRst, $07
00098125 E104                       	smpsAlterNote       $04
00098127 0101                       	dc.b	$01, $01
00098129 E1FB                       	smpsAlterNote       $FB
0009812B 01                         	dc.b	$01
0009812C E1F6                       	smpsAlterNote       $F6
0009812E 0101                       	dc.b	$01, $01
00098130 E1FF                       	smpsAlterNote       $FF
00098132 01                         	dc.b	$01
00098133 E105                       	smpsAlterNote       $05
00098135 01                         	dc.b	$01
00098136 E104                       	smpsAlterNote       $04
00098138 01                         	dc.b	$01
00098139 E1FB                       	smpsAlterNote       $FB
0009813B 01                         	dc.b	$01
0009813C E1F5                       	smpsAlterNote       $F5
0009813E 01                         	dc.b	$01
0009813F E1FC                       	smpsAlterNote       $FC
00098141 ECF5                       	smpsPSGAlterVol     $F5
00098143 8B0E                       	dc.b	nBb0, $0E
00098145 E102                       	smpsAlterNote       $02
00098147 EC0B                       	smpsPSGAlterVol     $0B
00098149 8001                       	dc.b	nRst, $01
0009814B E101                       	smpsAlterNote       $01
0009814D 01                         	dc.b	$01
0009814E E1FC                       	smpsAlterNote       $FC
00098150 01                         	dc.b	$01
00098151 E1F9                       	smpsAlterNote       $F9
00098153 0101                       	dc.b	$01, $01
00098155 E1FF                       	smpsAlterNote       $FF
00098157 01                         	dc.b	$01
00098158 E102                       	smpsAlterNote       $02
0009815A 01                         	dc.b	$01
0009815B E1FF                       	smpsAlterNote       $FF
0009815D 01                         	dc.b	$01
0009815E E1FC                       	smpsAlterNote       $FC
00098160 01                         	dc.b	$01
00098161 E1F8                       	smpsAlterNote       $F8
00098163 01                         	dc.b	$01
00098164 E1FC                       	smpsAlterNote       $FC
00098166 01                         	dc.b	$01
00098167 E101                       	smpsAlterNote       $01
00098169 01                         	dc.b	$01
0009816A E102                       	smpsAlterNote       $02
0009816C 01                         	dc.b	$01
0009816D E1FF                       	smpsAlterNote       $FF
0009816F 01                         	dc.b	$01
00098170 E1FB                       	smpsAlterNote       $FB
00098172 ECF5                       	smpsPSGAlterVol     $F5
00098174 8D0D                       	dc.b	nC1, $0D
00098176 E101                       	smpsAlterNote       $01
00098178 EC0B                       	smpsPSGAlterVol     $0B
0009817A 8001                       	dc.b	nRst, $01
0009817C E102                       	smpsAlterNote       $02
0009817E 01                         	dc.b	$01
0009817F E1FF                       	smpsAlterNote       $FF
00098181 01                         	dc.b	$01
00098182 E1F9                       	smpsAlterNote       $F9
00098184 0101                       	dc.b	$01, $01
00098186 E1FC                       	smpsAlterNote       $FC
00098188 01                         	dc.b	$01
00098189 E101                       	smpsAlterNote       $01
0009818B 0101                       	dc.b	$01, $01
0009818D E1FC                       	smpsAlterNote       $FC
0009818F 01                         	dc.b	$01
00098190 E1F9                       	smpsAlterNote       $F9
00098192 0101                       	dc.b	$01, $01
00098194 E1FF                       	smpsAlterNote       $FF
00098196 01                         	dc.b	$01
00098197 E102                       	smpsAlterNote       $02
00098199 01                         	dc.b	$01
0009819A E101                       	smpsAlterNote       $01
0009819C 01                         	dc.b	$01
0009819D E1FC                       	smpsAlterNote       $FC
0009819F ECF5                       	smpsPSGAlterVol     $F5
000981A1 8F0D                       	dc.b	nD1, $0D
000981A3 E1FF                       	smpsAlterNote       $FF
000981A5 EC04                       	smpsPSGAlterVol     $04
000981A7 E701                       	dc.b	smpsNoAttack, $01
000981A9 EC07                       	smpsPSGAlterVol     $07
000981AB E103                       	smpsAlterNote       $03
000981AD 8001                       	dc.b	nRst, $01
000981AF E102                       	smpsAlterNote       $02
000981B1 01                         	dc.b	$01
000981B2 E1FD                       	smpsAlterNote       $FD
000981B4 01                         	dc.b	$01
000981B5 E1F9                       	smpsAlterNote       $F9
000981B7 01                         	dc.b	$01
000981B8 E1FD                       	smpsAlterNote       $FD
000981BA 01                         	dc.b	$01
000981BB E100                       	smpsAlterNote       $00
000981BD 01                         	dc.b	$01
000981BE E103                       	smpsAlterNote       $03
000981C0 01                         	dc.b	$01
000981C1 E100                       	smpsAlterNote       $00
000981C3 01                         	dc.b	$01
000981C4 E1FA                       	smpsAlterNote       $FA
000981C6 01                         	dc.b	$01
000981C7 E1F9                       	smpsAlterNote       $F9
000981C9 01                         	dc.b	$01
000981CA E1FD                       	smpsAlterNote       $FD
000981CC 01                         	dc.b	$01
000981CD E102                       	smpsAlterNote       $02
000981CF 0101                       	dc.b	$01, $01
000981D1 E100                       	smpsAlterNote       $00
000981D3 01                         	dc.b	$01
000981D4 E1FD                       	smpsAlterNote       $FD
000981D6 ECF5                       	smpsPSGAlterVol     $F5
000981D8 910D                       	dc.b	nE1, $0D
000981DA E103                       	smpsAlterNote       $03
000981DC EC0B                       	smpsPSGAlterVol     $0B
000981DE 8001 01                    	dc.b	nRst, $01, $01
000981E1 E100                       	smpsAlterNote       $00
000981E3 01                         	dc.b	$01
000981E4 E1FA                       	smpsAlterNote       $FA
000981E6 0101                       	dc.b	$01, $01
000981E8 E100                       	smpsAlterNote       $00
000981EA 01                         	dc.b	$01
000981EB E103                       	smpsAlterNote       $03
000981ED 01                         	dc.b	$01
000981EE E1FD                       	smpsAlterNote       $FD
000981F0 ECF5                       	smpsPSGAlterVol     $F5
000981F2 9206                       	dc.b	nF1, $06
000981F4 EC04                       	smpsPSGAlterVol     $04
000981F6 E701                       	dc.b	smpsNoAttack, $01
000981F8 EC07                       	smpsPSGAlterVol     $07
000981FA 8003                       	dc.b	nRst, $03
000981FC ECF5                       	smpsPSGAlterVol     $F5
000981FE 9207                       	dc.b	nF1, $07
00098200 EC0B                       	smpsPSGAlterVol     $0B
00098202 8006                       	dc.b	nRst, $06
00098204 E100                       	smpsAlterNote       $00
00098206 01                         	dc.b	$01
00098207 E103                       	smpsAlterNote       $03
00098209 0101                       	dc.b	$01, $01
0009820B E1FD                       	smpsAlterNote       $FD
0009820D 01                         	dc.b	$01
0009820E ECF5                       	smpsPSGAlterVol     $F5
00098210 9407                       	dc.b	nG1, $07
00098212 EC0B                       	smpsPSGAlterVol     $0B
00098214 8004                       	dc.b	nRst, $04
00098216 ECF5                       	smpsPSGAlterVol     $F5
00098218 9406                       	dc.b	nG1, $06
0009821A EC04                       	smpsPSGAlterVol     $04
0009821C E701                       	dc.b	smpsNoAttack, $01
0009821E EC07                       	smpsPSGAlterVol     $07
00098220 8006                       	dc.b	nRst, $06
00098222 E103                       	smpsAlterNote       $03
00098224 01                         	dc.b	$01
00098225 E104                       	smpsAlterNote       $04
00098227 01                         	dc.b	$01
00098228 E100                       	smpsAlterNote       $00
0009822A 01                         	dc.b	$01
0009822B E1F9                       	smpsAlterNote       $F9
0009822D 01                         	dc.b	$01
0009822E E1FD                       	smpsAlterNote       $FD
00098230 ECF5                       	smpsPSGAlterVol     $F5
00098232 9206                       	dc.b	nF1, $06
00098234 EC04                       	smpsPSGAlterVol     $04
00098236 E701                       	dc.b	smpsNoAttack, $01
00098238 EC07                       	smpsPSGAlterVol     $07
0009823A 8003                       	dc.b	nRst, $03
0009823C ECF5                       	smpsPSGAlterVol     $F5
0009823E 9206                       	dc.b	nF1, $06
00098240 EC04                       	smpsPSGAlterVol     $04
00098242 E701                       	dc.b	smpsNoAttack, $01
00098244 EC07                       	smpsPSGAlterVol     $07
00098246 8006                       	dc.b	nRst, $06
00098248 E100                       	smpsAlterNote       $00
0009824A 01                         	dc.b	$01
0009824B E104                       	smpsAlterNote       $04
0009824D 01                         	dc.b	$01
0009824E E103                       	smpsAlterNote       $03
00098250 01                         	dc.b	$01
00098251 E1FD                       	smpsAlterNote       $FD
00098253 01                         	dc.b	$01
00098254 ECF5                       	smpsPSGAlterVol     $F5
00098256 9407                       	dc.b	nG1, $07
00098258 EC0B                       	smpsPSGAlterVol     $0B
0009825A 8004                       	dc.b	nRst, $04
0009825C ECF5                       	smpsPSGAlterVol     $F5
0009825E 9406                       	dc.b	nG1, $06
00098260 EC0B                       	smpsPSGAlterVol     $0B
00098262 8007                       	dc.b	nRst, $07
00098264 E103                       	smpsAlterNote       $03
00098266 0101                       	dc.b	$01, $01
00098268 E100                       	smpsAlterNote       $00
0009826A 01                         	dc.b	$01
0009826B E1F9                       	smpsAlterNote       $F9
0009826D 01                         	dc.b	$01
0009826E E1FD                       	smpsAlterNote       $FD
00098270 ECF5                       	smpsPSGAlterVol     $F5
00098272 9206                       	dc.b	nF1, $06
00098274 EC04                       	smpsPSGAlterVol     $04
00098276 E701                       	dc.b	smpsNoAttack, $01
00098278 EC07                       	smpsPSGAlterVol     $07
0009827A 8003                       	dc.b	nRst, $03
0009827C ECF5                       	smpsPSGAlterVol     $F5
0009827E 9206                       	dc.b	nF1, $06
00098280 EC04                       	smpsPSGAlterVol     $04
00098282 E701                       	dc.b	smpsNoAttack, $01
00098284 EC07                       	smpsPSGAlterVol     $07
00098286 8006                       	dc.b	nRst, $06
00098288 E100                       	smpsAlterNote       $00
0009828A 01                         	dc.b	$01
0009828B E104                       	smpsAlterNote       $04
0009828D 01                         	dc.b	$01
0009828E E100                       	smpsAlterNote       $00
00098290 01                         	dc.b	$01
00098291 E1FB                       	smpsAlterNote       $FB
00098293 01                         	dc.b	$01
00098294 E1FD                       	smpsAlterNote       $FD
00098296 ECF5                       	smpsPSGAlterVol     $F5
00098298 9406                       	dc.b	nG1, $06
0009829A EC04                       	smpsPSGAlterVol     $04
0009829C E701                       	dc.b	smpsNoAttack, $01
0009829E EC07                       	smpsPSGAlterVol     $07
000982A0 8003                       	dc.b	nRst, $03
000982A2 ECF5                       	smpsPSGAlterVol     $F5
000982A4 9407                       	dc.b	nG1, $07
000982A6 EC0B                       	smpsPSGAlterVol     $0B
000982A8 8006                       	dc.b	nRst, $06
000982AA E100                       	smpsAlterNote       $00
000982AC 01                         	dc.b	$01
000982AD E103                       	smpsAlterNote       $03
000982AF 0101                       	dc.b	$01, $01
000982B1 E1FD                       	smpsAlterNote       $FD
000982B3 01                         	dc.b	$01
000982B4 ECF5                       	smpsPSGAlterVol     $F5
000982B6 9207                       	dc.b	nF1, $07
000982B8 EC0B                       	smpsPSGAlterVol     $0B
000982BA 8004                       	dc.b	nRst, $04
000982BC ECF5                       	smpsPSGAlterVol     $F5
000982BE 9206                       	dc.b	nF1, $06
000982C0 EC04                       	smpsPSGAlterVol     $04
000982C2 E701                       	dc.b	smpsNoAttack, $01
000982C4 ECFC                       	smpsPSGAlterVol     $FC
000982C6 E1FC                       	smpsAlterNote       $FC
000982C8 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000982CC EC04                       	smpsPSGAlterVol     $04
000982CE E701                       	dc.b	smpsNoAttack, $01
000982D0 ECFC                       	smpsPSGAlterVol     $FC
000982D2 9003                       	dc.b	nEb1, $03
000982D4 E1FD                       	smpsAlterNote       $FD
000982D6 9403                       	dc.b	nG1, $03
000982D8 EC04                       	smpsPSGAlterVol     $04
000982DA E701                       	dc.b	smpsNoAttack, $01
000982DC E1FE                       	smpsAlterNote       $FE
000982DE ECFC                       	smpsPSGAlterVol     $FC
000982E0 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000982E4 EC04                       	smpsPSGAlterVol     $04
000982E6 E701                       	dc.b	smpsNoAttack, $01
000982E8 EC07                       	smpsPSGAlterVol     $07
000982EA 8009                       	dc.b	nRst, $09
000982EC E100                       	smpsAlterNote       $00
000982EE 01                         	dc.b	$01
000982EF F6F5 19                    	smpsJump            music84_Jump07
000982F2                            
000982F2                            ; PSG2 Data
000982F2                            music84_PSG2:
000982F2 E1FC                       	smpsAlterNote       $FC
000982F4 EC04                       	smpsPSGAlterVol     $04
000982F6 8F03                       	dc.b	nD1, $03
000982F8 E1FD                       	smpsAlterNote       $FD
000982FA 9203                       	dc.b	nF1, $03
000982FC EC04                       	smpsPSGAlterVol     $04
000982FE E701                       	dc.b	smpsNoAttack, $01
00098300 E1FE                       	smpsAlterNote       $FE
00098302 ECFC                       	smpsPSGAlterVol     $FC
00098304 9603                       	dc.b	nA1, $03
00098306 E1FD                       	smpsAlterNote       $FD
00098308 9103                       	dc.b	nE1, $03
0009830A EC04                       	smpsPSGAlterVol     $04
0009830C E701                       	dc.b	smpsNoAttack, $01
0009830E ECFC                       	smpsPSGAlterVol     $FC
00098310 9403                       	dc.b	nG1, $03
00098312 E1FE                       	smpsAlterNote       $FE
00098314 9703                       	dc.b	nBb1, $03
00098316 EC04                       	smpsPSGAlterVol     $04
00098318 E701                       	dc.b	smpsNoAttack, $01
0009831A E1FF                       	smpsAlterNote       $FF
0009831C ECFC                       	smpsPSGAlterVol     $FC
0009831E 9B02                       	dc.b	nD2, $02
00098320 EC04                       	smpsPSGAlterVol     $04
00098322 E701                       	dc.b	smpsNoAttack, $01
00098324 ECFC                       	smpsPSGAlterVol     $FC
00098326 E1FE                       	smpsAlterNote       $FE
00098328 9A03                       	dc.b	nCs2, $03
0009832A EC0B                       	smpsPSGAlterVol     $0B
0009832C 800A                       	dc.b	nRst, $0A
0009832E E102                       	smpsAlterNote       $02
00098330 01                         	dc.b	$01
00098331 E10A                       	smpsAlterNote       $0A
00098333 01                         	dc.b	$01
00098334 E102                       	smpsAlterNote       $02
00098336 01                         	dc.b	$01
00098337 E1FC                       	smpsAlterNote       $FC
00098339 01                         	dc.b	$01
0009833A E10A                       	smpsAlterNote       $0A
0009833C 01                         	dc.b	$01
0009833D E1FC                       	smpsAlterNote       $FC
0009833F 01                         	dc.b	$01
00098340 E108                       	smpsAlterNote       $08
00098342 01                         	dc.b	$01
00098343 E10A                       	smpsAlterNote       $0A
00098345 01                         	dc.b	$01
00098346 E102                       	smpsAlterNote       $02
00098348 01                         	dc.b	$01
00098349 E1F7                       	smpsAlterNote       $F7
0009834B 0101                       	dc.b	$01, $01
0009834D E102                       	smpsAlterNote       $02
0009834F 01                         	dc.b	$01
00098350 E108                       	smpsAlterNote       $08
00098352 0101                       	dc.b	$01, $01
00098354 E1FC                       	smpsAlterNote       $FC
00098356 01                         	dc.b	$01
00098357 E10A                       	smpsAlterNote       $0A
00098359 01                         	dc.b	$01
0009835A E1F7                       	smpsAlterNote       $F7
0009835C 01                         	dc.b	$01
0009835D E102                       	smpsAlterNote       $02
0009835F 01                         	dc.b	$01
00098360 E10A                       	smpsAlterNote       $0A
00098362 01                         	dc.b	$01
00098363 E102                       	smpsAlterNote       $02
00098365 01                         	dc.b	$01
00098366 E1FC                       	smpsAlterNote       $FC
00098368 01                         	dc.b	$01
00098369                            
00098369                            music84_Jump06:
00098369 E10A                       	smpsAlterNote       $0A
0009836B 8001                       	dc.b	nRst, $01
0009836D E1FC                       	smpsAlterNote       $FC
0009836F 01                         	dc.b	$01
00098370 E108                       	smpsAlterNote       $08
00098372 01                         	dc.b	$01
00098373 E10A                       	smpsAlterNote       $0A
00098375 01                         	dc.b	$01
00098376 E1FC                       	smpsAlterNote       $FC
00098378 ECF5                       	smpsPSGAlterVol     $F5
0009837A 8F06                       	dc.b	nD1, $06
0009837C EC04                       	smpsPSGAlterVol     $04
0009837E E701                       	dc.b	smpsNoAttack, $01
00098380 EC07                       	smpsPSGAlterVol     $07
00098382 8003                       	dc.b	nRst, $03
00098384 ECF5                       	smpsPSGAlterVol     $F5
00098386 8F06                       	dc.b	nD1, $06
00098388 EC04                       	smpsPSGAlterVol     $04
0009838A E701                       	dc.b	smpsNoAttack, $01
0009838C EC07                       	smpsPSGAlterVol     $07
0009838E 8006                       	dc.b	nRst, $06
00098390 E1FF                       	smpsAlterNote       $FF
00098392 01                         	dc.b	$01
00098393 E102                       	smpsAlterNote       $02
00098395 01                         	dc.b	$01
00098396 E1FF                       	smpsAlterNote       $FF
00098398 01                         	dc.b	$01
00098399 E1F9                       	smpsAlterNote       $F9
0009839B 01                         	dc.b	$01
0009839C E1FC                       	smpsAlterNote       $FC
0009839E ECF5                       	smpsPSGAlterVol     $F5
000983A0 9006                       	dc.b	nEb1, $06
000983A2 EC04                       	smpsPSGAlterVol     $04
000983A4 E701                       	dc.b	smpsNoAttack, $01
000983A6 EC07                       	smpsPSGAlterVol     $07
000983A8 8003                       	dc.b	nRst, $03
000983AA ECF5                       	smpsPSGAlterVol     $F5
000983AC 9007                       	dc.b	nEb1, $07
000983AE EC0B                       	smpsPSGAlterVol     $0B
000983B0 8006                       	dc.b	nRst, $06
000983B2 E1FF                       	smpsAlterNote       $FF
000983B4 01                         	dc.b	$01
000983B5 E103                       	smpsAlterNote       $03
000983B7 0101                       	dc.b	$01, $01
000983B9 E1FC                       	smpsAlterNote       $FC
000983BB 01                         	dc.b	$01
000983BC ECF5                       	smpsPSGAlterVol     $F5
000983BE 8F07                       	dc.b	nD1, $07
000983C0 EC0B                       	smpsPSGAlterVol     $0B
000983C2 8004                       	dc.b	nRst, $04
000983C4 ECF5                       	smpsPSGAlterVol     $F5
000983C6 8F06                       	dc.b	nD1, $06
000983C8 EC04                       	smpsPSGAlterVol     $04
000983CA E701                       	dc.b	smpsNoAttack, $01
000983CC EC07                       	smpsPSGAlterVol     $07
000983CE 8006                       	dc.b	nRst, $06
000983D0 E102                       	smpsAlterNote       $02
000983D2 01                         	dc.b	$01
000983D3 E103                       	smpsAlterNote       $03
000983D5 01                         	dc.b	$01
000983D6 E1FF                       	smpsAlterNote       $FF
000983D8 01                         	dc.b	$01
000983D9 E1F9                       	smpsAlterNote       $F9
000983DB 01                         	dc.b	$01
000983DC E1FC                       	smpsAlterNote       $FC
000983DE ECF5                       	smpsPSGAlterVol     $F5
000983E0 8F06                       	dc.b	nD1, $06
000983E2 EC04                       	smpsPSGAlterVol     $04
000983E4 E701                       	dc.b	smpsNoAttack, $01
000983E6 EC07                       	smpsPSGAlterVol     $07
000983E8 8003                       	dc.b	nRst, $03
000983EA ECF5                       	smpsPSGAlterVol     $F5
000983EC 8F06                       	dc.b	nD1, $06
000983EE EC04                       	smpsPSGAlterVol     $04
000983F0 E701                       	dc.b	smpsNoAttack, $01
000983F2 EC07                       	smpsPSGAlterVol     $07
000983F4 8006                       	dc.b	nRst, $06
000983F6 E1FF                       	smpsAlterNote       $FF
000983F8 01                         	dc.b	$01
000983F9 E103                       	smpsAlterNote       $03
000983FB 01                         	dc.b	$01
000983FC E1FF                       	smpsAlterNote       $FF
000983FE 01                         	dc.b	$01
000983FF E1FC                       	smpsAlterNote       $FC
00098401 01                         	dc.b	$01
00098402 ECF5                       	smpsPSGAlterVol     $F5
00098404 8F06                       	dc.b	nD1, $06
00098406 EC04                       	smpsPSGAlterVol     $04
00098408 E701                       	dc.b	smpsNoAttack, $01
0009840A EC07                       	smpsPSGAlterVol     $07
0009840C 8003                       	dc.b	nRst, $03
0009840E ECF5                       	smpsPSGAlterVol     $F5
00098410 8F07                       	dc.b	nD1, $07
00098412 EC0B                       	smpsPSGAlterVol     $0B
00098414 8007                       	dc.b	nRst, $07
00098416 E101                       	smpsAlterNote       $01
00098418 0101                       	dc.b	$01, $01
0009841A E1FC                       	smpsAlterNote       $FC
0009841C 01                         	dc.b	$01
0009841D E1F9                       	smpsAlterNote       $F9
0009841F 01                         	dc.b	$01
00098420 E1FC                       	smpsAlterNote       $FC
00098422 ECF5                       	smpsPSGAlterVol     $F5
00098424 9006                       	dc.b	nEb1, $06
00098426 EC0B                       	smpsPSGAlterVol     $0B
00098428 8004                       	dc.b	nRst, $04
0009842A ECF5                       	smpsPSGAlterVol     $F5
0009842C 9006                       	dc.b	nEb1, $06
0009842E EC04                       	smpsPSGAlterVol     $04
00098430 E701                       	dc.b	smpsNoAttack, $01
00098432 EC07                       	smpsPSGAlterVol     $07
00098434 8006                       	dc.b	nRst, $06
00098436 E100                       	smpsAlterNote       $00
00098438 01                         	dc.b	$01
00098439 E102                       	smpsAlterNote       $02
0009843B 01                         	dc.b	$01
0009843C E100                       	smpsAlterNote       $00
0009843E 01                         	dc.b	$01
0009843F E1FD                       	smpsAlterNote       $FD
00098441 01                         	dc.b	$01
00098442 E1FF                       	smpsAlterNote       $FF
00098444 ECF5                       	smpsPSGAlterVol     $F5
00098446 9B06                       	dc.b	nD2, $06
00098448 EC04                       	smpsPSGAlterVol     $04
0009844A E701                       	dc.b	smpsNoAttack, $01
0009844C EC07                       	smpsPSGAlterVol     $07
0009844E 8003                       	dc.b	nRst, $03
00098450 ECF5                       	smpsPSGAlterVol     $F5
00098452 9B07                       	dc.b	nD2, $07
00098454 EC0B                       	smpsPSGAlterVol     $0B
00098456 8006                       	dc.b	nRst, $06
00098458 E102                       	smpsAlterNote       $02
0009845A 01                         	dc.b	$01
0009845B E106                       	smpsAlterNote       $06
0009845D 01                         	dc.b	$01
0009845E E105                       	smpsAlterNote       $05
00098460 01                         	dc.b	$01
00098461 E1FF                       	smpsAlterNote       $FF
00098463 01                         	dc.b	$01
00098464 ECF5                       	smpsPSGAlterVol     $F5
00098466 9B07                       	dc.b	nD2, $07
00098468 EC0B                       	smpsPSGAlterVol     $0B
0009846A 8004                       	dc.b	nRst, $04
0009846C ECF5                       	smpsPSGAlterVol     $F5
0009846E 9B06                       	dc.b	nD2, $06
00098470 EC0B                       	smpsPSGAlterVol     $0B
00098472 8007                       	dc.b	nRst, $07
00098474 E105                       	smpsAlterNote       $05
00098476 0101                       	dc.b	$01, $01
00098478 E102                       	smpsAlterNote       $02
0009847A 01                         	dc.b	$01
0009847B E1FC                       	smpsAlterNote       $FC
0009847D 01                         	dc.b	$01
0009847E E1FF                       	smpsAlterNote       $FF
00098480 ECF5                       	smpsPSGAlterVol     $F5
00098482 9B06                       	dc.b	nD2, $06
00098484 EC04                       	smpsPSGAlterVol     $04
00098486 E701                       	dc.b	smpsNoAttack, $01
00098488 EC07                       	smpsPSGAlterVol     $07
0009848A 8003                       	dc.b	nRst, $03
0009848C ECF5                       	smpsPSGAlterVol     $F5
0009848E 9B06                       	dc.b	nD2, $06
00098490 EC04                       	smpsPSGAlterVol     $04
00098492 E701                       	dc.b	smpsNoAttack, $01
00098494 EC07                       	smpsPSGAlterVol     $07
00098496 8006                       	dc.b	nRst, $06
00098498 E102                       	smpsAlterNote       $02
0009849A 01                         	dc.b	$01
0009849B E106                       	smpsAlterNote       $06
0009849D 01                         	dc.b	$01
0009849E E102                       	smpsAlterNote       $02
000984A0 01                         	dc.b	$01
000984A1 E1FF                       	smpsAlterNote       $FF
000984A3 01                         	dc.b	$01
000984A4 ECF5                       	smpsPSGAlterVol     $F5
000984A6 9B06                       	dc.b	nD2, $06
000984A8 EC04                       	smpsPSGAlterVol     $04
000984AA E701                       	dc.b	smpsNoAttack, $01
000984AC EC07                       	smpsPSGAlterVol     $07
000984AE 8003                       	dc.b	nRst, $03
000984B0 ECF5                       	smpsPSGAlterVol     $F5
000984B2 9B07                       	dc.b	nD2, $07
000984B4 EC0B                       	smpsPSGAlterVol     $0B
000984B6 8007                       	dc.b	nRst, $07
000984B8 E105                       	smpsAlterNote       $05
000984BA 0101                       	dc.b	$01, $01
000984BC E1FF                       	smpsAlterNote       $FF
000984BE 01                         	dc.b	$01
000984BF E1FC                       	smpsAlterNote       $FC
000984C1 01                         	dc.b	$01
000984C2 E1FF                       	smpsAlterNote       $FF
000984C4 ECF5                       	smpsPSGAlterVol     $F5
000984C6 9B06                       	dc.b	nD2, $06
000984C8 EC0B                       	smpsPSGAlterVol     $0B
000984CA 8004                       	dc.b	nRst, $04
000984CC ECF5                       	smpsPSGAlterVol     $F5
000984CE 9B06                       	dc.b	nD2, $06
000984D0 EC04                       	smpsPSGAlterVol     $04
000984D2 E701                       	dc.b	smpsNoAttack, $01
000984D4 EC07                       	smpsPSGAlterVol     $07
000984D6 8006                       	dc.b	nRst, $06
000984D8 E105                       	smpsAlterNote       $05
000984DA 01                         	dc.b	$01
000984DB E106                       	smpsAlterNote       $06
000984DD 01                         	dc.b	$01
000984DE E102                       	smpsAlterNote       $02
000984E0 01                         	dc.b	$01
000984E1 E1FC                       	smpsAlterNote       $FC
000984E3 01                         	dc.b	$01
000984E4 E1FF                       	smpsAlterNote       $FF
000984E6 ECF5                       	smpsPSGAlterVol     $F5
000984E8 9B06                       	dc.b	nD2, $06
000984EA EC04                       	smpsPSGAlterVol     $04
000984EC E701                       	dc.b	smpsNoAttack, $01
000984EE EC07                       	smpsPSGAlterVol     $07
000984F0 8003                       	dc.b	nRst, $03
000984F2 ECF5                       	smpsPSGAlterVol     $F5
000984F4 9B06                       	dc.b	nD2, $06
000984F6 EC04                       	smpsPSGAlterVol     $04
000984F8 E701                       	dc.b	smpsNoAttack, $01
000984FA EC07                       	smpsPSGAlterVol     $07
000984FC 8006                       	dc.b	nRst, $06
000984FE E102                       	smpsAlterNote       $02
00098500 01                         	dc.b	$01
00098501 E106                       	smpsAlterNote       $06
00098503 01                         	dc.b	$01
00098504 E105                       	smpsAlterNote       $05
00098506 01                         	dc.b	$01
00098507 E1FF                       	smpsAlterNote       $FF
00098509 01                         	dc.b	$01
0009850A ECF5                       	smpsPSGAlterVol     $F5
0009850C 9B07                       	dc.b	nD2, $07
0009850E EC0B                       	smpsPSGAlterVol     $0B
00098510 8004                       	dc.b	nRst, $04
00098512 ECF5                       	smpsPSGAlterVol     $F5
00098514 9B06                       	dc.b	nD2, $06
00098516 EC0B                       	smpsPSGAlterVol     $0B
00098518 8007                       	dc.b	nRst, $07
0009851A E105                       	smpsAlterNote       $05
0009851C 0101                       	dc.b	$01, $01
0009851E E102                       	smpsAlterNote       $02
00098520 01                         	dc.b	$01
00098521 E1FC                       	smpsAlterNote       $FC
00098523 01                         	dc.b	$01
00098524 E1FF                       	smpsAlterNote       $FF
00098526 ECF5                       	smpsPSGAlterVol     $F5
00098528 9B06                       	dc.b	nD2, $06
0009852A EC04                       	smpsPSGAlterVol     $04
0009852C E701                       	dc.b	smpsNoAttack, $01
0009852E EC07                       	smpsPSGAlterVol     $07
00098530 8003                       	dc.b	nRst, $03
00098532 ECF5                       	smpsPSGAlterVol     $F5
00098534 9B06                       	dc.b	nD2, $06
00098536 EC04                       	smpsPSGAlterVol     $04
00098538 E701                       	dc.b	smpsNoAttack, $01
0009853A EC07                       	smpsPSGAlterVol     $07
0009853C 8006                       	dc.b	nRst, $06
0009853E E102                       	smpsAlterNote       $02
00098540 01                         	dc.b	$01
00098541 E106                       	smpsAlterNote       $06
00098543 01                         	dc.b	$01
00098544 E102                       	smpsAlterNote       $02
00098546 01                         	dc.b	$01
00098547 E1FF                       	smpsAlterNote       $FF
00098549 01                         	dc.b	$01
0009854A ECF5                       	smpsPSGAlterVol     $F5
0009854C 9B06                       	dc.b	nD2, $06
0009854E EC04                       	smpsPSGAlterVol     $04
00098550 E701                       	dc.b	smpsNoAttack, $01
00098552 EC07                       	smpsPSGAlterVol     $07
00098554 8003                       	dc.b	nRst, $03
00098556 ECF5                       	smpsPSGAlterVol     $F5
00098558 9B07                       	dc.b	nD2, $07
0009855A E1FE                       	smpsAlterNote       $FE
0009855C 9706                       	dc.b	nBb1, $06
0009855E EC04                       	smpsPSGAlterVol     $04
00098560 E701                       	dc.b	smpsNoAttack, $01
00098562 ECFC                       	smpsPSGAlterVol     $FC
00098564 9703                       	dc.b	nBb1, $03
00098566 EC04                       	smpsPSGAlterVol     $04
00098568 E701                       	dc.b	smpsNoAttack, $01
0009856A ECFC                       	smpsPSGAlterVol     $FC
0009856C 9702                       	dc.b	nBb1, $02
0009856E EC04                       	smpsPSGAlterVol     $04
00098570 E701                       	dc.b	smpsNoAttack, $01
00098572 ECFC                       	smpsPSGAlterVol     $FC
00098574 9606                       	dc.b	nA1, $06
00098576 EC04                       	smpsPSGAlterVol     $04
00098578 E701                       	dc.b	smpsNoAttack, $01
0009857A EC07                       	smpsPSGAlterVol     $07
0009857C 8006                       	dc.b	nRst, $06
0009857E E101                       	smpsAlterNote       $01
00098580 01                         	dc.b	$01
00098581 E107                       	smpsAlterNote       $07
00098583 01                         	dc.b	$01
00098584 E101                       	smpsAlterNote       $01
00098586 01                         	dc.b	$01
00098587 E1F8                       	smpsAlterNote       $F8
00098589 01                         	dc.b	$01
0009858A E1F7                       	smpsAlterNote       $F7
0009858C 01                         	dc.b	$01
0009858D E1FC                       	smpsAlterNote       $FC
0009858F 01                         	dc.b	$01
00098590 E106                       	smpsAlterNote       $06
00098592 01                         	dc.b	$01
00098593 E107                       	smpsAlterNote       $07
00098595 01                         	dc.b	$01
00098596 E101                       	smpsAlterNote       $01
00098598 01                         	dc.b	$01
00098599 E1F8                       	smpsAlterNote       $F8
0009859B 0101                       	dc.b	$01, $01
0009859D E1FC                       	smpsAlterNote       $FC
0009859F ECF5                       	smpsPSGAlterVol     $F5
000985A1 8F06                       	dc.b	nD1, $06
000985A3 EC04                       	smpsPSGAlterVol     $04
000985A5 E701                       	dc.b	smpsNoAttack, $01
000985A7 EC07                       	smpsPSGAlterVol     $07
000985A9 8003                       	dc.b	nRst, $03
000985AB ECF5                       	smpsPSGAlterVol     $F5
000985AD 8F06                       	dc.b	nD1, $06
000985AF EC04                       	smpsPSGAlterVol     $04
000985B1 E701                       	dc.b	smpsNoAttack, $01
000985B3 EC07                       	smpsPSGAlterVol     $07
000985B5 8006                       	dc.b	nRst, $06
000985B7 E1FF                       	smpsAlterNote       $FF
000985B9 01                         	dc.b	$01
000985BA E102                       	smpsAlterNote       $02
000985BC 01                         	dc.b	$01
000985BD E101                       	smpsAlterNote       $01
000985BF 01                         	dc.b	$01
000985C0 E1FC                       	smpsAlterNote       $FC
000985C2 01                         	dc.b	$01
000985C3 ECF5                       	smpsPSGAlterVol     $F5
000985C5 9007                       	dc.b	nEb1, $07
000985C7 EC0B                       	smpsPSGAlterVol     $0B
000985C9 8004                       	dc.b	nRst, $04
000985CB ECF5                       	smpsPSGAlterVol     $F5
000985CD 9006                       	dc.b	nEb1, $06
000985CF EC0B                       	smpsPSGAlterVol     $0B
000985D1 8007                       	dc.b	nRst, $07
000985D3 E103                       	smpsAlterNote       $03
000985D5 0101                       	dc.b	$01, $01
000985D7 E1FC                       	smpsAlterNote       $FC
000985D9 01                         	dc.b	$01
000985DA E1F9                       	smpsAlterNote       $F9
000985DC 01                         	dc.b	$01
000985DD E1FC                       	smpsAlterNote       $FC
000985DF ECF5                       	smpsPSGAlterVol     $F5
000985E1 8F06                       	dc.b	nD1, $06
000985E3 EC04                       	smpsPSGAlterVol     $04
000985E5 E701                       	dc.b	smpsNoAttack, $01
000985E7 EC07                       	smpsPSGAlterVol     $07
000985E9 8003                       	dc.b	nRst, $03
000985EB ECF5                       	smpsPSGAlterVol     $F5
000985ED 8F06                       	dc.b	nD1, $06
000985EF EC04                       	smpsPSGAlterVol     $04
000985F1 E701                       	dc.b	smpsNoAttack, $01
000985F3 EC07                       	smpsPSGAlterVol     $07
000985F5 8006                       	dc.b	nRst, $06
000985F7 E1FF                       	smpsAlterNote       $FF
000985F9 01                         	dc.b	$01
000985FA E103                       	smpsAlterNote       $03
000985FC 01                         	dc.b	$01
000985FD E1FF                       	smpsAlterNote       $FF
000985FF 01                         	dc.b	$01
00098600 E1F9                       	smpsAlterNote       $F9
00098602 01                         	dc.b	$01
00098603 E1FC                       	smpsAlterNote       $FC
00098605 ECF5                       	smpsPSGAlterVol     $F5
00098607 8F06                       	dc.b	nD1, $06
00098609 EC04                       	smpsPSGAlterVol     $04
0009860B E701                       	dc.b	smpsNoAttack, $01
0009860D EC07                       	smpsPSGAlterVol     $07
0009860F 8003                       	dc.b	nRst, $03
00098611 ECF5                       	smpsPSGAlterVol     $F5
00098613 8F07                       	dc.b	nD1, $07
00098615 EC0B                       	smpsPSGAlterVol     $0B
00098617 8006                       	dc.b	nRst, $06
00098619 E1FF                       	smpsAlterNote       $FF
0009861B 01                         	dc.b	$01
0009861C E102                       	smpsAlterNote       $02
0009861E 0101                       	dc.b	$01, $01
00098620 E1FC                       	smpsAlterNote       $FC
00098622 01                         	dc.b	$01
00098623 ECF5                       	smpsPSGAlterVol     $F5
00098625 8F07                       	dc.b	nD1, $07
00098627 EC0B                       	smpsPSGAlterVol     $0B
00098629 8004                       	dc.b	nRst, $04
0009862B ECF5                       	smpsPSGAlterVol     $F5
0009862D 8F06                       	dc.b	nD1, $06
0009862F EC04                       	smpsPSGAlterVol     $04
00098631 E701                       	dc.b	smpsNoAttack, $01
00098633 EC07                       	smpsPSGAlterVol     $07
00098635 8006                       	dc.b	nRst, $06
00098637 E101                       	smpsAlterNote       $01
00098639 01                         	dc.b	$01
0009863A E102                       	smpsAlterNote       $02
0009863C 01                         	dc.b	$01
0009863D E1FF                       	smpsAlterNote       $FF
0009863F 01                         	dc.b	$01
00098640 E1F9                       	smpsAlterNote       $F9
00098642 01                         	dc.b	$01
00098643 E1FC                       	smpsAlterNote       $FC
00098645 ECF5                       	smpsPSGAlterVol     $F5
00098647 9006                       	dc.b	nEb1, $06
00098649 EC04                       	smpsPSGAlterVol     $04
0009864B E701                       	dc.b	smpsNoAttack, $01
0009864D EC07                       	smpsPSGAlterVol     $07
0009864F 8003                       	dc.b	nRst, $03
00098651 ECF5                       	smpsPSGAlterVol     $F5
00098653 9006                       	dc.b	nEb1, $06
00098655 EC04                       	smpsPSGAlterVol     $04
00098657 E701                       	dc.b	smpsNoAttack, $01
00098659 EC07                       	smpsPSGAlterVol     $07
0009865B 8006                       	dc.b	nRst, $06
0009865D E100                       	smpsAlterNote       $00
0009865F 01                         	dc.b	$01
00098660 E102                       	smpsAlterNote       $02
00098662 01                         	dc.b	$01
00098663 E100                       	smpsAlterNote       $00
00098665 01                         	dc.b	$01
00098666 E1FF                       	smpsAlterNote       $FF
00098668 01                         	dc.b	$01
00098669 ECF5                       	smpsPSGAlterVol     $F5
0009866B 9B06                       	dc.b	nD2, $06
0009866D EC04                       	smpsPSGAlterVol     $04
0009866F E701                       	dc.b	smpsNoAttack, $01
00098671 EC07                       	smpsPSGAlterVol     $07
00098673 8003                       	dc.b	nRst, $03
00098675 ECF5                       	smpsPSGAlterVol     $F5
00098677 9B07                       	dc.b	nD2, $07
00098679 EC0B                       	smpsPSGAlterVol     $0B
0009867B 8007                       	dc.b	nRst, $07
0009867D E105                       	smpsAlterNote       $05
0009867F 0101                       	dc.b	$01, $01
00098681 E1FF                       	smpsAlterNote       $FF
00098683 01                         	dc.b	$01
00098684 E1FC                       	smpsAlterNote       $FC
00098686 01                         	dc.b	$01
00098687 E1FF                       	smpsAlterNote       $FF
00098689 ECF5                       	smpsPSGAlterVol     $F5
0009868B 9B06                       	dc.b	nD2, $06
0009868D EC0B                       	smpsPSGAlterVol     $0B
0009868F 8004                       	dc.b	nRst, $04
00098691 ECF5                       	smpsPSGAlterVol     $F5
00098693 9B06                       	dc.b	nD2, $06
00098695 EC04                       	smpsPSGAlterVol     $04
00098697 E701                       	dc.b	smpsNoAttack, $01
00098699 EC07                       	smpsPSGAlterVol     $07
0009869B 8006                       	dc.b	nRst, $06
0009869D E102                       	smpsAlterNote       $02
0009869F 01                         	dc.b	$01
000986A0 E106                       	smpsAlterNote       $06
000986A2 01                         	dc.b	$01
000986A3 E102                       	smpsAlterNote       $02
000986A5 01                         	dc.b	$01
000986A6 E1FC                       	smpsAlterNote       $FC
000986A8 01                         	dc.b	$01
000986A9 E1FF                       	smpsAlterNote       $FF
000986AB ECF5                       	smpsPSGAlterVol     $F5
000986AD 9B06                       	dc.b	nD2, $06
000986AF EC04                       	smpsPSGAlterVol     $04
000986B1 E701                       	dc.b	smpsNoAttack, $01
000986B3 EC07                       	smpsPSGAlterVol     $07
000986B5 8003                       	dc.b	nRst, $03
000986B7 ECF5                       	smpsPSGAlterVol     $F5
000986B9 9B07                       	dc.b	nD2, $07
000986BB EC0B                       	smpsPSGAlterVol     $0B
000986BD 8006                       	dc.b	nRst, $06
000986BF E102                       	smpsAlterNote       $02
000986C1 01                         	dc.b	$01
000986C2 E105                       	smpsAlterNote       $05
000986C4 0101                       	dc.b	$01, $01
000986C6 E1FF                       	smpsAlterNote       $FF
000986C8 01                         	dc.b	$01
000986C9 ECF5                       	smpsPSGAlterVol     $F5
000986CB 9B07                       	dc.b	nD2, $07
000986CD EC0B                       	smpsPSGAlterVol     $0B
000986CF 8004                       	dc.b	nRst, $04
000986D1 ECF5                       	smpsPSGAlterVol     $F5
000986D3 9B06                       	dc.b	nD2, $06
000986D5 EC0B                       	smpsPSGAlterVol     $0B
000986D7 8007                       	dc.b	nRst, $07
000986D9 E105                       	smpsAlterNote       $05
000986DB 0101                       	dc.b	$01, $01
000986DD E102                       	smpsAlterNote       $02
000986DF 01                         	dc.b	$01
000986E0 E1FC                       	smpsAlterNote       $FC
000986E2 01                         	dc.b	$01
000986E3 E1FF                       	smpsAlterNote       $FF
000986E5 ECF5                       	smpsPSGAlterVol     $F5
000986E7 9B06                       	dc.b	nD2, $06
000986E9 EC04                       	smpsPSGAlterVol     $04
000986EB E701                       	dc.b	smpsNoAttack, $01
000986ED EC07                       	smpsPSGAlterVol     $07
000986EF 8003                       	dc.b	nRst, $03
000986F1 ECF5                       	smpsPSGAlterVol     $F5
000986F3 9B06                       	dc.b	nD2, $06
000986F5 EC04                       	smpsPSGAlterVol     $04
000986F7 E701                       	dc.b	smpsNoAttack, $01
000986F9 EC07                       	smpsPSGAlterVol     $07
000986FB 8006                       	dc.b	nRst, $06
000986FD E102                       	smpsAlterNote       $02
000986FF 01                         	dc.b	$01
00098700 E106                       	smpsAlterNote       $06
00098702 01                         	dc.b	$01
00098703 E102                       	smpsAlterNote       $02
00098705 01                         	dc.b	$01
00098706 E1FF                       	smpsAlterNote       $FF
00098708 01                         	dc.b	$01
00098709 ECF5                       	smpsPSGAlterVol     $F5
0009870B 9B06                       	dc.b	nD2, $06
0009870D EC04                       	smpsPSGAlterVol     $04
0009870F E701                       	dc.b	smpsNoAttack, $01
00098711 EC07                       	smpsPSGAlterVol     $07
00098713 8003                       	dc.b	nRst, $03
00098715 ECF5                       	smpsPSGAlterVol     $F5
00098717 9B07                       	dc.b	nD2, $07
00098719 EC0B                       	smpsPSGAlterVol     $0B
0009871B 8007                       	dc.b	nRst, $07
0009871D E105                       	smpsAlterNote       $05
0009871F 0101                       	dc.b	$01, $01
00098721 E1FF                       	smpsAlterNote       $FF
00098723 01                         	dc.b	$01
00098724 E1FC                       	smpsAlterNote       $FC
00098726 01                         	dc.b	$01
00098727 E1FF                       	smpsAlterNote       $FF
00098729 ECF5                       	smpsPSGAlterVol     $F5
0009872B 9B06                       	dc.b	nD2, $06
0009872D EC0B                       	smpsPSGAlterVol     $0B
0009872F 8004                       	dc.b	nRst, $04
00098731 ECF5                       	smpsPSGAlterVol     $F5
00098733 9B06                       	dc.b	nD2, $06
00098735 EC04                       	smpsPSGAlterVol     $04
00098737 E701                       	dc.b	smpsNoAttack, $01
00098739 EC07                       	smpsPSGAlterVol     $07
0009873B 8006                       	dc.b	nRst, $06
0009873D E102                       	smpsAlterNote       $02
0009873F 01                         	dc.b	$01
00098740 E106                       	smpsAlterNote       $06
00098742 01                         	dc.b	$01
00098743 E102                       	smpsAlterNote       $02
00098745 01                         	dc.b	$01
00098746 E1FC                       	smpsAlterNote       $FC
00098748 01                         	dc.b	$01
00098749 E1FF                       	smpsAlterNote       $FF
0009874B ECF5                       	smpsPSGAlterVol     $F5
0009874D 9B06                       	dc.b	nD2, $06
0009874F EC04                       	smpsPSGAlterVol     $04
00098751 E701                       	dc.b	smpsNoAttack, $01
00098753 EC07                       	smpsPSGAlterVol     $07
00098755 8003                       	dc.b	nRst, $03
00098757 ECF5                       	smpsPSGAlterVol     $F5
00098759 9B06                       	dc.b	nD2, $06
0009875B EC04                       	smpsPSGAlterVol     $04
0009875D E701                       	dc.b	smpsNoAttack, $01
0009875F EC07                       	smpsPSGAlterVol     $07
00098761 8006                       	dc.b	nRst, $06
00098763 E102                       	smpsAlterNote       $02
00098765 01                         	dc.b	$01
00098766 E106                       	smpsAlterNote       $06
00098768 01                         	dc.b	$01
00098769 E105                       	smpsAlterNote       $05
0009876B 01                         	dc.b	$01
0009876C E1FF                       	smpsAlterNote       $FF
0009876E 01                         	dc.b	$01
0009876F ECF5                       	smpsPSGAlterVol     $F5
00098771 9B07                       	dc.b	nD2, $07
00098773 EC0B                       	smpsPSGAlterVol     $0B
00098775 8004                       	dc.b	nRst, $04
00098777 ECF5                       	smpsPSGAlterVol     $F5
00098779 9B06                       	dc.b	nD2, $06
0009877B EC0B                       	smpsPSGAlterVol     $0B
0009877D 8007                       	dc.b	nRst, $07
0009877F E105                       	smpsAlterNote       $05
00098781 0101                       	dc.b	$01, $01
00098783 E101                       	smpsAlterNote       $01
00098785 01                         	dc.b	$01
00098786 E1FB                       	smpsAlterNote       $FB
00098788 01                         	dc.b	$01
00098789 E1FE                       	smpsAlterNote       $FE
0009878B ECF5                       	smpsPSGAlterVol     $F5
0009878D 9A06                       	dc.b	nCs2, $06
0009878F EC04                       	smpsPSGAlterVol     $04
00098791 E701                       	dc.b	smpsNoAttack, $01
00098793 EC07                       	smpsPSGAlterVol     $07
00098795 8003                       	dc.b	nRst, $03
00098797 ECF5                       	smpsPSGAlterVol     $F5
00098799 9A06                       	dc.b	nCs2, $06
0009879B EC04                       	smpsPSGAlterVol     $04
0009879D E701                       	dc.b	smpsNoAttack, $01
0009879F EC07                       	smpsPSGAlterVol     $07
000987A1 8003                       	dc.b	nRst, $03
000987A3 E1FC                       	smpsAlterNote       $FC
000987A5 ECF5                       	smpsPSGAlterVol     $F5
000987A7 8F07                       	dc.b	nD1, $07
000987A9 EC0B                       	smpsPSGAlterVol     $0B
000987AB 8006                       	dc.b	nRst, $06
000987AD E1FF                       	smpsAlterNote       $FF
000987AF 01                         	dc.b	$01
000987B0 E103                       	smpsAlterNote       $03
000987B2 01                         	dc.b	$01
000987B3 E102                       	smpsAlterNote       $02
000987B5 01                         	dc.b	$01
000987B6 E1FC                       	smpsAlterNote       $FC
000987B8 01                         	dc.b	$01
000987B9 E1F8                       	smpsAlterNote       $F8
000987BB 01                         	dc.b	$01
000987BC E1FC                       	smpsAlterNote       $FC
000987BE 01                         	dc.b	$01
000987BF E1FF                       	smpsAlterNote       $FF
000987C1 01                         	dc.b	$01
000987C2 E103                       	smpsAlterNote       $03
000987C4 01                         	dc.b	$01
000987C5 E1FC                       	smpsAlterNote       $FC
000987C7 ECF5                       	smpsPSGAlterVol     $F5
000987C9 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000987CD EC04                       	smpsPSGAlterVol     $04
000987CF E701                       	dc.b	smpsNoAttack, $01
000987D1 EC07                       	smpsPSGAlterVol     $07
000987D3 8009                       	dc.b	nRst, $09
000987D5 E1FF                       	smpsAlterNote       $FF
000987D7 01                         	dc.b	$01
000987D8 E103                       	smpsAlterNote       $03
000987DA 01                         	dc.b	$01
000987DB E102                       	smpsAlterNote       $02
000987DD 01                         	dc.b	$01
000987DE E1FC                       	smpsAlterNote       $FC
000987E0 01                         	dc.b	$01
000987E1 E1F8                       	smpsAlterNote       $F8
000987E3 01                         	dc.b	$01
000987E4 E1FC                       	smpsAlterNote       $FC
000987E6 01                         	dc.b	$01
000987E7 E1FF                       	smpsAlterNote       $FF
000987E9 01                         	dc.b	$01
000987EA E103                       	smpsAlterNote       $03
000987EC 01                         	dc.b	$01
000987ED E1FF                       	smpsAlterNote       $FF
000987EF 01                         	dc.b	$01
000987F0 E1F9                       	smpsAlterNote       $F9
000987F2 01                         	dc.b	$01
000987F3 E1F8                       	smpsAlterNote       $F8
000987F5 01                         	dc.b	$01
000987F6 E1FC                       	smpsAlterNote       $FC
000987F8 01                         	dc.b	$01
000987F9 E102                       	smpsAlterNote       $02
000987FB 0101                       	dc.b	$01, $01
000987FD E1FF                       	smpsAlterNote       $FF
000987FF 01                         	dc.b	$01
00098800 E1FC                       	smpsAlterNote       $FC
00098802 ECF5                       	smpsPSGAlterVol     $F5
00098804 8F02                       	dc.b	nD1, $02
00098806 EC04                       	smpsPSGAlterVol     $04
00098808 E701                       	dc.b	smpsNoAttack, $01
0009880A ECFC                       	smpsPSGAlterVol     $FC
0009880C E1FB                       	smpsAlterNote       $FB
0009880E 8D06                       	dc.b	nC1, $06
00098810 EC04                       	smpsPSGAlterVol     $04
00098812 E701                       	dc.b	smpsNoAttack, $01
00098814 EC07                       	smpsPSGAlterVol     $07
00098816 8006                       	dc.b	nRst, $06
00098818 E1FE                       	smpsAlterNote       $FE
0009881A 01                         	dc.b	$01
0009881B E102                       	smpsAlterNote       $02
0009881D 01                         	dc.b	$01
0009881E E1FE                       	smpsAlterNote       $FE
00098820 01                         	dc.b	$01
00098821 E1FB                       	smpsAlterNote       $FB
00098823 01                         	dc.b	$01
00098824 E1F7                       	smpsAlterNote       $F7
00098826 01                         	dc.b	$01
00098827 E1FB                       	smpsAlterNote       $FB
00098829 01                         	dc.b	$01
0009882A E101                       	smpsAlterNote       $01
0009882C 01                         	dc.b	$01
0009882D E102                       	smpsAlterNote       $02
0009882F 01                         	dc.b	$01
00098830 E1FB                       	smpsAlterNote       $FB
00098832 ECF5                       	smpsPSGAlterVol     $F5
00098834 8D02                       	dc.b	nC1, $02
00098836 EC04                       	smpsPSGAlterVol     $04
00098838 E701                       	dc.b	smpsNoAttack, $01
0009883A E1FC                       	smpsAlterNote       $FC
0009883C ECFC                       	smpsPSGAlterVol     $FC
0009883E 8F0D                       	dc.b	nD1, $0D
00098840 E1FF                       	smpsAlterNote       $FF
00098842 E701                       	dc.b	smpsNoAttack, $01
00098844 E103                       	smpsAlterNote       $03
00098846 E701                       	dc.b	smpsNoAttack, $01
00098848 E1FF                       	smpsAlterNote       $FF
0009884A E701                       	dc.b	smpsNoAttack, $01
0009884C E1FC                       	smpsAlterNote       $FC
0009884E E701                       	dc.b	smpsNoAttack, $01
00098850 E1F8                       	smpsAlterNote       $F8
00098852 E701                       	dc.b	smpsNoAttack, $01
00098854 E1FC                       	smpsAlterNote       $FC
00098856 E701                       	dc.b	smpsNoAttack, $01
00098858 E102                       	smpsAlterNote       $02
0009885A E701                       	dc.b	smpsNoAttack, $01
0009885C E103                       	smpsAlterNote       $03
0009885E E701                       	dc.b	smpsNoAttack, $01
00098860 E1FF                       	smpsAlterNote       $FF
00098862 E701                       	dc.b	smpsNoAttack, $01
00098864 E1F9                       	smpsAlterNote       $F9
00098866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009886A E1FC                       	smpsAlterNote       $FC
0009886C E701                       	dc.b	smpsNoAttack, $01
0009886E E102                       	smpsAlterNote       $02
00098870 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098874 E1FC                       	smpsAlterNote       $FC
00098876 E701                       	dc.b	smpsNoAttack, $01
00098878 E1F9                       	smpsAlterNote       $F9
0009887A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009887E E1FF                       	smpsAlterNote       $FF
00098880 EC04                       	smpsPSGAlterVol     $04
00098882 E701                       	dc.b	smpsNoAttack, $01
00098884 EC07                       	smpsPSGAlterVol     $07
00098886 E103                       	smpsAlterNote       $03
00098888 8001                       	dc.b	nRst, $01
0009888A E102                       	smpsAlterNote       $02
0009888C 01                         	dc.b	$01
0009888D E1FB                       	smpsAlterNote       $FB
0009888F 01                         	dc.b	$01
00098890 E1F7                       	smpsAlterNote       $F7
00098892 01                         	dc.b	$01
00098893 E1FB                       	smpsAlterNote       $FB
00098895 01                         	dc.b	$01
00098896 E102                       	smpsAlterNote       $02
00098898 01                         	dc.b	$01
00098899 E103                       	smpsAlterNote       $03
0009889B 01                         	dc.b	$01
0009889C E1FB                       	smpsAlterNote       $FB
0009889E ECF5                       	smpsPSGAlterVol     $F5
000988A0 8E06                       	dc.b	nCs1, $06
000988A2 EC04                       	smpsPSGAlterVol     $04
000988A4 E701                       	dc.b	smpsNoAttack, $01
000988A6 EC07                       	smpsPSGAlterVol     $07
000988A8 8003                       	dc.b	nRst, $03
000988AA ECF5                       	smpsPSGAlterVol     $F5
000988AC 8E06                       	dc.b	nCs1, $06
000988AE EC04                       	smpsPSGAlterVol     $04
000988B0 E701                       	dc.b	smpsNoAttack, $01
000988B2 EC07                       	smpsPSGAlterVol     $07
000988B4 8006                       	dc.b	nRst, $06
000988B6 E1FE                       	smpsAlterNote       $FE
000988B8 01                         	dc.b	$01
000988B9 E102                       	smpsAlterNote       $02
000988BB 01                         	dc.b	$01
000988BC E1FE                       	smpsAlterNote       $FE
000988BE 01                         	dc.b	$01
000988BF E1F9                       	smpsAlterNote       $F9
000988C1 01                         	dc.b	$01
000988C2 E1FC                       	smpsAlterNote       $FC
000988C4 ECF5                       	smpsPSGAlterVol     $F5
000988C6 8F06                       	dc.b	nD1, $06
000988C8 EC04                       	smpsPSGAlterVol     $04
000988CA E701                       	dc.b	smpsNoAttack, $01
000988CC EC07                       	smpsPSGAlterVol     $07
000988CE 8003                       	dc.b	nRst, $03
000988D0 ECF5                       	smpsPSGAlterVol     $F5
000988D2 8F07                       	dc.b	nD1, $07
000988D4 EC0B                       	smpsPSGAlterVol     $0B
000988D6 8006                       	dc.b	nRst, $06
000988D8 E1FF                       	smpsAlterNote       $FF
000988DA 01                         	dc.b	$01
000988DB E102                       	smpsAlterNote       $02
000988DD 0101                       	dc.b	$01, $01
000988DF E1FB                       	smpsAlterNote       $FB
000988E1 01                         	dc.b	$01
000988E2 ECF5                       	smpsPSGAlterVol     $F5
000988E4 8E07                       	dc.b	nCs1, $07
000988E6 EC0B                       	smpsPSGAlterVol     $0B
000988E8 8004                       	dc.b	nRst, $04
000988EA ECF5                       	smpsPSGAlterVol     $F5
000988EC 8E06                       	dc.b	nCs1, $06
000988EE EC04                       	smpsPSGAlterVol     $04
000988F0 E701                       	dc.b	smpsNoAttack, $01
000988F2 EC07                       	smpsPSGAlterVol     $07
000988F4 8006                       	dc.b	nRst, $06
000988F6 E101                       	smpsAlterNote       $01
000988F8 01                         	dc.b	$01
000988F9 E102                       	smpsAlterNote       $02
000988FB 01                         	dc.b	$01
000988FC E1FE                       	smpsAlterNote       $FE
000988FE 01                         	dc.b	$01
000988FF E1F8                       	smpsAlterNote       $F8
00098901 01                         	dc.b	$01
00098902 E1FB                       	smpsAlterNote       $FB
00098904 ECF5                       	smpsPSGAlterVol     $F5
00098906 8E06                       	dc.b	nCs1, $06
00098908 EC04                       	smpsPSGAlterVol     $04
0009890A E701                       	dc.b	smpsNoAttack, $01
0009890C EC07                       	smpsPSGAlterVol     $07
0009890E 8003                       	dc.b	nRst, $03
00098910 ECF5                       	smpsPSGAlterVol     $F5
00098912 8E06                       	dc.b	nCs1, $06
00098914 EC04                       	smpsPSGAlterVol     $04
00098916 E701                       	dc.b	smpsNoAttack, $01
00098918 EC07                       	smpsPSGAlterVol     $07
0009891A 8004                       	dc.b	nRst, $04
0009891C E1FC                       	smpsAlterNote       $FC
0009891E ECF5                       	smpsPSGAlterVol     $F5
00098920 8F06                       	dc.b	nD1, $06
00098922 EC0B                       	smpsPSGAlterVol     $0B
00098924 8006                       	dc.b	nRst, $06
00098926 E1FF                       	smpsAlterNote       $FF
00098928 01                         	dc.b	$01
00098929 E102                       	smpsAlterNote       $02
0009892B 0101                       	dc.b	$01, $01
0009892D E1FC                       	smpsAlterNote       $FC
0009892F 01                         	dc.b	$01
00098930 E1F8                       	smpsAlterNote       $F8
00098932 01                         	dc.b	$01
00098933 E1F9                       	smpsAlterNote       $F9
00098935 01                         	dc.b	$01
00098936 E1FF                       	smpsAlterNote       $FF
00098938 01                         	dc.b	$01
00098939 E103                       	smpsAlterNote       $03
0009893B 01                         	dc.b	$01
0009893C E1FC                       	smpsAlterNote       $FC
0009893E ECF5                       	smpsPSGAlterVol     $F5
00098940 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098944 EC04                       	smpsPSGAlterVol     $04
00098946 E701                       	dc.b	smpsNoAttack, $01
00098948 EC07                       	smpsPSGAlterVol     $07
0009894A 8009                       	dc.b	nRst, $09
0009894C E1FF                       	smpsAlterNote       $FF
0009894E 01                         	dc.b	$01
0009894F E102                       	smpsAlterNote       $02
00098951 0101                       	dc.b	$01, $01
00098953 E1FC                       	smpsAlterNote       $FC
00098955 01                         	dc.b	$01
00098956 E1F8                       	smpsAlterNote       $F8
00098958 01                         	dc.b	$01
00098959 E1F9                       	smpsAlterNote       $F9
0009895B 01                         	dc.b	$01
0009895C E1FF                       	smpsAlterNote       $FF
0009895E 01                         	dc.b	$01
0009895F E103                       	smpsAlterNote       $03
00098961 01                         	dc.b	$01
00098962 E1FF                       	smpsAlterNote       $FF
00098964 01                         	dc.b	$01
00098965 E1FC                       	smpsAlterNote       $FC
00098967 01                         	dc.b	$01
00098968 E1F8                       	smpsAlterNote       $F8
0009896A 01                         	dc.b	$01
0009896B E1FC                       	smpsAlterNote       $FC
0009896D 01                         	dc.b	$01
0009896E E102                       	smpsAlterNote       $02
00098970 01                         	dc.b	$01
00098971 E103                       	smpsAlterNote       $03
00098973 01                         	dc.b	$01
00098974 E1FF                       	smpsAlterNote       $FF
00098976 01                         	dc.b	$01
00098977 E1FC                       	smpsAlterNote       $FC
00098979 ECF5                       	smpsPSGAlterVol     $F5
0009897B 8F03                       	dc.b	nD1, $03
0009897D E1FB                       	smpsAlterNote       $FB
0009897F 8D06                       	dc.b	nC1, $06
00098981 EC04                       	smpsPSGAlterVol     $04
00098983 E701                       	dc.b	smpsNoAttack, $01
00098985 EC07                       	smpsPSGAlterVol     $07
00098987 8006                       	dc.b	nRst, $06
00098989 E1FE                       	smpsAlterNote       $FE
0009898B 01                         	dc.b	$01
0009898C E102                       	smpsAlterNote       $02
0009898E 01                         	dc.b	$01
0009898F E101                       	smpsAlterNote       $01
00098991 01                         	dc.b	$01
00098992 E1FB                       	smpsAlterNote       $FB
00098994 01                         	dc.b	$01
00098995 E1F7                       	smpsAlterNote       $F7
00098997 01                         	dc.b	$01
00098998 E1FB                       	smpsAlterNote       $FB
0009899A 01                         	dc.b	$01
0009899B E1FE                       	smpsAlterNote       $FE
0009899D 01                         	dc.b	$01
0009899E E102                       	smpsAlterNote       $02
000989A0 01                         	dc.b	$01
000989A1 E1FB                       	smpsAlterNote       $FB
000989A3 ECF5                       	smpsPSGAlterVol     $F5
000989A5 8D03                       	dc.b	nC1, $03
000989A7 E1FC                       	smpsAlterNote       $FC
000989A9 8F0D                       	dc.b	nD1, $0D
000989AB E1FF                       	smpsAlterNote       $FF
000989AD E701                       	dc.b	smpsNoAttack, $01
000989AF E103                       	smpsAlterNote       $03
000989B1 E701                       	dc.b	smpsNoAttack, $01
000989B3 E1FF                       	smpsAlterNote       $FF
000989B5 E701                       	dc.b	smpsNoAttack, $01
000989B7 E1FC                       	smpsAlterNote       $FC
000989B9 E701                       	dc.b	smpsNoAttack, $01
000989BB E1F8                       	smpsAlterNote       $F8
000989BD E701                       	dc.b	smpsNoAttack, $01
000989BF E1FC                       	smpsAlterNote       $FC
000989C1 E701                       	dc.b	smpsNoAttack, $01
000989C3 E102                       	smpsAlterNote       $02
000989C5 E701                       	dc.b	smpsNoAttack, $01
000989C7 E103                       	smpsAlterNote       $03
000989C9 E701                       	dc.b	smpsNoAttack, $01
000989CB E1FF                       	smpsAlterNote       $FF
000989CD E701                       	dc.b	smpsNoAttack, $01
000989CF E1F9                       	smpsAlterNote       $F9
000989D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989D5 E1FC                       	smpsAlterNote       $FC
000989D7 E701                       	dc.b	smpsNoAttack, $01
000989D9 E102                       	smpsAlterNote       $02
000989DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989DF E1FF                       	smpsAlterNote       $FF
000989E1 E701                       	dc.b	smpsNoAttack, $01
000989E3 E1F9                       	smpsAlterNote       $F9
000989E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989E9 E1FF                       	smpsAlterNote       $FF
000989EB EC04                       	smpsPSGAlterVol     $04
000989ED E701                       	dc.b	smpsNoAttack, $01
000989EF EC07                       	smpsPSGAlterVol     $07
000989F1 E103                       	smpsAlterNote       $03
000989F3 8001                       	dc.b	nRst, $01
000989F5 E102                       	smpsAlterNote       $02
000989F7 01                         	dc.b	$01
000989F8 E1FB                       	smpsAlterNote       $FB
000989FA 01                         	dc.b	$01
000989FB E1F7                       	smpsAlterNote       $F7
000989FD 01                         	dc.b	$01
000989FE E1FB                       	smpsAlterNote       $FB
00098A00 01                         	dc.b	$01
00098A01 E1FF                       	smpsAlterNote       $FF
00098A03 01                         	dc.b	$01
00098A04 E103                       	smpsAlterNote       $03
00098A06 01                         	dc.b	$01
00098A07 E1FB                       	smpsAlterNote       $FB
00098A09 ECF5                       	smpsPSGAlterVol     $F5
00098A0B 8E06                       	dc.b	nCs1, $06
00098A0D EC04                       	smpsPSGAlterVol     $04
00098A0F E701                       	dc.b	smpsNoAttack, $01
00098A11 EC07                       	smpsPSGAlterVol     $07
00098A13 8003                       	dc.b	nRst, $03
00098A15 ECF5                       	smpsPSGAlterVol     $F5
00098A17 8E06                       	dc.b	nCs1, $06
00098A19 EC04                       	smpsPSGAlterVol     $04
00098A1B E701                       	dc.b	smpsNoAttack, $01
00098A1D EC07                       	smpsPSGAlterVol     $07
00098A1F 8006                       	dc.b	nRst, $06
00098A21 E1FE                       	smpsAlterNote       $FE
00098A23 01                         	dc.b	$01
00098A24 E102                       	smpsAlterNote       $02
00098A26 01                         	dc.b	$01
00098A27 E1FE                       	smpsAlterNote       $FE
00098A29 01                         	dc.b	$01
00098A2A E1FC                       	smpsAlterNote       $FC
00098A2C 01                         	dc.b	$01
00098A2D ECF5                       	smpsPSGAlterVol     $F5
00098A2F 8F06                       	dc.b	nD1, $06
00098A31 EC04                       	smpsPSGAlterVol     $04
00098A33 E701                       	dc.b	smpsNoAttack, $01
00098A35 EC07                       	smpsPSGAlterVol     $07
00098A37 8003                       	dc.b	nRst, $03
00098A39 ECF5                       	smpsPSGAlterVol     $F5
00098A3B 8F07                       	dc.b	nD1, $07
00098A3D EC0B                       	smpsPSGAlterVol     $0B
00098A3F 8007                       	dc.b	nRst, $07
00098A41 E102                       	smpsAlterNote       $02
00098A43 0101                       	dc.b	$01, $01
00098A45 E1FB                       	smpsAlterNote       $FB
00098A47 01                         	dc.b	$01
00098A48 E1F8                       	smpsAlterNote       $F8
00098A4A 01                         	dc.b	$01
00098A4B E1FB                       	smpsAlterNote       $FB
00098A4D ECF5                       	smpsPSGAlterVol     $F5
00098A4F 8E06                       	dc.b	nCs1, $06
00098A51 EC0B                       	smpsPSGAlterVol     $0B
00098A53 8004                       	dc.b	nRst, $04
00098A55 ECF5                       	smpsPSGAlterVol     $F5
00098A57 8E06                       	dc.b	nCs1, $06
00098A59 EC04                       	smpsPSGAlterVol     $04
00098A5B E701                       	dc.b	smpsNoAttack, $01
00098A5D EC07                       	smpsPSGAlterVol     $07
00098A5F 8006                       	dc.b	nRst, $06
00098A61 E1FE                       	smpsAlterNote       $FE
00098A63 01                         	dc.b	$01
00098A64 E102                       	smpsAlterNote       $02
00098A66 01                         	dc.b	$01
00098A67 E1FE                       	smpsAlterNote       $FE
00098A69 01                         	dc.b	$01
00098A6A E1F9                       	smpsAlterNote       $F9
00098A6C 01                         	dc.b	$01
00098A6D E1FC                       	smpsAlterNote       $FC
00098A6F ECF5                       	smpsPSGAlterVol     $F5
00098A71 8F06                       	dc.b	nD1, $06
00098A73 EC04                       	smpsPSGAlterVol     $04
00098A75 E701                       	dc.b	smpsNoAttack, $01
00098A77 EC07                       	smpsPSGAlterVol     $07
00098A79 8003                       	dc.b	nRst, $03
00098A7B ECF5                       	smpsPSGAlterVol     $F5
00098A7D 8F06                       	dc.b	nD1, $06
00098A7F EC04                       	smpsPSGAlterVol     $04
00098A81 E701                       	dc.b	smpsNoAttack, $01
00098A83 EC07                       	smpsPSGAlterVol     $07
00098A85 8006                       	dc.b	nRst, $06
00098A87 E1FF                       	smpsAlterNote       $FF
00098A89 01                         	dc.b	$01
00098A8A E103                       	smpsAlterNote       $03
00098A8C 01                         	dc.b	$01
00098A8D E102                       	smpsAlterNote       $02
00098A8F 01                         	dc.b	$01
00098A90 E1FB                       	smpsAlterNote       $FB
00098A92 01                         	dc.b	$01
00098A93 ECF5                       	smpsPSGAlterVol     $F5
00098A95 8E07                       	dc.b	nCs1, $07
00098A97 EC0B                       	smpsPSGAlterVol     $0B
00098A99 8004                       	dc.b	nRst, $04
00098A9B ECF5                       	smpsPSGAlterVol     $F5
00098A9D 8E06                       	dc.b	nCs1, $06
00098A9F EC0B                       	smpsPSGAlterVol     $0B
00098AA1 8007                       	dc.b	nRst, $07
00098AA3 E101                       	smpsAlterNote       $01
00098AA5 0101                       	dc.b	$01, $01
00098AA7 E1FE                       	smpsAlterNote       $FE
00098AA9 01                         	dc.b	$01
00098AAA E1F9                       	smpsAlterNote       $F9
00098AAC 01                         	dc.b	$01
00098AAD E1FC                       	smpsAlterNote       $FC
00098AAF ECF5                       	smpsPSGAlterVol     $F5
00098AB1 8F06                       	dc.b	nD1, $06
00098AB3 EC04                       	smpsPSGAlterVol     $04
00098AB5 E701                       	dc.b	smpsNoAttack, $01
00098AB7 EC07                       	smpsPSGAlterVol     $07
00098AB9 8003                       	dc.b	nRst, $03
00098ABB ECF5                       	smpsPSGAlterVol     $F5
00098ABD 8F06                       	dc.b	nD1, $06
00098ABF EC04                       	smpsPSGAlterVol     $04
00098AC1 E701                       	dc.b	smpsNoAttack, $01
00098AC3 EC07                       	smpsPSGAlterVol     $07
00098AC5 8006                       	dc.b	nRst, $06
00098AC7 E1FF                       	smpsAlterNote       $FF
00098AC9 01                         	dc.b	$01
00098ACA E103                       	smpsAlterNote       $03
00098ACC 01                         	dc.b	$01
00098ACD E1FF                       	smpsAlterNote       $FF
00098ACF 01                         	dc.b	$01
00098AD0 E1FB                       	smpsAlterNote       $FB
00098AD2 01                         	dc.b	$01
00098AD3 ECF5                       	smpsPSGAlterVol     $F5
00098AD5 8E06                       	dc.b	nCs1, $06
00098AD7 EC04                       	smpsPSGAlterVol     $04
00098AD9 E701                       	dc.b	smpsNoAttack, $01
00098ADB EC07                       	smpsPSGAlterVol     $07
00098ADD 8003                       	dc.b	nRst, $03
00098ADF ECF5                       	smpsPSGAlterVol     $F5
00098AE1 8E07                       	dc.b	nCs1, $07
00098AE3 E1FF                       	smpsAlterNote       $FF
00098AE5 9B06                       	dc.b	nD2, $06
00098AE7 EC04                       	smpsPSGAlterVol     $04
00098AE9 E701                       	dc.b	smpsNoAttack, $01
00098AEB ECFC                       	smpsPSGAlterVol     $FC
00098AED 9B03                       	dc.b	nD2, $03
00098AEF EC04                       	smpsPSGAlterVol     $04
00098AF1 E701                       	dc.b	smpsNoAttack, $01
00098AF3 ECFC                       	smpsPSGAlterVol     $FC
00098AF5 9B02                       	dc.b	nD2, $02
00098AF7 EC04                       	smpsPSGAlterVol     $04
00098AF9 E701                       	dc.b	smpsNoAttack, $01
00098AFB ECFC                       	smpsPSGAlterVol     $FC
00098AFD E1FE                       	smpsAlterNote       $FE
00098AFF 9A03                       	dc.b	nCs2, $03
00098B01 EC0B                       	smpsPSGAlterVol     $0B
00098B03 800A                       	dc.b	nRst, $0A
00098B05 E102                       	smpsAlterNote       $02
00098B07 01                         	dc.b	$01
00098B08 E10A                       	smpsAlterNote       $0A
00098B0A 01                         	dc.b	$01
00098B0B E102                       	smpsAlterNote       $02
00098B0D 01                         	dc.b	$01
00098B0E E1F7                       	smpsAlterNote       $F7
00098B10 01                         	dc.b	$01
00098B11 E10A                       	smpsAlterNote       $0A
00098B13 01                         	dc.b	$01
00098B14 E1FC                       	smpsAlterNote       $FC
00098B16 01                         	dc.b	$01
00098B17 E108                       	smpsAlterNote       $08
00098B19 0101                       	dc.b	$01, $01
00098B1B E102                       	smpsAlterNote       $02
00098B1D 01                         	dc.b	$01
00098B1E E1F7                       	smpsAlterNote       $F7
00098B20 0101                       	dc.b	$01, $01
00098B22 E1FC                       	smpsAlterNote       $FC
00098B24 ECF5                       	smpsPSGAlterVol     $F5
00098B26 8F06                       	dc.b	nD1, $06
00098B28 EC04                       	smpsPSGAlterVol     $04
00098B2A E701                       	dc.b	smpsNoAttack, $01
00098B2C EC07                       	smpsPSGAlterVol     $07
00098B2E 8003                       	dc.b	nRst, $03
00098B30 ECF5                       	smpsPSGAlterVol     $F5
00098B32 8F06                       	dc.b	nD1, $06
00098B34 EC04                       	smpsPSGAlterVol     $04
00098B36 E701                       	dc.b	smpsNoAttack, $01
00098B38 EC07                       	smpsPSGAlterVol     $07
00098B3A 8006                       	dc.b	nRst, $06
00098B3C E1FF                       	smpsAlterNote       $FF
00098B3E 01                         	dc.b	$01
00098B3F E102                       	smpsAlterNote       $02
00098B41 01                         	dc.b	$01
00098B42 E101                       	smpsAlterNote       $01
00098B44 01                         	dc.b	$01
00098B45 E1FC                       	smpsAlterNote       $FC
00098B47 01                         	dc.b	$01
00098B48 ECF5                       	smpsPSGAlterVol     $F5
00098B4A 9007                       	dc.b	nEb1, $07
00098B4C EC0B                       	smpsPSGAlterVol     $0B
00098B4E 8004                       	dc.b	nRst, $04
00098B50 ECF5                       	smpsPSGAlterVol     $F5
00098B52 9006                       	dc.b	nEb1, $06
00098B54 EC0B                       	smpsPSGAlterVol     $0B
00098B56 8007                       	dc.b	nRst, $07
00098B58 E103                       	smpsAlterNote       $03
00098B5A 0101                       	dc.b	$01, $01
00098B5C E1FF                       	smpsAlterNote       $FF
00098B5E 01                         	dc.b	$01
00098B5F E1F9                       	smpsAlterNote       $F9
00098B61 01                         	dc.b	$01
00098B62 E1FC                       	smpsAlterNote       $FC
00098B64 ECF5                       	smpsPSGAlterVol     $F5
00098B66 8F06                       	dc.b	nD1, $06
00098B68 EC04                       	smpsPSGAlterVol     $04
00098B6A E701                       	dc.b	smpsNoAttack, $01
00098B6C EC07                       	smpsPSGAlterVol     $07
00098B6E 8003                       	dc.b	nRst, $03
00098B70 ECF5                       	smpsPSGAlterVol     $F5
00098B72 8F06                       	dc.b	nD1, $06
00098B74 EC04                       	smpsPSGAlterVol     $04
00098B76 E701                       	dc.b	smpsNoAttack, $01
00098B78 EC07                       	smpsPSGAlterVol     $07
00098B7A 8006                       	dc.b	nRst, $06
00098B7C E1FF                       	smpsAlterNote       $FF
00098B7E 01                         	dc.b	$01
00098B7F E103                       	smpsAlterNote       $03
00098B81 01                         	dc.b	$01
00098B82 E1FF                       	smpsAlterNote       $FF
00098B84 01                         	dc.b	$01
00098B85 E1F9                       	smpsAlterNote       $F9
00098B87 01                         	dc.b	$01
00098B88 E1FC                       	smpsAlterNote       $FC
00098B8A ECF5                       	smpsPSGAlterVol     $F5
00098B8C 8F06                       	dc.b	nD1, $06
00098B8E EC04                       	smpsPSGAlterVol     $04
00098B90 E701                       	dc.b	smpsNoAttack, $01
00098B92 EC07                       	smpsPSGAlterVol     $07
00098B94 8003                       	dc.b	nRst, $03
00098B96 ECF5                       	smpsPSGAlterVol     $F5
00098B98 8F07                       	dc.b	nD1, $07
00098B9A EC0B                       	smpsPSGAlterVol     $0B
00098B9C 8006                       	dc.b	nRst, $06
00098B9E E1FF                       	smpsAlterNote       $FF
00098BA0 01                         	dc.b	$01
00098BA1 E102                       	smpsAlterNote       $02
00098BA3 0101                       	dc.b	$01, $01
00098BA5 E1FC                       	smpsAlterNote       $FC
00098BA7 01                         	dc.b	$01
00098BA8 ECF5                       	smpsPSGAlterVol     $F5
00098BAA 8F07                       	dc.b	nD1, $07
00098BAC EC0B                       	smpsPSGAlterVol     $0B
00098BAE 8004                       	dc.b	nRst, $04
00098BB0 ECF5                       	smpsPSGAlterVol     $F5
00098BB2 8F06                       	dc.b	nD1, $06
00098BB4 EC04                       	smpsPSGAlterVol     $04
00098BB6 E701                       	dc.b	smpsNoAttack, $01
00098BB8 EC07                       	smpsPSGAlterVol     $07
00098BBA 8006                       	dc.b	nRst, $06
00098BBC E101                       	smpsAlterNote       $01
00098BBE 01                         	dc.b	$01
00098BBF E102                       	smpsAlterNote       $02
00098BC1 01                         	dc.b	$01
00098BC2 E1FF                       	smpsAlterNote       $FF
00098BC4 01                         	dc.b	$01
00098BC5 E1F9                       	smpsAlterNote       $F9
00098BC7 01                         	dc.b	$01
00098BC8 E1FC                       	smpsAlterNote       $FC
00098BCA ECF5                       	smpsPSGAlterVol     $F5
00098BCC 9006                       	dc.b	nEb1, $06
00098BCE EC04                       	smpsPSGAlterVol     $04
00098BD0 E701                       	dc.b	smpsNoAttack, $01
00098BD2 EC07                       	smpsPSGAlterVol     $07
00098BD4 8003                       	dc.b	nRst, $03
00098BD6 ECF5                       	smpsPSGAlterVol     $F5
00098BD8 9006                       	dc.b	nEb1, $06
00098BDA EC04                       	smpsPSGAlterVol     $04
00098BDC E701                       	dc.b	smpsNoAttack, $01
00098BDE EC07                       	smpsPSGAlterVol     $07
00098BE0 8006                       	dc.b	nRst, $06
00098BE2 E100                       	smpsAlterNote       $00
00098BE4 01                         	dc.b	$01
00098BE5 E102                       	smpsAlterNote       $02
00098BE7 01                         	dc.b	$01
00098BE8 E100                       	smpsAlterNote       $00
00098BEA 01                         	dc.b	$01
00098BEB E1FF                       	smpsAlterNote       $FF
00098BED 01                         	dc.b	$01
00098BEE ECF5                       	smpsPSGAlterVol     $F5
00098BF0 9B06                       	dc.b	nD2, $06
00098BF2 EC04                       	smpsPSGAlterVol     $04
00098BF4 E701                       	dc.b	smpsNoAttack, $01
00098BF6 EC07                       	smpsPSGAlterVol     $07
00098BF8 8003                       	dc.b	nRst, $03
00098BFA ECF5                       	smpsPSGAlterVol     $F5
00098BFC 9B07                       	dc.b	nD2, $07
00098BFE EC0B                       	smpsPSGAlterVol     $0B
00098C00 8007                       	dc.b	nRst, $07
00098C02 E105                       	smpsAlterNote       $05
00098C04 0101                       	dc.b	$01, $01
00098C06 E1FF                       	smpsAlterNote       $FF
00098C08 01                         	dc.b	$01
00098C09 E1FC                       	smpsAlterNote       $FC
00098C0B 01                         	dc.b	$01
00098C0C E1FF                       	smpsAlterNote       $FF
00098C0E ECF5                       	smpsPSGAlterVol     $F5
00098C10 9B06                       	dc.b	nD2, $06
00098C12 EC0B                       	smpsPSGAlterVol     $0B
00098C14 8004                       	dc.b	nRst, $04
00098C16 ECF5                       	smpsPSGAlterVol     $F5
00098C18 9B06                       	dc.b	nD2, $06
00098C1A EC04                       	smpsPSGAlterVol     $04
00098C1C E701                       	dc.b	smpsNoAttack, $01
00098C1E EC07                       	smpsPSGAlterVol     $07
00098C20 8006                       	dc.b	nRst, $06
00098C22 E102                       	smpsAlterNote       $02
00098C24 01                         	dc.b	$01
00098C25 E106                       	smpsAlterNote       $06
00098C27 01                         	dc.b	$01
00098C28 E102                       	smpsAlterNote       $02
00098C2A 01                         	dc.b	$01
00098C2B E1FC                       	smpsAlterNote       $FC
00098C2D 01                         	dc.b	$01
00098C2E E1FF                       	smpsAlterNote       $FF
00098C30 ECF5                       	smpsPSGAlterVol     $F5
00098C32 9B06                       	dc.b	nD2, $06
00098C34 EC04                       	smpsPSGAlterVol     $04
00098C36 E701                       	dc.b	smpsNoAttack, $01
00098C38 EC07                       	smpsPSGAlterVol     $07
00098C3A 8003                       	dc.b	nRst, $03
00098C3C ECF5                       	smpsPSGAlterVol     $F5
00098C3E 9B07                       	dc.b	nD2, $07
00098C40 EC0B                       	smpsPSGAlterVol     $0B
00098C42 8006                       	dc.b	nRst, $06
00098C44 E102                       	smpsAlterNote       $02
00098C46 01                         	dc.b	$01
00098C47 E105                       	smpsAlterNote       $05
00098C49 0101                       	dc.b	$01, $01
00098C4B E1FF                       	smpsAlterNote       $FF
00098C4D 01                         	dc.b	$01
00098C4E ECF5                       	smpsPSGAlterVol     $F5
00098C50 9B07                       	dc.b	nD2, $07
00098C52 EC0B                       	smpsPSGAlterVol     $0B
00098C54 8004                       	dc.b	nRst, $04
00098C56 ECF5                       	smpsPSGAlterVol     $F5
00098C58 9B06                       	dc.b	nD2, $06
00098C5A EC04                       	smpsPSGAlterVol     $04
00098C5C E701                       	dc.b	smpsNoAttack, $01
00098C5E EC07                       	smpsPSGAlterVol     $07
00098C60 8006                       	dc.b	nRst, $06
00098C62 E105                       	smpsAlterNote       $05
00098C64 0101                       	dc.b	$01, $01
00098C66 E102                       	smpsAlterNote       $02
00098C68 01                         	dc.b	$01
00098C69 E1FC                       	smpsAlterNote       $FC
00098C6B 01                         	dc.b	$01
00098C6C E1FF                       	smpsAlterNote       $FF
00098C6E ECF5                       	smpsPSGAlterVol     $F5
00098C70 9B06                       	dc.b	nD2, $06
00098C72 EC04                       	smpsPSGAlterVol     $04
00098C74 E701                       	dc.b	smpsNoAttack, $01
00098C76 EC07                       	smpsPSGAlterVol     $07
00098C78 8003                       	dc.b	nRst, $03
00098C7A ECF5                       	smpsPSGAlterVol     $F5
00098C7C 9B06                       	dc.b	nD2, $06
00098C7E EC04                       	smpsPSGAlterVol     $04
00098C80 E701                       	dc.b	smpsNoAttack, $01
00098C82 EC07                       	smpsPSGAlterVol     $07
00098C84 8006                       	dc.b	nRst, $06
00098C86 E102                       	smpsAlterNote       $02
00098C88 01                         	dc.b	$01
00098C89 E106                       	smpsAlterNote       $06
00098C8B 01                         	dc.b	$01
00098C8C E102                       	smpsAlterNote       $02
00098C8E 01                         	dc.b	$01
00098C8F E1FF                       	smpsAlterNote       $FF
00098C91 01                         	dc.b	$01
00098C92 ECF5                       	smpsPSGAlterVol     $F5
00098C94 9B06                       	dc.b	nD2, $06
00098C96 EC04                       	smpsPSGAlterVol     $04
00098C98 E701                       	dc.b	smpsNoAttack, $01
00098C9A EC07                       	smpsPSGAlterVol     $07
00098C9C 8003                       	dc.b	nRst, $03
00098C9E ECF5                       	smpsPSGAlterVol     $F5
00098CA0 9B07                       	dc.b	nD2, $07
00098CA2 EC0B                       	smpsPSGAlterVol     $0B
00098CA4 8007                       	dc.b	nRst, $07
00098CA6 E107                       	smpsAlterNote       $07
00098CA8 0101                       	dc.b	$01, $01
00098CAA E1FE                       	smpsAlterNote       $FE
00098CAC 01                         	dc.b	$01
00098CAD E1FA                       	smpsAlterNote       $FA
00098CAF 0101                       	dc.b	$01, $01
00098CB1 E103                       	smpsAlterNote       $03
00098CB3 01                         	dc.b	$01
00098CB4 E109                       	smpsAlterNote       $09
00098CB6 01                         	dc.b	$01
00098CB7 E107                       	smpsAlterNote       $07
00098CB9 01                         	dc.b	$01
00098CBA E1FE                       	smpsAlterNote       $FE
00098CBC 01                         	dc.b	$01
00098CBD E108                       	smpsAlterNote       $08
00098CBF 01                         	dc.b	$01
00098CC0 E1FD                       	smpsAlterNote       $FD
00098CC2 ECF5                       	smpsPSGAlterVol     $F5
00098CC4 940E                       	dc.b	nG1, $0E
00098CC6 E103                       	smpsAlterNote       $03
00098CC8 EC0B                       	smpsPSGAlterVol     $0B
00098CCA 8001 01                    	dc.b	nRst, $01, $01
00098CCD E1FD                       	smpsAlterNote       $FD
00098CCF 01                         	dc.b	$01
00098CD0 E1FB                       	smpsAlterNote       $FB
00098CD2 0101                       	dc.b	$01, $01
00098CD4 E100                       	smpsAlterNote       $00
00098CD6 01                         	dc.b	$01
00098CD7 E103                       	smpsAlterNote       $03
00098CD9 01                         	dc.b	$01
00098CDA E100                       	smpsAlterNote       $00
00098CDC 01                         	dc.b	$01
00098CDD E1FD                       	smpsAlterNote       $FD
00098CDF 01                         	dc.b	$01
00098CE0 E1FA                       	smpsAlterNote       $FA
00098CE2 01                         	dc.b	$01
00098CE3 E1FD                       	smpsAlterNote       $FD
00098CE5 01                         	dc.b	$01
00098CE6 E103                       	smpsAlterNote       $03
00098CE8 0101                       	dc.b	$01, $01
00098CEA E100                       	smpsAlterNote       $00
00098CEC 01                         	dc.b	$01
00098CED E1FE                       	smpsAlterNote       $FE
00098CEF ECF5                       	smpsPSGAlterVol     $F5
00098CF1 960D                       	dc.b	nA1, $0D
00098CF3 E104                       	smpsAlterNote       $04
00098CF5 EC0B                       	smpsPSGAlterVol     $0B
00098CF7 8001 01                    	dc.b	nRst, $01, $01
00098CFA E101                       	smpsAlterNote       $01
00098CFC 01                         	dc.b	$01
00098CFD E1FB                       	smpsAlterNote       $FB
00098CFF 0101                       	dc.b	$01, $01
00098D01 E1FE                       	smpsAlterNote       $FE
00098D03 01                         	dc.b	$01
00098D04 E104                       	smpsAlterNote       $04
00098D06 0101                       	dc.b	$01, $01
00098D08 E1FE                       	smpsAlterNote       $FE
00098D0A 01                         	dc.b	$01
00098D0B E1FB                       	smpsAlterNote       $FB
00098D0D 0101                       	dc.b	$01, $01
00098D0F E101                       	smpsAlterNote       $01
00098D11 01                         	dc.b	$01
00098D12 E104                       	smpsAlterNote       $04
00098D14 0101                       	dc.b	$01, $01
00098D16 E1FE                       	smpsAlterNote       $FE
00098D18 ECF5                       	smpsPSGAlterVol     $F5
00098D1A 970D                       	dc.b	nBb1, $0D
00098D1C E101                       	smpsAlterNote       $01
00098D1E EC04                       	smpsPSGAlterVol     $04
00098D20 E701                       	dc.b	smpsNoAttack, $01
00098D22 EC07                       	smpsPSGAlterVol     $07
00098D24 E104                       	smpsAlterNote       $04
00098D26 8001                       	dc.b	nRst, $01
00098D28 E103                       	smpsAlterNote       $03
00098D2A 01                         	dc.b	$01
00098D2B E1FE                       	smpsAlterNote       $FE
00098D2D 01                         	dc.b	$01
00098D2E E1FA                       	smpsAlterNote       $FA
00098D30 01                         	dc.b	$01
00098D31 E1FE                       	smpsAlterNote       $FE
00098D33 01                         	dc.b	$01
00098D34 E101                       	smpsAlterNote       $01
00098D36 01                         	dc.b	$01
00098D37 E104                       	smpsAlterNote       $04
00098D39 01                         	dc.b	$01
00098D3A E101                       	smpsAlterNote       $01
00098D3C 01                         	dc.b	$01
00098D3D E1FB                       	smpsAlterNote       $FB
00098D3F 01                         	dc.b	$01
00098D40 E1FA                       	smpsAlterNote       $FA
00098D42 01                         	dc.b	$01
00098D43 E1FE                       	smpsAlterNote       $FE
00098D45 01                         	dc.b	$01
00098D46 E103                       	smpsAlterNote       $03
00098D48 0101                       	dc.b	$01, $01
00098D4A E101                       	smpsAlterNote       $01
00098D4C 01                         	dc.b	$01
00098D4D E1FE                       	smpsAlterNote       $FE
00098D4F ECF5                       	smpsPSGAlterVol     $F5
00098D51 990D                       	dc.b	nC2, $0D
00098D53 E104                       	smpsAlterNote       $04
00098D55 EC0B                       	smpsPSGAlterVol     $0B
00098D57 8001 01                    	dc.b	nRst, $01, $01
00098D5A E102                       	smpsAlterNote       $02
00098D5C 01                         	dc.b	$01
00098D5D E1FC                       	smpsAlterNote       $FC
00098D5F 0101                       	dc.b	$01, $01
00098D61 E102                       	smpsAlterNote       $02
00098D63 01                         	dc.b	$01
00098D64 E104                       	smpsAlterNote       $04
00098D66 01                         	dc.b	$01
00098D67 E1FF                       	smpsAlterNote       $FF
00098D69 ECF5                       	smpsPSGAlterVol     $F5
00098D6B 9B06                       	dc.b	nD2, $06
00098D6D EC04                       	smpsPSGAlterVol     $04
00098D6F E701                       	dc.b	smpsNoAttack, $01
00098D71 EC07                       	smpsPSGAlterVol     $07
00098D73 8003                       	dc.b	nRst, $03
00098D75 ECF5                       	smpsPSGAlterVol     $F5
00098D77 9B07                       	dc.b	nD2, $07
00098D79 EC0B                       	smpsPSGAlterVol     $0B
00098D7B 8006                       	dc.b	nRst, $06
00098D7D E101                       	smpsAlterNote       $01
00098D7F 01                         	dc.b	$01
00098D80 E104                       	smpsAlterNote       $04
00098D82 0101                       	dc.b	$01, $01
00098D84 E1FE                       	smpsAlterNote       $FE
00098D86 01                         	dc.b	$01
00098D87 E1FC                       	smpsAlterNote       $FC
00098D89 01                         	dc.b	$01
00098D8A E1FE                       	smpsAlterNote       $FE
00098D8C ECF5                       	smpsPSGAlterVol     $F5
00098D8E 9C06                       	dc.b	nEb2, $06
00098D90 EC0B                       	smpsPSGAlterVol     $0B
00098D92 8004                       	dc.b	nRst, $04
00098D94 ECF5                       	smpsPSGAlterVol     $F5
00098D96 9C06                       	dc.b	nEb2, $06
00098D98 EC04                       	smpsPSGAlterVol     $04
00098D9A E701                       	dc.b	smpsNoAttack, $01
00098D9C EC07                       	smpsPSGAlterVol     $07
00098D9E 8006                       	dc.b	nRst, $06
00098DA0 E105                       	smpsAlterNote       $05
00098DA2 01                         	dc.b	$01
00098DA3 E106                       	smpsAlterNote       $06
00098DA5 01                         	dc.b	$01
00098DA6 E102                       	smpsAlterNote       $02
00098DA8 01                         	dc.b	$01
00098DA9 E1FB                       	smpsAlterNote       $FB
00098DAB 01                         	dc.b	$01
00098DAC E1FF                       	smpsAlterNote       $FF
00098DAE ECF5                       	smpsPSGAlterVol     $F5
00098DB0 9B06                       	dc.b	nD2, $06
00098DB2 EC04                       	smpsPSGAlterVol     $04
00098DB4 E701                       	dc.b	smpsNoAttack, $01
00098DB6 EC07                       	smpsPSGAlterVol     $07
00098DB8 8003                       	dc.b	nRst, $03
00098DBA ECF5                       	smpsPSGAlterVol     $F5
00098DBC 9B06                       	dc.b	nD2, $06
00098DBE EC04                       	smpsPSGAlterVol     $04
00098DC0 E701                       	dc.b	smpsNoAttack, $01
00098DC2 EC07                       	smpsPSGAlterVol     $07
00098DC4 8006                       	dc.b	nRst, $06
00098DC6 E101                       	smpsAlterNote       $01
00098DC8 01                         	dc.b	$01
00098DC9 E105                       	smpsAlterNote       $05
00098DCB 01                         	dc.b	$01
00098DCC E104                       	smpsAlterNote       $04
00098DCE 01                         	dc.b	$01
00098DCF E1FE                       	smpsAlterNote       $FE
00098DD1 01                         	dc.b	$01
00098DD2 ECF5                       	smpsPSGAlterVol     $F5
00098DD4 9C07                       	dc.b	nEb2, $07
00098DD6 EC0B                       	smpsPSGAlterVol     $0B
00098DD8 8004                       	dc.b	nRst, $04
00098DDA ECF5                       	smpsPSGAlterVol     $F5
00098DDC 9C06                       	dc.b	nEb2, $06
00098DDE EC0B                       	smpsPSGAlterVol     $0B
00098DE0 8007                       	dc.b	nRst, $07
00098DE2 E105                       	smpsAlterNote       $05
00098DE4 0101                       	dc.b	$01, $01
00098DE6 E102                       	smpsAlterNote       $02
00098DE8 01                         	dc.b	$01
00098DE9 E1FB                       	smpsAlterNote       $FB
00098DEB 01                         	dc.b	$01
00098DEC E1FF                       	smpsAlterNote       $FF
00098DEE ECF5                       	smpsPSGAlterVol     $F5
00098DF0 9B06                       	dc.b	nD2, $06
00098DF2 EC04                       	smpsPSGAlterVol     $04
00098DF4 E701                       	dc.b	smpsNoAttack, $01
00098DF6 EC07                       	smpsPSGAlterVol     $07
00098DF8 8003                       	dc.b	nRst, $03
00098DFA ECF5                       	smpsPSGAlterVol     $F5
00098DFC 9B06                       	dc.b	nD2, $06
00098DFE EC04                       	smpsPSGAlterVol     $04
00098E00 E701                       	dc.b	smpsNoAttack, $01
00098E02 EC07                       	smpsPSGAlterVol     $07
00098E04 8006                       	dc.b	nRst, $06
00098E06 E101                       	smpsAlterNote       $01
00098E08 01                         	dc.b	$01
00098E09 E105                       	smpsAlterNote       $05
00098E0B 01                         	dc.b	$01
00098E0C E101                       	smpsAlterNote       $01
00098E0E 01                         	dc.b	$01
00098E0F E1FC                       	smpsAlterNote       $FC
00098E11 01                         	dc.b	$01
00098E12 E1FE                       	smpsAlterNote       $FE
00098E14 ECF5                       	smpsPSGAlterVol     $F5
00098E16 9C06                       	dc.b	nEb2, $06
00098E18 EC04                       	smpsPSGAlterVol     $04
00098E1A E701                       	dc.b	smpsNoAttack, $01
00098E1C EC07                       	smpsPSGAlterVol     $07
00098E1E 8003                       	dc.b	nRst, $03
00098E20 ECF5                       	smpsPSGAlterVol     $F5
00098E22 9C07                       	dc.b	nEb2, $07
00098E24 EC0B                       	smpsPSGAlterVol     $0B
00098E26 8006                       	dc.b	nRst, $06
00098E28 E102                       	smpsAlterNote       $02
00098E2A 01                         	dc.b	$01
00098E2B E105                       	smpsAlterNote       $05
00098E2D 0101                       	dc.b	$01, $01
00098E2F E1FF                       	smpsAlterNote       $FF
00098E31 01                         	dc.b	$01
00098E32 ECF5                       	smpsPSGAlterVol     $F5
00098E34 9B07                       	dc.b	nD2, $07
00098E36 EC0B                       	smpsPSGAlterVol     $0B
00098E38 8004                       	dc.b	nRst, $04
00098E3A ECF5                       	smpsPSGAlterVol     $F5
00098E3C 9B06                       	dc.b	nD2, $06
00098E3E EC04                       	smpsPSGAlterVol     $04
00098E40 E701                       	dc.b	smpsNoAttack, $01
00098E42 EC07                       	smpsPSGAlterVol     $07
00098E44 8002                       	dc.b	nRst, $02
00098E46 E1FC                       	smpsAlterNote       $FC
00098E48 ECF5                       	smpsPSGAlterVol     $F5
00098E4A 9006                       	dc.b	nEb1, $06
00098E4C EC04                       	smpsPSGAlterVol     $04
00098E4E E701                       	dc.b	smpsNoAttack, $01
00098E50 ECFC                       	smpsPSGAlterVol     $FC
00098E52 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098E56 EC04                       	smpsPSGAlterVol     $04
00098E58 E701                       	dc.b	smpsNoAttack, $01
00098E5A E1FD                       	smpsAlterNote       $FD
00098E5C ECFC                       	smpsPSGAlterVol     $FC
00098E5E 9402                       	dc.b	nG1, $02
00098E60 EC04                       	smpsPSGAlterVol     $04
00098E62 E701                       	dc.b	smpsNoAttack, $01
00098E64 E1FE                       	smpsAlterNote       $FE
00098E66 ECFC                       	smpsPSGAlterVol     $FC
00098E68 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098E6C EC04                       	smpsPSGAlterVol     $04
00098E6E E701                       	dc.b	smpsNoAttack, $01
00098E70 EC07                       	smpsPSGAlterVol     $07
00098E72 8008                       	dc.b	nRst, $08
00098E74 F6F4 F3                    	smpsJump            music84_Jump06
00098E77                            
00098E77                            ; PSG3 Data
00098E77                            music84_PSG3:
00098E77 F500                       	smpsPSGvoice        $00
00098E79 E1FF                       	smpsAlterNote       $FF
00098E7B EC0F                       	smpsPSGAlterVol     $0F
00098E7D 803A                       	dc.b	nRst, $3A
00098E7F                            
00098E7F                            music84_Jump05:
00098E7F 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098E8B 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098E95 F6FF E8                    	smpsJump            music84_Jump05
00098E98                            
00098E98                            ; DAC Data
00098E98                            music84_DAC:
00098E98 E0C0                       	smpsPan             panCenter, $00
00098E9A 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098EA6 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00098EB2 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00098EBE 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098ECA 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098ED6 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00098EE2 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098EEE 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00098EFA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098F06 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00098F12 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098F1E 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00098F2A 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098F36 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098F42 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00098F4E 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00098F5A 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00098F66 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00098F72 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00098F7E 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098F8A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098F96 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098FA2 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00098FAE 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098FBA 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00098FC6 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00098FD2 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00098FDE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098FEA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098FF6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099002 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009900E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009901A 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00099026 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00099032 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0009903E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009904A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00099056 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00099062 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009906E 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0009907A 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00099086 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00099092 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009909E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000990AA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000990B6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000990C2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000990CE 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
000990DA 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
000990E6 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000990F2 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000990FE 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009910A 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00099116 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00099122 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009912E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0009913A 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00099146 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00099152 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009915E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009916A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00099176 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00099182 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0009918E 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0009919A 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000991A6 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000991B2 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
000991BE 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
000991CA 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
000991D6 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000991E2 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
000991EE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000991FA 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00099206 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00099212 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009921E E0C0                       	smpsPan             panCenter, $00
00099220 F2                         	smpsStop
00099221                            
00099221                            music84_Voices:
00099221                            ;	Voice $00
00099221                            ;	$3D
00099221                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00099221                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00099221                            	smpsVcAlgorithm     $05
00099221                            	smpsVcFeedback      $07
00099221                            	smpsVcUnusedBits    $00
00099221                            	smpsVcDetune        $05, $04, $03, $04
00099221                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099221                            	smpsVcRateScale     $00, $00, $00, $00
00099221                            	smpsVcAttackRate    $11, $11, $11, $11
00099221                            	smpsVcAmpMod        $00, $00, $00, $00
00099221                            	smpsVcDecayRate1    $00, $00, $00, $0A
00099221                            	smpsVcDecayRate2    $00, $00, $00, $0B
00099221                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099221                            	smpsVcReleaseRate   $08, $08, $08, $07
00099221 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0009923A                            
0009923A                            ;	Voice $01
0009923A                            ;	$04
0009923A                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0009923A                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0009923A                            	smpsVcAlgorithm     $04
0009923A                            	smpsVcFeedback      $00
0009923A                            	smpsVcUnusedBits    $00
0009923A                            	smpsVcDetune        $04, $03, $04, $05
0009923A                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0009923A                            	smpsVcRateScale     $00, $01, $00, $01
0009923A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009923A                            	smpsVcAmpMod        $00, $00, $00, $00
0009923A                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0009923A                            	smpsVcDecayRate2    $05, $00, $05, $00
0009923A                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0009923A                            	smpsVcReleaseRate   $06, $06, $06, $06
0009923A 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00099253                            
00099253                            ;	Voice $02
00099253                            ;	$30
00099253                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00099253                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00099253                            	smpsVcAlgorithm     $00
00099253                            	smpsVcFeedback      $06
00099253                            	smpsVcUnusedBits    $00
00099253                            	smpsVcDetune        $04, $02, $00, $06
00099253                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00099253                            	smpsVcRateScale     $00, $00, $00, $00
00099253                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00099253                            	smpsVcAmpMod        $00, $00, $00, $00
00099253                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00099253                            	smpsVcDecayRate2    $01, $01, $01, $01
00099253                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00099253                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00099253 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009926C                            
0009926C                            ;	Voice $03
0009926C                            ;	$3A
0009926C                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009926C                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009926C                            	smpsVcAlgorithm     $02
0009926C                            	smpsVcFeedback      $07
0009926C                            	smpsVcUnusedBits    $00
0009926C                            	smpsVcDetune        $04, $06, $02, $00
0009926C                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009926C                            	smpsVcRateScale     $00, $00, $00, $00
0009926C                            	smpsVcAttackRate    $18, $19, $14, $14
0009926C                            	smpsVcAmpMod        $00, $00, $00, $00
0009926C                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009926C                            	smpsVcDecayRate2    $00, $00, $00, $00
0009926C                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009926C                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009926C 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00099285                            
00099285                            ;	Voice $04
00099285                            ;	$3C
00099285                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00099285                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00099285                            	smpsVcAlgorithm     $04
00099285                            	smpsVcFeedback      $07
00099285                            	smpsVcUnusedBits    $00
00099285                            	smpsVcDetune        $07, $00, $00, $03
00099285                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00099285                            	smpsVcRateScale     $00, $00, $00, $00
00099285                            	smpsVcAttackRate    $10, $1F, $10, $1F
00099285                            	smpsVcAmpMod        $00, $00, $00, $00
00099285                            	smpsVcDecayRate1    $00, $00, $00, $00
00099285                            	smpsVcDecayRate2    $00, $00, $00, $00
00099285                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099285                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00099285 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0009929E                            
0009929E                            ;	Voice $05
0009929E                            ;	$38
0009929E                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0009929E                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0009929E                            	smpsVcAlgorithm     $00
0009929E                            	smpsVcFeedback      $07
0009929E                            	smpsVcUnusedBits    $00
0009929E                            	smpsVcDetune        $04, $06, $02, $00
0009929E                            	smpsVcCoarseFreq    $01, $01, $01, $00
0009929E                            	smpsVcRateScale     $00, $00, $00, $00
0009929E                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0009929E                            	smpsVcAmpMod        $00, $00, $00, $00
0009929E                            	smpsVcDecayRate1    $00, $03, $00, $17
0009929E                            	smpsVcDecayRate2    $00, $08, $08, $0B
0009929E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0009929E                            	smpsVcReleaseRate   $08, $05, $05, $05
0009929E 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000992B7                            
000992B7                            
000992B8 00                         		even
000992B8                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D4C8                            		even
0009D4C8                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A1020 00                         		even
000A1020                            Music87:	include	sound\music87.asm; Invincibility
000A1020                            triple_Header:
000A1020 =00000001                  smpsHeaderStartSong = 1
000A1020 0000                       	smpsHeaderVoice     triple_Voices
000A1022 0501                       	smpsHeaderChan      $05, $01
000A1024 0200                       	smpsHeaderTempo     $02, $00
000A1026                            
000A102A 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A102E 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A1032 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A1036 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A103A 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A1040                            
000A1040                            ; DAC Data
000A1040                            triple_DAC:
000A1040 E0C0                       	smpsPan             panCenter, $00
000A1042 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A1048                            
000A1048                            triple_Loop01:
000A1048 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A104B                            
000A104B                            triple_Loop00:
000A104B 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A1057 06                         	dc.b	$06
000A1058 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A105D 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A1069 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A1070 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A1075 0303 1B                    	dc.b	$03, $03, $1B
000A1078 E0C0                       	smpsPan             panCenter, $00
000A107A F6FF C4                    	smpsJump triple_DAC
000A107D                            
000A107D                            ; FM1 Data
000A107D                            triple_FM1:
000A107D E0C0                       	smpsPan             panCenter, $00
000A1081 8018                       	dc.b	nRst, $18
000A1083                            
000A1083                            triple_Loop0B:
000A1083 AC06 B8                    	dc.b	nG3, $06, nG4
000A1086 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A108B                            
000A108B                            triple_Loop0C:
000A108B A7B3                       	dc.b	nD3, nD4
000A108D F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A1092                            
000A1092                            triple_Loop0D:
000A1092 A9B5                       	dc.b	nE3, nE4
000A1094 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A1099 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A10A1 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A10A6 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A10B2 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A10BE AD                         	dc.b	nAb3
000A10BF F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A10C4 8018                       	dc.b	nRst, $18
000A10C6 E0C0                       	smpsPan             panCenter, $00
000A10CA F6FF B1                    	smpsJump triple_FM1
000A10CD                            
000A10CD                            ; FM2 Data
000A10CD                            triple_FM2:
000A10CD E0C0                       	smpsPan             panCenter, $00
000A10D1 8018                       	dc.b	nRst, $18
000A10D3                            
000A10D3                            triple_Loop07:
000A10D3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A10DF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A10EB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A10F0 8003                       	dc.b	nRst, $03
000A10F2                            
000A10F2                            triple_Loop08:
000A10F2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A10F8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A10FD B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1103                            
000A1103                            triple_Loop09:
000A1103 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A110F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A111B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A1120 8003                       	dc.b	nRst, $03
000A1122                            
000A1122                            triple_Loop0A:
000A1122 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1128 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A112D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1133 E0C0                       	smpsPan             panCenter, $00
000A1137 F6FF 94                    	smpsJump triple_FM2
000A113A                            
000A113A                            ; FM3 Data
000A113A                            triple_FM3:
000A113A E0C0                       	smpsPan             panCenter, $00
000A113E 8018                       	dc.b	nRst, $18
000A1140                            
000A1140                            triple_Loop06:
000A1140 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A1147 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A114C 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A1158 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A1164 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A1167 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A116C 8018                       	dc.b	nRst, $18
000A116E E0C0                       	smpsPan             panCenter, $00
000A1172 F6FF C6                    	smpsJump triple_FM3
000A1175                            
000A1175                            ; FM4 Data
000A1175                            triple_FM4:
000A1175 E103                       	smpsAlterNote       $03
000A1179 E0C0                       	smpsPan             panCenter, $00
000A117B 8018                       	dc.b	nRst, $18
000A117D                            
000A117D                            triple_Loop02:
000A117D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1189 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1195 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A119A 8003                       	dc.b	nRst, $03
000A119C                            
000A119C                            triple_Loop03:
000A119C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A11A2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A11A7 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A11AD                            
000A11AD                            triple_Loop04:
000A11AD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A11B9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A11C5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A11CA 8003                       	dc.b	nRst, $03
000A11CC                            
000A11CC                            triple_Loop05:
000A11CC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A11D2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A11D7 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A11DD E0C0                       	smpsPan             panCenter, $00
000A11DF F6FF 94                    	smpsJump triple_FM4
000A11E2                            
000A11E2                            ; PSG1 Data
000A11E2                            triple_PSG1:
000A11E2 8018                       	dc.b	nRst, $18
000A11E4                            
000A11E4                            triple_Loop0E:
000A11E4 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A11F0 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A11FC 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1208 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A120C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1211 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A121D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1229 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1235 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1239                            
000A1239                            triple_Loop0F:
000A1239 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A123F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A1244 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A124A                            
000A124A                            triple_Loop10:
000A124A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1256 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1262 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A126E 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A1272 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A1277 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1283 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A128F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A129B 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A129F                            
000A129F                            triple_Loop11:
000A129F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A12A5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A12AA 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A12B0 F500                       	smpsPSGvoice        $00
000A12B2 F6FF 2E                    	smpsJump triple_PSG1
000A12B5                            
000A12B5                            triple_Voices:
000A12B5                            ;	Voice $00
000A12B5                            ;	$3A
000A12B5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A12B5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A12B5                            	smpsVcAlgorithm     $02
000A12B5                            	smpsVcFeedback      $07
000A12B5                            	smpsVcUnusedBits    $00
000A12B5                            	smpsVcDetune        $00, $00, $00, $00
000A12B5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A12B5                            	smpsVcRateScale     $01, $02, $02, $02
000A12B5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A12B5                            	smpsVcAmpMod        $00, $00, $00, $00
000A12B5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A12B5                            	smpsVcDecayRate2    $00, $00, $00, $00
000A12B5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A12B5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A12B5 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A12CE                            
000A12CE                            ;	Voice $01
000A12CE                            ;	$20
000A12CE                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A12CE                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A12CE                            	smpsVcAlgorithm     $00
000A12CE                            	smpsVcFeedback      $04
000A12CE                            	smpsVcUnusedBits    $00
000A12CE                            	smpsVcDetune        $00, $00, $03, $07
000A12CE                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A12CE                            	smpsVcRateScale     $03, $03, $03, $02
000A12CE                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A12CE                            	smpsVcAmpMod        $00, $00, $00, $00
000A12CE                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A12CE                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A12CE                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A12CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A12CE 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A12CE 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A12E8 00                         		even
000A12E8                            Music88:	incbin	sound\music88.bin; Extra Life
000A13D6                            		even
000A13D6                            Music89:	incbin	sound\music89.bin; Special Stage
000A529E 00                         		even
000A529E                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A5468                            		even
000A5468                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A5702                            		even
000A5702                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A59A0                            		even
000A59A0                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5BBC                            		even
000A5BBC                            Music8E:	include	sound\merry.asm ; Act Clear
000A5BBC =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000A5BBC =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000A5BBC =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000A5BBC =0000008A                  dMerryClap = dLowTimpani
000A5BBC                            
000A5BBC                            MerrysLittleLamb_Header:
000A5BBC 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000A5BBE 0603                       	smpsHeaderChan      $06, $03
000A5BC0 0100                       	smpsHeaderTempo     $01, $00
000A5BC2                            
000A5BC6 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000A5BCA 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000A5BCE 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000A5BD2 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000A5BD6 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000A5BDA 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000A5BE0 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000A5BE6 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000A5BEC                            
000A5BEC                            MerrysLittleLamb_FM1:
000A5BEC E0C0                       	smpsPan             panCenter, $00
000A5BEE 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A5BF5 E60F                       	smpsAlterVol        $0F
000A5BF7 A704                       	dc.b	nD3, $04
000A5BF9 E606                       	smpsAlterVol        $06
000A5BFB A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C00 E6FA                       	smpsAlterVol        $FA
000A5C02 A705                       	dc.b	nD3, $05
000A5C04 E606                       	smpsAlterVol        $06
000A5C06 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C0B E6FA                       	smpsAlterVol        $FA
000A5C0D A704                       	dc.b	nD3, $04
000A5C0F E606                       	smpsAlterVol        $06
000A5C11 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5C17 E6FA                       	smpsAlterVol        $FA
000A5C19 A7                         	dc.b	nD3
000A5C1A E606                       	smpsAlterVol        $06
000A5C1C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C21 E6FA                       	smpsAlterVol        $FA
000A5C23 A704                       	dc.b	nD3, $04
000A5C25 E606                       	smpsAlterVol        $06
000A5C27 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5C2D E6FA                       	smpsAlterVol        $FA
000A5C2F A7                         	dc.b	nD3
000A5C30 E606                       	smpsAlterVol        $06
000A5C32 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5C38 E6FA                       	smpsAlterVol        $FA
000A5C3A A705                       	dc.b	nD3, $05
000A5C3C E606                       	smpsAlterVol        $06
000A5C3E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5C43 E6FA                       	smpsAlterVol        $FA
000A5C45 A7                         	dc.b	nD3
000A5C46 E606                       	smpsAlterVol        $06
000A5C48 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5C4E E6FA                       	smpsAlterVol        $FA
000A5C50 A705                       	dc.b	nD3, $05
000A5C52 E606                       	smpsAlterVol        $06
000A5C54 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5C59 E6FA                       	smpsAlterVol        $FA
000A5C5B A704                       	dc.b	nD3, $04
000A5C5D E606                       	smpsAlterVol        $06
000A5C5F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C64 E6FA                       	smpsAlterVol        $FA
000A5C66 A705                       	dc.b	nD3, $05
000A5C68 E606                       	smpsAlterVol        $06
000A5C6A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C6F E6FA                       	smpsAlterVol        $FA
000A5C71 A704                       	dc.b	nD3, $04
000A5C73 E606                       	smpsAlterVol        $06
000A5C75 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C7A E6FA                       	smpsAlterVol        $FA
000A5C7C A705                       	dc.b	nD3, $05
000A5C7E E606                       	smpsAlterVol        $06
000A5C80 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C85 E6FA                       	smpsAlterVol        $FA
000A5C87 A704                       	dc.b	nD3, $04
000A5C89 E606                       	smpsAlterVol        $06
000A5C8B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5C91 E6FA                       	smpsAlterVol        $FA
000A5C93 A7                         	dc.b	nD3
000A5C94 E606                       	smpsAlterVol        $06
000A5C96 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5C9C E6FA                       	smpsAlterVol        $FA
000A5C9E A705                       	dc.b	nD3, $05
000A5CA0 E606                       	smpsAlterVol        $06
000A5CA2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5CA7 E6FA                       	smpsAlterVol        $FA
000A5CA9 A7                         	dc.b	nD3
000A5CAA E606                       	smpsAlterVol        $06
000A5CAC A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5CB2 E6FA                       	smpsAlterVol        $FA
000A5CB4 A705                       	dc.b	nD3, $05
000A5CB6 E606                       	smpsAlterVol        $06
000A5CB8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5CBD E6FA                       	smpsAlterVol        $FA
000A5CBF A704                       	dc.b	nD3, $04
000A5CC1 E606                       	smpsAlterVol        $06
000A5CC3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5CC8 E6FA                       	smpsAlterVol        $FA
000A5CCA A705                       	dc.b	nD3, $05
000A5CCC E606                       	smpsAlterVol        $06
000A5CCE A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5CD3 E6FA                       	smpsAlterVol        $FA
000A5CD5 A704                       	dc.b	nD3, $04
000A5CD7 E606                       	smpsAlterVol        $06
000A5CD9 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5CDE E6FA                       	smpsAlterVol        $FA
000A5CE0 A705                       	dc.b	nD3, $05
000A5CE2 E606                       	smpsAlterVol        $06
000A5CE4 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5CE9 E6FA                       	smpsAlterVol        $FA
000A5CEB A704                       	dc.b	nD3, $04
000A5CED E606                       	smpsAlterVol        $06
000A5CEF A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5CF5 E6FA                       	smpsAlterVol        $FA
000A5CF7 A7                         	dc.b	nD3
000A5CF8 E606                       	smpsAlterVol        $06
000A5CFA A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5CFF E6FA                       	smpsAlterVol        $FA
000A5D01 A704                       	dc.b	nD3, $04
000A5D03 E606                       	smpsAlterVol        $06
000A5D05 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5D0B E6FA                       	smpsAlterVol        $FA
000A5D0D A7                         	dc.b	nD3
000A5D0E E606                       	smpsAlterVol        $06
000A5D10 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5D16 E6FA                       	smpsAlterVol        $FA
000A5D18 A705                       	dc.b	nD3, $05
000A5D1A E606                       	smpsAlterVol        $06
000A5D1C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5D21 E6FA                       	smpsAlterVol        $FA
000A5D23 A704                       	dc.b	nD3, $04
000A5D25 E606                       	smpsAlterVol        $06
000A5D27 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5D2C E6FA                       	smpsAlterVol        $FA
000A5D2E A705                       	dc.b	nD3, $05
000A5D30 E606                       	smpsAlterVol        $06
000A5D32 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5D37 E6FA                       	smpsAlterVol        $FA
000A5D39 A704                       	dc.b	nD3, $04
000A5D3B E606                       	smpsAlterVol        $06
000A5D3D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5D42 E6FA                       	smpsAlterVol        $FA
000A5D44 A705                       	dc.b	nD3, $05
000A5D46 E606                       	smpsAlterVol        $06
000A5D48 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5D4D E6FA                       	smpsAlterVol        $FA
000A5D4F A704                       	dc.b	nD3, $04
000A5D51 E606                       	smpsAlterVol        $06
000A5D53 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A5D5A F2                         	smpsStop
000A5D5B                            
000A5D5B                            MerrysLittleLamb_FM2:
000A5D5B E0C0                       	smpsPan             panCenter, $00
000A5D5D 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A5D65 E610                       	smpsAlterVol        $10
000A5D67 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A5D70                            
000A5D70                            MerrysLittleLamb_FM3:
000A5D70                            MerrysLittleLamb_FM4:
000A5D70                            MerrysLittleLamb_FM5:
000A5D70 F2                         	smpsStop
000A5D71                            
000A5D71                            MerrysLittleLamb_PSG1:
000A5D71 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A5D79 EC02                       	smpsPSGAlterVol     $02
000A5D7B B7                         	dc.b	nFs4
000A5D7C EC03                       	smpsPSGAlterVol     $03
000A5D7E B7                         	dc.b	nFs4
000A5D7F EC03                       	smpsPSGAlterVol     $03
000A5D81 B7                         	dc.b	nFs4
000A5D82 EC03                       	smpsPSGAlterVol     $03
000A5D84 B7                         	dc.b	nFs4
000A5D85 ECF5                       	smpsPSGAlterVol     $F5
000A5D87 B7                         	dc.b	nFs4
000A5D88 EC02                       	smpsPSGAlterVol     $02
000A5D8A B7                         	dc.b	nFs4
000A5D8B EC03                       	smpsPSGAlterVol     $03
000A5D8D B7                         	dc.b	nFs4
000A5D8E EC03                       	smpsPSGAlterVol     $03
000A5D90 B7                         	dc.b	nFs4
000A5D91 ECF8                       	smpsPSGAlterVol     $F8
000A5D93 B7                         	dc.b	nFs4
000A5D94 EC02                       	smpsPSGAlterVol     $02
000A5D96 B7                         	dc.b	nFs4
000A5D97 EC03                       	smpsPSGAlterVol     $03
000A5D99 B7                         	dc.b	nFs4
000A5D9A EC03                       	smpsPSGAlterVol     $03
000A5D9C B7                         	dc.b	nFs4
000A5D9D EC03                       	smpsPSGAlterVol     $03
000A5D9F B7                         	dc.b	nFs4
000A5DA0 ECF5                       	smpsPSGAlterVol     $F5
000A5DA2 B7                         	dc.b	nFs4
000A5DA3 EC02                       	smpsPSGAlterVol     $02
000A5DA5 B7                         	dc.b	nFs4
000A5DA6 EC03                       	smpsPSGAlterVol     $03
000A5DA8 B7                         	dc.b	nFs4
000A5DA9 EC03                       	smpsPSGAlterVol     $03
000A5DAB B7                         	dc.b	nFs4
000A5DAC EC03                       	smpsPSGAlterVol     $03
000A5DAE B7                         	dc.b	nFs4
000A5DAF ECF5                       	smpsPSGAlterVol     $F5
000A5DB1 B7                         	dc.b	nFs4
000A5DB2 EC02                       	smpsPSGAlterVol     $02
000A5DB4 B7                         	dc.b	nFs4
000A5DB5 EC06                       	smpsPSGAlterVol     $06
000A5DB7 B7                         	dc.b	nFs4
000A5DB8 EC03                       	smpsPSGAlterVol     $03
000A5DBA B7                         	dc.b	nFs4
000A5DBB ECF5                       	smpsPSGAlterVol     $F5
000A5DBD B7                         	dc.b	nFs4
000A5DBE EC02                       	smpsPSGAlterVol     $02
000A5DC0 B7                         	dc.b	nFs4
000A5DC1 EC03                       	smpsPSGAlterVol     $03
000A5DC3 B7                         	dc.b	nFs4
000A5DC4 EC03                       	smpsPSGAlterVol     $03
000A5DC6 B7                         	dc.b	nFs4
000A5DC7 EC03                       	smpsPSGAlterVol     $03
000A5DC9 B7                         	dc.b	nFs4
000A5DCA ECF5                       	smpsPSGAlterVol     $F5
000A5DCC B7                         	dc.b	nFs4
000A5DCD EC02                       	smpsPSGAlterVol     $02
000A5DCF B7                         	dc.b	nFs4
000A5DD0 EC03                       	smpsPSGAlterVol     $03
000A5DD2 B7                         	dc.b	nFs4
000A5DD3 EC03                       	smpsPSGAlterVol     $03
000A5DD5 B7                         	dc.b	nFs4
000A5DD6 EC03                       	smpsPSGAlterVol     $03
000A5DD8 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A5DDC ECF7                       	smpsPSGAlterVol     $F7
000A5DDE A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A5DEA A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A5DF6 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A5E02 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A5E0E 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A5E1A F2                         	smpsStop
000A5E1B                            
000A5E1B                            MerrysLittleLamb_PSG2:
000A5E1B 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A5E22 EC02                       	smpsPSGAlterVol     $02
000A5E24 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A5E30 E101                       	smpsAlterNote       $01
000A5E32 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A5E36 E101                       	smpsAlterNote       $01
000A5E38 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5E3C E101                       	smpsAlterNote       $01
000A5E3E AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5E42 E101                       	smpsAlterNote       $01
000A5E44 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5E48 E101                       	smpsAlterNote       $01
000A5E4A AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A5E4E E101                       	smpsAlterNote       $01
000A5E50 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5E54 E101                       	smpsAlterNote       $01
000A5E56 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A5E5A E101                       	smpsAlterNote       $01
000A5E5C AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5E60 E101                       	smpsAlterNote       $01
000A5E62 AB04 80                    	dc.b	nFs3, $04, nRst
000A5E65 E101                       	smpsAlterNote       $01
000A5E67 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5E6B E101                       	smpsAlterNote       $01
000A5E6D AB04 80                    	dc.b	nFs3, $04, nRst
000A5E70 E101                       	smpsAlterNote       $01
000A5E72 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A5E78 F2                         	smpsStop
000A5E79                            
000A5E79                            MerrysLittleLamb_PSG3:
000A5E79 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A5E7F F3E7                       	smpsPSGform         $E7
000A5E81 E108                       	smpsAlterNote       $08
000A5E83 0002                       	dc.b	nMaxPSG, $02
000A5E85 EC01                       	smpsPSGAlterVol     $01
000A5E87 E108                       	smpsAlterNote       $08
000A5E89 0005                       	dc.b	nMaxPSG, $05
000A5E8B EC01                       	smpsPSGAlterVol     $01
000A5E8D E108                       	smpsAlterNote       $08
000A5E8F 0008                       	dc.b	nMaxPSG, $08
000A5E91 EC01                       	smpsPSGAlterVol     $01
000A5E93 E108                       	smpsAlterNote       $08
000A5E95 00                         	dc.b	nMaxPSG
000A5E96 EC01                       	smpsPSGAlterVol     $01
000A5E98 E108                       	smpsAlterNote       $08
000A5E9A 00                         	dc.b	nMaxPSG
000A5E9B EC01                       	smpsPSGAlterVol     $01
000A5E9D E108                       	smpsAlterNote       $08
000A5E9F 0007                       	dc.b	nMaxPSG, $07
000A5EA1 EC01                       	smpsPSGAlterVol     $01
000A5EA3 E108                       	smpsAlterNote       $08
000A5EA5 0005                       	dc.b	nMaxPSG, $05
000A5EA7 EC01                       	smpsPSGAlterVol     $01
000A5EA9 E108                       	smpsAlterNote       $08
000A5EAB 0007                       	dc.b	nMaxPSG, $07
000A5EAD EC01                       	smpsPSGAlterVol     $01
000A5EAF E108                       	smpsAlterNote       $08
000A5EB1 0004                       	dc.b	nMaxPSG, $04
000A5EB3 EC01                       	smpsPSGAlterVol     $01
000A5EB5 E108                       	smpsAlterNote       $08
000A5EB7 0007                       	dc.b	nMaxPSG, $07
000A5EB9 EC01                       	smpsPSGAlterVol     $01
000A5EBB E108                       	smpsAlterNote       $08
000A5EBD 0006                       	dc.b	nMaxPSG, $06
000A5EBF EC01                       	smpsPSGAlterVol     $01
000A5EC1 E108                       	smpsAlterNote       $08
000A5EC3 0009                       	dc.b	nMaxPSG, $09
000A5EC5 EC01                       	smpsPSGAlterVol     $01
000A5EC7 E108                       	smpsAlterNote       $08
000A5EC9 0007                       	dc.b	nMaxPSG, $07
000A5ECB EC01                       	smpsPSGAlterVol     $01
000A5ECD E108                       	smpsAlterNote       $08
000A5ECF 0001                       	dc.b	nMaxPSG, $01
000A5ED1 ECFF                       	smpsPSGAlterVol     $FF
000A5ED3 E108                       	smpsAlterNote       $08
000A5ED5 00                         	dc.b	nMaxPSG
000A5ED6 EC01                       	smpsPSGAlterVol     $01
000A5ED8 E108                       	smpsAlterNote       $08
000A5EDA 0009                       	dc.b	nMaxPSG, $09
000A5EDC EC01                       	smpsPSGAlterVol     $01
000A5EDE E108                       	smpsAlterNote       $08
000A5EE0 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A5EE7 F2                         	smpsStop
000A5EE8                            
000A5EE8                            MerrysLittleLamb_DAC:
000A5EE8 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000A5EF4 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000A5F00 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000A5F0C 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000A5F18 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000A5F24 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000A5F30 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000A5F3C 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A5F48 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A5F54 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A5F60 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000A5F6C 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A5F78 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000A5F84 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A5F90 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A5F9C 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000A5FA8 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000A5FB4 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A5FC0 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A5FCC 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000A5FD8 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A5FE4 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A5FF0 F2                         	smpsStop
000A5FF1                            
000A5FF1                            MerrysLittleLamb_Voices:
000A5FF1                            ;	Voice $00
000A5FF1                            ;	$00
000A5FF1                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A5FF1                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A5FF1                            	smpsVcAlgorithm     $00
000A5FF1                            	smpsVcFeedback      $00
000A5FF1                            	smpsVcUnusedBits    $00
000A5FF1                            	smpsVcDetune        $07, $07, $07, $07
000A5FF1                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A5FF1                            	smpsVcRateScale     $00, $00, $00, $00
000A5FF1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5FF1                            	smpsVcAmpMod        $00, $00, $00, $00
000A5FF1                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A5FF1                            	smpsVcDecayRate2    $12, $00, $00, $00
000A5FF1                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A5FF1                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A5FF1 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A600A                            
000A600A                            ;	Voice $01
000A600A                            ;	$25
000A600A                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A600A                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A600A                            	smpsVcAlgorithm     $05
000A600A                            	smpsVcFeedback      $04
000A600A                            	smpsVcUnusedBits    $00
000A600A                            	smpsVcDetune        $07, $00, $00, $00
000A600A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A600A                            	smpsVcRateScale     $00, $00, $00, $00
000A600A                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A600A                            	smpsVcAmpMod        $00, $00, $00, $00
000A600A                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A600A                            	smpsVcDecayRate2    $00, $00, $00, $00
000A600A                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A600A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A600A 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A6023                            
000A6023                            
000A6024 00                         		even
000A6024                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A6664 00                         		even
000A6664                            Music90:	incbin	sound\music90.bin ; Continue
000A69FE 00                         		even
000A69FE                            Music91:	incbin	sound\music91.bin ; Credits
000A7CCC                            		even
000A7CCC                            Music92:	incbin	sound\music92.bin ; Drowning
000A800E 00                         		even
000A800E                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A80DE                            		even
000A80DE                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A8DB4 00                         		even
000A8DB4                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A8F04 00                         		even
000A8F04                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A8F3E 00                         		even
000A8F3E                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A8F78 00                         		even
000A8F78                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A8FB2 00                         		even
000A8FB2                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A8FEC 00                         		even
000A8FEC                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A9026 00                         		even
000A9026                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A9060 00                         		even
000A9060                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A909A 00                         		even
000A909A                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A90D4 00                         		even
000A90D4                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A95C4                            		even
000A95C4                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A95C4                            GentleBreeze_Header:
000A95C4 =00000001                  smpsHeaderStartSong = 1
000A95C4 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A95C6 0603                       	smpsHeaderChan      $06, $03
000A95C8 0100                       	smpsHeaderTempo     $01, $00
000A95CA                            
000A95CE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A95D2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A95D6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A95DA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A95DE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A95E2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A95E8 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A95EE 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A95F4                            
000A95F4                            ; PSG3 Data
000A95F4                            GentleBreeze_PSG3:
000A95F4 F2                         	smpsStop
000A95F5                            
000A95F5                            ; FM1 Data
000A95F5                            GentleBreeze_FM1:
000A95F7 E0C0                       	smpsPan             panCenter, $00
000A95F9 E1FF                       	smpsAlterNote       $FF
000A95FB C410                       	dc.b	nG5, $10
000A95FD E60F                       	smpsAlterVol        $0F
000A95FF C4                         	dc.b	nG5
000A9600 E6F1                       	smpsAlterVol        $F1
000A9602 E100                       	smpsAlterNote       $00
000A9604 C2                         	dc.b	nF5
000A9605 E60F                       	smpsAlterVol        $0F
000A9607 08                         	dc.b	$08
000A9608 E6F1                       	smpsAlterVol        $F1
000A960A C010                       	dc.b	nEb5, $10
000A960C E60F                       	smpsAlterVol        $0F
000A960E C0                         	dc.b	nEb5
000A960F E6F1                       	smpsAlterVol        $F1
000A9611 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9617 E60F                       	smpsAlterVol        $0F
000A9619 C9                         	dc.b	nC6
000A961A E6F1                       	smpsAlterVol        $F1
000A961C C5                         	dc.b	nAb5
000A961D E60F                       	smpsAlterVol        $0F
000A961F 08                         	dc.b	$08
000A9620 E6F1                       	smpsAlterVol        $F1
000A9622 C010                       	dc.b	nEb5, $10
000A9624 E60F                       	smpsAlterVol        $0F
000A9626 C0                         	dc.b	nEb5
000A9627 E6F1                       	smpsAlterVol        $F1
000A9629 C208                       	dc.b	nF5, $08
000A962B E1FF                       	smpsAlterNote       $FF
000A962D C410                       	dc.b	nG5, $10
000A962F E100                       	smpsAlterNote       $00
000A9631 C5C7                       	dc.b	nAb5, nBb5
000A9633 E60F                       	smpsAlterVol        $0F
000A9635 C7                         	dc.b	nBb5
000A9636 E6F1                       	smpsAlterVol        $F1
000A9638 C5                         	dc.b	nAb5
000A9639 E60F                       	smpsAlterVol        $0F
000A963B 08                         	dc.b	$08
000A963C E6F1                       	smpsAlterVol        $F1
000A963E E1FF                       	smpsAlterNote       $FF
000A9640 C410                       	dc.b	nG5, $10
000A9642 E60F                       	smpsAlterVol        $0F
000A9644 C4                         	dc.b	nG5
000A9645 E6F1                       	smpsAlterVol        $F1
000A9647 C4                         	dc.b	nG5
000A9648 E100                       	smpsAlterNote       $00
000A964A C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A964F E60F                       	smpsAlterVol        $0F
000A9651 C2                         	dc.b	nF5
000A9652 E6F1                       	smpsAlterVol        $F1
000A9654 E1FF                       	smpsAlterNote       $FF
000A9656 C4                         	dc.b	nG5
000A9657 E60F                       	smpsAlterVol        $0F
000A9659 08                         	dc.b	$08
000A965A E6F1                       	smpsAlterVol        $F1
000A965C 10                         	dc.b	$10
000A965D E60F                       	smpsAlterVol        $0F
000A965F 38                         	dc.b	$38
000A9660 E6F1                       	smpsAlterVol        $F1
000A9662 10                         	dc.b	$10
000A9663 E60F                       	smpsAlterVol        $0F
000A9665 C4                         	dc.b	nG5
000A9666 E6F1                       	smpsAlterVol        $F1
000A9668 E100                       	smpsAlterNote       $00
000A966A C2                         	dc.b	nF5
000A966B E60F                       	smpsAlterVol        $0F
000A966D 08                         	dc.b	$08
000A966E E6F1                       	smpsAlterVol        $F1
000A9670 C010                       	dc.b	nEb5, $10
000A9672 E60F                       	smpsAlterVol        $0F
000A9674 C0                         	dc.b	nEb5
000A9675 E6F1                       	smpsAlterVol        $F1
000A9677 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A967D E60F                       	smpsAlterVol        $0F
000A967F C9                         	dc.b	nC6
000A9680 E6F1                       	smpsAlterVol        $F1
000A9682 C5                         	dc.b	nAb5
000A9683 E60F                       	smpsAlterVol        $0F
000A9685 08                         	dc.b	$08
000A9686 E6F1                       	smpsAlterVol        $F1
000A9688 C010                       	dc.b	nEb5, $10
000A968A E60F                       	smpsAlterVol        $0F
000A968C C0                         	dc.b	nEb5
000A968D E6F1                       	smpsAlterVol        $F1
000A968F C208                       	dc.b	nF5, $08
000A9691 E1FF                       	smpsAlterNote       $FF
000A9693 C410                       	dc.b	nG5, $10
000A9695 E100                       	smpsAlterNote       $00
000A9697 C5C7                       	dc.b	nAb5, nBb5
000A9699 E60F                       	smpsAlterVol        $0F
000A969B C7                         	dc.b	nBb5
000A969C E6F1                       	smpsAlterVol        $F1
000A969E C5                         	dc.b	nAb5
000A969F E60F                       	smpsAlterVol        $0F
000A96A1 08                         	dc.b	$08
000A96A2 E6F1                       	smpsAlterVol        $F1
000A96A4 E1FF                       	smpsAlterNote       $FF
000A96A6 C410                       	dc.b	nG5, $10
000A96A8 E60F                       	smpsAlterVol        $0F
000A96AA C4                         	dc.b	nG5
000A96AB E6F1                       	smpsAlterVol        $F1
000A96AD C4                         	dc.b	nG5
000A96AE E100                       	smpsAlterNote       $00
000A96B0 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A96B5 E60F                       	smpsAlterVol        $0F
000A96B7 28                         	dc.b	$28
000A96B8 E6F1                       	smpsAlterVol        $F1
000A96BA C008 10                    	dc.b	nEb5, $08, $10
000A96BD E60F                       	smpsAlterVol        $0F
000A96BF 21                         	dc.b	$21
000A96C0                            
000A96C0                            GentleBreeze_Loop12:
000A96C0 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A96C3 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A96C8 E717                       	dc.b	smpsNoAttack, $17
000A96CA E6F1                       	smpsAlterVol        $F1
000A96CC E1FF                       	smpsAlterNote       $FF
000A96CE C410                       	dc.b	nG5, $10
000A96D0 E60F                       	smpsAlterVol        $0F
000A96D2 C4                         	dc.b	nG5
000A96D3 E6F1                       	smpsAlterVol        $F1
000A96D5 E100                       	smpsAlterNote       $00
000A96D7 C2                         	dc.b	nF5
000A96D8 E60F                       	smpsAlterVol        $0F
000A96DA 08                         	dc.b	$08
000A96DB E6F1                       	smpsAlterVol        $F1
000A96DD C010                       	dc.b	nEb5, $10
000A96DF E60F                       	smpsAlterVol        $0F
000A96E1 C0                         	dc.b	nEb5
000A96E2 E6F1                       	smpsAlterVol        $F1
000A96E4 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A96EA E60F                       	smpsAlterVol        $0F
000A96EC C9                         	dc.b	nC6
000A96ED E6F1                       	smpsAlterVol        $F1
000A96EF C5                         	dc.b	nAb5
000A96F0 E60F                       	smpsAlterVol        $0F
000A96F2 08                         	dc.b	$08
000A96F3 E6F1                       	smpsAlterVol        $F1
000A96F5 C010                       	dc.b	nEb5, $10
000A96F7 E60F                       	smpsAlterVol        $0F
000A96F9 C0                         	dc.b	nEb5
000A96FA E6F1                       	smpsAlterVol        $F1
000A96FC C208                       	dc.b	nF5, $08
000A96FE E1FF                       	smpsAlterNote       $FF
000A9700 C410                       	dc.b	nG5, $10
000A9702 E100                       	smpsAlterNote       $00
000A9704 C5C7                       	dc.b	nAb5, nBb5
000A9706 E60F                       	smpsAlterVol        $0F
000A9708 C7                         	dc.b	nBb5
000A9709 E6F1                       	smpsAlterVol        $F1
000A970B C5                         	dc.b	nAb5
000A970C E60F                       	smpsAlterVol        $0F
000A970E 08                         	dc.b	$08
000A970F E6F1                       	smpsAlterVol        $F1
000A9711 E1FF                       	smpsAlterNote       $FF
000A9713 C410                       	dc.b	nG5, $10
000A9715 E60F                       	smpsAlterVol        $0F
000A9717 C4                         	dc.b	nG5
000A9718 E6F1                       	smpsAlterVol        $F1
000A971A C4                         	dc.b	nG5
000A971B E100                       	smpsAlterNote       $00
000A971D C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9722 E60F                       	smpsAlterVol        $0F
000A9724 C2                         	dc.b	nF5
000A9725 E6F1                       	smpsAlterVol        $F1
000A9727 E1FF                       	smpsAlterNote       $FF
000A9729 C4                         	dc.b	nG5
000A972A E60F                       	smpsAlterVol        $0F
000A972C 08                         	dc.b	$08
000A972D E6F1                       	smpsAlterVol        $F1
000A972F 10                         	dc.b	$10
000A9730 E60F                       	smpsAlterVol        $0F
000A9732 38                         	dc.b	$38
000A9733 E6F1                       	smpsAlterVol        $F1
000A9735 10                         	dc.b	$10
000A9736 E60F                       	smpsAlterVol        $0F
000A9738 C4                         	dc.b	nG5
000A9739 E6F1                       	smpsAlterVol        $F1
000A973B E100                       	smpsAlterNote       $00
000A973D C2                         	dc.b	nF5
000A973E E60F                       	smpsAlterVol        $0F
000A9740 08                         	dc.b	$08
000A9741 E6F1                       	smpsAlterVol        $F1
000A9743 C010                       	dc.b	nEb5, $10
000A9745 E60F                       	smpsAlterVol        $0F
000A9747 C0                         	dc.b	nEb5
000A9748 E6F1                       	smpsAlterVol        $F1
000A974A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9750 E60F                       	smpsAlterVol        $0F
000A9752 C9                         	dc.b	nC6
000A9753 E6F1                       	smpsAlterVol        $F1
000A9755 C5                         	dc.b	nAb5
000A9756 E60F                       	smpsAlterVol        $0F
000A9758 08                         	dc.b	$08
000A9759 E6F1                       	smpsAlterVol        $F1
000A975B C010                       	dc.b	nEb5, $10
000A975D E60F                       	smpsAlterVol        $0F
000A975F C0                         	dc.b	nEb5
000A9760 E6F1                       	smpsAlterVol        $F1
000A9762 C208                       	dc.b	nF5, $08
000A9764 E1FF                       	smpsAlterNote       $FF
000A9766 C410                       	dc.b	nG5, $10
000A9768 E100                       	smpsAlterNote       $00
000A976A C5C7                       	dc.b	nAb5, nBb5
000A976C E60F                       	smpsAlterVol        $0F
000A976E C7                         	dc.b	nBb5
000A976F E6F1                       	smpsAlterVol        $F1
000A9771 C5                         	dc.b	nAb5
000A9772 E60F                       	smpsAlterVol        $0F
000A9774 08                         	dc.b	$08
000A9775 E6F1                       	smpsAlterVol        $F1
000A9777 E1FF                       	smpsAlterNote       $FF
000A9779 C410                       	dc.b	nG5, $10
000A977B E60F                       	smpsAlterVol        $0F
000A977D C4                         	dc.b	nG5
000A977E E6F1                       	smpsAlterVol        $F1
000A9780 C4                         	dc.b	nG5
000A9781 E100                       	smpsAlterNote       $00
000A9783 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9788 E60F                       	smpsAlterVol        $0F
000A978A 28                         	dc.b	$28
000A978B E6F1                       	smpsAlterVol        $F1
000A978D C008 10                    	dc.b	nEb5, $08, $10
000A9790 E60F                       	smpsAlterVol        $0F
000A9792 21                         	dc.b	$21
000A9793 E0C0                       	smpsPan             panCenter, $00
000A9795 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9798                            
000A9798                            ; FM2 Data
000A9798                            GentleBreeze_FM2:
000A979A E60C                       	smpsAlterVol        $0C
000A979C E0C0                       	smpsPan             panCenter, $00
000A979E 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A97AA A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A97B6 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A97C2 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A97CE 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A97DA A039                       	dc.b	nG2, $39
000A97DC                            
000A97DC                            GentleBreeze_Jump04:
000A97DC E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A97DF                            
000A97DF                            GentleBreeze_Loop11:
000A97DF A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A97EB A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A97F7 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A9803 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A980F A3                         	dc.b	nBb2
000A9810 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A9815 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9821 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A982D 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9839 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9845 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9851 A039                       	dc.b	nG2, $39
000A9853 E0C0                       	smpsPan             panCenter, $00
000A9855 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9858                            
000A9858                            ; FM3 Data
000A9858                            GentleBreeze_FM3:
000A985A E0C0                       	smpsPan             panCenter, $00
000A985C 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A9864 E616                       	smpsAlterVol        $16
000A9866 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A986B                            
000A986B                            GentleBreeze_Loop0F:
000A986B C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A986F E1FF                       	smpsAlterNote       $FF
000A9871 C4                         	dc.b	nG5
000A9872 E100                       	smpsAlterNote       $00
000A9874 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9879 E608                       	smpsAlterVol        $08
000A987B C080 08                    	dc.b	nEb5, nRst, $08
000A987E E6F8                       	smpsAlterVol        $F8
000A9880 C7                         	dc.b	nBb5
000A9881 E1FF                       	smpsAlterNote       $FF
000A9883 C4                         	dc.b	nG5
000A9884 E100                       	smpsAlterNote       $00
000A9886 C0BB                       	dc.b	nEb5, nBb4
000A9888 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A988D C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9890 E1FF                       	smpsAlterNote       $FF
000A9892 C4                         	dc.b	nG5
000A9893 E100                       	smpsAlterNote       $00
000A9895 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A989A E608                       	smpsAlterVol        $08
000A989C C080 08                    	dc.b	nEb5, nRst, $08
000A989F E6F8                       	smpsAlterVol        $F8
000A98A1 E1FF                       	smpsAlterNote       $FF
000A98A3 C4                         	dc.b	nG5
000A98A4 E100                       	smpsAlterNote       $00
000A98A6 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A98AD E1FF                       	smpsAlterNote       $FF
000A98AF C4                         	dc.b	nG5
000A98B0 E100                       	smpsAlterNote       $00
000A98B2 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A98B7 E1FF                       	smpsAlterNote       $FF
000A98B9 C4                         	dc.b	nG5
000A98BA E100                       	smpsAlterNote       $00
000A98BC C7                         	dc.b	nBb5
000A98BD E1FF                       	smpsAlterNote       $FF
000A98BF C4                         	dc.b	nG5
000A98C0 E100                       	smpsAlterNote       $00
000A98C2 C2C0 01                    	dc.b	nF5, nEb5, $01
000A98C5                            
000A98C5                            GentleBreeze_Jump03:
000A98C5 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A98CC E6FA                       	smpsAlterVol        $FA
000A98CE F4                         	smpsModOff
000A98CF E1FF                       	smpsAlterNote       $FF
000A98D1 B850                       	dc.b	nG4, $50
000A98D3 E100                       	smpsAlterNote       $00
000A98D5 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A98E1 E1FF                       	smpsAlterNote       $FF
000A98E3 B810                       	dc.b	nG4, $10
000A98E5 E100                       	smpsAlterNote       $00
000A98E7 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A98EC E1FF                       	smpsAlterNote       $FF
000A98EE B8                         	dc.b	nG4
000A98EF E100                       	smpsAlterNote       $00
000A98F1 B610                       	dc.b	nF4, $10
000A98F3 E1FF                       	smpsAlterNote       $FF
000A98F5 B850                       	dc.b	nG4, $50
000A98F7 E100                       	smpsAlterNote       $00
000A98F9 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A9901 E1FF                       	smpsAlterNote       $FF
000A9903 AC08                       	dc.b	nG3, $08
000A9905 E100                       	smpsAlterNote       $00
000A9907 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A990C E1FF                       	smpsAlterNote       $FF
000A990E B850                       	dc.b	nG4, $50
000A9910 E100                       	smpsAlterNote       $00
000A9912 BB08                       	dc.b	nBb4, $08
000A9914 E1FF                       	smpsAlterNote       $FF
000A9916 B8                         	dc.b	nG4
000A9917 E100                       	smpsAlterNote       $00
000A9919 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A991C E1FF                       	smpsAlterNote       $FF
000A991E B810 08                    	dc.b	nG4, $10, $08
000A9921 E100                       	smpsAlterNote       $00
000A9923 B6                         	dc.b	nF4
000A9924 E1FF                       	smpsAlterNote       $FF
000A9926 B880                       	dc.b	nG4, nRst
000A9928 E100                       	smpsAlterNote       $00
000A992A BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A992D E1FF                       	smpsAlterNote       $FF
000A992F B810                       	dc.b	nG4, $10
000A9931 E100                       	smpsAlterNote       $00
000A9933 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A993A E1FF                       	smpsAlterNote       $FF
000A993C B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A994A E606                       	smpsAlterVol        $06
000A994C F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9951 E100                       	smpsAlterNote       $00
000A9953                            
000A9953                            GentleBreeze_Loop10:
000A9953 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9957 E1FF                       	smpsAlterNote       $FF
000A9959 C4                         	dc.b	nG5
000A995A E100                       	smpsAlterNote       $00
000A995C C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9961 E608                       	smpsAlterVol        $08
000A9963 C080 08                    	dc.b	nEb5, nRst, $08
000A9966 E6F8                       	smpsAlterVol        $F8
000A9968 C7                         	dc.b	nBb5
000A9969 E1FF                       	smpsAlterNote       $FF
000A996B C4                         	dc.b	nG5
000A996C E100                       	smpsAlterNote       $00
000A996E C0BB                       	dc.b	nEb5, nBb4
000A9970 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A9975 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9978 E1FF                       	smpsAlterNote       $FF
000A997A C4                         	dc.b	nG5
000A997B E100                       	smpsAlterNote       $00
000A997D C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9982 E608                       	smpsAlterVol        $08
000A9984 C080 08                    	dc.b	nEb5, nRst, $08
000A9987 E6F8                       	smpsAlterVol        $F8
000A9989 E1FF                       	smpsAlterNote       $FF
000A998B C4                         	dc.b	nG5
000A998C E100                       	smpsAlterNote       $00
000A998E C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9995 E1FF                       	smpsAlterNote       $FF
000A9997 C4                         	dc.b	nG5
000A9998 E100                       	smpsAlterNote       $00
000A999A C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A999F E1FF                       	smpsAlterNote       $FF
000A99A1 C4                         	dc.b	nG5
000A99A2 E100                       	smpsAlterNote       $00
000A99A4 C7                         	dc.b	nBb5
000A99A5 E1FF                       	smpsAlterNote       $FF
000A99A7 C4                         	dc.b	nG5
000A99A8 E100                       	smpsAlterNote       $00
000A99AA C2C0 01                    	dc.b	nF5, nEb5, $01
000A99AD E0C0                       	smpsPan             panCenter, $00
000A99AF F1                         	smpsModOn
000A99B0 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A99B3                            
000A99B3                            ; FM4 Data
000A99B3                            GentleBreeze_FM4:
000A99B5 E0C0                       	smpsPan             panCenter, $00
000A99B7 80                         	dc.b	nRst
000A99B8                            
000A99B8                            GentleBreeze_Loop0D:
000A99B8 7F                         	dc.b	$7F
000A99B9 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A99BE 77                         	dc.b	$77
000A99C1 E609                       	smpsAlterVol        $09
000A99C3 C001                       	dc.b	nEb5, $01
000A99C5                            
000A99C5                            GentleBreeze_Jump02:
000A99C5 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A99CA E607                       	smpsAlterVol        $07
000A99CC E1FF                       	smpsAlterNote       $FF
000A99CE C450                       	dc.b	nG5, $50
000A99D0 E100                       	smpsAlterNote       $00
000A99D2 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A99DE E1FF                       	smpsAlterNote       $FF
000A99E0 C410                       	dc.b	nG5, $10
000A99E2 E100                       	smpsAlterNote       $00
000A99E4 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A99E9 E1FF                       	smpsAlterNote       $FF
000A99EB C4                         	dc.b	nG5
000A99EC E100                       	smpsAlterNote       $00
000A99EE C210                       	dc.b	nF5, $10
000A99F0 E1FF                       	smpsAlterNote       $FF
000A99F2 C450                       	dc.b	nG5, $50
000A99F4 E100                       	smpsAlterNote       $00
000A99F6 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A99FE E1FF                       	smpsAlterNote       $FF
000A9A00 B808                       	dc.b	nG4, $08
000A9A02 E100                       	smpsAlterNote       $00
000A9A04 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A9A09 E1FF                       	smpsAlterNote       $FF
000A9A0B C450                       	dc.b	nG5, $50
000A9A0D E100                       	smpsAlterNote       $00
000A9A0F C708                       	dc.b	nBb5, $08
000A9A11 E1FF                       	smpsAlterNote       $FF
000A9A13 C4                         	dc.b	nG5
000A9A14 E100                       	smpsAlterNote       $00
000A9A16 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A9A19 E1FF                       	smpsAlterNote       $FF
000A9A1B C410 08                    	dc.b	nG5, $10, $08
000A9A1E E100                       	smpsAlterNote       $00
000A9A20 C2                         	dc.b	nF5
000A9A21 E1FF                       	smpsAlterNote       $FF
000A9A23 C480                       	dc.b	nG5, nRst
000A9A25 E100                       	smpsAlterNote       $00
000A9A27 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A9A2A E1FF                       	smpsAlterNote       $FF
000A9A2C C410                       	dc.b	nG5, $10
000A9A2E E100                       	smpsAlterNote       $00
000A9A30 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A9A37 E1FF                       	smpsAlterNote       $FF
000A9A39 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A9A41                            
000A9A41                            GentleBreeze_Loop0E:
000A9A41 7F                         	dc.b	$7F
000A9A42 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A9A47 77                         	dc.b	$77
000A9A48 E100                       	smpsAlterNote       $00
000A9A4A C001                       	dc.b	nEb5, $01
000A9A4C E6F9                       	smpsAlterVol        $F9
000A9A4E E0C0                       	smpsPan             panCenter, $00
000A9A50 E100                       	smpsAlterNote       $00
000A9A52 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A9A55                            
000A9A55                            ; FM5 Data
000A9A55                            GentleBreeze_FM5:
000A9A57 E0C0                       	smpsPan             panCenter, $00
000A9A59 A5                         	dc.b	nC3
000A9A5A                            
000A9A5A                            GentleBreeze_Loop06:
000A9A5A 10                         	dc.b	$10
000A9A5B E607                       	smpsAlterVol        $07
000A9A5D A5                         	dc.b	nC3
000A9A5E E6F9                       	smpsAlterVol        $F9
000A9A60 08                         	dc.b	$08
000A9A61 E607                       	smpsAlterVol        $07
000A9A63 A5                         	dc.b	nC3
000A9A64 E608                       	smpsAlterVol        $08
000A9A66 A5                         	dc.b	nC3
000A9A67 E6F1                       	smpsAlterVol        $F1
000A9A69 18                         	dc.b	$18
000A9A6A E607                       	smpsAlterVol        $07
000A9A6C 10                         	dc.b	$10
000A9A6D E608                       	smpsAlterVol        $08
000A9A6F A5                         	dc.b	nC3
000A9A70 E6F1                       	smpsAlterVol        $F1
000A9A72 A5                         	dc.b	nC3
000A9A73 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A9A78 A5                         	dc.b	nC3
000A9A79                            
000A9A79                            GentleBreeze_Loop07:
000A9A79 E607                       	smpsAlterVol        $07
000A9A7B A5                         	dc.b	nC3
000A9A7C E6F9                       	smpsAlterVol        $F9
000A9A7E 08                         	dc.b	$08
000A9A7F E607                       	smpsAlterVol        $07
000A9A81 A5                         	dc.b	nC3
000A9A82 E608                       	smpsAlterVol        $08
000A9A84 A5                         	dc.b	nC3
000A9A85 E6F1                       	smpsAlterVol        $F1
000A9A87 10                         	dc.b	$10
000A9A88 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A9A8D                            
000A9A8D                            GentleBreeze_Loop08:
000A9A8D A5                         	dc.b	nC3
000A9A8E E607                       	smpsAlterVol        $07
000A9A90 A5                         	dc.b	nC3
000A9A91 E6F9                       	smpsAlterVol        $F9
000A9A93 08                         	dc.b	$08
000A9A94 E607                       	smpsAlterVol        $07
000A9A96 A5                         	dc.b	nC3
000A9A97 E608                       	smpsAlterVol        $08
000A9A99 A5                         	dc.b	nC3
000A9A9A E6F1                       	smpsAlterVol        $F1
000A9A9C 18                         	dc.b	$18
000A9A9D E607                       	smpsAlterVol        $07
000A9A9F 10                         	dc.b	$10
000A9AA0 E608                       	smpsAlterVol        $08
000A9AA2 A5                         	dc.b	nC3
000A9AA3 E6F1                       	smpsAlterVol        $F1
000A9AA5 A5                         	dc.b	nC3
000A9AA6 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A9AAB A5                         	dc.b	nC3
000A9AAC E607                       	smpsAlterVol        $07
000A9AAE A5                         	dc.b	nC3
000A9AAF E6F9                       	smpsAlterVol        $F9
000A9AB1 08                         	dc.b	$08
000A9AB2 E607                       	smpsAlterVol        $07
000A9AB4 A5                         	dc.b	nC3
000A9AB5 E608                       	smpsAlterVol        $08
000A9AB7 A5                         	dc.b	nC3
000A9AB8 E6F1                       	smpsAlterVol        $F1
000A9ABA 10                         	dc.b	$10
000A9ABB E607                       	smpsAlterVol        $07
000A9ABD A5                         	dc.b	nC3
000A9ABE E6F9                       	smpsAlterVol        $F9
000A9AC0 08                         	dc.b	$08
000A9AC1 E607                       	smpsAlterVol        $07
000A9AC3 A5                         	dc.b	nC3
000A9AC4 E608                       	smpsAlterVol        $08
000A9AC6 A5                         	dc.b	nC3
000A9AC7 E6F1                       	smpsAlterVol        $F1
000A9AC9 01                         	dc.b	$01
000A9ACA                            
000A9ACA                            GentleBreeze_Jump01:
000A9ACA E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A9ACD E607                       	smpsAlterVol        $07
000A9ACF                            
000A9ACF                            GentleBreeze_Loop09:
000A9ACF 10                         	dc.b	$10
000A9AD0 E608                       	smpsAlterVol        $08
000A9AD2 A5                         	dc.b	nC3
000A9AD3 E6F1                       	smpsAlterVol        $F1
000A9AD5 08                         	dc.b	$08
000A9AD6 E60F                       	smpsAlterVol        $0F
000A9AD8 18                         	dc.b	$18
000A9AD9 E6F8                       	smpsAlterVol        $F8
000A9ADB F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A9AE0 10                         	dc.b	$10
000A9AE1 E608                       	smpsAlterVol        $08
000A9AE3 A5                         	dc.b	nC3
000A9AE4 E6F1                       	smpsAlterVol        $F1
000A9AE6 08                         	dc.b	$08
000A9AE7 E60F                       	smpsAlterVol        $0F
000A9AE9 18                         	dc.b	$18
000A9AEA E6F1                       	smpsAlterVol        $F1
000A9AEC                            
000A9AEC                            GentleBreeze_Loop0A:
000A9AEC 10                         	dc.b	$10
000A9AED E607                       	smpsAlterVol        $07
000A9AEF A5                         	dc.b	nC3
000A9AF0 E6F9                       	smpsAlterVol        $F9
000A9AF2 08                         	dc.b	$08
000A9AF3 E607                       	smpsAlterVol        $07
000A9AF5 A5                         	dc.b	nC3
000A9AF6 E608                       	smpsAlterVol        $08
000A9AF8 A5                         	dc.b	nC3
000A9AF9 E6F1                       	smpsAlterVol        $F1
000A9AFB 18                         	dc.b	$18
000A9AFC E607                       	smpsAlterVol        $07
000A9AFE 10                         	dc.b	$10
000A9AFF E608                       	smpsAlterVol        $08
000A9B01 A5                         	dc.b	nC3
000A9B02 E6F1                       	smpsAlterVol        $F1
000A9B04 A5                         	dc.b	nC3
000A9B05 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A9B0A A5                         	dc.b	nC3
000A9B0B                            
000A9B0B                            GentleBreeze_Loop0B:
000A9B0B E607                       	smpsAlterVol        $07
000A9B0D A5                         	dc.b	nC3
000A9B0E E6F9                       	smpsAlterVol        $F9
000A9B10 08                         	dc.b	$08
000A9B11 E607                       	smpsAlterVol        $07
000A9B13 A5                         	dc.b	nC3
000A9B14 E608                       	smpsAlterVol        $08
000A9B16 A5                         	dc.b	nC3
000A9B17 E6F1                       	smpsAlterVol        $F1
000A9B19 10                         	dc.b	$10
000A9B1A F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A9B1F                            
000A9B1F                            GentleBreeze_Loop0C:
000A9B1F A5                         	dc.b	nC3
000A9B20 E607                       	smpsAlterVol        $07
000A9B22 A5                         	dc.b	nC3
000A9B23 E6F9                       	smpsAlterVol        $F9
000A9B25 08                         	dc.b	$08
000A9B26 E607                       	smpsAlterVol        $07
000A9B28 A5                         	dc.b	nC3
000A9B29 E608                       	smpsAlterVol        $08
000A9B2B A5                         	dc.b	nC3
000A9B2C E6F1                       	smpsAlterVol        $F1
000A9B2E 18                         	dc.b	$18
000A9B2F E607                       	smpsAlterVol        $07
000A9B31 10                         	dc.b	$10
000A9B32 E608                       	smpsAlterVol        $08
000A9B34 A5                         	dc.b	nC3
000A9B35 E6F1                       	smpsAlterVol        $F1
000A9B37 A5                         	dc.b	nC3
000A9B38 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A9B3D A5                         	dc.b	nC3
000A9B3E E607                       	smpsAlterVol        $07
000A9B40 A5                         	dc.b	nC3
000A9B41 E6F9                       	smpsAlterVol        $F9
000A9B43 08                         	dc.b	$08
000A9B44 E607                       	smpsAlterVol        $07
000A9B46 A5                         	dc.b	nC3
000A9B47 E608                       	smpsAlterVol        $08
000A9B49 A5                         	dc.b	nC3
000A9B4A E6F1                       	smpsAlterVol        $F1
000A9B4C 10                         	dc.b	$10
000A9B4D E607                       	smpsAlterVol        $07
000A9B4F A5                         	dc.b	nC3
000A9B50 E6F9                       	smpsAlterVol        $F9
000A9B52 08                         	dc.b	$08
000A9B53 E607                       	smpsAlterVol        $07
000A9B55 A5                         	dc.b	nC3
000A9B56 E608                       	smpsAlterVol        $08
000A9B58 A5                         	dc.b	nC3
000A9B59 E6F1                       	smpsAlterVol        $F1
000A9B5B 01                         	dc.b	$01
000A9B5C E0C0                       	smpsPan             panCenter, $00
000A9B5E F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A9B61                            
000A9B61                            ; DAC Data
000A9B61                            GentleBreeze_DAC:
000A9B61 81                         	dc.b	dKick
000A9B62                            
000A9B62                            GentleBreeze_Loop00:
000A9B62 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9B68 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A9B6D 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9B78                            
000A9B78                            GentleBreeze_Loop01:
000A9B78 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9B7E F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A9B83 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9B8D                            
000A9B8D                            GentleBreeze_Jump00:
000A9B8D 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A9B91                            
000A9B91                            GentleBreeze_Loop02:
000A9B91 81                         	dc.b	dKick
000A9B92                            
000A9B92                            GentleBreeze_Loop03:
000A9B92 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A9B9E 088A                       	dc.b	$08, dLowTimpani
000A9BA0 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A9BA5 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A9BB1 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A9BB6 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A9BBB                            
000A9BBB                            GentleBreeze_Loop04:
000A9BBB 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9BC1 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A9BC6 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9BD1                            
000A9BD1                            GentleBreeze_Loop05:
000A9BD1 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9BD7 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A9BDC 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9BE6 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A9BE9                            
000A9BE9                            ; PSG 1 Data
000A9BE9                            GentleBreeze_PSG1:
000A9BE9 80                         	dc.b	nRst
000A9BEA                            
000A9BEA                            GentleBreeze_LoopPSG02:
000A9BEA 7F                         	dc.b	$7F
000A9BEB F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A9BF0 08                         	dc.b	$08
000A9BF1 EC04                       	smpsPSGAlterVol     $04
000A9BF3                            
000A9BF3                            GentleBreeze_JumpPSG01:
000A9BF3 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A9BFF A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A9C07                            
000A9C07                            GentleBreeze_LoopPSG03:
000A9C07 7F                         	dc.b	$7F
000A9C08 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A9C0D 08A3 01                    	dc.b	$08, nBb2, $01
000A9C10 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A9C13                            
000A9C13                            ; PSG2 Data
000A9C13                            GentleBreeze_PSG2:
000A9C13 80                         	dc.b	nRst
000A9C14                            
000A9C14                            GentleBreeze_LoopPSG00:
000A9C14 7F                         	dc.b	$7F
000A9C15 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A9C1A 08                         	dc.b	$08
000A9C1B EC04                       	smpsPSGAlterVol     $04
000A9C1D                            
000A9C1D                            GentleBreeze_JumpPSG00:
000A9C1D A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A9C29 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A9C31                            
000A9C31                            GentleBreeze_LoopPSG01:
000A9C31 7F                         	dc.b	$7F
000A9C32 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A9C37 08A8 01                    	dc.b	$08, nEb3, $01
000A9C3A F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A9C3D                            
000A9C3D                            GentleBreeze_Voices:
000A9C3D                            ;	Voice $00
000A9C3D                            ;	$0C
000A9C3D                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A9C3D                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A9C3D                            	smpsVcAlgorithm     $04
000A9C3D                            	smpsVcFeedback      $01
000A9C3D                            	smpsVcUnusedBits    $00
000A9C3D                            	smpsVcDetune        $07, $02, $07, $02
000A9C3D                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A9C3D                            	smpsVcRateScale     $00, $00, $00, $00
000A9C3D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9C3D                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C3D                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A9C3D                            	smpsVcDecayRate2    $01, $00, $00, $00
000A9C3D                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A9C3D                            	smpsVcReleaseRate   $09, $01, $04, $03
000A9C3D 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A9C56                            
000A9C56                            ;	Voice $01
000A9C56                            ;	$38
000A9C56                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A9C56                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A9C56                            	smpsVcAlgorithm     $00
000A9C56                            	smpsVcFeedback      $07
000A9C56                            	smpsVcUnusedBits    $00
000A9C56                            	smpsVcDetune        $03, $07, $01, $05
000A9C56                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A9C56                            	smpsVcRateScale     $00, $02, $00, $02
000A9C56                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9C56                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C56                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A9C56                            	smpsVcDecayRate2    $00, $00, $10, $00
000A9C56                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9C56                            	smpsVcReleaseRate   $08, $05, $05, $05
000A9C56 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A9C6F                            
000A9C6F                            ;	Voice $02
000A9C6F                            ;	$00
000A9C6F                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9C6F                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9C6F                            	smpsVcAlgorithm     $00
000A9C6F                            	smpsVcFeedback      $00
000A9C6F                            	smpsVcUnusedBits    $00
000A9C6F                            	smpsVcDetune        $00, $00, $00, $00
000A9C6F                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9C6F                            	smpsVcRateScale     $00, $00, $00, $00
000A9C6F                            	smpsVcAttackRate    $00, $00, $00, $00
000A9C6F                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C6F                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9C6F                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9C6F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9C6F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9C6F 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9C88                            
000A9C88                            ;	Voice $03
000A9C88                            ;	$36
000A9C88                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A9C88                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A9C88                            	smpsVcAlgorithm     $06
000A9C88                            	smpsVcFeedback      $06
000A9C88                            	smpsVcUnusedBits    $00
000A9C88                            	smpsVcDetune        $00, $00, $00, $00
000A9C88                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A9C88                            	smpsVcRateScale     $00, $00, $00, $00
000A9C88                            	smpsVcAttackRate    $1F, $00, $18, $16
000A9C88                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C88                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A9C88                            	smpsVcDecayRate2    $00, $00, $12, $00
000A9C88                            	smpsVcDecayLevel    $04, $04, $02, $00
000A9C88                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A9C88 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A9CA1                            
000A9CA1                            ;	Voice $04
000A9CA1                            ;	$07
000A9CA1                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A9CA1                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A9CA1                            	smpsVcAlgorithm     $07
000A9CA1                            	smpsVcFeedback      $00
000A9CA1                            	smpsVcUnusedBits    $00
000A9CA1                            	smpsVcDetune        $07, $06, $05, $00
000A9CA1                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A9CA1                            	smpsVcRateScale     $00, $01, $01, $01
000A9CA1                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A9CA1                            	smpsVcAmpMod        $00, $00, $00, $00
000A9CA1                            	smpsVcDecayRate1    $17, $17, $17, $17
000A9CA1                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9CA1                            	smpsVcDecayLevel    $02, $02, $02, $02
000A9CA1                            	smpsVcReleaseRate   $06, $06, $06, $06
000A9CA1 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9CBA                            
000A9CBA                            ;	Voice $05
000A9CBA                            ;	$3C
000A9CBA                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A9CBA                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A9CBA                            	smpsVcAlgorithm     $04
000A9CBA                            	smpsVcFeedback      $07
000A9CBA                            	smpsVcUnusedBits    $00
000A9CBA                            	smpsVcDetune        $06, $06, $02, $02
000A9CBA                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A9CBA                            	smpsVcRateScale     $00, $00, $00, $00
000A9CBA                            	smpsVcAttackRate    $0E, $14, $10, $13
000A9CBA                            	smpsVcAmpMod        $00, $00, $00, $00
000A9CBA                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A9CBA                            	smpsVcDecayRate2    $04, $04, $04, $04
000A9CBA                            	smpsVcDecayLevel    $02, $01, $01, $01
000A9CBA                            	smpsVcReleaseRate   $07, $07, $07, $07
000A9CBA 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A9CD3                            
000A9CD3                            
000A9CD4 00                         		even
000A9CD4                            ; ---------------------------------------------------------------------------
000A9CD4                            ; Sound	effect pointers
000A9CD4                            ; ---------------------------------------------------------------------------
000A9CD4 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A9CE0 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A9CEC 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A9CF8 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A9D04 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A9D10 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A9D1C 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A9D28 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A9D34 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A9D40 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A9D4C 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A9D58 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A9D64 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A9D70 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A9D7C 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A9D88 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A9D94 0000 0000                  SoundD0Index:	dc.l SoundD0
000A9D98                            SoundA0:	include	sound\jump.asm
000A9D98                            jump_Header:
000A9D98 =00000001                  smpsHeaderStartSong = 1
000A9D98 0000                       	smpsHeaderVoice     jump_Voices
000A9D9A 01                         	smpsHeaderTempoSFX  $01
000A9D9B 01                         	smpsHeaderChanSFX   $01
000A9D9C                            
000A9DA8                            
000A9DA8                            ; FM4 Data
000A9DA8                            jump_FM4:
000A9DAA E000                       	smpsPan             panNone, $00
000A9DAC E607                       	smpsAlterVol        $07
000A9DAE E0C0                       	smpsPan             panCenter, $00
000A9DB0 9903 B1                    	dc.b	nC2, $03, nC4
000A9DB3 E607                       	smpsAlterVol        $07
000A9DB5 E040                       	smpsPan             panRight, $00
000A9DB7 99B1                       	dc.b	nC2, nC4
000A9DB9 E60A                       	smpsAlterVol        $0A
000A9DBB E080                       	smpsPan             panLeft, $00
000A9DBD 99B1                       	dc.b	nC2, nC4
000A9DBF E603                       	smpsAlterVol        $03
000A9DC1 E0C0                       	smpsPan             panCenter, $00
000A9DC3 99B1                       	dc.b	nC2, nC4
000A9DC5 E000                       	smpsPan             panNone, $00
000A9DC7 803D                       	dc.b	nRst, $3D
000A9DC9 F2                         	smpsStop
000A9DCA                            
000A9DCA                            ; PSG3 Data
000A9DCA                            jump_PSG3:
000A9DCA F3E7                       	smpsPSGform         $E7
000A9DCC 8056                       	dc.b	nRst, $56
000A9DCE F2                         	smpsStop
000A9DCF                            
000A9DCF                            jump_Voices:
000A9DCF                            ;	Voice $00
000A9DCF                            ;	$3C
000A9DCF                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A9DCF                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A9DCF                            	smpsVcAlgorithm     $04
000A9DCF                            	smpsVcFeedback      $07
000A9DCF                            	smpsVcUnusedBits    $00
000A9DCF                            	smpsVcDetune        $00, $00, $00, $00
000A9DCF                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A9DCF                            	smpsVcRateScale     $00, $00, $00, $00
000A9DCF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9DCF                            	smpsVcAmpMod        $00, $00, $00, $00
000A9DCF                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A9DCF                            	smpsVcDecayRate2    $11, $00, $11, $00
000A9DCF                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A9DCF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9DCF 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9DE8                            
000A9DE8                            
000A9DE8                            		even
000A9DE8                            SoundA1:	incbin	sound\soundA1.bin
000A9E12                            		even
000A9E12                            SoundA2:	incbin	sound\soundA2.bin
000A9E32                            		even
000A9E32                            SoundA3:	incbin	sound\soundA3.bin
000A9E64                            		even
000A9E64                            SoundA4:	incbin	sound\soundA4.bin
000A9E9A                            		even
000A9E9A                            SoundA5:	include	sound\fart.asm
000A9E9A                            Fart_Header:
000A9E9A =00000001                  smpsHeaderStartSong = 1
000A9E9A 0000                       	smpsHeaderVoice     Fart_Voices
000A9E9C 01                         	smpsHeaderTempoSFX  $01
000A9E9D 04                         	smpsHeaderChanSFX   $04
000A9E9E                            
000A9EB6                            
000A9EB6                            Fart_FM3:
000A9EB8 E607                       	smpsAlterVol        $07
000A9EBA E0C0                       	smpsPan             panCenter, $00
000A9EBC F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9EC1 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A9EC4 E1FE                       	smpsAlterNote       $FE
000A9EC6 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A9EC9 E100                       	smpsAlterNote       $00
000A9ECB A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A9ED0 F2                         	smpsStop
000A9ED1                            
000A9ED1                            ; FM4 Data
000A9ED1                            Fart_FM4:
000A9ED3 E0C0                       	smpsPan             panCenter, $00
000A9ED5 8006                       	dc.b	nRst, $06
000A9ED9 E616                       	smpsAlterVol        $16
000A9EDB E080                       	smpsPan             panLeft, $00
000A9EDD F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9EE2 A212                       	dc.b	nA2, $12
000A9EE4 E60A                       	smpsAlterVol        $0A
000A9EE6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9EE9 E603                       	smpsAlterVol        $03
000A9EEB E7A2                       	dc.b	smpsNoAttack, nA2
000A9EED E603                       	smpsAlterVol        $03
000A9EEF E7A2                       	dc.b	smpsNoAttack, nA2
000A9EF1 E604                       	smpsAlterVol        $04
000A9EF3 E7A2                       	dc.b	smpsNoAttack, nA2
000A9EF5 E606                       	smpsAlterVol        $06
000A9EF7 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A9EFA E610                       	smpsAlterVol        $10
000A9EFC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9EFF E610                       	smpsAlterVol        $10
000A9F01 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A9F06 F2                         	smpsStop
000A9F07                            
000A9F07                            ; FM5 Data
000A9F07                            Fart_FM5:
000A9F09 E0C0                       	smpsPan             panCenter, $00
000A9F0B 8009                       	dc.b	nRst, $09
000A9F0F E616                       	smpsAlterVol        $16
000A9F11 E040                       	smpsPan             panRight, $00
000A9F13 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9F18 A215                       	dc.b	nA2, $15
000A9F1A E60A                       	smpsAlterVol        $0A
000A9F1C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9F1F E603                       	smpsAlterVol        $03
000A9F21 E7A2                       	dc.b	smpsNoAttack, nA2
000A9F23 E603                       	smpsAlterVol        $03
000A9F25 E7A2                       	dc.b	smpsNoAttack, nA2
000A9F27 E604                       	smpsAlterVol        $04
000A9F29 E7A2                       	dc.b	smpsNoAttack, nA2
000A9F2B E606                       	smpsAlterVol        $06
000A9F2D E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A9F30 E610                       	smpsAlterVol        $10
000A9F32 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9F35 E610                       	smpsAlterVol        $10
000A9F37 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A9F3C F2                         	smpsStop
000A9F3D                            
000A9F3D                            ; PSG3 Data
000A9F3D                            Fart_PSG3:
000A9F3D F2                         	smpsStop
000A9F3E                            
000A9F3E                            ; FM Voices
000A9F3E                            Fart_Voices:
000A9F3E                            ;	Voice $00
000A9F3E                            ;	$39
000A9F3E                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A9F3E                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A9F3E                            	smpsVcAlgorithm     $01
000A9F3E                            	smpsVcFeedback      $07
000A9F3E                            	smpsVcUnusedBits    $00
000A9F3E                            	smpsVcDetune        $00, $07, $03, $07
000A9F3E                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A9F3E                            	smpsVcRateScale     $00, $03, $03, $03
000A9F3E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9F3E                            	smpsVcAmpMod        $00, $00, $00, $00
000A9F3E                            	smpsVcDecayRate1    $00, $00, $00, $04
000A9F3E                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A9F3E                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A9F3E                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A9F3E 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A9F57                            
000A9F57                            ;	Voice $01
000A9F57                            ;	$00
000A9F57                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9F57                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9F57                            	smpsVcAlgorithm     $00
000A9F57                            	smpsVcFeedback      $00
000A9F57                            	smpsVcUnusedBits    $00
000A9F57                            	smpsVcDetune        $00, $00, $00, $00
000A9F57                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9F57                            	smpsVcRateScale     $00, $00, $00, $00
000A9F57                            	smpsVcAttackRate    $00, $00, $00, $00
000A9F57                            	smpsVcAmpMod        $00, $00, $00, $00
000A9F57                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9F57                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9F57                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9F57                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9F57 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9F57 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9F70                            		even
000A9F70                            SoundA6:	incbin	sound\soundA6.bin
000A9FA0                            		even
000A9FA0                            SoundA7:	incbin	sound\soundA7.bin
000A9FD0                            		even
000A9FD0                            SoundA8:	incbin	sound\soundA8.bin
000AA004                            		even
000AA004                            SoundA9:	incbin	sound\soundA9.bin
000AA016                            		even
000AA016                            SoundAA:	incbin	sound\soundAA.bin
000AA058                            		even
000AA058                            SoundAB:	incbin	sound\soundAB.bin
000AA078                            		even
000AA078                            SoundAC:	incbin	sound\soundAC.bin
000AA0AC                            		even
000AA0AC                            SoundAD:	incbin	sound\soundAD.bin
000AA0E2                            		even
000AA0E2                            SoundAE:	incbin	sound\soundAE.bin
000AA12C                            		even
000AA12C                            SoundAF:	incbin	sound\soundAF.bin
000AA15A                            		even
000AA15A                            SoundB0:	incbin	sound\soundB0.bin
000AA18C                            		even
000AA18C                            SoundB1:	incbin	sound\soundB1.bin
000AA1B8                            		even
000AA1B8                            SoundB2:	incbin	sound\soundB2.bin
000AA208                            		even
000AA208                            SoundB3:	incbin	sound\soundB3.bin
000AA252                            		even
000AA252                            SoundB4:	include	sound\soundB4.asm
000AA252                            SndB4_Bumper_Header:
000AA252 =00000001                  smpsHeaderStartSong = 1
000AA252 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA254 01                         	smpsHeaderTempoSFX  $01
000AA255 03                         	smpsHeaderChanSFX   $03
000AA256                            
000AA268                            
000AA268                            ; FM5 Data
000AA268                            SndB4_Bumper_FM5:
000AA26A F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA26D                            
000AA26D                            ; FM4 Data
000AA26D                            SndB4_Bumper_FM4:
000AA26D F2                         	smpsStop
000AA26E                            
000AA26E                            SndB4_Bumper_Jump00:
000AA26E A020                       	dc.b	nG2, $20
000AA270 F2                         	smpsStop
000AA271                            
000AA271                            ; FM3 Data
000AA271                            SndB4_Bumper_FM3:
000AA271 F2                         	smpsStop
000AA272                            
000AA272                            SndB4_Bumper_Voices:
000AA272                            ;	Voice $00
000AA272                            ;	$32
000AA272                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA272                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA272                            	smpsVcAlgorithm     $02
000AA272                            	smpsVcFeedback      $06
000AA272                            	smpsVcUnusedBits    $00
000AA272                            	smpsVcDetune        $07, $07, $02, $00
000AA272                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA272                            	smpsVcRateScale     $00, $00, $00, $00
000AA272                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA272                            	smpsVcAmpMod        $00, $00, $00, $00
000AA272                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA272                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA272                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA272                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA272 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA272 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA28C 00                         		even
000AA28C                            SoundB5:	incbin	sound\soundB5.bin
000AA2AA 00                         		even
000AA2AA                            SoundB6:	incbin	sound\soundB6.bin
000AA2C8                            		even
000AA2C8                            SoundB7:	incbin	sound\soundB7.bin
000AA304                            		even
000AA304                            SoundB8:	incbin	sound\soundB8.bin
000AA322                            		even
000AA322                            SoundB9:	incbin	sound\soundB9.bin
000AA386                            		even
000AA386                            SoundBA:	incbin	sound\soundBA.bin
000AA3EA                            		even
000AA3EA                            SoundBB:	incbin	sound\soundBB.bin
000AA416                            		even
000AA416                            SoundBC:	incbin	sound\soundBC.bin
000AA458                            		even
000AA458                            SoundBD:	incbin	sound\soundBD.bin
000AA4AC                            		even
000AA4AC                            SoundBE:	incbin	sound\soundBE.bin
000AA4E6                            		even
000AA4E6                            SoundBF:	incbin	sound\soundBF.bin
000AA558                            		even
000AA558                            SoundC0:	incbin	sound\soundC0.bin
000AA586                            		even
000AA586                            SoundC1:	incbin	sound\soundC1.bin
000AA5E0                            		even
000AA5E0                            SoundC2:	incbin	sound\soundC2.bin
000AA60A                            		even
000AA60A                            SoundC3:	incbin	sound\soundC3.bin
000AA684                            		even
000AA684                            SoundC4:	incbin	sound\soundC4.bin
000AA782                            		even
000AA782                            SoundC5:	incbin	sound\soundC5.bin
000AA7EA                            		even
000AA7EA                            SoundC6:	incbin	sound\soundC6.bin
000AA82C                            		even
000AA82C                            SoundC7:	incbin	sound\soundC7.bin
000AA85A                            		even
000AA85A                            SoundC8:	incbin	sound\soundC8.bin
000AA86C                            		even
000AA86C                            SoundC9:	incbin	sound\soundC9.bin
000AA89A                            		even
000AA89A                            SoundCA:	incbin	sound\soundCA.bin
000AA8C8                            		even
000AA8C8                            SoundCB:	incbin	sound\soundCB.bin
000AA914                            		even
000AA914                            SoundCC:	incbin	sound\C9.ssf
000AA942                            		even
000AA942                            SoundCD:	incbin	sound\soundCD.bin
000AA96E                            		even
000AA96E                            SoundCE:	incbin	sound\soundCE.bin
000AA98C 00                         		even
000AA98C                            SoundCF:	incbin	sound\soundCF.bin
000AA9C4                            		even
000AA9C4                            SoundD0:	incbin	sound\soundD0.bin
000AA9FE                            		even
000AA9FE                            SegaPCM:	incbin	sound\segapcm.bin
000C4B54                            SegaPCM_end:
000C4B54                            	even
000C4B54                            
000C4B54                            IdiotPCM:	incbin	sound\youare.bin
000CEC25                            IdiotPCM_end:
000CEC26 00                         	even
000CEC26                            
000CEC26                            Minecraft:	include	minecraft\code\main.asm
000CEC26                            ; Minecraft: Very Legacy Console Edition
000CEC26                            ; Main file
000CEC26                            
000CEC26                            ;	align	$20000
000CEC26                            	opt	l.
000CEC26                            	include	"minecraft\code\variables.asm"
000CEC26                            ; Minecraft: Very Legacy Console Edition
000CEC26                            ; Variable Definitions
000CEC26                            
000CEC26 =00000040                  MAP_HEIGHT	equ	64
000CEC26 =00000100                  MAP_WIDTH	equ	256
000CEC26                            
000CEC26                            		rsset	$FF0000
000CEC26 =00FF0000                  mcRAM		rs.b	0
000CEC26 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CEC26 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CEC26                            
000CEC26                            		rsset	$FFFF8000
000CEC26 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CEC26 =FFFF8E80                  planeBuffer_End	rs.b	0
000CEC26 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CEC26                            
000CEC26 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CEC26 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CEC26 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CEC26 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CEC26                            
000CEC26                            		rsset	__rs&$FFFFFF
000CEC26 =00FF8E88                  mcRAM_End	rs.b	0
000CEC26 =00FF8E88                  mcRAM_End	rs.b	0
000CEC26                            	include	"minecraft\code\macros.asm"
000CEC26                            ; =========================================================================================================================================================
000CEC26                            ; MegaDrive macros
000CEC26                            ; =========================================================================================================================================================
000CEC26                            clrRAM		macro	starta, enda
000CEC26                            		local	endaddr
000CEC26                            		if narg<2
000CEC26                            endaddr			EQUS	"\starta\_End"
000CEC26                            		else
000CEC26                            endaddr			EQUS	"\enda"
000CEC26                            		endif
000CEC26                            
000CEC26                            		moveq	#0,d0
000CEC26                            
000CEC26                            		if ((\starta)&$8000)=0
000CEC26                            			lea	\starta,a1
000CEC26                            		else
000CEC26                            			lea	(\starta).w,a1
000CEC26                            		endif
000CEC26                            		if (\starta)&1
000CEC26                            			move.b	d0,(a1)+
000CEC26                            		endif
000CEC26                            
000CEC26                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CEC26                            .Clear\@:	move.l	d0,(a1)+
000CEC26                            		dbf	d1,.Clear\@
000CEC26                            
000CEC26                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CEC26                            			move.w	d0,(a1)+
000CEC26                            		endif
000CEC26                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CEC26                            			move.b	d0,(a1)+
000CEC26                            		endif
000CEC26                            		endm
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; Disable interrupts
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; ARGUMENTS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; RETURNS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            intsOff		macros
000CEC26                            		ori	#$700,sr
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; Enable interrupts
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; ARGUMENTS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; RETURNS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            intsOn		macros
000CEC26                            		andi	#$F8FF,sr
000CEC26                            
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; VDP command instruction
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; ARGUMENTS:
000CEC26                            ;	addr	- Address in VDP memory
000CEC26                            ;	type	- Type of VDP memory
000CEC26                            ;	rwd	- VDP command
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; RETURNS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26 =00000021                  VRAM		EQU	%100001		; VRAM
000CEC26 =0000002B                  CRAM		EQU	%101011		; CRAM
000CEC26 =00000025                  VSRAM		EQU	%100101		; VSRAM
000CEC26 =0000000C                  READ		EQU	%001100		; VDP read
000CEC26 =00000007                  WRITE		EQU	%000111		; VDP write
000CEC26 =00000027                  DMA		EQU	%100111		; VDP DMA
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CEC26                            		if narg=5
000CEC26                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CEC26                            		elseif narg>=6
000CEC26                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CEC26                            		else
000CEC26                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CEC26                            		endif
000CEC26                            		endm
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; VDP DMA from 68000 memory to VDP memory
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; ARGUMENTS:
000CEC26                            ;	src	- Source address in 68000 memory
000CEC26                            ;	dest	- Destination address in VDP memory
000CEC26                            ;	len	- Length of data in bytes
000CEC26                            ;	type	- Type of VDP memory
000CEC26                            ;	a6.l	- VDP control port
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; RETURNS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            dma68k		macro	src, dest, len, type
000CEC26                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CEC26                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CEC26                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CEC26                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CEC26                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CEC26                            		move.w	(sp)+,(a6)
000CEC26                            		endm
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; Fill VRAM with byte
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; ARGUMENTS:
000CEC26                            ;	byte	- Byte to fill VRAM with
000CEC26                            ;	addr	- Address in VRAM
000CEC26                            ;	len	- Length of fill in bytes
000CEC26                            ;	a6.l	- VDP control port
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; RETURNS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            dmaFill		macro	byte, addr, len
000CEC26                            		move.w	#$8F01,(a6)
000CEC26                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CEC26                            		move.w	#$9780,(a6)
000CEC26                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CEC26                            		move.w	#(\byte)<<8,-4(a6)
000CEC26                            		waitDMA	(a6)
000CEC26                            		move.w	#$8F02,(a6)
000CEC26                            		endm
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; Copy a region of VRAM to a location in VRAM
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; ARGUMENTS:
000CEC26                            ;	src	- Source address in VRAM
000CEC26                            ;	dest	- Destination address in VRAM
000CEC26                            ;	len	- Length of copy in bytes
000CEC26                            ;	a6.l	- VDP control port
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            ; RETURNS:
000CEC26                            ;	Nothing
000CEC26                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEC26                            dmaCopy		macro	src, dest, len
000CEC26                            		move.w	#$8F01,(a6)
000CEC26                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CEC26                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CEC26                            		move.w	#$97C0,(a6)
000CEC26                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CEC26                            		waitDMA	(a6)
000CEC26                            		move.w	#$8F02,(a6)
000CEC26                            		endm
000CEC26                            		endm
000CEC26                            
000CEC26                            MC_Init:
000CEC26 007C 0700                  		intsOff						; disable CPU interrupts
000CEC2A 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CEC32                            
000CEC32 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CEC38 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CEC3C                            
000CEC3C 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CEC40 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CEC44 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CEC48 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CEC4C                            		
000CEC4C 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CEC50 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CEC54 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CEC58 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CEC5C 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CEC60                            
000CEC72 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CEC76                            
000CEC76                            .waitVBlank:	
000CEC76 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CEC78 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CEC7A                            
000CECAE                            
000CECAE 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CECB2 027C F8FF                  		intsOn						; enable CPU interrupts
000CECB6                            
000CECB6 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CECBA 43F8 8000                  		lea	(planeBuffer).w,a1
000CECBE 7E2E                       		moveq	#$2F-1,d7
000CECC0                            
000CECC0                            .loopLo:
000CECC0 32D8                       		move.w	(a0)+,(a1)+
000CECC2 51CF FFFC                  		dbf	d7,.loopLo
000CECC6                            
000CECC6 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CECCA 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CECCE 7E2E                       		moveq	#$2F-1,d7
000CECD0                            
000CECD0                            .loopHi:
000CECD0 303C 8000                  		move.w	#$8000,d0
000CECD4 8058                       		or.w	(a0)+,d0
000CECD6 32C0                       		move.w	d0,(a1)+
000CECD8 51CF FFF6                  		dbf	d7,.loopHi
000CECDC                            
000CECDC 6000 FFFE                  		bra.w	*					; spin infinitely
000CECE0                            
000CECE0                            ; ===========================================================================
000CECE0                            ; ---------------------------------------------------------------------------
000CECE0                            ; Clear The Screen
000CECE0                            ; ---------------------------------------------------------------------------
000CECE0                            MC_ClearScreen:
000CECE0 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CECE4                            
000CECE4 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CECEA 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CECEE 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CECF4 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CECFA                            
000CECFA 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CECFC 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CECFE                            
000CECFE 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CED04 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CED08 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CED0E 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CED14                            
000CED14 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CED16 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CED18                            
000CED18 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CED1E 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CED22 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CED28 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CED2E                            
000CED2E 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CED30 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CED32                            
000CED32 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CED36 4E75                       		rts						; return
000CED38                            ; ---------------------------------------------------------------------------
000CED38                            
000CED38                            ; ===========================================================================
000CED38                            ; ---------------------------------------------------------------------------
000CED38                            ; VBlank Interrupt
000CED38                            ; ---------------------------------------------------------------------------
000CED38                            MC_VInt:
000CED52                            
000CED52 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CED5C 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CED62                            
000CED62                            
000CED62 4E73                       		rte						; return
000CED64                            ; ---------------------------------------------------------------------------
000CED64                            
000CED64                            block_entry	macro	tileID, palLine, priority
000CED64                            	if (narg<3)
000CED64                            		dc.w	(palLine<<13)|tileID
000CED64                            	else
000CED64                            		dc.w	$8000|(palLine<<13)|tileID
000CED64                            	endif
000CED64                            		endm
000CED64                            
000CED64                            MC_BlockRender:
000CEDA4                            
000CEDC2                            
000CEDC2                            ; ---------------------------------------------------------------------------
000CEDC2                            MC_Palette:
000CEDC2 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CEDE2 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CEE02 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CEE22 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CEE42                            ; ---------------------------------------------------------------------------
000CEE42                            MC_Terrain:
000CEE42                            	incbin	"minecraft\assets\bin\terrain.bin"
000CF2C2                            MC_Terrain_End:
000CF2C2                            ; ---------------------------------------------------------------------------
000CF2C2                            ; ---------------------------------------------------------------------------
000CF2C2                            ; end of 'ROM'
000CF2C2                            EndOfRom:
000CF2C2                            
000CF2C2                            
